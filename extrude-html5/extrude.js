// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;



// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort();
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}


var Runtime = {
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html





/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  assert(__cxa_demangle_func);
  try {
    var s = func;
    if (s.startsWith('__Z'))
      s = s.substr(1);
    var len = lengthBytesUTF8(s)+1;
    var buf = _malloc(len);
    stringToUTF8(s, buf, len);
    var status = _malloc(4);
    var ret = __cxa_demangle_func(buf, 0, 0, status);
    if (HEAP32[((status)>>2)] === 0 && ret) {
      return UTF8ToString(ret);
    }
    // otherwise, libcxxabi failed
  } catch(e) {
    // ignore problems here
  } finally {
    if (buf) _free(buf);
    if (status) _free(status);
    if (ret) _free(ret);
  }
  // failure when using libcxxabi, don't demangle
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 2186096,
    STACKTOP = STACK_BASE,
    STACK_MAX = 7428976,
    DYNAMIC_BASE = 7428976,
    DYNAMICTOP_PTR = 2186064;




var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;






// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}



var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];

function _sapp_js_add_beforeunload_listener(){ Module.sokol_beforeunload = function(event) { if (__sapp_html5_get_ask_leave_site() != 0) { event.preventDefault(); event.returnValue = ' '; } }; window.addEventListener('beforeunload', Module.sokol_beforeunload); }
function _sapp_js_add_clipboard_listener(){ Module.sokol_paste = function(event) { var pasted_str = event.clipboardData.getData('text'); ccall('_sapp_emsc_onpaste', 'void', ['string'], [pasted_str]); }; window.addEventListener('paste', Module.sokol_paste); }
function _sapp_js_add_dragndrop_listeners(canvas_name_cstr){ Module.sokol_drop_files = []; var canvas_name = UTF8ToString(canvas_name_cstr); var canvas = document.getElementById(canvas_name); Module.sokol_dragenter = function(event) { event.stopPropagation(); event.preventDefault(); }; Module.sokol_dragleave = function(event) { event.stopPropagation(); event.preventDefault(); }; Module.sokol_dragover = function(event) { event.stopPropagation(); event.preventDefault(); }; Module.sokol_drop = function(event) { event.stopPropagation(); event.preventDefault(); var files = event.dataTransfer.files; Module.sokol_dropped_files = files; __sapp_emsc_begin_drop(files.length); var i; for (i = 0; i < files.length; i++) { ccall('_sapp_emsc_drop', 'void', ['number', 'string'], [i, files[i].name]); } __sapp_emsc_end_drop(event.clientX, event.clientY); }; canvas.addEventListener('dragenter', Module.sokol_dragenter, false); canvas.addEventListener('dragleave', Module.sokol_dragleave, false); canvas.addEventListener('dragover', Module.sokol_dragover, false); canvas.addEventListener('drop', Module.sokol_drop, false); }
function _sapp_js_create_textfield(){ var _sapp_inp = document.createElement("input"); _sapp_inp.type = "text"; _sapp_inp.id = "_sokol_app_input_element"; _sapp_inp.autocapitalize = "none"; _sapp_inp.addEventListener("focusout", function(_sapp_event) { __sapp_emsc_notify_keyboard_hidden() }); document.body.append(_sapp_inp); }
function _sapp_js_dropped_file_size(index){ if ((index < 0) || (index >= Module.sokol_dropped_files.length)) { return 0; } else { return Module.sokol_dropped_files[index].size; } }
function _sapp_js_exit_pointerlock(){ if (document.exitPointerLock) { document.exitPointerLock(); } }
function _sapp_js_fetch_dropped_file(index,callback,buf_ptr,buf_size,user_data){ var reader = new FileReader(); reader.onload = function(loadEvent) { var content = loadEvent.target.result; if (content.byteLength > buf_size) { __sapp_emsc_invoke_fetch_cb(index, 0, 1, callback, 0, buf_ptr, buf_size, user_data); } else { HEAPU8.set(new Uint8Array(content), buf_ptr); __sapp_emsc_invoke_fetch_cb(index, 1, 0, callback, content.byteLength, buf_ptr, buf_size, user_data); } }; reader.onerror = function() { __sapp_emsc_invoke_fetch_cb(index, 0, 2, callback, 0, buf_ptr, buf_size, user_data); }; reader.readAsArrayBuffer(Module.sokol_dropped_files[index]); }
function _sapp_js_focus_textfield(){ document.getElementById("_sokol_app_input_element").focus(); }
function _sapp_js_pointer_init(c_str_target){ var target_str = UTF8ToString(c_str_target); Module.sapp_emsc_target = document.getElementById(target_str); if (!Module.sapp_emsc_target) { console.log("sokol_app.h: invalid target:" + target_str); } if (!Module.sapp_emsc_target.requestPointerLock) { console.log("sokol_app.h: target doesn't support requestPointerLock:" + target_str); } }
function _sapp_js_remove_beforeunload_listener(){ window.removeEventListener('beforeunload', Module.sokol_beforeunload); }
function _sapp_js_remove_clipboard_listener(){ window.removeEventListener('paste', Module.sokol_paste); }
function _sapp_js_remove_dragndrop_listeners(canvas_name_cstr){ var canvas_name = UTF8ToString(canvas_name_cstr); var canvas = document.getElementById(canvas_name); canvas.removeEventListener('dragenter', Module.sokol_dragenter); canvas.removeEventListener('dragleave', Module.sokol_dragleave); canvas.removeEventListener('dragover', Module.sokol_dragover); canvas.removeEventListener('drop', Module.sokol_drop); }
function _sapp_js_request_pointerlock(){ if (Module.sapp_emsc_target) { if (Module.sapp_emsc_target.requestPointerLock) { Module.sapp_emsc_target.requestPointerLock(); } } }
function _sapp_js_unfocus_textfield(){ document.getElementById("_sokol_app_input_element").blur(); }
function _sapp_js_write_clipboard(c_str){ var str = UTF8ToString(c_str); var ta = document.createElement('textarea'); ta.setAttribute('autocomplete', 'off'); ta.setAttribute('autocorrect', 'off'); ta.setAttribute('autocapitalize', 'off'); ta.setAttribute('spellcheck', 'false'); ta.style.left = -100 + 'px'; ta.style.top = -100 + 'px'; ta.style.height = 1; ta.style.width = 1; ta.value = str; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); document.body.removeChild(ta); }
function _saudio_js_buffer_frames(){ if (Module._saudio_node) { return Module._saudio_node.bufferSize; } else { return 0; } }
function _saudio_js_init(sample_rate,num_channels,buffer_size){ Module._saudio_context = null; Module._saudio_node = null; if (typeof AudioContext !== 'undefined') { Module._saudio_context = new AudioContext({ sampleRate: sample_rate, latencyHint: 'interactive', }); } else if (typeof webkitAudioContext !== 'undefined') { Module._saudio_context = new webkitAudioContext({ sampleRate: sample_rate, latencyHint: 'interactive', }); } else { Module._saudio_context = null; console.log('sokol_audio.h: no WebAudio support'); } if (Module._saudio_context) { console.log('sokol_audio.h: sample rate ', Module._saudio_context.sampleRate); Module._saudio_node = Module._saudio_context.createScriptProcessor(buffer_size, 0, num_channels); Module._saudio_node.onaudioprocess = function pump_audio(event) { var num_frames = event.outputBuffer.length; var ptr = __saudio_emsc_pull(num_frames); if (ptr) { var num_channels = event.outputBuffer.numberOfChannels; for (var chn = 0; chn < num_channels; chn++) { var chan = event.outputBuffer.getChannelData(chn); for (var i = 0; i < num_frames; i++) { chan[i] = HEAPF32[(ptr>>2) + ((num_channels*i)+chn)] } } } }; Module._saudio_node.connect(Module._saudio_context.destination); var resume_webaudio = function() { if (Module._saudio_context) { if (Module._saudio_context.state === 'suspended') { Module._saudio_context.resume(); } } }; document.addEventListener('click', resume_webaudio, {once:true}); document.addEventListener('touchstart', resume_webaudio, {once:true}); document.addEventListener('keydown', resume_webaudio, {once:true}); return 1; } else { return 0; } }
function _saudio_js_sample_rate(){ if (Module._saudio_context) { return Module._saudio_context.sampleRate; } else { return 0; } }
function _saudio_js_shutdown(){ if (Module._saudio_context !== null) { if (Module._saudio_node) { Module._saudio_node.disconnect(); } Module._saudio_context.close(); Module._saudio_context = null; Module._saudio_node = null; } }
function _sfetch_js_send_get_request(slot_id,path_cstr,offset,bytes_to_read,buf_ptr,buf_size){ var path_str = UTF8ToString(path_cstr); var req = new XMLHttpRequest(); req.open('GET', path_str); req.responseType = 'arraybuffer'; var need_range_request = (bytes_to_read > 0); if (need_range_request) { req.setRequestHeader('Range', 'bytes='+offset+'-'+(offset+bytes_to_read-1)); } req.onreadystatechange = function() { if (this.readyState == this.DONE) { if ((this.status == 206) || ((this.status == 200) && !need_range_request)) { var u8_array = new Uint8Array(req.response); var content_fetched_size = u8_array.length; if (content_fetched_size <= buf_size) { HEAPU8.set(u8_array, buf_ptr); __sfetch_emsc_get_response(slot_id, bytes_to_read, content_fetched_size); } else { __sfetch_emsc_failed_buffer_too_small(slot_id); } } else { __sfetch_emsc_failed_http_status(slot_id, this.status); } } }; req.send(); }
function _sfetch_js_send_head_request(slot_id,path_cstr){ var path_str = UTF8ToString(path_cstr); var req = new XMLHttpRequest(); req.open('HEAD', path_str); req.onreadystatechange = function() { if (this.readyState == this.DONE) { if (this.status == 200) { var content_length = this.getResponseHeader('Content-Length'); __sfetch_emsc_head_response(slot_id, content_length); } else { __sfetch_emsc_failed_http_status(slot_id, this.status); } } }; req.send(); }
function _stm_js_perfnow(){ return performance.now(); }



// STATICTOP = STATIC_BASE + 2186088;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "extrude.html.mem";





/* no memory initializer */
var tempDoublePtr = 2186080

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___gxx_personality_v0() {
    }

  
    

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};var SYSCALLS={buffers:[null,[],[]],printChar:function (stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
      },getZero:function () {
        SYSCALLS.get();
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      Module['abort']();
    }

   

   

  function _emscripten_get_device_pixel_ratio() {
      return window.devicePixelRatio || 1.0;
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function () {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      }};
  
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      try {
        // The sensible "default" target varies between events, but use window as the default
        // since DOM events mostly can default to that. Specific callback registrations
        // override their own defaults.
        if (!target) return window;
        if (typeof target === "number") target = __specialEventTargets[target] || UTF8ToString(target);
        if (target === '#window') return window;
        else if (target === '#document') return document;
        else if (target === '#screen') return screen;
        else if (target === '#canvas') return Module['canvas'];
        return (typeof target === 'string') ? document.getElementById(target) : target;
      } catch(e) {
        // In Web Workers, some objects above, such as '#document' do not exist. Gracefully
        // return null for them.
        return null;
      }
    }function _emscripten_get_element_css_size(target, width, height) {
      target = target ? __findEventTarget(target) : Module['canvas'];
      if (!target) return -4;
  
      if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[((width)>>3)]=rect.right - rect.left;
        HEAPF64[((height)>>3)]=rect.bottom - rect.top;
      } else {
        HEAPF64[((width)>>3)]=target.clientWidth;
        HEAPF64[((height)>>3)]=target.clientHeight;
      }
  
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_request_animation_frame_loop(cb, userData) {
      function tick(timeStamp) {
        if (dynCall_idi(cb, timeStamp, userData)) {
          requestAnimationFrame(tick);
        }
      }
      return requestAnimationFrame(tick);
    }

  
  function __findCanvasEventTarget(target) {
      if (typeof target === 'number') target = UTF8ToString(target);
      if (!target || target === '#canvas') {
        if (typeof GL !== 'undefined' && GL.offscreenCanvases['canvas']) return GL.offscreenCanvases['canvas']; // TODO: Remove this line, target '#canvas' should refer only to Module['canvas'], not to GL.offscreenCanvases['canvas'] - but need stricter tests to be able to remove this line.
        return Module['canvas'];
      }
      if (typeof GL !== 'undefined' && GL.offscreenCanvases[target]) return GL.offscreenCanvases[target];
      return __findEventTarget(target);
    }function _emscripten_set_canvas_element_size(target, width, height) {
      var canvas = __findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    }

  
  function __registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc( 164 );
  
      var keyEventHandlerFunc = function(event) {
        var e = event || window.event;
  
        var keyEventData = JSEvents.keyEvent;
        stringToUTF8(e.key ? e.key : "", keyEventData + 0, 32);
        stringToUTF8(e.code ? e.code : "", keyEventData + 32, 32);
        HEAP32[(((keyEventData)+(64))>>2)]=e.location;
        HEAP32[(((keyEventData)+(68))>>2)]=e.ctrlKey;
        HEAP32[(((keyEventData)+(72))>>2)]=e.shiftKey;
        HEAP32[(((keyEventData)+(76))>>2)]=e.altKey;
        HEAP32[(((keyEventData)+(80))>>2)]=e.metaKey;
        HEAP32[(((keyEventData)+(84))>>2)]=e.repeat;
        stringToUTF8(e.locale ? e.locale : "", keyEventData + 88, 32);
        stringToUTF8(e.char ? e.char : "", keyEventData + 120, 32);
        HEAP32[(((keyEventData)+(152))>>2)]=e.charCode;
        HEAP32[(((keyEventData)+(156))>>2)]=e.keyCode;
        HEAP32[(((keyEventData)+(160))>>2)]=e.which;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_keydown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);
      return 0;
    }

  function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
      return 0;
    }

  function _emscripten_set_keyup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);
      return 0;
    }

  
  
  function __fillMouseEventData(eventStruct, e, target) {
      HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
      HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
      HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
      HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
      HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
      HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
      HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
      HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
      HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
      HEAP16[(((eventStruct)+(40))>>1)]=e.button;
      HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
      HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
      HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
      if (Module['canvas']) {
        var rect = Module['canvas'].getBoundingClientRect();
        HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
      } else { // Canvas is not initialized, return 0.
        HEAP32[(((eventStruct)+(60))>>2)]=0;
        HEAP32[(((eventStruct)+(64))>>2)]=0;
      }
      if (target) {
        var rect = JSEvents.getBoundingClientRectOrZeros(target);
        HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;
      } else { // No specific target passed, return 0.
        HEAP32[(((eventStruct)+(52))>>2)]=0;
        HEAP32[(((eventStruct)+(56))>>2)]=0;
      }
      // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/emscripten-core/emscripten/pull/4997
      // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
      if (e.type !== 'wheel' && e.type !== 'mousewheel') {
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      }
    }function __registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 72 );
      target = __findEventTarget(target);
  
      var mouseEventHandlerFunc = function(event) {
        var e = event || window.event;
  
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        __fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture
      };
      // In IE, mousedown events don't either allow deferred calls to be run!
      if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_mousedown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);
      return 0;
    }

  function _emscripten_set_mouseenter_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter", targetThread);
      return 0;
    }

  function _emscripten_set_mouseleave_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave", targetThread);
      return 0;
    }

  function _emscripten_set_mousemove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);
      return 0;
    }

  function _emscripten_set_mouseup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);
      return 0;
    }

  
  
  function __fillPointerlockChangeEventData(eventStruct, e) {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      HEAP32[((eventStruct)>>2)]=isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
      stringToUTF8(nodeName, eventStruct + 4, 128);
      stringToUTF8(id, eventStruct + 132, 128);
    }function __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.pointerlockChangeEvent) JSEvents.pointerlockChangeEvent = _malloc( 260 );
  
      var pointerlockChangeEventHandlerFunc = function(event) {
        var e = event || window.event;
  
        var pointerlockChangeEvent = JSEvents.pointerlockChangeEvent;
        __fillPointerlockChangeEventData(pointerlockChangeEvent, e);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, pointerlockChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: pointerlockChangeEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_pointerlockchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
  
      target = target ? __findEventTarget(target) : __specialEventTargets[1]; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
      if (!target) return -4;
      __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange", targetThread);
      __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange", targetThread);
      __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange", targetThread);
      __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange", targetThread);
      return 0;
    }

  
  function __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
      var pointerlockErrorEventHandlerFunc = function(event) {
        var e = event || window.event;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, 0, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: pointerlockErrorEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_pointerlockerror_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
        return -1;
      }
  
      target = target ? __findEventTarget(target) : __specialEventTargets[1]; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
  
      if (!target) return -4;
      __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "pointerlockerror", targetThread);
      __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "mozpointerlockerror", targetThread);
      __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "webkitpointerlockerror", targetThread);
      __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "mspointerlockerror", targetThread);
      return 0;
    }

  
  function __registerUiEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.uiEvent) JSEvents.uiEvent = _malloc( 36 );
  
      if (eventTypeString == "scroll" && !target) {
        target = document; // By default read scroll events on document rather than window.
      } else {
        target = __findEventTarget(target);
      }
  
      var uiEventHandlerFunc = function(event) {
        var e = event || window.event;
        if (e.target != target) {
          // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
          // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
          // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
          // causing a new scroll, etc..
          return;
        }
        var scrollPos = JSEvents.pageScrollPos();
  
        var uiEvent = JSEvents.uiEvent;
        HEAP32[((uiEvent)>>2)]=e.detail;
        HEAP32[(((uiEvent)+(4))>>2)]=document.body.clientWidth;
        HEAP32[(((uiEvent)+(8))>>2)]=document.body.clientHeight;
        HEAP32[(((uiEvent)+(12))>>2)]=window.innerWidth;
        HEAP32[(((uiEvent)+(16))>>2)]=window.innerHeight;
        HEAP32[(((uiEvent)+(20))>>2)]=window.outerWidth;
        HEAP32[(((uiEvent)+(24))>>2)]=window.outerHeight;
        HEAP32[(((uiEvent)+(28))>>2)]=scrollPos[0];
        HEAP32[(((uiEvent)+(32))>>2)]=scrollPos[1];
        if (dynCall_iiii(callbackfunc, eventTypeId, uiEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: uiEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_resize_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);
      return 0;
    }

  
  function __registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1684 );
  
      target = __findEventTarget(target);
  
      var touchEventHandlerFunc = function(event) {
        var e = event || window.event;
  
        var touches = {};
        for(var i = 0; i < e.touches.length; ++i) {
          var touch = e.touches[i];
          touches[touch.identifier] = touch;
        }
        for(var i = 0; i < e.changedTouches.length; ++i) {
          var touch = e.changedTouches[i];
          touches[touch.identifier] = touch;
          touch.changed = true;
        }
        for(var i = 0; i < e.targetTouches.length; ++i) {
          var touch = e.targetTouches[i];
          touches[touch.identifier].onTarget = true;
        }
  
        var touchEvent = JSEvents.touchEvent;
        var ptr = touchEvent;
        HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
        HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
        HEAP32[(((ptr)+(12))>>2)]=e.altKey;
        HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
        ptr += 20; // Advance to the start of the touch array.
        var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
        var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
        var numTouches = 0;
        for(var i in touches) {
          var t = touches[i];
          HEAP32[((ptr)>>2)]=t.identifier;
          HEAP32[(((ptr)+(4))>>2)]=t.screenX;
          HEAP32[(((ptr)+(8))>>2)]=t.screenY;
          HEAP32[(((ptr)+(12))>>2)]=t.clientX;
          HEAP32[(((ptr)+(16))>>2)]=t.clientY;
          HEAP32[(((ptr)+(20))>>2)]=t.pageX;
          HEAP32[(((ptr)+(24))>>2)]=t.pageY;
          HEAP32[(((ptr)+(28))>>2)]=t.changed;
          HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
          if (canvasRect) {
            HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
            HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
          } else {
            HEAP32[(((ptr)+(44))>>2)]=0;
            HEAP32[(((ptr)+(48))>>2)]=0;            
          }
          HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
          HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
  
          ptr += 52;
  
          if (++numTouches >= 32) {
            break;
          }
        }
        HEAP32[((touchEvent)>>2)]=numTouches;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }

  
  function __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
  
      if (!target) target = Module['canvas'];
  
      var webGlEventHandlerFunc = function(event) {
        var e = event || window.event;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, 0, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: webGlEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_webglcontextlost_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 31, "webglcontextlost", targetThread);
      return 0;
    }

  function _emscripten_set_webglcontextrestored_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 32, "webglcontextrestored", targetThread);
      return 0;
    }

  
  function __registerWheelEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.wheelEvent) JSEvents.wheelEvent = _malloc( 104 );
  
      // The DOM Level 3 events spec event 'wheel'
      var wheelHandlerFunc = function(event) {
        var e = event || window.event;
        var wheelEvent = JSEvents.wheelEvent;
        __fillMouseEventData(wheelEvent, e, target);
        HEAPF64[(((wheelEvent)+(72))>>3)]=e["deltaX"];
        HEAPF64[(((wheelEvent)+(80))>>3)]=e["deltaY"];
        HEAPF64[(((wheelEvent)+(88))>>3)]=e["deltaZ"];
        HEAP32[(((wheelEvent)+(96))>>2)]=e["deltaMode"];
        if (dynCall_iiii(callbackfunc, eventTypeId, wheelEvent, userData)) e.preventDefault();
      };
      // The 'mousewheel' event as implemented in Safari 6.0.5
      var mouseWheelHandlerFunc = function(event) {
        var e = event || window.event;
        __fillMouseEventData(JSEvents.wheelEvent, e, target);
        HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
        HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
        HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
        HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
        var shouldCancel = dynCall_iiii(callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
        if (shouldCancel) {
          e.preventDefault();
        }
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_wheel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      target = __findEventTarget(target);
      if (typeof target.onwheel !== 'undefined') {
        __registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
        return 0;
      } else if (typeof target.onmousewheel !== 'undefined') {
        __registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel", targetThread);
        return 0;
      } else {
        return -1;
      }
    }

  
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes));
  
  
        return ctx && GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function (contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};
  
  var __emscripten_webgl_power_preferences=['default', 'low-power', 'high-performance'];function _emscripten_webgl_do_create_context(target, attributes) {
      var contextAttributes = {};
      var a = attributes >> 2;
      contextAttributes['alpha'] = !!HEAP32[a + (0>>2)];
      contextAttributes['depth'] = !!HEAP32[a + (4>>2)];
      contextAttributes['stencil'] = !!HEAP32[a + (8>>2)];
      contextAttributes['antialias'] = !!HEAP32[a + (12>>2)];
      contextAttributes['premultipliedAlpha'] = !!HEAP32[a + (16>>2)];
      contextAttributes['preserveDrawingBuffer'] = !!HEAP32[a + (20>>2)];
      var powerPreference = HEAP32[a + (24>>2)];
      contextAttributes['powerPreference'] = __emscripten_webgl_power_preferences[powerPreference];
      contextAttributes['failIfMajorPerformanceCaveat'] = !!HEAP32[a + (28>>2)];
      contextAttributes.majorVersion = HEAP32[a + (32>>2)];
      contextAttributes.minorVersion = HEAP32[a + (36>>2)];
      contextAttributes.enableExtensionsByDefault = HEAP32[a + (40>>2)];
      contextAttributes.explicitSwapControl = HEAP32[a + (44>>2)];
      contextAttributes.proxyContextToMainThread = HEAP32[a + (48>>2)];
      contextAttributes.renderViaOffscreenBackBuffer = HEAP32[a + (52>>2)];
  
      var canvas = __findCanvasEventTarget(target);
  
  
  
      if (!canvas) {
        return 0;
      }
  
      if (contextAttributes.explicitSwapControl) {
        return 0;
      }
  
  
      var contextHandle = GL.createContext(canvas, contextAttributes);
      return contextHandle;
    }function _emscripten_webgl_create_context(a0,a1
  /*``*/) {
  return _emscripten_webgl_do_create_context(a0,a1);
  }

  
  function _emscripten_webgl_enable_extension_calling_thread(contextHandle, extension) {
      var context = GL.getContext(contextHandle);
      var extString = UTF8ToString(extension);
      if (extString.indexOf('GL_') == 0) extString = extString.substr(3); // Allow enabling extensions both with "GL_" prefix and without.
      var ext = context.GLctx.getExtension(extString);
      return !!ext;
    }function _emscripten_webgl_enable_extension(a0,a1
  /*``*/) {
  return _emscripten_webgl_enable_extension_calling_thread(a0,a1);
  }

  function _emscripten_webgl_init_context_attributes(attributes) {
      var a = attributes >> 2;
      for(var i = 0; i < (56>>2); ++i) {
        HEAP32[a+i] = 0;
      }
  
      HEAP32[a + (0>>2)] =
      HEAP32[a + (4>>2)] = 
      HEAP32[a + (12>>2)] = 
      HEAP32[a + (16>>2)] = 
      HEAP32[a + (32>>2)] = 
      HEAP32[a + (40>>2)] = 1;
  
    }

  function _emscripten_webgl_make_context_current(contextHandle) {
      var success = GL.makeContextCurrent(contextHandle);
      return success ? 0 : -5;
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetError() {
      // First return any GL error generated by the emscripten library_webgl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else
      { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = stringToNewUTF8(gl_exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  var __colorChannelsInGlTextureFormat={6402:1,6406:1,6407:3,6408:4,6409:1,6410:2,35904:3,35906:4};
  
  var __sizeOfGlTextureElementType={5121:1,5123:2,5125:4,5126:4,32819:2,32820:2,33635:2,34042:4,36193:2};function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
      if (!sizePerPixel) {
        GL.recordError(0x0500); // GL_INVALID_ENUM
        return;
      }
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      var end = pixels + bytes;
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray(pixels, end);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray(pixels>>2, end>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray(pixels>>2, end>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray(pixels>>1, end>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _glUniform1fv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform2fv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _glUniform3fv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _glUniform4fv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }



  
   

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

   

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    } 
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
var GLctx; GL.init();
var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Math_floor,Math_ceil,Int8Array,Int32Array


var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN }

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv,
  "___assert_fail": ___assert_fail,
  "___cxa_allocate_exception": ___cxa_allocate_exception,
  "___cxa_begin_catch": ___cxa_begin_catch,
  "___cxa_find_matching_catch": ___cxa_find_matching_catch,
  "___cxa_free_exception": ___cxa_free_exception,
  "___cxa_throw": ___cxa_throw,
  "___gxx_personality_v0": ___gxx_personality_v0,
  "___resumeException": ___resumeException,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall146": ___syscall146,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize,
  "__embind_register_bool": __embind_register_bool,
  "__embind_register_emval": __embind_register_emval,
  "__embind_register_float": __embind_register_float,
  "__embind_register_integer": __embind_register_integer,
  "__embind_register_memory_view": __embind_register_memory_view,
  "__embind_register_std_string": __embind_register_std_string,
  "__embind_register_std_wstring": __embind_register_std_wstring,
  "__embind_register_void": __embind_register_void,
  "__emval_decref": __emval_decref,
  "__emval_register": __emval_register,
  "__fillMouseEventData": __fillMouseEventData,
  "__fillPointerlockChangeEventData": __fillPointerlockChangeEventData,
  "__findCanvasEventTarget": __findCanvasEventTarget,
  "__findEventTarget": __findEventTarget,
  "__glGenObject": __glGenObject,
  "__registerKeyEventCallback": __registerKeyEventCallback,
  "__registerMouseEventCallback": __registerMouseEventCallback,
  "__registerPointerlockChangeEventCallback": __registerPointerlockChangeEventCallback,
  "__registerPointerlockErrorEventCallback": __registerPointerlockErrorEventCallback,
  "__registerTouchEventCallback": __registerTouchEventCallback,
  "__registerUiEventCallback": __registerUiEventCallback,
  "__registerWebGlEventCallback": __registerWebGlEventCallback,
  "__registerWheelEventCallback": __registerWheelEventCallback,
  "_abort": _abort,
  "_embind_repr": _embind_repr,
  "_emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio,
  "_emscripten_get_element_css_size": _emscripten_get_element_css_size,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_request_animation_frame_loop": _emscripten_request_animation_frame_loop,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "_emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size,
  "_emscripten_set_keydown_callback_on_thread": _emscripten_set_keydown_callback_on_thread,
  "_emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread,
  "_emscripten_set_keyup_callback_on_thread": _emscripten_set_keyup_callback_on_thread,
  "_emscripten_set_mousedown_callback_on_thread": _emscripten_set_mousedown_callback_on_thread,
  "_emscripten_set_mouseenter_callback_on_thread": _emscripten_set_mouseenter_callback_on_thread,
  "_emscripten_set_mouseleave_callback_on_thread": _emscripten_set_mouseleave_callback_on_thread,
  "_emscripten_set_mousemove_callback_on_thread": _emscripten_set_mousemove_callback_on_thread,
  "_emscripten_set_mouseup_callback_on_thread": _emscripten_set_mouseup_callback_on_thread,
  "_emscripten_set_pointerlockchange_callback_on_thread": _emscripten_set_pointerlockchange_callback_on_thread,
  "_emscripten_set_pointerlockerror_callback_on_thread": _emscripten_set_pointerlockerror_callback_on_thread,
  "_emscripten_set_resize_callback_on_thread": _emscripten_set_resize_callback_on_thread,
  "_emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread,
  "_emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread,
  "_emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread,
  "_emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread,
  "_emscripten_set_webglcontextlost_callback_on_thread": _emscripten_set_webglcontextlost_callback_on_thread,
  "_emscripten_set_webglcontextrestored_callback_on_thread": _emscripten_set_webglcontextrestored_callback_on_thread,
  "_emscripten_set_wheel_callback_on_thread": _emscripten_set_wheel_callback_on_thread,
  "_emscripten_webgl_create_context": _emscripten_webgl_create_context,
  "_emscripten_webgl_do_create_context": _emscripten_webgl_do_create_context,
  "_emscripten_webgl_enable_extension": _emscripten_webgl_enable_extension,
  "_emscripten_webgl_enable_extension_calling_thread": _emscripten_webgl_enable_extension_calling_thread,
  "_emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes,
  "_emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current,
  "_glActiveTexture": _glActiveTexture,
  "_glAttachShader": _glAttachShader,
  "_glBindBuffer": _glBindBuffer,
  "_glBindFramebuffer": _glBindFramebuffer,
  "_glBindRenderbuffer": _glBindRenderbuffer,
  "_glBindTexture": _glBindTexture,
  "_glBlendColor": _glBlendColor,
  "_glBlendEquationSeparate": _glBlendEquationSeparate,
  "_glBlendFuncSeparate": _glBlendFuncSeparate,
  "_glBufferData": _glBufferData,
  "_glBufferSubData": _glBufferSubData,
  "_glClear": _glClear,
  "_glClearColor": _glClearColor,
  "_glClearDepthf": _glClearDepthf,
  "_glClearStencil": _glClearStencil,
  "_glColorMask": _glColorMask,
  "_glCompileShader": _glCompileShader,
  "_glCompressedTexImage2D": _glCompressedTexImage2D,
  "_glCreateProgram": _glCreateProgram,
  "_glCreateShader": _glCreateShader,
  "_glCullFace": _glCullFace,
  "_glDeleteBuffers": _glDeleteBuffers,
  "_glDeleteFramebuffers": _glDeleteFramebuffers,
  "_glDeleteProgram": _glDeleteProgram,
  "_glDeleteRenderbuffers": _glDeleteRenderbuffers,
  "_glDeleteShader": _glDeleteShader,
  "_glDeleteTextures": _glDeleteTextures,
  "_glDepthFunc": _glDepthFunc,
  "_glDepthMask": _glDepthMask,
  "_glDisable": _glDisable,
  "_glDisableVertexAttribArray": _glDisableVertexAttribArray,
  "_glDrawArrays": _glDrawArrays,
  "_glDrawArraysInstanced": _glDrawArraysInstanced,
  "_glDrawElements": _glDrawElements,
  "_glDrawElementsInstanced": _glDrawElementsInstanced,
  "_glEnable": _glEnable,
  "_glEnableVertexAttribArray": _glEnableVertexAttribArray,
  "_glFrontFace": _glFrontFace,
  "_glGenBuffers": _glGenBuffers,
  "_glGenRenderbuffers": _glGenRenderbuffers,
  "_glGenTextures": _glGenTextures,
  "_glGetAttribLocation": _glGetAttribLocation,
  "_glGetError": _glGetError,
  "_glGetIntegerv": _glGetIntegerv,
  "_glGetProgramInfoLog": _glGetProgramInfoLog,
  "_glGetProgramiv": _glGetProgramiv,
  "_glGetShaderInfoLog": _glGetShaderInfoLog,
  "_glGetShaderiv": _glGetShaderiv,
  "_glGetString": _glGetString,
  "_glGetUniformLocation": _glGetUniformLocation,
  "_glLinkProgram": _glLinkProgram,
  "_glPolygonOffset": _glPolygonOffset,
  "_glRenderbufferStorage": _glRenderbufferStorage,
  "_glScissor": _glScissor,
  "_glShaderSource": _glShaderSource,
  "_glStencilFunc": _glStencilFunc,
  "_glStencilFuncSeparate": _glStencilFuncSeparate,
  "_glStencilMask": _glStencilMask,
  "_glStencilOp": _glStencilOp,
  "_glStencilOpSeparate": _glStencilOpSeparate,
  "_glTexImage2D": _glTexImage2D,
  "_glTexParameteri": _glTexParameteri,
  "_glTexSubImage2D": _glTexSubImage2D,
  "_glUniform1fv": _glUniform1fv,
  "_glUniform1i": _glUniform1i,
  "_glUniform2fv": _glUniform2fv,
  "_glUniform3fv": _glUniform3fv,
  "_glUniform4fv": _glUniform4fv,
  "_glUniformMatrix4fv": _glUniformMatrix4fv,
  "_glUseProgram": _glUseProgram,
  "_glVertexAttribDivisor": _glVertexAttribDivisor,
  "_glVertexAttribPointer": _glVertexAttribPointer,
  "_glViewport": _glViewport,
  "_llvm_stackrestore": _llvm_stackrestore,
  "_llvm_stacksave": _llvm_stacksave,
  "_sapp_js_add_beforeunload_listener": _sapp_js_add_beforeunload_listener,
  "_sapp_js_add_clipboard_listener": _sapp_js_add_clipboard_listener,
  "_sapp_js_add_dragndrop_listeners": _sapp_js_add_dragndrop_listeners,
  "_sapp_js_create_textfield": _sapp_js_create_textfield,
  "_sapp_js_dropped_file_size": _sapp_js_dropped_file_size,
  "_sapp_js_exit_pointerlock": _sapp_js_exit_pointerlock,
  "_sapp_js_fetch_dropped_file": _sapp_js_fetch_dropped_file,
  "_sapp_js_focus_textfield": _sapp_js_focus_textfield,
  "_sapp_js_pointer_init": _sapp_js_pointer_init,
  "_sapp_js_remove_beforeunload_listener": _sapp_js_remove_beforeunload_listener,
  "_sapp_js_remove_clipboard_listener": _sapp_js_remove_clipboard_listener,
  "_sapp_js_remove_dragndrop_listeners": _sapp_js_remove_dragndrop_listeners,
  "_sapp_js_request_pointerlock": _sapp_js_request_pointerlock,
  "_sapp_js_unfocus_textfield": _sapp_js_unfocus_textfield,
  "_sapp_js_write_clipboard": _sapp_js_write_clipboard,
  "_saudio_js_buffer_frames": _saudio_js_buffer_frames,
  "_saudio_js_init": _saudio_js_init,
  "_saudio_js_sample_rate": _saudio_js_sample_rate,
  "_saudio_js_shutdown": _saudio_js_shutdown,
  "_sfetch_js_send_get_request": _sfetch_js_send_get_request,
  "_sfetch_js_send_head_request": _sfetch_js_send_head_request,
  "_stm_js_perfnow": _stm_js_perfnow,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "count_emval_handles": count_emval_handles,
  "createNamedFunction": createNamedFunction,
  "embind_init_charCodes": embind_init_charCodes,
  "emscriptenWebGLGet": emscriptenWebGLGet,
  "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData,
  "extendError": extendError,
  "floatReadValueFromPointer": floatReadValueFromPointer,
  "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM,
  "getShiftFromSize": getShiftFromSize,
  "get_first_emval": get_first_emval,
  "init_emval": init_emval,
  "integerReadValueFromPointer": integerReadValueFromPointer,
  "makeLegalFunctionName": makeLegalFunctionName,
  "readLatin1String": readLatin1String,
  "registerType": registerType,
  "simpleReadValueFromPointer": simpleReadValueFromPointer,
  "stringToNewUTF8": stringToNewUTF8,
  "throwBindingError": throwBindingError,
  "throwInternalError": throwInternalError,
  "whenDependentTypesAreResolved": whenDependentTypesAreResolved,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_pow=global.Math.pow,
  Math_cos=global.Math.cos,
  Math_sin=global.Math.sin,
  Math_atan2=global.Math.atan2,
  Math_exp=global.Math.exp,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_min=global.Math.min,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv,
  ___assert_fail=env.___assert_fail,
  ___cxa_allocate_exception=env.___cxa_allocate_exception,
  ___cxa_begin_catch=env.___cxa_begin_catch,
  ___cxa_find_matching_catch=env.___cxa_find_matching_catch,
  ___cxa_free_exception=env.___cxa_free_exception,
  ___cxa_throw=env.___cxa_throw,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___resumeException=env.___resumeException,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall146=env.___syscall146,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize,
  __embind_register_bool=env.__embind_register_bool,
  __embind_register_emval=env.__embind_register_emval,
  __embind_register_float=env.__embind_register_float,
  __embind_register_integer=env.__embind_register_integer,
  __embind_register_memory_view=env.__embind_register_memory_view,
  __embind_register_std_string=env.__embind_register_std_string,
  __embind_register_std_wstring=env.__embind_register_std_wstring,
  __embind_register_void=env.__embind_register_void,
  __emval_decref=env.__emval_decref,
  __emval_register=env.__emval_register,
  __fillMouseEventData=env.__fillMouseEventData,
  __fillPointerlockChangeEventData=env.__fillPointerlockChangeEventData,
  __findCanvasEventTarget=env.__findCanvasEventTarget,
  __findEventTarget=env.__findEventTarget,
  __glGenObject=env.__glGenObject,
  __registerKeyEventCallback=env.__registerKeyEventCallback,
  __registerMouseEventCallback=env.__registerMouseEventCallback,
  __registerPointerlockChangeEventCallback=env.__registerPointerlockChangeEventCallback,
  __registerPointerlockErrorEventCallback=env.__registerPointerlockErrorEventCallback,
  __registerTouchEventCallback=env.__registerTouchEventCallback,
  __registerUiEventCallback=env.__registerUiEventCallback,
  __registerWebGlEventCallback=env.__registerWebGlEventCallback,
  __registerWheelEventCallback=env.__registerWheelEventCallback,
  _abort=env._abort,
  _embind_repr=env._embind_repr,
  _emscripten_get_device_pixel_ratio=env._emscripten_get_device_pixel_ratio,
  _emscripten_get_element_css_size=env._emscripten_get_element_css_size,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_request_animation_frame_loop=env._emscripten_request_animation_frame_loop,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _emscripten_set_canvas_element_size=env._emscripten_set_canvas_element_size,
  _emscripten_set_keydown_callback_on_thread=env._emscripten_set_keydown_callback_on_thread,
  _emscripten_set_keypress_callback_on_thread=env._emscripten_set_keypress_callback_on_thread,
  _emscripten_set_keyup_callback_on_thread=env._emscripten_set_keyup_callback_on_thread,
  _emscripten_set_mousedown_callback_on_thread=env._emscripten_set_mousedown_callback_on_thread,
  _emscripten_set_mouseenter_callback_on_thread=env._emscripten_set_mouseenter_callback_on_thread,
  _emscripten_set_mouseleave_callback_on_thread=env._emscripten_set_mouseleave_callback_on_thread,
  _emscripten_set_mousemove_callback_on_thread=env._emscripten_set_mousemove_callback_on_thread,
  _emscripten_set_mouseup_callback_on_thread=env._emscripten_set_mouseup_callback_on_thread,
  _emscripten_set_pointerlockchange_callback_on_thread=env._emscripten_set_pointerlockchange_callback_on_thread,
  _emscripten_set_pointerlockerror_callback_on_thread=env._emscripten_set_pointerlockerror_callback_on_thread,
  _emscripten_set_resize_callback_on_thread=env._emscripten_set_resize_callback_on_thread,
  _emscripten_set_touchcancel_callback_on_thread=env._emscripten_set_touchcancel_callback_on_thread,
  _emscripten_set_touchend_callback_on_thread=env._emscripten_set_touchend_callback_on_thread,
  _emscripten_set_touchmove_callback_on_thread=env._emscripten_set_touchmove_callback_on_thread,
  _emscripten_set_touchstart_callback_on_thread=env._emscripten_set_touchstart_callback_on_thread,
  _emscripten_set_webglcontextlost_callback_on_thread=env._emscripten_set_webglcontextlost_callback_on_thread,
  _emscripten_set_webglcontextrestored_callback_on_thread=env._emscripten_set_webglcontextrestored_callback_on_thread,
  _emscripten_set_wheel_callback_on_thread=env._emscripten_set_wheel_callback_on_thread,
  _emscripten_webgl_create_context=env._emscripten_webgl_create_context,
  _emscripten_webgl_do_create_context=env._emscripten_webgl_do_create_context,
  _emscripten_webgl_enable_extension=env._emscripten_webgl_enable_extension,
  _emscripten_webgl_enable_extension_calling_thread=env._emscripten_webgl_enable_extension_calling_thread,
  _emscripten_webgl_init_context_attributes=env._emscripten_webgl_init_context_attributes,
  _emscripten_webgl_make_context_current=env._emscripten_webgl_make_context_current,
  _glActiveTexture=env._glActiveTexture,
  _glAttachShader=env._glAttachShader,
  _glBindBuffer=env._glBindBuffer,
  _glBindFramebuffer=env._glBindFramebuffer,
  _glBindRenderbuffer=env._glBindRenderbuffer,
  _glBindTexture=env._glBindTexture,
  _glBlendColor=env._glBlendColor,
  _glBlendEquationSeparate=env._glBlendEquationSeparate,
  _glBlendFuncSeparate=env._glBlendFuncSeparate,
  _glBufferData=env._glBufferData,
  _glBufferSubData=env._glBufferSubData,
  _glClear=env._glClear,
  _glClearColor=env._glClearColor,
  _glClearDepthf=env._glClearDepthf,
  _glClearStencil=env._glClearStencil,
  _glColorMask=env._glColorMask,
  _glCompileShader=env._glCompileShader,
  _glCompressedTexImage2D=env._glCompressedTexImage2D,
  _glCreateProgram=env._glCreateProgram,
  _glCreateShader=env._glCreateShader,
  _glCullFace=env._glCullFace,
  _glDeleteBuffers=env._glDeleteBuffers,
  _glDeleteFramebuffers=env._glDeleteFramebuffers,
  _glDeleteProgram=env._glDeleteProgram,
  _glDeleteRenderbuffers=env._glDeleteRenderbuffers,
  _glDeleteShader=env._glDeleteShader,
  _glDeleteTextures=env._glDeleteTextures,
  _glDepthFunc=env._glDepthFunc,
  _glDepthMask=env._glDepthMask,
  _glDisable=env._glDisable,
  _glDisableVertexAttribArray=env._glDisableVertexAttribArray,
  _glDrawArrays=env._glDrawArrays,
  _glDrawArraysInstanced=env._glDrawArraysInstanced,
  _glDrawElements=env._glDrawElements,
  _glDrawElementsInstanced=env._glDrawElementsInstanced,
  _glEnable=env._glEnable,
  _glEnableVertexAttribArray=env._glEnableVertexAttribArray,
  _glFrontFace=env._glFrontFace,
  _glGenBuffers=env._glGenBuffers,
  _glGenRenderbuffers=env._glGenRenderbuffers,
  _glGenTextures=env._glGenTextures,
  _glGetAttribLocation=env._glGetAttribLocation,
  _glGetError=env._glGetError,
  _glGetIntegerv=env._glGetIntegerv,
  _glGetProgramInfoLog=env._glGetProgramInfoLog,
  _glGetProgramiv=env._glGetProgramiv,
  _glGetShaderInfoLog=env._glGetShaderInfoLog,
  _glGetShaderiv=env._glGetShaderiv,
  _glGetString=env._glGetString,
  _glGetUniformLocation=env._glGetUniformLocation,
  _glLinkProgram=env._glLinkProgram,
  _glPolygonOffset=env._glPolygonOffset,
  _glRenderbufferStorage=env._glRenderbufferStorage,
  _glScissor=env._glScissor,
  _glShaderSource=env._glShaderSource,
  _glStencilFunc=env._glStencilFunc,
  _glStencilFuncSeparate=env._glStencilFuncSeparate,
  _glStencilMask=env._glStencilMask,
  _glStencilOp=env._glStencilOp,
  _glStencilOpSeparate=env._glStencilOpSeparate,
  _glTexImage2D=env._glTexImage2D,
  _glTexParameteri=env._glTexParameteri,
  _glTexSubImage2D=env._glTexSubImage2D,
  _glUniform1fv=env._glUniform1fv,
  _glUniform1i=env._glUniform1i,
  _glUniform2fv=env._glUniform2fv,
  _glUniform3fv=env._glUniform3fv,
  _glUniform4fv=env._glUniform4fv,
  _glUniformMatrix4fv=env._glUniformMatrix4fv,
  _glUseProgram=env._glUseProgram,
  _glVertexAttribDivisor=env._glVertexAttribDivisor,
  _glVertexAttribPointer=env._glVertexAttribPointer,
  _glViewport=env._glViewport,
  _llvm_stackrestore=env._llvm_stackrestore,
  _llvm_stacksave=env._llvm_stacksave,
  _sapp_js_add_beforeunload_listener=env._sapp_js_add_beforeunload_listener,
  _sapp_js_add_clipboard_listener=env._sapp_js_add_clipboard_listener,
  _sapp_js_add_dragndrop_listeners=env._sapp_js_add_dragndrop_listeners,
  _sapp_js_create_textfield=env._sapp_js_create_textfield,
  _sapp_js_dropped_file_size=env._sapp_js_dropped_file_size,
  _sapp_js_exit_pointerlock=env._sapp_js_exit_pointerlock,
  _sapp_js_fetch_dropped_file=env._sapp_js_fetch_dropped_file,
  _sapp_js_focus_textfield=env._sapp_js_focus_textfield,
  _sapp_js_pointer_init=env._sapp_js_pointer_init,
  _sapp_js_remove_beforeunload_listener=env._sapp_js_remove_beforeunload_listener,
  _sapp_js_remove_clipboard_listener=env._sapp_js_remove_clipboard_listener,
  _sapp_js_remove_dragndrop_listeners=env._sapp_js_remove_dragndrop_listeners,
  _sapp_js_request_pointerlock=env._sapp_js_request_pointerlock,
  _sapp_js_unfocus_textfield=env._sapp_js_unfocus_textfield,
  _sapp_js_write_clipboard=env._sapp_js_write_clipboard,
  _saudio_js_buffer_frames=env._saudio_js_buffer_frames,
  _saudio_js_init=env._saudio_js_init,
  _saudio_js_sample_rate=env._saudio_js_sample_rate,
  _saudio_js_shutdown=env._saudio_js_shutdown,
  _sfetch_js_send_get_request=env._sfetch_js_send_get_request,
  _sfetch_js_send_head_request=env._sfetch_js_send_head_request,
  _stm_js_perfnow=env._stm_js_perfnow,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  count_emval_handles=env.count_emval_handles,
  createNamedFunction=env.createNamedFunction,
  embind_init_charCodes=env.embind_init_charCodes,
  emscriptenWebGLGet=env.emscriptenWebGLGet,
  emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData,
  extendError=env.extendError,
  floatReadValueFromPointer=env.floatReadValueFromPointer,
  flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM,
  getShiftFromSize=env.getShiftFromSize,
  get_first_emval=env.get_first_emval,
  init_emval=env.init_emval,
  integerReadValueFromPointer=env.integerReadValueFromPointer,
  makeLegalFunctionName=env.makeLegalFunctionName,
  readLatin1String=env.readLatin1String,
  registerType=env.registerType,
  simpleReadValueFromPointer=env.simpleReadValueFromPointer,
  stringToNewUTF8=env.stringToNewUTF8,
  throwBindingError=env.throwBindingError,
  throwInternalError=env.throwInternalError,
  whenDependentTypesAreResolved=env.whenDependentTypesAreResolved,
  STACKTOP = 2186096,
  STACK_MAX = 7428976,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i630 = 0, $$0$i$i$add$i649 = 0, $$0$i$i$add$i653 = 0, $$0$i$i$add$i677 = 0, $$0$i$i$add$i681 = 0, $$0$i$i$add$i685 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i615 = 0, $$0$i$i$i599 = 0, $$0$i$i$i605 = 0, $$0$i$i$i609 = 0, $$0$i$i$i618 = 0, $$0$i$i$i622 = 0, $$0$i$i$i625 = 0, $$0$i$i$i633 = 0, $$0$i$i$i636 = 0, $$0$i$i$i640 = 0, $$0$i$i$i644 = 0, $$0$i$i$i656 = 0, $$0$i$i$i660 = 0, $$0$i$i$i664 = 0, $$0$i$i$i668 = 0, $$0$i$i$i672 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i629 = 0, $$0$i$i$idx$i648 = 0, $$0$i$i$idx$i652 = 0, $$0$i$i$idx$i676 = 0, $$0$i$i$idx$i680 = 0, $$0$i$i$idx$i684 = 0, $$0$i$i602 = 0, $$0503 = 0, $$0504$off0 = 0, $$14 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $106 = 0, $11 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $13 = 0, $131 = 0, $132 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $154 = 0, $156 = 0, $158 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $169 = 0, $171 = 0, $173 = 0, $175 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $186 = 0, $191 = 0, $192 = 0, $194 = 0, $196 = 0, $197 = 0, $204 = 0, $212 = 0, $213 = 0, $228 = 0, $234 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $244 = 0, $246 = 0, $248 = 0, $25 = 0, $253 = 0, $255 = 0, $257 = 0, $259 = 0, $261 = 0, $263 = 0, $265 = 0, $267 = 0, $269 = 0, $273 = 0, $275 = 0, $277 = 0, $280 = 0, $281 = 0, $296 = 0, $298 = 0, $3 = 0, $300 = 0, $302 = 0, $304 = 0, $306 = 0, $308 = 0, $309 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $325 = 0, $330 = 0, $332 = 0, $334 = 0, $336 = 0, $338 = 0, $340 = 0, $342 = 0, $346 = 0, $348 = 0, $35 = 0, $350 = 0, $353 = 0, $354 = 0, $365 = 0, $367 = 0, $37 = 0, $373 = 0, $374 = 0, $376 = 0, $378 = 0, $380 = 0, $381 = 0, $388 = 0, $39 = 0, $392 = 0, $4 = 0, $400 = 0, $401 = 0, $41 = 0, $415 = 0, $416 = 0, $43 = 0, $431 = 0, $433 = 0, $436 = 0, $437 = 0, $444 = 0, $446 = 0, $448 = 0, $45 = 0, $450 = 0, $452 = 0, $454 = 0, $456 = 0, $458 = 0, $47 = 0, $480 = 0, $481 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $7 = 0, $74 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $90 = 0, $91 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $3 = sp + 176 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 88 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 160 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 148 | 0;
 $11 = sp + 136 | 0;
 $12 = sp + 124 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 12 | 0;
 $15 = sp;
 $16 = $1;
 $18 = $16 - $0 | 0;
 L1 : do if (($18 | 0) > 1) {
  if (($18 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 103) {
   $25 = (HEAP8[$0 + 1 >> 0] | 0) == 115;
   $$0503 = $25 ? $0 + 2 | 0 : $0;
   $$0504$off0 = $25;
  } else {
   $$0503 = $0;
   $$0504$off0 = 0;
  } else {
   $$0503 = $0;
   $$0504$off0 = 0;
  }
  do switch (HEAP8[$$0503 >> 0] | 0) {
  case 76:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  case 84:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  case 102:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  case 97:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 97:
     {
      $35 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47881, __ZNSt3__211char_traitsIcE6lengthEPKc(47881) | 0);
      $37 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($35, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($37 | 0) == ($35 | 0) ? $0 : $37;
      break L1;
      break;
     }
    case 100:
     {
      $39 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47899, __ZNSt3__211char_traitsIcE6lengthEPKc(47899) | 0);
      $41 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($39, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($41 | 0) == ($39 | 0) ? $0 : $41;
      break L1;
      break;
     }
    case 110:
     {
      $43 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47899, __ZNSt3__211char_traitsIcE6lengthEPKc(47899) | 0);
      $45 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($43, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($45 | 0) == ($43 | 0) ? $0 : $45;
      break L1;
      break;
     }
    case 78:
     {
      $47 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47942, __ZNSt3__211char_traitsIcE6lengthEPKc(47942) | 0);
      $49 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($47, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($49 | 0) == ($47 | 0) ? $0 : $49;
      break L1;
      break;
     }
    case 83:
     {
      $51 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47945, __ZNSt3__211char_traitsIcE6lengthEPKc(47945) | 0);
      $53 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($51, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($53 | 0) == ($51 | 0) ? $0 : $53;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 122:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 108:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 109:
     {
      $62 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47947, __ZNSt3__211char_traitsIcE6lengthEPKc(47947) | 0);
      $64 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($62, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($64 | 0) == ($62 | 0) ? $0 : $64;
      break L1;
      break;
     }
    case 111:
     {
      $66 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47949, __ZNSt3__211char_traitsIcE6lengthEPKc(47949) | 0);
      $68 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($66, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($68 | 0) == ($66 | 0) ? $0 : $68;
      break L1;
      break;
     }
    case 118:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 100:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 97:
     {
      $74 = $$0503 + 2 | 0;
      $75 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($74, $1, $2) | 0;
      if (($75 | 0) == ($74 | 0)) {
       $$14 = $0;
       break L1;
      }
      $78 = $2 + 4 | 0;
      if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$78 >> 2] | 0)) {
       $$14 = $0;
       break L1;
      };
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      L32 : do if ($$0504$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($6, 47951, __ZNSt3__211char_traitsIcE6lengthEPKc(47951) | 0); else {
       $$0$i$i = 0;
       while (1) {
        if (($$0$i$i | 0) == 3) break L32;
        HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0;
        $$0$i$i = $$0$i$i + 1 | 0;
       }
      } while (0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47954) | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, (HEAP32[$78 >> 2] | 0) + -24 | 0);
      $90 = HEAP8[$7 + 11 >> 0] | 0;
      $91 = $90 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($5, $91 ? HEAP32[$7 >> 2] | 0 : $7, $91 ? HEAP32[$7 + 4 >> 2] | 0 : $90 & 255) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i599 = 0;
      while (1) {
       if (($$0$i$i$i599 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i599 << 2) >> 2] = 0;
       $$0$i$i$i599 = $$0$i$i$i599 + 1 | 0;
      }
      $101 = HEAP32[$78 >> 2] | 0;
      $102 = $101 + -24 | 0;
      $103 = $102 + 11 | 0;
      if ((HEAP8[$103 >> 0] | 0) < 0) {
       $106 = HEAP32[$102 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($106, $3);
       HEAP32[$101 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($102, $3);
       HEAP8[$103 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($102);
      HEAP32[$102 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$102 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$102 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i$i | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$14 = $75;
      break L1;
      break;
     }
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 101:
     {
      $111 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47897, __ZNSt3__211char_traitsIcE6lengthEPKc(47897) | 0);
      $113 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($111, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($113 | 0) == ($111 | 0) ? $0 : $113;
      break L1;
      break;
     }
    case 108:
     {
      $115 = $$0503 + 2 | 0;
      $116 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($115, $1, $2) | 0;
      if (($116 | 0) == ($115 | 0)) {
       $$14 = $0;
       break L1;
      }
      $119 = $2 + 4 | 0;
      if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$119 >> 2] | 0)) {
       $$14 = $0;
       break L1;
      };
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      L60 : do if ($$0504$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($6, 47951, __ZNSt3__211char_traitsIcE6lengthEPKc(47951) | 0); else {
       $$0$i$i602 = 0;
       while (1) {
        if (($$0$i$i602 | 0) == 3) break L60;
        HEAP32[$6 + ($$0$i$i602 << 2) >> 2] = 0;
        $$0$i$i602 = $$0$i$i602 + 1 | 0;
       }
      } while (0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47964) | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i605 = 0;
      while (1) {
       if (($$0$i$i$i605 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i605 << 2) >> 2] = 0;
       $$0$i$i$i605 = $$0$i$i$i605 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, (HEAP32[$119 >> 2] | 0) + -24 | 0);
      $131 = HEAP8[$7 + 11 >> 0] | 0;
      $132 = $131 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($5, $132 ? HEAP32[$7 >> 2] | 0 : $7, $132 ? HEAP32[$7 + 4 >> 2] | 0 : $131 & 255) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i609 = 0;
      while (1) {
       if (($$0$i$i$i609 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i609 << 2) >> 2] = 0;
       $$0$i$i$i609 = $$0$i$i$i609 + 1 | 0;
      }
      $142 = HEAP32[$119 >> 2] | 0;
      $143 = $142 + -24 | 0;
      $144 = $143 + 11 | 0;
      if ((HEAP8[$144 >> 0] | 0) < 0) {
       $147 = HEAP32[$143 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($147, $3);
       HEAP32[$142 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($143, $3);
       HEAP8[$144 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($143);
      HEAP32[$143 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$143 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$143 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i$i615 = 0;
      while (1) {
       if (($$0$i$i$i$i615 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i$i615 << 2) >> 2] = 0;
       $$0$i$i$i$i615 = $$0$i$i$i$i615 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$14 = $116;
      break L1;
      break;
     }
    case 110:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 115:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 118:
     {
      $154 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47972, __ZNSt3__211char_traitsIcE6lengthEPKc(47972) | 0);
      $156 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($154, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($156 | 0) == ($154 | 0) ? $0 : $156;
      break L1;
      break;
     }
    case 86:
     {
      $158 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47974, __ZNSt3__211char_traitsIcE6lengthEPKc(47974) | 0);
      $160 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($158, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($160 | 0) == ($158 | 0) ? $0 : $160;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 101:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 111:
     {
      $165 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47977, __ZNSt3__211char_traitsIcE6lengthEPKc(47977) | 0);
      $167 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($165, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($167 | 0) == ($165 | 0) ? $0 : $167;
      break L1;
      break;
     }
    case 79:
     {
      $169 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47979, __ZNSt3__211char_traitsIcE6lengthEPKc(47979) | 0);
      $171 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($169, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($171 | 0) == ($169 | 0) ? $0 : $171;
      break L1;
      break;
     }
    case 113:
     {
      $173 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47982, __ZNSt3__211char_traitsIcE6lengthEPKc(47982) | 0);
      $175 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($173, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($175 | 0) == ($173 | 0) ? $0 : $175;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 103:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 101:
     {
      $180 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47985, __ZNSt3__211char_traitsIcE6lengthEPKc(47985) | 0);
      $182 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($180, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($182 | 0) == ($180 | 0) ? $0 : $182;
      break L1;
      break;
     }
    case 116:
     {
      $184 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47915, __ZNSt3__211char_traitsIcE6lengthEPKc(47915) | 0);
      $186 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($184, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($186 | 0) == ($184 | 0) ? $0 : $186;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 105:
   {
    if ((HEAP8[$$0503 + 1 >> 0] | 0) != 120) {
     $$14 = $0;
     break L1;
    }
    $191 = $0 + 2 | 0;
    $192 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($191, $1, $2) | 0;
    if (($192 | 0) == ($191 | 0)) {
     $$14 = $0;
     break L1;
    }
    $194 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($192, $1, $2) | 0;
    $196 = $2 + 4 | 0;
    if (($194 | 0) == ($192 | 0)) {
     $228 = HEAP32[$196 >> 2] | 0;
     $$0$i$i$idx$i629 = 0;
     while (1) {
      if (($$0$i$i$idx$i629 | 0) == -1) break;
      $$0$i$i$add$i630 = $$0$i$i$idx$i629 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($228 + ($$0$i$i$add$i630 * 24 | 0) | 0);
      $$0$i$i$idx$i629 = $$0$i$i$add$i630;
     }
     HEAP32[$196 >> 2] = $228 + -24;
     $$14 = $0;
     break L1;
    }
    $197 = HEAP32[$196 >> 2] | 0;
    if ((($197 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$14 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $197 + -24 | 0);
    $204 = HEAP32[$196 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($204 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$196 >> 2] = $204 + -24;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $204 + -48 | 0);
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($9, 47879, $4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9, 47988) | 0;
    HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
    $$0$i$i$i618 = 0;
    while (1) {
     if (($$0$i$i$i618 | 0) == 3) break;
     HEAP32[$9 + ($$0$i$i$i618 << 2) >> 2] = 0;
     $$0$i$i$i618 = $$0$i$i$i618 + 1 | 0;
    }
    $212 = HEAP8[$3 + 11 >> 0] | 0;
    $213 = $212 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7, $213 ? HEAP32[$3 >> 2] | 0 : $3, $213 ? HEAP32[$3 + 4 >> 2] | 0 : $212 & 255) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i622 = 0;
    while (1) {
     if (($$0$i$i$i622 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i622 << 2) >> 2] = 0;
     $$0$i$i$i622 = $$0$i$i$i622 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47926) | 0;
    HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$8 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$8 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i625 = 0;
    while (1) {
     if (($$0$i$i$i625 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i625 << 2) >> 2] = 0;
     $$0$i$i$i625 = $$0$i$i$i625 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $8);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$196 >> 2] | 0) + -24 | 0, $5);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$14 = $194;
    break L1;
    break;
   }
  case 108:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 101:
     {
      $234 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47991, __ZNSt3__211char_traitsIcE6lengthEPKc(47991) | 0);
      $236 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($234, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($236 | 0) == ($234 | 0) ? $0 : $236;
      break L1;
      break;
     }
    case 115:
     {
      $238 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47994, __ZNSt3__211char_traitsIcE6lengthEPKc(47994) | 0);
      $240 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($238, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($240 | 0) == ($238 | 0) ? $0 : $240;
      break L1;
      break;
     }
    case 83:
     {
      $242 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47997, __ZNSt3__211char_traitsIcE6lengthEPKc(47997) | 0);
      $244 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($242, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($244 | 0) == ($242 | 0) ? $0 : $244;
      break L1;
      break;
     }
    case 116:
     {
      $246 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47913, __ZNSt3__211char_traitsIcE6lengthEPKc(47913) | 0);
      $248 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($246, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($248 | 0) == ($246 | 0) ? $0 : $248;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 109:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 105:
     {
      $253 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48001, __ZNSt3__211char_traitsIcE6lengthEPKc(48001) | 0);
      $255 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($253, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($255 | 0) == ($253 | 0) ? $0 : $255;
      break L1;
      break;
     }
    case 73:
     {
      $257 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48003, __ZNSt3__211char_traitsIcE6lengthEPKc(48003) | 0);
      $259 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($257, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($259 | 0) == ($257 | 0) ? $0 : $259;
      break L1;
      break;
     }
    case 108:
     {
      $261 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47897, __ZNSt3__211char_traitsIcE6lengthEPKc(47897) | 0);
      $263 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($261, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($263 | 0) == ($261 | 0) ? $0 : $263;
      break L1;
      break;
     }
    case 76:
     {
      $265 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48006, __ZNSt3__211char_traitsIcE6lengthEPKc(48006) | 0);
      $267 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($265, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($267 | 0) == ($265 | 0) ? $0 : $267;
      break L1;
      break;
     }
    case 109:
     {
      $269 = $0 + 2 | 0;
      if (($269 | 0) != ($1 | 0)) if ((HEAP8[$269 >> 0] | 0) == 95) {
       $273 = $0 + 3 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48009, __ZNSt3__211char_traitsIcE6lengthEPKc(48009) | 0);
       $275 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($273, $1, $3, $2) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$14 = ($275 | 0) == ($273 | 0) ? $0 : $275;
       break L1;
      }
      $277 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($269, $1, $2) | 0;
      if (($277 | 0) == ($269 | 0)) {
       $$14 = $0;
       break L1;
      }
      $280 = $2 + 4 | 0;
      $281 = HEAP32[$280 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($281 | 0)) {
       $$14 = $0;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $281 + -24 | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5, 0, 47879) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i633 = 0;
      while (1) {
       if (($$0$i$i$i633 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i633 << 2) >> 2] = 0;
       $$0$i$i$i633 = $$0$i$i$i633 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 48012) | 0;
      HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$10 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$10 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i636 = 0;
      while (1) {
       if (($$0$i$i$i636 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i636 << 2) >> 2] = 0;
       $$0$i$i$i636 = $$0$i$i$i636 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $10);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$280 >> 2] | 0) + -24 | 0, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$14 = $277;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 110:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 119:
    case 97:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 101:
     {
      $296 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48016, __ZNSt3__211char_traitsIcE6lengthEPKc(48016) | 0);
      $298 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($296, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($298 | 0) == ($296 | 0) ? $0 : $298;
      break L1;
      break;
     }
    case 103:
     {
      $300 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48001, __ZNSt3__211char_traitsIcE6lengthEPKc(48001) | 0);
      $302 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($300, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($302 | 0) == ($300 | 0) ? $0 : $302;
      break L1;
      break;
     }
    case 116:
     {
      $304 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48019, __ZNSt3__211char_traitsIcE6lengthEPKc(48019) | 0);
      $306 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($304, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($306 | 0) == ($304 | 0) ? $0 : $306;
      break L1;
      break;
     }
    case 120:
     {
      $308 = $0 + 2 | 0;
      $309 = __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($308, $1, $2) | 0;
      $$14 = ($309 | 0) == ($308 | 0) ? $0 : $309;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 111:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 110:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 111:
     {
      $315 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48021, __ZNSt3__211char_traitsIcE6lengthEPKc(48021) | 0);
      $317 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($315, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($317 | 0) == ($315 | 0) ? $0 : $317;
      break L1;
      break;
     }
    case 114:
     {
      $319 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48024, __ZNSt3__211char_traitsIcE6lengthEPKc(48024) | 0);
      $321 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($319, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($321 | 0) == ($319 | 0) ? $0 : $321;
      break L1;
      break;
     }
    case 82:
     {
      $323 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48026, __ZNSt3__211char_traitsIcE6lengthEPKc(48026) | 0);
      $325 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($323, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($325 | 0) == ($323 | 0) ? $0 : $325;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 112:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 109:
     {
      $330 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48029, __ZNSt3__211char_traitsIcE6lengthEPKc(48029) | 0);
      $332 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($330, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($332 | 0) == ($330 | 0) ? $0 : $332;
      break L1;
      break;
     }
    case 108:
     {
      $334 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48033, __ZNSt3__211char_traitsIcE6lengthEPKc(48033) | 0);
      $336 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($334, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($336 | 0) == ($334 | 0) ? $0 : $336;
      break L1;
      break;
     }
    case 76:
     {
      $338 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48035, __ZNSt3__211char_traitsIcE6lengthEPKc(48035) | 0);
      $340 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($338, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($340 | 0) == ($338 | 0) ? $0 : $340;
      break L1;
      break;
     }
    case 112:
     {
      $342 = $0 + 2 | 0;
      if (($342 | 0) != ($1 | 0)) if ((HEAP8[$342 >> 0] | 0) == 95) {
       $346 = $0 + 3 | 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48038, __ZNSt3__211char_traitsIcE6lengthEPKc(48038) | 0);
       $348 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($346, $1, $3, $2) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$14 = ($348 | 0) == ($346 | 0) ? $0 : $348;
       break L1;
      }
      $350 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($342, $1, $2) | 0;
      if (($350 | 0) == ($342 | 0)) {
       $$14 = $0;
       break L1;
      }
      $353 = $2 + 4 | 0;
      $354 = HEAP32[$353 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($354 | 0)) {
       $$14 = $0;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $354 + -24 | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5, 0, 47879) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i640 = 0;
      while (1) {
       if (($$0$i$i$i640 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i640 << 2) >> 2] = 0;
       $$0$i$i$i640 = $$0$i$i$i640 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 48041) | 0;
      HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$11 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$11 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i644 = 0;
      while (1) {
       if (($$0$i$i$i644 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i644 << 2) >> 2] = 0;
       $$0$i$i$i644 = $$0$i$i$i644 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $11);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$353 >> 2] | 0) + -24 | 0, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$14 = $350;
      break L1;
      break;
     }
    case 115:
     {
      $365 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48033, __ZNSt3__211char_traitsIcE6lengthEPKc(48033) | 0);
      $367 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($365, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($367 | 0) == ($365 | 0) ? $0 : $367;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 113:
   {
    if ((HEAP8[$$0503 + 1 >> 0] | 0) != 117) {
     $$14 = $0;
     break L1;
    }
    $373 = $0 + 2 | 0;
    $374 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($373, $1, $2) | 0;
    if (($374 | 0) == ($373 | 0)) {
     $$14 = $0;
     break L1;
    }
    $376 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($374, $1, $2) | 0;
    if (($376 | 0) == ($374 | 0)) {
     $436 = $2 + 4 | 0;
     $437 = HEAP32[$436 >> 2] | 0;
     $$0$i$i$idx$i684 = 0;
     while (1) {
      if (($$0$i$i$idx$i684 | 0) == -1) break;
      $$0$i$i$add$i685 = $$0$i$i$idx$i684 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($437 + ($$0$i$i$add$i685 * 24 | 0) | 0);
      $$0$i$i$idx$i684 = $$0$i$i$add$i685;
     }
     HEAP32[$436 >> 2] = $437 + -24;
     $$14 = $0;
     break L1;
    }
    $378 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($376, $1, $2) | 0;
    $380 = $2 + 4 | 0;
    if (($378 | 0) == ($376 | 0)) {
     $431 = HEAP32[$380 >> 2] | 0;
     $$0$i$i$idx$i676 = 0;
     while (1) {
      if (($$0$i$i$idx$i676 | 0) == -1) break;
      $$0$i$i$add$i677 = $$0$i$i$idx$i676 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($431 + ($$0$i$i$add$i677 * 24 | 0) | 0);
      $$0$i$i$idx$i676 = $$0$i$i$add$i677;
     }
     $433 = $431 + -24 | 0;
     HEAP32[$380 >> 2] = $433;
     $$0$i$i$idx$i680 = 0;
     while (1) {
      if (($$0$i$i$idx$i680 | 0) == -1) break;
      $$0$i$i$add$i681 = $$0$i$i$idx$i680 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($433 + ($$0$i$i$add$i681 * 24 | 0) | 0);
      $$0$i$i$idx$i680 = $$0$i$i$add$i681;
     }
     HEAP32[$380 >> 2] = $431 + -48;
     $$14 = $0;
     break L1;
    }
    $381 = HEAP32[$380 >> 2] | 0;
    if ((($381 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 3) {
     $$14 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $381 + -24 | 0);
    $388 = HEAP32[$380 >> 2] | 0;
    $$0$i$i$idx$i648 = 0;
    while (1) {
     if (($$0$i$i$idx$i648 | 0) == -1) break;
     $$0$i$i$add$i649 = $$0$i$i$idx$i648 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($388 + ($$0$i$i$add$i649 * 24 | 0) | 0);
     $$0$i$i$idx$i648 = $$0$i$i$add$i649;
    }
    HEAP32[$380 >> 2] = $388 + -24;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $388 + -48 | 0);
    $392 = HEAP32[$380 >> 2] | 0;
    $$0$i$i$idx$i652 = 0;
    while (1) {
     if (($$0$i$i$idx$i652 | 0) == -1) break;
     $$0$i$i$add$i653 = $$0$i$i$idx$i652 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($392 + ($$0$i$i$add$i653 * 24 | 0) | 0);
     $$0$i$i$idx$i652 = $$0$i$i$add$i653;
    }
    HEAP32[$380 >> 2] = $392 + -24;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $392 + -48 | 0);
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($15, 47879, $5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($15, 48045) | 0;
    HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$14 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
    HEAP32[$14 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
    $$0$i$i$i656 = 0;
    while (1) {
     if (($$0$i$i$i656 | 0) == 3) break;
     HEAP32[$15 + ($$0$i$i$i656 << 2) >> 2] = 0;
     $$0$i$i$i656 = $$0$i$i$i656 + 1 | 0;
    }
    $400 = HEAP8[$4 + 11 >> 0] | 0;
    $401 = $400 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($14, $401 ? HEAP32[$4 >> 2] | 0 : $4, $401 ? HEAP32[$4 + 4 >> 2] | 0 : $400 & 255) | 0;
    HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
    HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
    $$0$i$i$i660 = 0;
    while (1) {
     if (($$0$i$i$i660 | 0) == 3) break;
     HEAP32[$14 + ($$0$i$i$i660 << 2) >> 2] = 0;
     $$0$i$i$i660 = $$0$i$i$i660 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($13, 48051) | 0;
    HEAP32[$9 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$9 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
    HEAP32[$9 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
    $$0$i$i$i664 = 0;
    while (1) {
     if (($$0$i$i$i664 | 0) == 3) break;
     HEAP32[$13 + ($$0$i$i$i664 << 2) >> 2] = 0;
     $$0$i$i$i664 = $$0$i$i$i664 + 1 | 0;
    }
    $415 = HEAP8[$3 + 11 >> 0] | 0;
    $416 = $415 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($9, $416 ? HEAP32[$3 >> 2] | 0 : $3, $416 ? HEAP32[$3 + 4 >> 2] | 0 : $415 & 255) | 0;
    HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
    $$0$i$i$i668 = 0;
    while (1) {
     if (($$0$i$i$i668 | 0) == 3) break;
     HEAP32[$9 + ($$0$i$i$i668 << 2) >> 2] = 0;
     $$0$i$i$i668 = $$0$i$i$i668 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 47877) | 0;
    HEAP32[$12 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$12 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$12 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i672 = 0;
    while (1) {
     if (($$0$i$i$i672 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i672 << 2) >> 2] = 0;
     $$0$i$i$i672 = $$0$i$i$i672 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($6, $12);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$380 >> 2] | 0) + -24 | 0, $6);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$14 = $378;
    break L1;
    break;
   }
  case 114:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 109:
     {
      $444 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48057, __ZNSt3__211char_traitsIcE6lengthEPKc(48057) | 0);
      $446 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($444, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($446 | 0) == ($444 | 0) ? $0 : $446;
      break L1;
      break;
     }
    case 77:
     {
      $448 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48059, __ZNSt3__211char_traitsIcE6lengthEPKc(48059) | 0);
      $450 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($448, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($450 | 0) == ($448 | 0) ? $0 : $450;
      break L1;
      break;
     }
    case 115:
     {
      $452 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48062, __ZNSt3__211char_traitsIcE6lengthEPKc(48062) | 0);
      $454 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($452, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($454 | 0) == ($452 | 0) ? $0 : $454;
      break L1;
      break;
     }
    case 83:
     {
      $456 = $0 + 2 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      HEAP32[$3 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48065, __ZNSt3__211char_traitsIcE6lengthEPKc(48065) | 0);
      $458 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($456, $1, $3, $2) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$14 = ($458 | 0) == ($456 | 0) ? $0 : $458;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 115:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 99:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 112:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 114:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 116:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 122:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 90:
     {
      if (($16 - $$0503 | 0) <= 2) {
       $$14 = $0;
       break L1;
      }
      switch (HEAP8[$$0503 + 2 >> 0] | 0) {
      case 84:
       {
        $$14 = __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
        break L1;
        break;
       }
      case 102:
       {
        $$14 = __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
        break L1;
        break;
       }
      default:
       {
        $$14 = $0;
        break L1;
       }
      }
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 116:
   {
    switch (HEAP8[$$0503 + 1 >> 0] | 0) {
    case 105:
    case 101:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    case 114:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($3, 48069);
      $480 = $2 + 4 | 0;
      $481 = HEAP32[$480 >> 2] | 0;
      if ($481 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($481, $3);
       HEAP32[$480 >> 2] = (HEAP32[$480 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$14 = $0 + 2 | 0;
      break L1;
      break;
     }
    case 119:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      break L1;
      break;
     }
    default:
     {
      $$14 = $0;
      break L1;
     }
    }
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    break L1;
    break;
   }
  default:
   {
    $$14 = $0;
    break L1;
   }
  } while (0);
 } else $$14 = $0; while (0);
 STACKTOP = sp;
 return $$14 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i497 = 0, $$0$i$i$add$i549 = 0, $$0$i$i$add$i561 = 0, $$0$i$i$add$i569 = 0, $$0$i$i$i = 0, $$0$i$i$i575 = 0, $$0$i$i$i579 = 0, $$0$i$i$i582 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i496 = 0, $$0$i$i$idx$i548 = 0, $$0$i$i$idx$i560 = 0, $$0$i$i$idx$i568 = 0, $$0$i533 = 0, $$0$i540 = 0, $$0434 = 0, $$0435 = 0, $$0438 = 0, $$0444 = 0, $$0478 = 0, $$0479 = 0, $$1429 = 0, $$1436 = 0, $$2437 = 0, $$5 = 0, $$in = 0, $$ph = 0, $$sroa$0$0$$sroa_idx$i544 = 0, $$sroa$0$0$copyload$i490598 = 0, $$sroa$0$0$copyload$i499594 = 0, $$sroa$0$0$copyload$i527606 = 0, $$sroa$0$0$copyload$i531605 = 0, $$sroa$0$0$copyload$i538604 = 0, $$sroa$0$0$copyload$i545602 = 0, $10 = 0, $102 = 0, $106 = 0, $11 = 0, $110 = 0, $113 = 0, $114 = 0, $119 = 0, $120 = 0, $124 = 0, $126 = 0, $131 = 0, $132 = 0, $135 = 0, $136 = 0, $140 = 0, $141 = 0, $142 = 0, $147 = 0, $148 = 0, $15 = 0, $152 = 0, $154 = 0, $159 = 0, $163 = 0, $166 = 0, $167 = 0, $172 = 0, $173 = 0, $177 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $188 = 0, $189 = 0, $19 = 0, $193 = 0, $194 = 0, $195 = 0, $200 = 0, $201 = 0, $205 = 0, $207 = 0, $212 = 0, $216 = 0, $219 = 0, $220 = 0, $225 = 0, $226 = 0, $23 = 0, $230 = 0, $232 = 0, $237 = 0, $24 = 0, $241 = 0, $242 = 0, $243 = 0, $247 = 0, $249 = 0, $250 = 0, $260 = 0, $261 = 0, $265 = 0, $266 = 0, $274 = 0, $275 = 0, $278 = 0, $28 = 0, $284 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $3 = 0, $30 = 0, $302 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $312 = 0, $314 = 0, $315 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $332 = 0, $333 = 0, $34 = 0, $341 = 0, $342 = 0, $345 = 0, $351 = 0, $361 = 0, $362 = 0, $371 = 0, $372 = 0, $373 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $385 = 0, $389 = 0, $390 = 0, $391 = 0, $395 = 0, $397 = 0, $398 = 0, $4 = 0, $408 = 0, $409 = 0, $413 = 0, $414 = 0, $422 = 0, $423 = 0, $426 = 0, $432 = 0, $438 = 0, $440 = 0, $441 = 0, $442 = 0, $45 = 0, $450 = 0, $454 = 0, $455 = 0, $459 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $47 = 0, $478 = 0, $480 = 0, $481 = 0, $482 = 0, $49 = 0, $490 = 0, $494 = 0, $499 = 0, $5 = 0, $500 = 0, $508 = 0, $509 = 0, $51 = 0, $513 = 0, $514 = 0, $518 = 0, $520 = 0, $524 = 0, $526 = 0, $528 = 0, $53 = 0, $530 = 0, $531 = 0, $538 = 0, $54 = 0, $542 = 0, $544 = 0, $552 = 0, $556 = 0, $557 = 0, $56 = 0, $57 = 0, $571 = 0, $574 = 0, $575 = 0, $576 = 0, $578 = 0, $581 = 0, $585 = 0, $595 = 0, $596 = 0, $6 = 0, $611 = 0, $612 = 0, $62 = 0, $621 = 0, $628 = 0, $629 = 0, $630 = 0, $635 = 0, $636 = 0, $64 = 0, $640 = 0, $642 = 0, $647 = 0, $651 = 0, $655 = 0, $658 = 0, $659 = 0, $664 = 0, $665 = 0, $669 = 0, $671 = 0, $676 = 0, $678 = 0, $680 = 0, $681 = 0, $688 = 0, $693 = 0, $694 = 0, $7 = 0, $702 = 0, $703 = 0, $704 = 0, $709 = 0, $710 = 0, $714 = 0, $716 = 0, $721 = 0, $725 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $735 = 0, $737 = 0, $738 = 0, $74 = 0, $749 = 0, $751 = 0, $752 = 0, $753 = 0, $761 = 0, $765 = 0, $768 = 0, $769 = 0, $774 = 0, $775 = 0, $779 = 0, $781 = 0, $786 = 0, $790 = 0, $793 = 0, $794 = 0, $799 = 0, $8 = 0, $800 = 0, $804 = 0, $806 = 0, $811 = 0, $813 = 0, $817 = 0, $820 = 0, $821 = 0, $826 = 0, $827 = 0, $831 = 0, $833 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $3 = sp + 128 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 88 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 76 | 0;
 $9 = sp + 12 | 0;
 $10 = sp;
 $11 = sp + 64 | 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$5 = $0; else {
  switch (HEAP8[$0 >> 0] | 0) {
  case 75:
  case 86:
  case 114:
   {
    HEAP32[$3 >> 2] = 0;
    $15 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0, $1, $3) | 0;
    L5 : do if (($15 | 0) == ($0 | 0)) $$1429 = $0; else {
     $18 = (HEAP8[$15 >> 0] | 0) == 70;
     $19 = $2 + 4 | 0;
     $23 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $24 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
     $28 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($24 | 0) == ($15 | 0)) $$1429 = $0; else {
      $30 = $2 + 20 | 0;
      $31 = HEAP32[$30 >> 2] | 0;
      if ($18) {
       $$0$i$i$idx$i496 = 0;
       while (1) {
        if (($$0$i$i$idx$i496 | 0) == -1) break;
        $$0$i$i$add$i497 = $$0$i$i$idx$i496 + -1 | 0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($31 + ($$0$i$i$add$i497 << 4) | 0);
        $$0$i$i$idx$i496 = $$0$i$i$add$i497;
       }
       $34 = $31 + -16 | 0;
       HEAP32[$30 >> 2] = $34;
       $38 = $34;
      } else $38 = $31;
      $$sroa$0$0$copyload$i499594 = HEAP32[$2 + 12 >> 2] | 0;
      HEAP32[$4 >> 2] = $$sroa$0$0$copyload$i499594;
      if ($38 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
       HEAP32[$38 >> 2] = 0;
       HEAP32[$38 + 4 >> 2] = 0;
       HEAP32[$38 + 8 >> 2] = 0;
       HEAP32[$38 + 12 >> 2] = $$sroa$0$0$copyload$i499594;
       HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $4);
      $45 = HEAP32[$3 >> 2] | 0;
      $47 = ($45 & 1 | 0) == 0;
      $49 = ($45 & 2 | 0) == 0;
      $51 = ($45 & 4 | 0) == 0;
      $$0434 = $23;
      while (1) {
       if ($$0434 >>> 0 >= $28 >>> 0) {
        $$1429 = $24;
        break L5;
       }
       if ($18) {
        $53 = HEAP32[$2 >> 2] | 0;
        $54 = $53 + ($$0434 * 24 | 0) + 12 | 0;
        $56 = HEAP8[$54 + 11 >> 0] | 0;
        $57 = $56 << 24 >> 24 < 0;
        if ($57) {
         $$in = HEAP32[$53 + ($$0434 * 24 | 0) + 16 >> 2] | 0;
         $64 = HEAP32[$54 >> 2] | 0;
        } else {
         $$in = $56 & 255;
         $64 = $54;
        }
        $62 = $$in + -2 | 0;
        if ((HEAP8[$64 + $62 >> 0] | 0) == 38) $$0435 = $$in + -3 | 0; else {
         if ($57) {
          $73 = HEAP32[$54 >> 2] | 0;
          $74 = HEAP32[$53 + ($$0434 * 24 | 0) + 16 >> 2] | 0;
         } else {
          $73 = $54;
          $74 = $56 & 255;
         }
         $$0435 = (HEAP8[$73 + $74 + -1 >> 0] | 0) == 38 ? $62 : $$in;
        }
        if ($47) $$1436 = $$0435; else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($54, $$0435, 47824) | 0;
         $$1436 = $$0435 + 6 | 0;
        }
        if ($49) $$2437 = $$1436; else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) + 12 | 0, $$1436, 47831) | 0;
         $$2437 = $$1436 + 9 | 0;
        }
        if (!$51) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) + 12 | 0, $$2437, 47841) | 0;
       } else {
        if (!$47) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0, 47824) | 0;
        if (!$49) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0, 47831) | 0;
        if (!$51) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0, 47841) | 0;
       }
       $90 = HEAP32[$30 >> 2] | 0;
       $92 = (HEAP32[$2 >> 2] | 0) + ($$0434 * 24 | 0) | 0;
       $93 = $90 + -12 | 0;
       $94 = HEAP32[$93 >> 2] | 0;
       if (($94 | 0) == (HEAP32[$90 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($90 + -16 | 0, $92); else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($94, $92);
        HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + 24;
       }
       $$0434 = $$0434 + 1 | 0;
      }
     }
    } while (0);
    $$5 = $$1429;
    break L1;
    break;
   }
  default:
   {}
  }
  $102 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($102 | 0) == ($0 | 0)) {
   L59 : do switch (HEAP8[$0 >> 0] | 0) {
   case 65:
    {
     $106 = __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($106 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $110 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($110 | 0)) {
      $$5 = $0;
      break L1;
     }
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $110 + -24 | 0, $4);
     $113 = $2 + 20 | 0;
     $114 = HEAP32[$113 >> 2] | 0;
     if ($114 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$114 >> 2] = 0;
      $119 = $114 + 4 | 0;
      HEAP32[$119 >> 2] = 0;
      $120 = $114 + 8 | 0;
      HEAP32[$120 >> 2] = 0;
      HEAP32[$114 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$114 >> 2] = HEAP32[$3 >> 2];
      $124 = $3 + 4 | 0;
      HEAP32[$119 >> 2] = HEAP32[$124 >> 2];
      $126 = $3 + 8 | 0;
      HEAP32[$120 >> 2] = HEAP32[$126 >> 2];
      HEAP32[$126 >> 2] = 0;
      HEAP32[$124 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$113 >> 2] = (HEAP32[$113 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
     $$5 = $106;
     break L1;
     break;
    }
   case 67:
    {
     $131 = $0 + 1 | 0;
     $132 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($131, $1, $2) | 0;
     if (($132 | 0) == ($131 | 0)) {
      $$5 = $0;
      break L1;
     }
     $135 = $2 + 4 | 0;
     $136 = HEAP32[$135 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($136 | 0)) {
      $$5 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($136 + -24 | 0, 47851) | 0;
     $140 = (HEAP32[$135 >> 2] | 0) + -24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $140, $4);
     $141 = $2 + 20 | 0;
     $142 = HEAP32[$141 >> 2] | 0;
     if ($142 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$142 >> 2] = 0;
      $147 = $142 + 4 | 0;
      HEAP32[$147 >> 2] = 0;
      $148 = $142 + 8 | 0;
      HEAP32[$148 >> 2] = 0;
      HEAP32[$142 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$142 >> 2] = HEAP32[$3 >> 2];
      $152 = $3 + 4 | 0;
      HEAP32[$147 >> 2] = HEAP32[$152 >> 2];
      $154 = $3 + 8 | 0;
      HEAP32[$148 >> 2] = HEAP32[$154 >> 2];
      HEAP32[$154 >> 2] = 0;
      HEAP32[$152 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
     $$5 = $132;
     break L1;
     break;
    }
   case 70:
    {
     $159 = __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($159 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $163 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($163 | 0)) {
      $$5 = $0;
      break L1;
     }
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $163 + -24 | 0, $4);
     $166 = $2 + 20 | 0;
     $167 = HEAP32[$166 >> 2] | 0;
     if ($167 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$167 >> 2] = 0;
      $172 = $167 + 4 | 0;
      HEAP32[$172 >> 2] = 0;
      $173 = $167 + 8 | 0;
      HEAP32[$173 >> 2] = 0;
      HEAP32[$167 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$167 >> 2] = HEAP32[$3 >> 2];
      $177 = $3 + 4 | 0;
      HEAP32[$172 >> 2] = HEAP32[$177 >> 2];
      $179 = $3 + 8 | 0;
      HEAP32[$173 >> 2] = HEAP32[$179 >> 2];
      HEAP32[$179 >> 2] = 0;
      HEAP32[$177 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
     $$5 = $159;
     break L1;
     break;
    }
   case 71:
    {
     $184 = $0 + 1 | 0;
     $185 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($184, $1, $2) | 0;
     if (($185 | 0) == ($184 | 0)) {
      $$5 = $0;
      break L1;
     }
     $188 = $2 + 4 | 0;
     $189 = HEAP32[$188 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($189 | 0)) {
      $$5 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($189 + -24 | 0, 47860) | 0;
     $193 = (HEAP32[$188 >> 2] | 0) + -24 | 0;
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $193, $4);
     $194 = $2 + 20 | 0;
     $195 = HEAP32[$194 >> 2] | 0;
     if ($195 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$195 >> 2] = 0;
      $200 = $195 + 4 | 0;
      HEAP32[$200 >> 2] = 0;
      $201 = $195 + 8 | 0;
      HEAP32[$201 >> 2] = 0;
      HEAP32[$195 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$195 >> 2] = HEAP32[$3 >> 2];
      $205 = $3 + 4 | 0;
      HEAP32[$200 >> 2] = HEAP32[$205 >> 2];
      $207 = $3 + 8 | 0;
      HEAP32[$201 >> 2] = HEAP32[$207 >> 2];
      HEAP32[$207 >> 2] = 0;
      HEAP32[$205 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
     $$5 = $185;
     break L1;
     break;
    }
   case 77:
    {
     $212 = __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($212 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $216 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($216 | 0)) {
      $$5 = $0;
      break L1;
     }
     HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $216 + -24 | 0, $4);
     $219 = $2 + 20 | 0;
     $220 = HEAP32[$219 >> 2] | 0;
     if ($220 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$220 >> 2] = 0;
      $225 = $220 + 4 | 0;
      HEAP32[$225 >> 2] = 0;
      $226 = $220 + 8 | 0;
      HEAP32[$226 >> 2] = 0;
      HEAP32[$220 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$220 >> 2] = HEAP32[$3 >> 2];
      $230 = $3 + 4 | 0;
      HEAP32[$225 >> 2] = HEAP32[$230 >> 2];
      $232 = $3 + 8 | 0;
      HEAP32[$226 >> 2] = HEAP32[$232 >> 2];
      HEAP32[$232 >> 2] = 0;
      HEAP32[$230 >> 2] = 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$219 >> 2] = (HEAP32[$219 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
     $$5 = $212;
     break L1;
     break;
    }
   case 79:
    {
     $237 = $2 + 4 | 0;
     $241 = ((HEAP32[$237 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $242 = $0 + 1 | 0;
     $243 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($242, $1, $2) | 0;
     $247 = ((HEAP32[$237 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($243 | 0) == ($242 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$copyload$i527606 = HEAP32[$2 + 12 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i527606;
     $249 = $2 + 20 | 0;
     $250 = HEAP32[$249 >> 2] | 0;
     if ($250 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$250 >> 2] = 0;
      HEAP32[$250 + 4 >> 2] = 0;
      HEAP32[$250 + 8 >> 2] = 0;
      HEAP32[$250 + 12 >> 2] = $$sroa$0$0$copyload$i527606;
      HEAP32[$249 >> 2] = (HEAP32[$249 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $3);
     $260 = $3 + 11 | 0;
     $261 = $3 + 4 | 0;
     $$0479 = $241;
     while (1) {
      if ($$0479 >>> 0 >= $247 >>> 0) {
       $$5 = $243;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) + 12 | 0, 2);
      $265 = __ZNSt3__211char_traitsIcE6lengthEPKc(47871) | 0;
      $266 = HEAP8[$260 >> 0] | 0;
      if (($265 | 0) == (($266 << 24 >> 24 < 0 ? HEAP32[$261 >> 2] | 0 : $266 & 255) | 0)) $$0$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($3, 47871, $265) | 0) == 0; else $$0$i = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $274 = HEAP32[$2 >> 2] | 0;
      $275 = $274 + ($$0479 * 24 | 0) | 0;
      if ($$0$i) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($275, 47874) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc((HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) + 12 | 0, 0, 47877) | 0;
      } else {
       $278 = $274 + ($$0479 * 24 | 0) + 12 | 0;
       if ((HEAP8[$278 + 11 >> 0] | 0) < 0) $284 = HEAP32[$278 >> 2] | 0; else $284 = $278;
       if ((HEAP8[$284 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($275, 47879) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc((HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) + 12 | 0, 0, 47877) | 0;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) | 0, 47881) | 0;
      $290 = HEAP32[$249 >> 2] | 0;
      $292 = (HEAP32[$2 >> 2] | 0) + ($$0479 * 24 | 0) | 0;
      $293 = $290 + -12 | 0;
      $294 = HEAP32[$293 >> 2] | 0;
      if (($294 | 0) == (HEAP32[$290 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($290 + -16 | 0, $292); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($294, $292);
       HEAP32[$293 >> 2] = (HEAP32[$293 >> 2] | 0) + 24;
      }
      $$0479 = $$0479 + 1 | 0;
     }
     break;
    }
   case 80:
    {
     $302 = $2 + 4 | 0;
     $306 = ((HEAP32[$302 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $307 = $0 + 1 | 0;
     $308 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($307, $1, $2) | 0;
     $312 = ((HEAP32[$302 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($308 | 0) == ($307 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$copyload$i531605 = HEAP32[$2 + 12 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i531605;
     $314 = $2 + 20 | 0;
     $315 = HEAP32[$314 >> 2] | 0;
     if ($315 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$315 >> 2] = 0;
      HEAP32[$315 + 4 >> 2] = 0;
      HEAP32[$315 + 8 >> 2] = 0;
      HEAP32[$315 + 12 >> 2] = $$sroa$0$0$copyload$i531605;
      HEAP32[$314 >> 2] = (HEAP32[$314 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $3);
     $325 = $3 + 11 | 0;
     $326 = $3 + 4 | 0;
     $327 = $3 + 11 | 0;
     $328 = $3 + 4 | 0;
     $$0478 = $306;
     while (1) {
      if ($$0478 >>> 0 >= $312 >>> 0) {
       $$5 = $308;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) + 12 | 0, 2);
      $332 = __ZNSt3__211char_traitsIcE6lengthEPKc(47871) | 0;
      $333 = HEAP8[$325 >> 0] | 0;
      if (($332 | 0) == (($333 << 24 >> 24 < 0 ? HEAP32[$326 >> 2] | 0 : $333 & 255) | 0)) $$0$i533 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($3, 47871, $332) | 0) == 0; else $$0$i533 = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $341 = HEAP32[$2 >> 2] | 0;
      $342 = $341 + ($$0478 * 24 | 0) | 0;
      if ($$0$i533) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($342, 47874) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc((HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) + 12 | 0, 0, 47877) | 0;
      } else {
       $345 = $341 + ($$0478 * 24 | 0) + 12 | 0;
       if ((HEAP8[$345 + 11 >> 0] | 0) < 0) $351 = HEAP32[$345 >> 2] | 0; else $351 = $345;
       if ((HEAP8[$351 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($342, 47879) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc((HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) + 12 | 0, 0, 47877) | 0;
       }
      }
      if ((HEAP8[$307 >> 0] | 0) == 85) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0, 12);
       $361 = __ZNSt3__211char_traitsIcE6lengthEPKc(47884) | 0;
       $362 = HEAP8[$327 >> 0] | 0;
       if (($361 | 0) == (($362 << 24 >> 24 < 0 ? HEAP32[$328 >> 2] | 0 : $362 & 255) | 0)) $$ph = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($3, 47884, $361) | 0) != 0; else $$ph = 1;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $371 = (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0;
       if ($$ph) {
        $372 = $371;
        label = 113;
       } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEmmPKc($371);
      } else {
       $372 = (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0;
       label = 113;
      }
      if ((label | 0) == 113) {
       label = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($372, 47897) | 0;
      }
      $373 = HEAP32[$314 >> 2] | 0;
      $375 = (HEAP32[$2 >> 2] | 0) + ($$0478 * 24 | 0) | 0;
      $376 = $373 + -12 | 0;
      $377 = HEAP32[$376 >> 2] | 0;
      if (($377 | 0) == (HEAP32[$373 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($373 + -16 | 0, $375); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($377, $375);
       HEAP32[$376 >> 2] = (HEAP32[$376 >> 2] | 0) + 24;
      }
      $$0478 = $$0478 + 1 | 0;
     }
     break;
    }
   case 82:
    {
     $385 = $2 + 4 | 0;
     $389 = ((HEAP32[$385 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $390 = $0 + 1 | 0;
     $391 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($390, $1, $2) | 0;
     $395 = ((HEAP32[$385 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($391 | 0) == ($390 | 0)) {
      $$5 = $0;
      break L1;
     }
     $$sroa$0$0$copyload$i538604 = HEAP32[$2 + 12 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i538604;
     $397 = $2 + 20 | 0;
     $398 = HEAP32[$397 >> 2] | 0;
     if ($398 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$398 >> 2] = 0;
      HEAP32[$398 + 4 >> 2] = 0;
      HEAP32[$398 + 8 >> 2] = 0;
      HEAP32[$398 + 12 >> 2] = $$sroa$0$0$copyload$i538604;
      HEAP32[$397 >> 2] = (HEAP32[$397 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $3);
     $408 = $3 + 11 | 0;
     $409 = $3 + 4 | 0;
     $$0444 = $389;
     while (1) {
      if ($$0444 >>> 0 >= $395 >>> 0) {
       $$5 = $391;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($3, (HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) + 12 | 0, 2);
      $413 = __ZNSt3__211char_traitsIcE6lengthEPKc(47871) | 0;
      $414 = HEAP8[$408 >> 0] | 0;
      if (($413 | 0) == (($414 << 24 >> 24 < 0 ? HEAP32[$409 >> 2] | 0 : $414 & 255) | 0)) $$0$i540 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($3, 47871, $413) | 0) == 0; else $$0$i540 = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $422 = HEAP32[$2 >> 2] | 0;
      $423 = $422 + ($$0444 * 24 | 0) | 0;
      if ($$0$i540) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($423, 47874) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc((HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) + 12 | 0, 0, 47877) | 0;
      } else {
       $426 = $422 + ($$0444 * 24 | 0) + 12 | 0;
       if ((HEAP8[$426 + 11 >> 0] | 0) < 0) $432 = HEAP32[$426 >> 2] | 0; else $432 = $426;
       if ((HEAP8[$432 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($423, 47879) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc((HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) + 12 | 0, 0, 47877) | 0;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) | 0, 47899) | 0;
      $438 = HEAP32[$397 >> 2] | 0;
      $440 = (HEAP32[$2 >> 2] | 0) + ($$0444 * 24 | 0) | 0;
      $441 = $438 + -12 | 0;
      $442 = HEAP32[$441 >> 2] | 0;
      if (($442 | 0) == (HEAP32[$438 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($438 + -16 | 0, $440); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($442, $440);
       HEAP32[$441 >> 2] = (HEAP32[$441 >> 2] | 0) + 24;
      }
      $$0444 = $$0444 + 1 | 0;
     }
     break;
    }
   case 84:
    {
     $450 = $2 + 4 | 0;
     $454 = ((HEAP32[$450 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     $455 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     $459 = ((HEAP32[$450 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
     if (($455 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $461 = $2 + 16 | 0;
     $$sroa$0$0$$sroa_idx$i544 = $2 + 12 | 0;
     $$sroa$0$0$copyload$i545602 = HEAP32[$$sroa$0$0$$sroa_idx$i544 >> 2] | 0;
     HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i545602;
     $462 = $2 + 20 | 0;
     $463 = HEAP32[$462 >> 2] | 0;
     $464 = $2 + 24 | 0;
     if ($463 >>> 0 < (HEAP32[$464 >> 2] | 0) >>> 0) {
      HEAP32[$463 >> 2] = 0;
      HEAP32[$463 + 4 >> 2] = 0;
      HEAP32[$463 + 8 >> 2] = 0;
      HEAP32[$463 + 12 >> 2] = $$sroa$0$0$copyload$i545602;
      HEAP32[$462 >> 2] = (HEAP32[$462 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($461, $3);
     $$0438 = $454;
     while (1) {
      if ($$0438 >>> 0 >= $459 >>> 0) break;
      $478 = HEAP32[$462 >> 2] | 0;
      $480 = (HEAP32[$2 >> 2] | 0) + ($$0438 * 24 | 0) | 0;
      $481 = $478 + -12 | 0;
      $482 = HEAP32[$481 >> 2] | 0;
      if (($482 | 0) == (HEAP32[$478 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($478 + -16 | 0, $480); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($482, $480);
       HEAP32[$481 >> 2] = (HEAP32[$481 >> 2] | 0) + 24;
      }
      $$0438 = $$0438 + 1 | 0;
     }
     if (!(($459 | 0) == ($454 + 1 | 0) & (HEAP8[$2 + 63 >> 0] | 0) != 0)) {
      $$5 = $455;
      break L1;
     }
     $490 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($455, $1, $2) | 0;
     if (($490 | 0) == ($455 | 0)) {
      $$5 = $455;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, (HEAP32[$450 >> 2] | 0) + -24 | 0);
     $494 = HEAP32[$450 >> 2] | 0;
     $$0$i$i$idx$i548 = 0;
     while (1) {
      if (($$0$i$i$idx$i548 | 0) == -1) break;
      $$0$i$i$add$i549 = $$0$i$i$idx$i548 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($494 + ($$0$i$i$add$i549 * 24 | 0) | 0);
      $$0$i$i$idx$i548 = $$0$i$i$add$i549;
     }
     HEAP32[$450 >> 2] = $494 + -24;
     $499 = HEAP8[$3 + 11 >> 0] | 0;
     $500 = $499 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($494 + -48 | 0, $500 ? HEAP32[$3 >> 2] | 0 : $3, $500 ? HEAP32[$3 + 4 >> 2] | 0 : $499 & 255) | 0;
     $508 = (HEAP32[$450 >> 2] | 0) + -24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i544 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($4, $508, $5);
     $509 = HEAP32[$462 >> 2] | 0;
     if ($509 >>> 0 < (HEAP32[$464 >> 2] | 0) >>> 0) {
      HEAP32[$509 >> 2] = 0;
      $513 = $509 + 4 | 0;
      HEAP32[$513 >> 2] = 0;
      $514 = $509 + 8 | 0;
      HEAP32[$514 >> 2] = 0;
      HEAP32[$509 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$509 >> 2] = HEAP32[$4 >> 2];
      $518 = $4 + 4 | 0;
      HEAP32[$513 >> 2] = HEAP32[$518 >> 2];
      $520 = $4 + 8 | 0;
      HEAP32[$514 >> 2] = HEAP32[$520 >> 2];
      HEAP32[$520 >> 2] = 0;
      HEAP32[$518 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$462 >> 2] = (HEAP32[$462 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($461, $4);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$5 = $490;
     break L1;
     break;
    }
   case 85:
    {
     $524 = $0 + 1 | 0;
     if (($524 | 0) == ($1 | 0)) {
      $$5 = $0;
      break L1;
     }
     $526 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($524, $1, $2) | 0;
     if (($526 | 0) == ($524 | 0)) {
      $$5 = $0;
      break L1;
     }
     $528 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($526, $1, $2) | 0;
     if (($528 | 0) == ($526 | 0)) {
      $$5 = $0;
      break L1;
     }
     $530 = $2 + 4 | 0;
     $531 = HEAP32[$530 >> 2] | 0;
     if ((($531 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$5 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $531 + -24 | 0);
     $538 = HEAP32[$530 >> 2] | 0;
     $$0$i$i$idx$i560 = 0;
     while (1) {
      if (($$0$i$i$idx$i560 | 0) == -1) break;
      $$0$i$i$add$i561 = $$0$i$i$idx$i560 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($538 + ($$0$i$i$add$i561 * 24 | 0) | 0);
      $$0$i$i$idx$i560 = $$0$i$i$add$i561;
     }
     HEAP32[$530 >> 2] = $538 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($4, $538 + -48 | 0, 9);
     $542 = __ZNSt3__211char_traitsIcE6lengthEPKc(47901) | 0;
     $544 = HEAP8[$4 + 11 >> 0] | 0;
     if (($542 | 0) == (($544 << 24 >> 24 < 0 ? HEAP32[$4 + 4 >> 2] | 0 : $544 & 255) | 0)) {
      $552 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($4, 47901, $542) | 0) == 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      if ($552) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$530 >> 2] | 0) + -24 | 0);
       $571 = HEAP32[$530 >> 2] | 0;
       $$0$i$i$idx$i568 = 0;
       while (1) {
        if (($$0$i$i$idx$i568 | 0) == -1) break;
        $$0$i$i$add$i569 = $$0$i$i$idx$i568 + -1 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($571 + ($$0$i$i$add$i569 * 24 | 0) | 0);
        $$0$i$i$idx$i568 = $$0$i$i$add$i569;
       }
       HEAP32[$530 >> 2] = $571 + -24;
       $574 = $4 + 11 | 0;
       $575 = HEAP8[$574 >> 0] | 0;
       $576 = $575 << 24 >> 24 < 0;
       $578 = $4 + 4 | 0;
       $581 = $576 ? HEAP32[$4 >> 2] | 0 : $4;
       $585 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($581 + 9 | 0, $581 + ($576 ? HEAP32[$578 >> 2] | 0 : $575 & 255) | 0, $2) | 0;
       if (($585 | 0) == (((HEAP8[$574 >> 0] | 0) < 0 ? HEAP32[$4 >> 2] | 0 : $4) + 9 | 0)) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($7, $3, 47911);
        $611 = HEAP8[$574 >> 0] | 0;
        $612 = $611 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7, $612 ? HEAP32[$4 >> 2] | 0 : $4, $612 ? HEAP32[$578 >> 2] | 0 : $611 & 255) | 0;
        HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$11 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
        HEAP32[$11 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
        $$0$i$i$i582 = 0;
        while (1) {
         if (($$0$i$i$i582 | 0) == 3) break;
         HEAP32[$7 + ($$0$i$i$i582 << 2) >> 2] = 0;
         $$0$i$i$i582 = $$0$i$i$i582 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $11);
        $621 = HEAP32[$530 >> 2] | 0;
        if ($621 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($621, $5);
         HEAP32[$530 >> 2] = (HEAP32[$530 >> 2] | 0) + 24;
        } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $5);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       } else {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($9, $3, 47913);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($10, (HEAP32[$530 >> 2] | 0) + -24 | 0);
        $595 = HEAP8[$10 + 11 >> 0] | 0;
        $596 = $595 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($9, $596 ? HEAP32[$10 >> 2] | 0 : $10, $596 ? HEAP32[$10 + 4 >> 2] | 0 : $595 & 255) | 0;
        HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
        $$0$i$i$i575 = 0;
        while (1) {
         if (($$0$i$i$i575 | 0) == 3) break;
         HEAP32[$9 + ($$0$i$i$i575 << 2) >> 2] = 0;
         $$0$i$i$i575 = $$0$i$i$i575 + 1 | 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 47915) | 0;
        HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
        HEAP32[$8 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
        HEAP32[$8 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
        $$0$i$i$i579 = 0;
        while (1) {
         if (($$0$i$i$i579 | 0) == 3) break;
         HEAP32[$7 + ($$0$i$i$i579 << 2) >> 2] = 0;
         $$0$i$i$i579 = $$0$i$i$i579 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $8);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$530 >> 2] | 0) + -24 | 0, $5);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      } else label = 167;
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      label = 167;
     }
     if ((label | 0) == 167) {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($5, $3, 47911);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, (HEAP32[$530 >> 2] | 0) + -24 | 0);
      $556 = HEAP8[$7 + 11 >> 0] | 0;
      $557 = $556 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($5, $557 ? HEAP32[$7 >> 2] | 0 : $7, $557 ? HEAP32[$7 + 4 >> 2] | 0 : $556 & 255) | 0;
      HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $6);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$530 >> 2] | 0) + -24 | 0, $4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $628 = (HEAP32[$530 >> 2] | 0) + -24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($4, $628, $5);
     $629 = $2 + 20 | 0;
     $630 = HEAP32[$629 >> 2] | 0;
     if ($630 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$630 >> 2] = 0;
      $635 = $630 + 4 | 0;
      HEAP32[$635 >> 2] = 0;
      $636 = $630 + 8 | 0;
      HEAP32[$636 >> 2] = 0;
      HEAP32[$630 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$630 >> 2] = HEAP32[$4 >> 2];
      $640 = $4 + 4 | 0;
      HEAP32[$635 >> 2] = HEAP32[$640 >> 2];
      $642 = $4 + 8 | 0;
      HEAP32[$636 >> 2] = HEAP32[$642 >> 2];
      HEAP32[$642 >> 2] = 0;
      HEAP32[$640 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$629 >> 2] = (HEAP32[$629 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $4);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$5 = $528;
     break L1;
     break;
    }
   case 83:
    {
     $647 = $0 + 1 | 0;
     if (($647 | 0) != ($1 | 0)) if ((HEAP8[$647 >> 0] | 0) == 116) {
      $651 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
      if (($651 | 0) == ($0 | 0)) {
       $$5 = $0;
       break L1;
      }
      $655 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($655 | 0)) {
       $$5 = $0;
       break L1;
      }
      HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $655 + -24 | 0, $4);
      $658 = $2 + 20 | 0;
      $659 = HEAP32[$658 >> 2] | 0;
      if ($659 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
       HEAP32[$659 >> 2] = 0;
       $664 = $659 + 4 | 0;
       HEAP32[$664 >> 2] = 0;
       $665 = $659 + 8 | 0;
       HEAP32[$665 >> 2] = 0;
       HEAP32[$659 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
       HEAP32[$659 >> 2] = HEAP32[$3 >> 2];
       $669 = $3 + 4 | 0;
       HEAP32[$664 >> 2] = HEAP32[$669 >> 2];
       $671 = $3 + 8 | 0;
       HEAP32[$665 >> 2] = HEAP32[$671 >> 2];
       HEAP32[$671 >> 2] = 0;
       HEAP32[$669 >> 2] = 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$658 >> 2] = (HEAP32[$658 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
      $$5 = $651;
      break L1;
     }
     $676 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
     if (($676 | 0) == ($0 | 0)) {
      $$5 = $0;
      break L1;
     }
     $678 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($676, $1, $2) | 0;
     if (($678 | 0) == ($676 | 0)) {
      $$5 = $676;
      break L1;
     }
     $680 = $2 + 4 | 0;
     $681 = HEAP32[$680 >> 2] | 0;
     if ((($681 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$5 = $676;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $681 + -24 | 0);
     $688 = HEAP32[$680 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($688 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$680 >> 2] = $688 + -24;
     $693 = HEAP8[$3 + 11 >> 0] | 0;
     $694 = $693 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($688 + -48 | 0, $694 ? HEAP32[$3 >> 2] | 0 : $3, $694 ? HEAP32[$3 + 4 >> 2] | 0 : $693 & 255) | 0;
     $702 = (HEAP32[$680 >> 2] | 0) + -24 | 0;
     HEAP32[$5 >> 2] = HEAP32[$2 + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($4, $702, $5);
     $703 = $2 + 20 | 0;
     $704 = HEAP32[$703 >> 2] | 0;
     if ($704 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
      HEAP32[$704 >> 2] = 0;
      $709 = $704 + 4 | 0;
      HEAP32[$709 >> 2] = 0;
      $710 = $704 + 8 | 0;
      HEAP32[$710 >> 2] = 0;
      HEAP32[$704 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$704 >> 2] = HEAP32[$4 >> 2];
      $714 = $4 + 4 | 0;
      HEAP32[$709 >> 2] = HEAP32[$714 >> 2];
      $716 = $4 + 8 | 0;
      HEAP32[$710 >> 2] = HEAP32[$716 >> 2];
      HEAP32[$716 >> 2] = 0;
      HEAP32[$714 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$703 >> 2] = (HEAP32[$703 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $4);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$5 = $678;
     break L1;
     break;
    }
   case 68:
    {
     $721 = $0 + 1 | 0;
     if (($721 | 0) != ($1 | 0)) switch (HEAP8[$721 >> 0] | 0) {
     case 112:
      {
       $725 = $2 + 4 | 0;
       $729 = ((HEAP32[$725 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       $730 = $0 + 2 | 0;
       $731 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($730, $1, $2) | 0;
       $735 = ((HEAP32[$725 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       if (($731 | 0) == ($730 | 0)) break L59;
       $$sroa$0$0$copyload$i490598 = HEAP32[$2 + 12 >> 2] | 0;
       HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i490598;
       $737 = $2 + 20 | 0;
       $738 = HEAP32[$737 >> 2] | 0;
       if ($738 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
        HEAP32[$738 >> 2] = 0;
        HEAP32[$738 + 4 >> 2] = 0;
        HEAP32[$738 + 8 >> 2] = 0;
        HEAP32[$738 + 12 >> 2] = $$sroa$0$0$copyload$i490598;
        HEAP32[$737 >> 2] = (HEAP32[$737 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($2 + 16 | 0, $3);
       $$0 = $729;
       while (1) {
        if ($$0 >>> 0 >= $735 >>> 0) {
         $$5 = $731;
         break L1;
        }
        $749 = HEAP32[$737 >> 2] | 0;
        $751 = (HEAP32[$2 >> 2] | 0) + ($$0 * 24 | 0) | 0;
        $752 = $749 + -12 | 0;
        $753 = HEAP32[$752 >> 2] | 0;
        if (($753 | 0) == (HEAP32[$749 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($749 + -16 | 0, $751); else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($753, $751);
         HEAP32[$752 >> 2] = (HEAP32[$752 >> 2] | 0) + 24;
        }
        $$0 = $$0 + 1 | 0;
       }
       break;
      }
     case 84:
     case 116:
      {
       $761 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
       if (($761 | 0) == ($0 | 0)) break L59;
       $765 = HEAP32[$2 + 4 >> 2] | 0;
       if ((HEAP32[$2 >> 2] | 0) == ($765 | 0)) {
        $$5 = $0;
        break L1;
       }
       HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $765 + -24 | 0, $4);
       $768 = $2 + 20 | 0;
       $769 = HEAP32[$768 >> 2] | 0;
       if ($769 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
        HEAP32[$769 >> 2] = 0;
        $774 = $769 + 4 | 0;
        HEAP32[$774 >> 2] = 0;
        $775 = $769 + 8 | 0;
        HEAP32[$775 >> 2] = 0;
        HEAP32[$769 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
        HEAP32[$769 >> 2] = HEAP32[$3 >> 2];
        $779 = $3 + 4 | 0;
        HEAP32[$774 >> 2] = HEAP32[$779 >> 2];
        $781 = $3 + 8 | 0;
        HEAP32[$775 >> 2] = HEAP32[$781 >> 2];
        HEAP32[$781 >> 2] = 0;
        HEAP32[$779 >> 2] = 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$768 >> 2] = (HEAP32[$768 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
       $$5 = $761;
       break L1;
       break;
      }
     case 118:
      {
       $786 = __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
       if (($786 | 0) == ($0 | 0)) break L59;
       $790 = HEAP32[$2 + 4 >> 2] | 0;
       if ((HEAP32[$2 >> 2] | 0) == ($790 | 0)) {
        $$5 = $0;
        break L1;
       }
       HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $790 + -24 | 0, $4);
       $793 = $2 + 20 | 0;
       $794 = HEAP32[$793 >> 2] | 0;
       if ($794 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
        HEAP32[$794 >> 2] = 0;
        $799 = $794 + 4 | 0;
        HEAP32[$799 >> 2] = 0;
        $800 = $794 + 8 | 0;
        HEAP32[$800 >> 2] = 0;
        HEAP32[$794 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
        HEAP32[$794 >> 2] = HEAP32[$3 >> 2];
        $804 = $3 + 4 | 0;
        HEAP32[$799 >> 2] = HEAP32[$804 >> 2];
        $806 = $3 + 8 | 0;
        HEAP32[$800 >> 2] = HEAP32[$806 >> 2];
        HEAP32[$806 >> 2] = 0;
        HEAP32[$804 >> 2] = 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$793 >> 2] = (HEAP32[$793 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
       $$5 = $786;
       break L1;
       break;
      }
     default:
      break L59;
     }
     break;
    }
   default:
    {}
   } while (0);
   $811 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($811 | 0) == ($0 | 0)) {
    $813 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    if (($813 | 0) == ($0 | 0)) $$5 = $0; else {
     $817 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($817 | 0)) $$5 = $0; else {
      HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $817 + -24 | 0, $4);
      $820 = $2 + 20 | 0;
      $821 = HEAP32[$820 >> 2] | 0;
      if ($821 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
       HEAP32[$821 >> 2] = 0;
       $826 = $821 + 4 | 0;
       HEAP32[$826 >> 2] = 0;
       $827 = $821 + 8 | 0;
       HEAP32[$827 >> 2] = 0;
       HEAP32[$821 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
       HEAP32[$821 >> 2] = HEAP32[$3 >> 2];
       $831 = $3 + 4 | 0;
       HEAP32[$826 >> 2] = HEAP32[$831 >> 2];
       $833 = $3 + 8 | 0;
       HEAP32[$827 >> 2] = HEAP32[$833 >> 2];
       HEAP32[$833 >> 2] = 0;
       HEAP32[$831 >> 2] = 0;
       HEAP32[$3 >> 2] = 0;
       HEAP32[$820 >> 2] = (HEAP32[$820 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
      $$5 = $813;
     }
    }
   } else $$5 = $811;
  } else $$5 = $102;
 } while (0);
 STACKTOP = sp;
 return $$5 | 0;
}

function _malloc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0, $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1000 = 0, $1003 = 0, $1008 = 0, $101 = 0, $1014 = 0, $1017 = 0, $1018 = 0, $102 = 0, $1025 = 0, $1037 = 0, $1042 = 0, $1049 = 0, $1050 = 0, $1051 = 0, $1060 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $14 = 0, $140 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $19 = 0, $193 = 0, $198 = 0, $20 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $27 = 0, $276 = 0, $286 = 0, $290 = 0, $299 = 0, $30 = 0, $302 = 0, $306 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $333 = 0, $334 = 0, $336 = 0, $34 = 0, $341 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $380 = 0, $385 = 0, $388 = 0, $393 = 0, $397 = 0, $403 = 0, $41 = 0, $410 = 0, $414 = 0, $422 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $463 = 0, $465 = 0, $467 = 0, $469 = 0, $47 = 0, $475 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $510 = 0, $512 = 0, $513 = 0, $515 = 0, $52 = 0, $524 = 0, $528 = 0, $530 = 0, $531 = 0, $532 = 0, $54 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $550 = 0, $552 = 0, $553 = 0, $559 = 0, $56 = 0, $561 = 0, $568 = 0, $570 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $582 = 0, $583 = 0, $586 = 0, $590 = 0, $593 = 0, $596 = 0, $6 = 0, $60 = 0, $602 = 0, $606 = 0, $610 = 0, $619 = 0, $62 = 0, $620 = 0, $626 = 0, $628 = 0, $632 = 0, $635 = 0, $637 = 0, $64 = 0, $641 = 0, $643 = 0, $648 = 0, $649 = 0, $650 = 0, $656 = 0, $658 = 0, $662 = 0, $664 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $807 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $889 = 0, $9 = 0, $901 = 0, $906 = 0, $913 = 0, $914 = 0, $915 = 0, $92 = 0, $923 = 0, $927 = 0, $93 = 0, $931 = 0, $933 = 0, $939 = 0, $940 = 0, $942 = 0, $943 = 0, $945 = 0, $947 = 0, $95 = 0, $952 = 0, $953 = 0, $954 = 0, $96 = 0, $960 = 0, $962 = 0, $968 = 0, $973 = 0, $976 = 0, $977 = 0, $978 = 0, $98 = 0, $982 = 0, $983 = 0, $989 = 0, $994 = 0, $995 = 0, $998 = 0, $spec$select$i205 = 0, $spec$select3$i = 0, $spec$select49$i = 0, label = 0, sp = 0, $962$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 do if ($0 >>> 0 < 245) {
  $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
  $7 = $6 >>> 3;
  $8 = HEAP32[546337] | 0;
  $9 = $8 >>> $7;
  if ($9 & 3 | 0) {
   $14 = ($9 & 1 ^ 1) + $7 | 0;
   $16 = 2185388 + ($14 << 1 << 2) | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   do if (($20 | 0) == ($16 | 0)) HEAP32[546337] = $8 & ~(1 << $14); else {
    if ((HEAP32[546341] | 0) >>> 0 > $20 >>> 0) _abort();
    $27 = $20 + 12 | 0;
    if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$27 >> 2] = $16;
     HEAP32[$17 >> 2] = $20;
     break;
    } else _abort();
   } while (0);
   $30 = $14 << 3;
   HEAP32[$18 + 4 >> 2] = $30 | 3;
   $34 = $18 + $30 + 4 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
   $$0 = $19;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $37 = HEAP32[546339] | 0;
  if ($6 >>> 0 > $37 >>> 0) {
   if ($9 | 0) {
    $41 = 2 << $7;
    $44 = $9 << $7 & ($41 | 0 - $41);
    $47 = ($44 & 0 - $44) + -1 | 0;
    $49 = $47 >>> 12 & 16;
    $50 = $47 >>> $49;
    $52 = $50 >>> 5 & 8;
    $54 = $50 >>> $52;
    $56 = $54 >>> 2 & 4;
    $58 = $54 >>> $56;
    $60 = $58 >>> 1 & 2;
    $62 = $58 >>> $60;
    $64 = $62 >>> 1 & 1;
    $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0;
    $69 = 2185388 + ($67 << 1 << 2) | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 + 8 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    do if (($73 | 0) == ($69 | 0)) {
     $77 = $8 & ~(1 << $67);
     HEAP32[546337] = $77;
     $98 = $77;
    } else {
     if ((HEAP32[546341] | 0) >>> 0 > $73 >>> 0) _abort();
     $80 = $73 + 12 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
      HEAP32[$80 >> 2] = $69;
      HEAP32[$70 >> 2] = $73;
      $98 = $8;
      break;
     } else _abort();
    } while (0);
    $83 = $67 << 3;
    $84 = $83 - $6 | 0;
    HEAP32[$71 + 4 >> 2] = $6 | 3;
    $87 = $71 + $6 | 0;
    HEAP32[$87 + 4 >> 2] = $84 | 1;
    HEAP32[$71 + $83 >> 2] = $84;
    if ($37 | 0) {
     $92 = HEAP32[546342] | 0;
     $93 = $37 >>> 3;
     $95 = 2185388 + ($93 << 1 << 2) | 0;
     $96 = 1 << $93;
     if (!($98 & $96)) {
      HEAP32[546337] = $98 | $96;
      $$0199 = $95;
      $$pre$phiZ2D = $95 + 8 | 0;
     } else {
      $101 = $95 + 8 | 0;
      $102 = HEAP32[$101 >> 2] | 0;
      if ((HEAP32[546341] | 0) >>> 0 > $102 >>> 0) _abort(); else {
       $$0199 = $102;
       $$pre$phiZ2D = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $92;
     HEAP32[$$0199 + 12 >> 2] = $92;
     HEAP32[$92 + 8 >> 2] = $$0199;
     HEAP32[$92 + 12 >> 2] = $95;
    }
    HEAP32[546339] = $84;
    HEAP32[546342] = $87;
    $$0 = $72;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $108 = HEAP32[546338] | 0;
   if (!$108) $$0197 = $6; else {
    $112 = ($108 & 0 - $108) + -1 | 0;
    $114 = $112 >>> 12 & 16;
    $115 = $112 >>> $114;
    $117 = $115 >>> 5 & 8;
    $119 = $115 >>> $117;
    $121 = $119 >>> 2 & 4;
    $123 = $119 >>> $121;
    $125 = $123 >>> 1 & 2;
    $127 = $123 >>> $125;
    $129 = $127 >>> 1 & 1;
    $134 = HEAP32[2185652 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0;
    $$0189$i = $134;
    $$0190$i = $134;
    $$0191$i = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0;
    while (1) {
     $140 = HEAP32[$$0189$i + 16 >> 2] | 0;
     if (!$140) {
      $143 = HEAP32[$$0189$i + 20 >> 2] | 0;
      if (!$143) break; else $146 = $143;
     } else $146 = $140;
     $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0;
     $150 = $149 >>> 0 < $$0191$i >>> 0;
     $$0189$i = $146;
     $$0190$i = $150 ? $146 : $$0190$i;
     $$0191$i = $150 ? $149 : $$0191$i;
    }
    $151 = HEAP32[546341] | 0;
    if ($151 >>> 0 > $$0190$i >>> 0) _abort();
    $153 = $$0190$i + $6 | 0;
    if ($153 >>> 0 <= $$0190$i >>> 0) _abort();
    $156 = HEAP32[$$0190$i + 24 >> 2] | 0;
    $158 = HEAP32[$$0190$i + 12 >> 2] | 0;
    do if (($158 | 0) == ($$0190$i | 0)) {
     $169 = $$0190$i + 20 | 0;
     $170 = HEAP32[$169 >> 2] | 0;
     if (!$170) {
      $172 = $$0190$i + 16 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      if (!$173) {
       $$3$i = 0;
       break;
      } else {
       $$1194$i$ph = $173;
       $$1196$i$ph = $172;
      }
     } else {
      $$1194$i$ph = $170;
      $$1196$i$ph = $169;
     }
     $$1194$i = $$1194$i$ph;
     $$1196$i = $$1196$i$ph;
     while (1) {
      $175 = $$1194$i + 20 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      if (!$176) {
       $178 = $$1194$i + 16 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       if (!$179) break; else {
        $$1194$i$be = $179;
        $$1196$i$be = $178;
       }
      } else {
       $$1194$i$be = $176;
       $$1196$i$be = $175;
      }
      $$1194$i = $$1194$i$be;
      $$1196$i = $$1196$i$be;
     }
     if ($151 >>> 0 > $$1196$i >>> 0) _abort(); else {
      HEAP32[$$1196$i >> 2] = 0;
      $$3$i = $$1194$i;
      break;
     }
    } else {
     $161 = HEAP32[$$0190$i + 8 >> 2] | 0;
     if ($151 >>> 0 > $161 >>> 0) _abort();
     $163 = $161 + 12 | 0;
     if ((HEAP32[$163 >> 2] | 0) != ($$0190$i | 0)) _abort();
     $166 = $158 + 8 | 0;
     if ((HEAP32[$166 >> 2] | 0) == ($$0190$i | 0)) {
      HEAP32[$163 >> 2] = $158;
      HEAP32[$166 >> 2] = $161;
      $$3$i = $158;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($156 | 0) {
     $184 = HEAP32[$$0190$i + 28 >> 2] | 0;
     $185 = 2185652 + ($184 << 2) | 0;
     do if (($$0190$i | 0) == (HEAP32[$185 >> 2] | 0)) {
      HEAP32[$185 >> 2] = $$3$i;
      if (!$$3$i) {
       HEAP32[546338] = $108 & ~(1 << $184);
       break L78;
      }
     } else if ((HEAP32[546341] | 0) >>> 0 > $156 >>> 0) _abort(); else {
      $193 = $156 + 16 | 0;
      HEAP32[((HEAP32[$193 >> 2] | 0) == ($$0190$i | 0) ? $193 : $156 + 20 | 0) >> 2] = $$3$i;
      if (!$$3$i) break L78; else break;
     } while (0);
     $198 = HEAP32[546341] | 0;
     if ($198 >>> 0 > $$3$i >>> 0) _abort();
     HEAP32[$$3$i + 24 >> 2] = $156;
     $202 = HEAP32[$$0190$i + 16 >> 2] | 0;
     do if ($202 | 0) if ($198 >>> 0 > $202 >>> 0) _abort(); else {
      HEAP32[$$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $$3$i;
      break;
     } while (0);
     $208 = HEAP32[$$0190$i + 20 >> 2] | 0;
     if ($208 | 0) if ((HEAP32[546341] | 0) >>> 0 > $208 >>> 0) _abort(); else {
      HEAP32[$$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $$3$i;
      break;
     }
    } while (0);
    if ($$0191$i >>> 0 < 16) {
     $215 = $$0191$i + $6 | 0;
     HEAP32[$$0190$i + 4 >> 2] = $215 | 3;
     $219 = $$0190$i + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$$0190$i + 4 >> 2] = $6 | 3;
     HEAP32[$153 + 4 >> 2] = $$0191$i | 1;
     HEAP32[$153 + $$0191$i >> 2] = $$0191$i;
     if ($37 | 0) {
      $228 = HEAP32[546342] | 0;
      $229 = $37 >>> 3;
      $231 = 2185388 + ($229 << 1 << 2) | 0;
      $232 = 1 << $229;
      if (!($232 & $8)) {
       HEAP32[546337] = $232 | $8;
       $$0187$i = $231;
       $$pre$phi$iZ2D = $231 + 8 | 0;
      } else {
       $236 = $231 + 8 | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ((HEAP32[546341] | 0) >>> 0 > $237 >>> 0) _abort(); else {
        $$0187$i = $237;
        $$pre$phi$iZ2D = $236;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $228;
      HEAP32[$$0187$i + 12 >> 2] = $228;
      HEAP32[$228 + 8 >> 2] = $$0187$i;
      HEAP32[$228 + 12 >> 2] = $231;
     }
     HEAP32[546339] = $$0191$i;
     HEAP32[546342] = $153;
    }
    $$0 = $$0190$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $$0197 = $6;
 } else if ($0 >>> 0 > 4294967231) $$0197 = -1; else {
  $245 = $0 + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[546338] | 0;
  if (!$247) $$0197 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $$0357$i = 0; else if ($246 >>> 0 > 16777215) $$0357$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $$0357$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[2185652 + ($$0357$i << 2) >> 2] | 0;
   L122 : do if (!$276) {
    $$2353$i = 0;
    $$3$i203 = 0;
    $$3348$i = $249;
    label = 85;
   } else {
    $$0340$i = 0;
    $$0345$i = $249;
    $$0351$i = $276;
    $$0358$i = $246 << (($$0357$i | 0) == 31 ? 0 : 25 - ($$0357$i >>> 1) | 0);
    $$0361$i = 0;
    while (1) {
     $286 = (HEAP32[$$0351$i + 4 >> 2] & -8) - $246 | 0;
     if ($286 >>> 0 < $$0345$i >>> 0) if (!$286) {
      $$420$i$ph = $$0351$i;
      $$434919$i$ph = 0;
      $$535618$i$ph = $$0351$i;
      label = 89;
      break L122;
     } else {
      $$1341$i = $$0351$i;
      $$1346$i = $286;
     } else {
      $$1341$i = $$0340$i;
      $$1346$i = $$0345$i;
     }
     $290 = HEAP32[$$0351$i + 20 >> 2] | 0;
     $$0351$i = HEAP32[$$0351$i + 16 + ($$0358$i >>> 31 << 2) >> 2] | 0;
     $$1362$i = ($290 | 0) == 0 | ($290 | 0) == ($$0351$i | 0) ? $$0361$i : $290;
     if (!$$0351$i) {
      $$2353$i = $$1362$i;
      $$3$i203 = $$1341$i;
      $$3348$i = $$1346$i;
      label = 85;
      break;
     } else {
      $$0340$i = $$1341$i;
      $$0345$i = $$1346$i;
      $$0358$i = $$0358$i << 1;
      $$0361$i = $$1362$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($$2353$i | 0) == 0 & ($$3$i203 | 0) == 0) {
     $299 = 2 << $$0357$i;
     $302 = ($299 | 0 - $299) & $247;
     if (!$302) {
      $$0197 = $246;
      break;
     }
     $306 = ($302 & 0 - $302) + -1 | 0;
     $308 = $306 >>> 12 & 16;
     $309 = $306 >>> $308;
     $311 = $309 >>> 5 & 8;
     $313 = $309 >>> $311;
     $315 = $313 >>> 2 & 4;
     $317 = $313 >>> $315;
     $319 = $317 >>> 1 & 2;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 1;
     $$3$i203218 = 0;
     $$4355$i = HEAP32[2185652 + (($311 | $308 | $315 | $319 | $323) + ($321 >>> $323) << 2) >> 2] | 0;
    } else {
     $$3$i203218 = $$3$i203;
     $$4355$i = $$2353$i;
    }
    if (!$$4355$i) {
     $$4$lcssa$i = $$3$i203218;
     $$4349$lcssa$i = $$3348$i;
    } else {
     $$420$i$ph = $$3$i203218;
     $$434919$i$ph = $$3348$i;
     $$535618$i$ph = $$4355$i;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $$420$i = $$420$i$ph;
    $$434919$i = $$434919$i$ph;
    $$535618$i = $$535618$i$ph;
    while (1) {
     $333 = (HEAP32[$$535618$i + 4 >> 2] & -8) - $246 | 0;
     $334 = $333 >>> 0 < $$434919$i >>> 0;
     $spec$select$i205 = $334 ? $333 : $$434919$i;
     $spec$select3$i = $334 ? $$535618$i : $$420$i;
     $336 = HEAP32[$$535618$i + 16 >> 2] | 0;
     if (!$336) $341 = HEAP32[$$535618$i + 20 >> 2] | 0; else $341 = $336;
     if (!$341) {
      $$4$lcssa$i = $spec$select3$i;
      $$4349$lcssa$i = $spec$select$i205;
      break;
     } else {
      $$420$i = $spec$select3$i;
      $$434919$i = $spec$select$i205;
      $$535618$i = $341;
     }
    }
   }
   if (!$$4$lcssa$i) $$0197 = $246; else if ($$4349$lcssa$i >>> 0 < ((HEAP32[546339] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[546341] | 0;
    if ($346 >>> 0 > $$4$lcssa$i >>> 0) _abort();
    $348 = $$4$lcssa$i + $246 | 0;
    if ($348 >>> 0 <= $$4$lcssa$i >>> 0) _abort();
    $351 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($$4$lcssa$i | 0)) {
     $364 = $$4$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $$4$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $$3371$i = 0;
       break;
      } else {
       $$1369$i$ph = $368;
       $$1373$i$ph = $367;
      }
     } else {
      $$1369$i$ph = $365;
      $$1373$i$ph = $364;
     }
     $$1369$i = $$1369$i$ph;
     $$1373$i = $$1373$i$ph;
     while (1) {
      $370 = $$1369$i + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $373 = $$1369$i + 16 | 0;
       $374 = HEAP32[$373 >> 2] | 0;
       if (!$374) break; else {
        $$1369$i$be = $374;
        $$1373$i$be = $373;
       }
      } else {
       $$1369$i$be = $371;
       $$1373$i$be = $370;
      }
      $$1369$i = $$1369$i$be;
      $$1373$i = $$1373$i$be;
     }
     if ($346 >>> 0 > $$1373$i >>> 0) _abort(); else {
      HEAP32[$$1373$i >> 2] = 0;
      $$3371$i = $$1369$i;
      break;
     }
    } else {
     $356 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0;
     if ($346 >>> 0 > $356 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($$4$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($$4$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $$3371$i = $353;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$351) $469 = $247; else {
     $379 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0;
     $380 = 2185652 + ($379 << 2) | 0;
     do if (($$4$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $$3371$i;
      if (!$$3371$i) {
       $385 = $247 & ~(1 << $379);
       HEAP32[546338] = $385;
       $469 = $385;
       break L176;
      }
     } else if ((HEAP32[546341] | 0) >>> 0 > $351 >>> 0) _abort(); else {
      $388 = $351 + 16 | 0;
      HEAP32[((HEAP32[$388 >> 2] | 0) == ($$4$lcssa$i | 0) ? $388 : $351 + 20 | 0) >> 2] = $$3371$i;
      if (!$$3371$i) {
       $469 = $247;
       break L176;
      } else break;
     } while (0);
     $393 = HEAP32[546341] | 0;
     if ($393 >>> 0 > $$3371$i >>> 0) _abort();
     HEAP32[$$3371$i + 24 >> 2] = $351;
     $397 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0;
     do if ($397 | 0) if ($393 >>> 0 > $397 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 16 >> 2] = $397;
      HEAP32[$397 + 24 >> 2] = $$3371$i;
      break;
     } while (0);
     $403 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0;
     if (!$403) $469 = $247; else if ((HEAP32[546341] | 0) >>> 0 > $403 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 20 >> 2] = $403;
      HEAP32[$403 + 24 >> 2] = $$3371$i;
      $469 = $247;
      break;
     }
    } while (0);
    L200 : do if ($$4349$lcssa$i >>> 0 < 16) {
     $410 = $$4349$lcssa$i + $246 | 0;
     HEAP32[$$4$lcssa$i + 4 >> 2] = $410 | 3;
     $414 = $$4$lcssa$i + $410 + 4 | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$$4$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$348 + 4 >> 2] = $$4349$lcssa$i | 1;
     HEAP32[$348 + $$4349$lcssa$i >> 2] = $$4349$lcssa$i;
     $422 = $$4349$lcssa$i >>> 3;
     if ($$4349$lcssa$i >>> 0 < 256) {
      $425 = 2185388 + ($422 << 1 << 2) | 0;
      $426 = HEAP32[546337] | 0;
      $427 = 1 << $422;
      if (!($426 & $427)) {
       HEAP32[546337] = $426 | $427;
       $$0367$i = $425;
       $$pre$phi$i209Z2D = $425 + 8 | 0;
      } else {
       $431 = $425 + 8 | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ((HEAP32[546341] | 0) >>> 0 > $432 >>> 0) _abort(); else {
        $$0367$i = $432;
        $$pre$phi$i209Z2D = $431;
       }
      }
      HEAP32[$$pre$phi$i209Z2D >> 2] = $348;
      HEAP32[$$0367$i + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $$0367$i;
      HEAP32[$348 + 12 >> 2] = $425;
      break;
     }
     $438 = $$4349$lcssa$i >>> 8;
     if (!$438) $$0360$i = 0; else if ($$4349$lcssa$i >>> 0 > 16777215) $$0360$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $$0360$i = $$4349$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 2185652 + ($$0360$i << 2) | 0;
     HEAP32[$348 + 28 >> 2] = $$0360$i;
     $465 = $348 + 16 | 0;
     HEAP32[$465 + 4 >> 2] = 0;
     HEAP32[$465 >> 2] = 0;
     $467 = 1 << $$0360$i;
     if (!($469 & $467)) {
      HEAP32[546338] = $469 | $467;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$348 + 24 >> 2] = $463;
      HEAP32[$348 + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     L218 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) $$0343$lcssa$i = $475; else {
      $$034217$i = $$4349$lcssa$i << (($$0360$i | 0) == 31 ? 0 : 25 - ($$0360$i >>> 1) | 0);
      $$034316$i = $475;
      while (1) {
       $492 = $$034316$i + 16 + ($$034217$i >>> 31 << 2) | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) break;
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) {
        $$0343$lcssa$i = $487;
        break L218;
       } else {
        $$034217$i = $$034217$i << 1;
        $$034316$i = $487;
       }
      }
      if ((HEAP32[546341] | 0) >>> 0 > $492 >>> 0) _abort(); else {
       HEAP32[$492 >> 2] = $348;
       HEAP32[$348 + 24 >> 2] = $$034316$i;
       HEAP32[$348 + 12 >> 2] = $348;
       HEAP32[$348 + 8 >> 2] = $348;
       break L200;
      }
     } while (0);
     $499 = $$0343$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[546341] | 0;
     if ($501 >>> 0 <= $500 >>> 0 & $501 >>> 0 <= $$0343$lcssa$i >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $500;
      HEAP32[$348 + 12 >> 2] = $$0343$lcssa$i;
      HEAP32[$348 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $$0197 = $246;
  }
 } while (0);
 $510 = HEAP32[546339] | 0;
 if ($510 >>> 0 >= $$0197 >>> 0) {
  $512 = $510 - $$0197 | 0;
  $513 = HEAP32[546342] | 0;
  if ($512 >>> 0 > 15) {
   $515 = $513 + $$0197 | 0;
   HEAP32[546342] = $515;
   HEAP32[546339] = $512;
   HEAP32[$515 + 4 >> 2] = $512 | 1;
   HEAP32[$513 + $510 >> 2] = $512;
   HEAP32[$513 + 4 >> 2] = $$0197 | 3;
  } else {
   HEAP32[546339] = 0;
   HEAP32[546342] = 0;
   HEAP32[$513 + 4 >> 2] = $510 | 3;
   $524 = $513 + $510 + 4 | 0;
   HEAP32[$524 >> 2] = HEAP32[$524 >> 2] | 1;
  }
  $$0 = $513 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $528 = HEAP32[546340] | 0;
 if ($528 >>> 0 > $$0197 >>> 0) {
  $530 = $528 - $$0197 | 0;
  HEAP32[546340] = $530;
  $531 = HEAP32[546343] | 0;
  $532 = $531 + $$0197 | 0;
  HEAP32[546343] = $532;
  HEAP32[$532 + 4 >> 2] = $530 | 1;
  HEAP32[$531 + 4 >> 2] = $$0197 | 3;
  $$0 = $531 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[546455] | 0)) {
  HEAP32[546457] = 4096;
  HEAP32[546456] = 4096;
  HEAP32[546458] = -1;
  HEAP32[546459] = -1;
  HEAP32[546460] = 0;
  HEAP32[546448] = 0;
  HEAP32[546455] = $1 & -16 ^ 1431655768;
  $546 = 4096;
 } else $546 = HEAP32[546457] | 0;
 $543 = $$0197 + 48 | 0;
 $544 = $$0197 + 47 | 0;
 $545 = $546 + $544 | 0;
 $547 = 0 - $546 | 0;
 $548 = $545 & $547;
 if ($548 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $550 = HEAP32[546447] | 0;
 if ($550 | 0) {
  $552 = HEAP32[546445] | 0;
  $553 = $552 + $548 | 0;
  if ($553 >>> 0 <= $552 >>> 0 | $553 >>> 0 > $550 >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[546448] & 4)) {
  $559 = HEAP32[546343] | 0;
  L259 : do if (!$559) label = 173; else {
   $$0$i$i = 2185796;
   while (1) {
    $561 = HEAP32[$$0$i$i >> 2] | 0;
    if ($561 >>> 0 <= $559 >>> 0) if (($561 + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $559 >>> 0) break;
    $568 = HEAP32[$$0$i$i + 8 >> 2] | 0;
    if (!$568) {
     label = 173;
     break L259;
    } else $$0$i$i = $568;
   }
   $593 = $545 - $528 & $547;
   if ($593 >>> 0 < 2147483647) {
    $596 = _sbrk($593 | 0) | 0;
    if (($596 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0)) if (($596 | 0) == (-1 | 0)) $$2234243136$i = $593; else {
     $$723947$i = $593;
     $$748$i = $596;
     label = 190;
     break L257;
    } else {
     $$2247$ph$i = $596;
     $$2253$ph$i = $593;
     label = 181;
    }
   } else $$2234243136$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $570 = _sbrk(0) | 0;
   if (($570 | 0) == (-1 | 0)) $$2234243136$i = 0; else {
    $572 = $570;
    $573 = HEAP32[546456] | 0;
    $574 = $573 + -1 | 0;
    $spec$select49$i = (($574 & $572 | 0) == 0 ? 0 : ($574 + $572 & 0 - $573) - $572 | 0) + $548 | 0;
    $582 = HEAP32[546445] | 0;
    $583 = $spec$select49$i + $582 | 0;
    if ($spec$select49$i >>> 0 > $$0197 >>> 0 & $spec$select49$i >>> 0 < 2147483647) {
     $586 = HEAP32[546447] | 0;
     if ($586 | 0) if ($583 >>> 0 <= $582 >>> 0 | $583 >>> 0 > $586 >>> 0) {
      $$2234243136$i = 0;
      break;
     }
     $590 = _sbrk($spec$select49$i | 0) | 0;
     if (($590 | 0) == ($570 | 0)) {
      $$723947$i = $spec$select49$i;
      $$748$i = $570;
      label = 190;
      break L257;
     } else {
      $$2247$ph$i = $590;
      $$2253$ph$i = $spec$select49$i;
      label = 181;
     }
    } else $$2234243136$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $602 = 0 - $$2253$ph$i | 0;
   if (!($543 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) if (($$2247$ph$i | 0) == (-1 | 0)) {
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   $606 = HEAP32[546457] | 0;
   $610 = $544 - $$2253$ph$i + $606 & 0 - $606;
   if ($610 >>> 0 >= 2147483647) {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($610 | 0) | 0) == (-1 | 0)) {
    _sbrk($602 | 0) | 0;
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $610 + $$2253$ph$i | 0;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[546448] = HEAP32[546448] | 4;
  $$4236$i = $$2234243136$i;
  label = 188;
 } else {
  $$4236$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($548 >>> 0 < 2147483647) {
  $619 = _sbrk($548 | 0) | 0;
  $620 = _sbrk(0) | 0;
  $626 = $620 - $619 | 0;
  $628 = $626 >>> 0 > ($$0197 + 40 | 0) >>> 0;
  if (!(($619 | 0) == (-1 | 0) | $628 ^ 1 | $619 >>> 0 < $620 >>> 0 & (($619 | 0) != (-1 | 0) & ($620 | 0) != (-1 | 0)) ^ 1)) {
   $$723947$i = $628 ? $626 : $$4236$i;
   $$748$i = $619;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $632 = (HEAP32[546445] | 0) + $$723947$i | 0;
  HEAP32[546445] = $632;
  if ($632 >>> 0 > (HEAP32[546446] | 0) >>> 0) HEAP32[546446] = $632;
  $635 = HEAP32[546343] | 0;
  L294 : do if (!$635) {
   $637 = HEAP32[546341] | 0;
   if (($637 | 0) == 0 | $$748$i >>> 0 < $637 >>> 0) HEAP32[546341] = $$748$i;
   HEAP32[546449] = $$748$i;
   HEAP32[546450] = $$723947$i;
   HEAP32[546452] = 0;
   HEAP32[546346] = HEAP32[546455];
   HEAP32[546345] = -1;
   HEAP32[546350] = 2185388;
   HEAP32[546349] = 2185388;
   HEAP32[546352] = 2185396;
   HEAP32[546351] = 2185396;
   HEAP32[546354] = 2185404;
   HEAP32[546353] = 2185404;
   HEAP32[546356] = 2185412;
   HEAP32[546355] = 2185412;
   HEAP32[546358] = 2185420;
   HEAP32[546357] = 2185420;
   HEAP32[546360] = 2185428;
   HEAP32[546359] = 2185428;
   HEAP32[546362] = 2185436;
   HEAP32[546361] = 2185436;
   HEAP32[546364] = 2185444;
   HEAP32[546363] = 2185444;
   HEAP32[546366] = 2185452;
   HEAP32[546365] = 2185452;
   HEAP32[546368] = 2185460;
   HEAP32[546367] = 2185460;
   HEAP32[546370] = 2185468;
   HEAP32[546369] = 2185468;
   HEAP32[546372] = 2185476;
   HEAP32[546371] = 2185476;
   HEAP32[546374] = 2185484;
   HEAP32[546373] = 2185484;
   HEAP32[546376] = 2185492;
   HEAP32[546375] = 2185492;
   HEAP32[546378] = 2185500;
   HEAP32[546377] = 2185500;
   HEAP32[546380] = 2185508;
   HEAP32[546379] = 2185508;
   HEAP32[546382] = 2185516;
   HEAP32[546381] = 2185516;
   HEAP32[546384] = 2185524;
   HEAP32[546383] = 2185524;
   HEAP32[546386] = 2185532;
   HEAP32[546385] = 2185532;
   HEAP32[546388] = 2185540;
   HEAP32[546387] = 2185540;
   HEAP32[546390] = 2185548;
   HEAP32[546389] = 2185548;
   HEAP32[546392] = 2185556;
   HEAP32[546391] = 2185556;
   HEAP32[546394] = 2185564;
   HEAP32[546393] = 2185564;
   HEAP32[546396] = 2185572;
   HEAP32[546395] = 2185572;
   HEAP32[546398] = 2185580;
   HEAP32[546397] = 2185580;
   HEAP32[546400] = 2185588;
   HEAP32[546399] = 2185588;
   HEAP32[546402] = 2185596;
   HEAP32[546401] = 2185596;
   HEAP32[546404] = 2185604;
   HEAP32[546403] = 2185604;
   HEAP32[546406] = 2185612;
   HEAP32[546405] = 2185612;
   HEAP32[546408] = 2185620;
   HEAP32[546407] = 2185620;
   HEAP32[546410] = 2185628;
   HEAP32[546409] = 2185628;
   HEAP32[546412] = 2185636;
   HEAP32[546411] = 2185636;
   $641 = $$723947$i + -40 | 0;
   $643 = $$748$i + 8 | 0;
   $648 = ($643 & 7 | 0) == 0 ? 0 : 0 - $643 & 7;
   $649 = $$748$i + $648 | 0;
   $650 = $641 - $648 | 0;
   HEAP32[546343] = $649;
   HEAP32[546340] = $650;
   HEAP32[$649 + 4 >> 2] = $650 | 1;
   HEAP32[$$748$i + $641 + 4 >> 2] = 40;
   HEAP32[546344] = HEAP32[546459];
  } else {
   $$024372$i = 2185796;
   while (1) {
    $656 = HEAP32[$$024372$i >> 2] | 0;
    $658 = HEAP32[$$024372$i + 4 >> 2] | 0;
    if (($$748$i | 0) == ($656 + $658 | 0)) {
     label = 199;
     break;
    }
    $662 = HEAP32[$$024372$i + 8 >> 2] | 0;
    if (!$662) break; else $$024372$i = $662;
   }
   if ((label | 0) == 199) {
    $664 = $$024372$i + 4 | 0;
    if (!(HEAP32[$$024372$i + 12 >> 2] & 8)) if ($$748$i >>> 0 > $635 >>> 0 & $656 >>> 0 <= $635 >>> 0) {
     HEAP32[$664 >> 2] = $658 + $$723947$i;
     $673 = (HEAP32[546340] | 0) + $$723947$i | 0;
     $675 = $635 + 8 | 0;
     $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7;
     $681 = $635 + $680 | 0;
     $682 = $673 - $680 | 0;
     HEAP32[546343] = $681;
     HEAP32[546340] = $682;
     HEAP32[$681 + 4 >> 2] = $682 | 1;
     HEAP32[$635 + $673 + 4 >> 2] = 40;
     HEAP32[546344] = HEAP32[546459];
     break;
    }
   }
   $688 = HEAP32[546341] | 0;
   if ($$748$i >>> 0 < $688 >>> 0) {
    HEAP32[546341] = $$748$i;
    $753 = $$748$i;
   } else $753 = $688;
   $690 = $$748$i + $$723947$i | 0;
   $$124471$i = 2185796;
   while (1) {
    if ((HEAP32[$$124471$i >> 2] | 0) == ($690 | 0)) {
     label = 207;
     break;
    }
    $694 = HEAP32[$$124471$i + 8 >> 2] | 0;
    if (!$694) break; else $$124471$i = $694;
   }
   if ((label | 0) == 207) if (!(HEAP32[$$124471$i + 12 >> 2] & 8)) {
    HEAP32[$$124471$i >> 2] = $$748$i;
    $700 = $$124471$i + 4 | 0;
    HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i;
    $704 = $$748$i + 8 | 0;
    $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0;
    $712 = $690 + 8 | 0;
    $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0;
    $722 = $710 + $$0197 | 0;
    $723 = $718 - $710 - $$0197 | 0;
    HEAP32[$710 + 4 >> 2] = $$0197 | 3;
    L317 : do if (($635 | 0) == ($718 | 0)) {
     $728 = (HEAP32[546340] | 0) + $723 | 0;
     HEAP32[546340] = $728;
     HEAP32[546343] = $722;
     HEAP32[$722 + 4 >> 2] = $728 | 1;
    } else {
     if ((HEAP32[546342] | 0) == ($718 | 0)) {
      $734 = (HEAP32[546339] | 0) + $723 | 0;
      HEAP32[546339] = $734;
      HEAP32[546342] = $722;
      HEAP32[$722 + 4 >> 2] = $734 | 1;
      HEAP32[$722 + $734 >> 2] = $734;
      break;
     }
     $739 = HEAP32[$718 + 4 >> 2] | 0;
     if (($739 & 3 | 0) == 1) {
      $742 = $739 & -8;
      $743 = $739 >>> 3;
      L325 : do if ($739 >>> 0 < 256) {
       $746 = HEAP32[$718 + 8 >> 2] | 0;
       $748 = HEAP32[$718 + 12 >> 2] | 0;
       $750 = 2185388 + ($743 << 1 << 2) | 0;
       do if (($746 | 0) != ($750 | 0)) {
        if ($753 >>> 0 > $746 >>> 0) _abort();
        if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) break;
        _abort();
       } while (0);
       if (($748 | 0) == ($746 | 0)) {
        HEAP32[546337] = HEAP32[546337] & ~(1 << $743);
        break;
       }
       do if (($748 | 0) == ($750 | 0)) $$pre$phi17$i$iZ2D = $748 + 8 | 0; else {
        if ($753 >>> 0 > $748 >>> 0) _abort();
        $764 = $748 + 8 | 0;
        if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
         $$pre$phi17$i$iZ2D = $764;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$746 + 12 >> 2] = $748;
       HEAP32[$$pre$phi17$i$iZ2D >> 2] = $746;
      } else {
       $769 = HEAP32[$718 + 24 >> 2] | 0;
       $771 = HEAP32[$718 + 12 >> 2] | 0;
       do if (($771 | 0) == ($718 | 0)) {
        $782 = $718 + 16 | 0;
        $783 = $782 + 4 | 0;
        $784 = HEAP32[$783 >> 2] | 0;
        if (!$784) {
         $786 = HEAP32[$782 >> 2] | 0;
         if (!$786) {
          $$3$i$i = 0;
          break;
         } else {
          $$1290$i$i$ph = $786;
          $$1292$i$i$ph = $782;
         }
        } else {
         $$1290$i$i$ph = $784;
         $$1292$i$i$ph = $783;
        }
        $$1290$i$i = $$1290$i$i$ph;
        $$1292$i$i = $$1292$i$i$ph;
        while (1) {
         $788 = $$1290$i$i + 20 | 0;
         $789 = HEAP32[$788 >> 2] | 0;
         if (!$789) {
          $791 = $$1290$i$i + 16 | 0;
          $792 = HEAP32[$791 >> 2] | 0;
          if (!$792) break; else {
           $$1290$i$i$be = $792;
           $$1292$i$i$be = $791;
          }
         } else {
          $$1290$i$i$be = $789;
          $$1292$i$i$be = $788;
         }
         $$1290$i$i = $$1290$i$i$be;
         $$1292$i$i = $$1292$i$i$be;
        }
        if ($753 >>> 0 > $$1292$i$i >>> 0) _abort(); else {
         HEAP32[$$1292$i$i >> 2] = 0;
         $$3$i$i = $$1290$i$i;
         break;
        }
       } else {
        $774 = HEAP32[$718 + 8 >> 2] | 0;
        if ($753 >>> 0 > $774 >>> 0) _abort();
        $776 = $774 + 12 | 0;
        if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) _abort();
        $779 = $771 + 8 | 0;
        if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
         HEAP32[$776 >> 2] = $771;
         HEAP32[$779 >> 2] = $774;
         $$3$i$i = $771;
         break;
        } else _abort();
       } while (0);
       if (!$769) break;
       $797 = HEAP32[$718 + 28 >> 2] | 0;
       $798 = 2185652 + ($797 << 2) | 0;
       do if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
        HEAP32[$798 >> 2] = $$3$i$i;
        if ($$3$i$i | 0) break;
        HEAP32[546338] = HEAP32[546338] & ~(1 << $797);
        break L325;
       } else if ((HEAP32[546341] | 0) >>> 0 > $769 >>> 0) _abort(); else {
        $807 = $769 + 16 | 0;
        HEAP32[((HEAP32[$807 >> 2] | 0) == ($718 | 0) ? $807 : $769 + 20 | 0) >> 2] = $$3$i$i;
        if (!$$3$i$i) break L325; else break;
       } while (0);
       $812 = HEAP32[546341] | 0;
       if ($812 >>> 0 > $$3$i$i >>> 0) _abort();
       HEAP32[$$3$i$i + 24 >> 2] = $769;
       $815 = $718 + 16 | 0;
       $816 = HEAP32[$815 >> 2] | 0;
       do if ($816 | 0) if ($812 >>> 0 > $816 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 16 >> 2] = $816;
        HEAP32[$816 + 24 >> 2] = $$3$i$i;
        break;
       } while (0);
       $822 = HEAP32[$815 + 4 >> 2] | 0;
       if (!$822) break;
       if ((HEAP32[546341] | 0) >>> 0 > $822 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 20 >> 2] = $822;
        HEAP32[$822 + 24 >> 2] = $$3$i$i;
        break;
       }
      } while (0);
      $$0$i16$i = $718 + $742 | 0;
      $$0286$i$i = $742 + $723 | 0;
     } else {
      $$0$i16$i = $718;
      $$0286$i$i = $723;
     }
     $830 = $$0$i16$i + 4 | 0;
     HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2;
     HEAP32[$722 + 4 >> 2] = $$0286$i$i | 1;
     HEAP32[$722 + $$0286$i$i >> 2] = $$0286$i$i;
     $836 = $$0286$i$i >>> 3;
     if ($$0286$i$i >>> 0 < 256) {
      $839 = 2185388 + ($836 << 1 << 2) | 0;
      $840 = HEAP32[546337] | 0;
      $841 = 1 << $836;
      do if (!($840 & $841)) {
       HEAP32[546337] = $840 | $841;
       $$0294$i$i = $839;
       $$pre$phi$i18$iZ2D = $839 + 8 | 0;
      } else {
       $845 = $839 + 8 | 0;
       $846 = HEAP32[$845 >> 2] | 0;
       if ((HEAP32[546341] | 0) >>> 0 <= $846 >>> 0) {
        $$0294$i$i = $846;
        $$pre$phi$i18$iZ2D = $845;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i18$iZ2D >> 2] = $722;
      HEAP32[$$0294$i$i + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $$0294$i$i;
      HEAP32[$722 + 12 >> 2] = $839;
      break;
     }
     $852 = $$0286$i$i >>> 8;
     do if (!$852) $$0295$i$i = 0; else {
      if ($$0286$i$i >>> 0 > 16777215) {
       $$0295$i$i = 31;
       break;
      }
      $857 = ($852 + 1048320 | 0) >>> 16 & 8;
      $858 = $852 << $857;
      $861 = ($858 + 520192 | 0) >>> 16 & 4;
      $863 = $858 << $861;
      $866 = ($863 + 245760 | 0) >>> 16 & 2;
      $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0;
      $$0295$i$i = $$0286$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1;
     } while (0);
     $877 = 2185652 + ($$0295$i$i << 2) | 0;
     HEAP32[$722 + 28 >> 2] = $$0295$i$i;
     $879 = $722 + 16 | 0;
     HEAP32[$879 + 4 >> 2] = 0;
     HEAP32[$879 >> 2] = 0;
     $881 = HEAP32[546338] | 0;
     $882 = 1 << $$0295$i$i;
     if (!($881 & $882)) {
      HEAP32[546338] = $881 | $882;
      HEAP32[$877 >> 2] = $722;
      HEAP32[$722 + 24 >> 2] = $877;
      HEAP32[$722 + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $722;
      break;
     }
     $889 = HEAP32[$877 >> 2] | 0;
     L410 : do if ((HEAP32[$889 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) $$0288$lcssa$i$i = $889; else {
      $$028711$i$i = $$0286$i$i << (($$0295$i$i | 0) == 31 ? 0 : 25 - ($$0295$i$i >>> 1) | 0);
      $$028810$i$i = $889;
      while (1) {
       $906 = $$028810$i$i + 16 + ($$028711$i$i >>> 31 << 2) | 0;
       $901 = HEAP32[$906 >> 2] | 0;
       if (!$901) break;
       if ((HEAP32[$901 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) {
        $$0288$lcssa$i$i = $901;
        break L410;
       } else {
        $$028711$i$i = $$028711$i$i << 1;
        $$028810$i$i = $901;
       }
      }
      if ((HEAP32[546341] | 0) >>> 0 > $906 >>> 0) _abort(); else {
       HEAP32[$906 >> 2] = $722;
       HEAP32[$722 + 24 >> 2] = $$028810$i$i;
       HEAP32[$722 + 12 >> 2] = $722;
       HEAP32[$722 + 8 >> 2] = $722;
       break L317;
      }
     } while (0);
     $913 = $$0288$lcssa$i$i + 8 | 0;
     $914 = HEAP32[$913 >> 2] | 0;
     $915 = HEAP32[546341] | 0;
     if ($915 >>> 0 <= $914 >>> 0 & $915 >>> 0 <= $$0288$lcssa$i$i >>> 0) {
      HEAP32[$914 + 12 >> 2] = $722;
      HEAP32[$913 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $914;
      HEAP32[$722 + 12 >> 2] = $$0288$lcssa$i$i;
      HEAP32[$722 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $710 + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0$i$i$i = 2185796;
   while (1) {
    $923 = HEAP32[$$0$i$i$i >> 2] | 0;
    if ($923 >>> 0 <= $635 >>> 0) {
     $927 = $923 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($927 >>> 0 > $635 >>> 0) break;
    }
    $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0;
   }
   $931 = $927 + -47 | 0;
   $933 = $931 + 8 | 0;
   $939 = $931 + (($933 & 7 | 0) == 0 ? 0 : 0 - $933 & 7) | 0;
   $940 = $635 + 16 | 0;
   $942 = $939 >>> 0 < $940 >>> 0 ? $635 : $939;
   $943 = $942 + 8 | 0;
   $945 = $$723947$i + -40 | 0;
   $947 = $$748$i + 8 | 0;
   $952 = ($947 & 7 | 0) == 0 ? 0 : 0 - $947 & 7;
   $953 = $$748$i + $952 | 0;
   $954 = $945 - $952 | 0;
   HEAP32[546343] = $953;
   HEAP32[546340] = $954;
   HEAP32[$953 + 4 >> 2] = $954 | 1;
   HEAP32[$$748$i + $945 + 4 >> 2] = 40;
   HEAP32[546344] = HEAP32[546459];
   $960 = $942 + 4 | 0;
   HEAP32[$960 >> 2] = 27;
   HEAP32[$943 >> 2] = HEAP32[546449];
   HEAP32[$943 + 4 >> 2] = HEAP32[546450];
   HEAP32[$943 + 8 >> 2] = HEAP32[546451];
   HEAP32[$943 + 12 >> 2] = HEAP32[546452];
   HEAP32[546449] = $$748$i;
   HEAP32[546450] = $$723947$i;
   HEAP32[546452] = 0;
   HEAP32[546451] = $943;
   $962 = $942 + 24 | 0;
   do {
    $962$looptemp = $962;
    $962 = $962 + 4 | 0;
    HEAP32[$962 >> 2] = 7;
   } while (($962$looptemp + 8 | 0) >>> 0 < $927 >>> 0);
   if (($942 | 0) != ($635 | 0)) {
    $968 = $942 - $635 | 0;
    HEAP32[$960 >> 2] = HEAP32[$960 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $968 | 1;
    HEAP32[$942 >> 2] = $968;
    $973 = $968 >>> 3;
    if ($968 >>> 0 < 256) {
     $976 = 2185388 + ($973 << 1 << 2) | 0;
     $977 = HEAP32[546337] | 0;
     $978 = 1 << $973;
     if (!($977 & $978)) {
      HEAP32[546337] = $977 | $978;
      $$0211$i$i = $976;
      $$pre$phi$i$iZ2D = $976 + 8 | 0;
     } else {
      $982 = $976 + 8 | 0;
      $983 = HEAP32[$982 >> 2] | 0;
      if ((HEAP32[546341] | 0) >>> 0 > $983 >>> 0) _abort(); else {
       $$0211$i$i = $983;
       $$pre$phi$i$iZ2D = $982;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$$0211$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $$0211$i$i;
     HEAP32[$635 + 12 >> 2] = $976;
     break;
    }
    $989 = $968 >>> 8;
    if (!$989) $$0212$i$i = 0; else if ($968 >>> 0 > 16777215) $$0212$i$i = 31; else {
     $994 = ($989 + 1048320 | 0) >>> 16 & 8;
     $995 = $989 << $994;
     $998 = ($995 + 520192 | 0) >>> 16 & 4;
     $1000 = $995 << $998;
     $1003 = ($1000 + 245760 | 0) >>> 16 & 2;
     $1008 = 14 - ($998 | $994 | $1003) + ($1000 << $1003 >>> 15) | 0;
     $$0212$i$i = $968 >>> ($1008 + 7 | 0) & 1 | $1008 << 1;
    }
    $1014 = 2185652 + ($$0212$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $$0212$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$940 >> 2] = 0;
    $1017 = HEAP32[546338] | 0;
    $1018 = 1 << $$0212$i$i;
    if (!($1017 & $1018)) {
     HEAP32[546338] = $1017 | $1018;
     HEAP32[$1014 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1014;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $1025 = HEAP32[$1014 >> 2] | 0;
    L451 : do if ((HEAP32[$1025 + 4 >> 2] & -8 | 0) == ($968 | 0)) $$0207$lcssa$i$i = $1025; else {
     $$02065$i$i = $968 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0);
     $$02074$i$i = $1025;
     while (1) {
      $1042 = $$02074$i$i + 16 + ($$02065$i$i >>> 31 << 2) | 0;
      $1037 = HEAP32[$1042 >> 2] | 0;
      if (!$1037) break;
      if ((HEAP32[$1037 + 4 >> 2] & -8 | 0) == ($968 | 0)) {
       $$0207$lcssa$i$i = $1037;
       break L451;
      } else {
       $$02065$i$i = $$02065$i$i << 1;
       $$02074$i$i = $1037;
      }
     }
     if ((HEAP32[546341] | 0) >>> 0 > $1042 >>> 0) _abort(); else {
      HEAP32[$1042 >> 2] = $635;
      HEAP32[$635 + 24 >> 2] = $$02074$i$i;
      HEAP32[$635 + 12 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $635;
      break L294;
     }
    } while (0);
    $1049 = $$0207$lcssa$i$i + 8 | 0;
    $1050 = HEAP32[$1049 >> 2] | 0;
    $1051 = HEAP32[546341] | 0;
    if ($1051 >>> 0 <= $1050 >>> 0 & $1051 >>> 0 <= $$0207$lcssa$i$i >>> 0) {
     HEAP32[$1050 + 12 >> 2] = $635;
     HEAP32[$1049 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $1050;
     HEAP32[$635 + 12 >> 2] = $$0207$lcssa$i$i;
     HEAP32[$635 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1060 = HEAP32[546340] | 0;
  if ($1060 >>> 0 > $$0197 >>> 0) {
   $1062 = $1060 - $$0197 | 0;
   HEAP32[546340] = $1062;
   $1063 = HEAP32[546343] | 0;
   $1064 = $1063 + $$0197 | 0;
   HEAP32[546343] = $1064;
   HEAP32[$1064 + 4 >> 2] = $1062 | 1;
   HEAP32[$1063 + 4 >> 2] = $$0197 | 3;
   $$0 = $1063 + 8 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$3 = 0, $102 = 0, $103 = 0, $110 = 0, $111 = 0, $118 = 0, $119 = 0, $129 = 0, $13 = 0, $130 = 0, $137 = 0, $138 = 0, $14 = 0, $145 = 0, $146 = 0, $156 = 0, $157 = 0, $164 = 0, $165 = 0, $175 = 0, $176 = 0, $186 = 0, $187 = 0, $194 = 0, $195 = 0, $199 = 0, $202 = 0, $203 = 0, $21 = 0, $210 = 0, $211 = 0, $218 = 0, $219 = 0, $22 = 0, $229 = 0, $230 = 0, $237 = 0, $238 = 0, $245 = 0, $246 = 0, $253 = 0, $254 = 0, $261 = 0, $262 = 0, $272 = 0, $273 = 0, $280 = 0, $281 = 0, $288 = 0, $289 = 0, $29 = 0, $296 = 0, $297 = 0, $3 = 0, $30 = 0, $304 = 0, $305 = 0, $315 = 0, $316 = 0, $323 = 0, $324 = 0, $331 = 0, $332 = 0, $342 = 0, $343 = 0, $350 = 0, $351 = 0, $358 = 0, $359 = 0, $366 = 0, $367 = 0, $37 = 0, $374 = 0, $375 = 0, $38 = 0, $382 = 0, $383 = 0, $393 = 0, $394 = 0, $404 = 0, $405 = 0, $412 = 0, $413 = 0, $420 = 0, $421 = 0, $428 = 0, $429 = 0, $439 = 0, $440 = 0, $444 = 0, $48 = 0, $49 = 0, $56 = 0, $57 = 0, $64 = 0, $65 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $86 = 0, $87 = 0, $94 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp;
 L1 : do if (($1 - $0 | 0) > 1) do switch (HEAP8[$0 >> 0] | 0) {
 case 97:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48179);
     $13 = $2 + 4 | 0;
     $14 = HEAP32[$13 >> 2] | 0;
     if ($14 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($14, $3);
      HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 110:
   case 100:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48190);
     $21 = $2 + 4 | 0;
     $22 = HEAP32[$21 >> 2] | 0;
     if ($22 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($22, $3);
      HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 78:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48200);
     $29 = $2 + 4 | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     if ($30 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($30, $3);
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 83:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48211);
     $37 = $2 + 4 | 0;
     $38 = HEAP32[$37 >> 2] | 0;
     if ($38 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($38, $3);
      HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 99:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48221);
     $48 = $2 + 4 | 0;
     $49 = HEAP32[$48 >> 2] | 0;
     if ($49 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($49, $3);
      HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48232);
     $56 = $2 + 4 | 0;
     $57 = HEAP32[$56 >> 2] | 0;
     if ($57 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($57, $3);
      HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 111:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48242);
     $64 = $2 + 4 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if ($65 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65, $3);
      HEAP32[$64 >> 2] = (HEAP32[$64 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 118:
    {
     $72 = $2 + 63 | 0;
     $73 = HEAP8[$72 >> 0] | 0;
     HEAP8[$72 >> 0] = 0;
     $74 = $0 + 2 | 0;
     $75 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($74, $1, $2) | 0;
     HEAP8[$72 >> 0] = $73;
     if (($75 | 0) == ($74 | 0)) {
      $$3 = $0;
      break L1;
     }
     $79 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($79 | 0)) {
      $$3 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($79 + -24 | 0, 0, 48252) | 0;
     HEAP8[$2 + 60 >> 0] = 1;
     $$3 = $75;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 100:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm18EEERAT__Kc($3, 48262);
     $86 = $2 + 4 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     if ($87 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($87, $3);
      HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48280);
     $94 = $2 + 4 | 0;
     $95 = HEAP32[$94 >> 2] | 0;
     if ($95 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($95, $3);
      HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm16EEERAT__Kc($3);
     $102 = $2 + 4 | 0;
     $103 = HEAP32[$102 >> 2] | 0;
     if ($103 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($103, $3);
      HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 118:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48290);
     $110 = $2 + 4 | 0;
     $111 = HEAP32[$110 >> 2] | 0;
     if ($111 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($111, $3);
      HEAP32[$110 >> 2] = (HEAP32[$110 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 86:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48300);
     $118 = $2 + 4 | 0;
     $119 = HEAP32[$118 >> 2] | 0;
     if ($119 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($119, $3);
      HEAP32[$118 >> 2] = (HEAP32[$118 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 101:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 111:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48311);
     $129 = $2 + 4 | 0;
     $130 = HEAP32[$129 >> 2] | 0;
     if ($130 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($130, $3);
      HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 79:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48321);
     $137 = $2 + 4 | 0;
     $138 = HEAP32[$137 >> 2] | 0;
     if ($138 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($138, $3);
      HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 113:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48332);
     $145 = $2 + 4 | 0;
     $146 = HEAP32[$145 >> 2] | 0;
     if ($146 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($146, $3);
      HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 103:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48343);
     $156 = $2 + 4 | 0;
     $157 = HEAP32[$156 >> 2] | 0;
     if ($157 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($157, $3);
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48354);
     $164 = $2 + 4 | 0;
     $165 = HEAP32[$164 >> 2] | 0;
     if ($165 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($165, $3);
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 105:
  {
   if ((HEAP8[$0 + 1 >> 0] | 0) != 120) {
    $$3 = $0;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48364);
   $175 = $2 + 4 | 0;
   $176 = HEAP32[$175 >> 2] | 0;
   if ($176 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($176, $3);
    HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$3 = $0 + 2 | 0;
   break L1;
   break;
  }
 case 108:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48375);
     $186 = $2 + 4 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if ($187 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($187, $3);
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 105:
    {
     $194 = $0 + 2 | 0;
     $195 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($194, $1, $2) | 0;
     if (($195 | 0) == ($194 | 0)) {
      $$3 = $0;
      break L1;
     }
     $199 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($199 | 0)) {
      $$3 = $0;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($199 + -24 | 0, 0, 48386) | 0;
     $$3 = $195;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48398);
     $202 = $2 + 4 | 0;
     $203 = HEAP32[$202 >> 2] | 0;
     if ($203 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($203, $3);
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 83:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($3, 48409);
     $210 = $2 + 4 | 0;
     $211 = HEAP32[$210 >> 2] | 0;
     if ($211 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($211, $3);
      HEAP32[$210 >> 2] = (HEAP32[$210 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48421);
     $218 = $2 + 4 | 0;
     $219 = HEAP32[$218 >> 2] | 0;
     if ($219 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($219, $3);
      HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 109:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 105:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48431);
     $229 = $2 + 4 | 0;
     $230 = HEAP32[$229 >> 2] | 0;
     if ($230 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($230, $3);
      HEAP32[$229 >> 2] = (HEAP32[$229 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 73:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48441);
     $237 = $2 + 4 | 0;
     $238 = HEAP32[$237 >> 2] | 0;
     if ($238 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($238, $3);
      HEAP32[$237 >> 2] = (HEAP32[$237 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48280);
     $245 = $2 + 4 | 0;
     $246 = HEAP32[$245 >> 2] | 0;
     if ($246 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($246, $3);
      HEAP32[$245 >> 2] = (HEAP32[$245 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 76:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48452);
     $253 = $2 + 4 | 0;
     $254 = HEAP32[$253 >> 2] | 0;
     if ($254 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($254, $3);
      HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48463);
     $261 = $2 + 4 | 0;
     $262 = HEAP32[$261 >> 2] | 0;
     if ($262 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($262, $3);
      HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 110:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($3, 48474);
     $272 = $2 + 4 | 0;
     $273 = HEAP32[$272 >> 2] | 0;
     if ($273 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($273, $3);
      HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48489);
     $280 = $2 + 4 | 0;
     $281 = HEAP32[$280 >> 2] | 0;
     if ($281 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($281, $3);
      HEAP32[$280 >> 2] = (HEAP32[$280 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 103:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48431);
     $288 = $2 + 4 | 0;
     $289 = HEAP32[$288 >> 2] | 0;
     if ($289 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($289, $3);
      HEAP32[$288 >> 2] = (HEAP32[$288 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48500);
     $296 = $2 + 4 | 0;
     $297 = HEAP32[$296 >> 2] | 0;
     if ($297 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($297, $3);
      HEAP32[$296 >> 2] = (HEAP32[$296 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 119:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($3, 48510);
     $304 = $2 + 4 | 0;
     $305 = HEAP32[$304 >> 2] | 0;
     if ($305 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($305, $3);
      HEAP32[$304 >> 2] = (HEAP32[$304 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 111:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 111:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48523);
     $315 = $2 + 4 | 0;
     $316 = HEAP32[$315 >> 2] | 0;
     if ($316 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($316, $3);
      HEAP32[$315 >> 2] = (HEAP32[$315 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 114:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48534);
     $323 = $2 + 4 | 0;
     $324 = HEAP32[$323 >> 2] | 0;
     if ($324 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($324, $3);
      HEAP32[$323 >> 2] = (HEAP32[$323 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 82:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48544);
     $331 = $2 + 4 | 0;
     $332 = HEAP32[$331 >> 2] | 0;
     if ($332 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($332, $3);
      HEAP32[$331 >> 2] = (HEAP32[$331 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 112:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($3, 48555);
     $342 = $2 + 4 | 0;
     $343 = HEAP32[$342 >> 2] | 0;
     if ($343 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($343, $3);
      HEAP32[$342 >> 2] = (HEAP32[$342 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48567);
     $350 = $2 + 4 | 0;
     $351 = HEAP32[$350 >> 2] | 0;
     if ($351 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($351, $3);
      HEAP32[$350 >> 2] = (HEAP32[$350 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 76:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48577);
     $358 = $2 + 4 | 0;
     $359 = HEAP32[$358 >> 2] | 0;
     if ($359 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($359, $3);
      HEAP32[$358 >> 2] = (HEAP32[$358 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 112:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48588);
     $366 = $2 + 4 | 0;
     $367 = HEAP32[$366 >> 2] | 0;
     if ($367 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($367, $3);
      HEAP32[$366 >> 2] = (HEAP32[$366 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48567);
     $374 = $2 + 4 | 0;
     $375 = HEAP32[$374 >> 2] | 0;
     if ($375 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($375, $3);
      HEAP32[$374 >> 2] = (HEAP32[$374 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48599);
     $382 = $2 + 4 | 0;
     $383 = HEAP32[$382 >> 2] | 0;
     if ($383 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($383, $3);
      HEAP32[$382 >> 2] = (HEAP32[$382 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 113:
  {
   if ((HEAP8[$0 + 1 >> 0] | 0) != 117) {
    $$3 = $0;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48610);
   $393 = $2 + 4 | 0;
   $394 = HEAP32[$393 >> 2] | 0;
   if ($394 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($394, $3);
    HEAP32[$393 >> 2] = (HEAP32[$393 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$3 = $0 + 2 | 0;
   break L1;
   break;
  }
 case 114:
  {
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 48620);
     $404 = $2 + 4 | 0;
     $405 = HEAP32[$404 >> 2] | 0;
     if ($405 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($405, $3);
      HEAP32[$404 >> 2] = (HEAP32[$404 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 77:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48630);
     $412 = $2 + 4 | 0;
     $413 = HEAP32[$412 >> 2] | 0;
     if ($413 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($413, $3);
      HEAP32[$412 >> 2] = (HEAP32[$412 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 48641);
     $420 = $2 + 4 | 0;
     $421 = HEAP32[$420 >> 2] | 0;
     if ($421 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($421, $3);
      HEAP32[$420 >> 2] = (HEAP32[$420 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 83:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($3, 48652);
     $428 = $2 + 4 | 0;
     $429 = HEAP32[$428 >> 2] | 0;
     if ($429 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($429, $3);
      HEAP32[$428 >> 2] = (HEAP32[$428 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $0;
     break L1;
    }
   }
   break;
  }
 case 118:
  {
   if (((HEAP8[$0 + 1 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
    $$3 = $0;
    break L1;
   }
   $439 = $0 + 2 | 0;
   $440 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($439, $1, $2) | 0;
   if (($440 | 0) == ($439 | 0)) {
    $$3 = $0;
    break L1;
   }
   $444 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($444 | 0)) {
    $$3 = $0;
    break L1;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($444 + -24 | 0, 0, 48252) | 0;
   $$3 = $440;
   break L1;
   break;
  }
 default:
  {
   $$3 = $0;
   break L1;
  }
 } while (0); else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _stbi__create_png_image_raw($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $1005 = 0, $1006 = 0, $1016 = 0, $1017 = 0, $1026 = 0, $1027 = 0, $1042 = 0, $1043 = 0, $1055 = 0, $1056 = 0, $1068 = 0, $1069 = 0, $1081 = 0, $1082 = 0, $1094 = 0, $1095 = 0, $11 = 0, $1107 = 0, $1108 = 0, $112 = 0, $1120 = 0, $1121 = 0, $12 = 0, $1212 = 0, $1233 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $364 = 0, $37 = 0, $38 = 0, $387 = 0, $424 = 0, $435 = 0, $46 = 0, $618 = 0, $641 = 0, $714 = 0, $725 = 0, $73 = 0, $786 = 0, $790 = 0, $8 = 0, $801 = 0, $816 = 0, $817 = 0, $826 = 0, $827 = 0, $842 = 0, $843 = 0, $859 = 0, $860 = 0, $870 = 0, $871 = 0, $881 = 0, $882 = 0, $89 = 0, $891 = 0, $892 = 0, $9 = 0, $907 = 0, $908 = 0, $920 = 0, $921 = 0, $933 = 0, $934 = 0, $950 = 0, $951 = 0, $961 = 0, $962 = 0, $972 = 0, $973 = 0, $983 = 0, $984 = 0, $994 = 0, $995 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $8 = sp + 116 | 0;
 $9 = sp + 112 | 0;
 $10 = sp + 108 | 0;
 $11 = sp + 104 | 0;
 $12 = sp + 100 | 0;
 $13 = sp + 96 | 0;
 $14 = sp + 92 | 0;
 $15 = sp + 88 | 0;
 $16 = sp + 84 | 0;
 $17 = sp + 80 | 0;
 $18 = sp + 76 | 0;
 $19 = sp + 72 | 0;
 $20 = sp + 68 | 0;
 $21 = sp + 64 | 0;
 $22 = sp + 60 | 0;
 $23 = sp + 56 | 0;
 $24 = sp + 52 | 0;
 $25 = sp + 48 | 0;
 $26 = sp + 44 | 0;
 $27 = sp + 40 | 0;
 $28 = sp + 36 | 0;
 $29 = sp + 32 | 0;
 $30 = sp + 28 | 0;
 $31 = sp + 24 | 0;
 $32 = sp + 20 | 0;
 $33 = sp + 16 | 0;
 $34 = sp + 12 | 0;
 $35 = sp + 120 | 0;
 $36 = sp + 8 | 0;
 $37 = sp + 4 | 0;
 $38 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$12 >> 2] = $3;
 HEAP32[$13 >> 2] = $4;
 HEAP32[$14 >> 2] = $5;
 HEAP32[$15 >> 2] = $6;
 HEAP32[$16 >> 2] = $7;
 HEAP32[$17 >> 2] = (HEAP32[$15 >> 2] | 0) == 16 ? 2 : 1;
 HEAP32[$18 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 $46 = Math_imul(HEAP32[$13 >> 2] | 0, HEAP32[$12 >> 2] | 0) | 0;
 HEAP32[$21 >> 2] = Math_imul($46, HEAP32[$17 >> 2] | 0) | 0;
 HEAP32[$25 >> 2] = HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2];
 HEAP32[$26 >> 2] = Math_imul(HEAP32[$12 >> 2] | 0, HEAP32[$17 >> 2] | 0) | 0;
 HEAP32[$27 >> 2] = Math_imul(HEAP32[$25 >> 2] | 0, HEAP32[$17 >> 2] | 0) | 0;
 HEAP32[$28 >> 2] = HEAP32[$13 >> 2];
 if ((HEAP32[$12 >> 2] | 0) != (HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] | 0)) if ((HEAP32[$12 >> 2] | 0) != ((HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] | 0) + 1 | 0)) ___assert_fail(44562, 43392, 4409, 44603);
 $73 = _stbi__malloc_mad3(HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$26 >> 2] | 0, 0) | 0;
 HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] = $73;
 if (!(HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[$8 >> 2] = _stbi__err(43490) | 0;
  $1233 = HEAP32[$8 >> 2] | 0;
  STACKTOP = sp;
  return $1233 | 0;
 }
 if (!(_stbi__mad3sizes_valid(HEAP32[$25 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$15 >> 2] | 0, 7) | 0)) {
  HEAP32[$8 >> 2] = _stbi__err(43529) | 0;
  $1233 = HEAP32[$8 >> 2] | 0;
  STACKTOP = sp;
  return $1233 | 0;
 }
 $89 = Math_imul(HEAP32[$25 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
 HEAP32[$23 >> 2] = ((Math_imul($89, HEAP32[$15 >> 2] | 0) | 0) + 7 | 0) >>> 3;
 HEAP32[$22 >> 2] = Math_imul((HEAP32[$23 >> 2] | 0) + 1 | 0, HEAP32[$14 >> 2] | 0) | 0;
 if ((HEAP32[$11 >> 2] | 0) >>> 0 < (HEAP32[$22 >> 2] | 0) >>> 0) {
  HEAP32[$8 >> 2] = _stbi__err(44630) | 0;
  $1233 = HEAP32[$8 >> 2] | 0;
  STACKTOP = sp;
  return $1233 | 0;
 }
 HEAP32[$20 >> 2] = 0;
 L17 : while (1) {
  if ((HEAP32[$20 >> 2] | 0) >>> 0 >= (HEAP32[$14 >> 2] | 0) >>> 0) {
   label = 113;
   break;
  }
  HEAP32[$29 >> 2] = (HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$21 >> 2] | 0, HEAP32[$20 >> 2] | 0) | 0);
  $112 = HEAP32[$10 >> 2] | 0;
  HEAP32[$10 >> 2] = $112 + 1;
  HEAP32[$31 >> 2] = HEAPU8[$112 >> 0];
  if ((HEAP32[$31 >> 2] | 0) > 4) {
   label = 13;
   break;
  }
  if ((HEAP32[$15 >> 2] | 0) < 8) {
   if ((HEAP32[$23 >> 2] | 0) >>> 0 > (HEAP32[$13 >> 2] | 0) >>> 0) {
    label = 16;
    break;
   }
   $126 = Math_imul(HEAP32[$13 >> 2] | 0, HEAP32[$12 >> 2] | 0) | 0;
   HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + ($126 - (HEAP32[$23 >> 2] | 0));
   HEAP32[$27 >> 2] = 1;
   HEAP32[$28 >> 2] = HEAP32[$23 >> 2];
  }
  HEAP32[$30 >> 2] = (HEAP32[$29 >> 2] | 0) + (0 - (HEAP32[$21 >> 2] | 0));
  if (!(HEAP32[$20 >> 2] | 0)) HEAP32[$31 >> 2] = HEAPU8[44684 + (HEAP32[$31 >> 2] | 0) >> 0];
  HEAP32[$24 >> 2] = 0;
  while (1) {
   if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$27 >> 2] | 0)) break;
   switch (HEAP32[$31 >> 2] | 0) {
   case 0:
    {
     HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0;
     break;
    }
   case 1:
    {
     HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0;
     break;
    }
   case 2:
    {
     HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$30 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$30 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) >> 1);
     break;
    }
   case 4:
    {
     $206 = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + (_stbi__paeth(0, HEAPU8[(HEAP32[$30 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0, 0) | 0) & 255;
     HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = $206;
     break;
    }
   case 5:
    {
     HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0;
     break;
    }
   case 6:
    {
     HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0;
     break;
    }
   default:
    {}
   }
   HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
  }
  do if ((HEAP32[$15 >> 2] | 0) == 8) {
   if ((HEAP32[$25 >> 2] | 0) != (HEAP32[$12 >> 2] | 0)) HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$25 >> 2] | 0) >> 0] = -1;
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
   HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$12 >> 2] | 0);
   HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$12 >> 2] | 0);
  } else {
   if ((HEAP32[$15 >> 2] | 0) != 16) {
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
    HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1;
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
    break;
   }
   if ((HEAP32[$25 >> 2] | 0) != (HEAP32[$12 >> 2] | 0)) {
    HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$27 >> 2] | 0) >> 0] = -1;
    HEAP8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$27 >> 2] | 0) + 1) >> 0] = -1;
   }
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
   HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
   HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
  } while (0);
  L54 : do if ((HEAP32[$15 >> 2] | 0) < 8) label = 42; else if ((HEAP32[$25 >> 2] | 0) == (HEAP32[$12 >> 2] | 0)) label = 42; else {
   if (((HEAP32[$25 >> 2] | 0) + 1 | 0) != (HEAP32[$12 >> 2] | 0)) {
    label = 64;
    break L17;
   }
   L58 : do switch (HEAP32[$31 >> 2] | 0) {
   case 0:
    {
     HEAP32[$19 >> 2] = (HEAP32[$13 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$24 >> 2] = 0;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$27 >> 2] | 0)) break;
       HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0;
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
      }
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + -1;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$27 >> 2] | 0) >> 0] = -1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
      HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
     }
     break;
    }
   case 1:
    {
     HEAP32[$19 >> 2] = (HEAP32[$13 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$24 >> 2] = 0;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$27 >> 2] | 0)) break;
       HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$26 >> 2] | 0)) >> 0] | 0);
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
      }
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + -1;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$27 >> 2] | 0) >> 0] = -1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
      HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
     }
     break;
    }
   case 2:
    {
     HEAP32[$19 >> 2] = (HEAP32[$13 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$24 >> 2] = 0;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$27 >> 2] | 0)) break;
       HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$30 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0);
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
      }
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + -1;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$27 >> 2] | 0) >> 0] = -1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
      HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
     }
     break;
    }
   case 3:
    {
     HEAP32[$19 >> 2] = (HEAP32[$13 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$24 >> 2] = 0;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$27 >> 2] | 0)) break;
       HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$30 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$26 >> 2] | 0)) >> 0] | 0) >> 1);
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
      }
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + -1;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$27 >> 2] | 0) >> 0] = -1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
      HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
     }
     break;
    }
   case 4:
    {
     HEAP32[$19 >> 2] = (HEAP32[$13 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$24 >> 2] = 0;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$27 >> 2] | 0)) break;
       $618 = HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0;
       $641 = $618 + (_stbi__paeth(HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$26 >> 2] | 0)) >> 0] | 0, HEAPU8[(HEAP32[$30 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$30 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$26 >> 2] | 0)) >> 0] | 0) | 0) & 255;
       HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = $641;
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
      }
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + -1;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$27 >> 2] | 0) >> 0] = -1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
      HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
     }
     break;
    }
   case 5:
    {
     HEAP32[$19 >> 2] = (HEAP32[$13 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$24 >> 2] = 0;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$27 >> 2] | 0)) break;
       HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$26 >> 2] | 0)) >> 0] | 0) >> 1);
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
      }
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + -1;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$27 >> 2] | 0) >> 0] = -1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
      HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
     }
     break;
    }
   case 6:
    {
     HEAP32[$19 >> 2] = (HEAP32[$13 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$24 >> 2] = 0;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$27 >> 2] | 0)) break;
       $714 = HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0;
       $725 = $714 + (_stbi__paeth(HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$26 >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255;
       HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = $725;
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
      }
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + -1;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$27 >> 2] | 0) >> 0] = -1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
      HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
     }
     break;
    }
   default:
    {}
   } while (0);
   if ((HEAP32[$15 >> 2] | 0) == 16) {
    HEAP32[$29 >> 2] = (HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$21 >> 2] | 0, HEAP32[$20 >> 2] | 0) | 0);
    HEAP32[$19 >> 2] = 0;
    while (1) {
     if ((HEAP32[$19 >> 2] | 0) >>> 0 >= (HEAP32[$13 >> 2] | 0) >>> 0) break L54;
     HEAP8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$27 >> 2] | 0) + 1) >> 0] = -1;
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
     HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$26 >> 2] | 0);
    }
   }
  } while (0);
  if ((label | 0) == 42) {
   label = 0;
   HEAP32[$32 >> 2] = Math_imul((HEAP32[$28 >> 2] | 0) - 1 | 0, HEAP32[$27 >> 2] | 0) | 0;
   L122 : do switch (HEAP32[$31 >> 2] | 0) {
   case 0:
    {
     _memcpy(HEAP32[$29 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$32 >> 2] | 0) | 0;
     break;
    }
   case 1:
    {
     HEAP32[$24 >> 2] = 0;
     while (1) {
      if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$32 >> 2] | 0)) break L122;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$27 >> 2] | 0)) >> 0] | 0);
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
     }
     break;
    }
   case 2:
    {
     HEAP32[$24 >> 2] = 0;
     while (1) {
      if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$32 >> 2] | 0)) break L122;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$30 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0);
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
     }
     break;
    }
   case 3:
    {
     HEAP32[$24 >> 2] = 0;
     while (1) {
      if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$32 >> 2] | 0)) break L122;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$30 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$27 >> 2] | 0)) >> 0] | 0) >> 1);
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
     }
     break;
    }
   case 4:
    {
     HEAP32[$24 >> 2] = 0;
     while (1) {
      if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$32 >> 2] | 0)) break L122;
      $364 = HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0;
      $387 = $364 + (_stbi__paeth(HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$27 >> 2] | 0)) >> 0] | 0, HEAPU8[(HEAP32[$30 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$30 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$27 >> 2] | 0)) >> 0] | 0) | 0) & 255;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = $387;
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
     }
     break;
    }
   case 5:
    {
     HEAP32[$24 >> 2] = 0;
     while (1) {
      if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$32 >> 2] | 0)) break L122;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$27 >> 2] | 0)) >> 0] | 0) >> 1);
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
     }
     break;
    }
   case 6:
    {
     HEAP32[$24 >> 2] = 0;
     while (1) {
      if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$32 >> 2] | 0)) break L122;
      $424 = HEAPU8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] | 0;
      $435 = $424 + (_stbi__paeth(HEAPU8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$24 >> 2] | 0) - (HEAP32[$27 >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255;
      HEAP8[(HEAP32[$29 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 0] = $435;
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
     }
     break;
    }
   default:
    {}
   } while (0);
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$32 >> 2] | 0);
  }
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) {
  HEAP32[$8 >> 2] = _stbi__err(44648) | 0;
  $1233 = HEAP32[$8 >> 2] | 0;
  STACKTOP = sp;
  return $1233 | 0;
 } else if ((label | 0) == 16) ___assert_fail(44663, 43392, 4431, 44603); else if ((label | 0) == 64) ___assert_fail(44689, 43392, 4493, 44603); else if ((label | 0) == 113) {
  L152 : do if ((HEAP32[$15 >> 2] | 0) < 8) {
   HEAP32[$20 >> 2] = 0;
   L154 : while (1) {
    if ((HEAP32[$20 >> 2] | 0) >>> 0 >= (HEAP32[$14 >> 2] | 0) >>> 0) break L152;
    HEAP32[$33 >> 2] = (HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$21 >> 2] | 0, HEAP32[$20 >> 2] | 0) | 0);
    $786 = (HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$21 >> 2] | 0, HEAP32[$20 >> 2] | 0) | 0) | 0;
    $790 = $786 + (Math_imul(HEAP32[$13 >> 2] | 0, HEAP32[$12 >> 2] | 0) | 0) | 0;
    HEAP32[$34 >> 2] = $790 + (0 - (HEAP32[$23 >> 2] | 0));
    if (!(HEAP32[$16 >> 2] | 0)) $801 = HEAPU8[44412 + (HEAP32[$15 >> 2] | 0) >> 0] | 0; else $801 = 1;
    HEAP8[$35 >> 0] = $801;
    do if ((HEAP32[$15 >> 2] | 0) == 4) {
     HEAP32[$24 >> 2] = Math_imul(HEAP32[$13 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0;
     while (1) {
      if ((HEAP32[$24 >> 2] | 0) < 2) break;
      $816 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 4) | 0) & 255;
      $817 = HEAP32[$33 >> 2] | 0;
      HEAP32[$33 >> 2] = $817 + 1;
      HEAP8[$817 >> 0] = $816;
      $826 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) & 15) | 0) & 255;
      $827 = HEAP32[$33 >> 2] | 0;
      HEAP32[$33 >> 2] = $827 + 1;
      HEAP8[$827 >> 0] = $826;
      HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) - 2;
      HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1;
     }
     if ((HEAP32[$24 >> 2] | 0) > 0) {
      $842 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 4) | 0) & 255;
      $843 = HEAP32[$33 >> 2] | 0;
      HEAP32[$33 >> 2] = $843 + 1;
      HEAP8[$843 >> 0] = $842;
     }
    } else {
     if ((HEAP32[$15 >> 2] | 0) == 2) {
      HEAP32[$24 >> 2] = Math_imul(HEAP32[$13 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) < 4) break;
       $859 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 6) | 0) & 255;
       $860 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $860 + 1;
       HEAP8[$860 >> 0] = $859;
       $870 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 4 & 3) | 0) & 255;
       $871 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $871 + 1;
       HEAP8[$871 >> 0] = $870;
       $881 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 2 & 3) | 0) & 255;
       $882 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $882 + 1;
       HEAP8[$882 >> 0] = $881;
       $891 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) & 3) | 0) & 255;
       $892 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $892 + 1;
       HEAP8[$892 >> 0] = $891;
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) - 4;
       HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1;
      }
      if ((HEAP32[$24 >> 2] | 0) > 0) {
       $907 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 6) | 0) & 255;
       $908 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $908 + 1;
       HEAP8[$908 >> 0] = $907;
      }
      if ((HEAP32[$24 >> 2] | 0) > 1) {
       $920 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 4 & 3) | 0) & 255;
       $921 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $921 + 1;
       HEAP8[$921 >> 0] = $920;
      }
      if ((HEAP32[$24 >> 2] | 0) <= 2) break;
      $933 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 2 & 3) | 0) & 255;
      $934 = HEAP32[$33 >> 2] | 0;
      HEAP32[$33 >> 2] = $934 + 1;
      HEAP8[$934 >> 0] = $933;
      break;
     }
     if ((HEAP32[$15 >> 2] | 0) == 1) {
      HEAP32[$24 >> 2] = Math_imul(HEAP32[$13 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) < 8) break;
       $950 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 7) | 0) & 255;
       $951 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $951 + 1;
       HEAP8[$951 >> 0] = $950;
       $961 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 6 & 1) | 0) & 255;
       $962 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $962 + 1;
       HEAP8[$962 >> 0] = $961;
       $972 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 5 & 1) | 0) & 255;
       $973 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $973 + 1;
       HEAP8[$973 >> 0] = $972;
       $983 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 4 & 1) | 0) & 255;
       $984 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $984 + 1;
       HEAP8[$984 >> 0] = $983;
       $994 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 3 & 1) | 0) & 255;
       $995 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $995 + 1;
       HEAP8[$995 >> 0] = $994;
       $1005 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 2 & 1) | 0) & 255;
       $1006 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $1006 + 1;
       HEAP8[$1006 >> 0] = $1005;
       $1016 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 1 & 1) | 0) & 255;
       $1017 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $1017 + 1;
       HEAP8[$1017 >> 0] = $1016;
       $1026 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) & 1) | 0) & 255;
       $1027 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $1027 + 1;
       HEAP8[$1027 >> 0] = $1026;
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) - 8;
       HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1;
      }
      if ((HEAP32[$24 >> 2] | 0) > 0) {
       $1042 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 7) | 0) & 255;
       $1043 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $1043 + 1;
       HEAP8[$1043 >> 0] = $1042;
      }
      if ((HEAP32[$24 >> 2] | 0) > 1) {
       $1055 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 6 & 1) | 0) & 255;
       $1056 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $1056 + 1;
       HEAP8[$1056 >> 0] = $1055;
      }
      if ((HEAP32[$24 >> 2] | 0) > 2) {
       $1068 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 5 & 1) | 0) & 255;
       $1069 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $1069 + 1;
       HEAP8[$1069 >> 0] = $1068;
      }
      if ((HEAP32[$24 >> 2] | 0) > 3) {
       $1081 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 4 & 1) | 0) & 255;
       $1082 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $1082 + 1;
       HEAP8[$1082 >> 0] = $1081;
      }
      if ((HEAP32[$24 >> 2] | 0) > 4) {
       $1094 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 3 & 1) | 0) & 255;
       $1095 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $1095 + 1;
       HEAP8[$1095 >> 0] = $1094;
      }
      if ((HEAP32[$24 >> 2] | 0) > 5) {
       $1107 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 2 & 1) | 0) & 255;
       $1108 = HEAP32[$33 >> 2] | 0;
       HEAP32[$33 >> 2] = $1108 + 1;
       HEAP8[$1108 >> 0] = $1107;
      }
      if ((HEAP32[$24 >> 2] | 0) <= 6) break;
      $1120 = (Math_imul(HEAPU8[$35 >> 0] | 0, (HEAPU8[HEAP32[$34 >> 2] >> 0] | 0) >> 1 & 1) | 0) & 255;
      $1121 = HEAP32[$33 >> 2] | 0;
      HEAP32[$33 >> 2] = $1121 + 1;
      HEAP8[$1121 >> 0] = $1120;
     }
    } while (0);
    L207 : do if ((HEAP32[$25 >> 2] | 0) != (HEAP32[$12 >> 2] | 0)) {
     HEAP32[$33 >> 2] = (HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$21 >> 2] | 0, HEAP32[$20 >> 2] | 0) | 0);
     if ((HEAP32[$25 >> 2] | 0) == 1) {
      HEAP32[$36 >> 2] = (HEAP32[$13 >> 2] | 0) - 1;
      while (1) {
       if ((HEAP32[$36 >> 2] | 0) < 0) break L207;
       HEAP8[(HEAP32[$33 >> 2] | 0) + ((HEAP32[$36 >> 2] << 1) + 1) >> 0] = -1;
       HEAP8[(HEAP32[$33 >> 2] | 0) + ((HEAP32[$36 >> 2] << 1) + 0) >> 0] = HEAP8[(HEAP32[$33 >> 2] | 0) + (HEAP32[$36 >> 2] | 0) >> 0] | 0;
       HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + -1;
      }
     }
     if ((HEAP32[$25 >> 2] | 0) != 3) break L154;
     HEAP32[$36 >> 2] = (HEAP32[$13 >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$36 >> 2] | 0) < 0) break L207;
      HEAP8[(HEAP32[$33 >> 2] | 0) + ((HEAP32[$36 >> 2] << 2) + 3) >> 0] = -1;
      HEAP8[(HEAP32[$33 >> 2] | 0) + ((HEAP32[$36 >> 2] << 2) + 2) >> 0] = HEAP8[(HEAP32[$33 >> 2] | 0) + (((HEAP32[$36 >> 2] | 0) * 3 | 0) + 2) >> 0] | 0;
      HEAP8[(HEAP32[$33 >> 2] | 0) + ((HEAP32[$36 >> 2] << 2) + 1) >> 0] = HEAP8[(HEAP32[$33 >> 2] | 0) + (((HEAP32[$36 >> 2] | 0) * 3 | 0) + 1) >> 0] | 0;
      HEAP8[(HEAP32[$33 >> 2] | 0) + ((HEAP32[$36 >> 2] << 2) + 0) >> 0] = HEAP8[(HEAP32[$33 >> 2] | 0) + (((HEAP32[$36 >> 2] | 0) * 3 | 0) + 0) >> 0] | 0;
      HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + -1;
     }
    } while (0);
    HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
   }
   ___assert_fail(44706, 43392, 4582, 44603);
  } else if ((HEAP32[$15 >> 2] | 0) == 16) {
   HEAP32[$37 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2];
   HEAP32[$38 >> 2] = HEAP32[$37 >> 2];
   HEAP32[$19 >> 2] = 0;
   while (1) {
    $1212 = Math_imul(HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0) | 0;
    if ((HEAP32[$19 >> 2] | 0) >>> 0 >= (Math_imul($1212, HEAP32[$12 >> 2] | 0) | 0) >>> 0) break L152;
    HEAP16[HEAP32[$38 >> 2] >> 1] = (HEAPU8[HEAP32[$37 >> 2] >> 0] | 0) << 8 | (HEAPU8[(HEAP32[$37 >> 2] | 0) + 1 >> 0] | 0);
    HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
    HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 2;
    HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 2;
   }
  } while (0);
  HEAP32[$8 >> 2] = 1;
  $1233 = HEAP32[$8 >> 2] | 0;
  STACKTOP = sp;
  return $1233 | 0;
 }
 return 0;
}

function __ZN13TPPLPartition17MonotonePartitionEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i$i = 0, $$0$i$i$i$i374 = 0, $$0$i$i$i$i386 = 0, $$0$in$i$i$i = 0, $$0$in$i$i$i375 = 0, $$0$in$i$i$i387 = 0, $$0$lcssa = 0, $$0337518 = 0, $$0339$lcssa = 0, $$0339531 = 0, $$0340 = 0, $$0342524 = 0, $$0343 = 0, $$0476 = 0, $$07$i$i$i = 0, $$07$i$i$i379 = 0, $$07$i$i$i391 = 0, $$1336 = 0, $$1338514 = 0, $$1341 = 0, $$1345 = 0, $$1479 = 0, $$2356$off0 = 0, $$2356$off0$ph = 0, $$2509 = 0, $$3505 = 0, $$4489 = 0, $$5483 = 0, $$byval_copy11 = 0, $$pn366478 = 0, $$pn475 = 0, $$pn477 = 0, $$pre$phi552Z2D = 0, $$pre$phiZ2D = 0, $$sroa$0450$0530 = 0, $$sroa$0450$0532 = 0, $$sroa$0450$1523 = 0, $$sroa$0450$1525 = 0, $101 = 0, $106 = 0, $109 = 0, $112 = 0, $115 = 0, $12 = 0, $121 = 0, $126 = 0, $127 = 0, $132 = 0, $136 = 0, $137 = 0, $142 = 0, $149 = 0, $15 = 0, $152 = 0, $155 = 0, $158 = 0, $164 = 0, $166 = 0, $167 = 0, $17 = 0, $171 = 0, $172 = 0, $179 = 0, $184 = 0, $187 = 0, $191 = 0, $196 = 0, $199 = 0, $20 = 0, $202 = 0, $208 = 0, $210 = 0, $211 = 0, $218 = 0, $22 = 0, $220 = 0, $222 = 0, $225 = 0, $226 = 0, $229 = 0, $23 = 0, $231 = 0, $232 = 0, $235 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $38 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $50 = 0, $57 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $72 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $9 = 0, $91 = 0, $95 = 0, $96 = 0, label = 0, sp = 0, $$0342524$looptemp = 0, $$0$in$i$i$i387$looptemp = 0, $$0$in$i$i$i375$looptemp = 0, $$0$in$i$i$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy11 = sp + 56 | 0;
 $3 = sp + 84 | 0;
 $4 = sp + 80 | 0;
 $5 = sp;
 $6 = sp + 88 | 0;
 $7 = sp + 68 | 0;
 $8 = $1 + 4 | 0;
 $$sroa$0450$0530 = HEAP32[$8 >> 2] | 0;
 $9 = $$sroa$0450$0530;
 L1 : do if (($1 | 0) == ($9 | 0)) {
  $$0339$lcssa = 0;
  label = 5;
 } else {
  $$0339531 = 0;
  $$sroa$0450$0532 = $$sroa$0450$0530;
  $17 = $9;
  while (1) {
   $12 = $$sroa$0450$0532 + 8 | 0;
   if (!(__ZNK8TPPLPoly5ValidEv($12) | 0)) {
    $$1336 = 0;
    break L1;
   }
   $15 = (__ZNK8TPPLPoly12GetNumPointsEv($12) | 0) + $$0339531 | 0;
   $$sroa$0450$0532 = HEAP32[$17 + 4 >> 2] | 0;
   $17 = $$sroa$0450$0532;
   if (($1 | 0) == ($17 | 0)) {
    $$0339$lcssa = $15;
    label = 5;
    break;
   } else $$0339531 = $15;
  }
 } while (0);
 if ((label | 0) == 5) {
  $20 = $$0339$lcssa * 3 | 0;
  $22 = __Znam($20 >>> 0 > 134217727 ? -1 : $20 << 5) | 0;
  HEAP32[$4 >> 2] = $$0339$lcssa;
  $$sroa$0450$1523 = HEAP32[$8 >> 2] | 0;
  $23 = $$sroa$0450$1523;
  if (($1 | 0) != ($23 | 0)) {
   $$0342524 = 0;
   $$sroa$0450$1525 = $$sroa$0450$1523;
   $45 = $23;
   do {
    $26 = $$sroa$0450$1525 + 8 | 0;
    $$0342524$looptemp = $$0342524;
    $$0342524 = (__ZNK8TPPLPoly12GetNumPointsEv($26) | 0) + $$0342524 | 0;
    if ((__ZNK8TPPLPoly12GetNumPointsEv($26) | 0) > 0) {
     $$0337518 = 0;
     do {
      $31 = __ZN8TPPLPoly8GetPointEl($26, $$0337518) | 0;
      $32 = $$0337518 + $$0342524$looptemp | 0;
      $33 = $22 + ($32 << 5) | 0;
      HEAP32[$33 >> 2] = HEAP32[$31 >> 2];
      HEAP32[$33 + 4 >> 2] = HEAP32[$31 + 4 >> 2];
      HEAP32[$33 + 8 >> 2] = HEAP32[$31 + 8 >> 2];
      HEAP32[$33 + 12 >> 2] = HEAP32[$31 + 12 >> 2];
      HEAP32[$33 + 16 >> 2] = HEAP32[$31 + 16 >> 2];
      HEAP32[$33 + 20 >> 2] = HEAP32[$31 + 20 >> 2];
      HEAP32[$22 + ($32 << 5) + 24 >> 2] = (($$0337518 | 0) == 0 ? $$0342524 : $32) + -1;
      $38 = ($$0337518 | 0) == ((__ZNK8TPPLPoly12GetNumPointsEv($26) | 0) + -1 | 0);
      HEAP32[$22 + ($32 << 5) + 28 >> 2] = $38 ? $$0342524$looptemp : $32 + 1 | 0;
      $$0337518 = $$0337518 + 1 | 0;
     } while (($$0337518 | 0) < (__ZNK8TPPLPoly12GetNumPointsEv($26) | 0));
    }
    $$sroa$0450$1525 = HEAP32[$45 + 4 >> 2] | 0;
    $45 = $$sroa$0450$1525;
   } while (($1 | 0) != ($45 | 0));
  }
  $49 = __Znam($$0339$lcssa >>> 0 > 1073741823 ? -1 : $$0339$lcssa << 2) | 0;
  $50 = ($$0339$lcssa | 0) > 0;
  if ($50) {
   $$1338514 = 0;
   do {
    HEAP32[$49 + ($$1338514 << 2) >> 2] = $$1338514;
    $$1338514 = $$1338514 + 1 | 0;
   } while (($$1338514 | 0) != ($$0339$lcssa | 0));
  }
  __ZN13TPPLPartition12VertexSorterC2EPNS_14MonotoneVertexE($6, $22);
  HEAP32[$$byval_copy11 >> 2] = HEAP32[$6 >> 2];
  __ZNSt3__26__sortIRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($49, $49 + ($$0339$lcssa << 2) | 0, $$byval_copy11);
  $57 = __Znam(($$0339$lcssa | 0) < 0 ? -1 : $20) | 0;
  if ($50) {
   $$2509 = 0;
   do {
    $62 = $22 + (HEAP32[$22 + ($$2509 << 5) + 28 >> 2] << 5) | 0;
    $63 = $22 + (HEAP32[$22 + ($$2509 << 5) + 24 >> 2] << 5) | 0;
    $64 = $22 + ($$2509 << 5) | 0;
    do if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $63, $64) | 0) if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $62, $64) | 0) {
     $68 = $57 + $$2509 | 0;
     if (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $62, $63, $64) | 0) {
      HEAP8[$68 >> 0] = 1;
      break;
     } else {
      HEAP8[$68 >> 0] = 3;
      break;
     }
    } else label = 21; else label = 21; while (0);
    do if ((label | 0) == 21) {
     label = 0;
     if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $64, $63) | 0) if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $64, $62) | 0) {
      $72 = $57 + $$2509 | 0;
      if (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $62, $63, $64) | 0) {
       HEAP8[$72 >> 0] = 2;
       break;
      } else {
       HEAP8[$72 >> 0] = 4;
       break;
      }
     }
     HEAP8[$57 + $$2509 >> 0] = 0;
    } while (0);
    $$2509 = $$2509 + 1 | 0;
   } while (($$2509 | 0) != ($$0339$lcssa | 0));
  }
  $75 = $20 >>> 0 > 1073741823 ? -1 : $20 << 2;
  $76 = __Znam($75) | 0;
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($7, $$byval_copy11);
  $77 = __Znam($75) | 0;
  if ($50) {
   $78 = $7 + 4 | 0;
   $$3505 = 0;
   do {
    HEAP32[$77 + ($$3505 << 2) >> 2] = $78;
    $$3505 = $$3505 + 1 | 0;
   } while (($$3505 | 0) != ($$0339$lcssa | 0));
   if ($50) {
    $80 = $5 + 8 | 0;
    $81 = $5 + 32 | 0;
    $82 = $7 + 4 | 0;
    $$4489 = 0;
    L50 : while (1) {
     $84 = HEAP32[$49 + ($$4489 << 2) >> 2] | 0;
     $85 = $22 + ($84 << 5) | 0;
     L52 : do switch (HEAP8[$57 + $84 >> 0] | 0) {
     case 1:
      {
       HEAP32[$80 >> 2] = HEAP32[$85 >> 2];
       HEAP32[$80 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
       HEAP32[$80 + 8 >> 2] = HEAP32[$85 + 8 >> 2];
       HEAP32[$80 + 12 >> 2] = HEAP32[$85 + 12 >> 2];
       HEAP32[$80 + 16 >> 2] = HEAP32[$85 + 16 >> 2];
       HEAP32[$80 + 20 >> 2] = HEAP32[$85 + 20 >> 2];
       $91 = $22 + (HEAP32[$22 + ($84 << 5) + 28 >> 2] << 5) | 0;
       HEAP32[$81 >> 2] = HEAP32[$91 >> 2];
       HEAP32[$81 + 4 >> 2] = HEAP32[$91 + 4 >> 2];
       HEAP32[$81 + 8 >> 2] = HEAP32[$91 + 8 >> 2];
       HEAP32[$81 + 12 >> 2] = HEAP32[$91 + 12 >> 2];
       HEAP32[$81 + 16 >> 2] = HEAP32[$91 + 16 >> 2];
       HEAP32[$81 + 20 >> 2] = HEAP32[$91 + 20 >> 2];
       HEAP32[$5 >> 2] = $84;
       __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_($$byval_copy11, $7, $5, $5);
       HEAP32[$77 + ($84 << 2) >> 2] = HEAP32[$$byval_copy11 >> 2];
       HEAP32[$76 + ($84 << 2) >> 2] = $84;
       break;
      }
     case 2:
      {
       $95 = $22 + ($84 << 5) + 24 | 0;
       $96 = HEAP32[$95 >> 2] | 0;
       if ((HEAP32[$77 + ($96 << 2) >> 2] | 0) == ($82 | 0)) {
        $$2356$off0$ph = 1;
        break L50;
       }
       $101 = HEAP32[$76 + ($96 << 2) >> 2] | 0;
       if ((HEAP8[$57 + $101 >> 0] | 0) == 4) {
        __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $22, $4, $84, $101, $57, $77, $7, $76);
        $106 = HEAP32[$95 >> 2] | 0;
       } else $106 = $96;
       HEAP32[$3 >> 2] = HEAP32[$77 + ($106 << 2) >> 2];
       HEAP32[$$byval_copy11 >> 2] = HEAP32[$3 >> 2];
       __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEE($7, $$byval_copy11) | 0;
       break;
      }
     case 3:
      {
       HEAP32[$80 >> 2] = HEAP32[$85 >> 2];
       HEAP32[$80 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
       HEAP32[$80 + 8 >> 2] = HEAP32[$85 + 8 >> 2];
       HEAP32[$80 + 12 >> 2] = HEAP32[$85 + 12 >> 2];
       HEAP32[$80 + 16 >> 2] = HEAP32[$85 + 16 >> 2];
       HEAP32[$80 + 20 >> 2] = HEAP32[$85 + 20 >> 2];
       HEAP32[$81 >> 2] = HEAP32[$85 >> 2];
       HEAP32[$81 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
       HEAP32[$81 + 8 >> 2] = HEAP32[$85 + 8 >> 2];
       HEAP32[$81 + 12 >> 2] = HEAP32[$85 + 12 >> 2];
       HEAP32[$81 + 16 >> 2] = HEAP32[$85 + 16 >> 2];
       HEAP32[$81 + 20 >> 2] = HEAP32[$85 + 20 >> 2];
       $109 = __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEERKT_SD_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISB_EEEE($7, $5, HEAP32[$82 >> 2] | 0, $82) | 0;
       if (($109 | 0) == (HEAP32[$7 >> 2] | 0)) {
        $$2356$off0$ph = 1;
        break L50;
       }
       $112 = HEAP32[$109 >> 2] | 0;
       if (!$112) {
        $$0$in$i$i$i387 = $109;
        do {
         $$0$in$i$i$i387$looptemp = $$0$in$i$i$i387;
         $$0$in$i$i$i387 = HEAP32[$$0$in$i$i$i387 + 8 >> 2] | 0;
        } while ((HEAP32[$$0$in$i$i$i387 >> 2] | 0) == ($$0$in$i$i$i387$looptemp | 0));
        $$07$i$i$i391 = $$0$in$i$i$i387;
       } else {
        $$0$i$i$i$i386 = $112;
        while (1) {
         $115 = HEAP32[$$0$i$i$i$i386 + 4 >> 2] | 0;
         if (!$115) {
          $$07$i$i$i391 = $$0$i$i$i$i386;
          break;
         } else $$0$i$i$i$i386 = $115;
        }
       }
       $121 = $$07$i$i$i391 + 16 | 0;
       __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $22, $4, $84, HEAP32[$76 + (HEAP32[$121 >> 2] << 2) >> 2] | 0, $57, $77, $7, $76);
       $126 = (HEAP32[$4 >> 2] | 0) + -2 | 0;
       $127 = $22 + ($126 << 5) | 0;
       HEAP32[$76 + (HEAP32[$121 >> 2] << 2) >> 2] = $84;
       HEAP32[$80 >> 2] = HEAP32[$127 >> 2];
       HEAP32[$80 + 4 >> 2] = HEAP32[$127 + 4 >> 2];
       HEAP32[$80 + 8 >> 2] = HEAP32[$127 + 8 >> 2];
       HEAP32[$80 + 12 >> 2] = HEAP32[$127 + 12 >> 2];
       HEAP32[$80 + 16 >> 2] = HEAP32[$127 + 16 >> 2];
       HEAP32[$80 + 20 >> 2] = HEAP32[$127 + 20 >> 2];
       $132 = $22 + (HEAP32[$22 + ($126 << 5) + 28 >> 2] << 5) | 0;
       HEAP32[$81 >> 2] = HEAP32[$132 >> 2];
       HEAP32[$81 + 4 >> 2] = HEAP32[$132 + 4 >> 2];
       HEAP32[$81 + 8 >> 2] = HEAP32[$132 + 8 >> 2];
       HEAP32[$81 + 12 >> 2] = HEAP32[$132 + 12 >> 2];
       HEAP32[$81 + 16 >> 2] = HEAP32[$132 + 16 >> 2];
       HEAP32[$81 + 20 >> 2] = HEAP32[$132 + 20 >> 2];
       HEAP32[$5 >> 2] = $126;
       __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_($$byval_copy11, $7, $5, $5);
       HEAP32[$77 + ($126 << 2) >> 2] = HEAP32[$$byval_copy11 >> 2];
       HEAP32[$76 + ($126 << 2) >> 2] = $126;
       break;
      }
     case 4:
      {
       $136 = $22 + ($84 << 5) + 24 | 0;
       $137 = HEAP32[$136 >> 2] | 0;
       if ((HEAP32[$77 + ($137 << 2) >> 2] | 0) == ($82 | 0)) {
        $$2356$off0$ph = 1;
        break L50;
       }
       $142 = HEAP32[$76 + ($137 << 2) >> 2] | 0;
       if ((HEAP8[$57 + $142 >> 0] | 0) == 4) {
        __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $22, $4, $84, $142, $57, $77, $7, $76);
        $$0340 = (HEAP32[$4 >> 2] | 0) + -2 | 0;
        $149 = HEAP32[$136 >> 2] | 0;
       } else {
        $$0340 = $84;
        $149 = $137;
       }
       HEAP32[$3 >> 2] = HEAP32[$77 + ($149 << 2) >> 2];
       HEAP32[$$byval_copy11 >> 2] = HEAP32[$3 >> 2];
       __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEE($7, $$byval_copy11) | 0;
       HEAP32[$80 >> 2] = HEAP32[$85 >> 2];
       HEAP32[$80 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
       HEAP32[$80 + 8 >> 2] = HEAP32[$85 + 8 >> 2];
       HEAP32[$80 + 12 >> 2] = HEAP32[$85 + 12 >> 2];
       HEAP32[$80 + 16 >> 2] = HEAP32[$85 + 16 >> 2];
       HEAP32[$80 + 20 >> 2] = HEAP32[$85 + 20 >> 2];
       HEAP32[$81 >> 2] = HEAP32[$85 >> 2];
       HEAP32[$81 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
       HEAP32[$81 + 8 >> 2] = HEAP32[$85 + 8 >> 2];
       HEAP32[$81 + 12 >> 2] = HEAP32[$85 + 12 >> 2];
       HEAP32[$81 + 16 >> 2] = HEAP32[$85 + 16 >> 2];
       HEAP32[$81 + 20 >> 2] = HEAP32[$85 + 20 >> 2];
       $152 = __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEERKT_SD_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISB_EEEE($7, $5, HEAP32[$82 >> 2] | 0, $82) | 0;
       if (($152 | 0) == (HEAP32[$7 >> 2] | 0)) {
        $$2356$off0$ph = 1;
        break L50;
       }
       $155 = HEAP32[$152 >> 2] | 0;
       if (!$155) {
        $$0$in$i$i$i375 = $152;
        do {
         $$0$in$i$i$i375$looptemp = $$0$in$i$i$i375;
         $$0$in$i$i$i375 = HEAP32[$$0$in$i$i$i375 + 8 >> 2] | 0;
        } while ((HEAP32[$$0$in$i$i$i375 >> 2] | 0) == ($$0$in$i$i$i375$looptemp | 0));
        $$07$i$i$i379 = $$0$in$i$i$i375;
       } else {
        $$0$i$i$i$i374 = $155;
        while (1) {
         $158 = HEAP32[$$0$i$i$i$i374 + 4 >> 2] | 0;
         if (!$158) {
          $$07$i$i$i379 = $$0$i$i$i$i374;
          break;
         } else $$0$i$i$i$i374 = $158;
        }
       }
       $164 = $$07$i$i$i379 + 16 | 0;
       $166 = $76 + (HEAP32[$164 >> 2] << 2) | 0;
       $167 = HEAP32[$166 >> 2] | 0;
       if ((HEAP8[$57 + $167 >> 0] | 0) == 4) {
        __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $22, $4, $$0340, $167, $57, $77, $7, $76);
        $$pre$phiZ2D = $76 + (HEAP32[$164 >> 2] << 2) | 0;
       } else $$pre$phiZ2D = $166;
       HEAP32[$$pre$phiZ2D >> 2] = $$0340;
       break;
      }
     case 0:
      {
       $171 = $22 + ($84 << 5) + 24 | 0;
       $172 = HEAP32[$171 >> 2] | 0;
       if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $85, $22 + ($172 << 5) | 0) | 0) {
        if ((HEAP32[$77 + ($172 << 2) >> 2] | 0) == ($82 | 0)) {
         $$2356$off0$ph = 1;
         break L50;
        }
        $179 = HEAP32[$76 + ($172 << 2) >> 2] | 0;
        if ((HEAP8[$57 + $179 >> 0] | 0) == 4) {
         __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $22, $4, $84, $179, $57, $77, $7, $76);
         $184 = (HEAP32[$4 >> 2] | 0) + -2 | 0;
         $$0343 = $22 + ($184 << 5) | 0;
         $$1341 = $184;
         $187 = HEAP32[$171 >> 2] | 0;
        } else {
         $$0343 = $85;
         $$1341 = $84;
         $187 = $172;
        }
        HEAP32[$3 >> 2] = HEAP32[$77 + ($187 << 2) >> 2];
        HEAP32[$$byval_copy11 >> 2] = HEAP32[$3 >> 2];
        __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEE($7, $$byval_copy11) | 0;
        HEAP32[$80 >> 2] = HEAP32[$$0343 >> 2];
        HEAP32[$80 + 4 >> 2] = HEAP32[$$0343 + 4 >> 2];
        HEAP32[$80 + 8 >> 2] = HEAP32[$$0343 + 8 >> 2];
        HEAP32[$80 + 12 >> 2] = HEAP32[$$0343 + 12 >> 2];
        HEAP32[$80 + 16 >> 2] = HEAP32[$$0343 + 16 >> 2];
        HEAP32[$80 + 20 >> 2] = HEAP32[$$0343 + 20 >> 2];
        $191 = $22 + (HEAP32[$$0343 + 28 >> 2] << 5) | 0;
        HEAP32[$81 >> 2] = HEAP32[$191 >> 2];
        HEAP32[$81 + 4 >> 2] = HEAP32[$191 + 4 >> 2];
        HEAP32[$81 + 8 >> 2] = HEAP32[$191 + 8 >> 2];
        HEAP32[$81 + 12 >> 2] = HEAP32[$191 + 12 >> 2];
        HEAP32[$81 + 16 >> 2] = HEAP32[$191 + 16 >> 2];
        HEAP32[$81 + 20 >> 2] = HEAP32[$191 + 20 >> 2];
        HEAP32[$5 >> 2] = $$1341;
        __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_($$byval_copy11, $7, $5, $5);
        HEAP32[$77 + ($$1341 << 2) >> 2] = HEAP32[$$byval_copy11 >> 2];
        HEAP32[$76 + ($$1341 << 2) >> 2] = $84;
        break L52;
       };
       HEAP32[$80 >> 2] = HEAP32[$85 >> 2];
       HEAP32[$80 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
       HEAP32[$80 + 8 >> 2] = HEAP32[$85 + 8 >> 2];
       HEAP32[$80 + 12 >> 2] = HEAP32[$85 + 12 >> 2];
       HEAP32[$80 + 16 >> 2] = HEAP32[$85 + 16 >> 2];
       HEAP32[$80 + 20 >> 2] = HEAP32[$85 + 20 >> 2];
       HEAP32[$81 >> 2] = HEAP32[$85 >> 2];
       HEAP32[$81 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
       HEAP32[$81 + 8 >> 2] = HEAP32[$85 + 8 >> 2];
       HEAP32[$81 + 12 >> 2] = HEAP32[$85 + 12 >> 2];
       HEAP32[$81 + 16 >> 2] = HEAP32[$85 + 16 >> 2];
       HEAP32[$81 + 20 >> 2] = HEAP32[$85 + 20 >> 2];
       $196 = __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEERKT_SD_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISB_EEEE($7, $5, HEAP32[$82 >> 2] | 0, $82) | 0;
       if (($196 | 0) == (HEAP32[$7 >> 2] | 0)) {
        $$2356$off0$ph = 1;
        break L50;
       }
       $199 = HEAP32[$196 >> 2] | 0;
       if (!$199) {
        $$0$in$i$i$i = $196;
        do {
         $$0$in$i$i$i$looptemp = $$0$in$i$i$i;
         $$0$in$i$i$i = HEAP32[$$0$in$i$i$i + 8 >> 2] | 0;
        } while ((HEAP32[$$0$in$i$i$i >> 2] | 0) == ($$0$in$i$i$i$looptemp | 0));
        $$07$i$i$i = $$0$in$i$i$i;
       } else {
        $$0$i$i$i$i = $199;
        while (1) {
         $202 = HEAP32[$$0$i$i$i$i + 4 >> 2] | 0;
         if (!$202) {
          $$07$i$i$i = $$0$i$i$i$i;
          break;
         } else $$0$i$i$i$i = $202;
        }
       }
       $208 = $$07$i$i$i + 16 | 0;
       $210 = $76 + (HEAP32[$208 >> 2] << 2) | 0;
       $211 = HEAP32[$210 >> 2] | 0;
       if ((HEAP8[$57 + $211 >> 0] | 0) == 4) {
        __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $22, $4, $84, $211, $57, $77, $7, $76);
        $$pre$phi552Z2D = $76 + (HEAP32[$208 >> 2] << 2) | 0;
       } else $$pre$phi552Z2D = $210;
       HEAP32[$$pre$phi552Z2D >> 2] = $84;
       break;
      }
     default:
      {}
     } while (0);
     $$4489 = $$4489 + 1 | 0;
     if (($$4489 | 0) >= ($$0339$lcssa | 0)) {
      $$2356$off0$ph = 0;
      break;
     }
    }
    $$2356$off0 = $$2356$off0$ph;
    $218 = HEAP32[$4 >> 2] | 0;
   } else {
    $$2356$off0 = 0;
    $218 = $$0339$lcssa;
   }
  } else {
   $$2356$off0 = 0;
   $218 = $$0339$lcssa;
  }
  $220 = __Znam(($218 | 0) > -1 ? $218 : -1) | 0;
  _memset($220 | 0, 0, $218 | 0) | 0;
  if (!$$2356$off0) {
   __ZN8TPPLPolyC2Ev($$byval_copy11);
   if (($218 | 0) > 0) {
    $$5483 = 0;
    do {
     $222 = $220 + $$5483 | 0;
     if (!(HEAP8[$222 >> 0] | 0)) {
      $225 = $22 + ($$5483 << 5) | 0;
      $226 = $22 + ($$5483 << 5) + 28 | 0;
      $$pn475 = HEAP32[$226 >> 2] | 0;
      if (($$pn475 | 0) == ($$5483 | 0)) $$0$lcssa = 1; else {
       $$0476 = 1;
       $$pn477 = $$pn475;
       while (1) {
        $229 = $$0476 + 1 | 0;
        $$pn477 = HEAP32[$22 + ($$pn477 << 5) + 28 >> 2] | 0;
        if (($$pn477 | 0) == ($$5483 | 0)) {
         $$0$lcssa = $229;
         break;
        } else $$0476 = $229;
       }
      }
      __ZN8TPPLPoly4InitEl($$byval_copy11, $$0$lcssa);
      $231 = __ZN8TPPLPolyixEi($$byval_copy11, 0) | 0;
      HEAP32[$231 >> 2] = HEAP32[$225 >> 2];
      HEAP32[$231 + 4 >> 2] = HEAP32[$225 + 4 >> 2];
      HEAP32[$231 + 8 >> 2] = HEAP32[$225 + 8 >> 2];
      HEAP32[$231 + 12 >> 2] = HEAP32[$225 + 12 >> 2];
      HEAP32[$231 + 16 >> 2] = HEAP32[$225 + 16 >> 2];
      HEAP32[$231 + 20 >> 2] = HEAP32[$225 + 20 >> 2];
      $232 = HEAP32[$226 >> 2] | 0;
      HEAP8[$222 >> 0] = 1;
      HEAP8[$220 + $232 >> 0] = 1;
      if (($232 | 0) != ($$5483 | 0)) {
       $$1479 = 1;
       $$pn366478 = $232;
       while (1) {
        $$1345 = $22 + ($$pn366478 << 5) | 0;
        $235 = __ZN8TPPLPolyixEi($$byval_copy11, $$1479) | 0;
        HEAP32[$235 >> 2] = HEAP32[$$1345 >> 2];
        HEAP32[$235 + 4 >> 2] = HEAP32[$$1345 + 4 >> 2];
        HEAP32[$235 + 8 >> 2] = HEAP32[$$1345 + 8 >> 2];
        HEAP32[$235 + 12 >> 2] = HEAP32[$$1345 + 12 >> 2];
        HEAP32[$235 + 16 >> 2] = HEAP32[$$1345 + 16 >> 2];
        HEAP32[$235 + 20 >> 2] = HEAP32[$$1345 + 20 >> 2];
        $$pn366478 = HEAP32[$22 + ($$pn366478 << 5) + 28 >> 2] | 0;
        HEAP8[$220 + $$pn366478 >> 0] = 1;
        if (($$pn366478 | 0) == ($$5483 | 0)) break; else $$1479 = $$1479 + 1 | 0;
       }
      }
      __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $$byval_copy11);
     }
     $$5483 = $$5483 + 1 | 0;
    } while (($$5483 | 0) < ($218 | 0));
   }
   __ZN8TPPLPolyD2Ev($$byval_copy11);
  }
  __ZdaPv($22);
  __ZdaPv($49);
  __ZdaPv($57);
  __ZdaPv($77);
  __ZdaPv($76);
  __ZdaPv($220);
  __ZNSt3__23setIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($7);
  $$1336 = ($$2356$off0 ^ 1) & 1;
 }
 STACKTOP = sp;
 return $$1336 | 0;
}

function _stbtt__run_charstring($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $161 = 0.0, $17 = 0, $18 = 0, $19 = 0, $192 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $380 = 0, $386 = 0, $388 = 0, $39 = 0, $392 = 0, $393 = 0, $4 = 0, $401 = 0, $402 = 0, $41 = 0, $43 = 0, $44 = 0, $5 = 0, $530 = 0.0, $592 = 0.0, $593 = 0, $598 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $$byval_copy4 = sp + 508 | 0;
 $3 = sp + 504 | 0;
 $4 = sp + 500 | 0;
 $5 = sp + 496 | 0;
 $6 = sp + 492 | 0;
 $7 = sp + 488 | 0;
 $8 = sp + 484 | 0;
 $9 = sp + 480 | 0;
 $10 = sp + 476 | 0;
 $11 = sp + 472 | 0;
 $12 = sp + 468 | 0;
 $13 = sp + 464 | 0;
 $14 = sp + 460 | 0;
 $15 = sp + 456 | 0;
 $16 = sp + 128 | 0;
 $17 = sp;
 $18 = sp + 444 | 0;
 $19 = sp + 432 | 0;
 $20 = sp + 428 | 0;
 $21 = sp + 416 | 0;
 $22 = sp + 404 | 0;
 $23 = sp + 392 | 0;
 $24 = sp + 380 | 0;
 $25 = sp + 376 | 0;
 $26 = sp + 372 | 0;
 $27 = sp + 368 | 0;
 $28 = sp + 364 | 0;
 $29 = sp + 360 | 0;
 $30 = sp + 356 | 0;
 $31 = sp + 352 | 0;
 $32 = sp + 348 | 0;
 $33 = sp + 344 | 0;
 $34 = sp + 340 | 0;
 $35 = sp + 336 | 0;
 $36 = sp + 332 | 0;
 $37 = sp + 328 | 0;
 $38 = sp + 324 | 0;
 $39 = sp + 320 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = 1;
 HEAP32[$8 >> 2] = 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 $41 = (HEAP32[$4 >> 2] | 0) + 84 | 0;
 HEAP32[$18 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$18 + 4 >> 2] = HEAP32[$41 + 4 >> 2];
 HEAP32[$18 + 8 >> 2] = HEAP32[$41 + 8 >> 2];
 $43 = (HEAP32[$4 >> 2] | 0) + 60 | 0;
 $44 = HEAP32[$5 >> 2] | 0;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$43 + 4 >> 2];
 HEAP32[$$byval_copy4 + 8 >> 2] = HEAP32[$43 + 8 >> 2];
 _stbtt__cff_index_get($21, $$byval_copy4, $44);
 HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$19 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
 HEAP32[$19 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
 L1 : while (1) {
  if ((HEAP32[$19 + 4 >> 2] | 0) >= (HEAP32[$19 + 8 >> 2] | 0)) {
   label = 122;
   break;
  }
  HEAP32[$12 >> 2] = 0;
  HEAP32[$15 >> 2] = 1;
  HEAP32[$13 >> 2] = (_stbtt__buf_get8($19) | 0) & 255;
  L4 : do switch (HEAP32[$13 >> 2] | 0) {
  case 14:
   {
    label = 92;
    break L1;
    break;
   }
  case 20:
  case 19:
   {
    if (HEAP32[$7 >> 2] | 0) HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) / 2 | 0);
    HEAP32[$7 >> 2] = 0;
    _stbtt__buf_skip($19, ((HEAP32[$8 >> 2] | 0) + 7 | 0) / 8 | 0);
    label = 119;
    break;
   }
  case 23:
  case 18:
  case 3:
  case 1:
   {
    HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) / 2 | 0);
    label = 119;
    break;
   }
  case 21:
   {
    HEAP32[$7 >> 2] = 0;
    if ((HEAP32[$10 >> 2] | 0) < 2) {
     label = 9;
     break L1;
    }
    _stbtt__csctx_rmove_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + ((HEAP32[$10 >> 2] | 0) - 2 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$10 >> 2] | 0) - 1 << 2) >> 2]);
    label = 119;
    break;
   }
  case 4:
   {
    HEAP32[$7 >> 2] = 0;
    if ((HEAP32[$10 >> 2] | 0) < 1) {
     label = 12;
     break L1;
    }
    _stbtt__csctx_rmove_to(HEAP32[$6 >> 2] | 0, 0.0, +HEAPF32[$16 + ((HEAP32[$10 >> 2] | 0) - 1 << 2) >> 2]);
    label = 119;
    break;
   }
  case 22:
   {
    HEAP32[$7 >> 2] = 0;
    if ((HEAP32[$10 >> 2] | 0) < 1) {
     label = 15;
     break L1;
    }
    _stbtt__csctx_rmove_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + ((HEAP32[$10 >> 2] | 0) - 1 << 2) >> 2], 0.0);
    label = 119;
    break;
   }
  case 5:
   {
    if ((HEAP32[$10 >> 2] | 0) < 2) {
     label = 18;
     break L1;
    }
    while (1) {
     if (((HEAP32[$12 >> 2] | 0) + 1 | 0) >= (HEAP32[$10 >> 2] | 0)) {
      label = 119;
      break L4;
     }
     _stbtt__csctx_rline_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2]);
     HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 2;
    }
    break;
   }
  case 7:
   {
    if ((HEAP32[$10 >> 2] | 0) < 1) {
     label = 23;
     break L1;
    }
    label = 29;
    break;
   }
  case 6:
   {
    if ((HEAP32[$10 >> 2] | 0) < 1) {
     label = 26;
     break L1;
    } else label = 27;
    break;
   }
  case 31:
   {
    if ((HEAP32[$10 >> 2] | 0) < 4) {
     label = 32;
     break L1;
    }
    label = 40;
    break;
   }
  case 30:
   {
    if ((HEAP32[$10 >> 2] | 0) < 4) {
     label = 35;
     break L1;
    } else label = 36;
    break;
   }
  case 8:
   {
    if ((HEAP32[$10 >> 2] | 0) < 6) {
     label = 45;
     break L1;
    }
    while (1) {
     if (((HEAP32[$12 >> 2] | 0) + 5 | 0) >= (HEAP32[$10 >> 2] | 0)) {
      label = 119;
      break L4;
     }
     _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 3 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 4 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 5 << 2) >> 2]);
     HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 6;
    }
    break;
   }
  case 24:
   {
    if ((HEAP32[$10 >> 2] | 0) < 8) {
     label = 50;
     break L1;
    }
    while (1) {
     if (((HEAP32[$12 >> 2] | 0) + 5 | 0) >= ((HEAP32[$10 >> 2] | 0) - 2 | 0)) break;
     _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 3 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 4 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 5 << 2) >> 2]);
     HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 6;
    }
    if (((HEAP32[$12 >> 2] | 0) + 1 | 0) >= (HEAP32[$10 >> 2] | 0)) {
     label = 55;
     break L1;
    }
    _stbtt__csctx_rline_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2]);
    label = 119;
    break;
   }
  case 25:
   {
    if ((HEAP32[$10 >> 2] | 0) < 8) {
     label = 58;
     break L1;
    }
    while (1) {
     if (((HEAP32[$12 >> 2] | 0) + 1 | 0) >= ((HEAP32[$10 >> 2] | 0) - 6 | 0)) break;
     _stbtt__csctx_rline_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2]);
     HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 2;
    }
    if (((HEAP32[$12 >> 2] | 0) + 5 | 0) >= (HEAP32[$10 >> 2] | 0)) {
     label = 63;
     break L1;
    }
    _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 3 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 4 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 5 << 2) >> 2]);
    label = 119;
    break;
   }
  case 27:
  case 26:
   {
    if ((HEAP32[$10 >> 2] | 0) < 4) {
     label = 66;
     break L1;
    }
    HEAPF32[$20 >> 2] = 0.0;
    if (HEAP32[$10 >> 2] & 1 | 0) {
     HEAPF32[$20 >> 2] = +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2];
     HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
    }
    while (1) {
     if (((HEAP32[$12 >> 2] | 0) + 3 | 0) >= (HEAP32[$10 >> 2] | 0)) {
      label = 119;
      break L4;
     }
     $333 = HEAP32[$6 >> 2] | 0;
     if ((HEAP32[$13 >> 2] | 0) == 27) _stbtt__csctx_rccurve_to($333, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], +HEAPF32[$20 >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 3 << 2) >> 2], 0.0); else _stbtt__csctx_rccurve_to($333, +HEAPF32[$20 >> 2], +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 2 << 2) >> 2], 0.0, +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 3 << 2) >> 2]);
     HEAPF32[$20 >> 2] = 0.0;
     HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 4;
    }
    break;
   }
  case 10:
   {
    if (HEAP32[$14 >> 2] | 0) label = 79; else {
     if (HEAP32[(HEAP32[$4 >> 2] | 0) + 108 + 8 >> 2] | 0) {
      _stbtt__cid_get_glyph_subrs($22, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
      HEAP32[$18 >> 2] = HEAP32[$22 >> 2];
      HEAP32[$18 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
      HEAP32[$18 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
     }
     HEAP32[$14 >> 2] = 1;
     label = 79;
    }
    break;
   }
  case 29:
   {
    label = 79;
    break;
   }
  case 11:
   {
    if ((HEAP32[$9 >> 2] | 0) <= 0) {
     label = 90;
     break L1;
    }
    $401 = (HEAP32[$9 >> 2] | 0) + -1 | 0;
    HEAP32[$9 >> 2] = $401;
    $402 = $17 + ($401 * 12 | 0) | 0;
    HEAP32[$19 >> 2] = HEAP32[$402 >> 2];
    HEAP32[$19 + 4 >> 2] = HEAP32[$402 + 4 >> 2];
    HEAP32[$19 + 8 >> 2] = HEAP32[$402 + 8 >> 2];
    HEAP32[$15 >> 2] = 0;
    label = 119;
    break;
   }
  case 12:
   {
    HEAP32[$39 >> 2] = (_stbtt__buf_get8($19) | 0) & 255;
    switch (HEAP32[$39 >> 2] | 0) {
    case 34:
     {
      if ((HEAP32[$10 >> 2] | 0) < 7) {
       label = 95;
       break L1;
      }
      HEAPF32[$25 >> 2] = +HEAPF32[$16 >> 2];
      HEAPF32[$26 >> 2] = +HEAPF32[$16 + 4 >> 2];
      HEAPF32[$32 >> 2] = +HEAPF32[$16 + 8 >> 2];
      HEAPF32[$27 >> 2] = +HEAPF32[$16 + 12 >> 2];
      HEAPF32[$28 >> 2] = +HEAPF32[$16 + 16 >> 2];
      HEAPF32[$29 >> 2] = +HEAPF32[$16 + 20 >> 2];
      HEAPF32[$30 >> 2] = +HEAPF32[$16 + 24 >> 2];
      _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$25 >> 2], 0.0, +HEAPF32[$26 >> 2], +HEAPF32[$32 >> 2], +HEAPF32[$27 >> 2], 0.0);
      _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$28 >> 2], 0.0, +HEAPF32[$29 >> 2], -+HEAPF32[$32 >> 2], +HEAPF32[$30 >> 2], 0.0);
      label = 119;
      break L4;
      break;
     }
    case 35:
     {
      if ((HEAP32[$10 >> 2] | 0) < 13) {
       label = 98;
       break L1;
      }
      HEAPF32[$25 >> 2] = +HEAPF32[$16 >> 2];
      HEAPF32[$31 >> 2] = +HEAPF32[$16 + 4 >> 2];
      HEAPF32[$26 >> 2] = +HEAPF32[$16 + 8 >> 2];
      HEAPF32[$32 >> 2] = +HEAPF32[$16 + 12 >> 2];
      HEAPF32[$27 >> 2] = +HEAPF32[$16 + 16 >> 2];
      HEAPF32[$33 >> 2] = +HEAPF32[$16 + 20 >> 2];
      HEAPF32[$28 >> 2] = +HEAPF32[$16 + 24 >> 2];
      HEAPF32[$34 >> 2] = +HEAPF32[$16 + 28 >> 2];
      HEAPF32[$29 >> 2] = +HEAPF32[$16 + 32 >> 2];
      HEAPF32[$35 >> 2] = +HEAPF32[$16 + 36 >> 2];
      HEAPF32[$30 >> 2] = +HEAPF32[$16 + 40 >> 2];
      HEAPF32[$36 >> 2] = +HEAPF32[$16 + 44 >> 2];
      _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$25 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$26 >> 2], +HEAPF32[$32 >> 2], +HEAPF32[$27 >> 2], +HEAPF32[$33 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$28 >> 2], +HEAPF32[$34 >> 2], +HEAPF32[$29 >> 2], +HEAPF32[$35 >> 2], +HEAPF32[$30 >> 2], +HEAPF32[$36 >> 2]);
      label = 119;
      break L4;
      break;
     }
    case 36:
     {
      if ((HEAP32[$10 >> 2] | 0) < 9) {
       label = 101;
       break L1;
      }
      HEAPF32[$25 >> 2] = +HEAPF32[$16 >> 2];
      HEAPF32[$31 >> 2] = +HEAPF32[$16 + 4 >> 2];
      HEAPF32[$26 >> 2] = +HEAPF32[$16 + 8 >> 2];
      HEAPF32[$32 >> 2] = +HEAPF32[$16 + 12 >> 2];
      HEAPF32[$27 >> 2] = +HEAPF32[$16 + 16 >> 2];
      HEAPF32[$28 >> 2] = +HEAPF32[$16 + 20 >> 2];
      HEAPF32[$29 >> 2] = +HEAPF32[$16 + 24 >> 2];
      HEAPF32[$35 >> 2] = +HEAPF32[$16 + 28 >> 2];
      HEAPF32[$30 >> 2] = +HEAPF32[$16 + 32 >> 2];
      _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$25 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$26 >> 2], +HEAPF32[$32 >> 2], +HEAPF32[$27 >> 2], 0.0);
      _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$28 >> 2], 0.0, +HEAPF32[$29 >> 2], +HEAPF32[$35 >> 2], +HEAPF32[$30 >> 2], -(+HEAPF32[$31 >> 2] + +HEAPF32[$32 >> 2] + +HEAPF32[$35 >> 2]));
      label = 119;
      break L4;
      break;
     }
    case 37:
     {
      if ((HEAP32[$10 >> 2] | 0) < 11) {
       label = 104;
       break L1;
      }
      HEAPF32[$25 >> 2] = +HEAPF32[$16 >> 2];
      HEAPF32[$31 >> 2] = +HEAPF32[$16 + 4 >> 2];
      HEAPF32[$26 >> 2] = +HEAPF32[$16 + 8 >> 2];
      HEAPF32[$32 >> 2] = +HEAPF32[$16 + 12 >> 2];
      HEAPF32[$27 >> 2] = +HEAPF32[$16 + 16 >> 2];
      HEAPF32[$33 >> 2] = +HEAPF32[$16 + 20 >> 2];
      HEAPF32[$28 >> 2] = +HEAPF32[$16 + 24 >> 2];
      HEAPF32[$34 >> 2] = +HEAPF32[$16 + 28 >> 2];
      HEAPF32[$29 >> 2] = +HEAPF32[$16 + 32 >> 2];
      HEAPF32[$35 >> 2] = +HEAPF32[$16 + 36 >> 2];
      $530 = +HEAPF32[$16 + 40 >> 2];
      HEAPF32[$36 >> 2] = $530;
      HEAPF32[$30 >> 2] = $530;
      HEAPF32[$37 >> 2] = +HEAPF32[$25 >> 2] + +HEAPF32[$26 >> 2] + +HEAPF32[$27 >> 2] + +HEAPF32[$28 >> 2] + +HEAPF32[$29 >> 2];
      HEAPF32[$38 >> 2] = +HEAPF32[$31 >> 2] + +HEAPF32[$32 >> 2] + +HEAPF32[$33 >> 2] + +HEAPF32[$34 >> 2] + +HEAPF32[$35 >> 2];
      if (+Math_abs(+(+HEAPF32[$37 >> 2])) > +Math_abs(+(+HEAPF32[$38 >> 2]))) HEAPF32[$36 >> 2] = -+HEAPF32[$38 >> 2]; else HEAPF32[$30 >> 2] = -+HEAPF32[$37 >> 2];
      _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$25 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$26 >> 2], +HEAPF32[$32 >> 2], +HEAPF32[$27 >> 2], +HEAPF32[$33 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$28 >> 2], +HEAPF32[$34 >> 2], +HEAPF32[$29 >> 2], +HEAPF32[$35 >> 2], +HEAPF32[$30 >> 2], +HEAPF32[$36 >> 2]);
      label = 119;
      break L4;
      break;
     }
    default:
     {
      label = 109;
      break L1;
     }
    }
    break;
   }
  default:
   {
    if ((HEAP32[$13 >> 2] | 0) != 255 & (HEAP32[$13 >> 2] | 0) != 28) if ((HEAP32[$13 >> 2] | 0) < 32 | (HEAP32[$13 >> 2] | 0) > 254) {
     label = 112;
     break L1;
    }
    if ((HEAP32[$13 >> 2] | 0) == 255) HEAPF32[$20 >> 2] = +((_stbtt__buf_get($19, 4) | 0) >>> 0) / 65536.0; else {
     _stbtt__buf_skip($19, -1);
     HEAPF32[$20 >> 2] = +(((_stbtt__cff_int($19) | 0) & 65535) << 16 >> 16);
    }
    if ((HEAP32[$10 >> 2] | 0) >= 48) {
     label = 117;
     break L1;
    }
    $592 = +HEAPF32[$20 >> 2];
    $593 = HEAP32[$10 >> 2] | 0;
    HEAP32[$10 >> 2] = $593 + 1;
    HEAPF32[$16 + ($593 << 2) >> 2] = $592;
    HEAP32[$15 >> 2] = 0;
    label = 119;
   }
  } while (0);
  if ((label | 0) == 79) {
   label = 0;
   if ((HEAP32[$10 >> 2] | 0) < 1) {
    label = 80;
    break;
   }
   $380 = (HEAP32[$10 >> 2] | 0) + -1 | 0;
   HEAP32[$10 >> 2] = $380;
   HEAP32[$11 >> 2] = ~~+HEAPF32[$16 + ($380 << 2) >> 2];
   if ((HEAP32[$9 >> 2] | 0) >= 10) {
    label = 82;
    break;
   }
   $386 = HEAP32[$9 >> 2] | 0;
   HEAP32[$9 >> 2] = $386 + 1;
   $388 = $17 + ($386 * 12 | 0) | 0;
   HEAP32[$388 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$388 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
   HEAP32[$388 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
   if ((HEAP32[$13 >> 2] | 0) == 10) {
    HEAP32[$23 >> 2] = HEAP32[$18 >> 2];
    HEAP32[$23 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
    HEAP32[$23 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
   } else {
    $392 = (HEAP32[$4 >> 2] | 0) + 72 | 0;
    HEAP32[$23 >> 2] = HEAP32[$392 >> 2];
    HEAP32[$23 + 4 >> 2] = HEAP32[$392 + 4 >> 2];
    HEAP32[$23 + 8 >> 2] = HEAP32[$392 + 8 >> 2];
   }
   $393 = HEAP32[$11 >> 2] | 0;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
   HEAP32[$$byval_copy4 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
   _stbtt__get_subr($24, $$byval_copy4, $393);
   HEAP32[$19 >> 2] = HEAP32[$24 >> 2];
   HEAP32[$19 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
   HEAP32[$19 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
   if (!(HEAP32[$19 + 8 >> 2] | 0)) {
    label = 87;
    break;
   }
   HEAP32[$19 + 4 >> 2] = 0;
   HEAP32[$15 >> 2] = 0;
   label = 119;
  }
  while (1) if ((label | 0) == 27) {
   label = 0;
   if ((HEAP32[$12 >> 2] | 0) >= (HEAP32[$10 >> 2] | 0)) {
    label = 119;
    continue;
   }
   _stbtt__csctx_rline_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], 0.0);
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
   label = 29;
   continue;
  } else if ((label | 0) == 29) {
   label = 0;
   if ((HEAP32[$12 >> 2] | 0) >= (HEAP32[$10 >> 2] | 0)) {
    label = 119;
    continue;
   }
   _stbtt__csctx_rline_to(HEAP32[$6 >> 2] | 0, 0.0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2]);
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
   label = 27;
   continue;
  } else if ((label | 0) == 36) {
   label = 0;
   if (((HEAP32[$12 >> 2] | 0) + 3 | 0) >= (HEAP32[$10 >> 2] | 0)) {
    label = 119;
    continue;
   }
   if (((HEAP32[$10 >> 2] | 0) - (HEAP32[$12 >> 2] | 0) | 0) == 5) $161 = +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 4 << 2) >> 2]; else $161 = 0.0;
   _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, 0.0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 3 << 2) >> 2], $161);
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 4;
   label = 40;
   continue;
  } else if ((label | 0) == 40) {
   label = 0;
   if (((HEAP32[$12 >> 2] | 0) + 3 | 0) >= (HEAP32[$10 >> 2] | 0)) {
    label = 119;
    continue;
   }
   if (((HEAP32[$10 >> 2] | 0) - (HEAP32[$12 >> 2] | 0) | 0) == 5) $192 = +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 4 << 2) >> 2]; else $192 = 0.0;
   _stbtt__csctx_rccurve_to(HEAP32[$6 >> 2] | 0, +HEAPF32[$16 + (HEAP32[$12 >> 2] << 2) >> 2], 0.0, +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 2 << 2) >> 2], $192, +HEAPF32[$16 + ((HEAP32[$12 >> 2] | 0) + 3 << 2) >> 2]);
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 4;
   label = 36;
   continue;
  } else if ((label | 0) == 119) {
   label = 0;
   if (HEAP32[$15 >> 2] | 0) {
    label = 120;
    break;
   } else break;
  }
  if ((label | 0) == 120) {
   label = 0;
   HEAP32[$10 >> 2] = 0;
  }
 }
 switch (label | 0) {
 case 9:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 12:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 15:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 18:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 23:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 26:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 32:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 35:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 45:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 50:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 55:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 58:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 63:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 66:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 80:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 82:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 87:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 90:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 92:
  {
   _stbtt__csctx_close_shape(HEAP32[$6 >> 2] | 0);
   HEAP32[$3 >> 2] = 1;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 95:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 98:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 101:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 104:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 109:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 112:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 117:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 case 122:
  {
   HEAP32[$3 >> 2] = 0;
   $598 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $598 | 0;
  }
 }
 return 0;
}

function __ZN6DrMesh15triangulateFaceERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEERKNS1_IS5_NS3_IS5_EEEERK8DrBitmapb14Trianglulationd($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 var $$0366588 = 0, $$0367580 = 0, $$0368570 = 0, $$0370 = 0, $$0371559 = 0, $$0372555 = 0, $$0373552 = 0, $$0375549 = 0, $$0381546 = 0, $$2378 = 0, $$cast548 = 0, $$cast550 = 0, $$in = 0, $$in604 = 0, $$in605 = 0, $$in606 = 0, $$in608 = 0, $$lcssa526 = 0, $$sroa$0405$0562 = 0, $$sroa$0413$0566 = 0, $$sroa$0421$0575 = 0, $$sroa$0421$0576 = 0, $$sroa$0429$0544 = 0, $$sroa$0429$0545 = 0, $$sroa$0440$0584 = 0, $10 = 0, $100 = 0.0, $11 = 0, $111 = 0, $112 = 0, $113 = 0, $115 = 0, $12 = 0, $122 = 0.0, $128 = 0.0, $13 = 0, $132 = 0.0, $138 = 0.0, $14 = 0, $142 = 0.0, $148 = 0.0, $15 = 0, $152 = 0.0, $157 = 0.0, $16 = 0, $161 = 0.0, $166 = 0.0, $17 = 0, $170 = 0.0, $177 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $19 = 0, $190 = 0, $193 = 0, $194 = 0, $20 = 0, $200 = 0, $201 = 0, $209 = 0, $21 = 0, $210 = 0, $214 = 0, $215 = 0, $218 = 0, $22 = 0, $220 = 0, $221 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0.0, $239 = 0, $240 = 0, $242 = 0, $243 = 0.0, $245 = 0, $246 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $256 = 0, $257 = 0, $262 = 0, $265 = 0, $266 = 0, $268 = 0, $27 = 0, $270 = 0, $277 = 0, $28 = 0.0, $281 = 0, $282 = 0, $283 = 0, $287 = 0, $289 = 0, $29 = 0.0, $290 = 0, $292 = 0, $293 = 0, $30 = 0.0, $301 = 0, $302 = 0, $304 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $313 = 0, $314 = 0, $316 = 0.0, $319 = 0.0, $32 = 0, $323 = 0, $325 = 0.0, $328 = 0.0, $332 = 0, $334 = 0.0, $337 = 0.0, $338 = 0.0, $340 = 0.0, $357 = 0, $360 = 0.0, $368 = 0.0, $373 = 0, $378 = 0, $379 = 0, $384 = 0.0, $385 = 0, $390 = 0, $391 = 0, $396 = 0.0, $397 = 0, $40 = 0, $402 = 0, $403 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $56 = 0.0, $60 = 0.0, $69 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $89 = 0, $9 = 0, $96 = 0.0, $spec$select = 0, $tmpcast385$byval_copy = 0, label = 0, sp = 0, $$0373552$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $tmpcast385$byval_copy = sp + 216 | 0;
 $7 = sp + 208 | 0;
 $8 = sp + 292 | 0;
 $9 = sp + 280 | 0;
 $10 = sp + 268 | 0;
 $11 = sp + 256 | 0;
 $12 = sp + 244 | 0;
 $13 = sp + 232 | 0;
 $14 = sp + 184 | 0;
 $15 = sp + 56 | 0;
 $16 = sp + 48 | 0;
 $17 = sp + 40 | 0;
 $18 = sp + 32 | 0;
 $19 = sp + 16 | 0;
 $20 = sp;
 $21 = sp + 200 | 0;
 $22 = sp + 176 | 0;
 $23 = sp + 168 | 0;
 HEAPF64[$7 >> 3] = $6;
 $25 = HEAP32[$3 + 4 >> 2] | 0;
 $27 = HEAP32[$3 + 8 >> 2] | 0;
 $28 = +($25 | 0);
 $29 = $28 * .5;
 $30 = +($27 | 0);
 $31 = $30 * .5;
 $32 = $1 + 4 | 0;
 if ((HEAP32[$32 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) >> 4 >>> 0 >= 3) {
  HEAP32[$8 >> 2] = $8;
  HEAP32[$8 + 4 >> 2] = $8;
  HEAP32[$8 + 8 >> 2] = 0;
  HEAP32[$9 >> 2] = $9;
  $40 = $9 + 4 | 0;
  HEAP32[$40 >> 2] = $9;
  HEAP32[$9 + 8 >> 2] = 0;
  __ZN8TPPLPolyC2Ev($10);
  __ZN8TPPLPoly4InitEl($10, (HEAP32[$32 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) >> 4);
  $47 = HEAP32[$1 >> 2] | 0;
  if (((HEAP32[$32 >> 2] | 0) - $47 | 0) > 0) {
   $$0366588 = 0;
   $$in606 = $47;
   do {
    $56 = +HEAPF64[$$in606 + ($$0366588 << 4) >> 3];
    HEAPF64[(__ZN8TPPLPolyixEi($10, $$0366588) | 0) >> 3] = $56;
    $60 = +HEAPF64[(HEAP32[$1 >> 2] | 0) + ($$0366588 << 4) + 8 >> 3];
    HEAPF64[(__ZN8TPPLPolyixEi($10, $$0366588) | 0) + 8 >> 3] = $60;
    $$0366588 = $$0366588 + 1 | 0;
    $$in606 = HEAP32[$1 >> 2] | 0;
   } while (($$0366588 | 0) < ((HEAP32[$32 >> 2] | 0) - $$in606 >> 4 | 0));
  }
  __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($8, $10);
  $50 = HEAP32[$2 >> 2] | 0;
  $51 = $2 + 4 | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  if (($50 | 0) != ($52 | 0)) {
   $69 = $11 + 4 | 0;
   $$sroa$0440$0584 = $50;
   do {
    __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($11, $$sroa$0440$0584);
    if ((__ZN10DrPolygonF22findWindingOrientationERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE($11) | 0) == 1) {
     $74 = HEAP32[$11 >> 2] | 0;
     $75 = HEAP32[$69 >> 2] | 0;
     if (($74 | 0) != ($75 | 0)) {
      $77 = $75 + -16 | 0;
      if ($74 >>> 0 < $77 >>> 0) {
       $79 = $74;
       $80 = $77;
       do {
        HEAP32[$tmpcast385$byval_copy >> 2] = HEAP32[$79 >> 2];
        HEAP32[$tmpcast385$byval_copy + 4 >> 2] = HEAP32[$79 + 4 >> 2];
        HEAP32[$tmpcast385$byval_copy + 8 >> 2] = HEAP32[$79 + 8 >> 2];
        HEAP32[$tmpcast385$byval_copy + 12 >> 2] = HEAP32[$79 + 12 >> 2];
        __ZN8DrPointFaSERKS_($79, $80) | 0;
        __ZN8DrPointFaSERKS_($80, $tmpcast385$byval_copy) | 0;
        $79 = $79 + 16 | 0;
        $80 = $80 + -16 | 0;
       } while ($79 >>> 0 < $80 >>> 0);
      }
     }
    }
    __ZN8TPPLPolyC2Ev($tmpcast385$byval_copy);
    __ZN8TPPLPoly4InitEl($tmpcast385$byval_copy, (HEAP32[$69 >> 2] | 0) - (HEAP32[$11 >> 2] | 0) >> 4);
    __ZN8TPPLPoly7SetHoleEb($tmpcast385$byval_copy, 1);
    $89 = HEAP32[$11 >> 2] | 0;
    if (((HEAP32[$69 >> 2] | 0) - $89 | 0) > 0) {
     $$0367580 = 0;
     $$in605 = $89;
     do {
      $96 = +HEAPF64[$$in605 + ($$0367580 << 4) >> 3];
      HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, $$0367580) | 0) >> 3] = $96;
      $100 = +HEAPF64[(HEAP32[$11 >> 2] | 0) + ($$0367580 << 4) + 8 >> 3];
      HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, $$0367580) | 0) + 8 >> 3] = $100;
      $$0367580 = $$0367580 + 1 | 0;
      $$in605 = HEAP32[$11 >> 2] | 0;
     } while (($$0367580 | 0) < ((HEAP32[$69 >> 2] | 0) - $$in605 >> 4 | 0));
    }
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($8, $tmpcast385$byval_copy);
    __ZN8TPPLPolyD2Ev($tmpcast385$byval_copy);
    __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($11);
    $$sroa$0440$0584 = $$sroa$0440$0584 + 12 | 0;
   } while (($$sroa$0440$0584 | 0) != ($52 | 0));
  }
  HEAP32[$12 >> 2] = $12;
  $70 = $12 + 4 | 0;
  HEAP32[$70 >> 2] = $12;
  HEAP32[$12 + 8 >> 2] = 0;
  __ZN13TPPLPartition11RemoveHolesEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($11, $8, $12) | 0;
  L25 : do switch ($5 | 0) {
  case 0:
   {
    __ZN13TPPLPartition14Triangulate_ECEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($11, $12, $9) | 0;
    label = 21;
    break;
   }
  case 1:
   {
    __ZN13TPPLPartition15Triangulate_OPTEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE($11, (HEAP32[$70 >> 2] | 0) + 8 | 0, $9) | 0;
    label = 21;
    break;
   }
  case 2:
   {
    __ZN13TPPLPartition16Triangulate_MONOEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($11, $12, $9) | 0;
    label = 21;
    break;
   }
  case 3:
   {
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($9, $10);
    HEAP32[$13 >> 2] = 0;
    $111 = $13 + 4 | 0;
    HEAP32[$111 >> 2] = 0;
    $112 = $13 + 8 | 0;
    HEAP32[$112 >> 2] = 0;
    $$sroa$0421$0575 = HEAP32[$40 >> 2] | 0;
    $113 = $$sroa$0421$0575;
    if (($9 | 0) != ($113 | 0)) {
     $$sroa$0421$0576 = $$sroa$0421$0575;
     $190 = $113;
     do {
      __ZN8TPPLPolyC2ERKS_($tmpcast385$byval_copy, $$sroa$0421$0576 + 8 | 0);
      if ((__ZNK8TPPLPoly12GetNumPointsEv($tmpcast385$byval_copy) | 0) > 0) {
       $$0368570 = 0;
       do {
        $193 = __ZN8TPPLPolyixEi($tmpcast385$byval_copy, $$0368570) | 0;
        $194 = HEAP32[$111 >> 2] | 0;
        if (($194 | 0) == (HEAP32[$112 >> 2] | 0)) __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($13, $193); else {
         HEAPF64[$194 >> 3] = +HEAPF64[$193 >> 3];
         HEAP32[$111 >> 2] = $194 + 8;
        }
        $200 = (__ZN8TPPLPolyixEi($tmpcast385$byval_copy, $$0368570) | 0) + 8 | 0;
        $201 = HEAP32[$111 >> 2] | 0;
        if (($201 | 0) == (HEAP32[$112 >> 2] | 0)) __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($13, $200); else {
         HEAPF64[$201 >> 3] = +HEAPF64[$200 >> 3];
         HEAP32[$111 >> 2] = $201 + 8;
        }
        $$0368570 = $$0368570 + 1 | 0;
       } while (($$0368570 | 0) < (__ZNK8TPPLPoly12GetNumPointsEv($tmpcast385$byval_copy) | 0));
      }
      __ZN8TPPLPolyD2Ev($tmpcast385$byval_copy);
      $$sroa$0421$0576 = HEAP32[$190 + 4 >> 2] | 0;
      $190 = $$sroa$0421$0576;
     } while (($9 | 0) != ($190 | 0));
    }
    $180 = HEAP32[$2 >> 2] | 0;
    $181 = HEAP32[$51 >> 2] | 0;
    if (($180 | 0) != ($181 | 0)) {
     $183 = $tmpcast385$byval_copy + 4 | 0;
     $184 = $14 + 8 | 0;
     $$sroa$0413$0566 = $180;
     do {
      __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($tmpcast385$byval_copy, $$sroa$0413$0566);
      $209 = HEAP32[$tmpcast385$byval_copy >> 2] | 0;
      $210 = HEAP32[$183 >> 2] | 0;
      if (($209 | 0) != ($210 | 0)) {
       $$sroa$0405$0562 = $209;
       do {
        HEAP32[$14 >> 2] = HEAP32[$$sroa$0405$0562 >> 2];
        HEAP32[$14 + 4 >> 2] = HEAP32[$$sroa$0405$0562 + 4 >> 2];
        HEAP32[$14 + 8 >> 2] = HEAP32[$$sroa$0405$0562 + 8 >> 2];
        HEAP32[$14 + 12 >> 2] = HEAP32[$$sroa$0405$0562 + 12 >> 2];
        $214 = HEAP32[$111 >> 2] | 0;
        $215 = HEAP32[$112 >> 2] | 0;
        if (($214 | 0) == ($215 | 0)) {
         __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($13, $14);
         $220 = HEAP32[$111 >> 2] | 0;
         $221 = HEAP32[$112 >> 2] | 0;
        } else {
         HEAPF64[$214 >> 3] = +HEAPF64[$14 >> 3];
         $218 = $214 + 8 | 0;
         HEAP32[$111 >> 2] = $218;
         $220 = $218;
         $221 = $215;
        }
        if (($220 | 0) == ($221 | 0)) __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($13, $184); else {
         HEAPF64[$220 >> 3] = +HEAPF64[$184 >> 3];
         HEAP32[$111 >> 2] = $220 + 8;
        }
        $$sroa$0405$0562 = $$sroa$0405$0562 + 16 | 0;
       } while (($$sroa$0405$0562 | 0) != ($210 | 0));
      }
      __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($tmpcast385$byval_copy);
      $$sroa$0413$0566 = $$sroa$0413$0566 + 12 | 0;
     } while (($$sroa$0413$0566 | 0) != ($181 | 0));
    }
    if ($4) {
     HEAP32[$tmpcast385$byval_copy >> 2] = 10;
     HEAP32[$14 >> 2] = ($25 | 0) / 20 | 0;
     $227 = __ZN2Dr3MinIiEET_RKS1_S3_($tmpcast385$byval_copy, $14) | 0;
     HEAP32[$tmpcast385$byval_copy >> 2] = 10;
     HEAP32[$14 >> 2] = ($27 | 0) / 20 | 0;
     $229 = __ZN2Dr3MinIiEET_RKS1_S3_($tmpcast385$byval_copy, $14) | 0;
     $spec$select = ($227 | 0) > 1 ? $227 : 1;
     $$0370 = ($229 | 0) > 1 ? $229 : 1;
     $232 = $spec$select >>> 1;
     if (($232 | 0) < ($25 | 0)) {
      $234 = $$0370 >>> 1;
      $235 = ($234 | 0) < ($27 | 0);
      $$0371559 = $232;
      do {
       if ($235) {
        $236 = +($$0371559 | 0);
        $$0372555 = $234;
        do {
         HEAPF64[$tmpcast385$byval_copy >> 3] = $236;
         $239 = HEAP32[$111 >> 2] | 0;
         $240 = HEAP32[$112 >> 2] | 0;
         if ($239 >>> 0 < $240 >>> 0) {
          HEAPF64[$239 >> 3] = $236;
          $242 = $239 + 8 | 0;
          HEAP32[$111 >> 2] = $242;
          $245 = $242;
          $246 = $240;
         } else {
          __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_($13, $tmpcast385$byval_copy);
          $245 = HEAP32[$111 >> 2] | 0;
          $246 = HEAP32[$112 >> 2] | 0;
         }
         $243 = +($$0372555 | 0);
         HEAPF64[$tmpcast385$byval_copy >> 3] = $243;
         if ($245 >>> 0 < $246 >>> 0) {
          HEAPF64[$245 >> 3] = $243;
          HEAP32[$111 >> 2] = $245 + 8;
         } else __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_($13, $tmpcast385$byval_copy);
         $$0372555 = $$0372555 + $$0370 | 0;
        } while (($$0372555 | 0) < ($27 | 0));
       }
       $$0371559 = $$0371559 + $spec$select | 0;
      } while (($$0371559 | 0) < ($25 | 0));
     }
    }
    HEAP32[$14 >> 2] = 0;
    $250 = $14 + 4 | 0;
    HEAP32[$250 >> 2] = 0;
    $251 = $14 + 8 | 0;
    HEAP32[$251 >> 2] = 0;
    $252 = HEAP32[$111 >> 2] | 0;
    $253 = HEAP32[$13 >> 2] | 0;
    if (($252 | 0) == ($253 | 0)) {
     $256 = 0;
     $257 = 0;
    } else {
     $$0373552 = 0;
     $$in = $253;
     $262 = $252;
     do {
      $$0373552$looptemp = $$0373552;
      $$0373552 = $$0373552 + 2 | 0;
      $$cast548 = $$in;
      $265 = $$cast548 + ($$0373552$looptemp << 3) | 0;
      L89 : do if ($$0373552 >>> 0 < $262 - $$in >> 3 >>> 0) {
       $266 = $$0373552$looptemp | 1;
       $$0375549 = $$0373552;
       $$cast550 = $$cast548;
       $268 = $265;
       while (1) {
        HEAPF64[$tmpcast385$byval_copy >> 3] = .05;
        if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($268, $$cast550 + ($$0375549 << 3) | 0, $tmpcast385$byval_copy) | 0) {
         $270 = HEAP32[$13 >> 2] | 0;
         HEAPF64[$15 >> 3] = .05;
         if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($270 + ($266 << 3) | 0, $270 + ($$0375549 + 1 << 3) | 0, $15) | 0) break L89;
        } else {}
        $$0375549 = $$0375549 + 2 | 0;
        $277 = HEAP32[$13 >> 2] | 0;
        $$cast550 = $277;
        $281 = $$cast550 + ($$0373552$looptemp << 3) | 0;
        if ($$0375549 >>> 0 >= (HEAP32[$111 >> 2] | 0) - $277 >> 3 >>> 0) {
         $$in608 = $277;
         $$lcssa526 = $281;
         label = 70;
         break;
        } else $268 = $281;
       }
      } else {
       $$in608 = $$in;
       $$lcssa526 = $265;
       label = 70;
      } while (0);
      do if ((label | 0) == 70) {
       label = 0;
       $282 = HEAP32[$250 >> 2] | 0;
       $283 = HEAP32[$251 >> 2] | 0;
       if (($282 | 0) == ($283 | 0)) {
        __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($14, $$lcssa526);
        $290 = HEAP32[$13 >> 2] | 0;
        $292 = HEAP32[$250 >> 2] | 0;
        $293 = HEAP32[$251 >> 2] | 0;
       } else {
        HEAPF64[$282 >> 3] = +HEAPF64[$$lcssa526 >> 3];
        $287 = $282 + 8 | 0;
        HEAP32[$250 >> 2] = $287;
        $290 = $$in608;
        $292 = $287;
        $293 = $283;
       }
       $289 = $290 + (($$0373552$looptemp | 1) << 3) | 0;
       if (($292 | 0) == ($293 | 0)) {
        __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($14, $289);
        break;
       } else {
        HEAPF64[$292 >> 3] = +HEAPF64[$289 >> 3];
        HEAP32[$250 >> 2] = $292 + 8;
        break;
       }
      } while (0);
      $262 = HEAP32[$111 >> 2] | 0;
      $$in = HEAP32[$13 >> 2] | 0;
     } while ($$0373552 >>> 0 < $262 - $$in >> 3 >>> 0);
     $256 = HEAP32[$250 >> 2] | 0;
     $257 = HEAP32[$14 >> 2] | 0;
    }
    if ($256 - $257 >> 3 >>> 0 < 6) {
     __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($14);
     __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($13);
     break L25;
    }
    __ZN10DelaunatorC2ERKNSt3__26vectorIdNS0_9allocatorIdEEEE($15, $14);
    $301 = $15 + 4 | 0;
    $302 = $15 + 8 | 0;
    $304 = HEAP32[$301 >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) != ($304 | 0)) {
     $306 = $16 + 4 | 0;
     $307 = $17 + 4 | 0;
     $308 = $18 + 4 | 0;
     $$0381546 = 0;
     $$in604 = $304;
     do {
      $309 = $$in604;
      $313 = HEAP32[$309 + ($$0381546 << 2) >> 2] << 1;
      $314 = HEAP32[HEAP32[$15 >> 2] >> 2] | 0;
      $316 = +HEAPF64[$314 + ($313 << 3) >> 3];
      $319 = +HEAPF64[$314 + (($313 | 1) << 3) >> 3];
      $323 = HEAP32[$309 + ($$0381546 + 1 << 2) >> 2] << 1;
      $325 = +HEAPF64[$314 + ($323 << 3) >> 3];
      $328 = +HEAPF64[$314 + (($323 | 1) << 3) >> 3];
      $332 = HEAP32[$309 + ($$0381546 + 2 << 2) >> 2] << 1;
      $334 = +HEAPF64[$314 + ($332 << 3) >> 3];
      $337 = +HEAPF64[$314 + (($332 | 1) << 3) >> 3];
      $338 = $316 + $325;
      $340 = $319 + $328;
      __ZN7DrPointC2Edd($16, $338 * .5, $340 * .5);
      __ZN7DrPointC2Edd($17, ($325 + $334) * .5, ($328 + $337) * .5);
      __ZN7DrPointC2Edd($18, ($316 + $334) * .5, ($319 + $337) * .5);
      __ZN8DrPointFC2Edd($19, ($338 + $334) / 3.0, ($340 + $337) / 3.0);
      __ZNK8DrBitmap8getPixelEii($tmpcast385$byval_copy, $3, HEAP32[$16 >> 2] | 0, HEAP32[$306 >> 2] | 0);
      $357 = +__ZNK7DrColor6alphaFEv($tmpcast385$byval_copy) < $6;
      __ZNK8DrBitmap8getPixelEii($tmpcast385$byval_copy, $3, HEAP32[$17 >> 2] | 0, HEAP32[$307 >> 2] | 0);
      $360 = +__ZNK7DrColor6alphaFEv($tmpcast385$byval_copy);
      __ZNK8DrBitmap8getPixelEii($tmpcast385$byval_copy, $3, HEAP32[$18 >> 2] | 0, HEAP32[$308 >> 2] | 0);
      $$2378 = ($360 < $6 ? ($357 ? 2 : 1) : $357 & 1) + (+__ZNK7DrColor6alphaFEv($tmpcast385$byval_copy) < $6 & 1) | 0;
      $368 = +__Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($3, $19, $7);
      if (!($368 > .9999)) if (($$2378 + ($368 > .6666 & 1) | 0) >>> 0 <= 1) {
       $373 = $16;
       $378 = HEAP32[$373 + 4 >> 2] | 0;
       $379 = $21;
       HEAP32[$379 >> 2] = HEAP32[$373 >> 2];
       HEAP32[$379 + 4 >> 2] = $378;
       HEAP32[$tmpcast385$byval_copy >> 2] = HEAP32[$21 >> 2];
       HEAP32[$tmpcast385$byval_copy + 4 >> 2] = HEAP32[$21 + 4 >> 2];
       __ZN8DrPointFC2E7DrPoint($20, $tmpcast385$byval_copy);
       $384 = +__Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($3, $20, $7) + 0.0;
       $385 = $17;
       $390 = HEAP32[$385 + 4 >> 2] | 0;
       $391 = $22;
       HEAP32[$391 >> 2] = HEAP32[$385 >> 2];
       HEAP32[$391 + 4 >> 2] = $390;
       HEAP32[$tmpcast385$byval_copy >> 2] = HEAP32[$22 >> 2];
       HEAP32[$tmpcast385$byval_copy + 4 >> 2] = HEAP32[$22 + 4 >> 2];
       __ZN8DrPointFC2E7DrPoint($20, $tmpcast385$byval_copy);
       $396 = $384 + +__Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($3, $20, $7);
       $397 = $18;
       $402 = HEAP32[$397 + 4 >> 2] | 0;
       $403 = $23;
       HEAP32[$403 >> 2] = HEAP32[$397 >> 2];
       HEAP32[$403 + 4 >> 2] = $402;
       HEAP32[$tmpcast385$byval_copy >> 2] = HEAP32[$23 >> 2];
       HEAP32[$tmpcast385$byval_copy + 4 >> 2] = HEAP32[$23 + 4 >> 2];
       __ZN8DrPointFC2E7DrPoint($20, $tmpcast385$byval_copy);
       if (!($368 + ($396 + +__Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($3, $20, $7)) > 2.49)) __ZN6DrMesh8triangleEffffffffffff($0, $316 - $29, $30 - $319 - $31, $316 / $28, $319 / $30, $325 - $29, $30 - $328 - $31, $325 / $28, $328 / $30, $334 - $29, $30 - $337 - $31, $334 / $28, $337 / $30);
      }
      $$0381546 = $$0381546 + 3 | 0;
      $$in604 = HEAP32[$301 >> 2] | 0;
     } while ($$0381546 >>> 0 < (HEAP32[$302 >> 2] | 0) - $$in604 >> 2 >>> 0);
    }
    __ZN10DelaunatorD2Ev($15);
    __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($14);
    __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($13);
    break;
   }
  default:
   label = 21;
  } while (0);
  if ((label | 0) == 21) {
   $$sroa$0429$0544 = HEAP32[$40 >> 2] | 0;
   $115 = $$sroa$0429$0544;
   if (($9 | 0) != ($115 | 0)) {
    $$sroa$0429$0545 = $$sroa$0429$0544;
    $177 = $115;
    do {
     __ZN8TPPLPolyC2ERKS_($tmpcast385$byval_copy, $$sroa$0429$0545 + 8 | 0);
     $122 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 0) | 0) >> 3] - $29;
     $128 = $30 - +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 0) | 0) + 8 >> 3] - $31;
     $132 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 1) | 0) >> 3] - $29;
     $138 = $30 - +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 1) | 0) + 8 >> 3] - $31;
     $142 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 2) | 0) >> 3] - $29;
     $148 = $30 - +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 2) | 0) + 8 >> 3] - $31;
     $152 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 0) | 0) >> 3] / $28;
     $157 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 0) | 0) + 8 >> 3] / $30;
     $161 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 1) | 0) >> 3] / $28;
     $166 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 1) | 0) + 8 >> 3] / $30;
     $170 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 2) | 0) >> 3] / $28;
     __ZN6DrMesh8triangleEffffffffffff($0, $122, $128, $152, $157, $142, $148, $170, +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast385$byval_copy, 2) | 0) + 8 >> 3] / $30, $132, $138, $161, $166);
     __ZN8TPPLPolyD2Ev($tmpcast385$byval_copy);
     $$sroa$0429$0545 = HEAP32[$177 + 4 >> 2] | 0;
     $177 = $$sroa$0429$0545;
    } while (($9 | 0) != ($177 | 0));
   }
  }
  __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($12);
  __ZN8TPPLPolyD2Ev($10);
  __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($9);
  __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($8);
 }
 STACKTOP = sp;
 return;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1530621 = 0, $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0, $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0, $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $123 = 0, $126 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $139 = 0, $141 = 0, $142 = 0, $145 = 0, $147 = 0, $15 = 0.0, $151 = 0, $154 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $188 = 0, $202 = 0, $203 = 0, $206 = 0, $211 = 0, $212 = 0, $214 = 0, $222 = 0, $223 = 0, $225 = 0, $227 = 0, $229 = 0, $231 = 0, $232 = 0, $234 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $25 = 0, $251 = 0, $253 = 0, $255 = 0, $257 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $270 = 0, $273 = 0, $286 = 0, $291 = 0, $30 = 0, $300 = 0, $301 = 0, $305 = 0, $308 = 0, $310 = 0, $312 = 0, $316 = 0, $319 = 0, $320 = 0, $324 = 0, $334 = 0, $339 = 0, $34 = 0, $342 = 0, $343 = 0, $344 = 0, $346 = 0, $351 = 0, $364 = 0, $368 = 0, $373 = 0, $38 = 0.0, $382 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $389 = 0, $39 = 0, $393 = 0, $395 = 0, $398 = 0, $401 = 0, $412 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $6 = 0, $63 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540723 = 0, $spec$select541 = 0, $spec$select544 = 0.0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select567 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 536 | 0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540 | 0;
 HEAP32[$7 >> 2] = 0;
 $11 = $10 + 12 | 0;
 $12 = ___DOUBLE_BITS_662($1) | 0;
 $13 = getTempRet0() | 0;
 if (($13 | 0) < 0) {
  $15 = -$1;
  $16 = ___DOUBLE_BITS_662($15) | 0;
  $$0471 = $15;
  $$0522 = 1;
  $$0523 = 47016;
  $25 = getTempRet0() | 0;
  $412 = $16;
 } else {
  $$0471 = $1;
  $$0522 = ($4 & 2049 | 0) != 0 & 1;
  $$0523 = ($4 & 2048 | 0) == 0 ? (($4 & 1 | 0) == 0 ? 47017 : 47022) : 47019;
  $25 = $13;
  $412 = $12;
 }
 do if (0 == 0 & ($25 & 2146435072 | 0) == 2146435072) {
  $30 = ($5 & 32 | 0) != 0;
  $34 = $$0522 + 3 | 0;
  _pad_659($0, 32, $2, $34, $4 & -65537);
  _out_653($0, $$0523, $$0522);
  _out_653($0, $$0471 != $$0471 | 0.0 != 0.0 ? ($30 ? 47043 : 47047) : $30 ? 47035 : 47039, 3);
  _pad_659($0, 32, $2, $34, $4 ^ 8192);
  $$sink757 = $34;
 } else {
  $38 = +_frexp($$0471, $7) * 2.0;
  $39 = $38 != 0.0;
  if ($39) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  $42 = $5 | 32;
  if (($42 | 0) == 97) {
   $44 = $5 & 32;
   $spec$select = ($44 | 0) == 0 ? $$0523 : $$0523 + 9 | 0;
   $47 = $$0522 | 2;
   $49 = 12 - $3 | 0;
   do if ($3 >>> 0 > 11 | ($49 | 0) == 0) $$1472 = $38; else {
    $$0511586 = 8.0;
    $$1510587 = $49;
    do {
     $$1510587 = $$1510587 + -1 | 0;
     $$0511586 = $$0511586 * 16.0;
    } while (($$1510587 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $$1472 = -($$0511586 + (-$38 - $$0511586));
     break;
    } else {
     $$1472 = $38 + $$0511586 - $$0511586;
     break;
    }
   } while (0);
   $63 = HEAP32[$7 >> 2] | 0;
   $66 = ($63 | 0) < 0 ? 0 - $63 | 0 : $63;
   $69 = _fmt_u($66, (($66 | 0) < 0) << 31 >> 31, $11) | 0;
   if (($69 | 0) == ($11 | 0)) {
    $71 = $10 + 11 | 0;
    HEAP8[$71 >> 0] = 48;
    $$0513 = $71;
   } else $$0513 = $69;
   HEAP8[$$0513 + -1 >> 0] = ($63 >> 31 & 2) + 43;
   $79 = $$0513 + -2 | 0;
   HEAP8[$79 >> 0] = $5 + 15;
   $80 = ($3 | 0) < 1;
   $82 = ($4 & 8 | 0) == 0;
   $$0525 = $8;
   $$2473 = $$1472;
   while (1) {
    $83 = ~~$$2473;
    $89 = $$0525 + 1 | 0;
    HEAP8[$$0525 >> 0] = $44 | HEAPU8[10640 + $83 >> 0];
    $$2473 = ($$2473 - +($83 | 0)) * 16.0;
    if (($89 - $9 | 0) == 1) if ($82 & ($80 & $$2473 == 0.0)) $$1526 = $89; else {
     HEAP8[$89 >> 0] = 46;
     $$1526 = $$0525 + 2 | 0;
    } else $$1526 = $89;
    if (!($$2473 != 0.0)) break; else $$0525 = $$1526;
   }
   $$pre720 = $$1526;
   if (!$3) label = 25; else if ((-2 - $9 + $$pre720 | 0) < ($3 | 0)) {
    $103 = $11;
    $104 = $79;
    $$0527 = $3 + 2 + $103 - $104 | 0;
    $$pre$phi717Z2D = $103;
    $$pre$phi718Z2D = $104;
   } else label = 25;
   if ((label | 0) == 25) {
    $108 = $11;
    $109 = $79;
    $$0527 = $108 - $9 - $109 + $$pre720 | 0;
    $$pre$phi717Z2D = $108;
    $$pre$phi718Z2D = $109;
   }
   $113 = $$0527 + $47 | 0;
   _pad_659($0, 32, $2, $113, $4);
   _out_653($0, $spec$select, $47);
   _pad_659($0, 48, $2, $113, $4 ^ 65536);
   $115 = $$pre720 - $9 | 0;
   _out_653($0, $8, $115);
   $116 = $$pre$phi717Z2D - $$pre$phi718Z2D | 0;
   _pad_659($0, 48, $$0527 - ($115 + $116) | 0, 0, 0);
   _out_653($0, $79, $116);
   _pad_659($0, 32, $2, $113, $4 ^ 8192);
   $$sink757 = $113;
   break;
  }
  $spec$select539 = ($3 | 0) < 0 ? 6 : $3;
  if ($39) {
   $123 = (HEAP32[$7 >> 2] | 0) + -28 | 0;
   HEAP32[$7 >> 2] = $123;
   $$3 = $38 * 268435456.0;
   $$pr = $123;
  } else {
   $$3 = $38;
   $$pr = HEAP32[$7 >> 2] | 0;
  }
  $$0498 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0;
  $$1499 = $$0498;
  $$4 = $$3;
  do {
   $126 = ~~$$4 >>> 0;
   HEAP32[$$1499 >> 2] = $126;
   $$1499 = $$1499 + 4 | 0;
   $$4 = ($$4 - +($126 >>> 0)) * 1.0e9;
  } while ($$4 != 0.0);
  $132 = $$0498;
  if (($$pr | 0) > 0) {
   $$1482683 = $$0498;
   $$2500682 = $$1499;
   $135 = $$pr;
   while (1) {
    $136 = ($135 | 0) < 29 ? $135 : 29;
    $$0488669 = $$2500682 + -4 | 0;
    if ($$0488669 >>> 0 < $$1482683 >>> 0) $$2483 = $$1482683; else {
     $$0488671 = $$0488669;
     $$0497670 = 0;
     do {
      $139 = _bitshift64Shl(HEAP32[$$0488671 >> 2] | 0, 0, $136 | 0) | 0;
      $141 = _i64Add($139 | 0, getTempRet0() | 0, $$0497670 | 0, 0) | 0;
      $142 = getTempRet0() | 0;
      $$0497670 = ___udivdi3($141 | 0, $142 | 0, 1e9, 0) | 0;
      $145 = ___muldi3($$0497670 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $147 = _i64Subtract($141 | 0, $142 | 0, $145 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[$$0488671 >> 2] = $147;
      $$0488671 = $$0488671 + -4 | 0;
     } while ($$0488671 >>> 0 >= $$1482683 >>> 0);
     if (!$$0497670) $$2483 = $$1482683; else {
      $151 = $$1482683 + -4 | 0;
      HEAP32[$151 >> 2] = $$0497670;
      $$2483 = $151;
     }
    }
    L57 : do if ($$2500682 >>> 0 > $$2483 >>> 0) {
     $$3501676 = $$2500682;
     while (1) {
      $154 = $$3501676 + -4 | 0;
      if (HEAP32[$154 >> 2] | 0) {
       $$3501$lcssa = $$3501676;
       break L57;
      }
      if ($154 >>> 0 > $$2483 >>> 0) $$3501676 = $154; else {
       $$3501$lcssa = $154;
       break;
      }
     }
    } else $$3501$lcssa = $$2500682; while (0);
    $158 = (HEAP32[$7 >> 2] | 0) - $136 | 0;
    HEAP32[$7 >> 2] = $158;
    if (($158 | 0) > 0) {
     $$1482683 = $$2483;
     $$2500682 = $$3501$lcssa;
     $135 = $158;
    } else {
     $$1482$lcssa = $$2483;
     $$2500$lcssa = $$3501$lcssa;
     $$pr564 = $158;
     break;
    }
   }
  } else {
   $$1482$lcssa = $$0498;
   $$2500$lcssa = $$1499;
   $$pr564 = $$pr;
  }
  if (($$pr564 | 0) < 0) {
   $163 = (($spec$select539 + 25 | 0) / 9 | 0) + 1 | 0;
   $164 = ($42 | 0) == 102;
   $$3484663 = $$1482$lcssa;
   $$4502662 = $$2500$lcssa;
   $166 = $$pr564;
   while (1) {
    $165 = 0 - $166 | 0;
    $168 = ($165 | 0) < 9 ? $165 : 9;
    if ($$3484663 >>> 0 < $$4502662 >>> 0) {
     $174 = (1 << $168) + -1 | 0;
     $175 = 1e9 >>> $168;
     $$0487657 = 0;
     $$1489656 = $$3484663;
     do {
      $176 = HEAP32[$$1489656 >> 2] | 0;
      HEAP32[$$1489656 >> 2] = ($176 >>> $168) + $$0487657;
      $$0487657 = Math_imul($176 & $174, $175) | 0;
      $$1489656 = $$1489656 + 4 | 0;
     } while ($$1489656 >>> 0 < $$4502662 >>> 0);
     $spec$select540 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
     if (!$$0487657) {
      $$5503 = $$4502662;
      $spec$select540723 = $spec$select540;
     } else {
      HEAP32[$$4502662 >> 2] = $$0487657;
      $$5503 = $$4502662 + 4 | 0;
      $spec$select540723 = $spec$select540;
     }
    } else {
     $$5503 = $$4502662;
     $spec$select540723 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
    }
    $188 = $164 ? $$0498 : $spec$select540723;
    $spec$select541 = ($$5503 - $188 >> 2 | 0) > ($163 | 0) ? $188 + ($163 << 2) | 0 : $$5503;
    $166 = (HEAP32[$7 >> 2] | 0) + $168 | 0;
    HEAP32[$7 >> 2] = $166;
    if (($166 | 0) >= 0) {
     $$3484$lcssa = $spec$select540723;
     $$4502$lcssa = $spec$select541;
     break;
    } else {
     $$3484663 = $spec$select540723;
     $$4502662 = $spec$select541;
    }
   }
  } else {
   $$3484$lcssa = $$1482$lcssa;
   $$4502$lcssa = $$2500$lcssa;
  }
  if ($$3484$lcssa >>> 0 < $$4502$lcssa >>> 0) {
   $202 = ($132 - $$3484$lcssa >> 2) * 9 | 0;
   $203 = HEAP32[$$3484$lcssa >> 2] | 0;
   if ($203 >>> 0 < 10) $$1517 = $202; else {
    $$0516652 = $202;
    $$0532651 = 10;
    while (1) {
     $$0532651 = $$0532651 * 10 | 0;
     $206 = $$0516652 + 1 | 0;
     if ($203 >>> 0 < $$0532651 >>> 0) {
      $$1517 = $206;
      break;
     } else $$0516652 = $206;
    }
   }
  } else $$1517 = 0;
  $211 = ($42 | 0) == 103;
  $212 = ($spec$select539 | 0) != 0;
  $214 = $spec$select539 - (($42 | 0) == 102 ? 0 : $$1517) + (($212 & $211) << 31 >> 31) | 0;
  if (($214 | 0) < ((($$4502$lcssa - $132 >> 2) * 9 | 0) + -9 | 0)) {
   $222 = $214 + 9216 | 0;
   $223 = ($222 | 0) / 9 | 0;
   $225 = $$0498 + 4 + ($223 + -1024 << 2) | 0;
   $227 = $222 - ($223 * 9 | 0) | 0;
   if (($227 | 0) < 8) {
    $$0529$in646 = $227;
    $$1533645 = 10;
    while (1) {
     $229 = $$1533645 * 10 | 0;
     if (($$0529$in646 | 0) < 7) {
      $$0529$in646 = $$0529$in646 + 1 | 0;
      $$1533645 = $229;
     } else {
      $$1533$lcssa = $229;
      break;
     }
    }
   } else $$1533$lcssa = 10;
   $231 = HEAP32[$225 >> 2] | 0;
   $232 = ($231 >>> 0) / ($$1533$lcssa >>> 0) | 0;
   $234 = $231 - (Math_imul($232, $$1533$lcssa) | 0) | 0;
   $237 = ($225 + 4 | 0) == ($$4502$lcssa | 0);
   if ($237 & ($234 | 0) == 0) {
    $$4492 = $225;
    $$4520 = $$1517;
    $$8 = $$3484$lcssa;
   } else {
    $spec$select544 = ($232 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $240 = $$1533$lcssa >>> 1;
    $spec$select567 = $234 >>> 0 < $240 >>> 0 ? .5 : $237 & ($234 | 0) == ($240 | 0) ? 1.0 : 1.5;
    if (!$$0522) {
     $$1467 = $spec$select567;
     $$1469 = $spec$select544;
    } else {
     $245 = (HEAP8[$$0523 >> 0] | 0) == 45;
     $$1467 = $245 ? -$spec$select567 : $spec$select567;
     $$1469 = $245 ? -$spec$select544 : $spec$select544;
    }
    $248 = $231 - $234 | 0;
    HEAP32[$225 >> 2] = $248;
    if ($$1469 + $$1467 != $$1469) {
     $251 = $248 + $$1533$lcssa | 0;
     HEAP32[$225 >> 2] = $251;
     if ($251 >>> 0 > 999999999) {
      $$2490638 = $225;
      $$5486639 = $$3484$lcssa;
      while (1) {
       $253 = $$2490638 + -4 | 0;
       HEAP32[$$2490638 >> 2] = 0;
       if ($253 >>> 0 < $$5486639 >>> 0) {
        $255 = $$5486639 + -4 | 0;
        HEAP32[$255 >> 2] = 0;
        $$6 = $255;
       } else $$6 = $$5486639;
       $257 = (HEAP32[$253 >> 2] | 0) + 1 | 0;
       HEAP32[$253 >> 2] = $257;
       if ($257 >>> 0 > 999999999) {
        $$2490638 = $253;
        $$5486639 = $$6;
       } else {
        $$2490$lcssa = $253;
        $$5486$lcssa = $$6;
        break;
       }
      }
     } else {
      $$2490$lcssa = $225;
      $$5486$lcssa = $$3484$lcssa;
     }
     $262 = ($132 - $$5486$lcssa >> 2) * 9 | 0;
     $263 = HEAP32[$$5486$lcssa >> 2] | 0;
     if ($263 >>> 0 < 10) {
      $$4492 = $$2490$lcssa;
      $$4520 = $262;
      $$8 = $$5486$lcssa;
     } else {
      $$2518634 = $262;
      $$2534633 = 10;
      while (1) {
       $$2534633 = $$2534633 * 10 | 0;
       $266 = $$2518634 + 1 | 0;
       if ($263 >>> 0 < $$2534633 >>> 0) {
        $$4492 = $$2490$lcssa;
        $$4520 = $266;
        $$8 = $$5486$lcssa;
        break;
       } else $$2518634 = $266;
      }
     }
    } else {
     $$4492 = $225;
     $$4520 = $$1517;
     $$8 = $$3484$lcssa;
    }
   }
   $268 = $$4492 + 4 | 0;
   $$5521 = $$4520;
   $$8506 = $$4502$lcssa >>> 0 > $268 >>> 0 ? $268 : $$4502$lcssa;
   $$9 = $$8;
  } else {
   $$5521 = $$1517;
   $$8506 = $$4502$lcssa;
   $$9 = $$3484$lcssa;
  }
  $270 = 0 - $$5521 | 0;
  L109 : do if ($$8506 >>> 0 > $$9 >>> 0) {
   $$9507625 = $$8506;
   while (1) {
    $273 = $$9507625 + -4 | 0;
    if (HEAP32[$273 >> 2] | 0) {
     $$9507$lcssa = $$9507625;
     $$lcssa583 = 1;
     break L109;
    }
    if ($273 >>> 0 > $$9 >>> 0) $$9507625 = $273; else {
     $$9507$lcssa = $273;
     $$lcssa583 = 0;
     break;
    }
   }
  } else {
   $$9507$lcssa = $$8506;
   $$lcssa583 = 0;
  } while (0);
  do if ($211) {
   $spec$select548 = $spec$select539 + (($212 ^ 1) & 1) | 0;
   if (($spec$select548 | 0) > ($$5521 | 0) & ($$5521 | 0) > -5) {
    $$0479 = $5 + -1 | 0;
    $$2476 = $spec$select548 + -1 - $$5521 | 0;
   } else {
    $$0479 = $5 + -2 | 0;
    $$2476 = $spec$select548 + -1 | 0;
   }
   if (!($4 & 8)) {
    if ($$lcssa583) {
     $286 = HEAP32[$$9507$lcssa + -4 >> 2] | 0;
     if (!$286) $$2531 = 9; else if (!(($286 >>> 0) % 10 | 0)) {
      $$1530621 = 0;
      $$3535620 = 10;
      while (1) {
       $$3535620 = $$3535620 * 10 | 0;
       $291 = $$1530621 + 1 | 0;
       if (($286 >>> 0) % ($$3535620 >>> 0) | 0 | 0) {
        $$2531 = $291;
        break;
       } else $$1530621 = $291;
      }
     } else $$2531 = 0;
    } else $$2531 = 9;
    $300 = (($$9507$lcssa - $132 >> 2) * 9 | 0) + -9 | 0;
    if (($$0479 | 32 | 0) == 102) {
     $301 = $300 - $$2531 | 0;
     $spec$select549 = ($301 | 0) > 0 ? $301 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select549 | 0) ? $$2476 : $spec$select549;
     break;
    } else {
     $305 = $300 + $$5521 - $$2531 | 0;
     $spec$select551 = ($305 | 0) > 0 ? $305 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select551 | 0) ? $$2476 : $spec$select551;
     break;
    }
   } else {
    $$1480 = $$0479;
    $$3477 = $$2476;
   }
  } else {
   $$1480 = $5;
   $$3477 = $spec$select539;
  } while (0);
  $308 = ($$3477 | 0) != 0;
  $310 = $308 ? 1 : $4 >>> 3 & 1;
  $312 = ($$1480 | 32 | 0) == 102;
  if ($312) {
   $$2515 = 0;
   $$pn = ($$5521 | 0) > 0 ? $$5521 : 0;
  } else {
   $316 = ($$5521 | 0) < 0 ? $270 : $$5521;
   $319 = _fmt_u($316, (($316 | 0) < 0) << 31 >> 31, $11) | 0;
   $320 = $11;
   if (($320 - $319 | 0) < 2) {
    $$1514614 = $319;
    while (1) {
     $324 = $$1514614 + -1 | 0;
     HEAP8[$324 >> 0] = 48;
     if (($320 - $324 | 0) < 2) $$1514614 = $324; else {
      $$1514$lcssa = $324;
      break;
     }
    }
   } else $$1514$lcssa = $319;
   HEAP8[$$1514$lcssa + -1 >> 0] = ($$5521 >> 31 & 2) + 43;
   $334 = $$1514$lcssa + -2 | 0;
   HEAP8[$334 >> 0] = $$1480;
   $$2515 = $334;
   $$pn = $320 - $334 | 0;
  }
  $339 = $$0522 + 1 + $$3477 + $310 + $$pn | 0;
  _pad_659($0, 32, $2, $339, $4);
  _out_653($0, $$0523, $$0522);
  _pad_659($0, 48, $2, $339, $4 ^ 65536);
  if ($312) {
   $spec$select554 = $$9 >>> 0 > $$0498 >>> 0 ? $$0498 : $$9;
   $342 = $8 + 9 | 0;
   $343 = $342;
   $344 = $8 + 8 | 0;
   $$5493603 = $spec$select554;
   do {
    $346 = _fmt_u(HEAP32[$$5493603 >> 2] | 0, 0, $342) | 0;
    if (($$5493603 | 0) == ($spec$select554 | 0)) if (($346 | 0) == ($342 | 0)) {
     HEAP8[$344 >> 0] = 48;
     $$1465 = $344;
    } else $$1465 = $346; else if ($346 >>> 0 > $8 >>> 0) {
     _memset($8 | 0, 48, $346 - $9 | 0) | 0;
     $$0464599 = $346;
     while (1) {
      $351 = $$0464599 + -1 | 0;
      if ($351 >>> 0 > $8 >>> 0) $$0464599 = $351; else {
       $$1465 = $351;
       break;
      }
     }
    } else $$1465 = $346;
    _out_653($0, $$1465, $343 - $$1465 | 0);
    $$5493603 = $$5493603 + 4 | 0;
   } while ($$5493603 >>> 0 <= $$0498 >>> 0);
   if (!(($4 & 8 | 0) == 0 & ($308 ^ 1))) _out_653($0, 48168, 1);
   if ($$5493603 >>> 0 < $$9507$lcssa >>> 0 & ($$3477 | 0) > 0) {
    $$4478594 = $$3477;
    $$6494593 = $$5493603;
    while (1) {
     $364 = _fmt_u(HEAP32[$$6494593 >> 2] | 0, 0, $342) | 0;
     if ($364 >>> 0 > $8 >>> 0) {
      _memset($8 | 0, 48, $364 - $9 | 0) | 0;
      $$0463588 = $364;
      while (1) {
       $368 = $$0463588 + -1 | 0;
       if ($368 >>> 0 > $8 >>> 0) $$0463588 = $368; else {
        $$0463$lcssa = $368;
        break;
       }
      }
     } else $$0463$lcssa = $364;
     _out_653($0, $$0463$lcssa, ($$4478594 | 0) < 9 ? $$4478594 : 9);
     $$6494593 = $$6494593 + 4 | 0;
     $373 = $$4478594 + -9 | 0;
     if (!($$6494593 >>> 0 < $$9507$lcssa >>> 0 & ($$4478594 | 0) > 9)) {
      $$4478$lcssa = $373;
      break;
     } else $$4478594 = $373;
    }
   } else $$4478$lcssa = $$3477;
   _pad_659($0, 48, $$4478$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select557 = $$lcssa583 ? $$9507$lcssa : $$9 + 4 | 0;
   if ($$9 >>> 0 < $spec$select557 >>> 0 & ($$3477 | 0) > -1) {
    $382 = $8 + 9 | 0;
    $384 = ($4 & 8 | 0) == 0;
    $385 = $382;
    $386 = 0 - $9 | 0;
    $387 = $8 + 8 | 0;
    $$5609 = $$3477;
    $$7495608 = $$9;
    while (1) {
     $389 = _fmt_u(HEAP32[$$7495608 >> 2] | 0, 0, $382) | 0;
     if (($389 | 0) == ($382 | 0)) {
      HEAP8[$387 >> 0] = 48;
      $$0 = $387;
     } else $$0 = $389;
     do if (($$7495608 | 0) == ($$9 | 0)) {
      $395 = $$0 + 1 | 0;
      _out_653($0, $$0, 1);
      if ($384 & ($$5609 | 0) < 1) {
       $$2 = $395;
       break;
      }
      _out_653($0, 48168, 1);
      $$2 = $395;
     } else {
      if ($$0 >>> 0 <= $8 >>> 0) {
       $$2 = $$0;
       break;
      }
      _memset($8 | 0, 48, $$0 + $386 | 0) | 0;
      $$1604 = $$0;
      while (1) {
       $393 = $$1604 + -1 | 0;
       if ($393 >>> 0 > $8 >>> 0) $$1604 = $393; else {
        $$2 = $393;
        break;
       }
      }
     } while (0);
     $398 = $385 - $$2 | 0;
     _out_653($0, $$2, ($$5609 | 0) > ($398 | 0) ? $398 : $$5609);
     $401 = $$5609 - $398 | 0;
     $$7495608 = $$7495608 + 4 | 0;
     if (!($$7495608 >>> 0 < $spec$select557 >>> 0 & ($401 | 0) > -1)) {
      $$5$lcssa = $401;
      break;
     } else $$5609 = $401;
    }
   } else $$5$lcssa = $$3477;
   _pad_659($0, 48, $$5$lcssa + 18 | 0, 18, 0);
   _out_653($0, $$2515, $11 - $$2515 | 0);
  }
  _pad_659($0, 32, $2, $339, $4 ^ 8192);
  $$sink757 = $339;
 } while (0);
 STACKTOP = sp;
 return (($$sink757 | 0) < ($2 | 0) ? $2 : $$sink757) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i184 = 0, $$0$i$i$add$i188 = 0, $$0$i$i$add$i199 = 0, $$0$i$i$add$i210 = 0, $$0$i$i$add$i220 = 0, $$0$i$i$add$i231 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i183 = 0, $$0$i$i$idx$i187 = 0, $$0$i$i$idx$i198 = 0, $$0$i$i$idx$i209 = 0, $$0$i$i$idx$i219 = 0, $$0$i$i$idx$i230 = 0, $$0151$off0$ph = 0, $$0157 = 0, $$1158 = 0, $$2159 = 0, $$2159$be = 0, $$2159$ph = 0, $$2159$ph$be = 0, $$4166 = 0, $$sink = 0, $$sroa$0$0$$sroa_idx$i215 = 0, $101 = 0, $102 = 0, $105 = 0, $106 = 0, $11 = 0, $114 = 0, $119 = 0, $122 = 0, $124 = 0, $13 = 0, $130 = 0, $133 = 0, $134 = 0, $141 = 0, $142 = 0, $145 = 0, $146 = 0, $154 = 0, $157 = 0, $16 = 0, $162 = 0, $165 = 0, $167 = 0, $17 = 0, $173 = 0, $176 = 0, $177 = 0, $184 = 0, $185 = 0, $188 = 0, $189 = 0, $197 = 0, $202 = 0, $206 = 0, $207 = 0, $214 = 0, $215 = 0, $218 = 0, $219 = 0, $227 = 0, $229 = 0, $234 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $256 = 0, $257 = 0, $260 = 0, $261 = 0, $269 = 0, $274 = 0, $3 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $70 = 0, $74 = 0, $79 = 0, $82 = 0, $84 = 0, $90 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$4166 = $0; else if ((HEAP8[$0 >> 0] | 0) == 78) {
  $11 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0 + 1 | 0, $1, $3) | 0;
  L4 : do if (($11 | 0) != ($1 | 0)) {
   $13 = $2 + 52 | 0;
   HEAP32[$13 >> 2] = 0;
   switch (HEAP8[$11 >> 0] | 0) {
   case 82:
    {
     $$sink = 1;
     label = 6;
     break;
    }
   case 79:
    {
     $$sink = 2;
     label = 6;
     break;
    }
   default:
    $$0157 = $11;
   }
   if ((label | 0) == 6) {
    HEAP32[$13 >> 2] = $$sink;
    $$0157 = $11 + 1 | 0;
   }
   $16 = $2 + 4 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if ($17 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    HEAP32[$17 >> 2] = 0;
    HEAP32[$17 + 4 >> 2] = 0;
    HEAP32[$17 + 8 >> 2] = 0;
    HEAP32[$17 + 12 >> 2] = 0;
    HEAP32[$17 + 16 >> 2] = 0;
    HEAP32[$17 + 20 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($17);
    HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
   if (($1 - $$0157 | 0) > 1) if ((HEAP8[$$0157 >> 0] | 0) == 83) if ((HEAP8[$$0157 + 1 >> 0] | 0) == 116) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc((HEAP32[$16 >> 2] | 0) + -24 | 0, 49255);
    $$1158 = $$0157 + 2 | 0;
   } else $$1158 = $$0157; else $$1158 = $$0157; else $$1158 = $$0157;
   if (($$1158 | 0) == ($1 | 0)) {
    $36 = HEAP32[$16 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$16 >> 2] = $36 + -24;
    break;
   }
   $39 = $4 + 11 | 0;
   $40 = $4 + 4 | 0;
   $$sroa$0$0$$sroa_idx$i215 = $2 + 12 | 0;
   $41 = $2 + 20 | 0;
   $42 = $2 + 24 | 0;
   $43 = $5 + 11 | 0;
   $44 = $5 + 4 | 0;
   $45 = $5 + 11 | 0;
   $46 = $5 + 4 | 0;
   $47 = $5 + 12 | 0;
   $48 = $5 + 4 | 0;
   $49 = $5 + 8 | 0;
   $50 = $2 + 16 | 0;
   $51 = $5 + 12 | 0;
   $52 = $5 + 4 | 0;
   $53 = $5 + 8 | 0;
   $54 = $5 + 11 | 0;
   $55 = $5 + 4 | 0;
   $56 = $5 + 12 | 0;
   $57 = $5 + 4 | 0;
   $58 = $5 + 8 | 0;
   $59 = $5 + 11 | 0;
   $60 = $5 + 4 | 0;
   $61 = $5 + 12 | 0;
   $62 = $5 + 4 | 0;
   $63 = $5 + 8 | 0;
   $64 = $5 + 12 | 0;
   $65 = $5 + 4 | 0;
   $66 = $5 + 8 | 0;
   $$0151$off0$ph = 0;
   $$2159$ph = $$1158;
   L27 : while (1) {
    $$2159 = $$2159$ph;
    L29 : while (1) {
     $67 = HEAP8[$$2159 >> 0] | 0;
     if ($67 << 24 >> 24 == 69) break L27;
     switch ($67 << 24 >> 24 | 0) {
     case 83:
      {
       label = 23;
       break L29;
       break;
      }
     case 84:
      {
       label = 39;
       break L29;
       break;
      }
     case 68:
      {
       label = 53;
       break L29;
       break;
      }
     case 73:
      {
       $197 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
       if (($197 | 0) == ($$2159 | 0) | ($197 | 0) == ($1 | 0)) break L4;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
       $202 = HEAP32[$16 >> 2] | 0;
       $$0$i$i$idx$i209 = 0;
       while (1) {
        if (($$0$i$i$idx$i209 | 0) == -1) break;
        $$0$i$i$add$i210 = $$0$i$i$idx$i209 + -1 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($202 + ($$0$i$i$add$i210 * 24 | 0) | 0);
        $$0$i$i$idx$i209 = $$0$i$i$add$i210;
       }
       HEAP32[$16 >> 2] = $202 + -24;
       $206 = HEAP8[$39 >> 0] | 0;
       $207 = $206 << 24 >> 24 < 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($202 + -48 | 0, $207 ? HEAP32[$4 >> 2] | 0 : $4, $207 ? HEAP32[$40 >> 2] | 0 : $206 & 255) | 0;
       $214 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
       HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($5, $214, $6);
       $215 = HEAP32[$41 >> 2] | 0;
       if ($215 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
        HEAP32[$215 >> 2] = 0;
        $218 = $215 + 4 | 0;
        HEAP32[$218 >> 2] = 0;
        $219 = $215 + 8 | 0;
        HEAP32[$219 >> 2] = 0;
        HEAP32[$215 + 12 >> 2] = HEAP32[$47 >> 2];
        HEAP32[$215 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$218 >> 2] = HEAP32[$48 >> 2];
        HEAP32[$219 >> 2] = HEAP32[$49 >> 2];
        HEAP32[$49 >> 2] = 0;
        HEAP32[$48 >> 2] = 0;
        HEAP32[$5 >> 2] = 0;
        HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       $$2159$be = $197;
       break;
      }
     case 76:
      {
       $227 = $$2159 + 1 | 0;
       if (($227 | 0) == ($1 | 0)) break L4; else $$2159$be = $227;
       break;
      }
     default:
      {
       label = 79;
       break L29;
      }
     }
     $$2159 = $$2159$be;
    }
    L45 : do if ((label | 0) == 23) {
     label = 0;
     $70 = $$2159 + 1 | 0;
     if (($70 | 0) != ($1 | 0)) if ((HEAP8[$70 >> 0] | 0) == 116) {
      label = 79;
      break;
     }
     $74 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($74 | 0) == ($$2159 | 0) | ($74 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $79 = HEAP32[$16 >> 2] | 0;
     $$0$i$i$idx$i183 = 0;
     while (1) {
      if (($$0$i$i$idx$i183 | 0) == -1) break;
      $$0$i$i$add$i184 = $$0$i$i$idx$i183 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($79 + ($$0$i$i$add$i184 * 24 | 0) | 0);
      $$0$i$i$idx$i183 = $$0$i$i$add$i184;
     }
     HEAP32[$16 >> 2] = $79 + -24;
     $82 = $79 + -48 | 0;
     $84 = HEAP8[$82 + 11 >> 0] | 0;
     if ($84 << 24 >> 24 < 0) $90 = HEAP32[$79 + -44 >> 2] | 0; else $90 = $84 & 255;
     if (!$90) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($82, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 47951, $4);
      $93 = HEAP8[$54 >> 0] | 0;
      $94 = $93 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$16 >> 2] | 0) + -24 | 0, $94 ? HEAP32[$5 >> 2] | 0 : $5, $94 ? HEAP32[$55 >> 2] | 0 : $93 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $101 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
      HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($5, $101, $6);
      $102 = HEAP32[$41 >> 2] | 0;
      if ($102 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
       HEAP32[$102 >> 2] = 0;
       $105 = $102 + 4 | 0;
       HEAP32[$105 >> 2] = 0;
       $106 = $102 + 8 | 0;
       HEAP32[$106 >> 2] = 0;
       HEAP32[$102 + 12 >> 2] = HEAP32[$64 >> 2];
       HEAP32[$102 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$105 >> 2] = HEAP32[$65 >> 2];
       HEAP32[$106 >> 2] = HEAP32[$66 >> 2];
       HEAP32[$66 >> 2] = 0;
       HEAP32[$65 >> 2] = 0;
       HEAP32[$5 >> 2] = 0;
       HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($5);
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$2159$ph$be = $74;
    } else if ((label | 0) == 39) {
     label = 0;
     $114 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($114 | 0) == ($$2159 | 0) | ($114 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $119 = HEAP32[$16 >> 2] | 0;
     $$0$i$i$idx$i187 = 0;
     while (1) {
      if (($$0$i$i$idx$i187 | 0) == -1) break;
      $$0$i$i$add$i188 = $$0$i$i$idx$i187 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($119 + ($$0$i$i$add$i188 * 24 | 0) | 0);
      $$0$i$i$idx$i187 = $$0$i$i$add$i188;
     }
     HEAP32[$16 >> 2] = $119 + -24;
     $122 = $119 + -48 | 0;
     $124 = HEAP8[$122 + 11 >> 0] | 0;
     if ($124 << 24 >> 24 < 0) $130 = HEAP32[$119 + -44 >> 2] | 0; else $130 = $124 & 255;
     if (!$130) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($122, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 47951, $4);
      $133 = HEAP8[$45 >> 0] | 0;
      $134 = $133 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$16 >> 2] | 0) + -24 | 0, $134 ? HEAP32[$5 >> 2] | 0 : $5, $134 ? HEAP32[$46 >> 2] | 0 : $133 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $141 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($5, $141, $6);
     $142 = HEAP32[$41 >> 2] | 0;
     if ($142 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
      HEAP32[$142 >> 2] = 0;
      $145 = $142 + 4 | 0;
      HEAP32[$145 >> 2] = 0;
      $146 = $142 + 8 | 0;
      HEAP32[$146 >> 2] = 0;
      HEAP32[$142 + 12 >> 2] = HEAP32[$56 >> 2];
      HEAP32[$142 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$145 >> 2] = HEAP32[$57 >> 2];
      HEAP32[$146 >> 2] = HEAP32[$58 >> 2];
      HEAP32[$58 >> 2] = 0;
      HEAP32[$57 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$2159$ph$be = $114;
    } else if ((label | 0) == 53) {
     label = 0;
     $154 = $$2159 + 1 | 0;
     if (($154 | 0) != ($1 | 0)) switch (HEAP8[$154 >> 0] | 0) {
     case 84:
     case 116:
      break;
     default:
      {
       label = 79;
       break L45;
      }
     }
     $157 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($157 | 0) == ($$2159 | 0) | ($157 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $162 = HEAP32[$16 >> 2] | 0;
     $$0$i$i$idx$i198 = 0;
     while (1) {
      if (($$0$i$i$idx$i198 | 0) == -1) break;
      $$0$i$i$add$i199 = $$0$i$i$idx$i198 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($162 + ($$0$i$i$add$i199 * 24 | 0) | 0);
      $$0$i$i$idx$i198 = $$0$i$i$add$i199;
     }
     HEAP32[$16 >> 2] = $162 + -24;
     $165 = $162 + -48 | 0;
     $167 = HEAP8[$165 + 11 >> 0] | 0;
     if ($167 << 24 >> 24 < 0) $173 = HEAP32[$162 + -44 >> 2] | 0; else $173 = $167 & 255;
     if (!$173) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($165, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 47951, $4);
      $176 = HEAP8[$59 >> 0] | 0;
      $177 = $176 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$16 >> 2] | 0) + -24 | 0, $177 ? HEAP32[$5 >> 2] | 0 : $5, $177 ? HEAP32[$60 >> 2] | 0 : $176 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $184 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($5, $184, $6);
     $185 = HEAP32[$41 >> 2] | 0;
     if ($185 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
      HEAP32[$185 >> 2] = 0;
      $188 = $185 + 4 | 0;
      HEAP32[$188 >> 2] = 0;
      $189 = $185 + 8 | 0;
      HEAP32[$189 >> 2] = 0;
      HEAP32[$185 + 12 >> 2] = HEAP32[$61 >> 2];
      HEAP32[$185 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$188 >> 2] = HEAP32[$62 >> 2];
      HEAP32[$189 >> 2] = HEAP32[$63 >> 2];
      HEAP32[$63 >> 2] = 0;
      HEAP32[$62 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$2159$ph$be = $157;
    } while (0);
    if ((label | 0) == 79) {
     label = 0;
     $229 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$2159, $1, $2) | 0;
     if (($229 | 0) == ($$2159 | 0) | ($229 | 0) == ($1 | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$16 >> 2] | 0) + -24 | 0);
     $234 = HEAP32[$16 >> 2] | 0;
     $$0$i$i$idx$i219 = 0;
     while (1) {
      if (($$0$i$i$idx$i219 | 0) == -1) break;
      $$0$i$i$add$i220 = $$0$i$i$idx$i219 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($234 + ($$0$i$i$add$i220 * 24 | 0) | 0);
      $$0$i$i$idx$i219 = $$0$i$i$add$i220;
     }
     HEAP32[$16 >> 2] = $234 + -24;
     $237 = $234 + -48 | 0;
     $239 = HEAP8[$237 + 11 >> 0] | 0;
     if ($239 << 24 >> 24 < 0) $245 = HEAP32[$234 + -44 >> 2] | 0; else $245 = $239 & 255;
     if (!$245) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($237, $4); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 47951, $4);
      $248 = HEAP8[$43 >> 0] | 0;
      $249 = $248 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$16 >> 2] | 0) + -24 | 0, $249 ? HEAP32[$5 >> 2] | 0 : $5, $249 ? HEAP32[$44 >> 2] | 0 : $248 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     $256 = (HEAP32[$16 >> 2] | 0) + -24 | 0;
     HEAP32[$6 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i215 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($5, $256, $6);
     $257 = HEAP32[$41 >> 2] | 0;
     if ($257 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
      HEAP32[$257 >> 2] = 0;
      $260 = $257 + 4 | 0;
      HEAP32[$260 >> 2] = 0;
      $261 = $257 + 8 | 0;
      HEAP32[$261 >> 2] = 0;
      HEAP32[$257 + 12 >> 2] = HEAP32[$51 >> 2];
      HEAP32[$257 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$260 >> 2] = HEAP32[$52 >> 2];
      HEAP32[$261 >> 2] = HEAP32[$53 >> 2];
      HEAP32[$53 >> 2] = 0;
      HEAP32[$52 >> 2] = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($50, $5);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $$2159$ph$be = $229;
    }
    $$0151$off0$ph = 1;
    $$2159$ph = $$2159$ph$be;
   }
   $269 = $$2159 + 1 | 0;
   HEAP32[$2 + 48 >> 2] = HEAP32[$3 >> 2];
   if ($$0151$off0$ph) {
    $274 = HEAP32[$41 >> 2] | 0;
    if ((HEAP32[$2 + 16 >> 2] | 0) != ($274 | 0)) {
     $$0$i$i$idx$i230 = 0;
     while (1) {
      if (($$0$i$i$idx$i230 | 0) == -1) break;
      $$0$i$i$add$i231 = $$0$i$i$idx$i230 + -1 | 0;
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($274 + ($$0$i$i$add$i231 << 4) | 0);
      $$0$i$i$idx$i230 = $$0$i$i$add$i231;
     }
     HEAP32[$41 >> 2] = $274 + -16;
    }
   }
   $$4166 = $269;
   break L1;
  } while (0);
  $$4166 = $0;
 } else $$4166 = $0; while (0);
 STACKTOP = sp;
 return $$4166 | 0;
}

function _stbi__parse_png_file($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $195 = 0, $20 = 0, $201 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $243 = 0, $25 = 0, $26 = 0, $266 = 0, $27 = 0, $274 = 0, $28 = 0, $288 = 0, $296 = 0, $3 = 0, $4 = 0, $404 = 0, $44 = 0, $461 = 0, $5 = 0, $505 = 0, $54 = 0, $544 = 0, $6 = 0, $61 = 0, $7 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136 | 0;
 $3 = sp + 1108 | 0;
 $4 = sp + 1104 | 0;
 $5 = sp + 1100 | 0;
 $6 = sp + 1096 | 0;
 $7 = sp;
 $8 = sp + 1122 | 0;
 $9 = sp + 1121 | 0;
 $10 = sp + 1118 | 0;
 $11 = sp + 1112 | 0;
 $12 = sp + 1092 | 0;
 $13 = sp + 1088 | 0;
 $14 = sp + 1084 | 0;
 $15 = sp + 1080 | 0;
 $16 = sp + 1076 | 0;
 $17 = sp + 1072 | 0;
 $18 = sp + 1068 | 0;
 $19 = sp + 1064 | 0;
 $20 = sp + 1060 | 0;
 $21 = sp + 1056 | 0;
 $22 = sp + 1048 | 0;
 $23 = sp + 1044 | 0;
 $24 = sp + 1040 | 0;
 $25 = sp + 1036 | 0;
 $26 = sp + 1032 | 0;
 $27 = sp + 1028 | 0;
 $28 = sp + 1024 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP8[$8 >> 0] = 0;
 HEAP8[$9 >> 0] = 0;
 HEAP8[$10 >> 0] = 0;
 HEAP8[$10 + 1 >> 0] = 0;
 HEAP8[$10 + 2 >> 0] = 0;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$16 >> 2] = 1;
 HEAP32[$18 >> 2] = 0;
 HEAP32[$19 >> 2] = 0;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] = 0;
 if (!(_stbi__check_png_header(HEAP32[$21 >> 2] | 0) | 0)) {
  HEAP32[$3 >> 2] = 0;
  $544 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $544 | 0;
 }
 if ((HEAP32[$5 >> 2] | 0) == 1) {
  HEAP32[$3 >> 2] = 1;
  $544 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $544 | 0;
 }
 L9 : while (1) {
  _stbi__get_chunk_header($22, HEAP32[$21 >> 2] | 0);
  $44 = HEAP32[$22 + 4 >> 2] | 0;
  L11 : do if (($44 | 0) < 1229472850) {
   if (($44 | 0) < 1229209940) {
    switch ($44 | 0) {
    case 1130840649:
     break;
    default:
     {
      label = 132;
      break L11;
     }
    }
    HEAP32[$20 >> 2] = 1;
    _stbi__skip(HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0);
    break;
   }
   if (($44 | 0) >= 1229278788) switch ($44 | 0) {
   case 1229278788:
    {
     label = 101;
     break L9;
     break;
    }
   default:
    {
     label = 132;
     break L11;
    }
   }
   switch ($44 | 0) {
   case 1229209940:
    break;
   default:
    {
     label = 132;
     break L11;
    }
   }
   if (HEAP32[$16 >> 2] | 0) {
    label = 82;
    break L9;
   }
   if (!((HEAPU8[$8 >> 0] | 0) == 0 | (HEAP32[$15 >> 2] | 0) != 0)) {
    label = 84;
    break L9;
   }
   if ((HEAP32[$5 >> 2] | 0) == 2) {
    label = 86;
    break L9;
   }
   if (((HEAP32[$12 >> 2] | 0) + (HEAP32[$22 >> 2] | 0) | 0) < (HEAP32[$12 >> 2] | 0)) {
    label = 88;
    break L9;
   }
   if (((HEAP32[$12 >> 2] | 0) + (HEAP32[$22 >> 2] | 0) | 0) >>> 0 > (HEAP32[$13 >> 2] | 0) >>> 0) {
    HEAP32[$25 >> 2] = HEAP32[$13 >> 2];
    if (!(HEAP32[$13 >> 2] | 0)) HEAP32[$13 >> 2] = (HEAP32[$22 >> 2] | 0) >>> 0 > 4096 ? HEAP32[$22 >> 2] | 0 : 4096;
    while (1) {
     if (((HEAP32[$12 >> 2] | 0) + (HEAP32[$22 >> 2] | 0) | 0) >>> 0 <= (HEAP32[$13 >> 2] | 0) >>> 0) break;
     HEAP32[$13 >> 2] = HEAP32[$13 >> 2] << 1;
    }
    HEAP32[$26 >> 2] = _realloc(HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
    if (!(HEAP32[$26 >> 2] | 0)) {
     label = 96;
     break L9;
    }
    HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = HEAP32[$26 >> 2];
   }
   if (!(_stbi__getn(HEAP32[$21 >> 2] | 0, (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0, HEAP32[$22 >> 2] | 0) | 0)) {
    label = 99;
    break L9;
   }
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + (HEAP32[$22 >> 2] | 0);
  } else {
   if (($44 | 0) < 1347179589) {
    switch ($44 | 0) {
    case 1229472850:
     break;
    default:
     {
      label = 132;
      break L11;
     }
    }
    if (!(HEAP32[$16 >> 2] | 0)) {
     label = 9;
     break L9;
    }
    HEAP32[$16 >> 2] = 0;
    if ((HEAP32[$22 >> 2] | 0) != 13) {
     label = 11;
     break L9;
    }
    $54 = _stbi__get32be(HEAP32[$21 >> 2] | 0) | 0;
    HEAP32[HEAP32[$21 >> 2] >> 2] = $54;
    if ((HEAP32[HEAP32[$21 >> 2] >> 2] | 0) >>> 0 > 16777216) {
     label = 13;
     break L9;
    }
    $61 = _stbi__get32be(HEAP32[$21 >> 2] | 0) | 0;
    HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] = $61;
    if ((HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 16777216) {
     label = 15;
     break L9;
    }
    $71 = (_stbi__get8(HEAP32[$21 >> 2] | 0) | 0) & 255;
    HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = $71;
    if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) != 1) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) != 2) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) != 4) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) != 8) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) != 16) {
     label = 21;
     break L9;
    }
    HEAP32[$19 >> 2] = (_stbi__get8(HEAP32[$21 >> 2] | 0) | 0) & 255;
    if ((HEAP32[$19 >> 2] | 0) > 6) {
     label = 23;
     break L9;
    }
    if ((HEAP32[$19 >> 2] | 0) == 3) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) == 16) {
     label = 26;
     break L9;
    }
    if ((HEAP32[$19 >> 2] | 0) == 3) HEAP8[$8 >> 0] = 3; else if (HEAP32[$19 >> 2] & 1 | 0) {
     label = 30;
     break L9;
    }
    HEAP32[$23 >> 2] = (_stbi__get8(HEAP32[$21 >> 2] | 0) | 0) & 255;
    if (HEAP32[$23 >> 2] | 0) {
     label = 32;
     break L9;
    }
    HEAP32[$24 >> 2] = (_stbi__get8(HEAP32[$21 >> 2] | 0) | 0) & 255;
    if (HEAP32[$24 >> 2] | 0) {
     label = 34;
     break L9;
    }
    HEAP32[$18 >> 2] = (_stbi__get8(HEAP32[$21 >> 2] | 0) | 0) & 255;
    if ((HEAP32[$18 >> 2] | 0) > 1) {
     label = 36;
     break L9;
    }
    if (!(HEAP32[HEAP32[$21 >> 2] >> 2] | 0)) {
     label = 39;
     break L9;
    }
    if (!(HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0)) {
     label = 39;
     break L9;
    }
    if (HEAP8[$8 >> 0] | 0) {
     HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] = 1;
     if ((((1073741824 / ((HEAP32[HEAP32[$21 >> 2] >> 2] | 0) >>> 0) | 0) >>> 0) / 4 | 0) >>> 0 < (HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
      label = 46;
      break L9;
     } else break;
    }
    HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] = (HEAP32[$19 >> 2] & 2 | 0 ? 3 : 1) + (HEAP32[$19 >> 2] & 4 | 0 ? 1 : 0);
    if ((((1073741824 / ((HEAP32[HEAP32[$21 >> 2] >> 2] | 0) >>> 0) | 0) >>> 0) / ((HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0) >>> 0 < (HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
     label = 42;
     break L9;
    }
    if ((HEAP32[$5 >> 2] | 0) == 2) {
     label = 44;
     break L9;
    } else break;
   }
   if (($44 | 0) < 1951551059) {
    switch ($44 | 0) {
    case 1347179589:
     break;
    default:
     {
      label = 132;
      break L11;
     }
    }
    if (HEAP32[$16 >> 2] | 0) {
     label = 48;
     break L9;
    }
    if ((HEAP32[$22 >> 2] | 0) >>> 0 > 768) {
     label = 50;
     break L9;
    }
    HEAP32[$15 >> 2] = ((HEAP32[$22 >> 2] | 0) >>> 0) / 3 | 0;
    if (((HEAP32[$15 >> 2] | 0) * 3 | 0) != (HEAP32[$22 >> 2] | 0)) {
     label = 52;
     break L9;
    }
    HEAP32[$14 >> 2] = 0;
    while (1) {
     if ((HEAP32[$14 >> 2] | 0) >>> 0 >= (HEAP32[$15 >> 2] | 0) >>> 0) break L11;
     $195 = _stbi__get8(HEAP32[$21 >> 2] | 0) | 0;
     HEAP8[$7 + ((HEAP32[$14 >> 2] << 2) + 0) >> 0] = $195;
     $201 = _stbi__get8(HEAP32[$21 >> 2] | 0) | 0;
     HEAP8[$7 + ((HEAP32[$14 >> 2] << 2) + 1) >> 0] = $201;
     $207 = _stbi__get8(HEAP32[$21 >> 2] | 0) | 0;
     HEAP8[$7 + ((HEAP32[$14 >> 2] << 2) + 2) >> 0] = $207;
     HEAP8[$7 + ((HEAP32[$14 >> 2] << 2) + 3) >> 0] = -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
    }
   }
   switch ($44 | 0) {
   case 1951551059:
    break;
   default:
    {
     label = 132;
     break L11;
    }
   }
   if (HEAP32[$16 >> 2] | 0) {
    label = 57;
    break L9;
   }
   if (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) {
    label = 59;
    break L9;
   }
   if (HEAP8[$8 >> 0] | 0) {
    if ((HEAP32[$5 >> 2] | 0) == 2) {
     label = 62;
     break L9;
    }
    if (!(HEAP32[$15 >> 2] | 0)) {
     label = 64;
     break L9;
    }
    if ((HEAP32[$22 >> 2] | 0) >>> 0 > (HEAP32[$15 >> 2] | 0) >>> 0) {
     label = 66;
     break L9;
    }
    HEAP8[$8 >> 0] = 4;
    HEAP32[$14 >> 2] = 0;
    while (1) {
     if ((HEAP32[$14 >> 2] | 0) >>> 0 >= (HEAP32[$22 >> 2] | 0) >>> 0) break L11;
     $243 = _stbi__get8(HEAP32[$21 >> 2] | 0) | 0;
     HEAP8[$7 + ((HEAP32[$14 >> 2] << 2) + 3) >> 0] = $243;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
    }
   }
   if (!(HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] & 1)) {
    label = 71;
    break L9;
   }
   if ((HEAP32[$22 >> 2] | 0) != (HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] << 1 | 0)) {
    label = 73;
    break L9;
   }
   HEAP8[$9 >> 0] = 1;
   $266 = (HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) == 16;
   HEAP32[$17 >> 2] = 0;
   if ($266) while (1) {
    if ((HEAP32[$17 >> 2] | 0) >= (HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] | 0)) break L11;
    $274 = (_stbi__get16be(HEAP32[$21 >> 2] | 0) | 0) & 65535;
    HEAP16[$11 + (HEAP32[$17 >> 2] << 1) >> 1] = $274;
    HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
   } else while (1) {
    if ((HEAP32[$17 >> 2] | 0) >= (HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] | 0)) break L11;
    $288 = (_stbi__get16be(HEAP32[$21 >> 2] | 0) | 0) & 255;
    $296 = (Math_imul($288, HEAPU8[44412 + (HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) >> 0] | 0) | 0) & 255;
    HEAP8[$10 + (HEAP32[$17 >> 2] | 0) >> 0] = $296;
    HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
   }
  } while (0);
  if ((label | 0) == 132) {
   label = 0;
   if (HEAP32[$16 >> 2] | 0) {
    label = 133;
    break;
   }
   if (!(HEAP32[$22 + 4 >> 2] & 536870912)) {
    label = 135;
    break;
   }
   _stbi__skip(HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0);
  }
  _stbi__get32be(HEAP32[$21 >> 2] | 0) | 0;
 }
 switch (label | 0) {
 case 9:
  {
   HEAP32[$3 >> 2] = _stbi__err(44196) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 11:
  {
   HEAP32[$3 >> 2] = _stbi__err(44210) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 13:
  {
   HEAP32[$3 >> 2] = _stbi__err(43529) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 15:
  {
   HEAP32[$3 >> 2] = _stbi__err(43529) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 21:
  {
   HEAP32[$3 >> 2] = _stbi__err(44223) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 23:
  {
   HEAP32[$3 >> 2] = _stbi__err(44243) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 26:
  {
   HEAP32[$3 >> 2] = _stbi__err(44243) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 30:
  {
   HEAP32[$3 >> 2] = _stbi__err(44243) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 32:
  {
   HEAP32[$3 >> 2] = _stbi__err(44253) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 34:
  {
   HEAP32[$3 >> 2] = _stbi__err(44269) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 36:
  {
   HEAP32[$3 >> 2] = _stbi__err(44287) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 39:
  {
   HEAP32[$3 >> 2] = _stbi__err(44308) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 42:
  {
   HEAP32[$3 >> 2] = _stbi__err(43529) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 44:
  {
   HEAP32[$3 >> 2] = 1;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 46:
  {
   HEAP32[$3 >> 2] = _stbi__err(43529) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 48:
  {
   HEAP32[$3 >> 2] = _stbi__err(44322) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 50:
  {
   HEAP32[$3 >> 2] = _stbi__err(44337) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 52:
  {
   HEAP32[$3 >> 2] = _stbi__err(44337) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 57:
  {
   HEAP32[$3 >> 2] = _stbi__err(44322) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 59:
  {
   HEAP32[$3 >> 2] = _stbi__err(44350) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 62:
  {
   HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] = 4;
   HEAP32[$3 >> 2] = 1;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 64:
  {
   HEAP32[$3 >> 2] = _stbi__err(44366) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 66:
  {
   HEAP32[$3 >> 2] = _stbi__err(44383) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 71:
  {
   HEAP32[$3 >> 2] = _stbi__err(44396) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 73:
  {
   HEAP32[$3 >> 2] = _stbi__err(44383) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 82:
  {
   HEAP32[$3 >> 2] = _stbi__err(44322) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 84:
  {
   HEAP32[$3 >> 2] = _stbi__err(44421) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 86:
  {
   HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] = HEAPU8[$8 >> 0];
   HEAP32[$3 >> 2] = 1;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 88:
  {
   HEAP32[$3 >> 2] = 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 96:
  {
   HEAP32[$3 >> 2] = _stbi__err(43490) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 99:
  {
   HEAP32[$3 >> 2] = _stbi__err(44429) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 101:
  {
   if (HEAP32[$16 >> 2] | 0) {
    HEAP32[$3 >> 2] = _stbi__err(44322) | 0;
    $544 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $544 | 0;
   }
   if (HEAP32[$5 >> 2] | 0) {
    HEAP32[$3 >> 2] = 1;
    $544 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $544 | 0;
   }
   if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0)) {
    HEAP32[$3 >> 2] = _stbi__err(44439) | 0;
    $544 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $544 | 0;
   }
   HEAP32[$28 >> 2] = (((Math_imul(HEAP32[HEAP32[$21 >> 2] >> 2] | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) | 0) + 7 | 0) >>> 0) / 8 | 0;
   HEAP32[$27 >> 2] = (Math_imul(Math_imul(HEAP32[$28 >> 2] | 0, HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0) | 0, HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] | 0) | 0) + (HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0);
   $404 = _stbi_zlib_decode_malloc_guesssize_headerflag(HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$27 >> 2] | 0, $27, ((HEAP32[$20 >> 2] | 0) != 0 ^ 1) & 1) | 0;
   HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] = $404;
   if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$3 >> 2] = 0;
    $544 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $544 | 0;
   }
   _free(HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0);
   HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = 0;
   if (((HEAP32[$6 >> 2] | 0) != 3 ? (HEAP32[$6 >> 2] | 0) == ((HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] | 0) + 1 | 0) : 0) ^ 1 | (HEAP8[$8 >> 0] | 0) != 0) if (HEAPU8[$9 >> 0] | 0) label = 111; else HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2]; else label = 111;
   if ((label | 0) == 111) HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] = (HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] | 0) + 1;
   if (!(_stbi__create_png_image(HEAP32[$4 >> 2] | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$27 >> 2] | 0, HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0, HEAP32[$19 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0)) {
    HEAP32[$3 >> 2] = 0;
    $544 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $544 | 0;
   }
   do if (HEAP8[$9 >> 0] | 0) {
    $461 = HEAP32[$4 >> 2] | 0;
    if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) == 16) {
     if (_stbi__compute_transparency16($461, $11, HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] | 0) | 0) break;
     HEAP32[$3 >> 2] = 0;
     $544 = HEAP32[$3 >> 2] | 0;
     STACKTOP = sp;
     return $544 | 0;
    } else {
     if (_stbi__compute_transparency($461, $10, HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] | 0) | 0) break;
     HEAP32[$3 >> 2] = 0;
     $544 = HEAP32[$3 >> 2] | 0;
     STACKTOP = sp;
     return $544 | 0;
    }
   } while (0);
   if ((HEAP32[$20 >> 2] | 0) != 0 & 0 != 0) if ((HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] | 0) > 2) _stbi__de_iphone(HEAP32[$4 >> 2] | 0);
   if (HEAP8[$8 >> 0] | 0) {
    HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] = HEAPU8[$8 >> 0];
    HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] = HEAPU8[$8 >> 0];
    if ((HEAP32[$6 >> 2] | 0) >= 3) HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] = HEAP32[$6 >> 2];
    if (!(_stbi__expand_png_palette(HEAP32[$4 >> 2] | 0, $7, HEAP32[$15 >> 2] | 0, HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] | 0) | 0)) {
     HEAP32[$3 >> 2] = 0;
     $544 = HEAP32[$3 >> 2] | 0;
     STACKTOP = sp;
     return $544 | 0;
    }
   } else if (HEAP8[$9 >> 0] | 0) {
    $505 = (HEAP32[$21 >> 2] | 0) + 8 | 0;
    HEAP32[$505 >> 2] = (HEAP32[$505 >> 2] | 0) + 1;
   }
   _free(HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0);
   HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] = 0;
   HEAP32[$3 >> 2] = 1;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 133:
  {
   HEAP32[$3 >> 2] = _stbi__err(44322) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 case 135:
  {
   HEAP8[8656] = (HEAP32[$22 + 4 >> 2] | 0) >>> 24;
   HEAP8[8657] = (HEAP32[$22 + 4 >> 2] | 0) >>> 16;
   HEAP8[8658] = (HEAP32[$22 + 4 >> 2] | 0) >>> 8;
   HEAP8[8659] = (HEAP32[$22 + 4 >> 2] | 0) >>> 0;
   HEAP32[$3 >> 2] = _stbi__err(8656) | 0;
   $544 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $544 | 0;
  }
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $119 = 0, $120 = 0, $127 = 0, $128 = 0, $135 = 0, $136 = 0, $143 = 0, $144 = 0, $15 = 0, $151 = 0, $152 = 0, $159 = 0, $16 = 0, $160 = 0, $167 = 0, $168 = 0, $175 = 0, $176 = 0, $178 = 0, $182 = 0, $183 = 0, $190 = 0, $191 = 0, $198 = 0, $199 = 0, $206 = 0, $207 = 0, $214 = 0, $215 = 0, $222 = 0, $223 = 0, $23 = 0, $230 = 0, $231 = 0, $238 = 0, $239 = 0, $24 = 0, $3 = 0, $31 = 0, $32 = 0, $39 = 0, $40 = 0, $47 = 0, $48 = 0, $55 = 0, $56 = 0, $63 = 0, $64 = 0, $7 = 0, $71 = 0, $72 = 0, $79 = 0, $8 = 0, $80 = 0, $87 = 0, $88 = 0, $95 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else do switch (HEAP8[$0 >> 0] | 0) {
 case 118:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($3, 49316);
   $7 = $2 + 4 | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   if ($8 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8, $3);
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 119:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm8EEERAT__Kc($3);
   $15 = $2 + 4 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   if ($16 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16, $3);
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 98:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($3, 49321);
   $23 = $2 + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   if ($24 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24, $3);
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 99:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($3, 49090);
   $31 = $2 + 4 | 0;
   $32 = HEAP32[$31 >> 2] | 0;
   if ($32 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($32, $3);
    HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 97:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($3, 49095);
   $39 = $2 + 4 | 0;
   $40 = HEAP32[$39 >> 2] | 0;
   if ($40 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($40, $3);
    HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 104:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm14EEERAT__Kc($3, 49107);
   $47 = $2 + 4 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   if ($48 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($48, $3);
    HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 115:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($3, 49121);
   $55 = $2 + 4 | 0;
   $56 = HEAP32[$55 >> 2] | 0;
   if ($56 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($56, $3);
    HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 116:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($3, 49127);
   $63 = $2 + 4 | 0;
   $64 = HEAP32[$63 >> 2] | 0;
   if ($64 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($64, $3);
    HEAP32[$63 >> 2] = (HEAP32[$63 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 105:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm4EEERAT__Kc($3, 49326);
   $71 = $2 + 4 | 0;
   $72 = HEAP32[$71 >> 2] | 0;
   if ($72 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($72, $3);
    HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 106:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($3, 49330);
   $79 = $2 + 4 | 0;
   $80 = HEAP32[$79 >> 2] | 0;
   if ($80 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($80, $3);
    HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 108:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($3, 49343);
   $87 = $2 + 4 | 0;
   $88 = HEAP32[$87 >> 2] | 0;
   if ($88 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($88, $3);
    HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 109:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm14EEERAT__Kc($3, 49348);
   $95 = $2 + 4 | 0;
   $96 = HEAP32[$95 >> 2] | 0;
   if ($96 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($96, $3);
    HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 120:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 49362);
   $103 = $2 + 4 | 0;
   $104 = HEAP32[$103 >> 2] | 0;
   if ($104 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($104, $3);
    HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 121:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm19EEERAT__Kc($3);
   $111 = $2 + 4 | 0;
   $112 = HEAP32[$111 >> 2] | 0;
   if ($112 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($112, $3);
    HEAP32[$111 >> 2] = (HEAP32[$111 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 110:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm9EEERAT__Kc($3, 49156);
   $119 = $2 + 4 | 0;
   $120 = HEAP32[$119 >> 2] | 0;
   if ($120 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($120, $3);
    HEAP32[$119 >> 2] = (HEAP32[$119 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 111:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm18EEERAT__Kc($3, 49165);
   $127 = $2 + 4 | 0;
   $128 = HEAP32[$127 >> 2] | 0;
   if ($128 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($128, $3);
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 102:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($3, 49372);
   $135 = $2 + 4 | 0;
   $136 = HEAP32[$135 >> 2] | 0;
   if ($136 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($136, $3);
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 100:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm7EEERAT__Kc($3);
   $143 = $2 + 4 | 0;
   $144 = HEAP32[$143 >> 2] | 0;
   if ($144 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($144, $3);
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 101:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($3, 49378);
   $151 = $2 + 4 | 0;
   $152 = HEAP32[$151 >> 2] | 0;
   if ($152 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($152, $3);
    HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 103:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 49390);
   $159 = $2 + 4 | 0;
   $160 = HEAP32[$159 >> 2] | 0;
   if ($160 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($160, $3);
    HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 122:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm4EEERAT__Kc($3, 49401);
   $167 = $2 + 4 | 0;
   $168 = HEAP32[$167 >> 2] | 0;
   if ($168 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($168, $3);
    HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $0 + 1 | 0;
   break L1;
   break;
  }
 case 117:
  {
   $175 = $0 + 1 | 0;
   $176 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($175, $1, $2) | 0;
   $$1 = ($176 | 0) == ($175 | 0) ? $0 : $176;
   break L1;
   break;
  }
 case 68:
  {
   $178 = $0 + 1 | 0;
   if (($178 | 0) == ($1 | 0)) {
    $$1 = $0;
    break L1;
   }
   switch (HEAP8[$178 >> 0] | 0) {
   case 100:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 49405);
     $182 = $2 + 4 | 0;
     $183 = HEAP32[$182 >> 2] | 0;
     if ($183 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($183, $3);
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($3, 49415);
     $190 = $2 + 4 | 0;
     $191 = HEAP32[$190 >> 2] | 0;
     if ($191 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($191, $3);
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 102:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 49426);
     $198 = $2 + 4 | 0;
     $199 = HEAP32[$198 >> 2] | 0;
     if ($199 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($199, $3);
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 104:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($3, 49436);
     $206 = $2 + 4 | 0;
     $207 = HEAP32[$206 >> 2] | 0;
     if ($207 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($207, $3);
      HEAP32[$206 >> 2] = (HEAP32[$206 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 105:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm9EEERAT__Kc($3, 49446);
     $214 = $2 + 4 | 0;
     $215 = HEAP32[$214 >> 2] | 0;
     if ($215 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($215, $3);
      HEAP32[$214 >> 2] = (HEAP32[$214 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm9EEERAT__Kc($3, 49455);
     $222 = $2 + 4 | 0;
     $223 = HEAP32[$222 >> 2] | 0;
     if ($223 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($223, $3);
      HEAP32[$222 >> 2] = (HEAP32[$222 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($3, 49464);
     $230 = $2 + 4 | 0;
     $231 = HEAP32[$230 >> 2] | 0;
     if ($231 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($231, $3);
      HEAP32[$230 >> 2] = (HEAP32[$230 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 110:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($3, 49469);
     $238 = $2 + 4 | 0;
     $239 = HEAP32[$238 >> 2] | 0;
     if ($239 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($239, $3);
      HEAP32[$238 >> 2] = (HEAP32[$238 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $0 + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$1 = $0;
     break L1;
    }
   }
   break;
  }
 default:
  {
   $$1 = $0;
   break L1;
  }
 } while (0); while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _stbi__bmp_load($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $116 = 0, $13 = 0, $130 = 0, $14 = 0, $142 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $203 = 0, $21 = 0, $211 = 0, $22 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $253 = 0, $254 = 0, $26 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $294 = 0, $295 = 0, $296 = 0, $30 = 0, $302 = 0, $303 = 0, $304 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $332 = 0, $335 = 0, $336 = 0, $337 = 0, $34 = 0, $343 = 0, $344 = 0, $345 = 0, $35 = 0, $351 = 0, $352 = 0, $353 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $410 = 0, $42 = 0, $43 = 0, $44 = 0, $446 = 0, $45 = 0, $452 = 0, $458 = 0, $46 = 0, $47 = 0, $471 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $49 = 0, $492 = 0, $495 = 0, $50 = 0, $503 = 0, $504 = 0, $505 = 0, $515 = 0, $516 = 0, $517 = 0, $527 = 0, $528 = 0, $529 = 0, $540 = 0, $548 = 0, $549 = 0, $550 = 0, $590 = 0, $6 = 0, $603 = 0, $63 = 0, $663 = 0, $7 = 0, $79 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1232 | 0;
 $6 = sp + 1220 | 0;
 $7 = sp + 1216 | 0;
 $8 = sp + 1212 | 0;
 $9 = sp + 1208 | 0;
 $10 = sp + 1204 | 0;
 $11 = sp + 1200 | 0;
 $13 = sp + 1192 | 0;
 $14 = sp + 1188 | 0;
 $15 = sp + 1184 | 0;
 $16 = sp + 1180 | 0;
 $17 = sp + 1176 | 0;
 $18 = sp + 1172 | 0;
 $19 = sp;
 $20 = sp + 1168 | 0;
 $21 = sp + 1164 | 0;
 $22 = sp + 1160 | 0;
 $23 = sp + 1156 | 0;
 $24 = sp + 1152 | 0;
 $25 = sp + 1148 | 0;
 $26 = sp + 1144 | 0;
 $27 = sp + 1112 | 0;
 $28 = sp + 1104 | 0;
 $29 = sp + 1100 | 0;
 $30 = sp + 1096 | 0;
 $31 = sp + 1092 | 0;
 $32 = sp + 1088 | 0;
 $33 = sp + 1084 | 0;
 $34 = sp + 1080 | 0;
 $35 = sp + 1076 | 0;
 $36 = sp + 1072 | 0;
 $37 = sp + 1068 | 0;
 $38 = sp + 1064 | 0;
 $39 = sp + 1060 | 0;
 $40 = sp + 1056 | 0;
 $41 = sp + 1052 | 0;
 $42 = sp + 1048 | 0;
 $43 = sp + 1044 | 0;
 $44 = sp + 1225 | 0;
 $45 = sp + 1040 | 0;
 $46 = sp + 1036 | 0;
 $47 = sp + 1032 | 0;
 $48 = sp + 1224 | 0;
 $49 = sp + 1028 | 0;
 $50 = sp + 1024 | 0;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[sp + 1196 >> 2] = $5;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$27 + 28 >> 2] = 255;
 if (!(_stbi__bmp_parse_header(HEAP32[$7 >> 2] | 0, $27) | 0)) {
  HEAP32[$6 >> 2] = 0;
  $663 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $663 | 0;
 }
 HEAP32[$24 >> 2] = (HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) > 0 & 1;
 $63 = Math_abs(HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] = $63;
 HEAP32[$14 >> 2] = HEAP32[$27 + 12 >> 2];
 HEAP32[$15 >> 2] = HEAP32[$27 + 16 >> 2];
 HEAP32[$16 >> 2] = HEAP32[$27 + 20 >> 2];
 HEAP32[$17 >> 2] = HEAP32[$27 + 24 >> 2];
 HEAP32[$18 >> 2] = HEAP32[$27 + 28 >> 2];
 $79 = HEAP32[$27 >> 2] | 0;
 if ((HEAP32[$27 + 8 >> 2] | 0) == 12) {
  if (($79 | 0) < 24) HEAP32[$20 >> 2] = ((HEAP32[$27 + 4 >> 2] | 0) - 14 - 24 | 0) / 3 | 0;
 } else if (($79 | 0) < 16) HEAP32[$20 >> 2] = (HEAP32[$27 + 4 >> 2] | 0) - 14 - (HEAP32[$27 + 8 >> 2] | 0) >> 2;
 HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] = HEAP32[$17 >> 2] | 0 ? 4 : 3;
 if ((HEAP32[$11 >> 2] | 0) != 0 & (HEAP32[$11 >> 2] | 0) >= 3) HEAP32[$26 >> 2] = HEAP32[$11 >> 2]; else HEAP32[$26 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2];
 if (!(_stbi__mad3sizes_valid(HEAP32[$26 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0, 0) | 0)) {
  $116 = (_stbi__err(43529) | 0) != 0;
  HEAP32[$6 >> 2] = $116 ? 0 : 0;
  $663 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $663 | 0;
 }
 HEAP32[$13 >> 2] = _stbi__malloc_mad3(HEAP32[$26 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0, 0) | 0;
 if (!(HEAP32[$13 >> 2] | 0)) {
  $130 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$6 >> 2] = $130 ? 0 : 0;
  $663 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $663 | 0;
 }
 L23 : do if ((HEAP32[$27 >> 2] | 0) < 16) {
  HEAP32[$28 >> 2] = 0;
  if ((HEAP32[$20 >> 2] | 0) == 0 | (HEAP32[$20 >> 2] | 0) > 256) {
   _free(HEAP32[$13 >> 2] | 0);
   $142 = (_stbi__err(44072) | 0) != 0;
   HEAP32[$6 >> 2] = $142 ? 0 : 0;
   $663 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $663 | 0;
  }
  HEAP32[$21 >> 2] = 0;
  while (1) {
   $149 = HEAP32[$7 >> 2] | 0;
   if ((HEAP32[$21 >> 2] | 0) >= (HEAP32[$20 >> 2] | 0)) break;
   $150 = _stbi__get8($149) | 0;
   HEAP8[$19 + (HEAP32[$21 >> 2] << 2) + 2 >> 0] = $150;
   $155 = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
   HEAP8[$19 + (HEAP32[$21 >> 2] << 2) + 1 >> 0] = $155;
   $160 = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
   HEAP8[$19 + (HEAP32[$21 >> 2] << 2) >> 0] = $160;
   if ((HEAP32[$27 + 8 >> 2] | 0) != 12) _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
   HEAP8[$19 + (HEAP32[$21 >> 2] << 2) + 3 >> 0] = -1;
   HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1;
  }
  _stbi__skip($149, (HEAP32[$27 + 4 >> 2] | 0) - 14 - (HEAP32[$27 + 8 >> 2] | 0) - (Math_imul(HEAP32[$20 >> 2] | 0, (HEAP32[$27 + 8 >> 2] | 0) == 12 ? 3 : 4) | 0) | 0);
  do if ((HEAP32[$27 >> 2] | 0) == 1) HEAP32[$23 >> 2] = ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 7 | 0) >>> 3; else {
   if ((HEAP32[$27 >> 2] | 0) == 4) {
    HEAP32[$23 >> 2] = ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 1 | 0) >>> 1;
    break;
   }
   if ((HEAP32[$27 >> 2] | 0) == 8) {
    HEAP32[$23 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
    break;
   }
   _free(HEAP32[$13 >> 2] | 0);
   $203 = (_stbi__err(44080) | 0) != 0;
   HEAP32[$6 >> 2] = $203 ? 0 : 0;
   $663 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $663 | 0;
  } while (0);
  HEAP32[$25 >> 2] = 0 - (HEAP32[$23 >> 2] | 0) & 3;
  $211 = (HEAP32[$27 >> 2] | 0) == 1;
  HEAP32[$22 >> 2] = 0;
  if ($211) while (1) {
   if ((HEAP32[$22 >> 2] | 0) >= (HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0)) break L23;
   HEAP32[$29 >> 2] = 7;
   HEAP32[$30 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
   HEAP32[$21 >> 2] = 0;
   while (1) {
    if ((HEAP32[$21 >> 2] | 0) >= (HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) break;
    HEAP32[$31 >> 2] = HEAP32[$30 >> 2] >> HEAP32[$29 >> 2] & 1;
    $230 = HEAP8[$19 + (HEAP32[$31 >> 2] << 2) >> 0] | 0;
    $231 = HEAP32[$13 >> 2] | 0;
    $232 = HEAP32[$28 >> 2] | 0;
    HEAP32[$28 >> 2] = $232 + 1;
    HEAP8[$231 + $232 >> 0] = $230;
    $238 = HEAP8[$19 + (HEAP32[$31 >> 2] << 2) + 1 >> 0] | 0;
    $239 = HEAP32[$13 >> 2] | 0;
    $240 = HEAP32[$28 >> 2] | 0;
    HEAP32[$28 >> 2] = $240 + 1;
    HEAP8[$239 + $240 >> 0] = $238;
    $246 = HEAP8[$19 + (HEAP32[$31 >> 2] << 2) + 2 >> 0] | 0;
    $247 = HEAP32[$13 >> 2] | 0;
    $248 = HEAP32[$28 >> 2] | 0;
    HEAP32[$28 >> 2] = $248 + 1;
    HEAP8[$247 + $248 >> 0] = $246;
    if ((HEAP32[$26 >> 2] | 0) == 4) {
     $253 = HEAP32[$13 >> 2] | 0;
     $254 = HEAP32[$28 >> 2] | 0;
     HEAP32[$28 >> 2] = $254 + 1;
     HEAP8[$253 + $254 >> 0] = -1;
    }
    if (((HEAP32[$21 >> 2] | 0) + 1 | 0) == (HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) break;
    $263 = (HEAP32[$29 >> 2] | 0) + -1 | 0;
    HEAP32[$29 >> 2] = $263;
    if (($263 | 0) < 0) {
     HEAP32[$29 >> 2] = 7;
     HEAP32[$30 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
    }
    HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1;
   }
   _stbi__skip(HEAP32[$7 >> 2] | 0, HEAP32[$25 >> 2] | 0);
   HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 1;
  }
  while (1) {
   if ((HEAP32[$22 >> 2] | 0) >= (HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0)) break L23;
   HEAP32[$21 >> 2] = 0;
   while (1) {
    if ((HEAP32[$21 >> 2] | 0) >= (HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) break;
    HEAP32[$32 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
    HEAP32[$33 >> 2] = 0;
    if ((HEAP32[$27 >> 2] | 0) == 4) {
     HEAP32[$33 >> 2] = HEAP32[$32 >> 2] & 15;
     HEAP32[$32 >> 2] = HEAP32[$32 >> 2] >> 4;
    }
    $294 = HEAP8[$19 + (HEAP32[$32 >> 2] << 2) >> 0] | 0;
    $295 = HEAP32[$13 >> 2] | 0;
    $296 = HEAP32[$28 >> 2] | 0;
    HEAP32[$28 >> 2] = $296 + 1;
    HEAP8[$295 + $296 >> 0] = $294;
    $302 = HEAP8[$19 + (HEAP32[$32 >> 2] << 2) + 1 >> 0] | 0;
    $303 = HEAP32[$13 >> 2] | 0;
    $304 = HEAP32[$28 >> 2] | 0;
    HEAP32[$28 >> 2] = $304 + 1;
    HEAP8[$303 + $304 >> 0] = $302;
    $310 = HEAP8[$19 + (HEAP32[$32 >> 2] << 2) + 2 >> 0] | 0;
    $311 = HEAP32[$13 >> 2] | 0;
    $312 = HEAP32[$28 >> 2] | 0;
    HEAP32[$28 >> 2] = $312 + 1;
    HEAP8[$311 + $312 >> 0] = $310;
    if ((HEAP32[$26 >> 2] | 0) == 4) {
     $317 = HEAP32[$13 >> 2] | 0;
     $318 = HEAP32[$28 >> 2] | 0;
     HEAP32[$28 >> 2] = $318 + 1;
     HEAP8[$317 + $318 >> 0] = -1;
    }
    if (((HEAP32[$21 >> 2] | 0) + 1 | 0) == (HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) break;
    if ((HEAP32[$27 >> 2] | 0) == 8) $332 = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255; else $332 = HEAP32[$33 >> 2] | 0;
    HEAP32[$32 >> 2] = $332;
    $335 = HEAP8[$19 + (HEAP32[$32 >> 2] << 2) >> 0] | 0;
    $336 = HEAP32[$13 >> 2] | 0;
    $337 = HEAP32[$28 >> 2] | 0;
    HEAP32[$28 >> 2] = $337 + 1;
    HEAP8[$336 + $337 >> 0] = $335;
    $343 = HEAP8[$19 + (HEAP32[$32 >> 2] << 2) + 1 >> 0] | 0;
    $344 = HEAP32[$13 >> 2] | 0;
    $345 = HEAP32[$28 >> 2] | 0;
    HEAP32[$28 >> 2] = $345 + 1;
    HEAP8[$344 + $345 >> 0] = $343;
    $351 = HEAP8[$19 + (HEAP32[$32 >> 2] << 2) + 2 >> 0] | 0;
    $352 = HEAP32[$13 >> 2] | 0;
    $353 = HEAP32[$28 >> 2] | 0;
    HEAP32[$28 >> 2] = $353 + 1;
    HEAP8[$352 + $353 >> 0] = $351;
    if ((HEAP32[$26 >> 2] | 0) == 4) {
     $358 = HEAP32[$13 >> 2] | 0;
     $359 = HEAP32[$28 >> 2] | 0;
     HEAP32[$28 >> 2] = $359 + 1;
     HEAP8[$358 + $359 >> 0] = -1;
    }
    HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 2;
   }
   _stbi__skip(HEAP32[$7 >> 2] | 0, HEAP32[$25 >> 2] | 0);
   HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 1;
  }
 } else {
  HEAP32[$34 >> 2] = 0;
  HEAP32[$35 >> 2] = 0;
  HEAP32[$36 >> 2] = 0;
  HEAP32[$37 >> 2] = 0;
  HEAP32[$38 >> 2] = 0;
  HEAP32[$39 >> 2] = 0;
  HEAP32[$40 >> 2] = 0;
  HEAP32[$41 >> 2] = 0;
  HEAP32[$42 >> 2] = 0;
  HEAP32[$43 >> 2] = 0;
  _stbi__skip(HEAP32[$7 >> 2] | 0, (HEAP32[$27 + 4 >> 2] | 0) - 14 - (HEAP32[$27 + 8 >> 2] | 0) | 0);
  do if ((HEAP32[$27 >> 2] | 0) == 24) HEAP32[$23 >> 2] = (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) * 3; else if ((HEAP32[$27 >> 2] | 0) == 16) {
   HEAP32[$23 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2] << 1;
   break;
  } else {
   HEAP32[$23 >> 2] = 0;
   break;
  } while (0);
  HEAP32[$25 >> 2] = 0 - (HEAP32[$23 >> 2] | 0) & 3;
  if ((HEAP32[$27 >> 2] | 0) == 24) HEAP32[$43 >> 2] = 1; else if ((HEAP32[$27 >> 2] | 0) == 32) if ((HEAP32[$16 >> 2] | 0) == 255 & (HEAP32[$15 >> 2] | 0) == 65280 & (HEAP32[$14 >> 2] | 0) == 16711680 & (HEAP32[$17 >> 2] | 0) == -16777216) HEAP32[$43 >> 2] = 2;
  do if (!(HEAP32[$43 >> 2] | 0)) {
   if ((HEAP32[$14 >> 2] | 0) != 0 & (HEAP32[$15 >> 2] | 0) != 0 & (HEAP32[$16 >> 2] | 0) != 0) {
    HEAP32[$34 >> 2] = (_stbi__high_bit(HEAP32[$14 >> 2] | 0) | 0) - 7;
    HEAP32[$38 >> 2] = _stbi__bitcount(HEAP32[$14 >> 2] | 0) | 0;
    HEAP32[$35 >> 2] = (_stbi__high_bit(HEAP32[$15 >> 2] | 0) | 0) - 7;
    HEAP32[$39 >> 2] = _stbi__bitcount(HEAP32[$15 >> 2] | 0) | 0;
    HEAP32[$36 >> 2] = (_stbi__high_bit(HEAP32[$16 >> 2] | 0) | 0) - 7;
    HEAP32[$40 >> 2] = _stbi__bitcount(HEAP32[$16 >> 2] | 0) | 0;
    HEAP32[$37 >> 2] = (_stbi__high_bit(HEAP32[$17 >> 2] | 0) | 0) - 7;
    HEAP32[$41 >> 2] = _stbi__bitcount(HEAP32[$17 >> 2] | 0) | 0;
    break;
   }
   _free(HEAP32[$13 >> 2] | 0);
   $410 = (_stbi__err(44088) | 0) != 0;
   HEAP32[$6 >> 2] = $410 ? 0 : 0;
   $663 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $663 | 0;
  } while (0);
  HEAP32[$22 >> 2] = 0;
  while (1) {
   if ((HEAP32[$22 >> 2] | 0) >= (HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0)) break L23;
   L109 : do if (HEAP32[$43 >> 2] | 0) {
    HEAP32[$21 >> 2] = 0;
    while (1) {
     if ((HEAP32[$21 >> 2] | 0) >= (HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) break L109;
     $446 = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
     HEAP8[(HEAP32[$13 >> 2] | 0) + ((HEAP32[$42 >> 2] | 0) + 2) >> 0] = $446;
     $452 = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
     HEAP8[(HEAP32[$13 >> 2] | 0) + ((HEAP32[$42 >> 2] | 0) + 1) >> 0] = $452;
     $458 = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
     HEAP8[(HEAP32[$13 >> 2] | 0) + ((HEAP32[$42 >> 2] | 0) + 0) >> 0] = $458;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 3;
     if ((HEAP32[$43 >> 2] | 0) == 2) $471 = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255; else $471 = 255;
     HEAP8[$44 >> 0] = $471;
     HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | (HEAPU8[$44 >> 0] | 0);
     if ((HEAP32[$26 >> 2] | 0) == 4) {
      $478 = HEAP8[$44 >> 0] | 0;
      $479 = HEAP32[$13 >> 2] | 0;
      $480 = HEAP32[$42 >> 2] | 0;
      HEAP32[$42 >> 2] = $480 + 1;
      HEAP8[$479 + $480 >> 0] = $478;
     }
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1;
    }
   } else {
    HEAP32[$45 >> 2] = HEAP32[$27 >> 2];
    HEAP32[$21 >> 2] = 0;
    while (1) {
     if ((HEAP32[$21 >> 2] | 0) >= (HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) break L109;
     $492 = HEAP32[$7 >> 2] | 0;
     if ((HEAP32[$45 >> 2] | 0) == 16) $495 = _stbi__get16le($492) | 0; else $495 = _stbi__get32le($492) | 0;
     HEAP32[$46 >> 2] = $495;
     $503 = (_stbi__shiftsigned(HEAP32[$46 >> 2] & HEAP32[$14 >> 2], HEAP32[$34 >> 2] | 0, HEAP32[$38 >> 2] | 0) | 0) & 255;
     $504 = HEAP32[$13 >> 2] | 0;
     $505 = HEAP32[$42 >> 2] | 0;
     HEAP32[$42 >> 2] = $505 + 1;
     HEAP8[$504 + $505 >> 0] = $503;
     $515 = (_stbi__shiftsigned(HEAP32[$46 >> 2] & HEAP32[$15 >> 2], HEAP32[$35 >> 2] | 0, HEAP32[$39 >> 2] | 0) | 0) & 255;
     $516 = HEAP32[$13 >> 2] | 0;
     $517 = HEAP32[$42 >> 2] | 0;
     HEAP32[$42 >> 2] = $517 + 1;
     HEAP8[$516 + $517 >> 0] = $515;
     $527 = (_stbi__shiftsigned(HEAP32[$46 >> 2] & HEAP32[$16 >> 2], HEAP32[$36 >> 2] | 0, HEAP32[$40 >> 2] | 0) | 0) & 255;
     $528 = HEAP32[$13 >> 2] | 0;
     $529 = HEAP32[$42 >> 2] | 0;
     HEAP32[$42 >> 2] = $529 + 1;
     HEAP8[$528 + $529 >> 0] = $527;
     if (HEAP32[$17 >> 2] | 0) $540 = _stbi__shiftsigned(HEAP32[$46 >> 2] & HEAP32[$17 >> 2], HEAP32[$37 >> 2] | 0, HEAP32[$41 >> 2] | 0) | 0; else $540 = 255;
     HEAP32[$47 >> 2] = $540;
     HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | HEAP32[$47 >> 2];
     if ((HEAP32[$26 >> 2] | 0) == 4) {
      $548 = HEAP32[$47 >> 2] & 255;
      $549 = HEAP32[$13 >> 2] | 0;
      $550 = HEAP32[$42 >> 2] | 0;
      HEAP32[$42 >> 2] = $550 + 1;
      HEAP8[$549 + $550 >> 0] = $548;
     }
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1;
    }
   } while (0);
   _stbi__skip(HEAP32[$7 >> 2] | 0, HEAP32[$25 >> 2] | 0);
   HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 1;
  }
 } while (0);
 L136 : do if ((HEAP32[$26 >> 2] | 0) == 4 & (HEAP32[$18 >> 2] | 0) == 0) {
  HEAP32[$21 >> 2] = (Math_imul(HEAP32[HEAP32[$7 >> 2] >> 2] << 2, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0) - 1;
  while (1) {
   if ((HEAP32[$21 >> 2] | 0) < 0) break L136;
   HEAP8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$21 >> 2] | 0) >> 0] = -1;
   HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) - 4;
  }
 } while (0);
 L142 : do if (HEAP32[$24 >> 2] | 0) {
  HEAP32[$22 >> 2] = 0;
  while (1) {
   if ((HEAP32[$22 >> 2] | 0) >= (HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] >> 1 | 0)) break L142;
   $590 = Math_imul(HEAP32[$22 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0) | 0;
   HEAP32[$49 >> 2] = (HEAP32[$13 >> 2] | 0) + (Math_imul($590, HEAP32[$26 >> 2] | 0) | 0);
   $603 = Math_imul((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) - 1 - (HEAP32[$22 >> 2] | 0) | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0) | 0;
   HEAP32[$50 >> 2] = (HEAP32[$13 >> 2] | 0) + (Math_imul($603, HEAP32[$26 >> 2] | 0) | 0);
   HEAP32[$21 >> 2] = 0;
   while (1) {
    if ((HEAP32[$21 >> 2] | 0) >= (Math_imul(HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0)) break;
    HEAP8[$48 >> 0] = HEAP8[(HEAP32[$49 >> 2] | 0) + (HEAP32[$21 >> 2] | 0) >> 0] | 0;
    HEAP8[(HEAP32[$49 >> 2] | 0) + (HEAP32[$21 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$50 >> 2] | 0) + (HEAP32[$21 >> 2] | 0) >> 0] | 0;
    HEAP8[(HEAP32[$50 >> 2] | 0) + (HEAP32[$21 >> 2] | 0) >> 0] = HEAP8[$48 >> 0] | 0;
    HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1;
   }
   HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAP32[$11 >> 2] | 0) if ((HEAP32[$11 >> 2] | 0) != (HEAP32[$26 >> 2] | 0)) {
  HEAP32[$13 >> 2] = _stbi__convert_format(HEAP32[$13 >> 2] | 0, HEAP32[$26 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0;
  if (!(HEAP32[$13 >> 2] | 0)) {
   HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
   $663 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $663 | 0;
  }
 }
 HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
 HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$10 >> 2] | 0) HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 $663 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $663 | 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i199 = 0, $$0$i$i$add$i203 = 0, $$0$i$i$add$i209 = 0, $$0$i$i$add$i213 = 0, $$0$i$i$add$i223 = 0, $$0$i$i$add$i229 = 0, $$0$i$i$add$i233 = 0, $$0$i$i$add$i243 = 0, $$0$i$i$add$i253 = 0, $$0$i$i$add$i257 = 0, $$0$i$i$i = 0, $$0$i$i$i216 = 0, $$0$i$i$i236 = 0, $$0$i$i$i246 = 0, $$0$i$i$i260 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i198 = 0, $$0$i$i$idx$i202 = 0, $$0$i$i$idx$i208 = 0, $$0$i$i$idx$i212 = 0, $$0$i$i$idx$i222 = 0, $$0$i$i$idx$i228 = 0, $$0$i$i$idx$i232 = 0, $$0$i$i$idx$i242 = 0, $$0$i$i$idx$i252 = 0, $$0$i$i$idx$i256 = 0, $$0182$off0 = 0, $$0183 = 0, $$1184 = 0, $$2185 = 0, $$3186 = 0, $$4187 = 0, $$6181 = 0, $$pre = 0, $$pre$phi298Z2D = 0, $$pre$phi300Z2D = 0, $100 = 0, $107 = 0, $116 = 0, $117 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $136 = 0, $141 = 0, $142 = 0, $149 = 0, $15 = 0, $152 = 0, $153 = 0, $157 = 0, $158 = 0, $165 = 0, $174 = 0, $175 = 0, $182 = 0, $186 = 0, $187 = 0, $19 = 0, $190 = 0, $191 = 0, $194 = 0, $197 = 0, $204 = 0, $212 = 0, $213 = 0, $219 = 0, $220 = 0, $223 = 0, $227 = 0, $234 = 0, $243 = 0, $244 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $5 = 0, $51 = 0, $52 = 0, $60 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $77 = 0, $85 = 0, $86 = 0, $92 = 0, $93 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = $1;
 L1 : do if (($5 - $0 | 0) > 2) {
  if ((HEAP8[$0 >> 0] | 0) == 103) {
   $13 = (HEAP8[$0 + 1 >> 0] | 0) == 115;
   $$0182$off0 = $13;
   $$0183 = $13 ? $0 + 2 | 0 : $0;
  } else {
   $$0182$off0 = 0;
   $$0183 = $0;
  }
  $15 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$0183, $1, $2) | 0;
  if (($15 | 0) != ($$0183 | 0)) {
   if (!$$0182$off0) {
    $$6181 = $15;
    break;
   }
   $19 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($19 | 0)) {
    $$6181 = $0;
    break;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($19 + -24 | 0, 0, 47951) | 0;
   $$6181 = $15;
   break;
  }
  if (($5 - $$0183 | 0) > 2) if ((HEAP8[$$0183 >> 0] | 0) == 115) if ((HEAP8[$$0183 + 1 >> 0] | 0) == 114) {
   $30 = $$0183 + 2 | 0;
   if ((HEAP8[$30 >> 0] | 0) == 78) {
    $33 = $$0183 + 3 | 0;
    $34 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33, $1, $2) | 0;
    if (($34 | 0) == ($33 | 0) | ($34 | 0) == ($1 | 0)) {
     $$6181 = $0;
     break;
    }
    $37 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34, $1, $2) | 0;
    $$pre = $2 + 4 | 0;
    do if (($37 | 0) == ($34 | 0)) {
     $$1184 = $34;
     $$pre$phi298Z2D = $2;
    } else {
     $39 = HEAP32[$$pre >> 2] | 0;
     if ((($39 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $39 + -24 | 0);
     $46 = HEAP32[$$pre >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($46 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$$pre >> 2] = $46 + -24;
     $51 = HEAP8[$3 + 11 >> 0] | 0;
     $52 = $51 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($46 + -48 | 0, $52 ? HEAP32[$3 >> 2] | 0 : $3, $52 ? HEAP32[$3 + 4 >> 2] | 0 : $51 & 255) | 0;
     if (($37 | 0) != ($1 | 0)) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$1184 = $37;
      $$pre$phi298Z2D = $2;
      break;
     }
     $60 = HEAP32[$$pre >> 2] | 0;
     $$0$i$i$idx$i198 = 0;
     while (1) {
      if (($$0$i$i$idx$i198 | 0) == -1) break;
      $$0$i$i$add$i199 = $$0$i$i$idx$i198 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($60 + ($$0$i$i$add$i199 * 24 | 0) | 0);
      $$0$i$i$idx$i198 = $$0$i$i$add$i199;
     }
     HEAP32[$$pre >> 2] = $60 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$6181 = $0;
     break L1;
    } while (0);
    $63 = $4 + 11 | 0;
    $64 = $4 + 4 | 0;
    $$2185 = $$1184;
    while (1) {
     if ((HEAP8[$$2185 >> 0] | 0) == 69) break;
     $67 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$2185, $1, $2) | 0;
     if (($67 | 0) == ($$2185 | 0) | ($67 | 0) == ($1 | 0)) {
      $$6181 = $0;
      break L1;
     }
     $70 = HEAP32[$$pre >> 2] | 0;
     if ((($70 - (HEAP32[$$pre$phi298Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $70 + -24 | 0);
     $77 = HEAP32[$$pre >> 2] | 0;
     $$0$i$i$idx$i202 = 0;
     while (1) {
      if (($$0$i$i$idx$i202 | 0) == -1) break;
      $$0$i$i$add$i203 = $$0$i$i$idx$i202 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($77 + ($$0$i$i$add$i203 * 24 | 0) | 0);
      $$0$i$i$idx$i202 = $$0$i$i$add$i203;
     }
     HEAP32[$$pre >> 2] = $77 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($3, 0, 47951) | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$3 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     $85 = HEAP8[$63 >> 0] | 0;
     $86 = $85 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$$pre >> 2] | 0) + -24 | 0, $86 ? HEAP32[$4 >> 2] | 0 : $4, $86 ? HEAP32[$64 >> 2] | 0 : $85 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2185 = $67;
    }
    $92 = $$2185 + 1 | 0;
    $93 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($92, $1, $2) | 0;
    if (($93 | 0) == ($92 | 0)) {
     $96 = HEAP32[$$pre >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($96 | 0)) {
      $$6181 = $0;
      break;
     }
     $$0$i$i$idx$i208 = 0;
     while (1) {
      if (($$0$i$i$idx$i208 | 0) == -1) break;
      $$0$i$i$add$i209 = $$0$i$i$idx$i208 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($96 + ($$0$i$i$add$i209 * 24 | 0) | 0);
      $$0$i$i$idx$i208 = $$0$i$i$add$i209;
     }
     HEAP32[$$pre >> 2] = $96 + -24;
     $$6181 = $0;
     break;
    }
    $100 = HEAP32[$$pre >> 2] | 0;
    if ((($100 - (HEAP32[$$pre$phi298Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$6181 = $0;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $100 + -24 | 0);
    $107 = HEAP32[$$pre >> 2] | 0;
    $$0$i$i$idx$i212 = 0;
    while (1) {
     if (($$0$i$i$idx$i212 | 0) == -1) break;
     $$0$i$i$add$i213 = $$0$i$i$idx$i212 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($107 + ($$0$i$i$add$i213 * 24 | 0) | 0);
     $$0$i$i$idx$i212 = $$0$i$i$add$i213;
    }
    HEAP32[$$pre >> 2] = $107 + -24;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($3, 0, 47951) | 0;
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $$0$i$i$i216 = 0;
    while (1) {
     if (($$0$i$i$i216 | 0) == 3) break;
     HEAP32[$3 + ($$0$i$i$i216 << 2) >> 2] = 0;
     $$0$i$i$i216 = $$0$i$i$i216 + 1 | 0;
    }
    $116 = HEAP8[$4 + 11 >> 0] | 0;
    $117 = $116 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$$pre >> 2] | 0) + -24 | 0, $117 ? HEAP32[$4 >> 2] | 0 : $4, $117 ? HEAP32[$4 + 4 >> 2] | 0 : $116 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$6181 = $93;
    break;
   }
   $124 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30, $1, $2) | 0;
   if (($124 | 0) != ($30 | 0)) {
    $126 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($124, $1, $2) | 0;
    if (($126 | 0) == ($124 | 0)) $$3186 = $124; else {
     $128 = $2 + 4 | 0;
     $129 = HEAP32[$128 >> 2] | 0;
     if ((($129 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $129 + -24 | 0);
     $136 = HEAP32[$128 >> 2] | 0;
     $$0$i$i$idx$i222 = 0;
     while (1) {
      if (($$0$i$i$idx$i222 | 0) == -1) break;
      $$0$i$i$add$i223 = $$0$i$i$idx$i222 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($136 + ($$0$i$i$add$i223 * 24 | 0) | 0);
      $$0$i$i$idx$i222 = $$0$i$i$add$i223;
     }
     HEAP32[$128 >> 2] = $136 + -24;
     $141 = HEAP8[$3 + 11 >> 0] | 0;
     $142 = $141 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($136 + -48 | 0, $142 ? HEAP32[$3 >> 2] | 0 : $3, $142 ? HEAP32[$3 + 4 >> 2] | 0 : $141 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3186 = $126;
    }
    $149 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$3186, $1, $2) | 0;
    if (($149 | 0) == ($$3186 | 0)) {
     $152 = $2 + 4 | 0;
     $153 = HEAP32[$152 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($153 | 0)) {
      $$6181 = $0;
      break;
     }
     $$0$i$i$idx$i228 = 0;
     while (1) {
      if (($$0$i$i$idx$i228 | 0) == -1) break;
      $$0$i$i$add$i229 = $$0$i$i$idx$i228 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($153 + ($$0$i$i$add$i229 * 24 | 0) | 0);
      $$0$i$i$idx$i228 = $$0$i$i$add$i229;
     }
     HEAP32[$152 >> 2] = $153 + -24;
     $$6181 = $0;
     break;
    }
    $157 = $2 + 4 | 0;
    $158 = HEAP32[$157 >> 2] | 0;
    if ((($158 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$6181 = $0;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $158 + -24 | 0);
    $165 = HEAP32[$157 >> 2] | 0;
    $$0$i$i$idx$i232 = 0;
    while (1) {
     if (($$0$i$i$idx$i232 | 0) == -1) break;
     $$0$i$i$add$i233 = $$0$i$i$idx$i232 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($165 + ($$0$i$i$add$i233 * 24 | 0) | 0);
     $$0$i$i$idx$i232 = $$0$i$i$add$i233;
    }
    HEAP32[$157 >> 2] = $165 + -24;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($3, 0, 47951) | 0;
    HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $$0$i$i$i236 = 0;
    while (1) {
     if (($$0$i$i$i236 | 0) == 3) break;
     HEAP32[$3 + ($$0$i$i$i236 << 2) >> 2] = 0;
     $$0$i$i$i236 = $$0$i$i$i236 + 1 | 0;
    }
    $174 = HEAP8[$4 + 11 >> 0] | 0;
    $175 = $174 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$157 >> 2] | 0) + -24 | 0, $175 ? HEAP32[$4 >> 2] | 0 : $4, $175 ? HEAP32[$4 + 4 >> 2] | 0 : $174 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$6181 = $149;
    break;
   }
   $182 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($30, $1, $2) | 0;
   if (($182 | 0) == ($30 | 0) | ($182 | 0) == ($1 | 0)) $$6181 = $0; else {
    if ($$0182$off0) {
     $186 = $2 + 4 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($187 | 0)) {
      $$6181 = $0;
      break;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($187 + -24 | 0, 0, 47951) | 0;
     $$pre$phi300Z2D = $186;
    } else $$pre$phi300Z2D = $2 + 4 | 0;
    $190 = $4 + 11 | 0;
    $191 = $4 + 4 | 0;
    $$4187 = $182;
    while (1) {
     if ((HEAP8[$$4187 >> 0] | 0) == 69) break;
     $194 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$4187, $1, $2) | 0;
     if (($194 | 0) == ($$4187 | 0) | ($194 | 0) == ($1 | 0)) {
      $$6181 = $0;
      break L1;
     }
     $197 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
     if ((($197 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6181 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $197 + -24 | 0);
     $204 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
     $$0$i$i$idx$i242 = 0;
     while (1) {
      if (($$0$i$i$idx$i242 | 0) == -1) break;
      $$0$i$i$add$i243 = $$0$i$i$idx$i242 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($204 + ($$0$i$i$add$i243 * 24 | 0) | 0);
      $$0$i$i$idx$i242 = $$0$i$i$add$i243;
     }
     HEAP32[$$pre$phi300Z2D >> 2] = $204 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($3, 0, 47951) | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $$0$i$i$i246 = 0;
     while (1) {
      if (($$0$i$i$i246 | 0) == 3) break;
      HEAP32[$3 + ($$0$i$i$i246 << 2) >> 2] = 0;
      $$0$i$i$i246 = $$0$i$i$i246 + 1 | 0;
     }
     $212 = HEAP8[$190 >> 0] | 0;
     $213 = $212 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$$pre$phi300Z2D >> 2] | 0) + -24 | 0, $213 ? HEAP32[$4 >> 2] | 0 : $4, $213 ? HEAP32[$191 >> 2] | 0 : $212 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$4187 = $194;
    }
    $219 = $$4187 + 1 | 0;
    $220 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($219, $1, $2) | 0;
    if (($220 | 0) == ($219 | 0)) {
     $223 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($223 | 0)) {
      $$6181 = $0;
      break;
     }
     $$0$i$i$idx$i252 = 0;
     while (1) {
      if (($$0$i$i$idx$i252 | 0) == -1) break;
      $$0$i$i$add$i253 = $$0$i$i$idx$i252 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($223 + ($$0$i$i$add$i253 * 24 | 0) | 0);
      $$0$i$i$idx$i252 = $$0$i$i$add$i253;
     }
     HEAP32[$$pre$phi300Z2D >> 2] = $223 + -24;
     $$6181 = $0;
     break;
    }
    $227 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
    if ((($227 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$6181 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $227 + -24 | 0);
     $234 = HEAP32[$$pre$phi300Z2D >> 2] | 0;
     $$0$i$i$idx$i256 = 0;
     while (1) {
      if (($$0$i$i$idx$i256 | 0) == -1) break;
      $$0$i$i$add$i257 = $$0$i$i$idx$i256 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($234 + ($$0$i$i$add$i257 * 24 | 0) | 0);
      $$0$i$i$idx$i256 = $$0$i$i$add$i257;
     }
     HEAP32[$$pre$phi300Z2D >> 2] = $234 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($3, 0, 47951) | 0;
     HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
     $$0$i$i$i260 = 0;
     while (1) {
      if (($$0$i$i$i260 | 0) == 3) break;
      HEAP32[$3 + ($$0$i$i$i260 << 2) >> 2] = 0;
      $$0$i$i$i260 = $$0$i$i$i260 + 1 | 0;
     }
     $243 = HEAP8[$4 + 11 >> 0] | 0;
     $244 = $243 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$$pre$phi300Z2D >> 2] | 0) + -24 | 0, $244 ? HEAP32[$4 >> 2] | 0 : $4, $244 ? HEAP32[$4 + 4 >> 2] | 0 : $243 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$6181 = $220;
    }
   }
  } else $$6181 = $0; else $$6181 = $0; else $$6181 = $0;
 } else $$6181 = $0; while (0);
 STACKTOP = sp;
 return $$6181 | 0;
}

function __ZN10DelaunatorC2ERKNSt3__26vectorIdNS0_9allocatorIdEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0300 = 0, $$0301464 = 0, $$0302$lcssa = 0.0, $$0302505 = 0.0, $$0306$lcssa = 0.0, $$0306504 = 0.0, $$0308$lcssa = 0.0, $$0308503 = 0.0, $$0310$lcssa = 0.0, $$0310502 = 0.0, $$0314470 = 0, $$0315469 = 0.0, $$0317468 = 0.0, $$0337495 = 0.0, $$0342$lcssa = 0, $$0342494 = 0, $$0344480 = 0, $$0345479 = 0.0, $$0348493 = 0, $$0349487 = 0, $$0432486 = 0, $$0435478 = 0, $$1303 = 0.0, $$1305 = 0, $$1307 = 0.0, $$1309 = 0.0, $$1311 = 0.0, $$1316 = 0.0, $$1318 = 0.0, $$1343 = 0, $$1433 = 0, $$1436 = 0, $$2 = 0, $$2339488 = 0.0, $$2347 = 0.0, $$3 = 0, $$4341 = 0.0, $$lcssa459 = 0, $$pre525 = 0, $$sroa$0362$0474 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $114 = 0, $115 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $129 = 0, $13 = 0, $131 = 0, $134 = 0, $138 = 0, $139 = 0, $14 = 0, $147 = 0.0, $148 = 0, $15 = 0, $154 = 0, $156 = 0, $16 = 0, $162 = 0, $166 = 0, $169 = 0, $172 = 0, $180 = 0, $182 = 0, $183 = 0, $185 = 0.0, $188 = 0.0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $21 = 0, $213 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $225 = 0, $23 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $246 = 0, $250 = 0, $251 = 0, $253 = 0, $254 = 0, $26 = 0.0, $260 = 0, $267 = 0, $274 = 0, $277 = 0, $28 = 0.0, $282 = 0, $284 = 0, $285 = 0, $29 = 0, $291 = 0, $298 = 0, $3 = 0, $303 = 0, $309 = 0, $31 = 0, $312 = 0, $315 = 0, $319 = 0, $32 = 0, $320 = 0, $326 = 0, $34 = 0.0, $37 = 0.0, $4 = 0, $42 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $64 = 0.0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0.0, $73 = 0.0, $76 = 0, $77 = 0, $8 = 0, $83 = 0.0, $9 = 0, $91 = 0, $92 = 0, $98 = 0.0, $or$cond = 0, $spec$select443 = 0.0, $spec$select444 = 0.0, $spec$select445 = 0.0, $spec$select446 = 0.0, $spec$select447 = 0, $spec$select448 = 0, $spec$select449 = 0, $storemerge501 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp;
 $3 = sp + 28 | 0;
 $4 = sp + 16 | 0;
 HEAP32[$0 >> 2] = $1;
 $5 = $0 + 4 | 0;
 $6 = $0 + 16 | 0;
 $7 = $0 + 28 | 0;
 $8 = $0 + 40 | 0;
 $9 = $0 + 52 | 0;
 $10 = $0 + 64 | 0;
 $11 = $0 + 68 | 0;
 $12 = $0 + 72 | 0;
 $13 = $0 + 80 | 0;
 $14 = $0 + 88 | 0;
 $15 = $0 + 96 | 0;
 $16 = $1 + 4 | 0;
 dest = $5;
 stop = dest + 108 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $20 = (HEAP32[$16 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) >> 3;
 $21 = $20 >>> 1;
 HEAP32[$3 >> 2] = 0;
 $22 = $3 + 4 | 0;
 HEAP32[$22 >> 2] = 0;
 $23 = $3 + 8 | 0;
 HEAP32[$23 >> 2] = 0;
 __ZNSt3__26vectorImNS_9allocatorImEEE7reserveEm($3, $21);
 HEAP32[$2 >> 2] = 0;
 $24 = ($21 | 0) == 0;
 if ($24) {
  $$0302$lcssa = 2.2250738585072014e-308;
  $$0306$lcssa = 2.2250738585072014e-308;
  $$0308$lcssa = 1797693134862315708145274.0e284;
  $$0310$lcssa = 1797693134862315708145274.0e284;
 } else {
  $$0302505 = 2.2250738585072014e-308;
  $$0306504 = 2.2250738585072014e-308;
  $$0308503 = 1797693134862315708145274.0e284;
  $$0310502 = 1797693134862315708145274.0e284;
  $storemerge501 = 0;
  while (1) {
   $31 = $storemerge501 << 1;
   $32 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
   $34 = +HEAPF64[$32 + ($31 << 3) >> 3];
   $37 = +HEAPF64[$32 + (($31 | 1) << 3) >> 3];
   $$1309 = $34 < $$0308503 ? $34 : $$0308503;
   $$1311 = $37 < $$0310502 ? $37 : $$0310502;
   $$1303 = $34 > $$0302505 ? $34 : $$0302505;
   $$1307 = $37 > $$0306504 ? $37 : $$0306504;
   $42 = HEAP32[$22 >> 2] | 0;
   if (($42 | 0) == (HEAP32[$23 >> 2] | 0)) __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($3, $2); else {
    HEAP32[$42 >> 2] = $storemerge501;
    HEAP32[$22 >> 2] = $42 + 4;
   }
   $storemerge501 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
   HEAP32[$2 >> 2] = $storemerge501;
   if ($storemerge501 >>> 0 >= $21 >>> 0) {
    $$0302$lcssa = $$1303;
    $$0306$lcssa = $$1307;
    $$0308$lcssa = $$1309;
    $$0310$lcssa = $$1311;
    break;
   } else {
    $$0302505 = $$1303;
    $$0306504 = $$1307;
    $$0308503 = $$1309;
    $$0310502 = $$1311;
   }
  }
 }
 $26 = ($$0308$lcssa + $$0302$lcssa) * .5;
 $28 = ($$0310$lcssa + $$0306$lcssa) * .5;
 $29 = HEAP32[$0 >> 2] | 0;
 if ($24) {
  $$0342$lcssa = -1;
  $$lcssa459 = $29;
 } else {
  $$0337495 = 1797693134862315708145274.0e284;
  $$0342494 = -1;
  $$0348493 = 0;
  $58 = $29;
  while (1) {
   $56 = $$0348493 << 1;
   $57 = HEAP32[$58 >> 2] | 0;
   $64 = +__Z4distdddd($26, $28, +HEAPF64[$57 + ($56 << 3) >> 3], +HEAPF64[$57 + (($56 | 1) << 3) >> 3]);
   $65 = $64 < $$0337495;
   $$1343 = $65 ? $$0348493 : $$0342494;
   $$0348493 = $$0348493 + 1 | 0;
   $67 = HEAP32[$0 >> 2] | 0;
   if (($$0348493 | 0) == ($21 | 0)) {
    $$0342$lcssa = $$1343;
    $$lcssa459 = $67;
    break;
   } else {
    $$0337495 = $65 ? $64 : $$0337495;
    $$0342494 = $$1343;
    $58 = $67;
   }
  }
 }
 $49 = $$0342$lcssa << 1;
 $50 = HEAP32[$$lcssa459 >> 2] | 0;
 $52 = +HEAPF64[$50 + ($49 << 3) >> 3];
 $55 = +HEAPF64[$50 + (($49 | 1) << 3) >> 3];
 if (!$24) {
  $$0349487 = 0;
  $$0432486 = -1;
  $$2339488 = 1797693134862315708145274.0e284;
  while (1) {
   if (($$0349487 | 0) == ($$0342$lcssa | 0)) {
    $$1433 = $$0432486;
    $$4341 = $$2339488;
   } else {
    $76 = $$0349487 << 1;
    $77 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
    $83 = +__Z4distdddd($52, $55, +HEAPF64[$77 + ($76 << 3) >> 3], +HEAPF64[$77 + (($76 | 1) << 3) >> 3]);
    $or$cond = $83 < $$2339488 & $83 > 0.0;
    $$1433 = $or$cond ? $$0349487 : $$0432486;
    $$4341 = $or$cond ? $83 : $$2339488;
   }
   $$0349487 = $$0349487 + 1 | 0;
   if (($$0349487 | 0) == ($21 | 0)) break; else {
    $$0432486 = $$1433;
    $$2339488 = $$4341;
   }
  }
  $$pre525 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
  $68 = $$1433 << 1;
  $70 = +HEAPF64[$$pre525 + ($68 << 3) >> 3];
  $73 = +HEAPF64[$$pre525 + (($68 | 1) << 3) >> 3];
  if (!$24) {
   $$0344480 = 0;
   $$0345479 = 1797693134862315708145274.0e284;
   $$0435478 = -1;
   while (1) {
    if (($$0344480 | 0) == ($$0342$lcssa | 0) | ($$0344480 | 0) == ($$1433 | 0)) {
     $$1436 = $$0435478;
     $$2347 = $$0345479;
    } else {
     $91 = $$0344480 << 1;
     $92 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
     $98 = +__Z12circumradiusdddddd($52, $55, $70, $73, +HEAPF64[$92 + ($91 << 3) >> 3], +HEAPF64[$92 + (($91 | 1) << 3) >> 3]);
     if ($98 < $$0345479) {
      $$1436 = $$0344480;
      $$2347 = $98;
     } else {
      $$1436 = $$0435478;
      $$2347 = $$0345479;
     }
    }
    $$0344480 = $$0344480 + 1 | 0;
    if (($$0344480 | 0) == ($21 | 0)) break; else {
     $$0345479 = $$2347;
     $$0435478 = $$1436;
    }
   }
   if ($$2347 < 1797693134862315708145274.0e284) {
    $103 = $$1436 << 1;
    $104 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
    $106 = +HEAPF64[$104 + ($103 << 3) >> 3];
    $109 = +HEAPF64[$104 + (($103 | 1) << 3) >> 3];
    $110 = __Z6orientdddddd($52, $55, $70, $73, $106, $109) | 0;
    $spec$select443 = $110 ? $73 : $109;
    $spec$select444 = $110 ? $70 : $106;
    $spec$select445 = $110 ? $109 : $73;
    $spec$select446 = $110 ? $106 : $70;
    $spec$select447 = $110 ? $$1433 : $$1436;
    $spec$select448 = $110 ? $$1436 : $$1433;
    __Z12circumcenterdddddd($2, $52, $55, $spec$select446, $spec$select445, $spec$select444, $spec$select443);
    HEAPF64[$13 >> 3] = +HEAPF64[$2 >> 3];
    HEAPF64[$14 >> 3] = +HEAPF64[$2 + 8 >> 3];
    HEAP32[$4 >> 2] = 0;
    $114 = $4 + 4 | 0;
    HEAP32[$114 >> 2] = 0;
    $115 = $4 + 8 | 0;
    HEAP32[$115 >> 2] = 0;
    __ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm($4, (HEAP32[$22 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) >> 2);
    $120 = HEAP32[$3 >> 2] | 0;
    $121 = HEAP32[$22 >> 2] | 0;
    if (($120 | 0) == ($121 | 0)) {
     $124 = $120;
     $125 = $120;
    } else {
     $$sroa$0362$0474 = $120;
     do {
      $138 = HEAP32[$$sroa$0362$0474 >> 2] << 1;
      $139 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
      $147 = +__Z4distdddd(+HEAPF64[$139 + ($138 << 3) >> 3], +HEAPF64[$139 + (($138 | 1) << 3) >> 3], +HEAPF64[$13 >> 3], +HEAPF64[$14 >> 3]);
      HEAPF64[$2 >> 3] = $147;
      $148 = HEAP32[$114 >> 2] | 0;
      if (($148 | 0) == (HEAP32[$115 >> 2] | 0)) __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($4, $2); else {
       HEAPF64[$148 >> 3] = $147;
       HEAP32[$114 >> 2] = $148 + 8;
      }
      $$sroa$0362$0474 = $$sroa$0362$0474 + 4 | 0;
     } while (($$sroa$0362$0474 | 0) != ($121 | 0));
     $124 = HEAP32[$3 >> 2] | 0;
     $125 = HEAP32[$22 >> 2] | 0;
    }
    $123 = HEAP32[$0 >> 2] | 0;
    HEAP32[$2 >> 2] = $4;
    HEAP32[$2 + 4 >> 2] = $123;
    __ZNSt3__26__sortIR7comparePmEEvT0_S4_T_($124, $125, $2);
    $129 = _llround(+Math_ceil(+(+Math_sqrt(+(+($21 >>> 0)))))) | 0;
    getTempRet0() | 0;
    HEAP32[$15 >> 2] = $129;
    __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($11, $129);
    $131 = HEAP32[$11 >> 2] | 0;
    $134 = (HEAP32[$12 >> 2] | 0) - $131 | 0;
    if (($134 | 0) > 0) _memset($131 | 0, -1, $134 | 0) | 0;
    __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($7, $21);
    __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($8, $21);
    __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($9, $21);
    HEAP32[$10 >> 2] = $$0342$lcssa;
    $154 = HEAP32[$7 >> 2] | 0;
    HEAP32[$154 + ($spec$select447 << 2) >> 2] = $spec$select448;
    $156 = HEAP32[$8 >> 2] | 0;
    HEAP32[$156 + ($$0342$lcssa << 2) >> 2] = $spec$select448;
    HEAP32[$154 + ($$0342$lcssa << 2) >> 2] = $spec$select447;
    HEAP32[$156 + ($spec$select448 << 2) >> 2] = $spec$select447;
    HEAP32[$154 + ($spec$select448 << 2) >> 2] = $$0342$lcssa;
    HEAP32[$156 + ($spec$select447 << 2) >> 2] = $$0342$lcssa;
    $162 = HEAP32[$9 >> 2] | 0;
    HEAP32[$162 + ($$0342$lcssa << 2) >> 2] = 0;
    HEAP32[$162 + ($spec$select448 << 2) >> 2] = 1;
    HEAP32[$162 + ($spec$select447 << 2) >> 2] = 2;
    $166 = __ZNK10Delaunator8hash_keyEdd($0, $52, $55) | 0;
    HEAP32[(HEAP32[$11 >> 2] | 0) + ($166 << 2) >> 2] = $$0342$lcssa;
    $169 = __ZNK10Delaunator8hash_keyEdd($0, $spec$select446, $spec$select445) | 0;
    HEAP32[(HEAP32[$11 >> 2] | 0) + ($169 << 2) >> 2] = $spec$select448;
    $172 = __ZNK10Delaunator8hash_keyEdd($0, $spec$select444, $spec$select443) | 0;
    HEAP32[(HEAP32[$11 >> 2] | 0) + ($172 << 2) >> 2] = $spec$select447;
    $spec$select449 = $20 >>> 0 < 6 ? 3 : (($20 & -2) * 3 | 0) + -15 | 0;
    __ZNSt3__26vectorImNS_9allocatorImEEE7reserveEm($5, $spec$select449);
    __ZNSt3__26vectorImNS_9allocatorImEEE7reserveEm($6, $spec$select449);
    __ZN10Delaunator12add_triangleEmmmmmm($0, $$0342$lcssa, $spec$select448, $spec$select447, -1, -1, -1) | 0;
    if (!$24) {
     $$0314470 = 0;
     $$0315469 = nan;
     $$0317468 = nan;
     while (1) {
      $180 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($$0314470 << 2) >> 2] | 0;
      $182 = $180 << 1;
      $183 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
      $185 = +HEAPF64[$183 + ($182 << 3) >> 3];
      $188 = +HEAPF64[$183 + (($182 | 1) << 3) >> 3];
      if (!$$0314470) label = 37; else if (__Z15check_pts_equaldddd($185, $188, $$0317468, $$0315469) | 0) {
       $$1316 = $$0315469;
       $$1318 = $$0317468;
      } else label = 37;
      L51 : do if ((label | 0) == 37) {
       label = 0;
       if (__Z15check_pts_equaldddd($185, $188, $52, $55) | 0) {
        $$1316 = $188;
        $$1318 = $185;
       } else if (__Z15check_pts_equaldddd($185, $188, $spec$select446, $spec$select445) | 0) {
        $$1316 = $188;
        $$1318 = $185;
       } else if (__Z15check_pts_equaldddd($185, $188, $spec$select444, $spec$select443) | 0) {
        $$1316 = $188;
        $$1318 = $185;
       } else {
        $194 = __ZNK10Delaunator8hash_keyEdd($0, $185, $188) | 0;
        $195 = HEAP32[$15 >> 2] | 0;
        L56 : do if (!$195) $$1305 = 0; else {
         $$0301464 = 0;
         $198 = $195;
         while (1) {
          $199 = __Z8fast_modmm($$0301464 + $194 | 0, $198) | 0;
          $202 = HEAP32[(HEAP32[$11 >> 2] | 0) + ($199 << 2) >> 2] | 0;
          if (($202 | 0) != -1) if (($202 | 0) != (HEAP32[(HEAP32[$8 >> 2] | 0) + ($202 << 2) >> 2] | 0)) {
           $$1305 = $202;
           break L56;
          }
          $$0301464 = $$0301464 + 1 | 0;
          $198 = HEAP32[$15 >> 2] | 0;
          if ($$0301464 >>> 0 >= $198 >>> 0) {
           $$1305 = $202;
           break;
          }
         }
        } while (0);
        $213 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($$1305 << 2) >> 2] | 0;
        $$0300 = $213;
        while (1) {
         $216 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($$0300 << 2) >> 2] | 0;
         $218 = $$0300 << 1;
         $219 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
         $225 = $216 << 1;
         if (__Z6orientdddddd($185, $188, +HEAPF64[$219 + ($218 << 3) >> 3], +HEAPF64[$219 + (($218 | 1) << 3) >> 3], +HEAPF64[$219 + ($225 << 3) >> 3], +HEAPF64[$219 + (($225 | 1) << 3) >> 3]) | 0) break;
         if (($216 | 0) == ($213 | 0)) {
          $$1316 = $188;
          $$1318 = $185;
          break L51;
         } else $$0300 = $216;
        }
        if (($$0300 | 0) == -1) {
         $$1316 = $188;
         $$1318 = $185;
        } else {
         $240 = __ZN10Delaunator12add_triangleEmmmmmm($0, $$0300, $180, HEAP32[(HEAP32[$8 >> 2] | 0) + ($$0300 << 2) >> 2] | 0, -1, -1, HEAP32[(HEAP32[$9 >> 2] | 0) + ($$0300 << 2) >> 2] | 0) | 0;
         $242 = __ZN10Delaunator8legalizeEm($0, $240 + 2 | 0) | 0;
         $243 = HEAP32[$9 >> 2] | 0;
         HEAP32[$243 + ($180 << 2) >> 2] = $242;
         HEAP32[$243 + ($$0300 << 2) >> 2] = $240;
         $246 = HEAP32[$8 >> 2] | 0;
         $$0 = HEAP32[$246 + ($$0300 << 2) >> 2] | 0;
         $250 = $246;
         while (1) {
          $251 = HEAP32[$250 + ($$0 << 2) >> 2] | 0;
          $253 = $$0 << 1;
          $254 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
          $260 = $251 << 1;
          if (!(__Z6orientdddddd($185, $188, +HEAPF64[$254 + ($253 << 3) >> 3], +HEAPF64[$254 + (($253 | 1) << 3) >> 3], +HEAPF64[$254 + ($260 << 3) >> 3], +HEAPF64[$254 + (($260 | 1) << 3) >> 3]) | 0)) break;
          $267 = HEAP32[$9 >> 2] | 0;
          $274 = __ZN10Delaunator8legalizeEm($0, (__ZN10Delaunator12add_triangleEmmmmmm($0, $$0, $180, $251, HEAP32[$267 + ($180 << 2) >> 2] | 0, -1, HEAP32[$267 + ($$0 << 2) >> 2] | 0) | 0) + 2 | 0) | 0;
          HEAP32[(HEAP32[$9 >> 2] | 0) + ($180 << 2) >> 2] = $274;
          $277 = HEAP32[$8 >> 2] | 0;
          HEAP32[$277 + ($$0 << 2) >> 2] = $$0;
          $$0 = $251;
          $250 = $277;
         }
         L73 : do if (($$0300 | 0) == ($213 | 0)) {
          $$2 = $213;
          while (1) {
           $282 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($$2 << 2) >> 2] | 0;
           $284 = $282 << 1;
           $285 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
           $291 = $$2 << 1;
           if (!(__Z6orientdddddd($185, $188, +HEAPF64[$285 + ($284 << 3) >> 3], +HEAPF64[$285 + (($284 | 1) << 3) >> 3], +HEAPF64[$285 + ($291 << 3) >> 3], +HEAPF64[$285 + (($291 | 1) << 3) >> 3]) | 0)) {
            $$3 = $$2;
            break L73;
           }
           $298 = HEAP32[$9 >> 2] | 0;
           $303 = __ZN10Delaunator12add_triangleEmmmmmm($0, $282, $180, $$2, -1, HEAP32[$298 + ($$2 << 2) >> 2] | 0, HEAP32[$298 + ($282 << 2) >> 2] | 0) | 0;
           __ZN10Delaunator8legalizeEm($0, $303 + 2 | 0) | 0;
           HEAP32[(HEAP32[$9 >> 2] | 0) + ($282 << 2) >> 2] = $303;
           HEAP32[(HEAP32[$8 >> 2] | 0) + ($$2 << 2) >> 2] = $$2;
           $$2 = $282;
          }
         } else $$3 = $$0300; while (0);
         $309 = HEAP32[$7 >> 2] | 0;
         HEAP32[$309 + ($180 << 2) >> 2] = $$3;
         HEAP32[$10 >> 2] = $$3;
         HEAP32[$309 + ($$0 << 2) >> 2] = $180;
         $312 = HEAP32[$8 >> 2] | 0;
         HEAP32[$312 + ($$3 << 2) >> 2] = $180;
         HEAP32[$312 + ($180 << 2) >> 2] = $$0;
         $315 = __ZNK10Delaunator8hash_keyEdd($0, $185, $188) | 0;
         HEAP32[(HEAP32[$11 >> 2] | 0) + ($315 << 2) >> 2] = $180;
         $319 = $$3 << 1;
         $320 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
         $326 = __ZNK10Delaunator8hash_keyEdd($0, +HEAPF64[$320 + ($319 << 3) >> 3], +HEAPF64[$320 + (($319 | 1) << 3) >> 3]) | 0;
         HEAP32[(HEAP32[$11 >> 2] | 0) + ($326 << 2) >> 2] = $$3;
         $$1316 = $188;
         $$1318 = $185;
        }
       }
      } while (0);
      $$0314470 = $$0314470 + 1 | 0;
      if ($$0314470 >>> 0 >= $21 >>> 0) break; else {
       $$0315469 = $$1316;
       $$0317468 = $$1318;
      }
     }
    }
    __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($4);
    __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($3);
    STACKTOP = sp;
    return;
   }
  }
 }
 $101 = ___cxa_allocate_exception(8) | 0;
 __ZNSt13runtime_errorC2EPKc($101, 41656);
 ___cxa_throw($101 | 0, 11416, 18);
}

function _printf_core($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0231 = 0, $$0232336 = 0, $$0234 = 0, $$0237 = 0, $$0239 = 0, $$0242315 = 0, $$0242315373 = 0, $$0242335 = 0, $$0245 = 0, $$0245$ph = 0, $$0245$ph$be = 0, $$0249 = 0, $$0249$ph = 0, $$0251$lcssa = 0, $$0251323 = 0, $$0254 = 0, $$0255 = 0, $$0256 = 0, $$0261 = 0, $$0264$lcssa = 0, $$0264330 = 0, $$0271$ph = 0, $$1 = 0, $$1233342 = 0, $$1235 = 0, $$1238 = 0, $$1240 = 0, $$1243341 = 0, $$1250 = 0, $$1257 = 0, $$1262 = 0, $$1265 = 0, $$1272 = 0, $$2236 = 0, $$2241 = 0, $$2244322 = 0, $$2258 = 0, $$2263 = 0, $$2273 = 0, $$3267 = 0, $$3274 = 0, $$3319 = 0, $$4260372 = 0, $$4268 = 0, $$5 = 0, $$6270 = 0, $$lcssa310 = 0, $$pre$phiZ2D = 0, $$pre362 = 0, $$pre365 = 0, $$sink = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $116 = 0, $12 = 0, $124 = 0, $128 = 0, $13 = 0, $139 = 0, $14 = 0, $143 = 0, $15 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $156 = 0, $16 = 0, $165 = 0, $166 = 0, $171 = 0, $174 = 0, $179 = 0, $180 = 0, $185 = 0, $187 = 0, $194 = 0, $195 = 0, $206 = 0, $218 = 0, $22 = 0, $225 = 0, $23 = 0, $232 = 0, $233 = 0, $246 = 0, $25 = 0, $252 = 0, $256 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $279 = 0, $280 = 0, $284 = 0, $29 = 0, $292 = 0, $298 = 0, $307 = 0, $309 = 0, $310 = 0, $311 = 0, $32 = 0, $324 = 0, $326 = 0, $327 = 0, $331 = 0, $335 = 0, $337 = 0, $348 = 0, $350 = 0, $357 = 0, $360 = 0, $367 = 0, $368 = 0, $45 = 0, $53 = 0, $54 = 0, $56 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $78 = 0, $8 = 0, $82 = 0, $9 = 0, $or$cond = 0, $or$cond280 = 0, $spec$select = 0, $spec$select286 = 0, $storemerge275$lcssa = 0, $storemerge275329 = 0, $storemerge276 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $7 = sp + 56 | 0;
 $8 = sp + 40 | 0;
 $9 = sp;
 $10 = sp + 48 | 0;
 $11 = sp + 60 | 0;
 HEAP32[$7 >> 2] = $1;
 $12 = ($0 | 0) != 0;
 $13 = $9 + 40 | 0;
 $14 = $13;
 $15 = $9 + 39 | 0;
 $16 = $10 + 4 | 0;
 $$0245$ph = 0;
 $$0249$ph = 0;
 $$0271$ph = 0;
 L1 : while (1) {
  $$0245 = $$0245$ph;
  $$0249 = $$0249$ph;
  while (1) {
   do if (($$0249 | 0) > -1) if (($$0245 | 0) > (2147483647 - $$0249 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 75;
    $$1250 = -1;
    break;
   } else {
    $$1250 = $$0245 + $$0249 | 0;
    break;
   } else $$1250 = $$0249; while (0);
   $22 = HEAP32[$7 >> 2] | 0;
   $23 = HEAP8[$22 >> 0] | 0;
   if (!($23 << 24 >> 24)) {
    label = 92;
    break L1;
   }
   $25 = $23;
   $27 = $22;
   L12 : while (1) {
    switch ($25 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $$0251$lcssa = $27;
      break L12;
      break;
     }
    default:
     {}
    }
    $26 = $27 + 1 | 0;
    HEAP32[$7 >> 2] = $26;
    $25 = HEAP8[$26 >> 0] | 0;
    $27 = $26;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $$0251323 = $27;
    $29 = $27;
    while (1) {
     if ((HEAP8[$29 + 1 >> 0] | 0) != 37) {
      $$0251$lcssa = $$0251323;
      break L15;
     }
     $32 = $$0251323 + 1 | 0;
     $29 = $29 + 2 | 0;
     HEAP32[$7 >> 2] = $29;
     if ((HEAP8[$29 >> 0] | 0) != 37) {
      $$0251$lcssa = $32;
      break;
     } else $$0251323 = $32;
    }
   } while (0);
   $$0245 = $$0251$lcssa - $22 | 0;
   if ($12) _out_653($0, $22, $$0245);
   if (!$$0245) break; else $$0249 = $$1250;
  }
  $45 = (_isdigit(HEAP8[(HEAP32[$7 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre362 = HEAP32[$7 >> 2] | 0;
  if ($45) {
   $$0255 = -1;
   $$1272 = $$0271$ph;
   $$sink = 1;
  } else if ((HEAP8[$$pre362 + 2 >> 0] | 0) == 36) {
   $$0255 = (HEAP8[$$pre362 + 1 >> 0] | 0) + -48 | 0;
   $$1272 = 1;
   $$sink = 3;
  } else {
   $$0255 = -1;
   $$1272 = $$0271$ph;
   $$sink = 1;
  }
  $53 = $$pre362 + $$sink | 0;
  HEAP32[$7 >> 2] = $53;
  $54 = HEAP8[$53 >> 0] | 0;
  $56 = ($54 << 24 >> 24) + -32 | 0;
  if ($56 >>> 0 > 31 | (1 << $56 & 75913 | 0) == 0) {
   $$0264$lcssa = 0;
   $$lcssa310 = $54;
   $storemerge275$lcssa = $53;
  } else {
   $$0264330 = 0;
   $62 = $56;
   $storemerge275329 = $53;
   while (1) {
    $63 = 1 << $62 | $$0264330;
    $64 = $storemerge275329 + 1 | 0;
    HEAP32[$7 >> 2] = $64;
    $65 = HEAP8[$64 >> 0] | 0;
    $62 = ($65 << 24 >> 24) + -32 | 0;
    if ($62 >>> 0 > 31 | (1 << $62 & 75913 | 0) == 0) {
     $$0264$lcssa = $63;
     $$lcssa310 = $65;
     $storemerge275$lcssa = $64;
     break;
    } else {
     $$0264330 = $63;
     $storemerge275329 = $64;
    }
   }
  }
  if ($$lcssa310 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$storemerge275$lcssa + 1 >> 0] | 0) | 0)) label = 27; else {
    $78 = HEAP32[$7 >> 2] | 0;
    if ((HEAP8[$78 + 2 >> 0] | 0) == 36) {
     $82 = $78 + 1 | 0;
     HEAP32[$4 + ((HEAP8[$82 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $$0261 = HEAP32[$3 + ((HEAP8[$82 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $$2273 = 1;
     $storemerge276 = $78 + 3 | 0;
    } else label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    if ($$1272 | 0) {
     $$0 = -1;
     break;
    }
    if ($12) {
     $104 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $105 = HEAP32[$104 >> 2] | 0;
     HEAP32[$2 >> 2] = $104 + 4;
     $367 = $105;
    } else $367 = 0;
    $$0261 = $367;
    $$2273 = 0;
    $storemerge276 = (HEAP32[$7 >> 2] | 0) + 1 | 0;
   }
   HEAP32[$7 >> 2] = $storemerge276;
   $108 = ($$0261 | 0) < 0;
   $$1262 = $108 ? 0 - $$0261 | 0 : $$0261;
   $$1265 = $108 ? $$0264$lcssa | 8192 : $$0264$lcssa;
   $$3274 = $$2273;
   $114 = $storemerge276;
  } else {
   $111 = _getint_654($7) | 0;
   if (($111 | 0) < 0) {
    $$0 = -1;
    break;
   }
   $$1262 = $111;
   $$1265 = $$0264$lcssa;
   $$3274 = $$1272;
   $114 = HEAP32[$7 >> 2] | 0;
  }
  do if ((HEAP8[$114 >> 0] | 0) == 46) {
   $116 = $114 + 1 | 0;
   if ((HEAP8[$116 >> 0] | 0) != 42) {
    HEAP32[$7 >> 2] = $116;
    $154 = _getint_654($7) | 0;
    $$0256 = $154;
    $$pre365 = HEAP32[$7 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[$114 + 2 >> 0] | 0) | 0) {
    $124 = HEAP32[$7 >> 2] | 0;
    if ((HEAP8[$124 + 3 >> 0] | 0) == 36) {
     $128 = $124 + 2 | 0;
     HEAP32[$4 + ((HEAP8[$128 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $139 = HEAP32[$3 + ((HEAP8[$128 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $143 = $124 + 4 | 0;
     HEAP32[$7 >> 2] = $143;
     $$0256 = $139;
     $$pre365 = $143;
     break;
    }
   }
   if ($$3274 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($12) {
    $150 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $151 = HEAP32[$150 >> 2] | 0;
    HEAP32[$2 >> 2] = $150 + 4;
    $368 = $151;
   } else $368 = 0;
   $153 = (HEAP32[$7 >> 2] | 0) + 2 | 0;
   HEAP32[$7 >> 2] = $153;
   $$0256 = $368;
   $$pre365 = $153;
  } else {
   $$0256 = -1;
   $$pre365 = $114;
  } while (0);
  $$0254 = 0;
  $156 = $$pre365;
  while (1) {
   if (((HEAP8[$156 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $156$looptemp = $156;
   $156 = $156 + 1 | 0;
   HEAP32[$7 >> 2] = $156;
   $165 = HEAP8[(HEAP8[$156$looptemp >> 0] | 0) + -65 + (10176 + ($$0254 * 58 | 0)) >> 0] | 0;
   $166 = $165 & 255;
   if (($166 + -1 | 0) >>> 0 >= 8) break; else $$0254 = $166;
  }
  if (!($165 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $171 = ($$0255 | 0) > -1;
  do if ($165 << 24 >> 24 == 19) if ($171) {
   $$0 = -1;
   break L1;
  } else label = 54; else {
   if ($171) {
    HEAP32[$4 + ($$0255 << 2) >> 2] = $166;
    $174 = $3 + ($$0255 << 3) | 0;
    $179 = HEAP32[$174 + 4 >> 2] | 0;
    $180 = $8;
    HEAP32[$180 >> 2] = HEAP32[$174 >> 2];
    HEAP32[$180 + 4 >> 2] = $179;
    label = 54;
    break;
   }
   if (!$12) {
    $$0 = 0;
    break L1;
   }
   _pop_arg_656($8, $166, $2, $6);
   $185 = HEAP32[$7 >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($12) {
    $185 = $156;
    label = 55;
   } else $$0245$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $187 = HEAP8[$185 + -1 >> 0] | 0;
   $$0237 = ($$0254 | 0) != 0 & ($187 & 15 | 0) == 3 ? $187 & -33 : $187;
   $194 = $$1265 & -65537;
   $spec$select = ($$1265 & 8192 | 0) == 0 ? $$1265 : $194;
   L79 : do switch ($$0237 | 0) {
   case 110:
    {
     switch (($$0254 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$8 >> 2] >> 2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$8 >> 2] >> 2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $206 = HEAP32[$8 >> 2] | 0;
       HEAP32[$206 >> 2] = $$1250;
       HEAP32[$206 + 4 >> 2] = (($$1250 | 0) < 0) << 31 >> 31;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$8 >> 2] >> 1] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$8 >> 2] >> 0] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$8 >> 2] >> 2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $218 = HEAP32[$8 >> 2] | 0;
       HEAP32[$218 >> 2] = $$1250;
       HEAP32[$218 + 4 >> 2] = (($$1250 | 0) < 0) << 31 >> 31;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $$0245$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $$1238 = 120;
     $$1257 = $$0256 >>> 0 > 8 ? $$0256 : 8;
     $$3267 = $spec$select | 8;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $$1238 = $$0237;
     $$1257 = $$0256;
     $$3267 = $spec$select;
     label = 67;
     break;
    }
   case 111:
    {
     $246 = $8;
     $252 = _fmt_o(HEAP32[$246 >> 2] | 0, HEAP32[$246 + 4 >> 2] | 0, $13) | 0;
     $256 = $14 - $252 | 0;
     $$0231 = $252;
     $$1235 = 0;
     $$1240 = 46999;
     $$2258 = ($spec$select & 8 | 0) == 0 | ($$0256 | 0) > ($256 | 0) ? $$0256 : $256 + 1 | 0;
     $$4268 = $spec$select;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $260 = $8;
     $262 = HEAP32[$260 >> 2] | 0;
     $265 = HEAP32[$260 + 4 >> 2] | 0;
     if (($265 | 0) < 0) {
      $267 = _i64Subtract(0, 0, $262 | 0, $265 | 0) | 0;
      $268 = getTempRet0() | 0;
      $269 = $8;
      HEAP32[$269 >> 2] = $267;
      HEAP32[$269 + 4 >> 2] = $268;
      $$0234 = 1;
      $$0239 = 46999;
      $279 = $267;
      $280 = $268;
      label = 72;
      break L79;
     } else {
      $$0234 = ($spec$select & 2049 | 0) != 0 & 1;
      $$0239 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 46999 : 47001) : 47e3;
      $279 = $262;
      $280 = $265;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $195 = $8;
     $$0234 = 0;
     $$0239 = 46999;
     $279 = HEAP32[$195 >> 2] | 0;
     $280 = HEAP32[$195 + 4 >> 2] | 0;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$15 >> 0] = HEAP32[$8 >> 2];
     $$1 = $15;
     $$2236 = 0;
     $$2241 = 46999;
     $$5 = 1;
     $$6270 = $194;
     $$pre$phiZ2D = $14;
     break;
    }
   case 115:
    {
     $307 = HEAP32[$8 >> 2] | 0;
     $309 = ($307 | 0) == 0 ? 47009 : $307;
     $310 = _memchr($309, 0, $$0256) | 0;
     $311 = ($310 | 0) == 0;
     $$1 = $309;
     $$2236 = 0;
     $$2241 = 46999;
     $$5 = $311 ? $$0256 : $310 - $309 | 0;
     $$6270 = $194;
     $$pre$phiZ2D = $311 ? $309 + $$0256 | 0 : $310;
     break;
    }
   case 67:
    {
     HEAP32[$10 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$16 >> 2] = 0;
     HEAP32[$8 >> 2] = $10;
     $$4260372 = -1;
     label = 79;
     break;
    }
   case 83:
    {
     if (!$$0256) {
      _pad_659($0, 32, $$1262, 0, $spec$select);
      $$0242315373 = 0;
      label = 89;
     } else {
      $$4260372 = $$0256;
      label = 79;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0245$ph$be = FUNCTION_TABLE_iidiiii[$5 & 1]($0, +HEAPF64[$8 >> 3], $$1262, $$0256, $spec$select, $$0237) | 0;
     break L77;
     break;
    }
   default:
    {
     $$1 = $22;
     $$2236 = 0;
     $$2241 = 46999;
     $$5 = $$0256;
     $$6270 = $spec$select;
     $$pre$phiZ2D = $14;
    }
   } while (0);
   L102 : do if ((label | 0) == 67) {
    label = 0;
    $225 = $8;
    $232 = _fmt_x(HEAP32[$225 >> 2] | 0, HEAP32[$225 + 4 >> 2] | 0, $13, $$1238 & 32) | 0;
    $233 = $8;
    $or$cond280 = ($$3267 & 8 | 0) == 0 | (HEAP32[$233 >> 2] | 0) == 0 & (HEAP32[$233 + 4 >> 2] | 0) == 0;
    $$0231 = $232;
    $$1235 = $or$cond280 ? 0 : 2;
    $$1240 = $or$cond280 ? 46999 : 46999 + ($$1238 >>> 4) | 0;
    $$2258 = $$1257;
    $$4268 = $$3267;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $$0231 = _fmt_u($279, $280, $13) | 0;
    $$1235 = $$0234;
    $$1240 = $$0239;
    $$2258 = $$0256;
    $$4268 = $spec$select;
    label = 73;
   } else if ((label | 0) == 79) {
    label = 0;
    $$0232336 = HEAP32[$8 >> 2] | 0;
    $$0242335 = 0;
    while (1) {
     $324 = HEAP32[$$0232336 >> 2] | 0;
     if (!$324) {
      $$0242315 = $$0242335;
      break;
     }
     $326 = _wctomb($11, $324) | 0;
     $327 = ($326 | 0) < 0;
     if ($327 | $326 >>> 0 > ($$4260372 - $$0242335 | 0) >>> 0) {
      label = 83;
      break;
     }
     $331 = $326 + $$0242335 | 0;
     if ($$4260372 >>> 0 > $331 >>> 0) {
      $$0232336 = $$0232336 + 4 | 0;
      $$0242335 = $331;
     } else {
      $$0242315 = $331;
      break;
     }
    }
    if ((label | 0) == 83) {
     label = 0;
     if ($327) {
      $$0 = -1;
      break L1;
     } else $$0242315 = $$0242335;
    }
    _pad_659($0, 32, $$1262, $$0242315, $spec$select);
    if (!$$0242315) {
     $$0242315373 = 0;
     label = 89;
    } else {
     $$1233342 = HEAP32[$8 >> 2] | 0;
     $$1243341 = 0;
     while (1) {
      $335 = HEAP32[$$1233342 >> 2] | 0;
      if (!$335) {
       $$0242315373 = $$0242315;
       label = 89;
       break L102;
      }
      $337 = _wctomb($11, $335) | 0;
      $$1243341 = $337 + $$1243341 | 0;
      if (($$1243341 | 0) > ($$0242315 | 0)) {
       $$0242315373 = $$0242315;
       label = 89;
       break L102;
      }
      _out_653($0, $11, $337);
      if ($$1243341 >>> 0 >= $$0242315 >>> 0) {
       $$0242315373 = $$0242315;
       label = 89;
       break;
      } else $$1233342 = $$1233342 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $284 = $8;
    $292 = (HEAP32[$284 >> 2] | 0) != 0 | (HEAP32[$284 + 4 >> 2] | 0) != 0;
    $or$cond = ($$2258 | 0) != 0 | $292;
    $298 = $14 - $$0231 + (($292 ^ 1) & 1) | 0;
    $$1 = $or$cond ? $$0231 : $13;
    $$2236 = $$1235;
    $$2241 = $$1240;
    $$5 = $or$cond ? (($$2258 | 0) > ($298 | 0) ? $$2258 : $298) : 0;
    $$6270 = ($$2258 | 0) > -1 ? $$4268 & -65537 : $$4268;
    $$pre$phiZ2D = $14;
   } else if ((label | 0) == 89) {
    label = 0;
    _pad_659($0, 32, $$1262, $$0242315373, $spec$select ^ 8192);
    $$0245$ph$be = ($$1262 | 0) > ($$0242315373 | 0) ? $$1262 : $$0242315373;
    break;
   }
   $348 = $$pre$phiZ2D - $$1 | 0;
   $spec$select286 = ($$5 | 0) < ($348 | 0) ? $348 : $$5;
   $350 = $spec$select286 + $$2236 | 0;
   $$2263 = ($$1262 | 0) < ($350 | 0) ? $350 : $$1262;
   _pad_659($0, 32, $$2263, $350, $$6270);
   _out_653($0, $$2241, $$2236);
   _pad_659($0, 48, $$2263, $350, $$6270 ^ 65536);
   _pad_659($0, 48, $spec$select286, $348, 0);
   _out_653($0, $$1, $348);
   _pad_659($0, 32, $$2263, $350, $$6270 ^ 8192);
   $$0245$ph$be = $$2263;
  } while (0);
  $$0245$ph = $$0245$ph$be;
  $$0249$ph = $$1250;
  $$0271$ph = $$3274;
 }
 L123 : do if ((label | 0) == 92) if (!$0) if (!$$0271$ph) $$0 = 0; else {
  $$2244322 = 1;
  while (1) {
   $357 = HEAP32[$4 + ($$2244322 << 2) >> 2] | 0;
   if (!$357) break;
   _pop_arg_656($3 + ($$2244322 << 3) | 0, $357, $2, $6);
   $360 = $$2244322 + 1 | 0;
   if ($360 >>> 0 < 10) $$2244322 = $360; else {
    $$0 = 1;
    break L123;
   }
  }
  $$3319 = $$2244322;
  while (1) {
   if (HEAP32[$4 + ($$3319 << 2) >> 2] | 0) {
    $$0 = -1;
    break L123;
   }
   $$3319 = $$3319 + 1 | 0;
   if ($$3319 >>> 0 >= 10) {
    $$0 = 1;
    break;
   }
  }
 } else $$0 = $$1250; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN2Dr17TraceImageOutlineERK8DrBitmap($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0144323 = 0, $$0145$lcssa = 0.0, $$0145291 = 0.0, $$0147$off0302 = 0, $$0149301 = 0.0, $$0156283 = 0, $$0157287 = 0, $$0170$off0322 = 0, $$0174321 = 0, $$0175310 = 0, $$0176$off0309 = 0, $$0181308 = 0, $$0182306 = 0, $$0282 = 0, $$1$lcssa = 0, $$1146$lcssa = 0.0, $$1146295 = 0.0, $$1150 = 0.0, $$1171$off0$lcssa = 0, $$1171$off0312 = 0, $$1177$off0307 = 0, $$1314 = 0, $$3 = 0, $$3173$off0 = 0, $$byval_copy6 = 0, $$byval_copy9 = 0, $$in = 0, $$sroa$0207$0300 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $12 = 0, $129 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $14 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $154 = 0, $155 = 0, $159 = 0.0, $16 = 0, $161 = 0.0, $164 = 0.0, $166 = 0.0, $17 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $181 = 0, $186 = 0, $187 = 0, $19 = 0, $193 = 0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $202 = 0, $203 = 0, $205 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $219 = 0, $22 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $5 = 0, $54 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $77 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $87 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $$byval_copy9 = sp + 104 | 0;
 $$byval_copy6 = sp + 88 | 0;
 $2 = sp + 160 | 0;
 $3 = sp + 144 | 0;
 $4 = sp + 136 | 0;
 $5 = sp + 232 | 0;
 $6 = sp + 228 | 0;
 $7 = sp + 224 | 0;
 $8 = sp + 220 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 212 | 0;
 $11 = sp + 120 | 0;
 $12 = sp + 48 | 0;
 $13 = sp + 208 | 0;
 $14 = sp + 204 | 0;
 $15 = sp + 72 | 0;
 $16 = sp + 56 | 0;
 $17 = sp + 8 | 0;
 $18 = sp;
 $19 = sp + 32 | 0;
 $20 = sp + 16 | 0;
 $21 = sp + 200 | 0;
 $22 = sp + 196 | 0;
 $23 = sp + 192 | 0;
 $24 = sp + 188 | 0;
 $25 = sp + 184 | 0;
 __ZN8DrBitmapC2ERKS_($2, $1);
 HEAP32[$3 >> 2] = 0;
 $26 = $3 + 4 | 0;
 HEAP32[$26 >> 2] = 0;
 $27 = $3 + 8 | 0;
 HEAP32[$27 >> 2] = 0;
 $28 = $1 + 4 | 0;
 if ((HEAP32[$28 >> 2] | 0) < 1) label = 3; else {
  $31 = $1 + 8 | 0;
  if ((HEAP32[$31 >> 2] | 0) < 1) label = 3; else {
   __ZN7DrPointC2Ev($4);
   $36 = HEAP32[$28 >> 2] | 0;
   if (($36 | 0) > 0) {
    $$0144323 = 0;
    $$0170$off0322 = 0;
    $$0174321 = 0;
    $229 = $36;
    $40 = HEAP32[$31 >> 2] | 0;
    while (1) {
     if (($40 | 0) > 0) {
      $41 = ($$0174321 | 0) == 0;
      $42 = $$0174321 + -1 | 0;
      $$0175310 = 0;
      $$1171$off0312 = $$0170$off0322;
      $$1314 = $$0144323;
      while (1) {
       __ZNK8DrBitmap8getPixelEii($5, $1, $$0174321, $$0175310);
       __ZN7DrColorC2Ej($$byval_copy9, 0);
       do if (__ZNK7DrColoreqERKS_($5, $$byval_copy9) | 0) {
        __ZN7DrColorC2Ej($6, 0);
        HEAP8[$$byval_copy9 >> 0] = HEAP8[$6 >> 0] | 0;
        HEAP8[$$byval_copy9 + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
        HEAP8[$$byval_copy9 + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
        HEAP8[$$byval_copy9 + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($2, $$0174321, $$0175310, $$byval_copy9);
        $$3 = $$1314;
        $$3173$off0 = $$1171$off0312;
       } else {
        if (!($41 | ($$0175310 | 0) == 0)) if (($$0174321 | 0) != ((HEAP32[$28 >> 2] | 0) + -1 | 0)) if (($$0175310 | 0) != ((HEAP32[$31 >> 2] | 0) + -1 | 0)) {
         $54 = $$0175310 + -1 | 0;
         $$0176$off0309 = 0;
         $$0181308 = $42;
         while (1) {
          $$0182306 = $54;
          $$1177$off0307 = $$0176$off0309;
          while (1) {
           __ZNK8DrBitmap8getPixelEii($7, $1, $$0181308, $$0182306);
           __ZN7DrColorC2Ej($$byval_copy9, 0);
           $$1177$off0307 = $$1177$off0307 | (__ZNK7DrColoreqERKS_($7, $$byval_copy9) | 0);
           if (($$0182306 | 0) > ($$0175310 | 0)) break; else $$0182306 = $$0182306 + 1 | 0;
          }
          if (($$0181308 | 0) > ($$0174321 | 0)) break; else {
           $$0176$off0309 = $$1177$off0307;
           $$0181308 = $$0181308 + 1 | 0;
          }
         }
         if (!$$1177$off0307) {
          __ZN7DrColorC2Ej($8, 0);
          HEAP8[$$byval_copy9 >> 0] = HEAP8[$8 >> 0] | 0;
          HEAP8[$$byval_copy9 + 1 >> 0] = HEAP8[$8 + 1 >> 0] | 0;
          HEAP8[$$byval_copy9 + 2 >> 0] = HEAP8[$8 + 2 >> 0] | 0;
          HEAP8[$$byval_copy9 + 3 >> 0] = HEAP8[$8 + 3 >> 0] | 0;
          __ZN8DrBitmap8setPixelEii7DrColor($2, $$0174321, $$0175310, $$byval_copy9);
          $$3 = $$1314;
          $$3173$off0 = $$1171$off0312;
          break;
         }
        }
        __ZN7DrColorC2Ej($9, 2);
        HEAP8[$$byval_copy9 >> 0] = HEAP8[$9 >> 0] | 0;
        HEAP8[$$byval_copy9 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
        HEAP8[$$byval_copy9 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
        HEAP8[$$byval_copy9 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($2, $$0174321, $$0175310, $$byval_copy9);
        $60 = $$1314 + 1 | 0;
        if ($$1171$off0312) {
         $$3 = $60;
         $$3173$off0 = 1;
        } else {
         __ZN7DrPointC2Eii($$byval_copy9, $$0174321, $$0175310);
         $61 = HEAP32[$26 >> 2] | 0;
         if ($61 >>> 0 < (HEAP32[$27 >> 2] | 0) >>> 0) {
          $64 = $$byval_copy9;
          $69 = HEAP32[$64 + 4 >> 2] | 0;
          $70 = $61;
          HEAP32[$70 >> 2] = HEAP32[$64 >> 2];
          HEAP32[$70 + 4 >> 2] = $69;
          HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + 8;
         } else __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($3, $$byval_copy9);
         __ZN7DrPointC2Eii($$byval_copy9, $42, $$0175310);
         __ZN7DrPointaSERKS_($4, $$byval_copy9) | 0;
         __ZN7DrColorC2Ej($10, 1);
         HEAP8[$$byval_copy9 >> 0] = HEAP8[$10 >> 0] | 0;
         HEAP8[$$byval_copy9 + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
         HEAP8[$$byval_copy9 + 2 >> 0] = HEAP8[$10 + 2 >> 0] | 0;
         HEAP8[$$byval_copy9 + 3 >> 0] = HEAP8[$10 + 3 >> 0] | 0;
         __ZN8DrBitmap8setPixelEii7DrColor($2, $$0174321, $$0175310, $$byval_copy9);
         $$3 = $60;
         $$3173$off0 = 1;
        }
       } while (0);
       $$0175310 = $$0175310 + 1 | 0;
       $77 = HEAP32[$31 >> 2] | 0;
       if (($$0175310 | 0) >= ($77 | 0)) break; else {
        $$1171$off0312 = $$3173$off0;
        $$1314 = $$3;
       }
      }
      $$1$lcssa = $$3;
      $$1171$off0$lcssa = $$3173$off0;
      $230 = $77;
      $45 = HEAP32[$28 >> 2] | 0;
     } else {
      $$1$lcssa = $$0144323;
      $$1171$off0$lcssa = $$0170$off0322;
      $230 = $40;
      $45 = $229;
     }
     $$0174321 = $$0174321 + 1 | 0;
     if (($$0174321 | 0) >= ($45 | 0)) break; else {
      $$0144323 = $$1$lcssa;
      $$0170$off0322 = $$1171$off0$lcssa;
      $229 = $45;
      $40 = $230;
     }
    }
    if (($$1$lcssa | 0) < 3) label = 28; else {
     HEAP32[$11 >> 2] = 0;
     $81 = $11 + 4 | 0;
     HEAP32[$81 >> 2] = 0;
     $82 = $11 + 8 | 0;
     HEAP32[$82 >> 2] = 0;
     $83 = $12 + 4 | 0;
     $101 = $45;
     $84 = 0;
     while (1) {
      HEAP32[$81 >> 2] = $84;
      $87 = (HEAP32[$26 >> 2] | 0) + -8 | 0;
      $89 = HEAP32[$87 >> 2] | 0;
      $92 = HEAP32[$87 + 4 >> 2] | 0;
      $93 = $12;
      HEAP32[$93 >> 2] = $89;
      HEAP32[$93 + 4 >> 2] = $92;
      $99 = ($89 | 0) > 0 ? $89 + -1 | 0 : 0;
      $100 = $101 + -1 | 0;
      $104 = ($100 | 0) > ($89 | 0) ? $89 + 1 | 0 : $100;
      $107 = ($92 | 0) > 0 ? $92 + -1 | 0 : 0;
      $109 = (HEAP32[$31 >> 2] | 0) + -1 | 0;
      $112 = ($109 | 0) > ($92 | 0) ? $92 + 1 | 0 : $109;
      if (($99 | 0) <= ($104 | 0)) {
       $114 = ($107 | 0) > ($112 | 0);
       $$0157287 = $99;
       while (1) {
        if (!$114) {
         $$0156283 = $107;
         while (1) {
          do if (!(($$0157287 | 0) == (HEAP32[$12 >> 2] | 0) ? ($$0156283 | 0) == (HEAP32[$83 >> 2] | 0) : 0)) {
           __ZNK8DrBitmap8getPixelEii($13, $2, $$0157287, $$0156283);
           __ZN7DrColorC2Ej($$byval_copy9, 4);
           if (!(__ZNK7DrColorneERKS_($13, $$byval_copy9) | 0)) break;
           __ZNK8DrBitmap8getPixelEii($14, $2, $$0157287, $$0156283);
           __ZN7DrColorC2Ej($$byval_copy6, 0);
           if (__ZNK7DrColorneERKS_($14, $$byval_copy6) | 0) {
            __ZN7DrPointC2Eii($$byval_copy9, $$0157287, $$0156283);
            $129 = HEAP32[$81 >> 2] | 0;
            if ($129 >>> 0 < (HEAP32[$82 >> 2] | 0) >>> 0) {
             $132 = $$byval_copy9;
             $137 = HEAP32[$132 + 4 >> 2] | 0;
             $138 = $129;
             HEAP32[$138 >> 2] = HEAP32[$132 >> 2];
             HEAP32[$138 + 4 >> 2] = $137;
             HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + 8;
            } else __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($11, $$byval_copy9);
           }
          } while (0);
          if (($$0156283 | 0) < ($112 | 0)) $$0156283 = $$0156283 + 1 | 0; else break;
         }
        }
        if (($$0157287 | 0) < ($104 | 0)) $$0157287 = $$0157287 + 1 | 0; else break;
       }
      }
      __ZN7DrPoint8toPointFEv($15, $12);
      __ZN7DrPoint8toPointFEv($16, $4);
      HEAP32[$$byval_copy6 >> 2] = HEAP32[$15 >> 2];
      HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
      HEAP32[$$byval_copy6 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
      HEAP32[$$byval_copy6 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
      HEAP32[$$byval_copy9 >> 2] = HEAP32[$16 >> 2];
      HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
      HEAP32[$$byval_copy9 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
      HEAP32[$$byval_copy9 + 12 >> 2] = HEAP32[$16 + 12 >> 2];
      $115 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($$byval_copy6, $$byval_copy9);
      __ZN7DrPointC2Ev($17);
      $116 = HEAP32[$11 >> 2] | 0;
      $117 = HEAP32[$81 >> 2] | 0;
      if (($116 | 0) == ($117 | 0)) {
       $147 = $117;
       $148 = $116;
      } else {
       $$0147$off0302 = 1;
       $$0149301 = 0.0;
       $$sroa$0207$0300 = $116;
       while (1) {
        $149 = $$sroa$0207$0300;
        $154 = HEAP32[$149 + 4 >> 2] | 0;
        $155 = $18;
        HEAP32[$155 >> 2] = HEAP32[$149 >> 2];
        HEAP32[$155 + 4 >> 2] = $154;
        __ZN7DrPoint8toPointFEv($19, $12);
        __ZN7DrPoint8toPointFEv($20, $18);
        HEAP32[$$byval_copy6 >> 2] = HEAP32[$19 >> 2];
        HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
        HEAP32[$$byval_copy6 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
        HEAP32[$$byval_copy6 + 12 >> 2] = HEAP32[$19 + 12 >> 2];
        HEAP32[$$byval_copy9 >> 2] = HEAP32[$20 >> 2];
        HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
        HEAP32[$$byval_copy9 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
        HEAP32[$$byval_copy9 + 12 >> 2] = HEAP32[$20 + 12 >> 2];
        $159 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($$byval_copy6, $$byval_copy9);
        if ($159 > 0.0) {
         $$0145291 = $159;
         while (1) {
          $161 = $$0145291 + -360.0;
          if ($161 > 0.0) $$0145291 = $161; else {
           $$0145$lcssa = $161;
           break;
          }
         }
        } else $$0145$lcssa = $159;
        if (!($$0145$lcssa <= $115)) $$1146$lcssa = $$0145$lcssa; else {
         $$1146295 = $$0145$lcssa;
         while (1) {
          $164 = $$1146295 + 360.0;
          if (!($164 <= $115)) {
           $$1146$lcssa = $164;
           break;
          } else $$1146295 = $164;
         }
        }
        $166 = $$1146$lcssa - $115;
        if ($$0147$off0302 | $166 < $$0149301) {
         __ZN7DrPointaSERKS_($17, $18) | 0;
         $$1150 = $166;
        } else $$1150 = $$0149301;
        $$sroa$0207$0300 = $$sroa$0207$0300 + 8 | 0;
        if (($$sroa$0207$0300 | 0) == ($117 | 0)) break; else {
         $$0147$off0302 = 0;
         $$0149301 = $$1150;
        }
       }
       $147 = HEAP32[$81 >> 2] | 0;
       $148 = HEAP32[$11 >> 2] | 0;
      }
      do if (($147 | 0) != ($148 | 0)) {
       __ZNK8DrBitmap8getPixelEii($21, $2, HEAP32[$12 >> 2] | 0, HEAP32[$83 >> 2] | 0);
       __ZN7DrColorC2Ej($$byval_copy9, 2);
       $172 = __ZNK7DrColoreqERKS_($21, $$byval_copy9) | 0;
       $173 = HEAP32[$12 >> 2] | 0;
       $174 = HEAP32[$83 >> 2] | 0;
       if ($172) {
        __ZN7DrColorC2Ej($22, 3);
        HEAP8[$$byval_copy9 >> 0] = HEAP8[$22 >> 0] | 0;
        HEAP8[$$byval_copy9 + 1 >> 0] = HEAP8[$22 + 1 >> 0] | 0;
        HEAP8[$$byval_copy9 + 2 >> 0] = HEAP8[$22 + 2 >> 0] | 0;
        HEAP8[$$byval_copy9 + 3 >> 0] = HEAP8[$22 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($2, $173, $174, $$byval_copy9);
       } else {
        __ZNK8DrBitmap8getPixelEii($23, $2, $173, $174);
        __ZN7DrColorC2Ej($$byval_copy9, 3);
        if (__ZNK7DrColoreqERKS_($23, $$byval_copy9) | 0) {
         $176 = HEAP32[$12 >> 2] | 0;
         $177 = HEAP32[$83 >> 2] | 0;
         __ZN7DrColorC2Ej($24, 4);
         HEAP8[$$byval_copy9 >> 0] = HEAP8[$24 >> 0] | 0;
         HEAP8[$$byval_copy9 + 1 >> 0] = HEAP8[$24 + 1 >> 0] | 0;
         HEAP8[$$byval_copy9 + 2 >> 0] = HEAP8[$24 + 2 >> 0] | 0;
         HEAP8[$$byval_copy9 + 3 >> 0] = HEAP8[$24 + 3 >> 0] | 0;
         __ZN8DrBitmap8setPixelEii7DrColor($2, $176, $177, $$byval_copy9);
        }
       }
       __ZN7DrPointaSERKS_($4, $12) | 0;
       $178 = HEAP32[$26 >> 2] | 0;
       if (($178 | 0) == (HEAP32[$27 >> 2] | 0)) {
        __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($3, $17);
        break;
       } else {
        $181 = $17;
        $186 = HEAP32[$181 + 4 >> 2] | 0;
        $187 = $178;
        HEAP32[$187 >> 2] = HEAP32[$181 >> 2];
        HEAP32[$187 + 4 >> 2] = $186;
        HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + 8;
        break;
       }
      } while (0);
      $193 = HEAP32[$26 >> 2] | 0;
      __ZNK8DrBitmap8getPixelEii($25, $2, HEAP32[$193 + -8 >> 2] | 0, HEAP32[$193 + -4 >> 2] | 0);
      __ZN7DrColorC2Ej($$byval_copy9, 1);
      $198 = __ZNK7DrColoreqERKS_($25, $$byval_copy9) | 0;
      $200 = HEAP32[$11 >> 2] | 0;
      if ($198 | (HEAP32[$81 >> 2] | 0) == ($200 | 0)) break;
      $101 = HEAP32[$28 >> 2] | 0;
      $84 = $200;
     }
     HEAP32[$$byval_copy9 >> 2] = 0;
     $202 = $$byval_copy9 + 4 | 0;
     HEAP32[$202 >> 2] = 0;
     $203 = $$byval_copy9 + 8 | 0;
     HEAP32[$203 >> 2] = 0;
     $205 = HEAP32[$3 >> 2] | 0;
     if ((HEAP32[$26 >> 2] | 0) == ($205 | 0)) {
      $209 = 0;
      $210 = 0;
      $211 = 0;
     } else {
      $$0282 = 0;
      $$in = $205;
      do {
       $212 = $$in;
       __ZN8DrPointFC2Edd($$byval_copy6, +(HEAP32[$212 + ($$0282 << 3) >> 2] | 0), +(HEAP32[$212 + ($$0282 << 3) + 4 >> 2] | 0));
       $219 = HEAP32[$202 >> 2] | 0;
       if ($219 >>> 0 < (HEAP32[$203 >> 2] | 0) >>> 0) {
        HEAP32[$219 >> 2] = HEAP32[$$byval_copy6 >> 2];
        HEAP32[$219 + 4 >> 2] = HEAP32[$$byval_copy6 + 4 >> 2];
        HEAP32[$219 + 8 >> 2] = HEAP32[$$byval_copy6 + 8 >> 2];
        HEAP32[$219 + 12 >> 2] = HEAP32[$$byval_copy6 + 12 >> 2];
        HEAP32[$202 >> 2] = $219 + 16;
       } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($$byval_copy9, $$byval_copy6);
       $$0282 = $$0282 + 1 | 0;
       $$in = HEAP32[$3 >> 2] | 0;
      } while ($$0282 >>> 0 < (HEAP32[$26 >> 2] | 0) - $$in >> 3 >>> 0);
      $209 = HEAP32[$$byval_copy9 >> 2] | 0;
      $210 = HEAP32[$202 >> 2] | 0;
      $211 = HEAP32[$203 >> 2] | 0;
     }
     HEAP32[$0 >> 2] = $209;
     HEAP32[$0 + 4 >> 2] = $210;
     HEAP32[$0 + 8 >> 2] = $211;
     HEAP32[$203 >> 2] = 0;
     HEAP32[$202 >> 2] = 0;
     HEAP32[$$byval_copy9 >> 2] = 0;
     __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($$byval_copy9);
     __ZNSt3__213__vector_baseI7DrPointNS_9allocatorIS1_EEED2Ev($11);
    }
   } else label = 28;
   if ((label | 0) == 28) {
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
   }
  }
 }
 if ((label | 0) == 3) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 __ZNSt3__213__vector_baseI7DrPointNS_9allocatorIS1_EEED2Ev($3);
 __ZN8DrBitmapD2Ev($2);
 STACKTOP = sp;
 return;
}

function _load_jpeg_image($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $100 = 0, $11 = 0, $113 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $229 = 0, $23 = 0, $24 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $272 = 0, $279 = 0, $28 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $296 = 0, $298 = 0, $30 = 0, $31 = 0, $311 = 0, $313 = 0, $328 = 0, $40 = 0, $411 = 0, $419 = 0, $428 = 0, $441 = 0, $471 = 0, $480 = 0, $490 = 0, $5 = 0, $506 = 0, $522 = 0, $545 = 0, $546 = 0, $57 = 0, $572 = 0, $6 = 0, $625 = 0, $660 = 0, $671 = 0, $694 = 0, $695 = 0, $697 = 0, $7 = 0, $723 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $5 = sp + 216 | 0;
 $6 = sp + 212 | 0;
 $7 = sp + 208 | 0;
 $8 = sp + 204 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp + 192 | 0;
 $12 = sp + 188 | 0;
 $13 = sp + 184 | 0;
 $14 = sp + 180 | 0;
 $15 = sp + 176 | 0;
 $16 = sp + 172 | 0;
 $17 = sp + 168 | 0;
 $18 = sp + 128 | 0;
 $19 = sp;
 $20 = sp + 164 | 0;
 $21 = sp + 160 | 0;
 $22 = sp + 156 | 0;
 $23 = sp + 152 | 0;
 $24 = sp + 148 | 0;
 $25 = sp + 225 | 0;
 $26 = sp + 224 | 0;
 $27 = sp + 223 | 0;
 $28 = sp + 222 | 0;
 $29 = sp + 221 | 0;
 $30 = sp + 220 | 0;
 $31 = sp + 144 | 0;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 if ((HEAP32[$10 >> 2] | 0) < 0 | (HEAP32[$10 >> 2] | 0) > 4) {
  $40 = (_stbi__err(44183) | 0) != 0;
  HEAP32[$5 >> 2] = $40 ? 0 : 0;
  $723 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $723 | 0;
 }
 if (!(_stbi__decode_jpeg_image(HEAP32[$6 >> 2] | 0) | 0)) {
  _stbi__cleanup_jpeg(HEAP32[$6 >> 2] | 0);
  HEAP32[$5 >> 2] = 0;
  $723 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $723 | 0;
 }
 if (HEAP32[$10 >> 2] | 0) $57 = HEAP32[$10 >> 2] | 0; else $57 = (HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2] | 0) >= 3 ? 3 : 1;
 HEAP32[$11 >> 2] = $57;
 if ((HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2] | 0) == 3) if ((HEAP32[(HEAP32[$6 >> 2] | 0) + 18412 >> 2] | 0) == 3) $77 = 1; else if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 18408 >> 2] | 0)) $77 = (HEAP32[(HEAP32[$6 >> 2] | 0) + 18404 >> 2] | 0) != 0 ^ 1; else $77 = 0; else $77 = 0;
 HEAP32[$13 >> 2] = $77 & 1;
 if (((HEAP32[$11 >> 2] | 0) < 3 ? (HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2] | 0) == 3 : 0) ^ 1 | (HEAP32[$13 >> 2] | 0) != 0) HEAP32[$12 >> 2] = HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2]; else HEAP32[$12 >> 2] = 1;
 HEAP32[$18 >> 2] = 0;
 HEAP32[$18 + 4 >> 2] = 0;
 HEAP32[$18 + 8 >> 2] = 0;
 HEAP32[$18 + 12 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 while (1) {
  if ((HEAP32[$14 >> 2] | 0) >= (HEAP32[$12 >> 2] | 0)) break;
  HEAP32[$20 >> 2] = $19 + (HEAP32[$14 >> 2] << 5);
  $100 = _stbi__malloc((HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) + 3 | 0) | 0;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 18076 + ((HEAP32[$14 >> 2] | 0) * 72 | 0) + 56 >> 2] = $100;
  $113 = HEAP32[$6 >> 2] | 0;
  if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 18076 + ((HEAP32[$14 >> 2] | 0) * 72 | 0) + 56 >> 2] | 0)) {
   label = 18;
   break;
  }
  HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] = (HEAP32[$113 + 18052 >> 2] | 0) / (HEAP32[(HEAP32[$6 >> 2] | 0) + 18076 + ((HEAP32[$14 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$20 >> 2] | 0) + 16 >> 2] = (HEAP32[(HEAP32[$6 >> 2] | 0) + 18056 >> 2] | 0) / (HEAP32[(HEAP32[$6 >> 2] | 0) + 18076 + ((HEAP32[$14 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$20 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[$20 >> 2] | 0) + 16 >> 2] >> 1;
  HEAP32[(HEAP32[$20 >> 2] | 0) + 20 >> 2] = (((HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] | 0) >>> 0) | 0;
  HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] = 0;
  $169 = HEAP32[(HEAP32[$6 >> 2] | 0) + 18076 + ((HEAP32[$14 >> 2] | 0) * 72 | 0) + 44 >> 2] | 0;
  HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] = $169;
  HEAP32[(HEAP32[$20 >> 2] | 0) + 4 >> 2] = $169;
  if ((HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[$20 >> 2] | 0) + 16 >> 2] | 0) == 1) HEAP32[HEAP32[$20 >> 2] >> 2] = 2; else label = 22; else label = 22;
  do if ((label | 0) == 22) {
   label = 0;
   if ((HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[$20 >> 2] | 0) + 16 >> 2] | 0) == 2) {
    HEAP32[HEAP32[$20 >> 2] >> 2] = 3;
    break;
   }
   if ((HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] | 0) == 2) if ((HEAP32[(HEAP32[$20 >> 2] | 0) + 16 >> 2] | 0) == 1) {
    HEAP32[HEAP32[$20 >> 2] >> 2] = 4;
    break;
   }
   if ((HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] | 0) == 2) if ((HEAP32[(HEAP32[$20 >> 2] | 0) + 16 >> 2] | 0) == 2) {
    HEAP32[HEAP32[$20 >> 2] >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 18452 >> 2];
    break;
   }
   HEAP32[HEAP32[$20 >> 2] >> 2] = 5;
  } while (0);
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
 }
 if ((label | 0) == 18) {
  _stbi__cleanup_jpeg($113);
  $115 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$5 >> 2] = $115 ? 0 : 0;
  $723 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $723 | 0;
 }
 HEAP32[$17 >> 2] = _stbi__malloc_mad3(HEAP32[$11 >> 2] | 0, HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 4 >> 2] | 0, 1) | 0;
 if (!(HEAP32[$17 >> 2] | 0)) {
  _stbi__cleanup_jpeg(HEAP32[$6 >> 2] | 0);
  $229 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$5 >> 2] = $229 ? 0 : 0;
  $723 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $723 | 0;
 }
 HEAP32[$16 >> 2] = 0;
 while (1) {
  if ((HEAP32[$16 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
  $244 = Math_imul(HEAP32[$11 >> 2] | 0, HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) | 0;
  HEAP32[$21 >> 2] = (HEAP32[$17 >> 2] | 0) + (Math_imul($244, HEAP32[$16 >> 2] | 0) | 0);
  HEAP32[$14 >> 2] = 0;
  while (1) {
   if ((HEAP32[$14 >> 2] | 0) >= (HEAP32[$12 >> 2] | 0)) break;
   HEAP32[$22 >> 2] = $19 + (HEAP32[$14 >> 2] << 5);
   HEAP32[$23 >> 2] = (HEAP32[(HEAP32[$22 >> 2] | 0) + 24 >> 2] | 0) >= (HEAP32[(HEAP32[$22 >> 2] | 0) + 16 >> 2] >> 1 | 0) & 1;
   $272 = HEAP32[$22 >> 2] | 0;
   if (HEAP32[$23 >> 2] | 0) $290 = HEAP32[$272 + 8 >> 2] | 0; else $290 = HEAP32[$272 + 4 >> 2] | 0;
   $279 = HEAP32[$22 >> 2] | 0;
   if (HEAP32[$23 >> 2] | 0) $291 = HEAP32[$279 + 4 >> 2] | 0; else $291 = HEAP32[$279 + 8 >> 2] | 0;
   $292 = FUNCTION_TABLE_iiiiii[HEAP32[HEAP32[$22 >> 2] >> 2] & 7](HEAP32[(HEAP32[$6 >> 2] | 0) + 18076 + ((HEAP32[$14 >> 2] | 0) * 72 | 0) + 56 >> 2] | 0, $290, $291, HEAP32[(HEAP32[$22 >> 2] | 0) + 20 >> 2] | 0, HEAP32[(HEAP32[$22 >> 2] | 0) + 12 >> 2] | 0) | 0;
   HEAP32[$18 + (HEAP32[$14 >> 2] << 2) >> 2] = $292;
   $296 = (HEAP32[$22 >> 2] | 0) + 24 | 0;
   $298 = (HEAP32[$296 >> 2] | 0) + 1 | 0;
   HEAP32[$296 >> 2] = $298;
   if (($298 | 0) >= (HEAP32[(HEAP32[$22 >> 2] | 0) + 16 >> 2] | 0)) {
    HEAP32[(HEAP32[$22 >> 2] | 0) + 24 >> 2] = 0;
    HEAP32[(HEAP32[$22 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2];
    $311 = (HEAP32[$22 >> 2] | 0) + 28 | 0;
    $313 = (HEAP32[$311 >> 2] | 0) + 1 | 0;
    HEAP32[$311 >> 2] = $313;
    if (($313 | 0) < (HEAP32[(HEAP32[$6 >> 2] | 0) + 18076 + ((HEAP32[$14 >> 2] | 0) * 72 | 0) + 32 >> 2] | 0)) {
     $328 = (HEAP32[$22 >> 2] | 0) + 8 | 0;
     HEAP32[$328 >> 2] = (HEAP32[$328 >> 2] | 0) + (HEAP32[(HEAP32[$6 >> 2] | 0) + 18076 + ((HEAP32[$14 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0);
    }
   }
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
  }
  L71 : do if ((HEAP32[$11 >> 2] | 0) >= 3) {
   HEAP32[$24 >> 2] = HEAP32[$18 >> 2];
   if ((HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2] | 0) == 3) {
    if (!(HEAP32[$13 >> 2] | 0)) {
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 18448 >> 2] & 7](HEAP32[$21 >> 2] | 0, HEAP32[$24 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0, HEAP32[$18 + 8 >> 2] | 0, HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0, HEAP32[$11 >> 2] | 0);
     break;
    }
    HEAP32[$15 >> 2] = 0;
    while (1) {
     if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     HEAP8[HEAP32[$21 >> 2] >> 0] = HEAP8[(HEAP32[$24 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$18 + 4 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$18 + 8 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + (HEAP32[$11 >> 2] | 0);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
   }
   if ((HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2] | 0) != 4) {
    HEAP32[$15 >> 2] = 0;
    while (1) {
     if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     $506 = HEAP8[(HEAP32[$24 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 2 >> 0] = $506;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 1 >> 0] = $506;
     HEAP8[HEAP32[$21 >> 2] >> 0] = $506;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + (HEAP32[$11 >> 2] | 0);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
   }
   if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 18408 >> 2] | 0)) {
    HEAP32[$15 >> 2] = 0;
    while (1) {
     if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     HEAP8[$25 >> 0] = HEAP8[(HEAP32[$18 + 12 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
     $411 = _stbi__blinn_8x8(HEAP8[(HEAP32[$18 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAP8[$25 >> 0] | 0) | 0;
     HEAP8[HEAP32[$21 >> 2] >> 0] = $411;
     $419 = _stbi__blinn_8x8(HEAP8[(HEAP32[$18 + 4 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAP8[$25 >> 0] | 0) | 0;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 1 >> 0] = $419;
     $428 = _stbi__blinn_8x8(HEAP8[(HEAP32[$18 + 8 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAP8[$25 >> 0] | 0) | 0;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 2 >> 0] = $428;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + (HEAP32[$11 >> 2] | 0);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
   }
   $441 = (HEAP32[(HEAP32[$6 >> 2] | 0) + 18408 >> 2] | 0) == 2;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 18448 >> 2] & 7](HEAP32[$21 >> 2] | 0, HEAP32[$24 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0, HEAP32[$18 + 8 >> 2] | 0, HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0, HEAP32[$11 >> 2] | 0);
   if ($441) {
    HEAP32[$15 >> 2] = 0;
    while (1) {
     if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     HEAP8[$26 >> 0] = HEAP8[(HEAP32[$18 + 12 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
     $471 = _stbi__blinn_8x8(255 - (HEAPU8[HEAP32[$21 >> 2] >> 0] | 0) & 255, HEAP8[$26 >> 0] | 0) | 0;
     HEAP8[HEAP32[$21 >> 2] >> 0] = $471;
     $480 = _stbi__blinn_8x8(255 - (HEAPU8[(HEAP32[$21 >> 2] | 0) + 1 >> 0] | 0) & 255, HEAP8[$26 >> 0] | 0) | 0;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 1 >> 0] = $480;
     $490 = _stbi__blinn_8x8(255 - (HEAPU8[(HEAP32[$21 >> 2] | 0) + 2 >> 0] | 0) & 255, HEAP8[$26 >> 0] | 0) | 0;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 2 >> 0] = $490;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + (HEAP32[$11 >> 2] | 0);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
   }
  } else {
   if (HEAP32[$13 >> 2] | 0) {
    $522 = (HEAP32[$11 >> 2] | 0) == 1;
    HEAP32[$15 >> 2] = 0;
    if ($522) while (1) {
     if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     $545 = _stbi__compute_y(HEAPU8[(HEAP32[$18 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$18 + 4 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$18 + 8 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0) | 0;
     $546 = HEAP32[$21 >> 2] | 0;
     HEAP32[$21 >> 2] = $546 + 1;
     HEAP8[$546 >> 0] = $545;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    } else while (1) {
     if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     $572 = _stbi__compute_y(HEAPU8[(HEAP32[$18 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$18 + 4 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$18 + 8 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0) | 0;
     HEAP8[HEAP32[$21 >> 2] >> 0] = $572;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 2;
    }
   }
   if ((HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2] | 0) == 4) if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 18408 >> 2] | 0)) {
    HEAP32[$15 >> 2] = 0;
    while (1) {
     if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     HEAP8[$27 >> 0] = HEAP8[(HEAP32[$18 + 12 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
     HEAP8[$28 >> 0] = _stbi__blinn_8x8(HEAP8[(HEAP32[$18 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAP8[$27 >> 0] | 0) | 0;
     HEAP8[$29 >> 0] = _stbi__blinn_8x8(HEAP8[(HEAP32[$18 + 4 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAP8[$27 >> 0] | 0) | 0;
     HEAP8[$30 >> 0] = _stbi__blinn_8x8(HEAP8[(HEAP32[$18 + 8 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0, HEAP8[$27 >> 0] | 0) | 0;
     $625 = _stbi__compute_y(HEAPU8[$28 >> 0] | 0, HEAPU8[$29 >> 0] | 0, HEAPU8[$30 >> 0] | 0) | 0;
     HEAP8[HEAP32[$21 >> 2] >> 0] = $625;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + (HEAP32[$11 >> 2] | 0);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
   }
   if ((HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2] | 0) == 4) if ((HEAP32[(HEAP32[$6 >> 2] | 0) + 18408 >> 2] | 0) == 2) {
    HEAP32[$15 >> 2] = 0;
    while (1) {
     if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     $660 = _stbi__blinn_8x8(255 - (HEAPU8[(HEAP32[$18 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0) & 255, HEAP8[(HEAP32[$18 + 12 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0) | 0;
     HEAP8[HEAP32[$21 >> 2] >> 0] = $660;
     HEAP8[(HEAP32[$21 >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + (HEAP32[$11 >> 2] | 0);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
   }
   HEAP32[$31 >> 2] = HEAP32[$18 >> 2];
   $671 = (HEAP32[$11 >> 2] | 0) == 1;
   HEAP32[$15 >> 2] = 0;
   if ($671) while (1) {
    if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
    HEAP8[(HEAP32[$21 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$31 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
   } else while (1) {
    if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
    $694 = HEAP8[(HEAP32[$31 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
    $695 = HEAP32[$21 >> 2] | 0;
    HEAP32[$21 >> 2] = $695 + 1;
    HEAP8[$695 >> 0] = $694;
    $697 = HEAP32[$21 >> 2] | 0;
    HEAP32[$21 >> 2] = $697 + 1;
    HEAP8[$697 >> 0] = -1;
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
 }
 _stbi__cleanup_jpeg(HEAP32[$6 >> 2] | 0);
 HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2];
 HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 4 >> 2];
 if (HEAP32[$9 >> 2] | 0) HEAP32[HEAP32[$9 >> 2] >> 2] = (HEAP32[(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 8 >> 2] | 0) >= 3 ? 3 : 1;
 HEAP32[$5 >> 2] = HEAP32[$17 >> 2];
 $723 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $723 | 0;
}

function _stbtt__GetGlyphShapeTT($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $155 = 0, $16 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $211 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $359 = 0, $36 = 0, $360 = 0, $37 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $39 = 0, $396 = 0, $397 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $441 = 0, $45 = 0, $46 = 0, $47 = 0, $472 = 0.0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $718 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $3 = sp + 164 | 0;
 $4 = sp + 160 | 0;
 $5 = sp + 156 | 0;
 $6 = sp + 152 | 0;
 $7 = sp + 180 | 0;
 $8 = sp + 148 | 0;
 $9 = sp + 144 | 0;
 $10 = sp + 140 | 0;
 $11 = sp + 136 | 0;
 $12 = sp + 132 | 0;
 $13 = sp + 183 | 0;
 $14 = sp + 182 | 0;
 $15 = sp + 128 | 0;
 $16 = sp + 124 | 0;
 $17 = sp + 120 | 0;
 $18 = sp + 116 | 0;
 $19 = sp + 112 | 0;
 $20 = sp + 108 | 0;
 $21 = sp + 104 | 0;
 $22 = sp + 100 | 0;
 $23 = sp + 96 | 0;
 $24 = sp + 92 | 0;
 $25 = sp + 88 | 0;
 $26 = sp + 84 | 0;
 $27 = sp + 80 | 0;
 $28 = sp + 76 | 0;
 $29 = sp + 72 | 0;
 $30 = sp + 68 | 0;
 $31 = sp + 64 | 0;
 $32 = sp + 60 | 0;
 $33 = sp + 178 | 0;
 $34 = sp + 176 | 0;
 $35 = sp + 56 | 0;
 $36 = sp + 52 | 0;
 $37 = sp + 174 | 0;
 $38 = sp + 172 | 0;
 $39 = sp + 48 | 0;
 $40 = sp + 44 | 0;
 $41 = sp + 40 | 0;
 $42 = sp + 36 | 0;
 $43 = sp;
 $44 = sp + 32 | 0;
 $45 = sp + 28 | 0;
 $46 = sp + 24 | 0;
 $47 = sp + 170 | 0;
 $48 = sp + 168 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$9 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2];
 HEAP32[$10 >> 2] = 0;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$12 >> 2] = _stbtt__GetGlyfOffset(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 HEAP32[HEAP32[$6 >> 2] >> 2] = 0;
 if ((HEAP32[$12 >> 2] | 0) < 0) {
  HEAP32[$3 >> 2] = 0;
  $718 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $718 | 0;
 }
 HEAP16[$7 >> 1] = _ttSHORT((HEAP32[$9 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0) | 0;
 L5 : do if ((HEAP16[$7 >> 1] | 0) > 0) {
  HEAP8[$13 >> 0] = 0;
  HEAP32[$17 >> 2] = 0;
  HEAP32[$21 >> 2] = 0;
  HEAP32[$23 >> 2] = 0;
  HEAP32[$8 >> 2] = (HEAP32[$9 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) + 10;
  HEAP32[$15 >> 2] = (_ttUSHORT((HEAP32[$9 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) + 10 + (HEAP16[$7 >> 1] << 1) | 0) | 0) & 65535;
  HEAP32[$32 >> 2] = (HEAP32[$9 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) + 10 + (HEAP16[$7 >> 1] << 1) + 2 + (HEAP32[$15 >> 2] | 0);
  HEAP32[$19 >> 2] = 1 + ((_ttUSHORT((HEAP32[$8 >> 2] | 0) + (HEAP16[$7 >> 1] << 1) + -2 | 0) | 0) & 65535);
  HEAP32[$18 >> 2] = (HEAP32[$19 >> 2] | 0) + (HEAP16[$7 >> 1] << 1);
  HEAP32[$10 >> 2] = _fons__tmpalloc((HEAP32[$18 >> 2] | 0) * 14 | 0, HEAP32[HEAP32[$4 >> 2] >> 2] | 0) | 0;
  if (!(HEAP32[$10 >> 2] | 0)) {
   HEAP32[$3 >> 2] = 0;
   $718 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $718 | 0;
  }
  HEAP32[$20 >> 2] = 0;
  HEAP8[$14 >> 0] = 0;
  HEAP32[$22 >> 2] = (HEAP32[$18 >> 2] | 0) - (HEAP32[$19 >> 2] | 0);
  HEAP32[$16 >> 2] = 0;
  while (1) {
   if ((HEAP32[$16 >> 2] | 0) >= (HEAP32[$19 >> 2] | 0)) break;
   if (!(HEAPU8[$14 >> 0] | 0)) {
    $120 = HEAP32[$32 >> 2] | 0;
    HEAP32[$32 >> 2] = $120 + 1;
    HEAP8[$13 >> 0] = HEAP8[$120 >> 0] | 0;
    if (HEAPU8[$13 >> 0] & 8 | 0) {
     $127 = HEAP32[$32 >> 2] | 0;
     HEAP32[$32 >> 2] = $127 + 1;
     HEAP8[$14 >> 0] = HEAP8[$127 >> 0] | 0;
    }
   } else HEAP8[$14 >> 0] = (HEAP8[$14 >> 0] | 0) + -1 << 24 >> 24;
   HEAP8[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] = HEAP8[$13 >> 0] | 0;
   HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
  }
  HEAP32[$24 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  while (1) {
   if ((HEAP32[$16 >> 2] | 0) >= (HEAP32[$19 >> 2] | 0)) break;
   HEAP8[$13 >> 0] = HEAP8[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] | 0;
   if (HEAPU8[$13 >> 0] & 2 | 0) {
    $155 = HEAP32[$32 >> 2] | 0;
    HEAP32[$32 >> 2] = $155 + 1;
    HEAP16[$33 >> 1] = HEAPU8[$155 >> 0] | 0;
    $164 = HEAP16[$33 >> 1] | 0;
    HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + (HEAPU8[$13 >> 0] & 16 | 0 ? $164 : 0 - $164 | 0);
   } else if (!(HEAPU8[$13 >> 0] & 16)) {
    HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + (((HEAPU8[HEAP32[$32 >> 2] >> 0] << 8) + (HEAPU8[(HEAP32[$32 >> 2] | 0) + 1 >> 0] | 0) & 65535) << 16 >> 16);
    HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 2;
   }
   HEAP16[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0) * 14 | 0) >> 1] = HEAP32[$24 >> 2];
   HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
  }
  HEAP32[$25 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  while (1) {
   if ((HEAP32[$16 >> 2] | 0) >= (HEAP32[$19 >> 2] | 0)) break;
   HEAP8[$13 >> 0] = HEAP8[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] | 0;
   if (HEAPU8[$13 >> 0] & 4 | 0) {
    $211 = HEAP32[$32 >> 2] | 0;
    HEAP32[$32 >> 2] = $211 + 1;
    HEAP16[$34 >> 1] = HEAPU8[$211 >> 0] | 0;
    $220 = HEAP16[$34 >> 1] | 0;
    HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + (HEAPU8[$13 >> 0] & 32 | 0 ? $220 : 0 - $220 | 0);
   } else if (!(HEAPU8[$13 >> 0] & 32)) {
    HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + (((HEAPU8[HEAP32[$32 >> 2] >> 0] << 8) + (HEAPU8[(HEAP32[$32 >> 2] | 0) + 1 >> 0] | 0) & 65535) << 16 >> 16);
    HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 2;
   }
   HEAP16[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0) * 14 | 0) + 2 >> 1] = HEAP32[$25 >> 2];
   HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
  }
  HEAP32[$11 >> 2] = 0;
  HEAP32[$31 >> 2] = 0;
  HEAP32[$30 >> 2] = 0;
  HEAP32[$27 >> 2] = 0;
  HEAP32[$26 >> 2] = 0;
  HEAP32[$29 >> 2] = 0;
  HEAP32[$28 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  while (1) {
   $257 = HEAP32[$10 >> 2] | 0;
   if ((HEAP32[$16 >> 2] | 0) >= (HEAP32[$19 >> 2] | 0)) break;
   HEAP8[$13 >> 0] = HEAP8[$257 + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] | 0;
   HEAP32[$24 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0) * 14 | 0) >> 1];
   HEAP32[$25 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0) * 14 | 0) + 2 >> 1];
   do if ((HEAP32[$20 >> 2] | 0) == (HEAP32[$16 >> 2] | 0)) {
    if (HEAP32[$16 >> 2] | 0) HEAP32[$11 >> 2] = _stbtt__close_shape(HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$23 >> 2] | 0, HEAP32[$28 >> 2] | 0, HEAP32[$29 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$31 >> 2] | 0, HEAP32[$26 >> 2] | 0, HEAP32[$27 >> 2] | 0) | 0;
    HEAP32[$23 >> 2] = ((HEAPU8[$13 >> 0] & 1 | 0) != 0 ^ 1) & 1;
    $303 = HEAP32[$24 >> 2] | 0;
    do if (HEAP32[$23 >> 2] | 0) {
     HEAP32[$30 >> 2] = $303;
     HEAP32[$31 >> 2] = HEAP32[$25 >> 2];
     if (HEAPU8[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) + 1 | 0) * 14 | 0) + 12 >> 0] & 1 | 0) {
      HEAP32[$28 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) + 1 | 0) * 14 | 0) >> 1];
      HEAP32[$29 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) + 1 | 0) * 14 | 0) + 2 >> 1];
      HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
      break;
     } else {
      HEAP32[$28 >> 2] = (HEAP32[$24 >> 2] | 0) + (HEAP16[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) + 1 | 0) * 14 | 0) >> 1] | 0) >> 1;
      HEAP32[$29 >> 2] = (HEAP32[$25 >> 2] | 0) + (HEAP16[(HEAP32[$10 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) + 1 | 0) * 14 | 0) + 2 >> 1] | 0) >> 1;
      break;
     }
    } else {
     HEAP32[$28 >> 2] = $303;
     HEAP32[$29 >> 2] = HEAP32[$25 >> 2];
    } while (0);
    $359 = HEAP32[$10 >> 2] | 0;
    $360 = HEAP32[$11 >> 2] | 0;
    HEAP32[$11 >> 2] = $360 + 1;
    _stbtt_setvertex($359 + ($360 * 14 | 0) | 0, 1, HEAP32[$28 >> 2] | 0, HEAP32[$29 >> 2] | 0, 0, 0);
    HEAP32[$21 >> 2] = 0;
    HEAP32[$20 >> 2] = 1 + ((_ttUSHORT((HEAP32[$8 >> 2] | 0) + (HEAP32[$17 >> 2] << 1) | 0) | 0) & 65535);
    HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
   } else {
    $379 = (HEAP32[$21 >> 2] | 0) != 0;
    if (!(HEAPU8[$13 >> 0] & 1)) {
     if ($379) {
      $380 = HEAP32[$10 >> 2] | 0;
      $381 = HEAP32[$11 >> 2] | 0;
      HEAP32[$11 >> 2] = $381 + 1;
      _stbtt_setvertex($380 + ($381 * 14 | 0) | 0, 3, (HEAP32[$26 >> 2] | 0) + (HEAP32[$24 >> 2] | 0) >> 1, (HEAP32[$27 >> 2] | 0) + (HEAP32[$25 >> 2] | 0) >> 1, HEAP32[$26 >> 2] | 0, HEAP32[$27 >> 2] | 0);
     }
     HEAP32[$26 >> 2] = HEAP32[$24 >> 2];
     HEAP32[$27 >> 2] = HEAP32[$25 >> 2];
     HEAP32[$21 >> 2] = 1;
     break;
    }
    $396 = HEAP32[$10 >> 2] | 0;
    $397 = HEAP32[$11 >> 2] | 0;
    HEAP32[$11 >> 2] = $397 + 1;
    $399 = $396 + ($397 * 14 | 0) | 0;
    $400 = HEAP32[$24 >> 2] | 0;
    $401 = HEAP32[$25 >> 2] | 0;
    if ($379) _stbtt_setvertex($399, 3, $400, $401, HEAP32[$26 >> 2] | 0, HEAP32[$27 >> 2] | 0); else _stbtt_setvertex($399, 2, $400, $401, 0, 0);
    HEAP32[$21 >> 2] = 0;
   } while (0);
   HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
  }
  HEAP32[$11 >> 2] = _stbtt__close_shape($257, HEAP32[$11 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$23 >> 2] | 0, HEAP32[$28 >> 2] | 0, HEAP32[$29 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$31 >> 2] | 0, HEAP32[$26 >> 2] | 0, HEAP32[$27 >> 2] | 0) | 0;
 } else {
  if ((HEAP16[$7 >> 1] | 0) != -1) {
   if ((HEAP16[$7 >> 1] | 0) >= 0) break;
   ___assert_fail(43639, 40159, 1801, 40565);
  }
  HEAP32[$35 >> 2] = 1;
  HEAP32[$36 >> 2] = (HEAP32[$9 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) + 10;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  while (1) {
   if (!(HEAP32[$35 >> 2] | 0)) break L5;
   HEAP32[$39 >> 2] = 0;
   HEAP32[$41 >> 2] = 0;
   HEAP32[$42 >> 2] = 0;
   HEAP32[$43 >> 2] = HEAP32[248];
   HEAP32[$43 + 4 >> 2] = HEAP32[249];
   HEAP32[$43 + 8 >> 2] = HEAP32[250];
   HEAP32[$43 + 12 >> 2] = HEAP32[251];
   HEAP32[$43 + 16 >> 2] = HEAP32[252];
   HEAP32[$43 + 20 >> 2] = HEAP32[253];
   HEAP16[$37 >> 1] = _ttSHORT(HEAP32[$36 >> 2] | 0) | 0;
   HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
   HEAP16[$38 >> 1] = _ttSHORT(HEAP32[$36 >> 2] | 0) | 0;
   HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
   if (!(HEAPU16[$37 >> 1] & 2)) {
    label = 55;
    break;
   }
   $441 = HEAP32[$36 >> 2] | 0;
   if (HEAPU16[$37 >> 1] & 1 | 0) {
    HEAPF32[$43 + 16 >> 2] = +((_ttSHORT($441) | 0) << 16 >> 16);
    HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
    HEAPF32[$43 + 20 >> 2] = +((_ttSHORT(HEAP32[$36 >> 2] | 0) | 0) << 16 >> 16);
    HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
   } else {
    HEAPF32[$43 + 16 >> 2] = +(HEAP8[$441 >> 0] | 0);
    HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
    HEAPF32[$43 + 20 >> 2] = +(HEAP8[HEAP32[$36 >> 2] >> 0] | 0);
    HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
   }
   do if (HEAPU16[$37 >> 1] & 8 | 0) {
    $472 = +((_ttSHORT(HEAP32[$36 >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
    HEAPF32[$43 + 12 >> 2] = $472;
    HEAPF32[$43 >> 2] = $472;
    HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
    HEAPF32[$43 + 8 >> 2] = 0.0;
    HEAPF32[$43 + 4 >> 2] = 0.0;
   } else {
    if (HEAPU16[$37 >> 1] & 64 | 0) {
     HEAPF32[$43 >> 2] = +((_ttSHORT(HEAP32[$36 >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
     HEAPF32[$43 + 8 >> 2] = 0.0;
     HEAPF32[$43 + 4 >> 2] = 0.0;
     HEAPF32[$43 + 12 >> 2] = +((_ttSHORT(HEAP32[$36 >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
     break;
    }
    if (HEAPU16[$37 >> 1] & 128 | 0) {
     HEAPF32[$43 >> 2] = +((_ttSHORT(HEAP32[$36 >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
     HEAPF32[$43 + 4 >> 2] = +((_ttSHORT(HEAP32[$36 >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
     HEAPF32[$43 + 8 >> 2] = +((_ttSHORT(HEAP32[$36 >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
     HEAPF32[$43 + 12 >> 2] = +((_ttSHORT(HEAP32[$36 >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 2;
    }
   } while (0);
   HEAPF32[$44 >> 2] = +Math_sqrt(+(+HEAPF32[$43 >> 2] * +HEAPF32[$43 >> 2] + +HEAPF32[$43 + 4 >> 2] * +HEAPF32[$43 + 4 >> 2]));
   HEAPF32[$45 >> 2] = +Math_sqrt(+(+HEAPF32[$43 + 8 >> 2] * +HEAPF32[$43 + 8 >> 2] + +HEAPF32[$43 + 12 >> 2] * +HEAPF32[$43 + 12 >> 2]));
   HEAP32[$39 >> 2] = _stbtt_GetGlyphShape(HEAP32[$4 >> 2] | 0, HEAPU16[$38 >> 1] | 0, $41) | 0;
   if ((HEAP32[$39 >> 2] | 0) > 0) {
    HEAP32[$40 >> 2] = 0;
    while (1) {
     if ((HEAP32[$40 >> 2] | 0) >= (HEAP32[$39 >> 2] | 0)) break;
     HEAP32[$46 >> 2] = (HEAP32[$41 >> 2] | 0) + ((HEAP32[$40 >> 2] | 0) * 14 | 0);
     HEAP16[$47 >> 1] = HEAP16[HEAP32[$46 >> 2] >> 1] | 0;
     HEAP16[$48 >> 1] = HEAP16[(HEAP32[$46 >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[HEAP32[$46 >> 2] >> 1] = ~~(+HEAPF32[$44 >> 2] * (+HEAPF32[$43 >> 2] * +(HEAP16[$47 >> 1] | 0) + +HEAPF32[$43 + 8 >> 2] * +(HEAP16[$48 >> 1] | 0) + +HEAPF32[$43 + 16 >> 2]));
     HEAP16[(HEAP32[$46 >> 2] | 0) + 2 >> 1] = ~~(+HEAPF32[$45 >> 2] * (+HEAPF32[$43 + 4 >> 2] * +(HEAP16[$47 >> 1] | 0) + +HEAPF32[$43 + 12 >> 2] * +(HEAP16[$48 >> 1] | 0) + +HEAPF32[$43 + 20 >> 2]));
     HEAP16[$47 >> 1] = HEAP16[(HEAP32[$46 >> 2] | 0) + 4 >> 1] | 0;
     HEAP16[$48 >> 1] = HEAP16[(HEAP32[$46 >> 2] | 0) + 6 >> 1] | 0;
     HEAP16[(HEAP32[$46 >> 2] | 0) + 4 >> 1] = ~~(+HEAPF32[$44 >> 2] * (+HEAPF32[$43 >> 2] * +(HEAP16[$47 >> 1] | 0) + +HEAPF32[$43 + 8 >> 2] * +(HEAP16[$48 >> 1] | 0) + +HEAPF32[$43 + 16 >> 2]));
     HEAP16[(HEAP32[$46 >> 2] | 0) + 6 >> 1] = ~~(+HEAPF32[$45 >> 2] * (+HEAPF32[$43 + 4 >> 2] * +(HEAP16[$47 >> 1] | 0) + +HEAPF32[$43 + 12 >> 2] * +(HEAP16[$48 >> 1] | 0) + +HEAPF32[$43 + 20 >> 2]));
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
    }
    HEAP32[$42 >> 2] = _fons__tmpalloc(((HEAP32[$11 >> 2] | 0) + (HEAP32[$39 >> 2] | 0) | 0) * 14 | 0, HEAP32[HEAP32[$4 >> 2] >> 2] | 0) | 0;
    if (!(HEAP32[$42 >> 2] | 0)) break;
    if ((HEAP32[$11 >> 2] | 0) > 0) _memcpy(HEAP32[$42 >> 2] | 0, HEAP32[$10 >> 2] | 0, (HEAP32[$11 >> 2] | 0) * 14 | 0) | 0;
    _memcpy((HEAP32[$42 >> 2] | 0) + ((HEAP32[$11 >> 2] | 0) * 14 | 0) | 0, HEAP32[$41 >> 2] | 0, (HEAP32[$39 >> 2] | 0) * 14 | 0) | 0;
    if (HEAP32[$10 >> 2] | 0) _fons__tmpfree(HEAP32[$10 >> 2] | 0, HEAP32[HEAP32[$4 >> 2] >> 2] | 0);
    HEAP32[$10 >> 2] = HEAP32[$42 >> 2];
    _fons__tmpfree(HEAP32[$41 >> 2] | 0, HEAP32[HEAP32[$4 >> 2] >> 2] | 0);
    HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + (HEAP32[$39 >> 2] | 0);
   }
   HEAP32[$35 >> 2] = HEAPU16[$37 >> 1] & 32;
  }
  if ((label | 0) == 55) ___assert_fail(43639, 40159, 1748, 40565);
  if (HEAP32[$10 >> 2] | 0) _fons__tmpfree(HEAP32[$10 >> 2] | 0, HEAP32[HEAP32[$4 >> 2] >> 2] | 0);
  if (HEAP32[$41 >> 2] | 0) _fons__tmpfree(HEAP32[$41 >> 2] | 0, HEAP32[HEAP32[$4 >> 2] >> 2] | 0);
  HEAP32[$3 >> 2] = 0;
  $718 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $718 | 0;
 } while (0);
 HEAP32[HEAP32[$6 >> 2] >> 2] = HEAP32[$10 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$11 >> 2];
 $718 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $718 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i246 = 0, $$0$i$i$i250 = 0, $$0208 = 0, $$3 = 0, $100 = 0, $102 = 0, $103 = 0, $108 = 0, $109 = 0, $115 = 0, $121 = 0, $127 = 0, $128 = 0, $138 = 0, $139 = 0, $15 = 0, $18 = 0, $20 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 76) {
  $15 = $0 + 1 | 0;
  do switch (HEAP8[$15 >> 0] | 0) {
  case 84:
   {
    $$3 = $0;
    break L1;
    break;
   }
  case 119:
   {
    $18 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49071, __ZNSt3__211char_traitsIcE6lengthEPKc(49071) | 0);
    $20 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($18, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($20 | 0) == ($18 | 0) ? $0 : $20;
    break L1;
    break;
   }
  case 98:
   {
    if ((HEAP8[$0 + 3 >> 0] | 0) != 69) {
     $$3 = $0;
     break L1;
    }
    switch (HEAP8[$0 + 2 >> 0] | 0) {
    case 48:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($3, 49079);
      $28 = $2 + 4 | 0;
      $29 = HEAP32[$28 >> 2] | 0;
      if ($29 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($29, $3);
       HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $0 + 4 | 0;
      break L1;
      break;
     }
    case 49:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($3, 49085);
      $36 = $2 + 4 | 0;
      $37 = HEAP32[$36 >> 2] | 0;
      if ($37 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($37, $3);
       HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $0 + 4 | 0;
      break L1;
      break;
     }
    default:
     {
      $$3 = $0;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    $44 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49090, __ZNSt3__211char_traitsIcE6lengthEPKc(49090) | 0);
    $46 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($44, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($46 | 0) == ($44 | 0) ? $0 : $46;
    break L1;
    break;
   }
  case 97:
   {
    $48 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49095, __ZNSt3__211char_traitsIcE6lengthEPKc(49095) | 0);
    $50 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($48, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($50 | 0) == ($48 | 0) ? $0 : $50;
    break L1;
    break;
   }
  case 104:
   {
    $52 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49107, __ZNSt3__211char_traitsIcE6lengthEPKc(49107) | 0);
    $54 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($52, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($54 | 0) == ($52 | 0) ? $0 : $54;
    break L1;
    break;
   }
  case 115:
   {
    $56 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49121, __ZNSt3__211char_traitsIcE6lengthEPKc(49121) | 0);
    $58 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($56, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($58 | 0) == ($56 | 0) ? $0 : $58;
    break L1;
    break;
   }
  case 116:
   {
    $60 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49127, __ZNSt3__211char_traitsIcE6lengthEPKc(49127) | 0);
    $62 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($60, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($62 | 0) == ($60 | 0) ? $0 : $62;
    break L1;
    break;
   }
  case 105:
   {
    $64 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 2185869, __ZNSt3__211char_traitsIcE6lengthEPKc(2185869) | 0);
    $66 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($64, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($66 | 0) == ($64 | 0) ? $0 : $66;
    break L1;
    break;
   }
  case 106:
   {
    $68 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49142, __ZNSt3__211char_traitsIcE6lengthEPKc(49142) | 0);
    $70 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($68, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($70 | 0) == ($68 | 0) ? $0 : $70;
    break L1;
    break;
   }
  case 108:
   {
    $72 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49144, __ZNSt3__211char_traitsIcE6lengthEPKc(49144) | 0);
    $74 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($72, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($74 | 0) == ($72 | 0) ? $0 : $74;
    break L1;
    break;
   }
  case 109:
   {
    $76 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49146, __ZNSt3__211char_traitsIcE6lengthEPKc(49146) | 0);
    $78 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($76, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($78 | 0) == ($76 | 0) ? $0 : $78;
    break L1;
    break;
   }
  case 120:
   {
    $80 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49149, __ZNSt3__211char_traitsIcE6lengthEPKc(49149) | 0);
    $82 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($80, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($82 | 0) == ($80 | 0) ? $0 : $82;
    break L1;
    break;
   }
  case 121:
   {
    $84 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49152, __ZNSt3__211char_traitsIcE6lengthEPKc(49152) | 0);
    $86 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($84, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($86 | 0) == ($84 | 0) ? $0 : $86;
    break L1;
    break;
   }
  case 110:
   {
    $88 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49156, __ZNSt3__211char_traitsIcE6lengthEPKc(49156) | 0);
    $90 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($88, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($90 | 0) == ($88 | 0) ? $0 : $90;
    break L1;
    break;
   }
  case 111:
   {
    $92 = $0 + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 49165, __ZNSt3__211char_traitsIcE6lengthEPKc(49165) | 0);
    $94 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($92, $1, $3, $2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($94 | 0) == ($92 | 0) ? $0 : $94;
    break L1;
    break;
   }
  case 102:
   {
    $96 = $0 + 2 | 0;
    $97 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($96, $1, $2) | 0;
    $$3 = ($97 | 0) == ($96 | 0) ? $0 : $97;
    break L1;
    break;
   }
  case 100:
   {
    $99 = $0 + 2 | 0;
    $100 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($99, $1, $2) | 0;
    $$3 = ($100 | 0) == ($99 | 0) ? $0 : $100;
    break L1;
    break;
   }
  case 101:
   {
    $102 = $0 + 2 | 0;
    $103 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($102, $1, $2) | 0;
    $$3 = ($103 | 0) == ($102 | 0) ? $0 : $103;
    break L1;
    break;
   }
  case 95:
   {
    if ((HEAP8[$0 + 2 >> 0] | 0) != 90) {
     $$3 = $0;
     break L1;
    }
    $108 = $0 + 3 | 0;
    $109 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($108, $1, $2) | 0;
    if (($109 | 0) == ($108 | 0) | ($109 | 0) == ($1 | 0)) {
     $$3 = $0;
     break L1;
    }
    $$3 = (HEAP8[$109 >> 0] | 0) == 69 ? $109 + 1 | 0 : $0;
    break L1;
    break;
   }
  default:
   {
    $115 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
    if (($115 | 0) == ($15 | 0) | ($115 | 0) == ($1 | 0)) {
     $$3 = $0;
     break L1;
    }
    if ((HEAP8[$115 >> 0] | 0) == 69) {
     $$3 = $115 + 1 | 0;
     break L1;
    }
    $$0208 = $115;
    while (1) {
     if (($$0208 | 0) == ($1 | 0)) {
      $$3 = $0;
      break L1;
     }
     $121 = HEAP8[$$0208 >> 0] | 0;
     if ((($121 << 24 >> 24) + -48 | 0) >>> 0 >= 10) break;
     $$0208 = $$0208 + 1 | 0;
    }
    if (!(($$0208 | 0) != ($115 | 0) & $121 << 24 >> 24 == 69)) {
     $$3 = $0;
     break L1;
    }
    $127 = $2 + 4 | 0;
    $128 = HEAP32[$127 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($128 | 0)) {
     $$3 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, $128 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($7, 0, 47879) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47877) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i246 = 0;
    while (1) {
     if (($$0$i$i$i246 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i246 << 2) >> 2] = 0;
     $$0$i$i$i246 = $$0$i$i$i246 + 1 | 0;
    }
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    HEAP32[$8 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($8, $115, $$0208);
    $138 = HEAP8[$8 + 11 >> 0] | 0;
    $139 = $138 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($5, $139 ? HEAP32[$8 >> 2] | 0 : $8, $139 ? HEAP32[$8 + 4 >> 2] | 0 : $138 & 255) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i250 = 0;
    while (1) {
     if (($$0$i$i$i250 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i250 << 2) >> 2] = 0;
     $$0$i$i$i250 = $$0$i$i$i250 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$127 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    $$3 = $$0208 + 1 | 0;
    break L1;
   }
  } while (0);
 } else $$3 = $0; else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN13TPPLPartition11RemoveHolesEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0102246 = 0, $$0103259 = 0, $$0107328 = 0, $$0112327 = 0, $$0129$off0281 = 0, $$1104$lcssa = 0, $$1108253 = 0, $$1113282 = 0, $$1122$off0252 = 0, $$1130$off0269 = 0, $$1271 = 0, $$2105$lcssa = 0, $$2105296 = 0, $$2114270 = 0, $$2131$off0 = 0, $$2291 = 0, $$3106302 = 0, $$3110245 = 0, $$3115 = 0, $$3124$off0 = 0, $$3132$off0 = 0, $$3297 = 0, $$4111 = 0, $$4116 = 0, $$4303 = 0, $$5 = 0, $$byval_copy = 0, $$byval_copy3 = 0, $$pre$phi318Z2D = 0, $$pre$phiZ2D = 0, $$sroa$0176$0263 = 0, $$sroa$0176$0264 = 0, $$sroa$0184$0308 = 0, $$sroa$0184$0309 = 0, $$sroa$0184$1238 = 0, $$sroa$0184$1238$pre = 0, $$sroa$0184$1239 = 0, $$sroa$0184$2250324 = 0, $$sroa$0184$2250329 = 0, $$sroa$0184$2254 = 0, $$sroa$0184$3279 = 0, $$sroa$0184$3283 = 0, $$sroa$0184$4241 = 0, $$sroa$0184$4242 = 0, $$sroa$0209$0325 = 0, $$sroa$0209$1280 = 0, $$sroa$0209$2268 = 0, $$sroa$0209$3 = 0, $$sroa$0209$4 = 0, $$sroa$0215$0326 = 0, $$sroa$0215$1251 = 0, $$sroa$0215$3244 = 0, $$sroa$0215$4 = 0, $$sroa$0215$5 = 0, $$sroa$036$0$copyload = 0.0, $10 = 0, $101 = 0, $107 = 0, $11 = 0, $110 = 0, $112 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $134 = 0, $135 = 0, $14 = 0, $142 = 0, $147 = 0, $150 = 0, $16 = 0, $17 = 0, $20 = 0, $3 = 0, $30 = 0, $35 = 0, $38 = 0, $4 = 0, $43 = 0.0, $48 = 0, $5 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $67 = 0.0, $7 = 0, $72 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $84 = 0, $87 = 0, $9 = 0, $94 = 0, $97 = 0, $spec$select = 0, $spec$select224 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $$byval_copy3 = sp + 144 | 0;
 $$byval_copy = sp + 120 | 0;
 $3 = sp + 204 | 0;
 $4 = sp + 200 | 0;
 $5 = sp + 188 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 72 | 0;
 $8 = sp + 48 | 0;
 $9 = sp + 24 | 0;
 $10 = sp;
 $11 = sp + 168 | 0;
 $12 = sp + 184 | 0;
 $13 = sp + 180 | 0;
 HEAP32[$5 >> 2] = $5;
 $14 = $5 + 4 | 0;
 HEAP32[$14 >> 2] = $5;
 HEAP32[$5 + 8 >> 2] = 0;
 __ZN8TPPLPolyC2Ev($11);
 $16 = $1 + 4 | 0;
 $$sroa$0184$0308 = HEAP32[$16 >> 2] | 0;
 $17 = $$sroa$0184$0308;
 L1 : do if (($1 | 0) == ($17 | 0)) {
  $$pre$phiZ2D = $17;
  $$sroa$0184$1238 = $$sroa$0184$0308;
  label = 6;
 } else {
  $$sroa$0184$0309 = $$sroa$0184$0308;
  $20 = $17;
  while (1) {
   if (__ZNK8TPPLPoly6IsHoleEv($$sroa$0184$0309 + 8 | 0) | 0) break;
   $$sroa$0184$0309 = HEAP32[$20 + 4 >> 2] | 0;
   $20 = $$sroa$0184$0309;
   if (($1 | 0) == ($20 | 0)) {
    label = 5;
    break;
   }
  }
  if ((label | 0) == 5) {
   $$sroa$0184$1238$pre = HEAP32[$16 >> 2] | 0;
   $$pre$phiZ2D = $$sroa$0184$1238$pre;
   $$sroa$0184$1238 = $$sroa$0184$1238$pre;
   label = 6;
   break;
  }
  if (($5 | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$4 >> 2] = $1;
   HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$4 >> 2];
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE6assignINS_21__list_const_iteratorIS1_PvEEEEvT_S9_PNS_9enable_ifIXsr19__is_input_iteratorIS9_EE5valueEvE4typeE($5, $$byval_copy, $$byval_copy3, 0);
  }
  $$sroa$0184$2250324 = HEAP32[$14 >> 2] | 0;
  $35 = $$sroa$0184$2250324;
  L12 : do if (($5 | 0) != ($35 | 0)) {
   $$0107328 = 0;
   $$0112327 = 0;
   $$sroa$0184$2250329 = $$sroa$0184$2250324;
   $$sroa$0209$0325 = 0;
   $$sroa$0215$0326 = 0;
   $150 = $35;
   while (1) {
    $$1108253 = $$0107328;
    $$1122$off0252 = 0;
    $$sroa$0184$2254 = $$sroa$0184$2250329;
    $$sroa$0215$1251 = $$sroa$0215$0326;
    $53 = $150;
    while (1) {
     $38 = $$sroa$0184$2254 + 8 | 0;
     if (__ZNK8TPPLPoly6IsHoleEv($38) | 0) {
      $spec$select = $$1122$off0252 ? $$sroa$0215$1251 : $$sroa$0184$2254;
      $spec$select224 = $$1122$off0252 ? $$1108253 : 0;
      if ((__ZNK8TPPLPoly12GetNumPointsEv($38) | 0) > 0) {
       $$0102246 = 0;
       $$3110245 = $spec$select224;
       $$sroa$0215$3244 = $spec$select;
       while (1) {
        $43 = +HEAPF64[(__ZN8TPPLPoly8GetPointEl($38, $$0102246) | 0) >> 3];
        $48 = $43 > +HEAPF64[(__ZN8TPPLPoly8GetPointEl($$sroa$0215$3244 + 8 | 0, $$3110245) | 0) >> 3];
        $$sroa$0215$4 = $48 ? $$sroa$0184$2254 : $$sroa$0215$3244;
        $$4111 = $48 ? $$0102246 : $$3110245;
        $$0102246 = $$0102246 + 1 | 0;
        if (($$0102246 | 0) >= (__ZNK8TPPLPoly12GetNumPointsEv($38) | 0)) {
         $$3124$off0 = 1;
         $$5 = $$4111;
         $$sroa$0215$5 = $$sroa$0215$4;
         break;
        } else {
         $$3110245 = $$4111;
         $$sroa$0215$3244 = $$sroa$0215$4;
        }
       }
      } else {
       $$3124$off0 = 1;
       $$5 = $spec$select224;
       $$sroa$0215$5 = $spec$select;
      }
     } else {
      $$3124$off0 = $$1122$off0252;
      $$5 = $$1108253;
      $$sroa$0215$5 = $$sroa$0215$1251;
     }
     $$sroa$0184$2254 = HEAP32[$53 + 4 >> 2] | 0;
     $53 = $$sroa$0184$2254;
     if (($5 | 0) == ($53 | 0)) break; else {
      $$1108253 = $$5;
      $$1122$off0252 = $$3124$off0;
      $$sroa$0215$1251 = $$sroa$0215$5;
     }
    }
    if (!$$3124$off0) break L12;
    $57 = $$sroa$0215$5 + 8 | 0;
    $58 = __ZN8TPPLPoly8GetPointEl($57, $$5) | 0;
    HEAP32[$6 >> 2] = HEAP32[$58 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$58 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$58 + 8 >> 2];
    HEAP32[$6 + 12 >> 2] = HEAP32[$58 + 12 >> 2];
    HEAP32[$6 + 16 >> 2] = HEAP32[$58 + 16 >> 2];
    HEAP32[$6 + 20 >> 2] = HEAP32[$58 + 20 >> 2];
    $$sroa$0184$3279 = HEAP32[$14 >> 2] | 0;
    $59 = $$sroa$0184$3279;
    if (($5 | 0) == ($59 | 0)) {
     $$0 = 0;
     break L1;
    }
    $$0129$off0281 = 0;
    $$1113282 = $$0112327;
    $$sroa$0184$3283 = $$sroa$0184$3279;
    $$sroa$0209$1280 = $$sroa$0209$0325;
    $107 = $59;
    while (1) {
     $62 = $$sroa$0184$3283 + 8 | 0;
     if (__ZNK8TPPLPoly6IsHoleEv($62) | 0) {
      $$3132$off0 = $$0129$off0281;
      $$4116 = $$1113282;
      $$sroa$0209$4 = $$sroa$0209$1280;
     } else if ((__ZNK8TPPLPoly12GetNumPointsEv($62) | 0) > 0) {
      $$1130$off0269 = $$0129$off0281;
      $$1271 = 0;
      $$2114270 = $$1113282;
      $$sroa$0209$2268 = $$sroa$0209$1280;
      while (1) {
       $67 = +HEAPF64[(__ZN8TPPLPoly8GetPointEl($62, $$1271) | 0) >> 3];
       L34 : do if (!($67 <= +HEAPF64[$6 >> 3])) {
        $72 = $$1271 + -1 + (__ZNK8TPPLPoly12GetNumPointsEv($62) | 0) | 0;
        $75 = __ZN8TPPLPoly8GetPointEl($62, ($72 | 0) % (__ZNK8TPPLPoly12GetNumPointsEv($62) | 0) | 0) | 0;
        $76 = __ZN8TPPLPoly8GetPointEl($62, $$1271) | 0;
        $77 = $$1271 + 1 | 0;
        if (__ZN13TPPLPartition6InConeER9TPPLPointS1_S1_S1_($0, $75, $76, __ZN8TPPLPoly8GetPointEl($62, ($77 | 0) % (__ZNK8TPPLPoly12GetNumPointsEv($62) | 0) | 0) | 0, $6) | 0) {
         $82 = __ZN8TPPLPoly8GetPointEl($62, $$1271) | 0;
         HEAP32[$7 >> 2] = HEAP32[$82 >> 2];
         HEAP32[$7 + 4 >> 2] = HEAP32[$82 + 4 >> 2];
         HEAP32[$7 + 8 >> 2] = HEAP32[$82 + 8 >> 2];
         HEAP32[$7 + 12 >> 2] = HEAP32[$82 + 12 >> 2];
         HEAP32[$7 + 16 >> 2] = HEAP32[$82 + 16 >> 2];
         HEAP32[$7 + 20 >> 2] = HEAP32[$82 + 20 >> 2];
         if ($$1130$off0269) {
          __ZNK9TPPLPointmiERKS_($$byval_copy, $7, $6);
          __ZN13TPPLPartition9NormalizeERK9TPPLPoint($$byval_copy3, 0, $$byval_copy);
          $$sroa$036$0$copyload = +HEAPF64[$$byval_copy3 >> 3];
          __ZNK9TPPLPointmiERKS_($$byval_copy, $8, $6);
          __ZN13TPPLPartition9NormalizeERK9TPPLPoint($$byval_copy3, 0, $$byval_copy);
          if (+HEAPF64[$$byval_copy3 >> 3] > $$sroa$036$0$copyload) {
           $$2131$off0 = 1;
           $$3115 = $$2114270;
           $$pre$phi318Z2D = $77;
           $$sroa$0209$3 = $$sroa$0209$2268;
           break;
          }
         }
         $$sroa$0176$0263 = HEAP32[$14 >> 2] | 0;
         $84 = $$sroa$0176$0263;
         if (($5 | 0) != ($84 | 0)) {
          $$sroa$0176$0264 = $$sroa$0176$0263;
          $101 = $84;
          do {
           $87 = $$sroa$0176$0264 + 8 | 0;
           do if (!(__ZNK8TPPLPoly6IsHoleEv($87) | 0)) {
            if ((__ZNK8TPPLPoly12GetNumPointsEv($87) | 0) <= 0) break;
            $$0103259 = 0;
            do {
             $94 = __ZN8TPPLPoly8GetPointEl($87, $$0103259) | 0;
             HEAP32[$9 >> 2] = HEAP32[$94 >> 2];
             HEAP32[$9 + 4 >> 2] = HEAP32[$94 + 4 >> 2];
             HEAP32[$9 + 8 >> 2] = HEAP32[$94 + 8 >> 2];
             HEAP32[$9 + 12 >> 2] = HEAP32[$94 + 12 >> 2];
             HEAP32[$9 + 16 >> 2] = HEAP32[$94 + 16 >> 2];
             HEAP32[$9 + 20 >> 2] = HEAP32[$94 + 20 >> 2];
             $$0103259 = $$0103259 + 1 | 0;
             $97 = __ZN8TPPLPoly8GetPointEl($87, ($$0103259 | 0) % (__ZNK8TPPLPoly12GetNumPointsEv($87) | 0) | 0) | 0;
             HEAP32[$10 >> 2] = HEAP32[$97 >> 2];
             HEAP32[$10 + 4 >> 2] = HEAP32[$97 + 4 >> 2];
             HEAP32[$10 + 8 >> 2] = HEAP32[$97 + 8 >> 2];
             HEAP32[$10 + 12 >> 2] = HEAP32[$97 + 12 >> 2];
             HEAP32[$10 + 16 >> 2] = HEAP32[$97 + 16 >> 2];
             HEAP32[$10 + 20 >> 2] = HEAP32[$97 + 20 >> 2];
             if (__ZN13TPPLPartition10IntersectsER9TPPLPointS1_S1_S1_(0, $6, $7, $9, $10) | 0) {
              $$2131$off0 = $$1130$off0269;
              $$3115 = $$2114270;
              $$pre$phi318Z2D = $77;
              $$sroa$0209$3 = $$sroa$0209$2268;
              break L34;
             }
            } while (($$0103259 | 0) < (__ZNK8TPPLPoly12GetNumPointsEv($87) | 0));
           } while (0);
           $$sroa$0176$0264 = HEAP32[$101 + 4 >> 2] | 0;
           $101 = $$sroa$0176$0264;
          } while (($5 | 0) != ($101 | 0));
         };
         HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$8 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
         HEAP32[$8 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
         HEAP32[$8 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
         HEAP32[$8 + 16 >> 2] = HEAP32[$7 + 16 >> 2];
         HEAP32[$8 + 20 >> 2] = HEAP32[$7 + 20 >> 2];
         $$2131$off0 = 1;
         $$3115 = $$1271;
         $$pre$phi318Z2D = $77;
         $$sroa$0209$3 = $$sroa$0184$3283;
        } else {
         $$2131$off0 = $$1130$off0269;
         $$3115 = $$2114270;
         $$pre$phi318Z2D = $77;
         $$sroa$0209$3 = $$sroa$0209$2268;
        }
       } else {
        $$2131$off0 = $$1130$off0269;
        $$3115 = $$2114270;
        $$pre$phi318Z2D = $$1271 + 1 | 0;
        $$sroa$0209$3 = $$sroa$0209$2268;
       } while (0);
       if (($$pre$phi318Z2D | 0) < (__ZNK8TPPLPoly12GetNumPointsEv($62) | 0)) {
        $$1130$off0269 = $$2131$off0;
        $$1271 = $$pre$phi318Z2D;
        $$2114270 = $$3115;
        $$sroa$0209$2268 = $$sroa$0209$3;
       } else {
        $$3132$off0 = $$2131$off0;
        $$4116 = $$3115;
        $$sroa$0209$4 = $$sroa$0209$3;
        break;
       }
      }
     } else {
      $$3132$off0 = $$0129$off0281;
      $$4116 = $$1113282;
      $$sroa$0209$4 = $$sroa$0209$1280;
     }
     $$sroa$0184$3283 = HEAP32[$107 + 4 >> 2] | 0;
     $107 = $$sroa$0184$3283;
     if (($5 | 0) == ($107 | 0)) break; else {
      $$0129$off0281 = $$3132$off0;
      $$1113282 = $$4116;
      $$sroa$0209$1280 = $$sroa$0209$4;
     }
    }
    if (!$$3132$off0) {
     $$0 = 0;
     break L1;
    }
    $110 = __ZNK8TPPLPoly12GetNumPointsEv($57) | 0;
    $112 = $$sroa$0209$4 + 8 | 0;
    __ZN8TPPLPoly4InitEl($11, $110 + 2 + (__ZNK8TPPLPoly12GetNumPointsEv($112) | 0) | 0);
    if (($$4116 | 0) < 0) $$1104$lcssa = 0; else {
     $117 = $$4116 + 1 | 0;
     $$2291 = 0;
     do {
      $118 = __ZN8TPPLPoly8GetPointEl($112, $$2291) | 0;
      $119 = __ZN8TPPLPolyixEi($11, $$2291) | 0;
      HEAP32[$119 >> 2] = HEAP32[$118 >> 2];
      HEAP32[$119 + 4 >> 2] = HEAP32[$118 + 4 >> 2];
      HEAP32[$119 + 8 >> 2] = HEAP32[$118 + 8 >> 2];
      HEAP32[$119 + 12 >> 2] = HEAP32[$118 + 12 >> 2];
      HEAP32[$119 + 16 >> 2] = HEAP32[$118 + 16 >> 2];
      HEAP32[$119 + 20 >> 2] = HEAP32[$118 + 20 >> 2];
      $$2291 = $$2291 + 1 | 0;
     } while (($$2291 | 0) != ($117 | 0));
     $$1104$lcssa = $117;
    }
    if ((__ZNK8TPPLPoly12GetNumPointsEv($57) | 0) < 0) $$2105$lcssa = $$1104$lcssa; else {
     $$2105296 = $$1104$lcssa;
     $$3297 = 0;
     while (1) {
      $126 = __ZN8TPPLPoly8GetPointEl($57, ($$3297 + $$5 | 0) % (__ZNK8TPPLPoly12GetNumPointsEv($57) | 0) | 0) | 0;
      $127 = __ZN8TPPLPolyixEi($11, $$2105296) | 0;
      HEAP32[$127 >> 2] = HEAP32[$126 >> 2];
      HEAP32[$127 + 4 >> 2] = HEAP32[$126 + 4 >> 2];
      HEAP32[$127 + 8 >> 2] = HEAP32[$126 + 8 >> 2];
      HEAP32[$127 + 12 >> 2] = HEAP32[$126 + 12 >> 2];
      HEAP32[$127 + 16 >> 2] = HEAP32[$126 + 16 >> 2];
      HEAP32[$127 + 20 >> 2] = HEAP32[$126 + 20 >> 2];
      $128 = $$2105296 + 1 | 0;
      if (($$3297 | 0) < (__ZNK8TPPLPoly12GetNumPointsEv($57) | 0)) {
       $$2105296 = $128;
       $$3297 = $$3297 + 1 | 0;
      } else {
       $$2105$lcssa = $128;
       break;
      }
     }
    }
    if (($$4116 | 0) < (__ZNK8TPPLPoly12GetNumPointsEv($112) | 0)) {
     $$3106302 = $$2105$lcssa;
     $$4303 = $$4116;
     while (1) {
      $134 = __ZN8TPPLPoly8GetPointEl($112, $$4303) | 0;
      $135 = __ZN8TPPLPolyixEi($11, $$3106302) | 0;
      HEAP32[$135 >> 2] = HEAP32[$134 >> 2];
      HEAP32[$135 + 4 >> 2] = HEAP32[$134 + 4 >> 2];
      HEAP32[$135 + 8 >> 2] = HEAP32[$134 + 8 >> 2];
      HEAP32[$135 + 12 >> 2] = HEAP32[$134 + 12 >> 2];
      HEAP32[$135 + 16 >> 2] = HEAP32[$134 + 16 >> 2];
      HEAP32[$135 + 20 >> 2] = HEAP32[$134 + 20 >> 2];
      $$4303 = $$4303 + 1 | 0;
      if (($$4303 | 0) >= (__ZNK8TPPLPoly12GetNumPointsEv($112) | 0)) break; else $$3106302 = $$3106302 + 1 | 0;
     }
    }
    HEAP32[$12 >> 2] = $$sroa$0215$5;
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$12 >> 2];
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEE($5, $$byval_copy3) | 0;
    HEAP32[$13 >> 2] = $$sroa$0209$4;
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$13 >> 2];
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEE($5, $$byval_copy3) | 0;
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($5, $11);
    $$sroa$0184$2250329 = HEAP32[$14 >> 2] | 0;
    $150 = $$sroa$0184$2250329;
    if (($5 | 0) == ($150 | 0)) break; else {
     $$0107328 = $$5;
     $$0112327 = $$4116;
     $$sroa$0209$0325 = $$sroa$0209$4;
     $$sroa$0215$0326 = $$sroa$0215$5;
    }
   }
  } while (0);
  $$sroa$0184$4241 = HEAP32[$14 >> 2] | 0;
  $142 = $$sroa$0184$4241;
  if (($5 | 0) == ($142 | 0)) $$0 = 1; else {
   $$sroa$0184$4242 = $$sroa$0184$4241;
   $147 = $142;
   do {
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $$sroa$0184$4242 + 8 | 0);
    $$sroa$0184$4242 = HEAP32[$147 + 4 >> 2] | 0;
    $147 = $$sroa$0184$4242;
   } while (($5 | 0) != ($147 | 0));
   $$0 = 1;
  }
 } while (0);
 if ((label | 0) == 6) if (($1 | 0) == ($$pre$phiZ2D | 0)) $$0 = 1; else {
  $$sroa$0184$1239 = $$sroa$0184$1238;
  $30 = $$pre$phiZ2D;
  do {
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $$sroa$0184$1239 + 8 | 0);
   $$sroa$0184$1239 = HEAP32[$30 + 4 >> 2] | 0;
   $30 = $$sroa$0184$1239;
  } while (($1 | 0) != ($30 | 0));
  $$0 = 1;
 }
 __ZN8TPPLPolyD2Ev($11);
 __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($5);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0$lcssa$i$i$i = 0, $$0167316 = 0, $$0168319 = 0, $$0178345 = 0, $$0179341 = 0, $$0180$off0$lcssa = 0, $$0180$off0328 = 0, $$0185 = 0, $$0189 = 0, $$0193 = 0, $$0197 = 0, $$078$i$i$i = 0, $$09$i$i$i = 0, $$1181$off0318 = 0, $$1186$lcssa = 0, $$1186327 = 0, $$1190$lcssa = 0, $$1190326 = 0, $$1194$lcssa = 0, $$1194325 = 0, $$1198$lcssa = 0, $$1198324 = 0, $$2182$off0$lcssa = 0, $$2182$off0315 = 0, $$2191 = 0, $$2195 = 0, $$3183$off0 = 0, $$3188 = 0, $$3192 = 0, $$3196 = 0, $$3200 = 0, $$4184$off0 = 0, $$byval_copy3 = 0, $$in = 0, $$pre365 = 0, $$pre366 = 0, $$pre368 = 0, $$sroa$0231$0337 = 0, $$sroa$0231$1$in = 0, $$sroa$0240$0323 = 0, $$sroa$046$0$copyload = 0, $$sroa$21$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $111 = 0, $114 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $144 = 0, $15 = 0, $150 = 0, $151 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $48 = 0, $50 = 0, $52 = 0, $57 = 0, $58 = 0, $63 = 0, $64 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $84 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $97 = 0, $98 = 0, $or$cond223249 = 0, $spec$select = 0, $spec$select218 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy3 = sp;
 $9 = sp + 64 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 92 | 0;
 $12 = sp + 88 | 0;
 $13 = sp + 112 | 0;
 $14 = sp + 124 | 0;
 $15 = sp + 120 | 0;
 $16 = sp + 16 | 0;
 $17 = sp + 116 | 0;
 $18 = sp + 32 | 0;
 $19 = sp + 28 | 0;
 $20 = sp + 108 | 0;
 $21 = sp + 104 | 0;
 $22 = sp + 100 | 0;
 $23 = sp + 96 | 0;
 HEAP32[$7 >> 2] = 0;
 __ZN8DrBitmapC2ERKS_($9, $1);
 __ZN8DrBitmapC2ERKS_($10, $1);
 __ZN6DrRectC2Eiiii($$byval_copy3, 0, 0, 0, 0);
 HEAP32[$8 >> 2] = HEAP32[$$byval_copy3 >> 2];
 HEAP32[$8 + 4 >> 2] = HEAP32[$$byval_copy3 + 4 >> 2];
 HEAP32[$8 + 8 >> 2] = HEAP32[$$byval_copy3 + 8 >> 2];
 HEAP32[$8 + 12 >> 2] = HEAP32[$$byval_copy3 + 12 >> 2];
 do if (($3 | $2 | 0) < 0) label = 4; else {
  $26 = $1 + 4 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  if (($27 | 0) > ($2 | 0)) {
   $29 = $1 + 8 | 0;
   $30 = HEAP32[$29 >> 2] | 0;
   if (($30 | 0) > ($3 | 0)) {
    if (($27 | 0) < 1 | ($30 | 0) < 1) {
     __ZN8DrBitmapC2Ev($0);
     break;
    }
    if (($27 | 0) == 1 & ($30 | 0) == 1) {
     $36 = HEAPU8[$4 >> 0] | HEAPU8[$4 + 1 >> 0] << 8 | HEAPU8[$4 + 2 >> 0] << 16 | HEAPU8[$4 + 3 >> 0] << 24;
     HEAP32[$11 >> 2] = $36;
     HEAP8[$$byval_copy3 >> 0] = HEAP8[$11 >> 0] | 0;
     HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
     HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
     HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
     __ZN8DrBitmap8setPixelEii7DrColor($1, 0, 0, $$byval_copy3);
     HEAP32[$12 >> 2] = $36;
     HEAP8[$$byval_copy3 >> 0] = HEAP8[$12 >> 0] | 0;
     HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$12 + 1 >> 0] | 0;
     HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$12 + 2 >> 0] | 0;
     HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$12 + 3 >> 0] | 0;
     __ZN8DrBitmap8setPixelEii7DrColor($9, 0, 0, $$byval_copy3);
     __ZN6DrRectC2Eiiii($$byval_copy3, $2, $3, 1, 1);
     HEAP32[$8 >> 2] = HEAP32[$$byval_copy3 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$$byval_copy3 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$$byval_copy3 + 8 >> 2];
     HEAP32[$8 + 12 >> 2] = HEAP32[$$byval_copy3 + 12 >> 2];
     __ZN8DrBitmapC2ERKS_($0, $9);
     break;
    }
    __ZNK8DrBitmap8getPixelEii($13, $1, $2, $3);
    $37 = HEAP32[$26 >> 2] | 0;
    if (($37 | 0) > 0) {
     $$0178345 = 0;
     $159 = $37;
     $45 = HEAP32[$29 >> 2] | 0;
     while (1) {
      if (($45 | 0) > 0) {
       $$0179341 = 0;
       do {
        __ZN7DrColorC2Ej($14, 0);
        HEAP8[$$byval_copy3 >> 0] = HEAP8[$14 >> 0] | 0;
        HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$14 + 1 >> 0] | 0;
        HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$14 + 2 >> 0] | 0;
        HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$14 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($9, $$0178345, $$0179341, $$byval_copy3);
        __ZN7DrColorC2Ej($15, 0);
        HEAP8[$$byval_copy3 >> 0] = HEAP8[$15 >> 0] | 0;
        HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$15 + 1 >> 0] | 0;
        HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$15 + 2 >> 0] | 0;
        HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$15 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($10, $$0178345, $$0179341, $$byval_copy3);
        $$0179341 = $$0179341 + 1 | 0;
        $50 = HEAP32[$29 >> 2] | 0;
       } while (($$0179341 | 0) < ($50 | 0));
       $160 = $50;
       $48 = HEAP32[$26 >> 2] | 0;
      } else {
       $160 = $45;
       $48 = $159;
      }
      $$0178345 = $$0178345 + 1 | 0;
      if (($$0178345 | 0) >= ($48 | 0)) break; else {
       $159 = $48;
       $45 = $160;
      }
     }
    }
    $39 = $16 + 4 | 0;
    $40 = $16 + 8 | 0;
    HEAP32[$16 >> 2] = 0;
    HEAP32[$16 + 4 >> 2] = 0;
    HEAP32[$16 + 8 >> 2] = 0;
    __ZN7DrPointC2Eii($$byval_copy3, $2, $3);
    $41 = HEAP32[$39 >> 2] | 0;
    if ($41 >>> 0 < (HEAP32[$40 >> 2] | 0) >>> 0) {
     $52 = $$byval_copy3;
     $57 = HEAP32[$52 + 4 >> 2] | 0;
     $58 = $41;
     HEAP32[$58 >> 2] = HEAP32[$52 >> 2];
     HEAP32[$58 + 4 >> 2] = $57;
     $63 = (HEAP32[$39 >> 2] | 0) + 8 | 0;
     HEAP32[$39 >> 2] = $63;
     $$pre366 = $63;
    } else {
     __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($16, $$byval_copy3);
     $$pre366 = HEAP32[$39 >> 2] | 0;
    }
    $64 = ($6 | 0) == 0;
    $$pre365 = HEAP32[$16 >> 2] | 0;
    $$0185 = $2;
    $$0189 = $2;
    $$0193 = $3;
    $$0197 = $3;
    $161 = $$pre365;
    $162 = $$pre366;
    $68 = $$pre365;
    $69 = $$pre366;
    while (1) {
     if (($68 | 0) == ($69 | 0)) {
      $$0180$off0$lcssa = 0;
      $$1186$lcssa = $$0185;
      $$1190$lcssa = $$0189;
      $$1194$lcssa = $$0193;
      $$1198$lcssa = $$0197;
      $163 = $162;
      $72 = $161;
      $74 = $69;
     } else {
      $$0180$off0328 = 0;
      $$1186327 = $$0185;
      $$1190326 = $$0189;
      $$1194325 = $$0193;
      $$1198324 = $$0197;
      $$sroa$0240$0323 = $68;
      while (1) {
       $$sroa$046$0$copyload = HEAP32[$$sroa$0240$0323 >> 2] | 0;
       $$sroa$21$0$copyload = HEAP32[$$sroa$0240$0323 + 4 >> 2] | 0;
       __ZNK8DrBitmap8getPixelEii($17, $10, $$sroa$046$0$copyload, $$sroa$21$0$copyload);
       __ZN7DrColorC2Ej($$byval_copy3, 1);
       if (__ZNK7DrColoreqERKS_($17, $$byval_copy3) | 0) {
        $$3188 = $$1186327;
        $$3192 = $$1190326;
        $$3196 = $$1194325;
        $$3200 = $$1198324;
        $$4184$off0 = $$0180$off0328;
       } else {
        $76 = HEAPU8[$4 >> 0] | HEAPU8[$4 + 1 >> 0] << 8 | HEAPU8[$4 + 2 >> 0] << 16 | HEAPU8[$4 + 3 >> 0] << 24;
        HEAP32[$18 >> 2] = $76;
        HEAP8[$$byval_copy3 >> 0] = HEAP8[$18 >> 0] | 0;
        HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
        HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
        HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($1, $$sroa$046$0$copyload, $$sroa$21$0$copyload, $$byval_copy3);
        HEAP32[$19 >> 2] = $76;
        HEAP8[$$byval_copy3 >> 0] = HEAP8[$19 >> 0] | 0;
        HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$19 + 1 >> 0] | 0;
        HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$19 + 2 >> 0] | 0;
        HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$19 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($9, $$sroa$046$0$copyload, $$sroa$21$0$copyload, $$byval_copy3);
        __ZN7DrColorC2Ej($20, 1);
        HEAP8[$$byval_copy3 >> 0] = HEAP8[$20 >> 0] | 0;
        HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$20 + 1 >> 0] | 0;
        HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$20 + 2 >> 0] | 0;
        HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$20 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($10, $$sroa$046$0$copyload, $$sroa$21$0$copyload, $$byval_copy3);
        $spec$select = ($$sroa$046$0$copyload | 0) < ($$1186327 | 0) ? $$sroa$046$0$copyload : $$1186327;
        $$2191 = ($$sroa$046$0$copyload | 0) > ($$1190326 | 0) ? $$sroa$046$0$copyload : $$1190326;
        $spec$select218 = ($$sroa$21$0$copyload | 0) < ($$1198324 | 0) ? $$sroa$21$0$copyload : $$1198324;
        $$2195 = ($$sroa$21$0$copyload | 0) > ($$1194325 | 0) ? $$sroa$21$0$copyload : $$1194325;
        HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
        $84 = $$sroa$046$0$copyload + -1 | 0;
        $85 = ($$sroa$046$0$copyload | 0) > 0 ? $84 : 0;
        $87 = (HEAP32[$26 >> 2] | 0) + -1 | 0;
        $89 = $$sroa$046$0$copyload + 1 | 0;
        $90 = ($$sroa$046$0$copyload | 0) < ($87 | 0) ? $89 : $87;
        $92 = $$sroa$21$0$copyload + -1 | 0;
        $93 = ($$sroa$21$0$copyload | 0) > 0 ? $92 : 0;
        $95 = (HEAP32[$29 >> 2] | 0) + -1 | 0;
        $97 = $$sroa$21$0$copyload + 1 | 0;
        $98 = ($$sroa$21$0$copyload | 0) < ($95 | 0) ? $97 : $95;
        if (($85 | 0) > ($90 | 0)) {
         $$3188 = $spec$select;
         $$3192 = $$2191;
         $$3196 = $$2195;
         $$3200 = $spec$select218;
         $$4184$off0 = $$0180$off0328;
        } else {
         $100 = ($93 | 0) > ($98 | 0);
         $$0168319 = $85;
         $$1181$off0318 = $$0180$off0328;
         while (1) {
          if ($100) $$2182$off0$lcssa = $$1181$off0318; else {
           $101 = ($$0168319 | 0) == ($$sroa$046$0$copyload | 0);
           $or$cond223249 = ($$0168319 | 0) == ($84 | 0) | ($$0168319 | 0) == ($89 | 0);
           $$0167316 = $93;
           $$2182$off0315 = $$1181$off0318;
           while (1) {
            do if ($101 & ($$0167316 | 0) == ($$sroa$21$0$copyload | 0)) $$3183$off0 = $$2182$off0315; else {
             if ($64) if ($or$cond223249 & (($$0167316 | 0) == ($92 | 0) | ($$0167316 | 0) == ($97 | 0))) {
              $$3183$off0 = $$2182$off0315;
              break;
             }
             __ZNK8DrBitmap8getPixelEii($21, $10, $$0168319, $$0167316);
             __ZN7DrColorC2Ej($$byval_copy3, 0);
             if (!(__ZNK7DrColoreqERKS_($21, $$byval_copy3) | 0)) {
              $$3183$off0 = $$2182$off0315;
              break;
             }
             __ZNK8DrBitmap8getPixelEii($$byval_copy3, $1, $$0168319, $$0167316);
             if (!(__ZN2Dr11IsSameColorERK7DrColorS2_d($13, $$byval_copy3, $5) | 0)) {
              $$3183$off0 = $$2182$off0315;
              break;
             }
             __ZN7DrPointC2Eii($$byval_copy3, $$0168319, $$0167316);
             $111 = HEAP32[$39 >> 2] | 0;
             if ($111 >>> 0 < (HEAP32[$40 >> 2] | 0) >>> 0) {
              $114 = $$byval_copy3;
              $119 = HEAP32[$114 + 4 >> 2] | 0;
              $120 = $111;
              HEAP32[$120 >> 2] = HEAP32[$114 >> 2];
              HEAP32[$120 + 4 >> 2] = $119;
              HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 8;
             } else __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($16, $$byval_copy3);
             __ZN7DrColorC2Ej($22, 2);
             HEAP8[$$byval_copy3 >> 0] = HEAP8[$22 >> 0] | 0;
             HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$22 + 1 >> 0] | 0;
             HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$22 + 2 >> 0] | 0;
             HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$22 + 3 >> 0] | 0;
             __ZN8DrBitmap8setPixelEii7DrColor($10, $$0168319, $$0167316, $$byval_copy3);
             $$3183$off0 = 1;
            } while (0);
            if (($$0167316 | 0) < ($98 | 0)) {
             $$0167316 = $$0167316 + 1 | 0;
             $$2182$off0315 = $$3183$off0;
            } else {
             $$2182$off0$lcssa = $$3183$off0;
             break;
            }
           }
          }
          if (($$0168319 | 0) < ($90 | 0)) {
           $$0168319 = $$0168319 + 1 | 0;
           $$1181$off0318 = $$2182$off0$lcssa;
          } else {
           $$3188 = $spec$select;
           $$3192 = $$2191;
           $$3196 = $$2195;
           $$3200 = $spec$select218;
           $$4184$off0 = $$2182$off0$lcssa;
           break;
          }
         }
        }
       }
       $$sroa$0240$0323 = $$sroa$0240$0323 + 8 | 0;
       if (($$sroa$0240$0323 | 0) == ($69 | 0)) break; else {
        $$0180$off0328 = $$4184$off0;
        $$1186327 = $$3188;
        $$1190326 = $$3192;
        $$1194325 = $$3196;
        $$1198324 = $$3200;
       }
      }
      $$pre368 = HEAP32[$39 >> 2] | 0;
      $$0180$off0$lcssa = $$4184$off0;
      $$1186$lcssa = $$3188;
      $$1190$lcssa = $$3192;
      $$1194$lcssa = $$3196;
      $$1198$lcssa = $$3200;
      $163 = $$pre368;
      $72 = HEAP32[$16 >> 2] | 0;
      $74 = $$pre368;
     }
     $71 = $72;
     if (($74 | 0) == ($71 | 0)) {
      $150 = $163;
      $151 = $72;
     } else {
      $$sroa$0231$0337 = $72;
      $131 = $71;
      while (1) {
       __ZNK8DrBitmap8getPixelEii($23, $10, HEAP32[$131 >> 2] | 0, HEAP32[$131 + 4 >> 2] | 0);
       __ZN7DrColorC2Ej($$byval_copy3, 1);
       if (__ZNK7DrColoreqERKS_($23, $$byval_copy3) | 0) {
        $135 = HEAP32[$16 >> 2] | 0;
        $139 = $135 + ($$sroa$0231$0337 - $135 >> 3 << 3) | 0;
        $140 = $139 + 8 | 0;
        $141 = HEAP32[$39 >> 2] | 0;
        if (($140 | 0) == ($141 | 0)) $$0$lcssa$i$i$i = $139; else {
         $$078$i$i$i = $140;
         $$09$i$i$i = $139;
         while (1) {
          __ZN7DrPointaSERKS_($$09$i$i$i, $$078$i$i$i) | 0;
          $$078$i$i$i = $$078$i$i$i + 8 | 0;
          $144 = $$09$i$i$i + 8 | 0;
          if (($$078$i$i$i | 0) == ($141 | 0)) {
           $$0$lcssa$i$i$i = $144;
           break;
          } else $$09$i$i$i = $144;
         }
        }
        HEAP32[$39 >> 2] = $$0$lcssa$i$i$i;
        $$in = $$0$lcssa$i$i$i;
        $$sroa$0231$1$in = $139;
       } else {
        $$in = HEAP32[$39 >> 2] | 0;
        $$sroa$0231$1$in = $131 + 8 | 0;
       }
       if (($$in | 0) == ($$sroa$0231$1$in | 0)) break; else {
        $$sroa$0231$0337 = $$sroa$0231$1$in;
        $131 = $$sroa$0231$1$in;
       }
      }
      $150 = $$in;
      $151 = HEAP32[$16 >> 2] | 0;
     }
     if ($$0180$off0$lcssa & ($150 | 0) != ($151 | 0)) {
      $$0185 = $$1186$lcssa;
      $$0189 = $$1190$lcssa;
      $$0193 = $$1194$lcssa;
      $$0197 = $$1198$lcssa;
      $161 = $151;
      $162 = $150;
      $68 = $151;
      $69 = $150;
     } else break;
    }
    __ZN6DrRectC2Eiiii($$byval_copy3, $$1186$lcssa, $$1198$lcssa, $$1190$lcssa + 1 - $$1186$lcssa | 0, 1 - $$1198$lcssa + $$1194$lcssa | 0);
    HEAP32[$8 >> 2] = HEAP32[$$byval_copy3 >> 2];
    HEAP32[$8 + 4 >> 2] = HEAP32[$$byval_copy3 + 4 >> 2];
    HEAP32[$8 + 8 >> 2] = HEAP32[$$byval_copy3 + 8 >> 2];
    HEAP32[$8 + 12 >> 2] = HEAP32[$$byval_copy3 + 12 >> 2];
    __ZN8DrBitmapC2ERKS_($0, $9);
    __ZNSt3__213__vector_baseI7DrPointNS_9allocatorIS1_EEED2Ev($16);
   } else label = 4;
  } else label = 4;
 } while (0);
 if ((label | 0) == 4) __ZN8DrBitmapC2Ev($0);
 __ZN8DrBitmapD2Ev($10);
 __ZN8DrBitmapD2Ev($9);
 STACKTOP = sp;
 return;
}

function __ZN7DrImage17autoOutlinePointsEf($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $$08$i$i$i = 0, $$08$i$i$i101 = 0, $$098265 = 0, $$099271 = 0, $$byval_copy6 = 0, $$pre279 = 0, $$pre283 = 0, $$sroa$0117$0261 = 0, $$sroa$0125$0260 = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $113 = 0, $114 = 0, $119 = 0, $12 = 0, $125 = 0, $13 = 0, $131 = 0, $137 = 0, $14 = 0, $143 = 0, $149 = 0, $15 = 0, $155 = 0, $16 = 0, $161 = 0, $165 = 0, $17 = 0, $170 = 0, $171 = 0, $174 = 0, $179 = 0, $180 = 0, $181 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $201 = 0, $206 = 0.0, $21 = 0, $211 = 0, $216 = 0.0, $217 = 0, $22 = 0, $222 = 0, $223 = 0, $226 = 0, $23 = 0, $230 = 0, $231 = 0, $234 = 0, $24 = 0, $241 = 0, $242 = 0, $245 = 0, $247 = 0, $28 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $71 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $9 = 0, $90 = 0.0, $96 = 0.0, $97 = 0, $99 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy6 = sp;
 $2 = sp + 144 | 0;
 $3 = sp + 128 | 0;
 $4 = sp + 116 | 0;
 $5 = sp + 104 | 0;
 $6 = sp + 80 | 0;
 $7 = sp + 168 | 0;
 $8 = sp + 152 | 0;
 $9 = sp + 64 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 40 | 0;
 $12 = sp + 28 | 0;
 $13 = sp + 16 | 0;
 $14 = $0 + 36 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = $0 + 40 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 if (($17 | 0) != ($15 | 0)) {
  $$08$i$i$i = $17;
  do {
   $$08$i$i$i = $$08$i$i$i + -12 | 0;
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($$08$i$i$i);
  } while (($$08$i$i$i | 0) != ($15 | 0));
 }
 HEAP32[$16 >> 2] = $15;
 $21 = $0 + 48 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 $23 = $0 + 52 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 if (($24 | 0) != ($22 | 0)) {
  $$08$i$i$i101 = $24;
  do {
   $$08$i$i$i101 = $$08$i$i$i101 + -12 | 0;
   __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($$08$i$i$i101);
  } while (($$08$i$i$i101 | 0) != ($22 | 0));
 }
 HEAP32[$23 >> 2] = $22;
 HEAP32[$3 >> 2] = 0;
 $28 = $3 + 4 | 0;
 HEAP32[$28 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 $33 = __ZN2Dr19FindObjectsInBitmapERK8DrBitmapRNSt3__26vectorIS0_NS3_9allocatorIS0_EEEERNS4_I6DrRectNS5_IS9_EEEEdb($0 + 12 | 0, $3, $4, .875, 1) | 0;
 $35 = HEAP32[$3 >> 2] | 0;
 $36 = (HEAP32[$28 >> 2] | 0) - $35 | 0;
 $37 = ($36 | 0) / 24 | 0;
 $38 = $35;
 if ($33) __ZN7DrImage12setSimpleBoxEv($0); else {
  L14 : do if (($36 | 0) > 0) {
   $40 = $0 + 16 | 0;
   $41 = $0 + 20 | 0;
   $42 = $5 + 4 | 0;
   $43 = $1;
   $44 = $0 + 44 | 0;
   $45 = $6 + 4 | 0;
   $46 = $5 + 8 | 0;
   $47 = $6 + 4 | 0;
   $48 = $9 + 4 | 0;
   $49 = $9 + 8 | 0;
   $50 = $10 + 4 | 0;
   $51 = $10 + 8 | 0;
   $52 = $11 + 4 | 0;
   $53 = $11 + 8 | 0;
   $54 = $0 + 56 | 0;
   $55 = $12 + 4 | 0;
   $56 = $6 + 4 | 0;
   $57 = $6 + 4 | 0;
   $$099271 = 0;
   $61 = $38;
   while (1) {
    $60 = $61 + ($$099271 * 24 | 0) | 0;
    if ((HEAP32[$61 + ($$099271 * 24 | 0) + 4 >> 2] | 0) >= 1) if ((HEAP32[$61 + ($$099271 * 24 | 0) + 8 >> 2] | 0) >= 1) {
     __ZN2Dr17TraceImageOutlineERK8DrBitmap($5, $60);
     $71 = 1.0 / +(HEAP32[$40 >> 2] | 0) + 1.0;
     $75 = 1.0 / +(HEAP32[$41 >> 2] | 0) + 1.0;
     $76 = HEAP32[$5 >> 2] | 0;
     $77 = HEAP32[$42 >> 2] | 0;
     if (($76 | 0) == ($77 | 0)) {
      $106 = $76;
      $83 = $77;
      $84 = $76;
     } else {
      $$sroa$0125$0260 = $76;
      do {
       $90 = +(__ZN6DrRect4leftEv((HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0) | 0);
       HEAPF64[$$sroa$0125$0260 >> 3] = +HEAPF64[$$sroa$0125$0260 >> 3] + $90;
       $96 = +(__ZN6DrRect3topEv((HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0) | 0);
       $97 = $$sroa$0125$0260 + 8 | 0;
       $99 = +HEAPF64[$97 >> 3] + $96;
       HEAPF64[$$sroa$0125$0260 >> 3] = $71 * +HEAPF64[$$sroa$0125$0260 >> 3];
       HEAPF64[$97 >> 3] = $75 * $99;
       $$sroa$0125$0260 = $$sroa$0125$0260 + 16 | 0;
      } while (($$sroa$0125$0260 | 0) != ($77 | 0));
      $$pre279 = HEAP32[$42 >> 2] | 0;
      $106 = $$pre279;
      $83 = $$pre279;
      $84 = HEAP32[$5 >> 2] | 0;
     }
     if ($83 - $84 >> 4 >>> 0 > 3) {
      $105 = $106 + -16 | 0;
      HEAP32[$42 >> 2] = $105;
      $109 = $105;
     } else $109 = $83;
     if ($109 - $84 >> 4 >>> 0 > 10) {
      __ZN6DrMesh12smoothPointsERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEidd($6, $5, 5, 20.0, 1.0);
      HEAP8[$$byval_copy6 >> 0] = HEAP8[$2 >> 0] | 0;
      __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($5, $6, $$byval_copy6);
      __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($6);
      __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($6, $5, $43);
      HEAP8[$$byval_copy6 >> 0] = HEAP8[$2 >> 0] | 0;
      __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($5, $6, $$byval_copy6);
      __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($6);
      __ZN6DrMesh12insertPointsERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE($6, $5);
      HEAP8[$$byval_copy6 >> 0] = HEAP8[$2 >> 0] | 0;
      __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($5, $6, $$byval_copy6);
      __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($6);
      $113 = HEAP32[$42 >> 2] | 0;
      $114 = HEAP32[$5 >> 2] | 0;
     } else {
      $113 = $109;
      $114 = $84;
     }
     if ($113 - $114 >> 4 >>> 0 < 4) {
      HEAP32[$42 >> 2] = $114;
      __ZN6DrRect7topLeftEv($2, (HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0);
      $119 = HEAP32[$2 >> 2] | 0;
      __ZN6DrRect7topLeftEv($6, (HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0);
      __ZN8DrPointFC2Edd($$byval_copy6, +($119 | 0), +(HEAP32[$45 >> 2] | 0));
      $125 = HEAP32[$42 >> 2] | 0;
      if ($125 >>> 0 < (HEAP32[$46 >> 2] | 0) >>> 0) {
       HEAP32[$125 >> 2] = HEAP32[$$byval_copy6 >> 2];
       HEAP32[$125 + 4 >> 2] = HEAP32[$$byval_copy6 + 4 >> 2];
       HEAP32[$125 + 8 >> 2] = HEAP32[$$byval_copy6 + 8 >> 2];
       HEAP32[$125 + 12 >> 2] = HEAP32[$$byval_copy6 + 12 >> 2];
       HEAP32[$42 >> 2] = $125 + 16;
      } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($5, $$byval_copy6);
      __ZN6DrRect8topRightEv($2, (HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0);
      $131 = HEAP32[$2 >> 2] | 0;
      __ZN6DrRect8topRightEv($6, (HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0);
      __ZN8DrPointFC2Edd($$byval_copy6, +($131 | 0), +(HEAP32[$47 >> 2] | 0));
      $137 = HEAP32[$42 >> 2] | 0;
      if ($137 >>> 0 < (HEAP32[$46 >> 2] | 0) >>> 0) {
       HEAP32[$137 >> 2] = HEAP32[$$byval_copy6 >> 2];
       HEAP32[$137 + 4 >> 2] = HEAP32[$$byval_copy6 + 4 >> 2];
       HEAP32[$137 + 8 >> 2] = HEAP32[$$byval_copy6 + 8 >> 2];
       HEAP32[$137 + 12 >> 2] = HEAP32[$$byval_copy6 + 12 >> 2];
       HEAP32[$42 >> 2] = $137 + 16;
      } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($5, $$byval_copy6);
      __ZN6DrRect11bottomRightEv($2, (HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0);
      $143 = HEAP32[$2 >> 2] | 0;
      __ZN6DrRect11bottomRightEv($6, (HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0);
      __ZN8DrPointFC2Edd($$byval_copy6, +($143 | 0), +(HEAP32[$56 >> 2] | 0));
      $149 = HEAP32[$42 >> 2] | 0;
      if ($149 >>> 0 < (HEAP32[$46 >> 2] | 0) >>> 0) {
       HEAP32[$149 >> 2] = HEAP32[$$byval_copy6 >> 2];
       HEAP32[$149 + 4 >> 2] = HEAP32[$$byval_copy6 + 4 >> 2];
       HEAP32[$149 + 8 >> 2] = HEAP32[$$byval_copy6 + 8 >> 2];
       HEAP32[$149 + 12 >> 2] = HEAP32[$$byval_copy6 + 12 >> 2];
       HEAP32[$42 >> 2] = $149 + 16;
      } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($5, $$byval_copy6);
      __ZN6DrRect10bottomLeftEv($2, (HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0);
      $155 = HEAP32[$2 >> 2] | 0;
      __ZN6DrRect10bottomLeftEv($6, (HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0);
      __ZN8DrPointFC2Edd($$byval_copy6, +($155 | 0), +(HEAP32[$57 >> 2] | 0));
      $161 = HEAP32[$42 >> 2] | 0;
      if ($161 >>> 0 < (HEAP32[$46 >> 2] | 0) >>> 0) {
       HEAP32[$161 >> 2] = HEAP32[$$byval_copy6 >> 2];
       HEAP32[$161 + 4 >> 2] = HEAP32[$$byval_copy6 + 4 >> 2];
       HEAP32[$161 + 8 >> 2] = HEAP32[$$byval_copy6 + 8 >> 2];
       HEAP32[$161 + 12 >> 2] = HEAP32[$$byval_copy6 + 12 >> 2];
       HEAP32[$42 >> 2] = $161 + 16;
      } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($5, $$byval_copy6);
     }
     __ZN10DrPolygonF24ensureWindingOrientationERNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE19Winding_Orientation($5, 1);
     $165 = HEAP32[$16 >> 2] | 0;
     if (($165 | 0) == (HEAP32[$44 >> 2] | 0)) __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($14, $5); else {
      __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($165, $5);
      HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 12;
     }
     __ZN8DrBitmap4copyEv($6, $60);
     __ZN7DrColorC2Ej($7, -1);
     __ZNK8DrBitmap4rectEv($8, $6);
     HEAP8[$$byval_copy6 >> 0] = HEAP8[$7 >> 0] | 0;
     HEAP8[$$byval_copy6 + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
     HEAP8[$$byval_copy6 + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
     HEAP8[$$byval_copy6 + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
     __ZN2Dr10FillBorderER8DrBitmap7DrColor6DrRect($6, $$byval_copy6, $8);
     HEAP32[$9 >> 2] = 0;
     HEAP32[$48 >> 2] = 0;
     HEAP32[$49 >> 2] = 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$50 >> 2] = 0;
     HEAP32[$51 >> 2] = 0;
     __ZN2Dr19FindObjectsInBitmapERK8DrBitmapRNSt3__26vectorIS0_NS3_9allocatorIS0_EEEERNS4_I6DrRectNS5_IS9_EEEEdb($6, $9, $10, .875, 0) | 0;
     HEAP32[$11 >> 2] = 0;
     HEAP32[$52 >> 2] = 0;
     HEAP32[$53 >> 2] = 0;
     $170 = HEAP32[$48 >> 2] | 0;
     $171 = HEAP32[$9 >> 2] | 0;
     if (($170 - $171 | 0) > 0) {
      $$098265 = 0;
      $180 = $171;
      $247 = $170;
      while (1) {
       $179 = $180;
       $181 = $179 + ($$098265 * 24 | 0) | 0;
       do if ((HEAP32[$179 + ($$098265 * 24 | 0) + 4 >> 2] | 0) < 1) {
        $241 = $247;
        $242 = $180;
       } else {
        if ((HEAP32[$179 + ($$098265 * 24 | 0) + 8 >> 2] | 0) < 1) {
         $241 = $247;
         $242 = $180;
         break;
        }
        __ZN2Dr17TraceImageOutlineERK8DrBitmap($12, $181);
        $188 = HEAP32[$12 >> 2] | 0;
        $189 = HEAP32[$55 >> 2] | 0;
        if (($188 | 0) == ($189 | 0)) {
         $195 = $189;
         $196 = $188;
         $223 = $188;
        } else {
         $$sroa$0117$0261 = $188;
         do {
          $201 = __ZN6DrRect4leftEv((HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0) | 0;
          $206 = +((__ZN6DrRect4leftEv((HEAP32[$10 >> 2] | 0) + ($$098265 << 4) | 0) | 0) + $201 | 0);
          HEAPF64[$$sroa$0117$0261 >> 3] = +HEAPF64[$$sroa$0117$0261 >> 3] + $206;
          $211 = __ZN6DrRect3topEv((HEAP32[$4 >> 2] | 0) + ($$099271 << 4) | 0) | 0;
          $216 = +((__ZN6DrRect3topEv((HEAP32[$10 >> 2] | 0) + ($$098265 << 4) | 0) | 0) + $211 | 0);
          $217 = $$sroa$0117$0261 + 8 | 0;
          HEAPF64[$217 >> 3] = +HEAPF64[$217 >> 3] + $216;
          $$sroa$0117$0261 = $$sroa$0117$0261 + 16 | 0;
         } while (($$sroa$0117$0261 | 0) != ($189 | 0));
         $$pre283 = HEAP32[$55 >> 2] | 0;
         $195 = $$pre283;
         $196 = HEAP32[$12 >> 2] | 0;
         $223 = $$pre283;
        }
        if ($195 - $196 >> 4 >>> 0 > 3) {
         $222 = $223 + -16 | 0;
         HEAP32[$55 >> 2] = $222;
         $226 = $222;
        } else $226 = $195;
        if ($226 - $196 >> 4 >>> 0 > 10) {
         __ZN6DrMesh12smoothPointsERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEidd($13, $12, 5, 30.0, 1.0);
         HEAP8[$$byval_copy6 >> 0] = HEAP8[$2 >> 0] | 0;
         __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($12, $13, $$byval_copy6);
         __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($13);
         __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($13, $12, $43);
         HEAP8[$$byval_copy6 >> 0] = HEAP8[$2 >> 0] | 0;
         __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($12, $13, $$byval_copy6);
         __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($13);
         __ZN6DrMesh12insertPointsERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE($13, $12);
         HEAP8[$$byval_copy6 >> 0] = HEAP8[$2 >> 0] | 0;
         __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($12, $13, $$byval_copy6);
         __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($13);
         $230 = HEAP32[$55 >> 2] | 0;
         $231 = HEAP32[$12 >> 2] | 0;
        } else {
         $230 = $226;
         $231 = $196;
        }
        do if ($230 - $231 >> 4 >>> 0 > 3) {
         __ZN10DrPolygonF24ensureWindingOrientationERNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE19Winding_Orientation($12, 0);
         $234 = HEAP32[$52 >> 2] | 0;
         if (($234 | 0) == (HEAP32[$53 >> 2] | 0)) {
          __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($11, $12);
          break;
         } else {
          __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($234, $12);
          HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + 12;
          break;
         }
        } while (0);
        __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($12);
        $241 = HEAP32[$48 >> 2] | 0;
        $242 = HEAP32[$9 >> 2] | 0;
       } while (0);
       $$098265 = $$098265 + 1 | 0;
       if (($$098265 | 0) >= (($241 - $242 | 0) / 24 | 0 | 0)) break; else {
        $180 = $242;
        $247 = $241;
       }
      }
     }
     $174 = HEAP32[$23 >> 2] | 0;
     if (($174 | 0) == (HEAP32[$54 >> 2] | 0)) __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($21, $11); else {
      __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEC2ERKS6_($174, $11);
      HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 12;
     }
     __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($11);
     __ZNSt3__213__vector_baseI6DrRectNS_9allocatorIS1_EEED2Ev($10);
     __ZNSt3__213__vector_baseI8DrBitmapNS_9allocatorIS1_EEED2Ev($9);
     __ZN8DrBitmapD2Ev($6);
     __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($5);
    }
    $245 = $$099271 + 1 | 0;
    if (($245 | 0) >= ($37 | 0)) break L14;
    $$099271 = $245;
    $61 = HEAP32[$3 >> 2] | 0;
   }
  } while (0);
  HEAP8[$0 + 60 >> 0] = 0;
  HEAP8[$0 + 61 >> 0] = 1;
 }
 __ZNSt3__213__vector_baseI6DrRectNS_9allocatorIS1_EEED2Ev($4);
 __ZNSt3__213__vector_baseI8DrBitmapNS_9allocatorIS1_EEED2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i188 = 0, $$0$i$i$i$i = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i187 = 0, $$0$i$i193 = 0, $$0$i$i198 = 0, $$0132 = 0, $$0141$off0$ph = 0, $$0168 = 0, $$11 = 0, $$1135 = 0, $$1169 = 0, $$1169$ph = 0, $$2136 = 0, $$3144$off0$ph = 0, $$3171 = 0, $$4158 = 0, $$5139 = 0, $$6140 = 0, $$6160 = 0, $$in = 0, $$in210 = 0, $$pre$phi248Z2D = 0, $$pre$phiZ2D = 0, $$pre242 = 0, $10 = 0, $104 = 0, $105 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $13 = 0, $134 = 0, $142 = 0, $143 = 0, $151 = 0, $153 = 0, $154 = 0, $157 = 0, $162 = 0, $166 = 0, $167 = 0, $168 = 0, $172 = 0, $176 = 0, $177 = 0, $19 = 0, $198 = 0, $199 = 0, $21 = 0, $23 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $61 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $85 = 0, $88 = 0, $92 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 if (($0 | 0) == ($1 | 0)) {
  $$6140 = $0;
  label = 90;
 } else {
  $10 = $2 + 56 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($4, $10);
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
  $13 = $2 + 61 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($5, $13);
  if ((HEAP32[$10 >> 2] | 0) >>> 0 > 1) HEAP8[$13 >> 0] = 1;
  L6 : do switch (HEAP8[$0 >> 0] | 0) {
  case 84:
  case 71:
   {
    $$5139 = __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    $$6160 = 1;
    break;
   }
  default:
   {
    $19 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
    $21 = HEAP32[$2 + 48 >> 2] | 0;
    $23 = HEAP32[$2 + 52 >> 2] | 0;
    L8 : do if (($19 | 0) == ($0 | 0)) $$2136 = $0; else if (($19 | 0) == ($1 | 0)) $$2136 = $1; else {
     switch (HEAP8[$19 >> 0] | 0) {
     case 46:
     case 69:
      {
       $$2136 = $19;
       break L8;
       break;
      }
     default:
      {}
     }
     __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($6, $13);
     HEAP8[$13 >> 0] = 0;
     HEAP32[$7 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     HEAP32[$7 + 8 >> 2] = 0;
     $$0$i$i198 = 0;
     while (1) {
      if (($$0$i$i198 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i198 << 2) >> 2] = 0;
      $$0$i$i198 = $$0$i$i198 + 1 | 0;
     }
     $30 = $2 + 4 | 0;
     $31 = HEAP32[$30 >> 2] | 0;
     L16 : do if ((HEAP32[$2 >> 2] | 0) == ($31 | 0)) {
      $$1135 = $0;
      $$4158 = 0;
     } else {
      $33 = $31 + -24 | 0;
      $35 = HEAP8[$33 + 11 >> 0] | 0;
      $36 = $35 << 24 >> 24 < 0;
      if ($36) $41 = HEAP32[$31 + -20 >> 2] | 0; else $41 = $35 & 255;
      if (!$41) {
       $$1135 = $0;
       $$4158 = 0;
      } else {
       if (!(HEAP8[$2 + 60 >> 0] | 0)) {
        if ($36) {
         $50 = HEAP32[$33 >> 2] | 0;
         $51 = HEAP32[$31 + -20 >> 2] | 0;
        } else {
         $50 = $33;
         $51 = $35 & 255;
        }
        if ((HEAP8[$50 + $51 + -1 >> 0] | 0) == 62) {
         if ($36) {
          $$in = HEAP32[$31 + -20 >> 2] | 0;
          $61 = HEAP32[$33 >> 2] | 0;
         } else {
          $$in = $35 & 255;
          $61 = $33;
         }
         if ((HEAP8[$61 + ($$in + -2) >> 0] | 0) == 45) {
          $$0168 = $19;
          $$pre$phiZ2D = $33;
         } else {
          if ($36) {
           $$in210 = HEAP32[$31 + -20 >> 2] | 0;
           $70 = HEAP32[$33 >> 2] | 0;
          } else {
           $$in210 = $35 & 255;
           $70 = $33;
          }
          if ((HEAP8[$70 + ($$in210 + -2) >> 0] | 0) == 62) {
           $$0168 = $19;
           $$pre$phiZ2D = $33;
          } else {
           $73 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
           if (($73 | 0) == ($19 | 0)) {
            $$1135 = $0;
            $$4158 = 0;
            break;
           }
           $75 = HEAP32[$30 >> 2] | 0;
           $80 = $75;
           if ((($75 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
            $$1135 = $0;
            $$4158 = 0;
            break;
           }
           $81 = $80 + -24 | 0;
           HEAP32[$8 >> 2] = HEAP32[$81 >> 2];
           HEAP32[$8 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
           HEAP32[$8 + 8 >> 2] = HEAP32[$81 + 8 >> 2];
           $$0$i$i193 = 0;
           while (1) {
            if (($$0$i$i193 | 0) == 3) break;
            HEAP32[$81 + ($$0$i$i193 << 2) >> 2] = 0;
            $$0$i$i193 = $$0$i$i193 + 1 | 0;
           }
           $84 = $80 + -12 | 0;
           $85 = $7 + 11 | 0;
           if ((HEAP8[$85 >> 0] | 0) < 0) {
            $88 = HEAP32[$7 >> 2] | 0;
            HEAP8[$3 >> 0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($88, $3);
            HEAP32[$7 + 4 >> 2] = 0;
           } else {
            HEAP8[$3 >> 0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($7, $3);
            HEAP8[$85 >> 0] = 0;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($7);
           HEAP32[$7 >> 2] = HEAP32[$84 >> 2];
           HEAP32[$7 + 4 >> 2] = HEAP32[$84 + 4 >> 2];
           HEAP32[$7 + 8 >> 2] = HEAP32[$84 + 8 >> 2];
           $$0$i$i$i$i = 0;
           while (1) {
            if (($$0$i$i$i$i | 0) == 3) break;
            HEAP32[$84 + ($$0$i$i$i$i << 2) >> 2] = 0;
            $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
           }
           $92 = HEAP8[$85 >> 0] | 0;
           if (!(($92 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $92 & 255) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($8, 32);
           $99 = HEAP32[$30 >> 2] | 0;
           $$0$i$i$idx$i187 = 0;
           while (1) {
            if (($$0$i$i$idx$i187 | 0) == -1) break;
            $$0$i$i$add$i188 = $$0$i$i$idx$i187 + -1 | 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($99 + ($$0$i$i$add$i188 * 24 | 0) | 0);
            $$0$i$i$idx$i187 = $$0$i$i$add$i188;
           }
           HEAP32[$30 >> 2] = $99 + -24;
           $104 = HEAP8[$8 + 11 >> 0] | 0;
           $105 = $104 << 24 >> 24 < 0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm($99 + -48 | 0, 0, $105 ? HEAP32[$8 >> 2] | 0 : $8, $105 ? HEAP32[$8 + 4 >> 2] | 0 : $104 & 255) | 0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
           $$0168 = $73;
           $$pre$phiZ2D = (HEAP32[$30 >> 2] | 0) + -24 | 0;
          }
         }
        } else {
         $$0168 = $19;
         $$pre$phiZ2D = $33;
        }
       } else {
        $$0168 = $19;
        $$pre$phiZ2D = $33;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($$pre$phiZ2D, 40);
       if (($$0168 | 0) == ($1 | 0)) label = 50; else if ((HEAP8[$$0168 >> 0] | 0) == 118) {
        $$3171 = $$0168 + 1 | 0;
        $176 = HEAP32[$2 >> 2] | 0;
        $177 = HEAP32[$30 >> 2] | 0;
       } else label = 50;
       do if ((label | 0) == 50) {
        $116 = $3 + 11 | 0;
        $117 = $3 + 4 | 0;
        $118 = $8 + 11 | 0;
        $119 = $8 + 4 | 0;
        $$0141$off0$ph = 1;
        $$1169$ph = $$0168;
        L67 : while (1) {
         $$1169 = $$1169$ph;
         while (1) {
          $123 = ((HEAP32[$30 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
          $124 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1169, $1, $2) | 0;
          $125 = HEAP32[$30 >> 2] | 0;
          $126 = HEAP32[$2 >> 2] | 0;
          $128 = ($125 - $126 | 0) / 24 | 0;
          if (($124 | 0) == ($$1169 | 0)) {
           label = 74;
           break L67;
          }
          if ($128 >>> 0 > $123 >>> 0) break; else $$1169 = $124;
         }
         HEAP32[$3 >> 2] = 0;
         HEAP32[$3 + 4 >> 2] = 0;
         HEAP32[$3 + 8 >> 2] = 0;
         $$0$i$i = 0;
         while (1) {
          if (($$0$i$i | 0) == 3) break;
          HEAP32[$3 + ($$0$i$i << 2) >> 2] = 0;
          $$0$i$i = $$0$i$i + 1 | 0;
         }
         $$0132 = $123;
         while (1) {
          if ($$0132 >>> 0 >= $128 >>> 0) break;
          $134 = HEAP8[$116 >> 0] | 0;
          if (($134 << 24 >> 24 < 0 ? HEAP32[$117 >> 2] | 0 : $134 & 255) | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 48101) | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, (HEAP32[$2 >> 2] | 0) + ($$0132 * 24 | 0) | 0);
          $142 = HEAP8[$118 >> 0] | 0;
          $143 = $142 << 24 >> 24 < 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3, $143 ? HEAP32[$8 >> 2] | 0 : $8, $143 ? HEAP32[$119 >> 2] | 0 : $142 & 255) | 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          $$0132 = $$0132 + 1 | 0;
         }
         $$0 = $123;
         while (1) {
          if ($$0 >>> 0 >= $128 >>> 0) break;
          $157 = HEAP32[$30 >> 2] | 0;
          $$0$i$i$idx$i = 0;
          while (1) {
           if (($$0$i$i$idx$i | 0) == -1) break;
           $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($157 + ($$0$i$i$add$i * 24 | 0) | 0);
           $$0$i$i$idx$i = $$0$i$i$add$i;
          }
          HEAP32[$30 >> 2] = $157 + -24;
          $$0 = $$0 + 1 | 0;
         }
         $151 = HEAP8[$116 >> 0] | 0;
         $153 = HEAP32[$117 >> 2] | 0;
         $154 = $151 & 255;
         if (!(($151 << 24 >> 24 < 0 ? $153 : $154) | 0)) $$3144$off0$ph = $$0141$off0$ph; else {
          $162 = HEAP32[$30 >> 2] | 0;
          if ((HEAP32[$2 >> 2] | 0) == ($162 | 0)) {
           label = 86;
           break;
          }
          if ($$0141$off0$ph) {
           $$pre$phi248Z2D = $154;
           $166 = $162;
           $168 = $151;
           $172 = $153;
          } else {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($162 + -24 | 0, 48101) | 0;
           $$pre242 = HEAP8[$116 >> 0] | 0;
           $$pre$phi248Z2D = $$pre242 & 255;
           $166 = HEAP32[$30 >> 2] | 0;
           $168 = $$pre242;
           $172 = HEAP32[$117 >> 2] | 0;
          }
          $167 = $168 << 24 >> 24 < 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($166 + -24 | 0, $167 ? HEAP32[$3 >> 2] | 0 : $3, $167 ? $172 : $$pre$phi248Z2D) | 0;
          $$3144$off0$ph = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$0141$off0$ph = $$3144$off0$ph;
         $$1169$ph = $124;
        }
        if ((label | 0) == 74) {
         $$3171 = $$1169;
         $176 = $126;
         $177 = $125;
         break;
        } else if ((label | 0) == 86) {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$1135 = $0;
         $$4158 = 0;
         break L16;
        }
       } while (0);
       if (($176 | 0) == ($177 | 0)) {
        $$1135 = $0;
        $$4158 = 0;
       } else {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($177 + -24 | 0, 41);
        if ($21 & 1 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 47824) | 0;
        if ($21 & 2 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 47831) | 0;
        if ($21 & 4 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 47841) | 0;
        switch ($23 | 0) {
        case 1:
         {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 49305) | 0;
          break;
         }
        case 2:
         {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$30 >> 2] | 0) + -24 | 0, 49308) | 0;
          break;
         }
        default:
         {}
        }
        $198 = HEAP8[$7 + 11 >> 0] | 0;
        $199 = $198 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$30 >> 2] | 0) + -24 | 0, $199 ? HEAP32[$7 >> 2] | 0 : $7, $199 ? HEAP32[$7 + 4 >> 2] | 0 : $198 & 255) | 0;
        $$1135 = $$3171;
        $$4158 = 1;
       }
      }
     } while (0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($6);
     if ($$4158) $$2136 = $$1135; else {
      $$5139 = $$1135;
      $$6160 = 0;
      break L6;
     }
    } while (0);
    $$5139 = $$2136;
    $$6160 = 1;
   }
  } while (0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($5);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($4);
  if ($$6160) {
   $$6140 = $$5139;
   label = 90;
  } else $$11 = $0;
 }
 if ((label | 0) == 90) $$11 = $$6140;
 STACKTOP = sp;
 return $$11 | 0;
}

function _stbi__parse_entropy_coded_data($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $124 = 0, $13 = 0, $135 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $21 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $270 = 0, $28 = 0, $285 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $356 = 0, $388 = 0, $390 = 0, $4 = 0, $427 = 0, $44 = 0, $455 = 0, $465 = 0, $5 = 0, $506 = 0, $508 = 0, $530 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $1 = sp + 384 | 0;
 $2 = sp + 380 | 0;
 $3 = sp + 376 | 0;
 $4 = sp + 372 | 0;
 $5 = sp + 128 | 0;
 $6 = sp + 368 | 0;
 $7 = sp + 364 | 0;
 $8 = sp + 360 | 0;
 $9 = sp + 356 | 0;
 $10 = sp + 352 | 0;
 $11 = sp + 348 | 0;
 $12 = sp + 344 | 0;
 $13 = sp + 340 | 0;
 $14 = sp + 336 | 0;
 $15 = sp;
 $16 = sp + 332 | 0;
 $17 = sp + 328 | 0;
 $18 = sp + 324 | 0;
 $19 = sp + 320 | 0;
 $20 = sp + 316 | 0;
 $21 = sp + 312 | 0;
 $22 = sp + 308 | 0;
 $23 = sp + 304 | 0;
 $24 = sp + 300 | 0;
 $25 = sp + 296 | 0;
 $26 = sp + 292 | 0;
 $27 = sp + 288 | 0;
 $28 = sp + 284 | 0;
 $29 = sp + 280 | 0;
 $30 = sp + 276 | 0;
 $31 = sp + 272 | 0;
 $32 = sp + 268 | 0;
 $33 = sp + 264 | 0;
 $34 = sp + 260 | 0;
 $35 = sp + 256 | 0;
 HEAP32[$2 >> 2] = $0;
 _stbi__jpeg_reset(HEAP32[$2 >> 2] | 0);
 $44 = (HEAP32[(HEAP32[$2 >> 2] | 0) + 18416 >> 2] | 0) == 1;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 18380 >> 2] | 0)) {
  if ($44) {
   HEAP32[$6 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 18420 >> 2];
   HEAP32[$7 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 28 >> 2] | 0) + 7 >> 3;
   HEAP32[$8 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 32 >> 2] | 0) + 7 >> 3;
   HEAP32[$4 >> 2] = 0;
   L5 : while (1) {
    if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[$8 >> 2] | 0)) {
     label = 18;
     break;
    }
    HEAP32[$3 >> 2] = 0;
    while (1) {
     if ((HEAP32[$3 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) break;
     HEAP32[$9 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 20 >> 2];
     if (!(_stbi__jpeg_decode_block(HEAP32[$2 >> 2] | 0, $5, (HEAP32[$2 >> 2] | 0) + 4 + ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$2 >> 2] | 0) + 6724 + ((HEAP32[$9 >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$2 >> 2] | 0) + 13956 + (HEAP32[$9 >> 2] << 10) | 0, HEAP32[$6 >> 2] | 0, (HEAP32[$2 >> 2] | 0) + 13444 + (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 12 >> 2] << 7) | 0) | 0)) {
      label = 8;
      break L5;
     }
     $124 = (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 44 >> 2] | 0) + ((Math_imul(HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0) << 3) | 0;
     FUNCTION_TABLE_viii[HEAP32[(HEAP32[$2 >> 2] | 0) + 18444 >> 2] & 3]($124 + (HEAP32[$3 >> 2] << 3) | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, $5);
     $135 = (HEAP32[$2 >> 2] | 0) + 18440 | 0;
     $137 = (HEAP32[$135 >> 2] | 0) + -1 | 0;
     HEAP32[$135 >> 2] = $137;
     if (($137 | 0) <= 0) {
      if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18368 >> 2] | 0) < 24) _stbi__grow_buffer_unsafe(HEAP32[$2 >> 2] | 0);
      if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) < 208) {
       label = 14;
       break L5;
      }
      if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) > 215) {
       label = 14;
       break L5;
      }
      _stbi__jpeg_reset(HEAP32[$2 >> 2] | 0);
     }
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
    }
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
   }
   if ((label | 0) == 8) {
    HEAP32[$1 >> 2] = 0;
    $530 = HEAP32[$1 >> 2] | 0;
    STACKTOP = sp;
    return $530 | 0;
   } else if ((label | 0) == 14) {
    HEAP32[$1 >> 2] = 1;
    $530 = HEAP32[$1 >> 2] | 0;
    STACKTOP = sp;
    return $530 | 0;
   } else if ((label | 0) == 18) {
    HEAP32[$1 >> 2] = 1;
    $530 = HEAP32[$1 >> 2] | 0;
    STACKTOP = sp;
    return $530 | 0;
   }
  }
  HEAP32[$11 >> 2] = 0;
  L29 : while (1) {
   if ((HEAP32[$11 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18064 >> 2] | 0)) {
    label = 43;
    break;
   }
   HEAP32[$10 >> 2] = 0;
   while (1) {
    if ((HEAP32[$10 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18060 >> 2] | 0)) break;
    HEAP32[$12 >> 2] = 0;
    while (1) {
     $174 = HEAP32[$2 >> 2] | 0;
     if ((HEAP32[$12 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18416 >> 2] | 0)) break;
     HEAP32[$16 >> 2] = HEAP32[$174 + 18420 + (HEAP32[$12 >> 2] << 2) >> 2];
     HEAP32[$14 >> 2] = 0;
     while (1) {
      if ((HEAP32[$14 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0)) break;
      HEAP32[$13 >> 2] = 0;
      while (1) {
       if ((HEAP32[$13 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0)) break;
       $202 = Math_imul(HEAP32[$10 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0;
       HEAP32[$17 >> 2] = $202 + (HEAP32[$13 >> 2] | 0) << 3;
       $213 = Math_imul(HEAP32[$11 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0;
       HEAP32[$18 >> 2] = $213 + (HEAP32[$14 >> 2] | 0) << 3;
       HEAP32[$19 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 20 >> 2];
       if (!(_stbi__jpeg_decode_block(HEAP32[$2 >> 2] | 0, $15, (HEAP32[$2 >> 2] | 0) + 4 + ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$2 >> 2] | 0) + 6724 + ((HEAP32[$19 >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$2 >> 2] | 0) + 13956 + (HEAP32[$19 >> 2] << 10) | 0, HEAP32[$16 >> 2] | 0, (HEAP32[$2 >> 2] | 0) + 13444 + (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 12 >> 2] << 7) | 0) | 0)) {
        label = 30;
        break L29;
       }
       $270 = (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 44 >> 2] | 0) + (Math_imul(HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0) | 0;
       FUNCTION_TABLE_viii[HEAP32[(HEAP32[$2 >> 2] | 0) + 18444 >> 2] & 3]($270 + (HEAP32[$17 >> 2] | 0) | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$16 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, $15);
       HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
      }
      HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
     }
     HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
    }
    $285 = $174 + 18440 | 0;
    $287 = (HEAP32[$285 >> 2] | 0) + -1 | 0;
    HEAP32[$285 >> 2] = $287;
    if (($287 | 0) <= 0) {
     if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18368 >> 2] | 0) < 24) _stbi__grow_buffer_unsafe(HEAP32[$2 >> 2] | 0);
     if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) < 208) {
      label = 39;
      break L29;
     }
     if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) > 215) {
      label = 39;
      break L29;
     }
     _stbi__jpeg_reset(HEAP32[$2 >> 2] | 0);
    }
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
   }
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
  }
  if ((label | 0) == 30) {
   HEAP32[$1 >> 2] = 0;
   $530 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $530 | 0;
  } else if ((label | 0) == 39) {
   HEAP32[$1 >> 2] = 1;
   $530 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $530 | 0;
  } else if ((label | 0) == 43) {
   HEAP32[$1 >> 2] = 1;
   $530 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $530 | 0;
  }
 }
 if ($44) {
  HEAP32[$22 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 18420 >> 2];
  HEAP32[$23 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$22 >> 2] | 0) * 72 | 0) + 28 >> 2] | 0) + 7 >> 3;
  HEAP32[$24 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$22 >> 2] | 0) * 72 | 0) + 32 >> 2] | 0) + 7 >> 3;
  HEAP32[$21 >> 2] = 0;
  L67 : while (1) {
   if ((HEAP32[$21 >> 2] | 0) >= (HEAP32[$24 >> 2] | 0)) {
    label = 63;
    break;
   }
   HEAP32[$20 >> 2] = 0;
   while (1) {
    if ((HEAP32[$20 >> 2] | 0) >= (HEAP32[$23 >> 2] | 0)) break;
    HEAP32[$25 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$22 >> 2] | 0) * 72 | 0) + 60 >> 2] | 0) + ((HEAP32[$20 >> 2] | 0) + (Math_imul(HEAP32[$21 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$22 >> 2] | 0) * 72 | 0) + 64 >> 2] | 0) | 0) << 6 << 1);
    $356 = HEAP32[$2 >> 2] | 0;
    if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 18384 >> 2] | 0)) {
     if (!(_stbi__jpeg_decode_block_prog_dc($356, HEAP32[$25 >> 2] | 0, (HEAP32[$2 >> 2] | 0) + 4 + ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$22 >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) * 1680 | 0) | 0, HEAP32[$22 >> 2] | 0) | 0)) {
      label = 51;
      break L67;
     }
    } else {
     HEAP32[$26 >> 2] = HEAP32[$356 + 18076 + ((HEAP32[$22 >> 2] | 0) * 72 | 0) + 20 >> 2];
     if (!(_stbi__jpeg_decode_block_prog_ac(HEAP32[$2 >> 2] | 0, HEAP32[$25 >> 2] | 0, (HEAP32[$2 >> 2] | 0) + 6724 + ((HEAP32[$26 >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$2 >> 2] | 0) + 13956 + (HEAP32[$26 >> 2] << 10) | 0) | 0)) {
      label = 53;
      break L67;
     }
    }
    $388 = (HEAP32[$2 >> 2] | 0) + 18440 | 0;
    $390 = (HEAP32[$388 >> 2] | 0) + -1 | 0;
    HEAP32[$388 >> 2] = $390;
    if (($390 | 0) <= 0) {
     if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18368 >> 2] | 0) < 24) _stbi__grow_buffer_unsafe(HEAP32[$2 >> 2] | 0);
     if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) < 208) {
      label = 59;
      break L67;
     }
     if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) > 215) {
      label = 59;
      break L67;
     }
     _stbi__jpeg_reset(HEAP32[$2 >> 2] | 0);
    }
    HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
   }
   HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1;
  }
  if ((label | 0) == 51) {
   HEAP32[$1 >> 2] = 0;
   $530 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $530 | 0;
  } else if ((label | 0) == 53) {
   HEAP32[$1 >> 2] = 0;
   $530 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $530 | 0;
  } else if ((label | 0) == 59) {
   HEAP32[$1 >> 2] = 1;
   $530 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $530 | 0;
  } else if ((label | 0) == 63) {
   HEAP32[$1 >> 2] = 1;
   $530 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $530 | 0;
  }
 }
 HEAP32[$28 >> 2] = 0;
 L96 : while (1) {
  if ((HEAP32[$28 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18064 >> 2] | 0)) {
   label = 88;
   break;
  }
  HEAP32[$27 >> 2] = 0;
  while (1) {
   if ((HEAP32[$27 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18060 >> 2] | 0)) break;
   HEAP32[$29 >> 2] = 0;
   while (1) {
    $427 = HEAP32[$2 >> 2] | 0;
    if ((HEAP32[$29 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18416 >> 2] | 0)) break;
    HEAP32[$32 >> 2] = HEAP32[$427 + 18420 + (HEAP32[$29 >> 2] << 2) >> 2];
    HEAP32[$31 >> 2] = 0;
    while (1) {
     if ((HEAP32[$31 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$32 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0)) break;
     HEAP32[$30 >> 2] = 0;
     while (1) {
      if ((HEAP32[$30 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$32 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0)) break;
      $455 = Math_imul(HEAP32[$27 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$32 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0;
      HEAP32[$33 >> 2] = $455 + (HEAP32[$30 >> 2] | 0);
      $465 = Math_imul(HEAP32[$28 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$32 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0;
      HEAP32[$34 >> 2] = $465 + (HEAP32[$31 >> 2] | 0);
      HEAP32[$35 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$32 >> 2] | 0) * 72 | 0) + 60 >> 2] | 0) + ((HEAP32[$33 >> 2] | 0) + (Math_imul(HEAP32[$34 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$32 >> 2] | 0) * 72 | 0) + 64 >> 2] | 0) | 0) << 6 << 1);
      if (!(_stbi__jpeg_decode_block_prog_dc(HEAP32[$2 >> 2] | 0, HEAP32[$35 >> 2] | 0, (HEAP32[$2 >> 2] | 0) + 4 + ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$32 >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) * 1680 | 0) | 0, HEAP32[$32 >> 2] | 0) | 0)) {
       label = 75;
       break L96;
      }
      HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
     }
     HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
    }
    HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1;
   }
   $506 = $427 + 18440 | 0;
   $508 = (HEAP32[$506 >> 2] | 0) + -1 | 0;
   HEAP32[$506 >> 2] = $508;
   if (($508 | 0) <= 0) {
    if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18368 >> 2] | 0) < 24) _stbi__grow_buffer_unsafe(HEAP32[$2 >> 2] | 0);
    if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) < 208) {
     label = 84;
     break L96;
    }
    if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) > 215) {
     label = 84;
     break L96;
    }
    _stbi__jpeg_reset(HEAP32[$2 >> 2] | 0);
   }
   HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
  }
  HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
 }
 if ((label | 0) == 75) {
  HEAP32[$1 >> 2] = 0;
  $530 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $530 | 0;
 } else if ((label | 0) == 84) {
  HEAP32[$1 >> 2] = 1;
  $530 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $530 | 0;
 } else if ((label | 0) == 88) {
  HEAP32[$1 >> 2] = 1;
  $530 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $530 | 0;
 }
 return 0;
}

function __ZN6DrMesh12smoothPointsERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEidd($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0.0, $$0203311 = 0, $$0221299 = 0, $$0222$lcssa = 0.0, $$0224$lcssa = 0.0, $$0226$lcssa = 0.0, $$0228293 = 0, $$0235$lcssa = 0.0, $$0238318 = 0, $$0239$lcssa = 0.0, $$0239310 = 0.0, $$0242$lcssa = 0.0, $$0242309 = 0.0, $$0245$lcssa = 0.0, $$0245308 = 0.0, $$1223 = 0.0, $$1223359 = 0.0, $$1225 = 0.0, $$1225360 = 0.0, $$1227 = 0.0, $$1227361 = 0.0, $$1236 = 0.0, $$1236362 = 0.0, $$1240 = 0.0, $$1243 = 0.0, $$1246 = 0.0, $$2231 = 0, $$2234 = 0, $$2234358 = 0, $$2241 = 0.0, $$2244 = 0.0, $$2247 = 0.0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$pre = 0.0, $$pre346 = 0.0, $10 = 0, $100 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0.0, $23 = 0.0, $24 = 0, $26 = 0.0, $27 = 0.0, $29 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $6 = 0, $60 = 0, $64 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0.0, $76 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0.0, $86 = 0, $9 = 0, $93 = 0, $97 = 0, sp = 0, $$0228293$looptemp = 0, $$0221299$looptemp = 0, $$0238318$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy11 = sp + 112 | 0;
 $$byval_copy10 = sp + 96 | 0;
 $5 = sp + 128 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 80 | 0;
 $9 = sp;
 $10 = sp + 64 | 0;
 $11 = sp + 48 | 0;
 HEAP32[$5 >> 2] = 0;
 $12 = $5 + 4 | 0;
 HEAP32[$12 >> 2] = 0;
 $13 = $5 + 8 | 0;
 HEAP32[$13 >> 2] = 0;
 $14 = $1 + 4 | 0;
 $16 = HEAP32[$1 >> 2] | 0;
 $17 = (HEAP32[$14 >> 2] | 0) - $16 | 0;
 $18 = $17 >> 4;
 $20 = $16;
 do if (!$17) __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($0, $1); else {
  $21 = +HEAPF64[$20 >> 3];
  $23 = +HEAPF64[$20 + 8 >> 3];
  $24 = ($17 | 0) > 0;
  if (($17 | 0) > 16) {
   $$1223359 = $21;
   $$1225360 = $21;
   $$1227361 = $23;
   $$1236362 = $23;
   $29 = 1;
   while (1) {
    $$pre = +HEAPF64[$20 + ($29 << 4) >> 3];
    $$pre346 = +HEAPF64[$20 + ($29 << 4) + 8 >> 3];
    $$1223 = $$pre < $$1223359 ? $$pre : $$1223359;
    $$1225 = $$pre > $$1225360 ? $$pre : $$1225360;
    $$1227 = $$pre346 < $$1227361 ? $$pre346 : $$1227361;
    $$1236 = $$pre346 > $$1236362 ? $$pre346 : $$1236362;
    $29 = $29 + 1 | 0;
    if (($29 | 0) >= ($18 | 0)) {
     $$0222$lcssa = $$1223;
     $$0224$lcssa = $$1225;
     $$0226$lcssa = $$1227;
     $$0235$lcssa = $$1236;
     break;
    } else {
     $$1223359 = $$1223;
     $$1225360 = $$1225;
     $$1227361 = $$1227;
     $$1236362 = $$1236;
    }
   }
  } else {
   $$0222$lcssa = $21;
   $$0224$lcssa = $21;
   $$0226$lcssa = $23;
   $$0235$lcssa = $23;
  }
  $26 = $$0224$lcssa - $$0222$lcssa;
  $27 = $$0235$lcssa - $$0226$lcssa;
  if ($26 < 50.0) $$0 = $3 / (50.0 / $26); else if ($27 < 50.0) $$0 = $3 / (50.0 / $27); else $$0 = $3;
  if (($18 | 0) <= ($2 << 1 | 0)) {
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($0, $1);
   break;
  }
  if ($24) {
   $43 = $6 + 8 | 0;
   $44 = $$byval_copy11 + 8 | 0;
   $45 = ($2 | 0) < 1;
   $$0238318 = 0;
   $52 = $20;
   do {
    $51 = $52 + ($$0238318 << 4) | 0;
    HEAP32[$6 >> 2] = HEAP32[$51 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$51 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$51 + 8 >> 2];
    HEAP32[$6 + 12 >> 2] = HEAP32[$51 + 12 >> 2];
    $53 = +HEAPF64[$6 >> 3];
    $54 = +HEAPF64[$43 >> 3];
    $55 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $$0238318) | 0;
    HEAP32[$7 >> 2] = HEAP32[$55 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$55 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$55 + 8 >> 2];
    HEAP32[$7 + 12 >> 2] = HEAP32[$55 + 12 >> 2];
    _memmove($8 | 0, $55 | 0, 16) | 0;
    $56 = $$0238318 + -1 | 0;
    $57 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $56) | 0;
    HEAP32[$$byval_copy10 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$$byval_copy10 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
    HEAP32[$$byval_copy10 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
    HEAP32[$$byval_copy10 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
    HEAP32[$$byval_copy11 >> 2] = HEAP32[$57 >> 2];
    HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$57 + 4 >> 2];
    HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$57 + 8 >> 2];
    HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$57 + 12 >> 2];
    $58 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($$byval_copy10, $$byval_copy11);
    $$0238318$looptemp = $$0238318;
    $$0238318 = $$0238318 + 1 | 0;
    $60 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $$0238318) | 0;
    HEAP32[$$byval_copy10 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$$byval_copy10 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$$byval_copy10 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    HEAP32[$$byval_copy10 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
    HEAP32[$$byval_copy11 >> 2] = HEAP32[$60 >> 2];
    HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$60 + 4 >> 2];
    HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$60 + 8 >> 2];
    HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$60 + 12 >> 2];
    do if (!(+__ZN2Dr24DifferenceBetween2AnglesEdd($58, +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($$byval_copy10, $$byval_copy11)) <= 110.0)) {
     $68 = $$0238318$looptemp - $2 | 0;
     $69 = $$0238318$looptemp + $2 | 0;
     L23 : do if ($45) {
      $$2231 = $69;
      $$2234358 = $68;
     } else {
      $$0228293 = $56;
      while (1) {
       $71 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $$0228293) | 0;
       HEAP32[$9 >> 2] = HEAP32[$71 >> 2];
       HEAP32[$9 + 4 >> 2] = HEAP32[$71 + 4 >> 2];
       HEAP32[$9 + 8 >> 2] = HEAP32[$71 + 8 >> 2];
       HEAP32[$9 + 12 >> 2] = HEAP32[$71 + 12 >> 2];
       _memmove($10 | 0, $71 | 0, 16) | 0;
       $$0228293$looptemp = $$0228293;
       $$0228293 = $$0228293 + -1 | 0;
       $73 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $$0228293) | 0;
       HEAP32[$$byval_copy10 >> 2] = HEAP32[$10 >> 2];
       HEAP32[$$byval_copy10 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
       HEAP32[$$byval_copy10 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
       HEAP32[$$byval_copy10 + 12 >> 2] = HEAP32[$10 + 12 >> 2];
       HEAP32[$$byval_copy11 >> 2] = HEAP32[$73 >> 2];
       HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$73 + 4 >> 2];
       HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$73 + 8 >> 2];
       HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$73 + 12 >> 2];
       $74 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($$byval_copy10, $$byval_copy11);
       $76 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $$0228293$looptemp + 1 | 0) | 0;
       HEAP32[$$byval_copy10 >> 2] = HEAP32[$9 >> 2];
       HEAP32[$$byval_copy10 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
       HEAP32[$$byval_copy10 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
       HEAP32[$$byval_copy10 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
       HEAP32[$$byval_copy11 >> 2] = HEAP32[$76 >> 2];
       HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$76 + 4 >> 2];
       HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$76 + 8 >> 2];
       HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$76 + 12 >> 2];
       if (+__ZN2Dr24DifferenceBetween2AnglesEdd($74, +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($$byval_copy10, $$byval_copy11)) <= 110.0) {
        $$2234 = $$0228293$looptemp;
        break;
       }
       if (($$0228293$looptemp | 0) <= ($68 | 0)) {
        $$2234 = $68;
        break;
       }
      }
      if ($45) {
       $$2231 = $69;
       $$2234358 = $$2234;
      } else {
       $$0221299 = $$0238318;
       while (1) {
        $81 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $$0221299) | 0;
        HEAP32[$9 >> 2] = HEAP32[$81 >> 2];
        HEAP32[$9 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
        HEAP32[$9 + 8 >> 2] = HEAP32[$81 + 8 >> 2];
        HEAP32[$9 + 12 >> 2] = HEAP32[$81 + 12 >> 2];
        _memmove($11 | 0, $81 | 0, 16) | 0;
        $83 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $$0221299 + -1 | 0) | 0;
        HEAP32[$$byval_copy10 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$$byval_copy10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
        HEAP32[$$byval_copy10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
        HEAP32[$$byval_copy10 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
        HEAP32[$$byval_copy11 >> 2] = HEAP32[$83 >> 2];
        HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$83 + 4 >> 2];
        HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$83 + 8 >> 2];
        HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$83 + 12 >> 2];
        $84 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($$byval_copy10, $$byval_copy11);
        $$0221299$looptemp = $$0221299;
        $$0221299 = $$0221299 + 1 | 0;
        $86 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $$0221299) | 0;
        HEAP32[$$byval_copy10 >> 2] = HEAP32[$9 >> 2];
        HEAP32[$$byval_copy10 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
        HEAP32[$$byval_copy10 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
        HEAP32[$$byval_copy10 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
        HEAP32[$$byval_copy11 >> 2] = HEAP32[$86 >> 2];
        HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$86 + 4 >> 2];
        HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$86 + 8 >> 2];
        HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$86 + 12 >> 2];
        if (+__ZN2Dr24DifferenceBetween2AnglesEdd($84, +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($$byval_copy10, $$byval_copy11)) <= 110.0) {
         $$2231 = $$0221299$looptemp;
         $$2234358 = $$2234;
         break L23;
        }
        if (($$0221299$looptemp | 0) >= ($69 | 0)) {
         $$2231 = $69;
         $$2234358 = $$2234;
         break;
        }
       }
      }
     } while (0);
     if (($$2234358 | 0) > ($$2231 | 0)) {
      $$0239$lcssa = $54;
      $$0242$lcssa = $53;
      $$0245$lcssa = 1.0;
     } else {
      $$0203311 = $$2234358;
      $$0239310 = $54;
      $$0242309 = $53;
      $$0245308 = 1.0;
      while (1) {
       if (($$0203311 | 0) == ($$0238318$looptemp | 0)) {
        $$2241 = $$0239310;
        $$2244 = $$0242309;
        $$2247 = $$0245308;
       } else {
        $97 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($1, $$0203311) | 0;
        HEAP32[$$byval_copy11 >> 2] = HEAP32[$97 >> 2];
        HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$97 + 4 >> 2];
        HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$97 + 8 >> 2];
        HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$97 + 12 >> 2];
        if (+__ZNK8DrPointF8distanceERKS_($6, $$byval_copy11) < $$0) {
         $100 = $$0203311 - $$0238318$looptemp | 0;
         $103 = 1.0 / +((($100 | 0) > -1 ? $100 : 0 - $100 | 0) | 0);
         $$1240 = $$0239310 + $103 * (+HEAPF64[$44 >> 3] * $4);
         $$1243 = $$0242309 + $103 * (+HEAPF64[$$byval_copy11 >> 3] * $4);
         $$1246 = $$0245308 + $103 * $4;
        } else {
         $$1240 = $$0239310;
         $$1243 = $$0242309;
         $$1246 = $$0245308;
        }
        $$2241 = $$1240;
        $$2244 = $$1243;
        $$2247 = $$1246;
       }
       if (($$0203311 | 0) < ($$2231 | 0)) {
        $$0203311 = $$0203311 + 1 | 0;
        $$0239310 = $$2241;
        $$0242309 = $$2244;
        $$0245308 = $$2247;
       } else {
        $$0239$lcssa = $$2241;
        $$0242$lcssa = $$2244;
        $$0245$lcssa = $$2247;
        break;
       }
      }
     }
     __ZN8DrPointFC2Edd($$byval_copy11, $$0242$lcssa / $$0245$lcssa, $$0239$lcssa / $$0245$lcssa);
     $93 = HEAP32[$12 >> 2] | 0;
     if ($93 >>> 0 < (HEAP32[$13 >> 2] | 0) >>> 0) {
      HEAP32[$93 >> 2] = HEAP32[$$byval_copy11 >> 2];
      HEAP32[$93 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
      HEAP32[$93 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
      HEAP32[$93 + 12 >> 2] = HEAP32[$$byval_copy11 + 12 >> 2];
      HEAP32[$12 >> 2] = $93 + 16;
     } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($5, $$byval_copy11);
    } else {
     $64 = HEAP32[$12 >> 2] | 0;
     if (($64 | 0) == (HEAP32[$13 >> 2] | 0)) {
      __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($5, $6);
      break;
     } else {
      HEAP32[$64 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$64 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$64 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      HEAP32[$64 + 12 >> 2] = HEAP32[$6 + 12 >> 2];
      HEAP32[$12 >> 2] = $64 + 16;
      break;
     }
    } while (0);
    $52 = HEAP32[$1 >> 2] | 0;
   } while (($$0238318 | 0) < ((HEAP32[$14 >> 2] | 0) - $52 >> 4 | 0));
   $48 = HEAP32[$5 >> 2] | 0;
   $49 = HEAP32[$12 >> 2] | 0;
   $50 = HEAP32[$13 >> 2] | 0;
  } else {
   $48 = 0;
   $49 = 0;
   $50 = 0;
  }
  HEAP32[$0 >> 2] = $48;
  HEAP32[$0 + 4 >> 2] = $49;
  HEAP32[$0 + 8 >> 2] = $50;
  HEAP32[$13 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
 } while (0);
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($5);
 STACKTOP = sp;
 return;
}

function __ZN13TPPLPartition15Triangulate_OPTEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0201 = 0, $$0202263 = 0, $$0204 = 0.0, $$0205 = 0.0, $$0206246 = 0.0, $$0211253 = 0, $$0212235 = 0, $$0214250 = 0, $$0216244 = 0, $$1 = 0, $$1203258 = 0, $$1207$lcssa = 0.0, $$1207237 = 0.0, $$1213 = 0, $$1215233 = 0, $$2208236 = 0.0, $$2238 = 0, $$3209 = 0.0, $$3223 = 0, $$4210 = 0.0, $$4224 = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $$sroa$8$0$copyload = 0, $102 = 0.0, $109 = 0, $11 = 0, $113 = 0, $118 = 0, $12 = 0, $121 = 0, $125 = 0, $127 = 0, $128 = 0, $13 = 0, $137 = 0, $15 = 0, $16 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $86 = 0, $9 = 0, $91 = 0, $97 = 0, $or$cond = 0, label = 0, sp = 0, $$1203258$looptemp = 0, $$2238$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $3 = sp + 72 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 $7 = sp + 120 | 0;
 $8 = sp + 108 | 0;
 $9 = sp + 96 | 0;
 if (__ZNK8TPPLPoly5ValidEv($1) | 0) {
  HEAP32[$8 >> 2] = $8;
  $11 = $8 + 4 | 0;
  HEAP32[$11 >> 2] = $8;
  $12 = $8 + 8 | 0;
  HEAP32[$12 >> 2] = 0;
  __ZN8TPPLPolyC2Ev($9);
  $13 = __ZNK8TPPLPoly12GetNumPointsEv($1) | 0;
  $15 = __Znam($13 >>> 0 > 1073741823 ? -1 : $13 << 2) | 0;
  $16 = ($13 | 0) > 1;
  if ($16) {
   $$0202263 = 1;
   do {
    HEAP32[$15 + ($$0202263 << 2) >> 2] = __Znam($$0202263 >>> 0 > 178956970 ? -1 : $$0202263 * 24 | 0) | 0;
    $$0202263 = $$0202263 + 1 | 0;
   } while (($$0202263 | 0) < ($13 | 0));
   $23 = $13 + -1 | 0;
   if ($16) {
    $$1203258 = 0;
    while (1) {
     $24 = __ZN8TPPLPoly8GetPointEl($1, $$1203258) | 0;
     HEAP32[$3 >> 2] = HEAP32[$24 >> 2];
     HEAP32[$3 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
     HEAP32[$3 + 12 >> 2] = HEAP32[$24 + 12 >> 2];
     HEAP32[$3 + 16 >> 2] = HEAP32[$24 + 16 >> 2];
     HEAP32[$3 + 20 >> 2] = HEAP32[$24 + 20 >> 2];
     $$1203258$looptemp = $$1203258;
     $$1203258 = $$1203258 + 1 | 0;
     if (($$1203258 | 0) < ($13 | 0)) {
      $27 = ($$1203258$looptemp | 0) == 0;
      $28 = $$1203258$looptemp + -1 | 0;
      $$0211253 = $$1203258;
      do {
       $29 = $15 + ($$0211253 << 2) | 0;
       $30 = HEAP32[$29 >> 2] | 0;
       HEAP8[$30 + ($$1203258$looptemp * 24 | 0) >> 0] = 1;
       HEAPF64[$30 + ($$1203258$looptemp * 24 | 0) + 8 >> 3] = 0.0;
       HEAP32[$30 + ($$1203258$looptemp * 24 | 0) + 16 >> 2] = -1;
       L15 : do if (($$0211253 | 0) != ($$1203258 | 0)) {
        $35 = __ZN8TPPLPoly8GetPointEl($1, $$0211253) | 0;
        HEAP32[$4 >> 2] = HEAP32[$35 >> 2];
        HEAP32[$4 + 4 >> 2] = HEAP32[$35 + 4 >> 2];
        HEAP32[$4 + 8 >> 2] = HEAP32[$35 + 8 >> 2];
        HEAP32[$4 + 12 >> 2] = HEAP32[$35 + 12 >> 2];
        HEAP32[$4 + 16 >> 2] = HEAP32[$35 + 16 >> 2];
        HEAP32[$4 + 20 >> 2] = HEAP32[$35 + 20 >> 2];
        if ($27) {
         $36 = __ZN8TPPLPoly8GetPointEl($1, $23) | 0;
         HEAP32[$5 >> 2] = HEAP32[$36 >> 2];
         HEAP32[$5 + 4 >> 2] = HEAP32[$36 + 4 >> 2];
         HEAP32[$5 + 8 >> 2] = HEAP32[$36 + 8 >> 2];
         HEAP32[$5 + 12 >> 2] = HEAP32[$36 + 12 >> 2];
         HEAP32[$5 + 16 >> 2] = HEAP32[$36 + 16 >> 2];
         HEAP32[$5 + 20 >> 2] = HEAP32[$36 + 20 >> 2];
        } else {
         $37 = __ZN8TPPLPoly8GetPointEl($1, $28) | 0;
         HEAP32[$5 >> 2] = HEAP32[$37 >> 2];
         HEAP32[$5 + 4 >> 2] = HEAP32[$37 + 4 >> 2];
         HEAP32[$5 + 8 >> 2] = HEAP32[$37 + 8 >> 2];
         HEAP32[$5 + 12 >> 2] = HEAP32[$37 + 12 >> 2];
         HEAP32[$5 + 16 >> 2] = HEAP32[$37 + 16 >> 2];
         HEAP32[$5 + 20 >> 2] = HEAP32[$37 + 20 >> 2];
        }
        $38 = __ZN8TPPLPoly8GetPointEl($1, $$1203258) | 0;
        HEAP32[$6 >> 2] = HEAP32[$38 >> 2];
        HEAP32[$6 + 4 >> 2] = HEAP32[$38 + 4 >> 2];
        HEAP32[$6 + 8 >> 2] = HEAP32[$38 + 8 >> 2];
        HEAP32[$6 + 12 >> 2] = HEAP32[$38 + 12 >> 2];
        HEAP32[$6 + 16 >> 2] = HEAP32[$38 + 16 >> 2];
        HEAP32[$6 + 20 >> 2] = HEAP32[$38 + 20 >> 2];
        if (!(__ZN13TPPLPartition6InConeER9TPPLPointS1_S1_S1_($0, $5, $3, $6, $4) | 0)) {
         HEAP8[(HEAP32[$29 >> 2] | 0) + ($$1203258$looptemp * 24 | 0) >> 0] = 0;
         break;
        }
        $43 = __ZN8TPPLPoly8GetPointEl($1, $$0211253 + -1 | 0) | 0;
        HEAP32[$5 >> 2] = HEAP32[$43 >> 2];
        HEAP32[$5 + 4 >> 2] = HEAP32[$43 + 4 >> 2];
        HEAP32[$5 + 8 >> 2] = HEAP32[$43 + 8 >> 2];
        HEAP32[$5 + 12 >> 2] = HEAP32[$43 + 12 >> 2];
        HEAP32[$5 + 16 >> 2] = HEAP32[$43 + 16 >> 2];
        HEAP32[$5 + 20 >> 2] = HEAP32[$43 + 20 >> 2];
        if (($$0211253 | 0) == ($23 | 0)) {
         $45 = __ZN8TPPLPoly8GetPointEl($1, 0) | 0;
         HEAP32[$6 >> 2] = HEAP32[$45 >> 2];
         HEAP32[$6 + 4 >> 2] = HEAP32[$45 + 4 >> 2];
         HEAP32[$6 + 8 >> 2] = HEAP32[$45 + 8 >> 2];
         HEAP32[$6 + 12 >> 2] = HEAP32[$45 + 12 >> 2];
         HEAP32[$6 + 16 >> 2] = HEAP32[$45 + 16 >> 2];
         HEAP32[$6 + 20 >> 2] = HEAP32[$45 + 20 >> 2];
        } else {
         $47 = __ZN8TPPLPoly8GetPointEl($1, $$0211253 + 1 | 0) | 0;
         HEAP32[$6 >> 2] = HEAP32[$47 >> 2];
         HEAP32[$6 + 4 >> 2] = HEAP32[$47 + 4 >> 2];
         HEAP32[$6 + 8 >> 2] = HEAP32[$47 + 8 >> 2];
         HEAP32[$6 + 12 >> 2] = HEAP32[$47 + 12 >> 2];
         HEAP32[$6 + 16 >> 2] = HEAP32[$47 + 16 >> 2];
         HEAP32[$6 + 20 >> 2] = HEAP32[$47 + 20 >> 2];
        }
        if (!(__ZN13TPPLPartition6InConeER9TPPLPointS1_S1_S1_($0, $5, $4, $6, $3) | 0)) {
         HEAP8[(HEAP32[$29 >> 2] | 0) + ($$1203258$looptemp * 24 | 0) >> 0] = 0;
         break;
        }
        $$0214250 = 0;
        while (1) {
         $52 = __ZN8TPPLPoly8GetPointEl($1, $$0214250) | 0;
         HEAP32[$5 >> 2] = HEAP32[$52 >> 2];
         HEAP32[$5 + 4 >> 2] = HEAP32[$52 + 4 >> 2];
         HEAP32[$5 + 8 >> 2] = HEAP32[$52 + 8 >> 2];
         HEAP32[$5 + 12 >> 2] = HEAP32[$52 + 12 >> 2];
         HEAP32[$5 + 16 >> 2] = HEAP32[$52 + 16 >> 2];
         HEAP32[$5 + 20 >> 2] = HEAP32[$52 + 20 >> 2];
         if (($$0214250 | 0) == ($23 | 0)) {
          $54 = __ZN8TPPLPoly8GetPointEl($1, 0) | 0;
          HEAP32[$6 >> 2] = HEAP32[$54 >> 2];
          HEAP32[$6 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
          HEAP32[$6 + 8 >> 2] = HEAP32[$54 + 8 >> 2];
          HEAP32[$6 + 12 >> 2] = HEAP32[$54 + 12 >> 2];
          HEAP32[$6 + 16 >> 2] = HEAP32[$54 + 16 >> 2];
          HEAP32[$6 + 20 >> 2] = HEAP32[$54 + 20 >> 2];
          $$pre$phiZ2D = $$0214250 + 1 | 0;
         } else {
          $55 = $$0214250 + 1 | 0;
          $56 = __ZN8TPPLPoly8GetPointEl($1, $55) | 0;
          HEAP32[$6 >> 2] = HEAP32[$56 >> 2];
          HEAP32[$6 + 4 >> 2] = HEAP32[$56 + 4 >> 2];
          HEAP32[$6 + 8 >> 2] = HEAP32[$56 + 8 >> 2];
          HEAP32[$6 + 12 >> 2] = HEAP32[$56 + 12 >> 2];
          HEAP32[$6 + 16 >> 2] = HEAP32[$56 + 16 >> 2];
          HEAP32[$6 + 20 >> 2] = HEAP32[$56 + 20 >> 2];
          $$pre$phiZ2D = $55;
         }
         if (__ZN13TPPLPartition10IntersectsER9TPPLPointS1_S1_S1_(0, $3, $4, $5, $6) | 0) break;
         if (($$pre$phiZ2D | 0) < ($13 | 0)) $$0214250 = $$pre$phiZ2D; else break L15;
        }
        HEAP8[(HEAP32[$29 >> 2] | 0) + ($$1203258$looptemp * 24 | 0) >> 0] = 0;
       } while (0);
       $$0211253 = $$0211253 + 1 | 0;
      } while (($$0211253 | 0) != ($13 | 0));
     }
     if (($$1203258 | 0) == ($23 | 0)) {
      $63 = $23;
      break;
     }
    }
   } else $63 = $23;
  } else $63 = $13 + -1 | 0;
  $64 = HEAP32[$15 + ($63 << 2) >> 2] | 0;
  HEAP8[$64 >> 0] = 1;
  HEAPF64[$64 + 8 >> 3] = 0.0;
  HEAP32[$64 + 16 >> 2] = -1;
  L43 : do if (($13 | 0) > 2) {
   $$0206246 = 0.0;
   $$0216244 = 2;
   L45 : while (1) {
    $68 = $13 - $$0216244 | 0;
    if (($68 | 0) > 0) {
     $$1207237 = $$0206246;
     $$2238 = 0;
     while (1) {
      $70 = $$2238 + $$0216244 | 0;
      $71 = $15 + ($70 << 2) | 0;
      $72 = HEAP32[$71 >> 2] | 0;
      $$2238$looptemp = $$2238;
      $$2238 = $$2238 + 1 | 0;
      if (!(HEAP8[$72 + ($$2238$looptemp * 24 | 0) >> 0] | 0)) $$4210 = $$1207237; else {
       $$0212235 = -1;
       $$1215233 = $$2238;
       $$2208236 = $$1207237;
       $82 = $72;
       while (1) {
        $76 = $15 + ($$1215233 << 2) | 0;
        if (!(HEAP8[(HEAP32[$76 >> 2] | 0) + ($$2238$looptemp * 24 | 0) >> 0] | 0)) {
         $$1213 = $$0212235;
         $$3209 = $$2208236;
         $113 = $82;
        } else if (!(HEAP8[$82 + ($$1215233 * 24 | 0) >> 0] | 0)) {
         $$1213 = $$0212235;
         $$3209 = $$2208236;
         $113 = $82;
        } else {
         if ($$1215233 >>> 0 > $$2238 >>> 0) {
          $86 = __ZN8TPPLPoly8GetPointEl($1, $$2238$looptemp) | 0;
          $$0205 = +__ZN13TPPLPartition8DistanceERK9TPPLPointS2_(0, $86, __ZN8TPPLPoly8GetPointEl($1, $$1215233) | 0);
         } else $$0205 = 0.0;
         if ($70 >>> 0 > ($$1215233 + 1 | 0) >>> 0) {
          $91 = __ZN8TPPLPoly8GetPointEl($1, $$1215233) | 0;
          $$0204 = +__ZN13TPPLPartition8DistanceERK9TPPLPointS2_(0, $91, __ZN8TPPLPoly8GetPointEl($1, $70) | 0);
         } else $$0204 = 0.0;
         $97 = HEAP32[$71 >> 2] | 0;
         $102 = $$0204 + ($$0205 + (+HEAPF64[(HEAP32[$76 >> 2] | 0) + ($$2238$looptemp * 24 | 0) + 8 >> 3] + +HEAPF64[$97 + ($$1215233 * 24 | 0) + 8 >> 3]));
         $or$cond = ($$0212235 | 0) == -1 | $102 < $$2208236;
         $$1213 = $or$cond ? $$1215233 : $$0212235;
         $$3209 = $or$cond ? $102 : $$2208236;
         $113 = $97;
        }
        $$1215233 = $$1215233 + 1 | 0;
        if ($$1215233 >>> 0 >= $70 >>> 0) break; else {
         $$0212235 = $$1213;
         $$2208236 = $$3209;
         $82 = $113;
        }
       }
       if (($$1213 | 0) == -1) break L45;
       HEAP32[$113 + ($$2238$looptemp * 24 | 0) + 16 >> 2] = $$1213;
       HEAPF64[$113 + ($$2238$looptemp * 24 | 0) + 8 >> 3] = $$3209;
       $$4210 = $$3209;
      }
      if (($$2238 | 0) >= ($68 | 0)) {
       $$1207$lcssa = $$4210;
       break;
      } else $$1207237 = $$4210;
     }
    } else $$1207$lcssa = $$0206246;
    $$0216244 = $$0216244 + 1 | 0;
    if (($13 | 0) <= ($$0216244 | 0)) {
     label = 54;
     break L43;
    } else $$0206246 = $$1207$lcssa;
   }
   if ($16) {
    $$3223 = 1;
    do {
     $109 = HEAP32[$15 + ($$3223 << 2) >> 2] | 0;
     if ($109 | 0) __ZdaPv($109);
     $$3223 = $$3223 + 1 | 0;
    } while (($$3223 | 0) != ($13 | 0));
   }
   __ZdaPv($15);
   $$0201 = 0;
  } else label = 54; while (0);
  if ((label | 0) == 54) {
   HEAP32[$7 >> 2] = 0;
   $118 = $7 + 4 | 0;
   HEAP32[$118 >> 2] = $63;
   __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9push_backERKS2_($8, $7);
   L80 : do if (!(HEAP32[$12 >> 2] | 0)) $$0 = 1; else while (1) {
    $121 = HEAP32[$11 >> 2] | 0;
    $$sroa$0$0$copyload = HEAP32[$121 + 8 >> 2] | 0;
    $$sroa$8$0$copyload = HEAP32[$121 + 12 >> 2] | 0;
    __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9pop_frontEv($8);
    $125 = HEAP32[(HEAP32[$15 + ($$sroa$8$0$copyload << 2) >> 2] | 0) + ($$sroa$0$0$copyload * 24 | 0) + 16 >> 2] | 0;
    if (($125 | 0) == -1) {
     $$0 = 0;
     break L80;
    }
    $127 = __ZN8TPPLPoly8GetPointEl($1, $$sroa$0$0$copyload) | 0;
    $128 = __ZN8TPPLPoly8GetPointEl($1, $125) | 0;
    __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($9, $127, $128, __ZN8TPPLPoly8GetPointEl($1, $$sroa$8$0$copyload) | 0);
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $9);
    if (($125 | 0) > ($$sroa$0$0$copyload + 1 | 0)) {
     HEAP32[$7 >> 2] = $$sroa$0$0$copyload;
     HEAP32[$118 >> 2] = $125;
     __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9push_backERKS2_($8, $7);
    }
    if (($$sroa$8$0$copyload | 0) > ($125 + 1 | 0)) {
     HEAP32[$7 >> 2] = $125;
     HEAP32[$118 >> 2] = $$sroa$8$0$copyload;
     __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9push_backERKS2_($8, $7);
    }
    if (!(HEAP32[$12 >> 2] | 0)) {
     $$0 = 1;
     break;
    }
   } while (0);
   if ($16) {
    $$4224 = 1;
    do {
     $137 = HEAP32[$15 + ($$4224 << 2) >> 2] | 0;
     if ($137 | 0) __ZdaPv($137);
     $$4224 = $$4224 + 1 | 0;
    } while (($$4224 | 0) != ($13 | 0));
   }
   __ZdaPv($15);
   $$0201 = $$0;
  }
  __ZN8TPPLPolyD2Ev($9);
  __ZNSt3__210__list_impIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEED2Ev($8);
  $$1 = $$0201;
 } else $$1 = 0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i174 = 0, $$0$i$i$add$i186 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i182 = 0, $$0$i$i$i196 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i173 = 0, $$0$i$i$idx$i185 = 0, $$0$i$i177 = 0, $$0$i$i189 = 0, $$0$i$i202 = 0, $$0$off0207 = 0, $$0138$off0 = 0, $$0150 = 0, $$0159$off0 = 0, $$0160 = 0, $$1151 = 0, $$1161 = 0, $$16 = 0, $$3143 = 0, $$3163 = 0, $$4144 = 0, $$4164206 = 0, $$phi$trans$insert = 0, $$pre$phi225Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $117 = 0, $118 = 0, $127 = 0, $14 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $5 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $83 = 0, $87 = 0, $9 = 0, $96 = 0, $97 = 0, $spec$select = 0, label = 0, sp = 0, $$3163$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 76 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 16 | 0;
 $8 = sp;
 $9 = sp + 52 | 0;
 $10 = $1;
 L1 : do if (($10 - $0 | 0) > 3) {
  $14 = HEAP8[$0 >> 0] | 0;
  if ($14 << 24 >> 24 == 103) {
   $18 = (HEAP8[$0 + 1 >> 0] | 0) == 115;
   $spec$select = $18 ? $0 + 2 | 0 : $0;
   $$0159$off0 = $18;
   $$0160 = $spec$select;
   $21 = HEAP8[$spec$select >> 0] | 0;
  } else {
   $$0159$off0 = 0;
   $$0160 = $0;
   $21 = $14;
  }
  if ($21 << 24 >> 24 == 110) {
   $23 = HEAP8[$$0160 + 1 >> 0] | 0;
   switch ($23 << 24 >> 24) {
   case 97:
   case 119:
    break;
   default:
    {
     $$16 = $0;
     break L1;
    }
   }
   $24 = $23 << 24 >> 24 == 97;
   $25 = $$0160 + 2 | 0;
   L8 : do if (($25 | 0) != ($1 | 0)) {
    $$0138$off0 = 0;
    $$1161 = $25;
    while (1) {
     if ((HEAP8[$$1161 >> 0] | 0) == 95) break;
     $29 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1161, $1, $2) | 0;
     if (($29 | 0) == ($$1161 | 0) | ($29 | 0) == ($1 | 0)) break L8; else {
      $$0138$off0 = 1;
      $$1161 = $29;
     }
    }
    $32 = $$1161 + 1 | 0;
    $33 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($32, $1, $2) | 0;
    if (!(($33 | 0) == ($32 | 0) | ($33 | 0) == ($1 | 0))) {
     $39 = HEAP8[$33 >> 0] | 0;
     L15 : do if (($10 - $33 | 0) > 2 & $39 << 24 >> 24 == 112) {
      if ((HEAP8[$33 + 1 >> 0] | 0) != 105) break L8;
      $$3163 = $33 + 2 | 0;
      while (1) {
       if ((HEAP8[$$3163 >> 0] | 0) == 69) {
        $$0$off0207 = 1;
        $$4164206 = $$3163;
        break L15;
       }
       $$3163$looptemp = $$3163;
       $$3163 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$3163, $1, $2) | 0;
       if (($$3163 | 0) == ($$3163$looptemp | 0) | ($$3163 | 0) == ($1 | 0)) break L8;
      }
     } else if ($39 << 24 >> 24 == 69) {
      $$0$off0207 = 0;
      $$4164206 = $33;
     } else break L8; while (0);
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$4 + 8 >> 2] = 0;
     $$0$i$i = 0;
     while (1) {
      if (($$0$i$i | 0) == 3) break;
      HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
      $$0$i$i = $$0$i$i + 1 | 0;
     }
     if ($$0$off0207) {
      $54 = $2 + 4 | 0;
      $55 = HEAP32[$54 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($55 | 0)) {
       $$1151 = $0;
       $$4144 = 1;
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $55 + -24 | 0);
       $58 = $4 + 11 | 0;
       if ((HEAP8[$58 >> 0] | 0) < 0) {
        $61 = HEAP32[$4 >> 2] | 0;
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($61, $3);
        HEAP32[$4 + 4 >> 2] = 0;
       } else {
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($4, $3);
        HEAP8[$58 >> 0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($4);
       HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
       HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
       HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
       $$0$i$i$i$i = 0;
       while (1) {
        if (($$0$i$i$i$i | 0) == 3) break;
        HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
        $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       $65 = HEAP32[$54 >> 2] | 0;
       $$0$i$i$idx$i = 0;
       while (1) {
        if (($$0$i$i$idx$i | 0) == -1) break;
        $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($65 + ($$0$i$i$add$i * 24 | 0) | 0);
        $$0$i$i$idx$i = $$0$i$i$add$i;
       }
       $67 = $65 + -24 | 0;
       HEAP32[$54 >> 2] = $67;
       $$pre$phi225Z2D = $54;
       $$pre$phiZ2D = $2;
       $70 = $67;
       label = 33;
      }
     } else {
      $$phi$trans$insert = $2 + 4 | 0;
      $$pre$phi225Z2D = $$phi$trans$insert;
      $$pre$phiZ2D = $2;
      $70 = HEAP32[$$phi$trans$insert >> 2] | 0;
      label = 33;
     }
     if ((label | 0) == 33) if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($70 | 0)) {
      $$1151 = $0;
      $$4144 = 1;
     } else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $70 + -24 | 0);
      $72 = HEAP32[$$pre$phi225Z2D >> 2] | 0;
      $$0$i$i$idx$i173 = 0;
      while (1) {
       if (($$0$i$i$idx$i173 | 0) == -1) break;
       $$0$i$i$add$i174 = $$0$i$i$idx$i173 + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($72 + ($$0$i$i$add$i174 * 24 | 0) | 0);
       $$0$i$i$idx$i173 = $$0$i$i$add$i174;
      }
      $74 = $72 + -24 | 0;
      HEAP32[$$pre$phi225Z2D >> 2] = $74;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 8 >> 2] = 0;
      $$0$i$i177 = 0;
      while (1) {
       if (($$0$i$i177 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i177 << 2) >> 2] = 0;
       $$0$i$i177 = $$0$i$i177 + 1 | 0;
      }
      if ($$0138$off0) if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($74 | 0)) {
       $$0150 = $0;
       $$3143 = 1;
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, $72 + -48 | 0);
       $80 = $6 + 11 | 0;
       if ((HEAP8[$80 >> 0] | 0) < 0) {
        $83 = HEAP32[$6 >> 2] | 0;
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($83, $3);
        HEAP32[$6 + 4 >> 2] = 0;
       } else {
        HEAP8[$3 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($6, $3);
        HEAP8[$80 >> 0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($6);
       HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
       HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
       HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
       $$0$i$i$i$i182 = 0;
       while (1) {
        if (($$0$i$i$i$i182 | 0) == 3) break;
        HEAP32[$7 + ($$0$i$i$i$i182 << 2) >> 2] = 0;
        $$0$i$i$i$i182 = $$0$i$i$i$i182 + 1 | 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $87 = HEAP32[$$pre$phi225Z2D >> 2] | 0;
       $$0$i$i$idx$i185 = 0;
       while (1) {
        if (($$0$i$i$idx$i185 | 0) == -1) break;
        $$0$i$i$add$i186 = $$0$i$i$idx$i185 + -1 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($87 + ($$0$i$i$add$i186 * 24 | 0) | 0);
        $$0$i$i$idx$i185 = $$0$i$i$add$i186;
       }
       HEAP32[$$pre$phi225Z2D >> 2] = $87 + -24;
       label = 52;
      } else label = 52;
      if ((label | 0) == 52) {
       HEAP32[$3 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = 0;
       HEAP32[$3 + 8 >> 2] = 0;
       $$0$i$i189 = 0;
       while (1) {
        if (($$0$i$i189 | 0) == 3) break;
        HEAP32[$3 + ($$0$i$i189 << 2) >> 2] = 0;
        $$0$i$i189 = $$0$i$i189 + 1 | 0;
       }
       if ($$0159$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($3, 47951);
       if ($24) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 48161) | 0; else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 47911) | 0;
       if ($$0138$off0) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8, 47879, $6);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 48165) | 0;
        HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
        $$0$i$i$i = 0;
        while (1) {
         if (($$0$i$i$i | 0) == 3) break;
         HEAP32[$8 + ($$0$i$i$i << 2) >> 2] = 0;
         $$0$i$i$i = $$0$i$i$i + 1 | 0;
        }
        $96 = HEAP8[$7 + 11 >> 0] | 0;
        $97 = $96 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3, $97 ? HEAP32[$7 >> 2] | 0 : $7, $97 ? HEAP32[$7 + 4 >> 2] | 0 : $96 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       }
       $105 = HEAP8[$5 + 11 >> 0] | 0;
       $106 = $105 << 24 >> 24 < 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3, $106 ? HEAP32[$5 >> 2] | 0 : $5, $106 ? HEAP32[$5 + 4 >> 2] | 0 : $105 & 255) | 0;
       if ($$0$off0207) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8, 47874, $4);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 47877) | 0;
        HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
        HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
        $$0$i$i$i196 = 0;
        while (1) {
         if (($$0$i$i$i196 | 0) == 3) break;
         HEAP32[$8 + ($$0$i$i$i196 << 2) >> 2] = 0;
         $$0$i$i$i196 = $$0$i$i$i196 + 1 | 0;
        }
        $117 = HEAP8[$7 + 11 >> 0] | 0;
        $118 = $117 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3, $118 ? HEAP32[$7 >> 2] | 0 : $7, $118 ? HEAP32[$7 + 4 >> 2] | 0 : $117 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       };
       HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$9 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
       HEAP32[$9 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
       $$0$i$i202 = 0;
       while (1) {
        if (($$0$i$i202 | 0) == 3) break;
        HEAP32[$3 + ($$0$i$i202 << 2) >> 2] = 0;
        $$0$i$i202 = $$0$i$i202 + 1 | 0;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7, $9);
       $127 = HEAP32[$$pre$phi225Z2D >> 2] | 0;
       if ($127 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($127, $7);
        HEAP32[$$pre$phi225Z2D >> 2] = (HEAP32[$$pre$phi225Z2D >> 2] | 0) + 24;
       } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $7);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$0150 = $$4164206 + 1 | 0;
       $$3143 = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$1151 = $$0150;
      $$4144 = $$3143;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     if (!$$4144) {
      $$16 = $$1151;
      break L1;
     }
    }
   } while (0);
   $$16 = $0;
  } else $$16 = $0;
 } else $$16 = $0; while (0);
 STACKTOP = sp;
 return $$16 | 0;
}

function __sg_gl_apply_pipeline($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $218 = 0, $224 = 0, $257 = 0, $260 = 0, $3 = 0, $305 = 0, $309 = 0, $313 = 0, $4 = 0, $401 = 0, $405 = 0, $409 = 0, $441 = 0, $452 = 0, $5 = 0, $558 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 68 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 76 | 0;
 $5 = sp + 60 | 0;
 $6 = sp + 56 | 0;
 $7 = sp + 52 | 0;
 $8 = sp + 48 | 0;
 $9 = sp + 44 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 36 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 28 | 0;
 $14 = sp + 24 | 0;
 $15 = sp + 8 | 0;
 $16 = sp + 4 | 0;
 $17 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(18659, 17628, 6564, 36021);
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(36043, 17628, 6565, 36021);
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[$1 >> 2] | 0) + 84 >> 2] >> 2] | 0)) ___assert_fail(36043, 17628, 6565, 36021);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6566, 36021);
 if ((HEAP32[539409] | 0) != (HEAP32[$1 >> 2] | 0)) label = 10; else if ((HEAP32[539410] | 0) != (HEAP32[HEAP32[$1 >> 2] >> 2] | 0)) label = 10;
 if ((label | 0) == 10) {
  HEAP32[539409] = HEAP32[$1 >> 2];
  HEAP32[539410] = HEAP32[HEAP32[$1 >> 2] >> 2];
  HEAP32[539406] = __sg_gl_primitive_type(HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 320 >> 2] | 0) | 0;
  HEAP32[539407] = __sg_gl_index_type(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 + 4 >> 2] | 0) | 0;
  HEAP32[$2 >> 2] = (HEAP32[$1 >> 2] | 0) + 88 + 256;
  HEAP32[$3 >> 2] = 2157032;
  if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) {
   HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2];
   _glDepthFunc(__sg_gl_compare_func(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) | 0);
  }
  if ((HEAP8[(HEAP32[$2 >> 2] | 0) + 8 >> 0] & 1 | 0) != (HEAP8[(HEAP32[$3 >> 2] | 0) + 8 >> 0] & 1 | 0)) {
   HEAP8[(HEAP32[$3 >> 2] | 0) + 8 >> 0] = HEAP8[(HEAP32[$2 >> 2] | 0) + 8 >> 0] & 1;
   _glDepthMask(HEAP8[(HEAP32[$2 >> 2] | 0) + 8 >> 0] & 1 | 0);
  }
  if (+HEAPF32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] - +HEAPF32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] > -9.999999974752427e-07) if (+HEAPF32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] - +HEAPF32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] < 9.999999974752427e-07) if (+HEAPF32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] - +HEAPF32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] > -9.999999974752427e-07) {
   if (!(+HEAPF32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] - +HEAPF32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] < 9.999999974752427e-07)) label = 18;
  } else label = 18; else label = 18; else label = 18;
  do if ((label | 0) == 18) {
   HEAPF32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = +HEAPF32[(HEAP32[$2 >> 2] | 0) + 12 >> 2];
   HEAPF32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = +HEAPF32[(HEAP32[$2 >> 2] | 0) + 16 >> 2];
   _glPolygonOffset(+(+HEAPF32[(HEAP32[$2 >> 2] | 0) + 16 >> 2]), +(+HEAPF32[(HEAP32[$2 >> 2] | 0) + 12 >> 2]));
   HEAP8[$4 >> 0] = 1;
   if (+HEAPF32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] - 0.0 > -9.999999974752427e-07) if (+HEAPF32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] - 0.0 < 9.999999974752427e-07) if (+HEAPF32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] - 0.0 > -9.999999974752427e-07) if (+HEAPF32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] - 0.0 < 9.999999974752427e-07) HEAP8[$4 >> 0] = 0;
   if ((HEAP8[$4 >> 0] & 1 | 0) != (HEAP8[2157148] & 1 | 0)) {
    HEAP8[2157148] = HEAP8[$4 >> 0] & 1;
    if (HEAP8[$4 >> 0] & 1) {
     _glEnable(32823);
     break;
    } else {
     _glDisable(32823);
     break;
    }
   }
  } while (0);
  HEAP32[$5 >> 2] = (HEAP32[$1 >> 2] | 0) + 88 + 280;
  HEAP32[$6 >> 2] = 2157056;
  do if ((HEAP8[HEAP32[$5 >> 2] >> 0] & 1 | 0) != (HEAP8[HEAP32[$6 >> 2] >> 0] & 1 | 0)) {
   HEAP8[HEAP32[$6 >> 2] >> 0] = HEAP8[HEAP32[$5 >> 2] >> 0] & 1;
   if (HEAP8[HEAP32[$5 >> 2] >> 0] & 1) {
    _glEnable(2960);
    break;
   } else {
    _glDisable(2960);
    break;
   }
  } while (0);
  if ((HEAPU8[(HEAP32[$5 >> 2] | 0) + 37 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$6 >> 2] | 0) + 37 >> 0] | 0 | 0)) {
   HEAP8[(HEAP32[$6 >> 2] | 0) + 37 >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 37 >> 0] | 0;
   _glStencilMask(HEAPU8[(HEAP32[$5 >> 2] | 0) + 37 >> 0] | 0 | 0);
  }
  HEAP32[$7 >> 2] = 0;
  while (1) {
   if ((HEAP32[$7 >> 2] | 0) >= 2) break;
   $218 = HEAP32[$5 >> 2] | 0;
   HEAP32[$8 >> 2] = (HEAP32[$7 >> 2] | 0) == 0 ? $218 + 4 | 0 : $218 + 20 | 0;
   $224 = HEAP32[$6 >> 2] | 0;
   HEAP32[$9 >> 2] = (HEAP32[$7 >> 2] | 0) == 0 ? $224 + 4 | 0 : $224 + 20 | 0;
   HEAP32[$10 >> 2] = (HEAP32[$7 >> 2] | 0) == 0 ? 1028 : 1029;
   if ((HEAP32[HEAP32[$8 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$9 >> 2] >> 2] | 0)) label = 38; else if ((HEAPU8[(HEAP32[$5 >> 2] | 0) + 36 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$6 >> 2] | 0) + 36 >> 0] | 0 | 0)) label = 38; else if ((HEAPU8[(HEAP32[$5 >> 2] | 0) + 38 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$6 >> 2] | 0) + 38 >> 0] | 0 | 0)) label = 38;
   if ((label | 0) == 38) {
    label = 0;
    HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
    $257 = HEAP32[$10 >> 2] | 0;
    $260 = __sg_gl_compare_func(HEAP32[HEAP32[$8 >> 2] >> 2] | 0) | 0;
    _glStencilFuncSeparate($257 | 0, $260 | 0, HEAPU8[(HEAP32[$5 >> 2] | 0) + 38 >> 0] | 0 | 0, HEAPU8[(HEAP32[$5 >> 2] | 0) + 36 >> 0] | 0 | 0);
   }
   if ((HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] | 0)) label = 42; else if ((HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0)) label = 42; else if ((HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0)) label = 42;
   if ((label | 0) == 42) {
    label = 0;
    HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2];
    HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2];
    HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2];
    $305 = HEAP32[$10 >> 2] | 0;
    $309 = __sg_gl_stencil_op(HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0) | 0;
    $313 = __sg_gl_stencil_op(HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0) | 0;
    _glStencilOpSeparate($305 | 0, $309 | 0, $313 | 0, __sg_gl_stencil_op(HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0) | 0);
   }
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
  }
  HEAP8[(HEAP32[$6 >> 2] | 0) + 36 >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 36 >> 0] | 0;
  HEAP8[(HEAP32[$6 >> 2] | 0) + 38 >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 38 >> 0] | 0;
  HEAP32[$11 >> 2] = (HEAP32[$1 >> 2] | 0) + 88 + 324;
  HEAP32[$12 >> 2] = 2157096;
  do if ((HEAP8[HEAP32[$11 >> 2] >> 0] & 1 | 0) != (HEAP8[HEAP32[$12 >> 2] >> 0] & 1 | 0)) {
   HEAP8[HEAP32[$12 >> 2] >> 0] = HEAP8[HEAP32[$11 >> 2] >> 0] & 1;
   if (HEAP8[HEAP32[$11 >> 2] >> 0] & 1) {
    _glEnable(3042);
    break;
   } else {
    _glDisable(3042);
    break;
   }
  } while (0);
  if ((HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] | 0)) label = 52; else if ((HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0)) label = 52; else if ((HEAP32[(HEAP32[$11 >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] | 0)) label = 52; else if ((HEAP32[(HEAP32[$11 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] | 0)) label = 52;
  if ((label | 0) == 52) {
   HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2];
   HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2];
   HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 16 >> 2];
   HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 20 >> 2];
   $401 = __sg_gl_blend_factor(HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] | 0) | 0;
   $405 = __sg_gl_blend_factor(HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0) | 0;
   $409 = __sg_gl_blend_factor(HEAP32[(HEAP32[$11 >> 2] | 0) + 16 >> 2] | 0) | 0;
   _glBlendFuncSeparate($401 | 0, $405 | 0, $409 | 0, __sg_gl_blend_factor(HEAP32[(HEAP32[$11 >> 2] | 0) + 20 >> 2] | 0) | 0);
  }
  if ((HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] | 0)) label = 55; else if ((HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0) != (HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] | 0)) label = 55;
  if ((label | 0) == 55) {
   HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2];
   HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2];
   $441 = __sg_gl_blend_op(HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0) | 0;
   _glBlendEquationSeparate($441 | 0, __sg_gl_blend_op(HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0) | 0);
  }
  HEAP32[$13 >> 2] = 0;
  while (1) {
   $452 = HEAP32[$1 >> 2] | 0;
   if ((HEAP32[$13 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 + 16 >> 2] | 0) >>> 0) break;
   if ((HEAP32[$452 + 88 + 352 + (HEAP32[$13 >> 2] << 2) >> 2] | 0) != (HEAP32[2157124 + (HEAP32[$13 >> 2] << 2) >> 2] | 0)) {
    HEAP32[$14 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 352 + (HEAP32[$13 >> 2] << 2) >> 2];
    HEAP32[2157124 + (HEAP32[$13 >> 2] << 2) >> 2] = HEAP32[$14 >> 2];
    if (!(HEAP32[$13 >> 2] | 0)) _glColorMask((HEAP32[$14 >> 2] & 1 | 0) != 0 & 255 | 0, (HEAP32[$14 >> 2] & 2 | 0) != 0 & 255 | 0, (HEAP32[$14 >> 2] & 4 | 0) != 0 & 255 | 0, (HEAP32[$14 >> 2] & 8 | 0) != 0 & 255 | 0);
   }
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
  }
  do if (+HEAPF32[$452 + 12 + 56 >> 2] - +HEAPF32[539289] > -9.999999747378752e-05) if (+HEAPF32[(HEAP32[$1 >> 2] | 0) + 12 + 56 >> 2] - +HEAPF32[539289] < 9.999999747378752e-05) if (+HEAPF32[(HEAP32[$1 >> 2] | 0) + 12 + 56 + 4 >> 2] - +HEAPF32[539290] > -9.999999747378752e-05) if (+HEAPF32[(HEAP32[$1 >> 2] | 0) + 12 + 56 + 4 >> 2] - +HEAPF32[539290] < 9.999999747378752e-05) if (+HEAPF32[(HEAP32[$1 >> 2] | 0) + 12 + 56 + 8 >> 2] - +HEAPF32[539291] > -9.999999747378752e-05) {
   if (!(+HEAPF32[(HEAP32[$1 >> 2] | 0) + 12 + 56 + 8 >> 2] - +HEAPF32[539291] < 9.999999747378752e-05)) {
    label = 70;
    break;
   }
   if (!(+HEAPF32[(HEAP32[$1 >> 2] | 0) + 12 + 56 + 12 >> 2] - +HEAPF32[539292] > -9.999999747378752e-05)) {
    label = 70;
    break;
   }
   if (!(+HEAPF32[(HEAP32[$1 >> 2] | 0) + 12 + 56 + 12 >> 2] - +HEAPF32[539292] < 9.999999747378752e-05)) label = 70;
  } else label = 70; else label = 70; else label = 70; else label = 70; else label = 70; while (0);
  if ((label | 0) == 70) {
   $558 = (HEAP32[$1 >> 2] | 0) + 12 + 56 | 0;
   HEAP32[$15 >> 2] = HEAP32[$558 >> 2];
   HEAP32[$15 + 4 >> 2] = HEAP32[$558 + 4 >> 2];
   HEAP32[$15 + 8 >> 2] = HEAP32[$558 + 8 >> 2];
   HEAP32[$15 + 12 >> 2] = HEAP32[$558 + 12 >> 2];
   HEAP32[539289] = HEAP32[$15 >> 2];
   HEAP32[539290] = HEAP32[$15 + 4 >> 2];
   HEAP32[539291] = HEAP32[$15 + 8 >> 2];
   HEAP32[539292] = HEAP32[$15 + 12 >> 2];
   _glBlendColor(+(+HEAPF32[$15 >> 2]), +(+HEAPF32[$15 + 4 >> 2]), +(+HEAPF32[$15 + 8 >> 2]), +(+HEAPF32[$15 + 12 >> 2]));
  }
  do if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 368 >> 2] | 0) != (HEAP32[539285] | 0)) {
   HEAP32[539285] = HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 368 >> 2];
   if (1 == (HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 368 >> 2] | 0)) {
    _glDisable(2884);
    break;
   } else {
    _glEnable(2884);
    HEAP32[$16 >> 2] = 2 == (HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 368 >> 2] | 0) ? 1028 : 1029;
    _glCullFace(HEAP32[$16 >> 2] | 0);
    break;
   }
  } while (0);
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 372 >> 2] | 0) != (HEAP32[539286] | 0)) {
   HEAP32[539286] = HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 372 >> 2];
   HEAP32[$17 >> 2] = 2 == (HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 372 >> 2] | 0) ? 2304 : 2305;
   _glFrontFace(HEAP32[$17 >> 2] | 0);
  }
  do if ((HEAP8[(HEAP32[$1 >> 2] | 0) + 88 + 380 >> 0] & 1 | 0) != (HEAP8[2157172] & 1 | 0)) {
   HEAP8[2157172] = HEAP8[(HEAP32[$1 >> 2] | 0) + 88 + 380 >> 0] & 1;
   if (HEAP8[(HEAP32[$1 >> 2] | 0) + 88 + 380 >> 0] & 1) {
    _glEnable(32926);
    break;
   } else {
    _glDisable(32926);
    break;
   }
  } while (0);
  if ((HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 84 >> 2] | 0) + 252 >> 2] | 0) != (HEAP32[539378] | 0)) {
   HEAP32[539378] = HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 84 >> 2] | 0) + 252 >> 2];
   _glUseProgram(HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 84 >> 2] | 0) + 252 >> 2] | 0);
  }
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(25839, 17628, 6772, 36021);
}

function _free($0) {
 $0 = $0 | 0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0, $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $205 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $288 = 0, $3 = 0, $300 = 0, $305 = 0, $312 = 0, $313 = 0, $314 = 0, $323 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $84 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0;
 if (!$0) return;
 $2 = $0 + -8 | 0;
 $3 = HEAP32[546341] | 0;
 if ($2 >>> 0 < $3 >>> 0) _abort();
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 $7 = $6 & 3;
 if (($7 | 0) == 1) _abort();
 $9 = $6 & -8;
 $10 = $2 + $9 | 0;
 L10 : do if (!($6 & 1)) {
  $13 = HEAP32[$2 >> 2] | 0;
  if (!$7) return;
  $16 = $2 + (0 - $13) | 0;
  $17 = $13 + $9 | 0;
  if ($16 >>> 0 < $3 >>> 0) _abort();
  if ((HEAP32[546342] | 0) == ($16 | 0)) {
   $105 = $10 + 4 | 0;
   $106 = HEAP32[$105 >> 2] | 0;
   if (($106 & 3 | 0) != 3) {
    $$1 = $16;
    $$1380 = $17;
    $114 = $16;
    break;
   }
   HEAP32[546339] = $17;
   HEAP32[$105 >> 2] = $106 & -2;
   HEAP32[$16 + 4 >> 2] = $17 | 1;
   HEAP32[$16 + $17 >> 2] = $17;
   return;
  }
  $21 = $13 >>> 3;
  if ($13 >>> 0 < 256) {
   $24 = HEAP32[$16 + 8 >> 2] | 0;
   $26 = HEAP32[$16 + 12 >> 2] | 0;
   $28 = 2185388 + ($21 << 1 << 2) | 0;
   if (($24 | 0) != ($28 | 0)) {
    if ($3 >>> 0 > $24 >>> 0) _abort();
    if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) _abort();
   }
   if (($26 | 0) == ($24 | 0)) {
    HEAP32[546337] = HEAP32[546337] & ~(1 << $21);
    $$1 = $16;
    $$1380 = $17;
    $114 = $16;
    break;
   }
   if (($26 | 0) == ($28 | 0)) $$pre$phi446Z2D = $26 + 8 | 0; else {
    if ($3 >>> 0 > $26 >>> 0) _abort();
    $41 = $26 + 8 | 0;
    if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) $$pre$phi446Z2D = $41; else _abort();
   }
   HEAP32[$24 + 12 >> 2] = $26;
   HEAP32[$$pre$phi446Z2D >> 2] = $24;
   $$1 = $16;
   $$1380 = $17;
   $114 = $16;
   break;
  }
  $46 = HEAP32[$16 + 24 >> 2] | 0;
  $48 = HEAP32[$16 + 12 >> 2] | 0;
  do if (($48 | 0) == ($16 | 0)) {
   $59 = $16 + 16 | 0;
   $60 = $59 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if (!$61) {
    $63 = HEAP32[$59 >> 2] | 0;
    if (!$63) {
     $$3 = 0;
     break;
    } else {
     $$1385$ph = $63;
     $$1388$ph = $59;
    }
   } else {
    $$1385$ph = $61;
    $$1388$ph = $60;
   }
   $$1385 = $$1385$ph;
   $$1388 = $$1388$ph;
   while (1) {
    $65 = $$1385 + 20 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if (!$66) {
     $68 = $$1385 + 16 | 0;
     $69 = HEAP32[$68 >> 2] | 0;
     if (!$69) break; else {
      $$1385$be = $69;
      $$1388$be = $68;
     }
    } else {
     $$1385$be = $66;
     $$1388$be = $65;
    }
    $$1385 = $$1385$be;
    $$1388 = $$1388$be;
   }
   if ($3 >>> 0 > $$1388 >>> 0) _abort(); else {
    HEAP32[$$1388 >> 2] = 0;
    $$3 = $$1385;
    break;
   }
  } else {
   $51 = HEAP32[$16 + 8 >> 2] | 0;
   if ($3 >>> 0 > $51 >>> 0) _abort();
   $53 = $51 + 12 | 0;
   if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) _abort();
   $56 = $48 + 8 | 0;
   if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$53 >> 2] = $48;
    HEAP32[$56 >> 2] = $51;
    $$3 = $48;
    break;
   } else _abort();
  } while (0);
  if (!$46) {
   $$1 = $16;
   $$1380 = $17;
   $114 = $16;
  } else {
   $74 = HEAP32[$16 + 28 >> 2] | 0;
   $75 = 2185652 + ($74 << 2) | 0;
   do if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$75 >> 2] = $$3;
    if (!$$3) {
     HEAP32[546338] = HEAP32[546338] & ~(1 << $74);
     $$1 = $16;
     $$1380 = $17;
     $114 = $16;
     break L10;
    }
   } else if ((HEAP32[546341] | 0) >>> 0 > $46 >>> 0) _abort(); else {
    $84 = $46 + 16 | 0;
    HEAP32[((HEAP32[$84 >> 2] | 0) == ($16 | 0) ? $84 : $46 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $16;
     $$1380 = $17;
     $114 = $16;
     break L10;
    } else break;
   } while (0);
   $89 = HEAP32[546341] | 0;
   if ($89 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $46;
   $92 = $16 + 16 | 0;
   $93 = HEAP32[$92 >> 2] | 0;
   do if ($93 | 0) if ($89 >>> 0 > $93 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $$3;
    break;
   } while (0);
   $99 = HEAP32[$92 + 4 >> 2] | 0;
   if (!$99) {
    $$1 = $16;
    $$1380 = $17;
    $114 = $16;
   } else if ((HEAP32[546341] | 0) >>> 0 > $99 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $99;
    HEAP32[$99 + 24 >> 2] = $$3;
    $$1 = $16;
    $$1380 = $17;
    $114 = $16;
    break;
   }
  }
 } else {
  $$1 = $2;
  $$1380 = $9;
  $114 = $2;
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) _abort();
 $115 = $10 + 4 | 0;
 $116 = HEAP32[$115 >> 2] | 0;
 if (!($116 & 1)) _abort();
 if (!($116 & 2)) {
  if ((HEAP32[546343] | 0) == ($10 | 0)) {
   $124 = (HEAP32[546340] | 0) + $$1380 | 0;
   HEAP32[546340] = $124;
   HEAP32[546343] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   if (($$1 | 0) != (HEAP32[546342] | 0)) return;
   HEAP32[546342] = 0;
   HEAP32[546339] = 0;
   return;
  }
  if ((HEAP32[546342] | 0) == ($10 | 0)) {
   $132 = (HEAP32[546339] | 0) + $$1380 | 0;
   HEAP32[546339] = $132;
   HEAP32[546342] = $114;
   HEAP32[$$1 + 4 >> 2] = $132 | 1;
   HEAP32[$114 + $132 >> 2] = $132;
   return;
  }
  $137 = ($116 & -8) + $$1380 | 0;
  $138 = $116 >>> 3;
  L111 : do if ($116 >>> 0 < 256) {
   $141 = HEAP32[$10 + 8 >> 2] | 0;
   $143 = HEAP32[$10 + 12 >> 2] | 0;
   $145 = 2185388 + ($138 << 1 << 2) | 0;
   if (($141 | 0) != ($145 | 0)) {
    if ((HEAP32[546341] | 0) >>> 0 > $141 >>> 0) _abort();
    if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) _abort();
   }
   if (($143 | 0) == ($141 | 0)) {
    HEAP32[546337] = HEAP32[546337] & ~(1 << $138);
    break;
   }
   if (($143 | 0) == ($145 | 0)) $$pre$phi444Z2D = $143 + 8 | 0; else {
    if ((HEAP32[546341] | 0) >>> 0 > $143 >>> 0) _abort();
    $160 = $143 + 8 | 0;
    if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) $$pre$phi444Z2D = $160; else _abort();
   }
   HEAP32[$141 + 12 >> 2] = $143;
   HEAP32[$$pre$phi444Z2D >> 2] = $141;
  } else {
   $165 = HEAP32[$10 + 24 >> 2] | 0;
   $167 = HEAP32[$10 + 12 >> 2] | 0;
   do if (($167 | 0) == ($10 | 0)) {
    $179 = $10 + 16 | 0;
    $180 = $179 + 4 | 0;
    $181 = HEAP32[$180 >> 2] | 0;
    if (!$181) {
     $183 = HEAP32[$179 >> 2] | 0;
     if (!$183) {
      $$3398 = 0;
      break;
     } else {
      $$1396$ph = $183;
      $$1400$ph = $179;
     }
    } else {
     $$1396$ph = $181;
     $$1400$ph = $180;
    }
    $$1396 = $$1396$ph;
    $$1400 = $$1400$ph;
    while (1) {
     $185 = $$1396 + 20 | 0;
     $186 = HEAP32[$185 >> 2] | 0;
     if (!$186) {
      $188 = $$1396 + 16 | 0;
      $189 = HEAP32[$188 >> 2] | 0;
      if (!$189) break; else {
       $$1396$be = $189;
       $$1400$be = $188;
      }
     } else {
      $$1396$be = $186;
      $$1400$be = $185;
     }
     $$1396 = $$1396$be;
     $$1400 = $$1400$be;
    }
    if ((HEAP32[546341] | 0) >>> 0 > $$1400 >>> 0) _abort(); else {
     HEAP32[$$1400 >> 2] = 0;
     $$3398 = $$1396;
     break;
    }
   } else {
    $170 = HEAP32[$10 + 8 >> 2] | 0;
    if ((HEAP32[546341] | 0) >>> 0 > $170 >>> 0) _abort();
    $173 = $170 + 12 | 0;
    if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) _abort();
    $176 = $167 + 8 | 0;
    if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$173 >> 2] = $167;
     HEAP32[$176 >> 2] = $170;
     $$3398 = $167;
     break;
    } else _abort();
   } while (0);
   if ($165 | 0) {
    $195 = HEAP32[$10 + 28 >> 2] | 0;
    $196 = 2185652 + ($195 << 2) | 0;
    do if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$196 >> 2] = $$3398;
     if (!$$3398) {
      HEAP32[546338] = HEAP32[546338] & ~(1 << $195);
      break L111;
     }
    } else if ((HEAP32[546341] | 0) >>> 0 > $165 >>> 0) _abort(); else {
     $205 = $165 + 16 | 0;
     HEAP32[((HEAP32[$205 >> 2] | 0) == ($10 | 0) ? $205 : $165 + 20 | 0) >> 2] = $$3398;
     if (!$$3398) break L111; else break;
    } while (0);
    $210 = HEAP32[546341] | 0;
    if ($210 >>> 0 > $$3398 >>> 0) _abort();
    HEAP32[$$3398 + 24 >> 2] = $165;
    $213 = $10 + 16 | 0;
    $214 = HEAP32[$213 >> 2] | 0;
    do if ($214 | 0) if ($210 >>> 0 > $214 >>> 0) _abort(); else {
     HEAP32[$$3398 + 16 >> 2] = $214;
     HEAP32[$214 + 24 >> 2] = $$3398;
     break;
    } while (0);
    $220 = HEAP32[$213 + 4 >> 2] | 0;
    if ($220 | 0) if ((HEAP32[546341] | 0) >>> 0 > $220 >>> 0) _abort(); else {
     HEAP32[$$3398 + 20 >> 2] = $220;
     HEAP32[$220 + 24 >> 2] = $$3398;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1;
  HEAP32[$114 + $137 >> 2] = $137;
  if (($$1 | 0) == (HEAP32[546342] | 0)) {
   HEAP32[546339] = $137;
   return;
  } else $$2 = $137;
 } else {
  HEAP32[$115 >> 2] = $116 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1380 | 1;
  HEAP32[$114 + $$1380 >> 2] = $$1380;
  $$2 = $$1380;
 }
 $235 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $238 = 2185388 + ($235 << 1 << 2) | 0;
  $239 = HEAP32[546337] | 0;
  $240 = 1 << $235;
  if (!($239 & $240)) {
   HEAP32[546337] = $239 | $240;
   $$0401 = $238;
   $$pre$phiZ2D = $238 + 8 | 0;
  } else {
   $244 = $238 + 8 | 0;
   $245 = HEAP32[$244 >> 2] | 0;
   if ((HEAP32[546341] | 0) >>> 0 > $245 >>> 0) _abort(); else {
    $$0401 = $245;
    $$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0401 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0401;
  HEAP32[$$1 + 12 >> 2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 if (!$251) $$0394 = 0; else if ($$2 >>> 0 > 16777215) $$0394 = 31; else {
  $256 = ($251 + 1048320 | 0) >>> 16 & 8;
  $257 = $251 << $256;
  $260 = ($257 + 520192 | 0) >>> 16 & 4;
  $262 = $257 << $260;
  $265 = ($262 + 245760 | 0) >>> 16 & 2;
  $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0;
  $$0394 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1;
 }
 $276 = 2185652 + ($$0394 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0394;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $280 = HEAP32[546338] | 0;
 $281 = 1 << $$0394;
 L197 : do if (!($280 & $281)) {
  HEAP32[546338] = $280 | $281;
  HEAP32[$276 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $276;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
 } else {
  $288 = HEAP32[$276 >> 2] | 0;
  L200 : do if ((HEAP32[$288 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0382$lcssa = $288; else {
   $$0381438 = $$2 << (($$0394 | 0) == 31 ? 0 : 25 - ($$0394 >>> 1) | 0);
   $$0382437 = $288;
   while (1) {
    $305 = $$0382437 + 16 + ($$0381438 >>> 31 << 2) | 0;
    $300 = HEAP32[$305 >> 2] | 0;
    if (!$300) break;
    if ((HEAP32[$300 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     $$0382$lcssa = $300;
     break L200;
    } else {
     $$0381438 = $$0381438 << 1;
     $$0382437 = $300;
    }
   }
   if ((HEAP32[546341] | 0) >>> 0 > $305 >>> 0) _abort(); else {
    HEAP32[$305 >> 2] = $$1;
    HEAP32[$$1 + 24 >> 2] = $$0382437;
    HEAP32[$$1 + 12 >> 2] = $$1;
    HEAP32[$$1 + 8 >> 2] = $$1;
    break L197;
   }
  } while (0);
  $312 = $$0382$lcssa + 8 | 0;
  $313 = HEAP32[$312 >> 2] | 0;
  $314 = HEAP32[546341] | 0;
  if ($314 >>> 0 <= $313 >>> 0 & $314 >>> 0 <= $$0382$lcssa >>> 0) {
   HEAP32[$313 + 12 >> 2] = $$1;
   HEAP32[$312 >> 2] = $$1;
   HEAP32[$$1 + 8 >> 2] = $313;
   HEAP32[$$1 + 12 >> 2] = $$0382$lcssa;
   HEAP32[$$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $323 = (HEAP32[546345] | 0) + -1 | 0;
 HEAP32[546345] = $323;
 if ($323 | 0) return;
 $$0211$in$i = 2185804;
 while (1) {
  $$0211$i = HEAP32[$$0211$in$i >> 2] | 0;
  if (!$$0211$i) break; else $$0211$in$i = $$0211$i + 8 | 0;
 }
 HEAP32[546345] = -1;
 return;
}

function _stbtt__fill_active_edges_new($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $10 = 0, $109 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $158 = 0.0, $16 = 0, $17 = 0, $18 = 0, $187 = 0, $19 = 0, $197 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $262 = 0, $27 = 0, $279 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $321 = 0, $33 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $5 = 0, $53 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $5 = sp + 128 | 0;
 $6 = sp + 124 | 0;
 $7 = sp + 120 | 0;
 $8 = sp + 116 | 0;
 $9 = sp + 112 | 0;
 $10 = sp + 108 | 0;
 $11 = sp + 104 | 0;
 $12 = sp + 100 | 0;
 $13 = sp + 96 | 0;
 $14 = sp + 92 | 0;
 $15 = sp + 88 | 0;
 $16 = sp + 84 | 0;
 $17 = sp + 80 | 0;
 $18 = sp + 76 | 0;
 $19 = sp + 72 | 0;
 $20 = sp + 68 | 0;
 $21 = sp + 64 | 0;
 $22 = sp + 60 | 0;
 $23 = sp + 56 | 0;
 $24 = sp + 52 | 0;
 $25 = sp + 48 | 0;
 $26 = sp + 44 | 0;
 $27 = sp + 40 | 0;
 $28 = sp + 36 | 0;
 $29 = sp + 32 | 0;
 $30 = sp + 28 | 0;
 $31 = sp + 24 | 0;
 $32 = sp + 20 | 0;
 $33 = sp + 16 | 0;
 $34 = sp + 12 | 0;
 $35 = sp + 8 | 0;
 $36 = sp + 4 | 0;
 $37 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAPF32[$9 >> 2] = $4;
 HEAPF32[$10 >> 2] = +HEAPF32[$9 >> 2] + 1.0;
 L1 : while (1) {
  if (!(HEAP32[$8 >> 2] | 0)) {
   label = 58;
   break;
  }
  if (!(+HEAPF32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] >= +HEAPF32[$9 >> 2])) {
   label = 4;
   break;
  }
  $53 = +HEAPF32[(HEAP32[$8 >> 2] | 0) + 4 >> 2];
  L5 : do if (+HEAPF32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] == 0.0) {
   HEAPF32[$11 >> 2] = $53;
   if (+HEAPF32[$11 >> 2] < +(HEAP32[$7 >> 2] | 0)) if (+HEAPF32[$11 >> 2] >= 0.0) {
    _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, ~~+HEAPF32[$11 >> 2], HEAP32[$8 >> 2] | 0, +HEAPF32[$11 >> 2], +HEAPF32[$9 >> 2], +HEAPF32[$11 >> 2], +HEAPF32[$10 >> 2]);
    _stbtt__handle_clipped_edge((HEAP32[$6 >> 2] | 0) + -4 | 0, ~~+HEAPF32[$11 >> 2] + 1 | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$11 >> 2], +HEAPF32[$9 >> 2], +HEAPF32[$11 >> 2], +HEAPF32[$10 >> 2]);
    break;
   } else {
    _stbtt__handle_clipped_edge((HEAP32[$6 >> 2] | 0) + -4 | 0, 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$11 >> 2], +HEAPF32[$9 >> 2], +HEAPF32[$11 >> 2], +HEAPF32[$10 >> 2]);
    break;
   }
  } else {
   HEAPF32[$12 >> 2] = $53;
   HEAPF32[$13 >> 2] = +HEAPF32[(HEAP32[$8 >> 2] | 0) + 8 >> 2];
   HEAPF32[$14 >> 2] = +HEAPF32[$12 >> 2] + +HEAPF32[$13 >> 2];
   HEAPF32[$19 >> 2] = +HEAPF32[(HEAP32[$8 >> 2] | 0) + 12 >> 2];
   if (!(+HEAPF32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] <= +HEAPF32[$10 >> 2])) {
    label = 12;
    break L1;
   }
   if (!(+HEAPF32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] >= +HEAPF32[$9 >> 2])) {
    label = 12;
    break L1;
   }
   $109 = +HEAPF32[$12 >> 2];
   if (+HEAPF32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] > +HEAPF32[$9 >> 2]) {
    HEAPF32[$15 >> 2] = $109 + +HEAPF32[$13 >> 2] * (+HEAPF32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] - +HEAPF32[$9 >> 2]);
    HEAPF32[$17 >> 2] = +HEAPF32[(HEAP32[$8 >> 2] | 0) + 20 >> 2];
   } else {
    HEAPF32[$15 >> 2] = $109;
    HEAPF32[$17 >> 2] = +HEAPF32[$9 >> 2];
   }
   if (+HEAPF32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] < +HEAPF32[$10 >> 2]) {
    HEAPF32[$16 >> 2] = +HEAPF32[$12 >> 2] + +HEAPF32[$13 >> 2] * (+HEAPF32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] - +HEAPF32[$9 >> 2]);
    HEAPF32[$18 >> 2] = +HEAPF32[(HEAP32[$8 >> 2] | 0) + 24 >> 2];
   } else {
    HEAPF32[$16 >> 2] = +HEAPF32[$14 >> 2];
    HEAPF32[$18 >> 2] = +HEAPF32[$10 >> 2];
   }
   if (+HEAPF32[$15 >> 2] >= 0.0 & +HEAPF32[$16 >> 2] >= 0.0) if (+HEAPF32[$15 >> 2] < +(HEAP32[$7 >> 2] | 0)) if (+HEAPF32[$16 >> 2] < +(HEAP32[$7 >> 2] | 0)) {
    $158 = +HEAPF32[$15 >> 2];
    if ((~~+HEAPF32[$15 >> 2] | 0) == (~~+HEAPF32[$16 >> 2] | 0)) {
     HEAP32[$21 >> 2] = ~~$158;
     HEAPF32[$20 >> 2] = +HEAPF32[$18 >> 2] - +HEAPF32[$17 >> 2];
     if ((HEAP32[$21 >> 2] | 0) < 0) {
      label = 25;
      break L1;
     }
     if ((HEAP32[$21 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) {
      label = 25;
      break L1;
     }
     $187 = (HEAP32[$5 >> 2] | 0) + (HEAP32[$21 >> 2] << 2) | 0;
     HEAPF32[$187 >> 2] = +HEAPF32[$187 >> 2] + +HEAPF32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] * (1.0 - (+HEAPF32[$15 >> 2] - +(HEAP32[$21 >> 2] | 0) + (+HEAPF32[$16 >> 2] - +(HEAP32[$21 >> 2] | 0))) / 2.0) * +HEAPF32[$20 >> 2];
     $197 = (HEAP32[$6 >> 2] | 0) + (HEAP32[$21 >> 2] << 2) | 0;
     HEAPF32[$197 >> 2] = +HEAPF32[$197 >> 2] + +HEAPF32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] * +HEAPF32[$20 >> 2];
     break;
    }
    if ($158 > +HEAPF32[$16 >> 2]) {
     HEAPF32[$17 >> 2] = +HEAPF32[$10 >> 2] - (+HEAPF32[$17 >> 2] - +HEAPF32[$9 >> 2]);
     HEAPF32[$18 >> 2] = +HEAPF32[$10 >> 2] - (+HEAPF32[$18 >> 2] - +HEAPF32[$9 >> 2]);
     HEAPF32[$29 >> 2] = +HEAPF32[$17 >> 2];
     HEAPF32[$17 >> 2] = +HEAPF32[$18 >> 2];
     HEAPF32[$18 >> 2] = +HEAPF32[$29 >> 2];
     HEAPF32[$29 >> 2] = +HEAPF32[$16 >> 2];
     HEAPF32[$16 >> 2] = +HEAPF32[$15 >> 2];
     HEAPF32[$15 >> 2] = +HEAPF32[$29 >> 2];
     HEAPF32[$13 >> 2] = -+HEAPF32[$13 >> 2];
     HEAPF32[$19 >> 2] = -+HEAPF32[$19 >> 2];
     HEAPF32[$29 >> 2] = +HEAPF32[$12 >> 2];
     HEAPF32[$12 >> 2] = +HEAPF32[$14 >> 2];
     HEAPF32[$14 >> 2] = +HEAPF32[$29 >> 2];
    }
    HEAP32[$23 >> 2] = ~~+HEAPF32[$15 >> 2];
    HEAP32[$24 >> 2] = ~~+HEAPF32[$16 >> 2];
    HEAPF32[$25 >> 2] = (+((HEAP32[$23 >> 2] | 0) + 1 | 0) - +HEAPF32[$12 >> 2]) * +HEAPF32[$19 >> 2] + +HEAPF32[$9 >> 2];
    HEAPF32[$27 >> 2] = +HEAPF32[(HEAP32[$8 >> 2] | 0) + 16 >> 2];
    HEAPF32[$28 >> 2] = +HEAPF32[$27 >> 2] * (+HEAPF32[$25 >> 2] - +HEAPF32[$17 >> 2]);
    $262 = (HEAP32[$5 >> 2] | 0) + (HEAP32[$23 >> 2] << 2) | 0;
    HEAPF32[$262 >> 2] = +HEAPF32[$262 >> 2] + +HEAPF32[$28 >> 2] * (1.0 - (+HEAPF32[$15 >> 2] - +(HEAP32[$23 >> 2] | 0) + +((HEAP32[$23 >> 2] | 0) + 1 - (HEAP32[$23 >> 2] | 0) | 0)) / 2.0);
    HEAPF32[$26 >> 2] = +HEAPF32[$27 >> 2] * +HEAPF32[$19 >> 2];
    HEAP32[$22 >> 2] = (HEAP32[$23 >> 2] | 0) + 1;
    while (1) {
     if ((HEAP32[$22 >> 2] | 0) >= (HEAP32[$24 >> 2] | 0)) break;
     $279 = (HEAP32[$5 >> 2] | 0) + (HEAP32[$22 >> 2] << 2) | 0;
     HEAPF32[$279 >> 2] = +HEAPF32[$279 >> 2] + (+HEAPF32[$28 >> 2] + +HEAPF32[$26 >> 2] / 2.0);
     HEAPF32[$28 >> 2] = +HEAPF32[$28 >> 2] + +HEAPF32[$26 >> 2];
     HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 1;
    }
    HEAPF32[$25 >> 2] = +HEAPF32[$25 >> 2] + +HEAPF32[$19 >> 2] * +((HEAP32[$24 >> 2] | 0) - ((HEAP32[$23 >> 2] | 0) + 1) | 0);
    if (!(+Math_abs(+(+HEAPF32[$28 >> 2])) <= 1.0099999904632568)) {
     label = 33;
     break L1;
    }
    $321 = (HEAP32[$5 >> 2] | 0) + (HEAP32[$24 >> 2] << 2) | 0;
    HEAPF32[$321 >> 2] = +HEAPF32[$321 >> 2] + (+HEAPF32[$28 >> 2] + +HEAPF32[$27 >> 2] * (1.0 - (+((HEAP32[$24 >> 2] | 0) - (HEAP32[$24 >> 2] | 0) | 0) + (+HEAPF32[$16 >> 2] - +(HEAP32[$24 >> 2] | 0))) / 2.0) * (+HEAPF32[$18 >> 2] - +HEAPF32[$25 >> 2]));
    $331 = (HEAP32[$6 >> 2] | 0) + (HEAP32[$24 >> 2] << 2) | 0;
    HEAPF32[$331 >> 2] = +HEAPF32[$331 >> 2] + +HEAPF32[$27 >> 2] * (+HEAPF32[$18 >> 2] - +HEAPF32[$17 >> 2]);
    break;
   }
   HEAP32[$30 >> 2] = 0;
   while (1) {
    if ((HEAP32[$30 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) break L5;
    HEAPF32[$31 >> 2] = +HEAPF32[$9 >> 2];
    HEAPF32[$32 >> 2] = +(HEAP32[$30 >> 2] | 0);
    HEAPF32[$33 >> 2] = +((HEAP32[$30 >> 2] | 0) + 1 | 0);
    HEAPF32[$34 >> 2] = +HEAPF32[$14 >> 2];
    HEAPF32[$35 >> 2] = +HEAPF32[$10 >> 2];
    HEAPF32[$36 >> 2] = (+(HEAP32[$30 >> 2] | 0) - +HEAPF32[$12 >> 2]) / +HEAPF32[$13 >> 2] + +HEAPF32[$9 >> 2];
    HEAPF32[$37 >> 2] = (+((HEAP32[$30 >> 2] | 0) + 1 | 0) - +HEAPF32[$12 >> 2]) / +HEAPF32[$13 >> 2] + +HEAPF32[$9 >> 2];
    if (+HEAPF32[$12 >> 2] < +HEAPF32[$32 >> 2]) if (+HEAPF32[$34 >> 2] > +HEAPF32[$33 >> 2]) {
     _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$12 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$32 >> 2], +HEAPF32[$36 >> 2]);
     _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$32 >> 2], +HEAPF32[$36 >> 2], +HEAPF32[$33 >> 2], +HEAPF32[$37 >> 2]);
     _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$33 >> 2], +HEAPF32[$37 >> 2], +HEAPF32[$34 >> 2], +HEAPF32[$35 >> 2]);
    } else label = 40; else label = 40;
    L46 : do if ((label | 0) == 40) {
     label = 0;
     if (+HEAPF32[$34 >> 2] < +HEAPF32[$32 >> 2]) if (+HEAPF32[$12 >> 2] > +HEAPF32[$33 >> 2]) {
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$12 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$33 >> 2], +HEAPF32[$37 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$33 >> 2], +HEAPF32[$37 >> 2], +HEAPF32[$32 >> 2], +HEAPF32[$36 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$32 >> 2], +HEAPF32[$36 >> 2], +HEAPF32[$34 >> 2], +HEAPF32[$35 >> 2]);
      break;
     }
     if (+HEAPF32[$12 >> 2] < +HEAPF32[$32 >> 2]) if (+HEAPF32[$34 >> 2] > +HEAPF32[$32 >> 2]) {
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$12 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$32 >> 2], +HEAPF32[$36 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$32 >> 2], +HEAPF32[$36 >> 2], +HEAPF32[$34 >> 2], +HEAPF32[$35 >> 2]);
      break;
     }
     if (+HEAPF32[$34 >> 2] < +HEAPF32[$32 >> 2]) if (+HEAPF32[$12 >> 2] > +HEAPF32[$32 >> 2]) {
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$12 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$32 >> 2], +HEAPF32[$36 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$32 >> 2], +HEAPF32[$36 >> 2], +HEAPF32[$34 >> 2], +HEAPF32[$35 >> 2]);
      break;
     }
     if (+HEAPF32[$12 >> 2] < +HEAPF32[$33 >> 2]) if (+HEAPF32[$34 >> 2] > +HEAPF32[$33 >> 2]) {
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$12 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$33 >> 2], +HEAPF32[$37 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$33 >> 2], +HEAPF32[$37 >> 2], +HEAPF32[$34 >> 2], +HEAPF32[$35 >> 2]);
      break;
     }
     do if (+HEAPF32[$34 >> 2] < +HEAPF32[$33 >> 2]) {
      if (!(+HEAPF32[$12 >> 2] > +HEAPF32[$33 >> 2])) break;
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$12 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$33 >> 2], +HEAPF32[$37 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$33 >> 2], +HEAPF32[$37 >> 2], +HEAPF32[$34 >> 2], +HEAPF32[$35 >> 2]);
      break L46;
     } while (0);
     _stbtt__handle_clipped_edge(HEAP32[$5 >> 2] | 0, HEAP32[$30 >> 2] | 0, HEAP32[$8 >> 2] | 0, +HEAPF32[$12 >> 2], +HEAPF32[$31 >> 2], +HEAPF32[$34 >> 2], +HEAPF32[$35 >> 2]);
    } while (0);
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$8 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
 }
 if ((label | 0) == 4) ___assert_fail(40758, 40159, 2663, 40773); else if ((label | 0) == 12) ___assert_fail(40802, 40159, 2682, 40773); else if ((label | 0) == 25) ___assert_fail(40838, 40159, 2710, 40773); else if ((label | 0) == 33) ___assert_fail(40856, 40159, 2747, 40773); else if ((label | 0) == 58) {
  STACKTOP = sp;
  return;
 }
}

function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $277 = 0, $289 = 0, $294 = 0, $301 = 0, $302 = 0, $303 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0;
 $2 = $0 + $1 | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!($4 & 1)) {
  $7 = HEAP32[$0 >> 2] | 0;
  if (!($4 & 3)) return;
  $11 = $0 + (0 - $7) | 0;
  $12 = $7 + $1 | 0;
  $13 = HEAP32[546341] | 0;
  if ($11 >>> 0 < $13 >>> 0) _abort();
  if ((HEAP32[546342] | 0) == ($11 | 0)) {
   $101 = $2 + 4 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   if (($102 & 3 | 0) != 3) {
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   HEAP32[546339] = $12;
   HEAP32[$101 >> 2] = $102 & -2;
   HEAP32[$11 + 4 >> 2] = $12 | 1;
   HEAP32[$2 >> 2] = $12;
   return;
  }
  $17 = $7 >>> 3;
  if ($7 >>> 0 < 256) {
   $20 = HEAP32[$11 + 8 >> 2] | 0;
   $22 = HEAP32[$11 + 12 >> 2] | 0;
   $24 = 2185388 + ($17 << 1 << 2) | 0;
   if (($20 | 0) != ($24 | 0)) {
    if ($13 >>> 0 > $20 >>> 0) _abort();
    if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) _abort();
   }
   if (($22 | 0) == ($20 | 0)) {
    HEAP32[546337] = HEAP32[546337] & ~(1 << $17);
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   if (($22 | 0) == ($24 | 0)) $$pre$phi30Z2D = $22 + 8 | 0; else {
    if ($13 >>> 0 > $22 >>> 0) _abort();
    $37 = $22 + 8 | 0;
    if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) $$pre$phi30Z2D = $37; else _abort();
   }
   HEAP32[$20 + 12 >> 2] = $22;
   HEAP32[$$pre$phi30Z2D >> 2] = $20;
   $$1 = $11;
   $$1416 = $12;
   break;
  }
  $42 = HEAP32[$11 + 24 >> 2] | 0;
  $44 = HEAP32[$11 + 12 >> 2] | 0;
  do if (($44 | 0) == ($11 | 0)) {
   $55 = $11 + 16 | 0;
   $56 = $55 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   if (!$57) {
    $59 = HEAP32[$55 >> 2] | 0;
    if (!$59) {
     $$3 = 0;
     break;
    } else {
     $$1424$ph = $59;
     $$1427$ph = $55;
    }
   } else {
    $$1424$ph = $57;
    $$1427$ph = $56;
   }
   $$1424 = $$1424$ph;
   $$1427 = $$1427$ph;
   while (1) {
    $61 = $$1424 + 20 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    if (!$62) {
     $64 = $$1424 + 16 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if (!$65) break; else {
      $$1424$be = $65;
      $$1427$be = $64;
     }
    } else {
     $$1424$be = $62;
     $$1427$be = $61;
    }
    $$1424 = $$1424$be;
    $$1427 = $$1427$be;
   }
   if ($13 >>> 0 > $$1427 >>> 0) _abort(); else {
    HEAP32[$$1427 >> 2] = 0;
    $$3 = $$1424;
    break;
   }
  } else {
   $47 = HEAP32[$11 + 8 >> 2] | 0;
   if ($13 >>> 0 > $47 >>> 0) _abort();
   $49 = $47 + 12 | 0;
   if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) _abort();
   $52 = $44 + 8 | 0;
   if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$49 >> 2] = $44;
    HEAP32[$52 >> 2] = $47;
    $$3 = $44;
    break;
   } else _abort();
  } while (0);
  if (!$42) {
   $$1 = $11;
   $$1416 = $12;
  } else {
   $70 = HEAP32[$11 + 28 >> 2] | 0;
   $71 = 2185652 + ($70 << 2) | 0;
   do if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$71 >> 2] = $$3;
    if (!$$3) {
     HEAP32[546338] = HEAP32[546338] & ~(1 << $70);
     $$1 = $11;
     $$1416 = $12;
     break L1;
    }
   } else if ((HEAP32[546341] | 0) >>> 0 > $42 >>> 0) _abort(); else {
    $80 = $42 + 16 | 0;
    HEAP32[((HEAP32[$80 >> 2] | 0) == ($11 | 0) ? $80 : $42 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $11;
     $$1416 = $12;
     break L1;
    } else break;
   } while (0);
   $85 = HEAP32[546341] | 0;
   if ($85 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $42;
   $88 = $11 + 16 | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   do if ($89 | 0) if ($85 >>> 0 > $89 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $89;
    HEAP32[$89 + 24 >> 2] = $$3;
    break;
   } while (0);
   $95 = HEAP32[$88 + 4 >> 2] | 0;
   if (!$95) {
    $$1 = $11;
    $$1416 = $12;
   } else if ((HEAP32[546341] | 0) >>> 0 > $95 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $95;
    HEAP32[$95 + 24 >> 2] = $$3;
    $$1 = $11;
    $$1416 = $12;
    break;
   }
  }
 } else {
  $$1 = $0;
  $$1416 = $1;
 } while (0);
 $108 = HEAP32[546341] | 0;
 if ($2 >>> 0 < $108 >>> 0) _abort();
 $110 = $2 + 4 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 if (!($111 & 2)) {
  if ((HEAP32[546343] | 0) == ($2 | 0)) {
   $117 = (HEAP32[546340] | 0) + $$1416 | 0;
   HEAP32[546340] = $117;
   HEAP32[546343] = $$1;
   HEAP32[$$1 + 4 >> 2] = $117 | 1;
   if (($$1 | 0) != (HEAP32[546342] | 0)) return;
   HEAP32[546342] = 0;
   HEAP32[546339] = 0;
   return;
  }
  if ((HEAP32[546342] | 0) == ($2 | 0)) {
   $125 = (HEAP32[546339] | 0) + $$1416 | 0;
   HEAP32[546339] = $125;
   HEAP32[546342] = $$1;
   HEAP32[$$1 + 4 >> 2] = $125 | 1;
   HEAP32[$$1 + $125 >> 2] = $125;
   return;
  }
  $130 = ($111 & -8) + $$1416 | 0;
  $131 = $111 >>> 3;
  L99 : do if ($111 >>> 0 < 256) {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   $136 = HEAP32[$2 + 12 >> 2] | 0;
   $138 = 2185388 + ($131 << 1 << 2) | 0;
   if (($134 | 0) != ($138 | 0)) {
    if ($108 >>> 0 > $134 >>> 0) _abort();
    if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) _abort();
   }
   if (($136 | 0) == ($134 | 0)) {
    HEAP32[546337] = HEAP32[546337] & ~(1 << $131);
    break;
   }
   if (($136 | 0) == ($138 | 0)) $$pre$phi28Z2D = $136 + 8 | 0; else {
    if ($108 >>> 0 > $136 >>> 0) _abort();
    $151 = $136 + 8 | 0;
    if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) $$pre$phi28Z2D = $151; else _abort();
   }
   HEAP32[$134 + 12 >> 2] = $136;
   HEAP32[$$pre$phi28Z2D >> 2] = $134;
  } else {
   $156 = HEAP32[$2 + 24 >> 2] | 0;
   $158 = HEAP32[$2 + 12 >> 2] | 0;
   do if (($158 | 0) == ($2 | 0)) {
    $169 = $2 + 16 | 0;
    $170 = $169 + 4 | 0;
    $171 = HEAP32[$170 >> 2] | 0;
    if (!$171) {
     $173 = HEAP32[$169 >> 2] | 0;
     if (!$173) {
      $$3433 = 0;
      break;
     } else {
      $$1431$ph = $173;
      $$1435$ph = $169;
     }
    } else {
     $$1431$ph = $171;
     $$1435$ph = $170;
    }
    $$1431 = $$1431$ph;
    $$1435 = $$1435$ph;
    while (1) {
     $175 = $$1431 + 20 | 0;
     $176 = HEAP32[$175 >> 2] | 0;
     if (!$176) {
      $178 = $$1431 + 16 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      if (!$179) break; else {
       $$1431$be = $179;
       $$1435$be = $178;
      }
     } else {
      $$1431$be = $176;
      $$1435$be = $175;
     }
     $$1431 = $$1431$be;
     $$1435 = $$1435$be;
    }
    if ($108 >>> 0 > $$1435 >>> 0) _abort(); else {
     HEAP32[$$1435 >> 2] = 0;
     $$3433 = $$1431;
     break;
    }
   } else {
    $161 = HEAP32[$2 + 8 >> 2] | 0;
    if ($108 >>> 0 > $161 >>> 0) _abort();
    $163 = $161 + 12 | 0;
    if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) _abort();
    $166 = $158 + 8 | 0;
    if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$163 >> 2] = $158;
     HEAP32[$166 >> 2] = $161;
     $$3433 = $158;
     break;
    } else _abort();
   } while (0);
   if ($156 | 0) {
    $184 = HEAP32[$2 + 28 >> 2] | 0;
    $185 = 2185652 + ($184 << 2) | 0;
    do if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$185 >> 2] = $$3433;
     if (!$$3433) {
      HEAP32[546338] = HEAP32[546338] & ~(1 << $184);
      break L99;
     }
    } else if ((HEAP32[546341] | 0) >>> 0 > $156 >>> 0) _abort(); else {
     $194 = $156 + 16 | 0;
     HEAP32[((HEAP32[$194 >> 2] | 0) == ($2 | 0) ? $194 : $156 + 20 | 0) >> 2] = $$3433;
     if (!$$3433) break L99; else break;
    } while (0);
    $199 = HEAP32[546341] | 0;
    if ($199 >>> 0 > $$3433 >>> 0) _abort();
    HEAP32[$$3433 + 24 >> 2] = $156;
    $202 = $2 + 16 | 0;
    $203 = HEAP32[$202 >> 2] | 0;
    do if ($203 | 0) if ($199 >>> 0 > $203 >>> 0) _abort(); else {
     HEAP32[$$3433 + 16 >> 2] = $203;
     HEAP32[$203 + 24 >> 2] = $$3433;
     break;
    } while (0);
    $209 = HEAP32[$202 + 4 >> 2] | 0;
    if ($209 | 0) if ((HEAP32[546341] | 0) >>> 0 > $209 >>> 0) _abort(); else {
     HEAP32[$$3433 + 20 >> 2] = $209;
     HEAP32[$209 + 24 >> 2] = $$3433;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1;
  HEAP32[$$1 + $130 >> 2] = $130;
  if (($$1 | 0) == (HEAP32[546342] | 0)) {
   HEAP32[546339] = $130;
   return;
  } else $$2 = $130;
 } else {
  HEAP32[$110 >> 2] = $111 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1416 | 1;
  HEAP32[$$1 + $$1416 >> 2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $227 = 2185388 + ($224 << 1 << 2) | 0;
  $228 = HEAP32[546337] | 0;
  $229 = 1 << $224;
  if (!($228 & $229)) {
   HEAP32[546337] = $228 | $229;
   $$0436 = $227;
   $$pre$phiZ2D = $227 + 8 | 0;
  } else {
   $233 = $227 + 8 | 0;
   $234 = HEAP32[$233 >> 2] | 0;
   if ((HEAP32[546341] | 0) >>> 0 > $234 >>> 0) _abort(); else {
    $$0436 = $234;
    $$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0436 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0436;
  HEAP32[$$1 + 12 >> 2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 if (!$240) $$0429 = 0; else if ($$2 >>> 0 > 16777215) $$0429 = 31; else {
  $245 = ($240 + 1048320 | 0) >>> 16 & 8;
  $246 = $240 << $245;
  $249 = ($246 + 520192 | 0) >>> 16 & 4;
  $251 = $246 << $249;
  $254 = ($251 + 245760 | 0) >>> 16 & 2;
  $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0;
  $$0429 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1;
 }
 $265 = 2185652 + ($$0429 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0429;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $269 = HEAP32[546338] | 0;
 $270 = 1 << $$0429;
 if (!($269 & $270)) {
  HEAP32[546338] = $269 | $270;
  HEAP32[$265 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $265;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $277 = HEAP32[$265 >> 2] | 0;
 L189 : do if ((HEAP32[$277 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0418$lcssa = $277; else {
  $$041722 = $$2 << (($$0429 | 0) == 31 ? 0 : 25 - ($$0429 >>> 1) | 0);
  $$041821 = $277;
  while (1) {
   $294 = $$041821 + 16 + ($$041722 >>> 31 << 2) | 0;
   $289 = HEAP32[$294 >> 2] | 0;
   if (!$289) break;
   if ((HEAP32[$289 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
    $$0418$lcssa = $289;
    break L189;
   } else {
    $$041722 = $$041722 << 1;
    $$041821 = $289;
   }
  }
  if ((HEAP32[546341] | 0) >>> 0 > $294 >>> 0) _abort();
  HEAP32[$294 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $$041821;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } while (0);
 $301 = $$0418$lcssa + 8 | 0;
 $302 = HEAP32[$301 >> 2] | 0;
 $303 = HEAP32[546341] | 0;
 if (!($303 >>> 0 <= $302 >>> 0 & $303 >>> 0 <= $$0418$lcssa >>> 0)) _abort();
 HEAP32[$302 + 12 >> 2] = $$1;
 HEAP32[$301 >> 2] = $$1;
 HEAP32[$$1 + 8 >> 2] = $302;
 HEAP32[$$1 + 12 >> 2] = $$0418$lcssa;
 HEAP32[$$1 + 24 >> 2] = 0;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i132 = 0, $$0$i$i$i112 = 0, $$0$i$i$i119 = 0, $$0$i$i$i123 = 0, $$0$i$i$i127 = 0, $$0$i$i$idx$i = 0, $$7 = 0, $103 = 0, $104 = 0, $105 = 0, $108 = 0, $112 = 0, $113 = 0, $115 = 0, $123 = 0, $13 = 0, $131 = 0, $132 = 0, $142 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $3 = 0, $35 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $6 = 0, $63 = 0, $67 = 0, $7 = 0, $75 = 0, $76 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 do if (($0 | 0) == ($1 | 0)) $$7 = $0; else if ((HEAP8[$0 >> 0] | 0) == 65) {
  $13 = $0 + 1 | 0;
  if (($13 | 0) == ($1 | 0)) $$7 = $0; else {
   $15 = HEAP8[$13 >> 0] | 0;
   if ($15 << 24 >> 24 == 95) {
    $17 = $0 + 2 | 0;
    $18 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($17, $1, $2) | 0;
    if (($18 | 0) == ($17 | 0)) {
     $$7 = $0;
     break;
    }
    $21 = $2 + 4 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($22 | 0)) {
     $$7 = $0;
     break;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($3, $22 + -12 | 0, 2);
    $25 = __ZNSt3__211char_traitsIcE6lengthEPKc(47871) | 0;
    $27 = HEAP8[$3 + 11 >> 0] | 0;
    if (($25 | 0) == (($27 << 24 >> 24 < 0 ? HEAP32[$3 + 4 >> 2] | 0 : $27 & 255) | 0)) {
     $35 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($3, 47871, $25) | 0) == 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     if ($35) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEmm((HEAP32[$21 >> 2] | 0) + -12 | 0);
    } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc((HEAP32[$21 >> 2] | 0) + -12 | 0, 0, 49312) | 0;
    $$7 = $18;
    break;
   }
   if (($15 + -49 & 255) < 9) {
    $41 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($13, $1) | 0;
    if (($41 | 0) == ($1 | 0)) {
     $$7 = $0;
     break;
    }
    if ((HEAP8[$41 >> 0] | 0) != 95) {
     $$7 = $0;
     break;
    }
    $45 = $41 + 1 | 0;
    $46 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($45, $1, $2) | 0;
    if (($46 | 0) == ($45 | 0)) {
     $$7 = $0;
     break;
    }
    $49 = $2 + 4 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($50 | 0)) {
     $$7 = $0;
     break;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($3, $50 + -12 | 0, 2);
    $53 = __ZNSt3__211char_traitsIcE6lengthEPKc(47871) | 0;
    $55 = HEAP8[$3 + 11 >> 0] | 0;
    if (($53 | 0) == (($55 << 24 >> 24 < 0 ? HEAP32[$3 + 4 >> 2] | 0 : $55 & 255) | 0)) {
     $63 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($3, 47871, $53) | 0) == 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     if ($63) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEmm((HEAP32[$49 >> 2] | 0) + -12 | 0);
    } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $67 = (HEAP32[$49 >> 2] | 0) + -12 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5, $13, $41);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5, 0, 47871) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 47926) | 0;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i112 = 0;
    while (1) {
     if (($$0$i$i$i112 | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i112 << 2) >> 2] = 0;
     $$0$i$i$i112 = $$0$i$i$i112 + 1 | 0;
    }
    $75 = HEAP8[$3 + 11 >> 0] | 0;
    $76 = $75 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm($67, 0, $76 ? HEAP32[$3 >> 2] | 0 : $3, $76 ? HEAP32[$3 + 4 >> 2] | 0 : $75 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$7 = $46;
    break;
   }
   $83 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
   if (($83 | 0) == ($13 | 0) | ($83 | 0) == ($1 | 0)) $$7 = $0; else if ((HEAP8[$83 >> 0] | 0) == 95) {
    $88 = $83 + 1 | 0;
    $89 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($88, $1, $2) | 0;
    if (($89 | 0) == ($88 | 0)) $$7 = $0; else {
     $91 = $2 + 4 | 0;
     $92 = HEAP32[$91 >> 2] | 0;
     if ((($92 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$7 = $0; else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $92 + -24 | 0);
      $99 = HEAP32[$91 >> 2] | 0;
      $$0$i$i$idx$i = 0;
      while (1) {
       if (($$0$i$i$idx$i | 0) == -1) break;
       $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($99 + ($$0$i$i$add$i * 24 | 0) | 0);
       $$0$i$i$idx$i = $$0$i$i$add$i;
      }
      HEAP32[$91 >> 2] = $99 + -24;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $99 + -48 | 0);
      $103 = HEAP32[$91 >> 2] | 0;
      $104 = $103 + -24 | 0;
      $105 = $104 + 11 | 0;
      if ((HEAP8[$105 >> 0] | 0) < 0) {
       $108 = HEAP32[$104 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($108, $3);
       HEAP32[$103 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($104, $3);
       HEAP8[$105 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($104);
      HEAP32[$104 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$104 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$104 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i$i | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
      }
      $112 = $4 + 12 | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($3, $112, 2);
      $113 = __ZNSt3__211char_traitsIcE6lengthEPKc(47871) | 0;
      $115 = HEAP8[$3 + 11 >> 0] | 0;
      if (($113 | 0) == (($115 << 24 >> 24 < 0 ? HEAP32[$3 + 4 >> 2] | 0 : $115 & 255) | 0)) {
       $123 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($3, 47871, $113) | 0) == 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       if ($123) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEmm($112);
      } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9, 0, 47871) | 0;
      HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
      HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
      $$0$i$i$i119 = 0;
      while (1) {
       if (($$0$i$i$i119 | 0) == 3) break;
       HEAP32[$9 + ($$0$i$i$i119 << 2) >> 2] = 0;
       $$0$i$i$i119 = $$0$i$i$i119 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 47926) | 0;
      HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
      $$0$i$i$i123 = 0;
      while (1) {
       if (($$0$i$i$i123 | 0) == 3) break;
       HEAP32[$8 + ($$0$i$i$i123 << 2) >> 2] = 0;
       $$0$i$i$i123 = $$0$i$i$i123 + 1 | 0;
      }
      $131 = HEAP8[$112 + 11 >> 0] | 0;
      $132 = $131 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7, $132 ? HEAP32[$112 >> 2] | 0 : $112, $132 ? HEAP32[$4 + 16 >> 2] | 0 : $131 & 255) | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
      $$0$i$i$i127 = 0;
      while (1) {
       if (($$0$i$i$i127 | 0) == 3) break;
       HEAP32[$7 + ($$0$i$i$i127 << 2) >> 2] = 0;
       $$0$i$i$i127 = $$0$i$i$i127 + 1 | 0;
      }
      $142 = HEAP32[$91 >> 2] | 0;
      $143 = $142 + -12 | 0;
      $144 = $143 + 11 | 0;
      if ((HEAP8[$144 >> 0] | 0) < 0) {
       $147 = HEAP32[$143 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($147, $3);
       HEAP32[$142 + -8 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($143, $3);
       HEAP8[$144 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($143);
      HEAP32[$143 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$143 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$143 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i132 = 0;
      while (1) {
       if (($$0$i$i$i$i132 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i132 << 2) >> 2] = 0;
       $$0$i$i$i$i132 = $$0$i$i$i$i132 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $$7 = $89;
     }
    }
   } else $$7 = $0;
  }
 } else $$7 = $0; while (0);
 STACKTOP = sp;
 return $$7 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i133 = 0, $$0$i$i$add$i139 = 0, $$0$i$i$add$i143 = 0, $$0$i$i$add$i148 = 0, $$0$i$i$add$i154 = 0, $$0$i$i$add$i158 = 0, $$0$i$i$add$i162 = 0, $$0$i$i$i$i = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i132 = 0, $$0$i$i$idx$i138 = 0, $$0$i$i$idx$i142 = 0, $$0$i$i$idx$i147 = 0, $$0$i$i$idx$i153 = 0, $$0$i$i$idx$i157 = 0, $$0$i$i$idx$i161 = 0, $$0105 = 0, $$0105$lcssa = 0, $$0106 = 0, $$0110 = 0, $$0110$lcssa = 0, $$0116 = 0, $$2108 = 0, $$3109 = 0, $$7 = 0, $$byval_copy = 0, $101 = 0, $104 = 0, $113 = 0, $114 = 0, $125 = 0, $128 = 0, $130 = 0, $141 = 0, $147 = 0, $152 = 0, $18 = 0, $19 = 0, $25 = 0, $27 = 0, $3 = 0, $4 = 0, $44 = 0, $49 = 0, $5 = 0, $50 = 0, $56 = 0, $6 = 0, $62 = 0, $64 = 0, $67 = 0, $7 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $87 = 0, $89 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy = sp + 56 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 85) {
  switch (HEAP8[$0 + 1 >> 0] | 0) {
  case 116:
   {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48680, __ZNSt3__211char_traitsIcE6lengthEPKc(48680) | 0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($$byval_copy, $3);
    $18 = $2 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    if ($19 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($19, $$byval_copy);
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $$byval_copy);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$byval_copy);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $25 = $0 + 2 | 0;
    if (($25 | 0) == ($1 | 0)) {
     $27 = HEAP32[$18 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$18 >> 2] = $27 + -24;
     $$7 = $0;
     break L1;
    }
    if (((HEAP8[$25 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
     $$0110 = $0 + 3 | 0;
     while (1) {
      if (($$0110 | 0) == ($1 | 0)) {
       $$0110$lcssa = $1;
       break;
      }
      if (((HEAP8[$$0110 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       $$0110$lcssa = $$0110;
       break;
      }
      $$0110 = $$0110 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_((HEAP32[$18 >> 2] | 0) + -24 | 0, $25, $$0110$lcssa);
     $$0116 = $$0110$lcssa;
    } else $$0116 = $25;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$18 >> 2] | 0) + -24 | 0, 39);
    if (($$0116 | 0) != ($1 | 0)) if ((HEAP8[$$0116 >> 0] | 0) == 95) {
     $$7 = $$0116 + 1 | 0;
     break L1;
    }
    $44 = HEAP32[$18 >> 2] | 0;
    $$0$i$i$idx$i132 = 0;
    while (1) {
     if (($$0$i$i$idx$i132 | 0) == -1) break;
     $$0$i$i$add$i133 = $$0$i$i$idx$i132 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44 + ($$0$i$i$add$i133 * 24 | 0) | 0);
     $$0$i$i$idx$i132 = $$0$i$i$add$i133;
    }
    HEAP32[$18 >> 2] = $44 + -24;
    $$7 = $0;
    break L1;
    break;
   }
  case 108:
   break;
  default:
   {
    $$7 = $0;
    break L1;
   }
  }
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($4, 48689, __ZNSt3__211char_traitsIcE6lengthEPKc(48689) | 0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($$byval_copy, $4);
  $49 = $2 + 4 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  if ($50 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($50, $$byval_copy);
   HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 24;
  } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $$byval_copy);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($$byval_copy);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
  $56 = $0 + 2 | 0;
  do if ((HEAP8[$56 >> 0] | 0) == 118) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$49 >> 2] | 0) + -24 | 0, 41);
   $$2108 = $0 + 3 | 0;
  } else {
   $62 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($56, $1, $2) | 0;
   if (($62 | 0) == ($56 | 0)) {
    $64 = HEAP32[$49 >> 2] | 0;
    $$0$i$i$idx$i138 = 0;
    while (1) {
     if (($$0$i$i$idx$i138 | 0) == -1) break;
     $$0$i$i$add$i139 = $$0$i$i$idx$i138 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($64 + ($$0$i$i$add$i139 * 24 | 0) | 0);
     $$0$i$i$idx$i138 = $$0$i$i$add$i139;
    }
    HEAP32[$49 >> 2] = $64 + -24;
    $$7 = $0;
    break L1;
   }
   $67 = HEAP32[$49 >> 2] | 0;
   if ((($67 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $$7 = $0;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $67 + -24 | 0);
   $74 = HEAP32[$49 >> 2] | 0;
   $$0$i$i$idx$i142 = 0;
   while (1) {
    if (($$0$i$i$idx$i142 | 0) == -1) break;
    $$0$i$i$add$i143 = $$0$i$i$idx$i142 + -1 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($74 + ($$0$i$i$add$i143 * 24 | 0) | 0);
    $$0$i$i$idx$i142 = $$0$i$i$add$i143;
   }
   HEAP32[$49 >> 2] = $74 + -24;
   $78 = $5 + 11 | 0;
   $79 = HEAP8[$78 >> 0] | 0;
   $80 = $79 << 24 >> 24 < 0;
   $82 = $5 + 4 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($74 + -48 | 0, $80 ? HEAP32[$5 >> 2] | 0 : $5, $80 ? HEAP32[$82 >> 2] | 0 : $79 & 255) | 0;
   $$0106 = $62;
   while (1) {
    $87 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0106, $1, $2) | 0;
    if (($87 | 0) == ($$0106 | 0)) {
     label = 54;
     break;
    }
    $89 = HEAP32[$49 >> 2] | 0;
    if ((($89 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     label = 82;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $89 + -24 | 0);
    if ((HEAP8[$78 >> 0] | 0) < 0) {
     $98 = HEAP32[$5 >> 2] | 0;
     HEAP8[$$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($98, $$byval_copy);
     HEAP32[$82 >> 2] = 0;
    } else {
     HEAP8[$$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($5, $$byval_copy);
     HEAP8[$78 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($5);
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $101 = HEAP32[$49 >> 2] | 0;
    $$0$i$i$idx$i147 = 0;
    while (1) {
     if (($$0$i$i$idx$i147 | 0) == -1) break;
     $$0$i$i$add$i148 = $$0$i$i$idx$i147 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($101 + ($$0$i$i$add$i148 * 24 | 0) | 0);
     $$0$i$i$idx$i147 = $$0$i$i$add$i148;
    }
    HEAP32[$49 >> 2] = $101 + -24;
    $104 = HEAP8[$78 >> 0] | 0;
    if (($104 << 24 >> 24 < 0 ? HEAP32[$82 >> 2] | 0 : $104 & 255) | 0) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($101 + -48 | 0, 48101) | 0;
     $113 = HEAP8[$78 >> 0] | 0;
     $114 = $113 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$49 >> 2] | 0) + -24 | 0, $114 ? HEAP32[$5 >> 2] | 0 : $5, $114 ? HEAP32[$82 >> 2] | 0 : $113 & 255) | 0;
    }
    $$0106 = $87;
   }
   if ((label | 0) == 54) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$49 >> 2] | 0) + -24 | 0, 47877) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$2108 = $$0106;
    break;
   } else if ((label | 0) == 82) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$7 = $0;
    break L1;
   }
  } while (0);
  if (($$2108 | 0) != ($1 | 0)) if ((HEAP8[$$2108 >> 0] | 0) == 69) {
   $128 = $$2108 + 1 | 0;
   if (($128 | 0) == ($1 | 0)) {
    $130 = HEAP32[$49 >> 2] | 0;
    $$0$i$i$idx$i157 = 0;
    while (1) {
     if (($$0$i$i$idx$i157 | 0) == -1) break;
     $$0$i$i$add$i158 = $$0$i$i$idx$i157 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($130 + ($$0$i$i$add$i158 * 24 | 0) | 0);
     $$0$i$i$idx$i157 = $$0$i$i$add$i158;
    }
    HEAP32[$49 >> 2] = $130 + -24;
    $$7 = $0;
    break;
   }
   if (((HEAP8[$128 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
    $$0105 = $$2108 + 2 | 0;
    while (1) {
     if (($$0105 | 0) == ($1 | 0)) {
      $$0105$lcssa = $1;
      break;
     }
     if (((HEAP8[$$0105 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
      $$0105$lcssa = $$0105;
      break;
     }
     $$0105 = $$0105 + 1 | 0;
    }
    $141 = (HEAP32[$49 >> 2] | 0) + -24 | 0;
    if ((HEAP8[$141 + 11 >> 0] | 0) < 0) $147 = HEAP32[$141 >> 2] | 0; else $147 = $141;
    HEAP32[$7 >> 2] = $147 + 7;
    HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($141, $$byval_copy, $128, $$0105$lcssa) | 0;
    $$3109 = $$0105$lcssa;
   } else $$3109 = $128;
   if (($$3109 | 0) != ($1 | 0)) if ((HEAP8[$$3109 >> 0] | 0) == 95) {
    $$7 = $$3109 + 1 | 0;
    break;
   }
   $152 = HEAP32[$49 >> 2] | 0;
   $$0$i$i$idx$i161 = 0;
   while (1) {
    if (($$0$i$i$idx$i161 | 0) == -1) break;
    $$0$i$i$add$i162 = $$0$i$i$idx$i161 + -1 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($152 + ($$0$i$i$add$i162 * 24 | 0) | 0);
    $$0$i$i$idx$i161 = $$0$i$i$add$i162;
   }
   HEAP32[$49 >> 2] = $152 + -24;
   $$7 = $0;
   break;
  }
  $125 = HEAP32[$49 >> 2] | 0;
  $$0$i$i$idx$i153 = 0;
  while (1) {
   if (($$0$i$i$idx$i153 | 0) == -1) break;
   $$0$i$i$add$i154 = $$0$i$i$idx$i153 + -1 | 0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($125 + ($$0$i$i$add$i154 * 24 | 0) | 0);
   $$0$i$i$idx$i153 = $$0$i$i$add$i154;
  }
  HEAP32[$49 >> 2] = $125 + -24;
  $$7 = $0;
 } else $$7 = $0; else $$7 = $0; while (0);
 STACKTOP = sp;
 return $$7 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i158 = 0, $$0$i$i$i161 = 0, $$0$i$i$idx$i = 0, $$11 = 0, $$4156 = 0, $$8 = 0, $$8151 = 0, $104 = 0, $105 = 0, $106 = 0, $109 = 0, $113 = 0, $115 = 0, $119 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $136 = 0, $137 = 0, $141 = 0, $15 = 0, $18 = 0, $19 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $81 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 60 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 L1 : do if (($1 - $0 | 0) > 2) {
  switch (HEAP8[$0 >> 0] | 0) {
  case 84:
   break;
  case 71:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 86:
     {
      $128 = $0 + 2 | 0;
      $129 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($128, $1, $2) | 0;
      if (($129 | 0) == ($128 | 0)) {
       $$11 = $0;
       label = 60;
       break L1;
      }
      $133 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($133 | 0)) {
       $$8 = $0;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($133 + -24 | 0, 0, 49709) | 0;
      $$11 = $129;
      label = 60;
      break L1;
      break;
     }
    case 82:
     {
      $136 = $0 + 2 | 0;
      $137 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($136, $1, $2) | 0;
      if (($137 | 0) == ($136 | 0)) {
       $$11 = $0;
       label = 60;
       break L1;
      }
      $141 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($141 | 0)) {
       $$8 = $0;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($141 + -24 | 0, 0, 49729) | 0;
      $$11 = $137;
      label = 60;
      break L1;
      break;
     }
    default:
     {
      $$11 = $0;
      label = 60;
      break L1;
     }
    }
    break;
   }
  default:
   {
    $$11 = $0;
    label = 60;
    break L1;
   }
  }
  $15 = $0 + 1 | 0;
  switch (HEAP8[$15 >> 0] | 0) {
  case 86:
   {
    $18 = $0 + 2 | 0;
    $19 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($18, $1, $2) | 0;
    if (($19 | 0) == ($18 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $23 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($23 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($23 + -24 | 0, 0, 49558) | 0;
    $$11 = $19;
    label = 60;
    break L1;
    break;
   }
  case 84:
   {
    $26 = $0 + 2 | 0;
    $27 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26, $1, $2) | 0;
    if (($27 | 0) == ($26 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $31 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($31 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($31 + -24 | 0, 0, 49570) | 0;
    $$11 = $27;
    label = 60;
    break L1;
    break;
   }
  case 73:
   {
    $34 = $0 + 2 | 0;
    $35 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($34, $1, $2) | 0;
    if (($35 | 0) == ($34 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $39 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($39 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($39 + -24 | 0, 0, 49579) | 0;
    $$11 = $35;
    label = 60;
    break L1;
    break;
   }
  case 83:
   {
    $42 = $0 + 2 | 0;
    $43 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($42, $1, $2) | 0;
    if (($43 | 0) == ($42 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $47 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($47 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($47 + -24 | 0, 0, 49593) | 0;
    $$11 = $43;
    label = 60;
    break L1;
    break;
   }
  case 99:
   {
    $50 = $0 + 2 | 0;
    $51 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($50, $1) | 0;
    if (($51 | 0) == ($50 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $53 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($51, $1) | 0;
    if (($53 | 0) == ($51 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $55 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($53, $1, $2) | 0;
    if (($55 | 0) == ($53 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $59 = HEAP32[$2 + 4 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($59 | 0)) {
     $$8 = $0;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($59 + -24 | 0, 0, 49612) | 0;
    $$11 = $55;
    label = 60;
    break L1;
    break;
   }
  case 67:
   {
    $62 = $0 + 2 | 0;
    $63 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($62, $1, $2) | 0;
    if (($63 | 0) == ($62 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $65 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($63, $1) | 0;
    if (($65 | 0) == ($63 | 0) | ($65 | 0) == ($1 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    if ((HEAP8[$65 >> 0] | 0) != 95) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $70 = $65 + 1 | 0;
    $71 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($70, $1, $2) | 0;
    if (($71 | 0) == ($70 | 0)) {
     $$11 = $0;
     label = 60;
     break L1;
    }
    $73 = $2 + 4 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    if ((($74 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$8 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $74 + -24 | 0);
    $81 = HEAP32[$73 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($81 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$73 >> 2] = $81 + -24;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($4, 0, 49639) | 0;
    HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i161 = 0;
    while (1) {
     if (($$0$i$i$i161 | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i161 << 2) >> 2] = 0;
     $$0$i$i$i161 = $$0$i$i$i161 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 49664) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i158 = 0;
    while (1) {
     if (($$0$i$i$i158 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i158 << 2) >> 2] = 0;
     $$0$i$i$i158 = $$0$i$i$i158 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, (HEAP32[$73 >> 2] | 0) + -24 | 0);
    $93 = HEAP8[$8 + 11 >> 0] | 0;
    $94 = $93 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($6, $94 ? HEAP32[$8 >> 2] | 0 : $8, $94 ? HEAP32[$8 + 4 >> 2] | 0 : $93 & 255) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    $104 = HEAP32[$73 >> 2] | 0;
    $105 = $104 + -24 | 0;
    $106 = $105 + 11 | 0;
    if ((HEAP8[$106 >> 0] | 0) < 0) {
     $109 = HEAP32[$105 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($109, $3);
     HEAP32[$104 + -20 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($105, $3);
     HEAP8[$106 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($105);
    HEAP32[$105 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$105 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$105 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    $$11 = $71;
    label = 60;
    break L1;
    break;
   }
  default:
   {
    $113 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($15, $1) | 0;
    do if (($113 | 0) == ($15 | 0)) {
     $$4156 = 3;
     $$8151 = $0;
    } else {
     $115 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($113, $1, $2) | 0;
     if (($115 | 0) == ($113 | 0)) {
      $$4156 = 0;
      $$8151 = $0;
     } else {
      $119 = HEAP32[$2 + 4 >> 2] | 0;
      if ((HEAP32[$2 >> 2] | 0) == ($119 | 0)) {
       $$4156 = 1;
       $$8151 = $0;
      } else {
       $124 = $119 + -24 | 0;
       if ((HEAP8[$0 + 2 >> 0] | 0) == 118) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($124, 0, 49669) | 0;
        $$4156 = 0;
        $$8151 = $115;
        break;
       } else {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($124, 0, 49687) | 0;
        $$4156 = 0;
        $$8151 = $115;
        break;
       }
      }
     }
    } while (0);
    switch ($$4156 & 3) {
    case 3:
    case 0:
     {
      $$11 = $$8151;
      label = 60;
      break L1;
      break;
     }
    default:
     {}
    }
    if (!$$4156) {
     $$11 = $$8151;
     label = 60;
     break L1;
    } else {
     $$8 = $0;
     break L1;
    }
   }
  }
 } else {
  $$11 = $0;
  label = 60;
 } while (0);
 if ((label | 0) == 60) $$8 = $$11;
 STACKTOP = sp;
 return $$8 | 0;
}

function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $104 = 0, $112 = 0, $128 = 0, $130 = 0, $131 = 0, $135 = 0, $136 = 0, $144 = 0, $145 = 0, $150 = 0, $151 = 0, $154 = 0, $156 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $167 = 0, $175 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $199 = 0, $20 = 0, $200 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $235 = 0, $243 = 0, $251 = 0, $265 = 0, $267 = 0, $277 = 0, $28 = 0, $286 = 0, $289 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, $spec$select166 = 0, label = 0;
 L1 : do if ($1 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $291 = 0;
  $292 = 0;
 } else {
  $7 = $0 + 4 | 0;
  $8 = $0 + 104 | 0;
  do {
   $9 = HEAP32[$7 >> 2] | 0;
   if ($9 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $9 + 1;
    $16 = HEAPU8[$9 >> 0] | 0;
   } else $16 = ___shgetc($0) | 0;
  } while ((_isspace($16) | 0) != 0);
  L11 : do switch ($16 | 0) {
  case 43:
  case 45:
   {
    $20 = (($16 | 0) == 45) << 31 >> 31;
    $21 = HEAP32[$7 >> 2] | 0;
    if ($21 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $21 + 1;
     $$0157 = $20;
     $$0159 = HEAPU8[$21 >> 0] | 0;
     break L11;
    } else {
     $$0157 = $20;
     $$0159 = ___shgetc($0) | 0;
     break L11;
    }
    break;
   }
  default:
   {
    $$0157 = 0;
    $$0159 = $16;
   }
  } while (0);
  $28 = ($1 | 0) == 0;
  do if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
   $32 = HEAP32[$7 >> 2] | 0;
   if ($32 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $32 + 1;
    $40 = HEAPU8[$32 >> 0] | 0;
   } else $40 = ___shgetc($0) | 0;
   if (($40 | 32 | 0) != 120) if ($28) {
    $$1160170 = $40;
    $$1165168 = 8;
    label = 47;
    break;
   } else {
    $$1160 = $40;
    $$1165 = $1;
    label = 32;
    break;
   }
   $42 = HEAP32[$7 >> 2] | 0;
   if ($42 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $42 + 1;
    $50 = HEAPU8[$42 >> 0] | 0;
   } else $50 = ___shgetc($0) | 0;
   if ((HEAPU8[9905 + $50 >> 0] | 0) > 15) {
    $54 = (HEAP32[$8 >> 2] | 0) == 0;
    if (!$54) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    if (!$2) {
     ___shlim($0, 0, 0);
     $291 = 0;
     $292 = 0;
     break L1;
    }
    if ($54) {
     $291 = 0;
     $292 = 0;
     break L1;
    }
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    $291 = 0;
    $292 = 0;
    break L1;
   } else {
    $$1160170 = $50;
    $$1165168 = 16;
    label = 47;
   }
  } else {
   $spec$select166 = $28 ? 10 : $1;
   if ($spec$select166 >>> 0 > (HEAPU8[9905 + $$0159 >> 0] | 0) >>> 0) {
    $$1160 = $$0159;
    $$1165 = $spec$select166;
    label = 32;
   } else {
    if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    ___shlim($0, 0, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    $291 = 0;
    $292 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($$1165 | 0) == 10) {
   $70 = $$1160 + -48 | 0;
   if ($70 >>> 0 < 10) {
    $$0154215 = 0;
    $74 = $70;
    do {
     $$0154215 = ($$0154215 * 10 | 0) + $74 | 0;
     $75 = HEAP32[$7 >> 2] | 0;
     if ($75 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $75 + 1;
      $83 = HEAPU8[$75 >> 0] | 0;
     } else $83 = ___shgetc($0) | 0;
     $74 = $83 + -48 | 0;
    } while ($74 >>> 0 < 10 & $$0154215 >>> 0 < 429496729);
    if ($74 >>> 0 < 10) {
     $$3162208 = $83;
     $88 = $$0154215;
     $89 = 0;
     $93 = $74;
     while (1) {
      $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0;
      $91 = getTempRet0() | 0;
      $94 = (($93 | 0) < 0) << 31 >> 31;
      $96 = ~$94;
      if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
       $$1165169 = 10;
       $$8 = $$3162208;
       $293 = $88;
       $294 = $89;
       label = 76;
       break L43;
      }
      $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0;
      $89 = getTempRet0() | 0;
      $104 = HEAP32[$7 >> 2] | 0;
      if ($104 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
       HEAP32[$7 >> 2] = $104 + 1;
       $112 = HEAPU8[$104 >> 0] | 0;
      } else $112 = ___shgetc($0) | 0;
      $93 = $112 + -48 | 0;
      if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) break; else $$3162208 = $112;
     }
     if ($93 >>> 0 > 9) {
      $$1158 = $$0157;
      $265 = $89;
      $267 = $88;
     } else {
      $$1165169 = 10;
      $$8 = $112;
      $293 = $88;
      $294 = $89;
      label = 76;
     }
    } else {
     $$1158 = $$0157;
     $265 = 0;
     $267 = $$0154215;
    }
   } else {
    $$1158 = $$0157;
    $265 = 0;
    $267 = 0;
   }
  } else {
   $$1160170 = $$1160;
   $$1165168 = $$1165;
   label = 47;
  } while (0);
  L63 : do if ((label | 0) == 47) {
   if (!($$1165168 + -1 & $$1165168)) {
    $128 = HEAP8[46990 + (($$1165168 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $130 = HEAP8[9905 + $$1160170 >> 0] | 0;
    $131 = $130 & 255;
    if ($$1165168 >>> 0 > $131 >>> 0) {
     $$1155184 = 0;
     $135 = $131;
     do {
      $$1155184 = $135 | $$1155184 << $128;
      $136 = HEAP32[$7 >> 2] | 0;
      if ($136 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
       HEAP32[$7 >> 2] = $136 + 1;
       $144 = HEAPU8[$136 >> 0] | 0;
      } else $144 = ___shgetc($0) | 0;
      $145 = HEAP8[9905 + $144 >> 0] | 0;
      $135 = $145 & 255;
     } while ($$1155184 >>> 0 < 134217728 & $$1165168 >>> 0 > $135 >>> 0);
     $$4163$lcssa = $144;
     $$pre$phi237Z2D = $135;
     $154 = 0;
     $156 = $$1155184;
     $295 = $145;
    } else {
     $$4163$lcssa = $$1160170;
     $$pre$phi237Z2D = $131;
     $154 = 0;
     $156 = 0;
     $295 = $130;
    }
    $150 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
    $151 = getTempRet0() | 0;
    if ($$1165168 >>> 0 <= $$pre$phi237Z2D >>> 0 | ($151 >>> 0 < $154 >>> 0 | ($151 | 0) == ($154 | 0) & $150 >>> 0 < $156 >>> 0)) {
     $$1165169 = $$1165168;
     $$8 = $$4163$lcssa;
     $293 = $156;
     $294 = $154;
     label = 76;
     break;
    }
    $160 = $156;
    $161 = $154;
    $165 = $295;
    while (1) {
     $162 = _bitshift64Shl($160 | 0, $161 | 0, $128 | 0) | 0;
     $163 = getTempRet0() | 0;
     $166 = $162 | $165 & 255;
     $167 = HEAP32[$7 >> 2] | 0;
     if ($167 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $167 + 1;
      $175 = HEAPU8[$167 >> 0] | 0;
     } else $175 = ___shgetc($0) | 0;
     $165 = HEAP8[9905 + $175 >> 0] | 0;
     if ($$1165168 >>> 0 <= ($165 & 255) >>> 0 | ($163 >>> 0 > $151 >>> 0 | ($163 | 0) == ($151 | 0) & $166 >>> 0 > $150 >>> 0)) {
      $$1165169 = $$1165168;
      $$8 = $175;
      $293 = $166;
      $294 = $163;
      label = 76;
      break L63;
     } else {
      $160 = $166;
      $161 = $163;
     }
    }
   }
   $185 = HEAP8[9905 + $$1160170 >> 0] | 0;
   $186 = $185 & 255;
   if ($$1165168 >>> 0 > $186 >>> 0) {
    $$2156202 = 0;
    $190 = $186;
    do {
     $$2156202 = $190 + (Math_imul($$2156202, $$1165168) | 0) | 0;
     $191 = HEAP32[$7 >> 2] | 0;
     if ($191 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $191 + 1;
      $199 = HEAPU8[$191 >> 0] | 0;
     } else $199 = ___shgetc($0) | 0;
     $200 = HEAP8[9905 + $199 >> 0] | 0;
     $190 = $200 & 255;
    } while ($$2156202 >>> 0 < 119304647 & $$1165168 >>> 0 > $190 >>> 0);
    $$6$lcssa = $199;
    $$pre$phi239Z2D = $190;
    $296 = $200;
    $297 = $$2156202;
    $298 = 0;
   } else {
    $$6$lcssa = $$1160170;
    $$pre$phi239Z2D = $186;
    $296 = $185;
    $297 = 0;
    $298 = 0;
   }
   if ($$1165168 >>> 0 > $$pre$phi239Z2D >>> 0) {
    $206 = ___udivdi3(-1, -1, $$1165168 | 0, 0) | 0;
    $207 = getTempRet0() | 0;
    $$7190 = $$6$lcssa;
    $209 = $298;
    $211 = $297;
    $218 = $296;
    while (1) {
     if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $$7190;
      $293 = $211;
      $294 = $209;
      label = 76;
      break L63;
     }
     $215 = ___muldi3($211 | 0, $209 | 0, $$1165168 | 0, 0) | 0;
     $216 = getTempRet0() | 0;
     $217 = $218 & 255;
     if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $$7190;
      $293 = $211;
      $294 = $209;
      label = 76;
      break L63;
     }
     $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0;
     $226 = getTempRet0() | 0;
     $227 = HEAP32[$7 >> 2] | 0;
     if ($227 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $227 + 1;
      $235 = HEAPU8[$227 >> 0] | 0;
     } else $235 = ___shgetc($0) | 0;
     $218 = HEAP8[9905 + $235 >> 0] | 0;
     if ($$1165168 >>> 0 <= ($218 & 255) >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $235;
      $293 = $225;
      $294 = $226;
      label = 76;
      break;
     } else {
      $$7190 = $235;
      $209 = $226;
      $211 = $225;
     }
    }
   } else {
    $$1165169 = $$1165168;
    $$8 = $$6$lcssa;
    $293 = $297;
    $294 = $298;
    label = 76;
   }
  } while (0);
  if ((label | 0) == 76) if ($$1165169 >>> 0 > (HEAPU8[9905 + $$8 >> 0] | 0) >>> 0) {
   do {
    $243 = HEAP32[$7 >> 2] | 0;
    if ($243 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $243 + 1;
     $251 = HEAPU8[$243 >> 0] | 0;
    } else $251 = ___shgetc($0) | 0;
   } while ($$1165169 >>> 0 > (HEAPU8[9905 + $251 >> 0] | 0) >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0;
   $265 = $4;
   $267 = $3;
  } else {
   $$1158 = $$0157;
   $265 = $294;
   $267 = $293;
  }
  if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  if (!($265 >>> 0 < $4 >>> 0 | ($265 | 0) == ($4 | 0) & $267 >>> 0 < $3 >>> 0)) {
   if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $277 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0;
    $291 = getTempRet0() | 0;
    $292 = $277;
    break;
   }
   if ($265 >>> 0 > $4 >>> 0 | ($265 | 0) == ($4 | 0) & $267 >>> 0 > $3 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $291 = $4;
    $292 = $3;
    break;
   }
  }
  $286 = (($$1158 | 0) < 0) << 31 >> 31;
  $289 = _i64Subtract($267 ^ $$1158 | 0, $265 ^ $286 | 0, $$1158 | 0, $286 | 0) | 0;
  $291 = getTempRet0() | 0;
  $292 = $289;
 } while (0);
 setTempRet0($291 | 0);
 return $292 | 0;
}

function _stbi__gif_load_next($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $127 = 0, $13 = 0, $131 = 0, $14 = 0, $15 = 0, $151 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $208 = 0, $21 = 0, $22 = 0, $225 = 0, $244 = 0, $266 = 0, $276 = 0, $307 = 0, $322 = 0, $366 = 0, $372 = 0, $386 = 0, $388 = 0, $393 = 0, $40 = 0, $412 = 0, $414 = 0, $433 = 0, $439 = 0, $443 = 0, $5 = 0, $52 = 0, $57 = 0, $6 = 0, $61 = 0, $7 = 0, $77 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $5 = sp + 68 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 60 | 0;
 $8 = sp + 56 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 44 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 36 | 0;
 $14 = sp + 32 | 0;
 $15 = sp + 28 | 0;
 $16 = sp + 24 | 0;
 $17 = sp + 20 | 0;
 $18 = sp + 16 | 0;
 $19 = sp + 12 | 0;
 $20 = sp + 8 | 0;
 $21 = sp + 4 | 0;
 $22 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[sp + 52 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$12 >> 2] = 0;
 do if (!(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0)) {
  if (!(_stbi__gif_header(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, 0) | 0)) {
   HEAP32[$5 >> 2] = 0;
   $443 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $443 | 0;
  }
  if (!(_stbi__mad3sizes_valid(4, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0, 0) | 0)) {
   $40 = (_stbi__err(43529) | 0) != 0;
   HEAP32[$5 >> 2] = $40 ? 0 : 0;
   $443 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $443 | 0;
  }
  HEAP32[$14 >> 2] = Math_imul(HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0;
  $52 = _stbi__malloc(HEAP32[$14 >> 2] << 2) | 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] = $52;
  $57 = _stbi__malloc(HEAP32[$14 >> 2] << 2) | 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] = $57;
  $61 = _stbi__malloc(HEAP32[$14 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] = $61;
  if (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) if (HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0) if (HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0) {
   _memset(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0, 0, HEAP32[$14 >> 2] << 2 | 0) | 0;
   _memset(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, 0, HEAP32[$14 >> 2] << 2 | 0) | 0;
   _memset(HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0, 0, HEAP32[$14 >> 2] | 0) | 0;
   HEAP32[$12 >> 2] = 1;
   break;
  }
  $77 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$5 >> 2] = $77 ? 0 : 0;
  $443 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $443 | 0;
 } else {
  HEAP32[$11 >> 2] = (HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 28) >> 2;
  HEAP32[$14 >> 2] = Math_imul(HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0;
  if ((HEAP32[$11 >> 2] | 0) == 3 & (HEAP32[$10 >> 2] | 0) == 0) HEAP32[$11 >> 2] = 2;
  L21 : do if ((HEAP32[$11 >> 2] | 0) == 3) {
   HEAP32[$13 >> 2] = 0;
   while (1) {
    if ((HEAP32[$13 >> 2] | 0) >= (HEAP32[$14 >> 2] | 0)) break L21;
    if (HEAP8[(HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) >> 0] | 0) {
     $127 = (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$13 >> 2] << 2) | 0;
     $131 = (HEAP32[$10 >> 2] | 0) + (HEAP32[$13 >> 2] << 2) | 0;
     HEAP8[$127 >> 0] = HEAP8[$131 >> 0] | 0;
     HEAP8[$127 + 1 >> 0] = HEAP8[$131 + 1 >> 0] | 0;
     HEAP8[$127 + 2 >> 0] = HEAP8[$131 + 2 >> 0] | 0;
     HEAP8[$127 + 3 >> 0] = HEAP8[$131 + 3 >> 0] | 0;
    }
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
   }
  } else if ((HEAP32[$11 >> 2] | 0) == 2) {
   HEAP32[$13 >> 2] = 0;
   while (1) {
    if ((HEAP32[$13 >> 2] | 0) >= (HEAP32[$14 >> 2] | 0)) break L21;
    if (HEAP8[(HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) >> 0] | 0) {
     $151 = (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$13 >> 2] << 2) | 0;
     $157 = (HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$13 >> 2] << 2) | 0;
     HEAP8[$151 >> 0] = HEAP8[$157 >> 0] | 0;
     HEAP8[$151 + 1 >> 0] = HEAP8[$157 + 1 >> 0] | 0;
     HEAP8[$151 + 2 >> 0] = HEAP8[$157 + 2 >> 0] | 0;
     HEAP8[$151 + 3 >> 0] = HEAP8[$157 + 3 >> 0] | 0;
    }
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
   }
  } while (0);
  _memcpy(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0, Math_imul(HEAP32[HEAP32[$7 >> 2] >> 2] << 2, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
 } while (0);
 _memset(HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0, 0, Math_imul(HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
 L39 : while (1) {
  HEAP32[$15 >> 2] = (_stbi__get8(HEAP32[$6 >> 2] | 0) | 0) & 255;
  switch (HEAP32[$15 >> 2] | 0) {
  case 44:
   {
    label = 28;
    break L39;
    break;
   }
  case 59:
   {
    label = 65;
    break L39;
    break;
   }
  case 33:
   break;
  default:
   {
    label = 66;
    break L39;
   }
  }
  HEAP32[$22 >> 2] = (_stbi__get8(HEAP32[$6 >> 2] | 0) | 0) & 255;
  do if ((HEAP32[$22 >> 2] | 0) == 249) {
   HEAP32[$21 >> 2] = (_stbi__get8(HEAP32[$6 >> 2] | 0) | 0) & 255;
   $386 = HEAP32[$6 >> 2] | 0;
   if ((HEAP32[$21 >> 2] | 0) != 4) {
    _stbi__skip($386, HEAP32[$21 >> 2] | 0);
    break;
   }
   $388 = (_stbi__get8($386) | 0) & 255;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] = $388;
   $393 = (_stbi__get16le(HEAP32[$6 >> 2] | 0) | 0) * 10 | 0;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 34900 >> 2] = $393;
   if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] | 0) >= 0) HEAP8[(HEAP32[$7 >> 2] | 0) + 40 + (HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] << 2) + 3 >> 0] = -1;
   $412 = HEAP32[$6 >> 2] | 0;
   if (!(HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 1)) {
    _stbi__skip($412, 1);
    HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] = -1;
    label = 62;
    break;
   }
   $414 = (_stbi__get8($412) | 0) & 255;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] = $414;
   if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] | 0) >= 0) {
    HEAP8[(HEAP32[$7 >> 2] | 0) + 40 + (HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] << 2) + 3 >> 0] = 0;
    label = 62;
   } else label = 62;
  } else label = 62; while (0);
  L54 : do if ((label | 0) == 62) {
   label = 0;
   while (1) {
    $433 = (_stbi__get8(HEAP32[$6 >> 2] | 0) | 0) & 255;
    HEAP32[$21 >> 2] = $433;
    if (!$433) break L54;
    _stbi__skip(HEAP32[$6 >> 2] | 0, HEAP32[$21 >> 2] | 0);
   }
  } while (0);
 }
 if ((label | 0) == 28) {
  HEAP32[$16 >> 2] = _stbi__get16le(HEAP32[$6 >> 2] | 0) | 0;
  HEAP32[$17 >> 2] = _stbi__get16le(HEAP32[$6 >> 2] | 0) | 0;
  HEAP32[$18 >> 2] = _stbi__get16le(HEAP32[$6 >> 2] | 0) | 0;
  HEAP32[$19 >> 2] = _stbi__get16le(HEAP32[$6 >> 2] | 0) | 0;
  if (((HEAP32[$16 >> 2] | 0) + (HEAP32[$18 >> 2] | 0) | 0) <= (HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) if (((HEAP32[$17 >> 2] | 0) + (HEAP32[$19 >> 2] | 0) | 0) <= (HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0)) {
   HEAP32[(HEAP32[$7 >> 2] | 0) + 34896 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2] << 2;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 34872 >> 2] = HEAP32[$16 >> 2] << 2;
   $225 = Math_imul(HEAP32[$17 >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 34896 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 34876 >> 2] = $225;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 34880 >> 2] = (HEAP32[(HEAP32[$7 >> 2] | 0) + 34872 >> 2] | 0) + (HEAP32[$18 >> 2] << 2);
   $244 = (HEAP32[(HEAP32[$7 >> 2] | 0) + 34876 >> 2] | 0) + (Math_imul(HEAP32[$19 >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 34896 >> 2] | 0) | 0) | 0;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 34884 >> 2] = $244;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 34888 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 34872 >> 2];
   HEAP32[(HEAP32[$7 >> 2] | 0) + 34892 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 34876 >> 2];
   if (!(HEAP32[$18 >> 2] | 0)) HEAP32[(HEAP32[$7 >> 2] | 0) + 34892 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 34884 >> 2];
   $266 = (_stbi__get8(HEAP32[$6 >> 2] | 0) | 0) & 255;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 34868 >> 2] = $266;
   $276 = HEAP32[(HEAP32[$7 >> 2] | 0) + 34896 >> 2] | 0;
   if (HEAP32[(HEAP32[$7 >> 2] | 0) + 34868 >> 2] & 64 | 0) {
    HEAP32[(HEAP32[$7 >> 2] | 0) + 34864 >> 2] = $276 << 3;
    HEAP32[(HEAP32[$7 >> 2] | 0) + 34860 >> 2] = 3;
   } else {
    HEAP32[(HEAP32[$7 >> 2] | 0) + 34864 >> 2] = $276;
    HEAP32[(HEAP32[$7 >> 2] | 0) + 34860 >> 2] = 0;
   }
   do if (HEAP32[(HEAP32[$7 >> 2] | 0) + 34868 >> 2] & 128 | 0) {
    if (HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 1 | 0) $307 = HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] | 0; else $307 = -1;
    _stbi__gif_parse_colortable(HEAP32[$6 >> 2] | 0, (HEAP32[$7 >> 2] | 0) + 1064 | 0, 2 << (HEAP32[(HEAP32[$7 >> 2] | 0) + 34868 >> 2] & 7), $307);
    HEAP32[(HEAP32[$7 >> 2] | 0) + 34856 >> 2] = (HEAP32[$7 >> 2] | 0) + 1064;
   } else {
    if (HEAP32[(HEAP32[$7 >> 2] | 0) + 20 >> 2] & 128 | 0) {
     HEAP32[(HEAP32[$7 >> 2] | 0) + 34856 >> 2] = (HEAP32[$7 >> 2] | 0) + 40;
     break;
    }
    $322 = (_stbi__err(43979) | 0) != 0;
    HEAP32[$5 >> 2] = $322 ? 0 : 0;
    $443 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $443 | 0;
   } while (0);
   HEAP32[$20 >> 2] = _stbi__process_gif_raster(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
   if (!(HEAP32[$20 >> 2] | 0)) {
    HEAP32[$5 >> 2] = 0;
    $443 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $443 | 0;
   }
   HEAP32[$14 >> 2] = Math_imul(HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0;
   L89 : do if (HEAP32[$12 >> 2] | 0) if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0) > 0) {
    HEAP32[$13 >> 2] = 0;
    while (1) {
     if ((HEAP32[$13 >> 2] | 0) >= (HEAP32[$14 >> 2] | 0)) break L89;
     if (!(HEAPU8[(HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) >> 0] | 0)) {
      HEAP8[(HEAP32[$7 >> 2] | 0) + 40 + (HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] << 2) + 3 >> 0] = -1;
      $366 = (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$13 >> 2] << 2) | 0;
      $372 = (HEAP32[$7 >> 2] | 0) + 40 + (HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] << 2) | 0;
      HEAP8[$366 >> 0] = HEAP8[$372 >> 0] | 0;
      HEAP8[$366 + 1 >> 0] = HEAP8[$372 + 1 >> 0] | 0;
      HEAP8[$366 + 2 >> 0] = HEAP8[$372 + 2 >> 0] | 0;
      HEAP8[$366 + 3 >> 0] = HEAP8[$372 + 3 >> 0] | 0;
     }
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[$5 >> 2] = HEAP32[$20 >> 2];
   $443 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $443 | 0;
  }
  $208 = (_stbi__err(43958) | 0) != 0;
  HEAP32[$5 >> 2] = $208 ? 0 : 0;
  $443 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $443 | 0;
 } else if ((label | 0) == 65) {
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  $443 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $443 | 0;
 } else if ((label | 0) == 66) {
  $439 = (_stbi__err(43999) | 0) != 0;
  HEAP32[$5 >> 2] = $439 ? 0 : 0;
  $443 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $443 | 0;
 }
 return 0;
}

function _stbi__tga_load($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $114 = 0, $125 = 0, $13 = 0, $14 = 0, $147 = 0, $15 = 0, $151 = 0, $16 = 0, $17 = 0, $173 = 0, $18 = 0, $19 = 0, $20 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $231 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $264 = 0, $27 = 0, $278 = 0, $28 = 0, $29 = 0, $296 = 0, $30 = 0, $304 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $374 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $6 = sp + 144 | 0;
 $7 = sp + 140 | 0;
 $8 = sp + 136 | 0;
 $9 = sp + 132 | 0;
 $10 = sp + 128 | 0;
 $11 = sp + 124 | 0;
 $13 = sp + 116 | 0;
 $14 = sp + 112 | 0;
 $15 = sp + 108 | 0;
 $16 = sp + 104 | 0;
 $17 = sp + 100 | 0;
 $18 = sp + 96 | 0;
 $19 = sp + 92 | 0;
 $20 = sp + 88 | 0;
 $21 = sp + 84 | 0;
 $22 = sp + 80 | 0;
 $23 = sp + 76 | 0;
 $24 = sp + 72 | 0;
 $25 = sp + 68 | 0;
 $26 = sp + 64 | 0;
 $27 = sp + 60 | 0;
 $28 = sp + 56 | 0;
 $29 = sp + 52 | 0;
 $30 = sp + 48 | 0;
 $31 = sp + 44 | 0;
 $32 = sp + 152 | 0;
 $33 = sp + 40 | 0;
 $34 = sp + 36 | 0;
 $35 = sp + 32 | 0;
 $36 = sp + 28 | 0;
 $37 = sp + 24 | 0;
 $38 = sp + 20 | 0;
 $39 = sp + 16 | 0;
 $40 = sp + 12 | 0;
 $41 = sp + 8 | 0;
 $42 = sp + 4 | 0;
 $43 = sp + 149 | 0;
 $44 = sp;
 $45 = sp + 148 | 0;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[sp + 120 >> 2] = $5;
 HEAP32[$13 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
 HEAP32[$14 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
 HEAP32[$15 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$17 >> 2] = _stbi__get16le(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$18 >> 2] = _stbi__get16le(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$19 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
 HEAP32[$20 >> 2] = _stbi__get16le(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$21 >> 2] = _stbi__get16le(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$22 >> 2] = _stbi__get16le(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$23 >> 2] = _stbi__get16le(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$24 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
 HEAP32[$26 >> 2] = 0;
 HEAP32[$27 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
 HEAP32[$29 >> 2] = 0;
 HEAP8[$32 >> 0] = 0;
 HEAP8[$32 + 1 >> 0] = 0;
 HEAP8[$32 + 2 >> 0] = 0;
 HEAP8[$32 + 3 >> 0] = 0;
 HEAP32[$33 >> 2] = 0;
 HEAP32[$34 >> 2] = 0;
 HEAP32[$35 >> 2] = 1;
 if ((HEAP32[$15 >> 2] | 0) >= 8) {
  HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - 8;
  HEAP32[$16 >> 2] = 1;
 }
 HEAP32[$27 >> 2] = 1 - (HEAP32[$27 >> 2] >> 5 & 1);
 if (HEAP32[$14 >> 2] | 0) HEAP32[$25 >> 2] = _stbi__tga_get_comp(HEAP32[$19 >> 2] | 0, 0, $26) | 0; else HEAP32[$25 >> 2] = _stbi__tga_get_comp(HEAP32[$24 >> 2] | 0, (HEAP32[$15 >> 2] | 0) == 3 & 1, $26) | 0;
 if (!(HEAP32[$25 >> 2] | 0)) {
  $96 = (_stbi__err(43518) | 0) != 0;
  HEAP32[$6 >> 2] = $96 ? 0 : 0;
  $374 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $374 | 0;
 }
 HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[$22 >> 2];
 HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$23 >> 2];
 if (HEAP32[$10 >> 2] | 0) HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[$25 >> 2];
 if (!(_stbi__mad3sizes_valid(HEAP32[$22 >> 2] | 0, HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0, 0) | 0)) {
  $114 = (_stbi__err(43529) | 0) != 0;
  HEAP32[$6 >> 2] = $114 ? 0 : 0;
  $374 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $374 | 0;
 }
 HEAP32[$28 >> 2] = _stbi__malloc_mad3(HEAP32[$22 >> 2] | 0, HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0, 0) | 0;
 if (!(HEAP32[$28 >> 2] | 0)) {
  $125 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$6 >> 2] = $125 ? 0 : 0;
  $374 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $374 | 0;
 }
 _stbi__skip(HEAP32[$7 >> 2] | 0, HEAP32[$13 >> 2] | 0);
 L23 : do if ((HEAP32[$14 >> 2] | 0) != 0 | (HEAP32[$16 >> 2] | 0) != 0 | (HEAP32[$26 >> 2] | 0) != 0) {
  L25 : do if (HEAP32[$14 >> 2] | 0) {
   _stbi__skip(HEAP32[$7 >> 2] | 0, HEAP32[$17 >> 2] | 0);
   HEAP32[$29 >> 2] = _stbi__malloc_mad2(HEAP32[$18 >> 2] | 0, HEAP32[$25 >> 2] | 0, 0) | 0;
   if (!(HEAP32[$29 >> 2] | 0)) {
    _free(HEAP32[$28 >> 2] | 0);
    $173 = (_stbi__err(43490) | 0) != 0;
    HEAP32[$6 >> 2] = $173 ? 0 : 0;
    $374 = HEAP32[$6 >> 2] | 0;
    STACKTOP = sp;
    return $374 | 0;
   }
   if (!(HEAP32[$26 >> 2] | 0)) {
    if (_stbi__getn(HEAP32[$7 >> 2] | 0, HEAP32[$29 >> 2] | 0, Math_imul(HEAP32[$18 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0) break;
    _free(HEAP32[$28 >> 2] | 0);
    _free(HEAP32[$29 >> 2] | 0);
    $202 = (_stbi__err(43575) | 0) != 0;
    HEAP32[$6 >> 2] = $202 ? 0 : 0;
    $374 = HEAP32[$6 >> 2] | 0;
    STACKTOP = sp;
    return $374 | 0;
   }
   HEAP32[$38 >> 2] = HEAP32[$29 >> 2];
   if ((HEAP32[$25 >> 2] | 0) != 3) ___assert_fail(43539, 43392, 5600, 43560);
   HEAP32[$30 >> 2] = 0;
   while (1) {
    if ((HEAP32[$30 >> 2] | 0) >= (HEAP32[$18 >> 2] | 0)) break L25;
    _stbi__tga_read_rgb16(HEAP32[$7 >> 2] | 0, HEAP32[$38 >> 2] | 0);
    HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$30 >> 2] = 0;
  L43 : while (1) {
   if ((HEAP32[$30 >> 2] | 0) >= (Math_imul(HEAP32[$22 >> 2] | 0, HEAP32[$23 >> 2] | 0) | 0)) break;
   do if (HEAP32[$16 >> 2] | 0) {
    if (!(HEAP32[$33 >> 2] | 0)) {
     HEAP32[$39 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
     HEAP32[$33 >> 2] = 1 + (HEAP32[$39 >> 2] & 127);
     HEAP32[$34 >> 2] = HEAP32[$39 >> 2] >> 7;
     HEAP32[$35 >> 2] = 1;
     break;
    }
    if (!(HEAP32[$34 >> 2] | 0)) HEAP32[$35 >> 2] = 1;
   } else HEAP32[$35 >> 2] = 1; while (0);
   if (HEAP32[$35 >> 2] | 0) {
    L56 : do if (HEAP32[$14 >> 2] | 0) {
     $231 = HEAP32[$7 >> 2] | 0;
     if ((HEAP32[$24 >> 2] | 0) == 8) $235 = (_stbi__get8($231) | 0) & 255; else $235 = _stbi__get16le($231) | 0;
     HEAP32[$40 >> 2] = $235;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) >= (HEAP32[$18 >> 2] | 0) ? 0 : $235;
     HEAP32[$40 >> 2] = Math_imul(HEAP32[$40 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0;
     HEAP32[$31 >> 2] = 0;
     while (1) {
      if ((HEAP32[$31 >> 2] | 0) >= (HEAP32[$25 >> 2] | 0)) break L56;
      HEAP8[$32 + (HEAP32[$31 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$29 >> 2] | 0) + ((HEAP32[$40 >> 2] | 0) + (HEAP32[$31 >> 2] | 0)) >> 0] | 0;
      HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
     }
    } else {
     if (HEAP32[$26 >> 2] | 0) {
      if ((HEAP32[$25 >> 2] | 0) != 3) {
       label = 50;
       break L43;
      }
      _stbi__tga_read_rgb16(HEAP32[$7 >> 2] | 0, $32);
      break;
     }
     HEAP32[$31 >> 2] = 0;
     while (1) {
      if ((HEAP32[$31 >> 2] | 0) >= (HEAP32[$25 >> 2] | 0)) break L56;
      $264 = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
      HEAP8[$32 + (HEAP32[$31 >> 2] | 0) >> 0] = $264;
      HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
     }
    } while (0);
    HEAP32[$35 >> 2] = 0;
   }
   HEAP32[$31 >> 2] = 0;
   while (1) {
    if ((HEAP32[$31 >> 2] | 0) >= (HEAP32[$25 >> 2] | 0)) break;
    $278 = Math_imul(HEAP32[$30 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0;
    HEAP8[(HEAP32[$28 >> 2] | 0) + ($278 + (HEAP32[$31 >> 2] | 0)) >> 0] = HEAP8[$32 + (HEAP32[$31 >> 2] | 0) >> 0] | 0;
    HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
   }
   HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + -1;
   HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
  }
  if ((label | 0) == 50) ___assert_fail(43539, 43392, 5649, 43560);
  L82 : do if (HEAP32[$27 >> 2] | 0) {
   HEAP32[$31 >> 2] = 0;
   while (1) {
    if ((HEAP32[$31 >> 2] << 1 | 0) >= (HEAP32[$23 >> 2] | 0)) break L82;
    $296 = Math_imul(HEAP32[$31 >> 2] | 0, HEAP32[$22 >> 2] | 0) | 0;
    HEAP32[$41 >> 2] = Math_imul($296, HEAP32[$25 >> 2] | 0) | 0;
    $304 = Math_imul((HEAP32[$23 >> 2] | 0) - 1 - (HEAP32[$31 >> 2] | 0) | 0, HEAP32[$22 >> 2] | 0) | 0;
    HEAP32[$42 >> 2] = Math_imul($304, HEAP32[$25 >> 2] | 0) | 0;
    HEAP32[$30 >> 2] = Math_imul(HEAP32[$22 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0;
    while (1) {
     if ((HEAP32[$30 >> 2] | 0) <= 0) break;
     HEAP8[$43 >> 0] = HEAP8[(HEAP32[$28 >> 2] | 0) + (HEAP32[$41 >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$28 >> 2] | 0) + (HEAP32[$41 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$28 >> 2] | 0) + (HEAP32[$42 >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$28 >> 2] | 0) + (HEAP32[$42 >> 2] | 0) >> 0] = HEAP8[$43 >> 0] | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
     HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + -1;
    }
    HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
   }
  } while (0);
  if (HEAP32[$29 >> 2] | 0) _free(HEAP32[$29 >> 2] | 0);
 } else {
  HEAP32[$30 >> 2] = 0;
  while (1) {
   if ((HEAP32[$30 >> 2] | 0) >= (HEAP32[$23 >> 2] | 0)) break L23;
   if (HEAP32[$27 >> 2] | 0) $147 = (HEAP32[$23 >> 2] | 0) - (HEAP32[$30 >> 2] | 0) - 1 | 0; else $147 = HEAP32[$30 >> 2] | 0;
   HEAP32[$36 >> 2] = $147;
   $151 = Math_imul(HEAP32[$36 >> 2] | 0, HEAP32[$22 >> 2] | 0) | 0;
   HEAP32[$37 >> 2] = (HEAP32[$28 >> 2] | 0) + (Math_imul($151, HEAP32[$25 >> 2] | 0) | 0);
   _stbi__getn(HEAP32[$7 >> 2] | 0, HEAP32[$37 >> 2] | 0, Math_imul(HEAP32[$22 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0;
   HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
  }
 } while (0);
 L102 : do if (!((HEAP32[$25 >> 2] | 0) < 3 | (HEAP32[$26 >> 2] | 0) != 0)) {
  HEAP32[$44 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$30 >> 2] = 0;
  while (1) {
   if ((HEAP32[$30 >> 2] | 0) >= (Math_imul(HEAP32[$22 >> 2] | 0, HEAP32[$23 >> 2] | 0) | 0)) break L102;
   HEAP8[$45 >> 0] = HEAP8[HEAP32[$44 >> 2] >> 0] | 0;
   HEAP8[HEAP32[$44 >> 2] >> 0] = HEAP8[(HEAP32[$44 >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$44 >> 2] | 0) + 2 >> 0] = HEAP8[$45 >> 0] | 0;
   HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
   HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAP32[$11 >> 2] | 0) if ((HEAP32[$11 >> 2] | 0) != (HEAP32[$25 >> 2] | 0)) HEAP32[$28 >> 2] = _stbi__convert_format(HEAP32[$28 >> 2] | 0, HEAP32[$25 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$22 >> 2] | 0, HEAP32[$23 >> 2] | 0) | 0;
 HEAP32[$21 >> 2] = 0;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$19 >> 2] = 0;
 HEAP32[$18 >> 2] = 0;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$6 >> 2] = HEAP32[$28 >> 2];
 $374 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $374 | 0;
}

function _stbi__psd_load($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $104 = 0, $11 = 0, $113 = 0, $12 = 0, $123 = 0, $13 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $175 = 0, $18 = 0, $19 = 0, $190 = 0, $20 = 0, $21 = 0, $22 = 0, $224 = 0, $23 = 0, $232 = 0, $24 = 0, $241 = 0, $248 = 0, $25 = 0, $258 = 0, $26 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $410 = 0, $43 = 0, $430 = 0, $51 = 0, $63 = 0, $7 = 0, $78 = 0, $8 = 0, $86 = 0, $9 = 0, $90 = 0, $93 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $7 = sp + 116 | 0;
 $8 = sp + 112 | 0;
 $9 = sp + 108 | 0;
 $10 = sp + 104 | 0;
 $11 = sp + 100 | 0;
 $12 = sp + 96 | 0;
 $13 = sp + 92 | 0;
 $14 = sp + 88 | 0;
 $15 = sp + 84 | 0;
 $16 = sp + 80 | 0;
 $17 = sp + 76 | 0;
 $18 = sp + 72 | 0;
 $19 = sp + 68 | 0;
 $20 = sp + 64 | 0;
 $21 = sp + 60 | 0;
 $22 = sp + 56 | 0;
 $23 = sp + 52 | 0;
 $24 = sp + 48 | 0;
 $25 = sp + 44 | 0;
 $26 = sp + 120 | 0;
 $27 = sp + 40 | 0;
 $28 = sp + 122 | 0;
 $29 = sp + 36 | 0;
 $30 = sp + 32 | 0;
 $31 = sp + 28 | 0;
 $32 = sp + 24 | 0;
 $33 = sp + 20 | 0;
 $34 = sp + 16 | 0;
 $35 = sp + 12 | 0;
 $36 = sp + 8 | 0;
 $37 = sp + 4 | 0;
 $38 = sp;
 HEAP32[$8 >> 2] = $0;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAP32[$13 >> 2] = $5;
 HEAP32[$14 >> 2] = $6;
 if ((_stbi__get32be(HEAP32[$8 >> 2] | 0) | 0) != 943870035) {
  $43 = (_stbi__err(43836) | 0) != 0;
  HEAP32[$7 >> 2] = $43 ? 0 : 0;
  $430 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $430 | 0;
 }
 if ((_stbi__get16be(HEAP32[$8 >> 2] | 0) | 0) != 1) {
  $51 = (_stbi__err(43844) | 0) != 0;
  HEAP32[$7 >> 2] = $51 ? 0 : 0;
  $430 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $430 | 0;
 }
 _stbi__skip(HEAP32[$8 >> 2] | 0, 6);
 HEAP32[$16 >> 2] = _stbi__get16be(HEAP32[$8 >> 2] | 0) | 0;
 if ((HEAP32[$16 >> 2] | 0) < 0 | (HEAP32[$16 >> 2] | 0) > 16) {
  $63 = (_stbi__err(43858) | 0) != 0;
  HEAP32[$7 >> 2] = $63 ? 0 : 0;
  $430 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $430 | 0;
 }
 HEAP32[$22 >> 2] = _stbi__get32be(HEAP32[$8 >> 2] | 0) | 0;
 HEAP32[$21 >> 2] = _stbi__get32be(HEAP32[$8 >> 2] | 0) | 0;
 HEAP32[$20 >> 2] = _stbi__get16be(HEAP32[$8 >> 2] | 0) | 0;
 if ((HEAP32[$20 >> 2] | 0) != 8 & (HEAP32[$20 >> 2] | 0) != 16) {
  $78 = (_stbi__err(43878) | 0) != 0;
  HEAP32[$7 >> 2] = $78 ? 0 : 0;
  $430 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $430 | 0;
 }
 if ((_stbi__get16be(HEAP32[$8 >> 2] | 0) | 0) != 3) {
  $86 = (_stbi__err(43900) | 0) != 0;
  HEAP32[$7 >> 2] = $86 ? 0 : 0;
  $430 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $430 | 0;
 }
 $90 = HEAP32[$8 >> 2] | 0;
 _stbi__skip($90, _stbi__get32be(HEAP32[$8 >> 2] | 0) | 0);
 $93 = HEAP32[$8 >> 2] | 0;
 _stbi__skip($93, _stbi__get32be(HEAP32[$8 >> 2] | 0) | 0);
 $96 = HEAP32[$8 >> 2] | 0;
 _stbi__skip($96, _stbi__get32be(HEAP32[$8 >> 2] | 0) | 0);
 HEAP32[$17 >> 2] = _stbi__get16be(HEAP32[$8 >> 2] | 0) | 0;
 if ((HEAP32[$17 >> 2] | 0) > 1) {
  $104 = (_stbi__err(43919) | 0) != 0;
  HEAP32[$7 >> 2] = $104 ? 0 : 0;
  $430 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $430 | 0;
 }
 if (!(_stbi__mad3sizes_valid(4, HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0, 0) | 0)) {
  $113 = (_stbi__err(43529) | 0) != 0;
  HEAP32[$7 >> 2] = $113 ? 0 : 0;
  $430 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $430 | 0;
 }
 $123 = HEAP32[$21 >> 2] | 0;
 if ((HEAP32[$17 >> 2] | 0) == 0 & (HEAP32[$20 >> 2] | 0) == 16 & (HEAP32[$14 >> 2] | 0) == 16) {
  HEAP32[$23 >> 2] = _stbi__malloc_mad3(8, $123, HEAP32[$22 >> 2] | 0, 0) | 0;
  HEAP32[HEAP32[$13 >> 2] >> 2] = 16;
 } else HEAP32[$23 >> 2] = _stbi__malloc(Math_imul($123 << 2, HEAP32[$22 >> 2] | 0) | 0) | 0;
 if (!(HEAP32[$23 >> 2] | 0)) {
  $134 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$7 >> 2] = $134 ? 0 : 0;
  $430 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $430 | 0;
 }
 HEAP32[$15 >> 2] = Math_imul(HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0) | 0;
 L37 : do if (HEAP32[$17 >> 2] | 0) {
  _stbi__skip(HEAP32[$8 >> 2] | 0, (Math_imul(HEAP32[$22 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0) << 1);
  HEAP32[$18 >> 2] = 0;
  L39 : while (1) {
   if ((HEAP32[$18 >> 2] | 0) >= 4) break L37;
   HEAP32[$24 >> 2] = (HEAP32[$23 >> 2] | 0) + (HEAP32[$18 >> 2] | 0);
   L42 : do if ((HEAP32[$18 >> 2] | 0) >= (HEAP32[$16 >> 2] | 0)) {
    HEAP32[$19 >> 2] = 0;
    while (1) {
     if ((HEAP32[$19 >> 2] | 0) >= (HEAP32[$15 >> 2] | 0)) break L42;
     HEAP8[HEAP32[$24 >> 2] >> 0] = (HEAP32[$18 >> 2] | 0) == 3 ? 255 : 0;
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
     HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 4;
    }
   } else if (!(_stbi__psd_decode_rle(HEAP32[$8 >> 2] | 0, HEAP32[$24 >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0)) break L39; while (0);
   HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
  }
  _free(HEAP32[$23 >> 2] | 0);
  $175 = (_stbi__err(43773) | 0) != 0;
  HEAP32[$7 >> 2] = $175 ? 0 : 0;
  $430 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $430 | 0;
 } else {
  HEAP32[$18 >> 2] = 0;
  while (1) {
   if ((HEAP32[$18 >> 2] | 0) >= 4) break L37;
   L55 : do if ((HEAP32[$18 >> 2] | 0) >= (HEAP32[$16 >> 2] | 0)) {
    $190 = HEAP32[$23 >> 2] | 0;
    if ((HEAP32[$20 >> 2] | 0) == 16 & (HEAP32[$14 >> 2] | 0) == 16) {
     HEAP32[$25 >> 2] = $190 + (HEAP32[$18 >> 2] << 1);
     HEAP16[$26 >> 1] = (HEAP32[$18 >> 2] | 0) == 3 ? 65535 : 0;
     HEAP32[$19 >> 2] = 0;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >= (HEAP32[$15 >> 2] | 0)) break L55;
      HEAP16[HEAP32[$25 >> 2] >> 1] = HEAP16[$26 >> 1] | 0;
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
      HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 8;
     }
    } else {
     HEAP32[$27 >> 2] = $190 + (HEAP32[$18 >> 2] | 0);
     HEAP8[$28 >> 0] = (HEAP32[$18 >> 2] | 0) == 3 ? 255 : 0;
     HEAP32[$19 >> 2] = 0;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >= (HEAP32[$15 >> 2] | 0)) break L55;
      HEAP8[HEAP32[$27 >> 2] >> 0] = HEAP8[$28 >> 0] | 0;
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
      HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 4;
     }
    }
   } else {
    $224 = HEAP32[$23 >> 2] | 0;
    if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) == 16) {
     HEAP32[$29 >> 2] = $224 + (HEAP32[$18 >> 2] << 1);
     HEAP32[$19 >> 2] = 0;
     while (1) {
      if ((HEAP32[$19 >> 2] | 0) >= (HEAP32[$15 >> 2] | 0)) break L55;
      $232 = (_stbi__get16be(HEAP32[$8 >> 2] | 0) | 0) & 65535;
      HEAP16[HEAP32[$29 >> 2] >> 1] = $232;
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
      HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 8;
     }
    }
    HEAP32[$30 >> 2] = $224 + (HEAP32[$18 >> 2] | 0);
    $241 = (HEAP32[$20 >> 2] | 0) == 16;
    HEAP32[$19 >> 2] = 0;
    if ($241) while (1) {
     if ((HEAP32[$19 >> 2] | 0) >= (HEAP32[$15 >> 2] | 0)) break L55;
     $248 = (_stbi__get16be(HEAP32[$8 >> 2] | 0) | 0) >> 8 & 255;
     HEAP8[HEAP32[$30 >> 2] >> 0] = $248;
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
     HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 4;
    } else while (1) {
     if ((HEAP32[$19 >> 2] | 0) >= (HEAP32[$15 >> 2] | 0)) break L55;
     $258 = _stbi__get8(HEAP32[$8 >> 2] | 0) | 0;
     HEAP8[HEAP32[$30 >> 2] >> 0] = $258;
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
     HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 4;
    }
   } while (0);
   HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
  }
 } while (0);
 L84 : do if ((HEAP32[$16 >> 2] | 0) >= 4) {
  $270 = (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) == 16;
  HEAP32[$19 >> 2] = 0;
  if ($270) while (1) {
   if ((HEAP32[$19 >> 2] | 0) >= (Math_imul(HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0) | 0)) break L84;
   HEAP32[$31 >> 2] = (HEAP32[$23 >> 2] | 0) + (HEAP32[$19 >> 2] << 2 << 1);
   if (HEAPU16[(HEAP32[$31 >> 2] | 0) + 6 >> 1] | 0 | 0) if ((HEAPU16[(HEAP32[$31 >> 2] | 0) + 6 >> 1] | 0 | 0) != 65535) {
    HEAPF32[$32 >> 2] = +(HEAPU16[(HEAP32[$31 >> 2] | 0) + 6 >> 1] | 0 | 0) / 65535.0;
    HEAPF32[$33 >> 2] = 1.0 / +HEAPF32[$32 >> 2];
    HEAPF32[$34 >> 2] = (1.0 - +HEAPF32[$33 >> 2]) * 65535.0;
    HEAP16[HEAP32[$31 >> 2] >> 1] = ~~(+(HEAPU16[HEAP32[$31 >> 2] >> 1] | 0 | 0) * +HEAPF32[$33 >> 2] + +HEAPF32[$34 >> 2]);
    HEAP16[(HEAP32[$31 >> 2] | 0) + 2 >> 1] = ~~(+(HEAPU16[(HEAP32[$31 >> 2] | 0) + 2 >> 1] | 0 | 0) * +HEAPF32[$33 >> 2] + +HEAPF32[$34 >> 2]);
    HEAP16[(HEAP32[$31 >> 2] | 0) + 4 >> 1] = ~~(+(HEAPU16[(HEAP32[$31 >> 2] | 0) + 4 >> 1] | 0 | 0) * +HEAPF32[$33 >> 2] + +HEAPF32[$34 >> 2]);
   }
   HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
  } else while (1) {
   if ((HEAP32[$19 >> 2] | 0) >= (Math_imul(HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0) | 0)) break L84;
   HEAP32[$35 >> 2] = (HEAP32[$23 >> 2] | 0) + (HEAP32[$19 >> 2] << 2);
   if (HEAPU8[(HEAP32[$35 >> 2] | 0) + 3 >> 0] | 0 | 0) if ((HEAPU8[(HEAP32[$35 >> 2] | 0) + 3 >> 0] | 0 | 0) != 255) {
    HEAPF32[$36 >> 2] = +(HEAPU8[(HEAP32[$35 >> 2] | 0) + 3 >> 0] | 0 | 0) / 255.0;
    HEAPF32[$37 >> 2] = 1.0 / +HEAPF32[$36 >> 2];
    HEAPF32[$38 >> 2] = (1.0 - +HEAPF32[$37 >> 2]) * 255.0;
    HEAP8[HEAP32[$35 >> 2] >> 0] = ~~(+(HEAPU8[HEAP32[$35 >> 2] >> 0] | 0 | 0) * +HEAPF32[$37 >> 2] + +HEAPF32[$38 >> 2]);
    HEAP8[(HEAP32[$35 >> 2] | 0) + 1 >> 0] = ~~(+(HEAPU8[(HEAP32[$35 >> 2] | 0) + 1 >> 0] | 0 | 0) * +HEAPF32[$37 >> 2] + +HEAPF32[$38 >> 2]);
    HEAP8[(HEAP32[$35 >> 2] | 0) + 2 >> 0] = ~~(+(HEAPU8[(HEAP32[$35 >> 2] | 0) + 2 >> 0] | 0 | 0) * +HEAPF32[$37 >> 2] + +HEAPF32[$38 >> 2]);
   }
   HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
  }
 } while (0);
 if ((HEAP32[$12 >> 2] | 0) != 0 & (HEAP32[$12 >> 2] | 0) != 4) {
  $410 = HEAP32[$23 >> 2] | 0;
  if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) == 16) HEAP32[$23 >> 2] = _stbi__convert_format16($410, 4, HEAP32[$12 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0) | 0; else HEAP32[$23 >> 2] = _stbi__convert_format($410, 4, HEAP32[$12 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0) | 0;
  if (!(HEAP32[$23 >> 2] | 0)) {
   HEAP32[$7 >> 2] = HEAP32[$23 >> 2];
   $430 = HEAP32[$7 >> 2] | 0;
   STACKTOP = sp;
   return $430 | 0;
  }
 }
 if (HEAP32[$11 >> 2] | 0) HEAP32[HEAP32[$11 >> 2] >> 2] = 4;
 HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[$22 >> 2];
 HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$21 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$23 >> 2];
 $430 = HEAP32[$7 >> 2] | 0;
 STACKTOP = sp;
 return $430 | 0;
}

function _stbi__process_frame_header($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $107 = 0, $11 = 0, $12 = 0, $159 = 0, $2 = 0, $27 = 0, $277 = 0, $297 = 0, $3 = 0, $318 = 0, $334 = 0, $36 = 0, $367 = 0, $380 = 0, $382 = 0, $4 = 0, $439 = 0, $452 = 0, $454 = 0, $473 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
 HEAP32[$10 >> 2] = 1;
 HEAP32[$11 >> 2] = 1;
 HEAP32[$6 >> 2] = _stbi__get16be(HEAP32[$5 >> 2] | 0) | 0;
 if ((HEAP32[$6 >> 2] | 0) < 11) {
  HEAP32[$2 >> 2] = _stbi__err(45540) | 0;
  $473 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $473 | 0;
 }
 HEAP32[$7 >> 2] = (_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255;
 if ((HEAP32[$7 >> 2] | 0) != 8) {
  HEAP32[$2 >> 2] = _stbi__err(45552) | 0;
  $473 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $473 | 0;
 }
 $27 = _stbi__get16be(HEAP32[$5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = $27;
 if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[$2 >> 2] = _stbi__err(45563) | 0;
  $473 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $473 | 0;
 }
 $36 = _stbi__get16be(HEAP32[$5 >> 2] | 0) | 0;
 HEAP32[HEAP32[$5 >> 2] >> 2] = $36;
 if (!(HEAP32[HEAP32[$5 >> 2] >> 2] | 0)) {
  HEAP32[$2 >> 2] = _stbi__err(45580) | 0;
  $473 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $473 | 0;
 }
 HEAP32[$12 >> 2] = (_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255;
 if ((HEAP32[$12 >> 2] | 0) != 3 & (HEAP32[$12 >> 2] | 0) != 1 & (HEAP32[$12 >> 2] | 0) != 4) {
  HEAP32[$2 >> 2] = _stbi__err(45588) | 0;
  $473 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $473 | 0;
 }
 HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[$12 >> 2] | 0)) break;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 44 >> 2] = 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 56 >> 2] = 0;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 if ((HEAP32[$6 >> 2] | 0) != (8 + ((HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) * 3 | 0) | 0)) {
  HEAP32[$2 >> 2] = _stbi__err(45540) | 0;
  $473 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $473 | 0;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 18412 >> 2] = 0;
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0)) {
   label = 30;
   break;
  }
  $87 = (_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) >> 2] = $87;
  if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) == 3) if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) >> 2] | 0) == (HEAPU8[45608 + (HEAP32[$8 >> 2] | 0) >> 0] | 0 | 0)) {
   $107 = (HEAP32[$3 >> 2] | 0) + 18412 | 0;
   HEAP32[$107 >> 2] = (HEAP32[$107 >> 2] | 0) + 1;
  }
  HEAP32[$9 >> 2] = (_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 4 >> 2] = HEAP32[$9 >> 2] >> 4;
  if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0)) {
   label = 23;
   break;
  }
  if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) > 4) {
   label = 23;
   break;
  }
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 8 >> 2] = HEAP32[$9 >> 2] & 15;
  if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0)) {
   label = 26;
   break;
  }
  if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) > 4) {
   label = 26;
   break;
  }
  $159 = (_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 12 >> 2] = $159;
  if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 12 >> 2] | 0) > 3) {
   label = 28;
   break;
  }
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 if ((label | 0) == 23) {
  HEAP32[$2 >> 2] = _stbi__err(45611) | 0;
  $473 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $473 | 0;
 } else if ((label | 0) == 26) {
  HEAP32[$2 >> 2] = _stbi__err(45617) | 0;
  $473 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $473 | 0;
 } else if ((label | 0) == 28) {
  HEAP32[$2 >> 2] = _stbi__err(45623) | 0;
  $473 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $473 | 0;
 } else if ((label | 0) == 30) {
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = 1;
   $473 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $473 | 0;
  }
  if (!(_stbi__mad3sizes_valid(HEAP32[HEAP32[$5 >> 2] >> 2] | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0, 0) | 0)) {
   HEAP32[$2 >> 2] = _stbi__err(43529) | 0;
   $473 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $473 | 0;
  }
  HEAP32[$8 >> 2] = 0;
  while (1) {
   if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) > (HEAP32[$10 >> 2] | 0)) HEAP32[$10 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 4 >> 2];
   if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) > (HEAP32[$11 >> 2] | 0)) HEAP32[$11 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 8 >> 2];
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
  }
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18052 >> 2] = HEAP32[$10 >> 2];
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18056 >> 2] = HEAP32[$11 >> 2];
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18068 >> 2] = HEAP32[$10 >> 2] << 3;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18072 >> 2] = HEAP32[$11 >> 2] << 3;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18060 >> 2] = (((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 18068 >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18068 >> 2] | 0) >>> 0) | 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18064 >> 2] = (((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 18072 >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18072 >> 2] | 0) >>> 0) | 0;
  HEAP32[$8 >> 2] = 0;
  while (1) {
   if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0)) {
    label = 50;
    break;
   }
   $277 = Math_imul(HEAP32[HEAP32[$5 >> 2] >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 28 >> 2] = (($277 + (HEAP32[$10 >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[$10 >> 2] | 0) >>> 0) | 0;
   $297 = Math_imul(HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 32 >> 2] = (($297 + (HEAP32[$11 >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[$11 >> 2] | 0) >>> 0) | 0;
   $318 = (Math_imul(HEAP32[(HEAP32[$3 >> 2] | 0) + 18060 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0) << 3;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 36 >> 2] = $318;
   $334 = (Math_imul(HEAP32[(HEAP32[$3 >> 2] | 0) + 18064 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0) << 3;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 40 >> 2] = $334;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 60 >> 2] = 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 52 >> 2] = 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 56 >> 2] = 0;
   $367 = _stbi__malloc_mad2(HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 40 >> 2] | 0, 15) | 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 48 >> 2] = $367;
   $380 = HEAP32[$3 >> 2] | 0;
   if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 48 >> 2] | 0)) {
    label = 44;
    break;
   }
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 44 >> 2] = (HEAP32[$380 + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 48 >> 2] | 0) + 15 & -16;
   if (HEAP32[(HEAP32[$3 >> 2] | 0) + 18380 >> 2] | 0) {
    HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 64 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0) / 8 | 0;
    HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 68 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 40 >> 2] | 0) / 8 | 0;
    $439 = _stbi__malloc_mad3(HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 40 >> 2] | 0, 2, 15) | 0;
    HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 52 >> 2] = $439;
    $452 = HEAP32[$3 >> 2] | 0;
    if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 52 >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 60 >> 2] = (HEAP32[$452 + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 52 >> 2] | 0) + 15 & -16;
   }
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
  }
  if ((label | 0) == 44) {
   $382 = (HEAP32[$8 >> 2] | 0) + 1 | 0;
   HEAP32[$2 >> 2] = _stbi__free_jpeg_components($380, $382, _stbi__err(43490) | 0) | 0;
   $473 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $473 | 0;
  } else if ((label | 0) == 47) {
   $454 = (HEAP32[$8 >> 2] | 0) + 1 | 0;
   HEAP32[$2 >> 2] = _stbi__free_jpeg_components($452, $454, _stbi__err(43490) | 0) | 0;
   $473 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $473 | 0;
  } else if ((label | 0) == 50) {
   HEAP32[$2 >> 2] = 1;
   $473 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $473 | 0;
  }
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i63 = 0, $$0$i$i$i$i80 = 0, $$0$i$i$i$i85 = 0, $$0$i$i$i51 = 0, $$0$i$i$i54 = 0, $$0$i$i$i58 = 0, $$0$i$i$i66 = 0, $$0$i$i$i70 = 0, $$0$i$i$i74 = 0, $$0$i$i$idx$i = 0, $$345 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $109 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $3 = 0, $30 = 0, $4 = 0, $42 = 0, $43 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $8 = 0, $81 = 0, $82 = 0, $9 = 0, $95 = 0, $96 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($0 | 0) == ($1 | 0)) $$345 = $0; else if ((HEAP8[$0 >> 0] | 0) == 77) {
  $13 = $0 + 1 | 0;
  $14 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
  if (($14 | 0) == ($13 | 0)) $$345 = $0; else {
   $16 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
   if (($16 | 0) == ($14 | 0)) $$345 = $0; else {
    $18 = $2 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    if ((($19 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$345 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $19 + -24 | 0);
     $26 = HEAP32[$18 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$18 >> 2] = $26 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $26 + -48 | 0);
     $30 = $4 + 12 | 0;
     L11 : do if ((HEAP8[((HEAP8[$30 + 11 >> 0] | 0) < 0 ? HEAP32[$30 >> 2] | 0 : $30) >> 0] | 0) == 40) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 47879) | 0;
      HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$8 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$8 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $5);
      $42 = HEAP8[$9 + 11 >> 0] | 0;
      $43 = $42 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($8, $43 ? HEAP32[$9 >> 2] | 0 : $9, $43 ? HEAP32[$9 + 4 >> 2] | 0 : $42 & 255) | 0;
      HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
      $$0$i$i$i51 = 0;
      while (1) {
       if (($$0$i$i$i51 | 0) == 3) break;
       HEAP32[$8 + ($$0$i$i$i51 << 2) >> 2] = 0;
       $$0$i$i$i51 = $$0$i$i$i51 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 49301) | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
      $$0$i$i$i54 = 0;
      while (1) {
       if (($$0$i$i$i54 | 0) == 3) break;
       HEAP32[$7 + ($$0$i$i$i54 << 2) >> 2] = 0;
       $$0$i$i$i54 = $$0$i$i$i54 + 1 | 0;
      }
      $56 = HEAP32[$18 >> 2] | 0;
      $57 = $56 + -24 | 0;
      $58 = $57 + 11 | 0;
      if ((HEAP8[$58 >> 0] | 0) < 0) {
       $61 = HEAP32[$57 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($61, $3);
       HEAP32[$56 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($57, $3);
       HEAP8[$58 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($57);
      HEAP32[$57 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$57 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$57 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i$i | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($30, 0, 47877) | 0;
      HEAP32[$6 >> 2] = HEAP32[$30 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
      $$0$i$i$i58 = 0;
      while (1) {
       if (($$0$i$i$i58 | 0) == 3) break;
       HEAP32[$30 + ($$0$i$i$i58 << 2) >> 2] = 0;
       $$0$i$i$i58 = $$0$i$i$i58 + 1 | 0;
      }
      $68 = HEAP32[$18 >> 2] | 0;
      $69 = $68 + -12 | 0;
      $70 = $69 + 11 | 0;
      if ((HEAP8[$70 >> 0] | 0) < 0) {
       $73 = HEAP32[$69 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($73, $3);
       HEAP32[$68 + -8 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($69, $3);
       HEAP8[$70 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($69);
      HEAP32[$69 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$69 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$69 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i63 = 0;
      while (1) {
       if (($$0$i$i$i$i63 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i63 << 2) >> 2] = 0;
       $$0$i$i$i$i63 = $$0$i$i$i$i63 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 47911) | 0;
      HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$8 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$8 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      $$0$i$i$i66 = 0;
      while (1) {
       if (($$0$i$i$i66 | 0) == 3) break;
       HEAP32[$4 + ($$0$i$i$i66 << 2) >> 2] = 0;
       $$0$i$i$i66 = $$0$i$i$i66 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $5);
      $81 = HEAP8[$9 + 11 >> 0] | 0;
      $82 = $81 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($8, $82 ? HEAP32[$9 >> 2] | 0 : $9, $82 ? HEAP32[$9 + 4 >> 2] | 0 : $81 & 255) | 0;
      HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
      HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
      HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
      $$0$i$i$i70 = 0;
      while (1) {
       if (($$0$i$i$i70 | 0) == 3) break;
       HEAP32[$8 + ($$0$i$i$i70 << 2) >> 2] = 0;
       $$0$i$i$i70 = $$0$i$i$i70 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 49301) | 0;
      HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
      $$0$i$i$i74 = 0;
      while (1) {
       if (($$0$i$i$i74 | 0) == 3) break;
       HEAP32[$7 + ($$0$i$i$i74 << 2) >> 2] = 0;
       $$0$i$i$i74 = $$0$i$i$i74 + 1 | 0;
      }
      $95 = HEAP32[$18 >> 2] | 0;
      $96 = $95 + -24 | 0;
      $97 = $96 + 11 | 0;
      if ((HEAP8[$97 >> 0] | 0) < 0) {
       $100 = HEAP32[$96 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($100, $3);
       HEAP32[$95 + -20 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($96, $3);
       HEAP8[$97 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($96);
      HEAP32[$96 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$96 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
      HEAP32[$96 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $$0$i$i$i$i80 = 0;
      while (1) {
       if (($$0$i$i$i$i80 | 0) == 3) break;
       HEAP32[$6 + ($$0$i$i$i$i80 << 2) >> 2] = 0;
       $$0$i$i$i$i80 = $$0$i$i$i$i80 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      $104 = HEAP32[$18 >> 2] | 0;
      $105 = $104 + -12 | 0;
      $106 = $105 + 11 | 0;
      if ((HEAP8[$106 >> 0] | 0) < 0) {
       $109 = HEAP32[$105 >> 2] | 0;
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($109, $3);
       HEAP32[$104 + -8 >> 2] = 0;
      } else {
       HEAP8[$3 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($105, $3);
       HEAP8[$106 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($105);
      HEAP32[$105 >> 2] = HEAP32[$30 >> 2];
      HEAP32[$105 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
      HEAP32[$105 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
      $$0$i$i$i$i85 = 0;
      while (1) {
       if (($$0$i$i$i$i85 | 0) == 3) break L11;
       HEAP32[$30 + ($$0$i$i$i$i85 << 2) >> 2] = 0;
       $$0$i$i$i$i85 = $$0$i$i$i$i85 + 1 | 0;
      }
     } while (0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $$345 = $16;
    }
   }
  }
 } else $$345 = $0;
 STACKTOP = sp;
 return $$345 | 0;
}

function _stbi__idct_block($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $402 = 0, $408 = 0, $415 = 0, $422 = 0, $429 = 0, $436 = 0, $443 = 0, $450 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $3 = sp + 388 | 0;
 $4 = sp + 384 | 0;
 $5 = sp + 380 | 0;
 $6 = sp + 376 | 0;
 $7 = sp;
 $8 = sp + 372 | 0;
 $9 = sp + 368 | 0;
 $10 = sp + 364 | 0;
 $11 = sp + 360 | 0;
 $12 = sp + 356 | 0;
 $13 = sp + 352 | 0;
 $14 = sp + 348 | 0;
 $15 = sp + 344 | 0;
 $16 = sp + 340 | 0;
 $17 = sp + 336 | 0;
 $18 = sp + 332 | 0;
 $19 = sp + 328 | 0;
 $20 = sp + 324 | 0;
 $21 = sp + 320 | 0;
 $22 = sp + 316 | 0;
 $23 = sp + 312 | 0;
 $24 = sp + 308 | 0;
 $25 = sp + 304 | 0;
 $26 = sp + 300 | 0;
 $27 = sp + 296 | 0;
 $28 = sp + 292 | 0;
 $29 = sp + 288 | 0;
 $30 = sp + 284 | 0;
 $31 = sp + 280 | 0;
 $32 = sp + 276 | 0;
 $33 = sp + 272 | 0;
 $34 = sp + 268 | 0;
 $35 = sp + 264 | 0;
 $36 = sp + 260 | 0;
 $37 = sp + 256 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$6 >> 2] = 0;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= 8) break;
  if (!(HEAP16[(HEAP32[$10 >> 2] | 0) + 16 >> 1] | 0)) if (!(HEAP16[(HEAP32[$10 >> 2] | 0) + 32 >> 1] | 0)) if (!(HEAP16[(HEAP32[$10 >> 2] | 0) + 48 >> 1] | 0)) if (!(HEAP16[(HEAP32[$10 >> 2] | 0) + 64 >> 1] | 0)) if (!(HEAP16[(HEAP32[$10 >> 2] | 0) + 80 >> 1] | 0)) if (!(HEAP16[(HEAP32[$10 >> 2] | 0) + 96 >> 1] | 0)) if (!(HEAP16[(HEAP32[$10 >> 2] | 0) + 112 >> 1] | 0)) {
   HEAP32[$11 >> 2] = HEAP16[HEAP32[$10 >> 2] >> 1] << 2;
   $80 = HEAP32[$11 >> 2] | 0;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 224 >> 2] = $80;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 192 >> 2] = $80;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 160 >> 2] = $80;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 128 >> 2] = $80;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 96 >> 2] = $80;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 64 >> 2] = $80;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] = $80;
   HEAP32[HEAP32[$8 >> 2] >> 2] = $80;
  } else label = 11; else label = 11; else label = 11; else label = 11; else label = 11; else label = 11; else label = 11;
  if ((label | 0) == 11) {
   label = 0;
   HEAP32[$17 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + 32 >> 1];
   HEAP32[$18 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + 96 >> 1];
   HEAP32[$16 >> 2] = ((HEAP32[$17 >> 2] | 0) + (HEAP32[$18 >> 2] | 0) | 0) * 2217;
   HEAP32[$14 >> 2] = (HEAP32[$16 >> 2] | 0) + (Math_imul(HEAP32[$18 >> 2] | 0, -7567) | 0);
   HEAP32[$15 >> 2] = (HEAP32[$16 >> 2] | 0) + ((HEAP32[$17 >> 2] | 0) * 3135 | 0);
   HEAP32[$17 >> 2] = HEAP16[HEAP32[$10 >> 2] >> 1];
   HEAP32[$18 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + 64 >> 1];
   HEAP32[$12 >> 2] = (HEAP32[$17 >> 2] | 0) + (HEAP32[$18 >> 2] | 0) << 12;
   HEAP32[$13 >> 2] = (HEAP32[$17 >> 2] | 0) - (HEAP32[$18 >> 2] | 0) << 12;
   HEAP32[$21 >> 2] = (HEAP32[$12 >> 2] | 0) + (HEAP32[$15 >> 2] | 0);
   HEAP32[$24 >> 2] = (HEAP32[$12 >> 2] | 0) - (HEAP32[$15 >> 2] | 0);
   HEAP32[$22 >> 2] = (HEAP32[$13 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
   HEAP32[$23 >> 2] = (HEAP32[$13 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
   HEAP32[$12 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + 112 >> 1];
   HEAP32[$13 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + 80 >> 1];
   HEAP32[$14 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + 48 >> 1];
   HEAP32[$15 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) + 16 >> 1];
   HEAP32[$18 >> 2] = (HEAP32[$12 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
   HEAP32[$19 >> 2] = (HEAP32[$13 >> 2] | 0) + (HEAP32[$15 >> 2] | 0);
   HEAP32[$16 >> 2] = (HEAP32[$12 >> 2] | 0) + (HEAP32[$15 >> 2] | 0);
   HEAP32[$17 >> 2] = (HEAP32[$13 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
   HEAP32[$20 >> 2] = ((HEAP32[$18 >> 2] | 0) + (HEAP32[$19 >> 2] | 0) | 0) * 4816;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) * 1223;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) * 8410;
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) * 12586;
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) * 6149;
   HEAP32[$16 >> 2] = (HEAP32[$20 >> 2] | 0) + (Math_imul(HEAP32[$16 >> 2] | 0, -3685) | 0);
   HEAP32[$17 >> 2] = (HEAP32[$20 >> 2] | 0) + (Math_imul(HEAP32[$17 >> 2] | 0, -10497) | 0);
   HEAP32[$18 >> 2] = Math_imul(HEAP32[$18 >> 2] | 0, -8034) | 0;
   HEAP32[$19 >> 2] = Math_imul(HEAP32[$19 >> 2] | 0, -1597) | 0;
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) + (HEAP32[$19 >> 2] | 0));
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + ((HEAP32[$17 >> 2] | 0) + (HEAP32[$18 >> 2] | 0));
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + ((HEAP32[$17 >> 2] | 0) + (HEAP32[$19 >> 2] | 0));
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) + (HEAP32[$18 >> 2] | 0));
   HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 512;
   HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 512;
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 512;
   HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 512;
   HEAP32[HEAP32[$8 >> 2] >> 2] = (HEAP32[$21 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 224 >> 2] = (HEAP32[$21 >> 2] | 0) - (HEAP32[$15 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] = (HEAP32[$22 >> 2] | 0) + (HEAP32[$14 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 192 >> 2] = (HEAP32[$22 >> 2] | 0) - (HEAP32[$14 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 64 >> 2] = (HEAP32[$23 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 160 >> 2] = (HEAP32[$23 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 96 >> 2] = (HEAP32[$24 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 128 >> 2] = (HEAP32[$24 >> 2] | 0) - (HEAP32[$12 >> 2] | 0) >> 10;
  }
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 2;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
 }
 HEAP32[$6 >> 2] = 0;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= 8) break;
  HEAP32[$30 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2];
  HEAP32[$31 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2];
  HEAP32[$29 >> 2] = ((HEAP32[$30 >> 2] | 0) + (HEAP32[$31 >> 2] | 0) | 0) * 2217;
  HEAP32[$27 >> 2] = (HEAP32[$29 >> 2] | 0) + (Math_imul(HEAP32[$31 >> 2] | 0, -7567) | 0);
  HEAP32[$28 >> 2] = (HEAP32[$29 >> 2] | 0) + ((HEAP32[$30 >> 2] | 0) * 3135 | 0);
  HEAP32[$30 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
  HEAP32[$31 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2];
  HEAP32[$25 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[$31 >> 2] | 0) << 12;
  HEAP32[$26 >> 2] = (HEAP32[$30 >> 2] | 0) - (HEAP32[$31 >> 2] | 0) << 12;
  HEAP32[$34 >> 2] = (HEAP32[$25 >> 2] | 0) + (HEAP32[$28 >> 2] | 0);
  HEAP32[$37 >> 2] = (HEAP32[$25 >> 2] | 0) - (HEAP32[$28 >> 2] | 0);
  HEAP32[$35 >> 2] = (HEAP32[$26 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
  HEAP32[$36 >> 2] = (HEAP32[$26 >> 2] | 0) - (HEAP32[$27 >> 2] | 0);
  HEAP32[$25 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2];
  HEAP32[$26 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2];
  HEAP32[$27 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2];
  HEAP32[$28 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2];
  HEAP32[$31 >> 2] = (HEAP32[$25 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
  HEAP32[$32 >> 2] = (HEAP32[$26 >> 2] | 0) + (HEAP32[$28 >> 2] | 0);
  HEAP32[$29 >> 2] = (HEAP32[$25 >> 2] | 0) + (HEAP32[$28 >> 2] | 0);
  HEAP32[$30 >> 2] = (HEAP32[$26 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
  HEAP32[$33 >> 2] = ((HEAP32[$31 >> 2] | 0) + (HEAP32[$32 >> 2] | 0) | 0) * 4816;
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) * 1223;
  HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) * 8410;
  HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) * 12586;
  HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) * 6149;
  HEAP32[$29 >> 2] = (HEAP32[$33 >> 2] | 0) + (Math_imul(HEAP32[$29 >> 2] | 0, -3685) | 0);
  HEAP32[$30 >> 2] = (HEAP32[$33 >> 2] | 0) + (Math_imul(HEAP32[$30 >> 2] | 0, -10497) | 0);
  HEAP32[$31 >> 2] = Math_imul(HEAP32[$31 >> 2] | 0, -8034) | 0;
  HEAP32[$32 >> 2] = Math_imul(HEAP32[$32 >> 2] | 0, -1597) | 0;
  HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + ((HEAP32[$29 >> 2] | 0) + (HEAP32[$32 >> 2] | 0));
  HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + ((HEAP32[$30 >> 2] | 0) + (HEAP32[$31 >> 2] | 0));
  HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + ((HEAP32[$30 >> 2] | 0) + (HEAP32[$32 >> 2] | 0));
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + ((HEAP32[$29 >> 2] | 0) + (HEAP32[$31 >> 2] | 0));
  HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 16842752;
  HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 16842752;
  HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 16842752;
  HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 16842752;
  $402 = _stbi__clamp((HEAP32[$34 >> 2] | 0) + (HEAP32[$28 >> 2] | 0) >> 17) | 0;
  HEAP8[HEAP32[$9 >> 2] >> 0] = $402;
  $408 = _stbi__clamp((HEAP32[$34 >> 2] | 0) - (HEAP32[$28 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$9 >> 2] | 0) + 7 >> 0] = $408;
  $415 = _stbi__clamp((HEAP32[$35 >> 2] | 0) + (HEAP32[$27 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$9 >> 2] | 0) + 1 >> 0] = $415;
  $422 = _stbi__clamp((HEAP32[$35 >> 2] | 0) - (HEAP32[$27 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$9 >> 2] | 0) + 6 >> 0] = $422;
  $429 = _stbi__clamp((HEAP32[$36 >> 2] | 0) + (HEAP32[$26 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$9 >> 2] | 0) + 2 >> 0] = $429;
  $436 = _stbi__clamp((HEAP32[$36 >> 2] | 0) - (HEAP32[$26 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$9 >> 2] | 0) + 5 >> 0] = $436;
  $443 = _stbi__clamp((HEAP32[$37 >> 2] | 0) + (HEAP32[$25 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$9 >> 2] | 0) + 3 >> 0] = $443;
  $450 = _stbi__clamp((HEAP32[$37 >> 2] | 0) - (HEAP32[$25 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$9 >> 2] | 0) + 4 >> 0] = $450;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 32;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
 }
 STACKTOP = sp;
 return;
}

function _stbi__hdr_load($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $108 = 0, $11 = 0, $119 = 0, $13 = 0, $137 = 0, $14 = 0, $140 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $187 = 0, $19 = 0, $196 = 0, $20 = 0, $208 = 0, $21 = 0, $213 = 0, $216 = 0, $22 = 0, $23 = 0, $236 = 0, $24 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $26 = 0, $261 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $288 = 0, $29 = 0, $293 = 0, $30 = 0, $307 = 0, $31 = 0, $32 = 0, $42 = 0, $58 = 0, $6 = 0, $68 = 0, $7 = 0, $8 = 0, $80 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136 | 0;
 $6 = sp + 1108 | 0;
 $7 = sp + 1104 | 0;
 $8 = sp + 1100 | 0;
 $9 = sp + 1096 | 0;
 $10 = sp + 1092 | 0;
 $11 = sp + 1088 | 0;
 $13 = sp;
 $14 = sp + 1080 | 0;
 $15 = sp + 1076 | 0;
 $16 = sp + 1072 | 0;
 $17 = sp + 1068 | 0;
 $18 = sp + 1064 | 0;
 $19 = sp + 1060 | 0;
 $20 = sp + 1056 | 0;
 $21 = sp + 1121 | 0;
 $22 = sp + 1120 | 0;
 $23 = sp + 1052 | 0;
 $24 = sp + 1048 | 0;
 $25 = sp + 1044 | 0;
 $26 = sp + 1040 | 0;
 $27 = sp + 1036 | 0;
 $28 = sp + 1032 | 0;
 $29 = sp + 1028 | 0;
 $30 = sp + 1116 | 0;
 $31 = sp + 1112 | 0;
 $32 = sp + 1024 | 0;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[sp + 1084 >> 2] = $5;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$29 >> 2] = _stbi__hdr_gettoken(HEAP32[$7 >> 2] | 0, $13) | 0;
 if (_strcmp(HEAP32[$29 >> 2] | 0, 43641) | 0) if (_strcmp(HEAP32[$29 >> 2] | 0, 43652) | 0) {
  $42 = (_stbi__err(43659) | 0) != 0;
  HEAP32[$6 >> 2] = $42 ? 0 : 0;
  $307 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $307 | 0;
 }
 while (1) {
  HEAP32[$14 >> 2] = _stbi__hdr_gettoken(HEAP32[$7 >> 2] | 0, $13) | 0;
  if (!(HEAP8[HEAP32[$14 >> 2] >> 0] | 0)) break;
  if (!(_strcmp(HEAP32[$14 >> 2] | 0, 43667) | 0)) HEAP32[$15 >> 2] = 1;
 }
 if (!(HEAP32[$15 >> 2] | 0)) {
  $58 = (_stbi__err(43690) | 0) != 0;
  HEAP32[$6 >> 2] = $58 ? 0 : 0;
  $307 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $307 | 0;
 }
 HEAP32[$14 >> 2] = _stbi__hdr_gettoken(HEAP32[$7 >> 2] | 0, $13) | 0;
 if (_strncmp(HEAP32[$14 >> 2] | 0, 43709, 3) | 0) {
  $68 = (_stbi__err(43713) | 0) != 0;
  HEAP32[$6 >> 2] = $68 ? 0 : 0;
  $307 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $307 | 0;
 }
 HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 3;
 HEAP32[$17 >> 2] = _strtol(HEAP32[$14 >> 2] | 0, $14, 10) | 0;
 while (1) {
  $80 = HEAP32[$14 >> 2] | 0;
  if ((HEAP8[HEAP32[$14 >> 2] >> 0] | 0) != 32) break;
  HEAP32[$14 >> 2] = $80 + 1;
 }
 if (_strncmp($80, 43737, 3) | 0) {
  $85 = (_stbi__err(43713) | 0) != 0;
  HEAP32[$6 >> 2] = $85 ? 0 : 0;
  $307 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $307 | 0;
 }
 HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 3;
 HEAP32[$16 >> 2] = _strtol(HEAP32[$14 >> 2] | 0, 0, 10) | 0;
 HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[$16 >> 2];
 HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$17 >> 2];
 if (HEAP32[$10 >> 2] | 0) HEAP32[HEAP32[$10 >> 2] >> 2] = 3;
 if (!(HEAP32[$11 >> 2] | 0)) HEAP32[$11 >> 2] = 3;
 if (!(_stbi__mad4sizes_valid(HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$11 >> 2] | 0, 4, 0) | 0)) {
  $108 = (_stbi__err(43529) | 0) != 0;
  HEAP32[$6 >> 2] = $108 ? 0 : 0;
  $307 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $307 | 0;
 }
 HEAP32[$19 >> 2] = _stbi__malloc_mad4(HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$11 >> 2] | 0, 4, 0) | 0;
 if (!(HEAP32[$19 >> 2] | 0)) {
  $119 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$6 >> 2] = $119 ? 0 : 0;
  $307 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $307 | 0;
 }
 do if ((HEAP32[$16 >> 2] | 0) < 8 | (HEAP32[$16 >> 2] | 0) >= 32768) {
  HEAP32[$24 >> 2] = 0;
  label = 28;
 } else {
  HEAP32[$18 >> 2] = 0;
  HEAP32[$24 >> 2] = 0;
  L46 : while (1) {
   if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$17 >> 2] | 0)) {
    label = 64;
    break;
   }
   HEAP32[$26 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
   HEAP32[$27 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
   HEAP32[$20 >> 2] = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
   if ((HEAP32[$26 >> 2] | 0) != 2 | (HEAP32[$27 >> 2] | 0) != 2) {
    label = 37;
    break;
   }
   if (HEAP32[$20 >> 2] & 128 | 0) {
    label = 37;
    break;
   }
   HEAP32[$20 >> 2] = HEAP32[$20 >> 2] << 8;
   $187 = (_stbi__get8(HEAP32[$7 >> 2] | 0) | 0) & 255;
   HEAP32[$20 >> 2] = HEAP32[$20 >> 2] | $187;
   if ((HEAP32[$20 >> 2] | 0) != (HEAP32[$16 >> 2] | 0)) {
    label = 39;
    break;
   }
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP32[$18 >> 2] = _stbi__malloc_mad2(HEAP32[$16 >> 2] | 0, 4, 0) | 0;
    if (!(HEAP32[$18 >> 2] | 0)) {
     label = 42;
     break;
    }
   }
   HEAP32[$25 >> 2] = 0;
   while (1) {
    $213 = (HEAP32[$25 >> 2] | 0) < 4;
    HEAP32[$23 >> 2] = 0;
    if (!$213) break;
    while (1) {
     $216 = (HEAP32[$16 >> 2] | 0) - (HEAP32[$23 >> 2] | 0) | 0;
     HEAP32[$32 >> 2] = $216;
     if (($216 | 0) <= 0) break;
     HEAP8[$21 >> 0] = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
     L61 : do if ((HEAPU8[$21 >> 0] | 0) > 128) {
      HEAP8[$22 >> 0] = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
      HEAP8[$21 >> 0] = (HEAPU8[$21 >> 0] | 0) - 128;
      if ((HEAPU8[$21 >> 0] | 0) > (HEAP32[$32 >> 2] | 0)) {
       label = 49;
       break L46;
      }
      HEAP32[$28 >> 2] = 0;
      while (1) {
       if ((HEAP32[$28 >> 2] | 0) >= (HEAPU8[$21 >> 0] | 0)) break L61;
       $244 = HEAP8[$22 >> 0] | 0;
       $245 = HEAP32[$18 >> 2] | 0;
       $246 = HEAP32[$23 >> 2] | 0;
       HEAP32[$23 >> 2] = $246 + 1;
       HEAP8[$245 + (($246 << 2) + (HEAP32[$25 >> 2] | 0)) >> 0] = $244;
       HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
      }
     } else {
      if ((HEAPU8[$21 >> 0] | 0) > (HEAP32[$32 >> 2] | 0)) {
       label = 54;
       break L46;
      }
      HEAP32[$28 >> 2] = 0;
      while (1) {
       if ((HEAP32[$28 >> 2] | 0) >= (HEAPU8[$21 >> 0] | 0)) break L61;
       $270 = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
       $271 = HEAP32[$18 >> 2] | 0;
       $272 = HEAP32[$23 >> 2] | 0;
       HEAP32[$23 >> 2] = $272 + 1;
       HEAP8[$271 + (($272 << 2) + (HEAP32[$25 >> 2] | 0)) >> 0] = $270;
       HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
      }
     } while (0);
    }
    HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
   }
   while (1) {
    if ((HEAP32[$23 >> 2] | 0) >= (HEAP32[$16 >> 2] | 0)) break;
    $288 = Math_imul(HEAP32[$24 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0;
    $293 = (HEAP32[$19 >> 2] | 0) + ((Math_imul($288 + (HEAP32[$23 >> 2] | 0) | 0, HEAP32[$11 >> 2] | 0) | 0) << 2) | 0;
    _stbi__hdr_convert($293, (HEAP32[$18 >> 2] | 0) + (HEAP32[$23 >> 2] << 2) | 0, HEAP32[$11 >> 2] | 0);
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 1;
   }
   HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
  }
  if ((label | 0) == 37) {
   HEAP8[$31 >> 0] = HEAP32[$26 >> 2];
   HEAP8[$31 + 1 >> 0] = HEAP32[$27 >> 2];
   HEAP8[$31 + 2 >> 0] = HEAP32[$20 >> 2];
   HEAP8[$31 + 3 >> 0] = _stbi__get8(HEAP32[$7 >> 2] | 0) | 0;
   _stbi__hdr_convert(HEAP32[$19 >> 2] | 0, $31, HEAP32[$11 >> 2] | 0);
   HEAP32[$23 >> 2] = 1;
   HEAP32[$24 >> 2] = 0;
   _free(HEAP32[$18 >> 2] | 0);
   label = 31;
   break;
  } else if ((label | 0) == 39) {
   _free(HEAP32[$19 >> 2] | 0);
   _free(HEAP32[$18 >> 2] | 0);
   $196 = (_stbi__err(43741) | 0) != 0;
   HEAP32[$6 >> 2] = $196 ? 0 : 0;
   $307 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $307 | 0;
  } else if ((label | 0) == 42) {
   _free(HEAP32[$19 >> 2] | 0);
   $208 = (_stbi__err(43490) | 0) != 0;
   HEAP32[$6 >> 2] = $208 ? 0 : 0;
   $307 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $307 | 0;
  } else if ((label | 0) == 49) {
   _free(HEAP32[$19 >> 2] | 0);
   _free(HEAP32[$18 >> 2] | 0);
   $236 = (_stbi__err(43773) | 0) != 0;
   HEAP32[$6 >> 2] = $236 ? 0 : 0;
   $307 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $307 | 0;
  } else if ((label | 0) == 54) {
   _free(HEAP32[$19 >> 2] | 0);
   _free(HEAP32[$18 >> 2] | 0);
   $261 = (_stbi__err(43773) | 0) != 0;
   HEAP32[$6 >> 2] = $261 ? 0 : 0;
   $307 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $307 | 0;
  } else if ((label | 0) == 64) {
   if (!(HEAP32[$18 >> 2] | 0)) {
    label = 66;
    break;
   }
   _free(HEAP32[$18 >> 2] | 0);
   label = 66;
   break;
  }
 } while (0);
 while (1) {
  if ((label | 0) == 28) {
   label = 0;
   if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$17 >> 2] | 0)) {
    label = 66;
    continue;
   }
   HEAP32[$23 >> 2] = 0;
  } else if ((label | 0) == 31) {
   label = 0;
   _stbi__getn(HEAP32[$7 >> 2] | 0, $30, 4) | 0;
   $137 = Math_imul(HEAP32[$24 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0;
   $140 = (HEAP32[$19 >> 2] | 0) + ((Math_imul($137, HEAP32[$11 >> 2] | 0) | 0) << 2) | 0;
   $144 = $140 + ((Math_imul(HEAP32[$23 >> 2] | 0, HEAP32[$11 >> 2] | 0) | 0) << 2) | 0;
   _stbi__hdr_convert($144, $30, HEAP32[$11 >> 2] | 0);
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 1;
  } else if ((label | 0) == 66) {
   label = 0;
   HEAP32[$6 >> 2] = HEAP32[$19 >> 2];
   break;
  }
  if ((HEAP32[$23 >> 2] | 0) < (HEAP32[$16 >> 2] | 0)) {
   label = 31;
   continue;
  }
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
  label = 28;
 }
 $307 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $307 | 0;
}

function __ZN13TPPLPartition19TriangulateMonotoneEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0255 = 0, $$0257337 = 0, $$0269297 = 0, $$0271$lcssa352353 = 0, $$0271336 = 0, $$0278319 = 0, $$0280$lcssa351354 = 0, $$0280335 = 0, $$0313 = 0, $$1$in$lcssa = 0, $$1256 = 0, $$1258331 = 0, $$1270296 = 0, $$1274320 = 0, $$1274320$sink = 0, $$1279 = 0, $$1303 = 0, $$1303$in = 0, $$2259327 = 0, $$3 = 0, $$3260$lcssa = 0, $$3260321 = 0, $$4277 = 0, $$4311 = 0, $$lcssa355 = 0, $$sink = 0, $100 = 0, $101 = 0, $103 = 0, $107 = 0, $11 = 0, $110 = 0, $114 = 0, $118 = 0, $129 = 0, $13 = 0, $132 = 0, $145 = 0, $15 = 0, $17 = 0, $23 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0, $59 = 0, $6 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $76 = 0, $77 = 0, $79 = 0, $9 = 0, $94 = 0, $96 = 0, label = 0, sp = 0, $$1258331$looptemp = 0, $$2259327$looptemp = 0, $$1270296$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if (__ZNK8TPPLPoly5ValidEv($1) | 0) {
  __ZN8TPPLPolyC2Ev($3);
  $5 = __ZNK8TPPLPoly12GetNumPointsEv($1) | 0;
  $6 = __ZN8TPPLPoly9GetPointsEv($1) | 0;
  L3 : do if (($5 | 0) == 3) {
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $1);
   $$0255 = 1;
  } else {
   if (($5 | 0) > 1) {
    $$0257337 = 1;
    $$0271336 = 0;
    $$0280335 = 0;
    do {
     $9 = $6 + ($$0257337 * 24 | 0) | 0;
     $11 = __ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $9, $6 + ($$0280335 * 24 | 0) | 0) | 0;
     $$0280335 = $11 ? $$0257337 : $$0280335;
     $13 = __ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $6 + ($$0271336 * 24 | 0) | 0, $9) | 0;
     $$0271336 = $13 ? $$0257337 : $$0271336;
     $$0257337 = $$0257337 + 1 | 0;
    } while (($$0257337 | 0) != ($5 | 0));
    $15 = ($$0271336 | 0) == ($$0280335 | 0);
    if ($15) {
     $$0271$lcssa352353 = $$0271336;
     $$0280$lcssa351354 = $$0280335;
    } else {
     $$1258331 = $$0271336;
     do {
      $17 = $$1258331 + 1 | 0;
      $$1258331$looptemp = $$1258331;
      $$1258331 = ($17 | 0) < ($5 | 0) ? $17 : 0;
      if (!(__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $6 + ($$1258331 * 24 | 0) | 0, $6 + ($$1258331$looptemp * 24 | 0) | 0) | 0)) {
       $$0255 = 0;
       break L3;
      }
     } while (($$1258331 | 0) != ($$0280335 | 0));
     if ($15) {
      $$0271$lcssa352353 = $$0271336;
      $$0280$lcssa351354 = $$0280335;
     } else {
      $$2259327 = $$0280335;
      while (1) {
       $23 = $$2259327 + 1 | 0;
       $$2259327$looptemp = $$2259327;
       $$2259327 = ($23 | 0) < ($5 | 0) ? $23 : 0;
       if (!(__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $6 + ($$2259327$looptemp * 24 | 0) | 0, $6 + ($$2259327 * 24 | 0) | 0) | 0)) {
        $$0255 = 0;
        break L3;
       }
       if (($$2259327 | 0) == ($$0271336 | 0)) {
        $$0271$lcssa352353 = $$0271336;
        $$0280$lcssa351354 = $$0280335;
        break;
       }
      }
     }
    }
   } else {
    $$0271$lcssa352353 = 0;
    $$0280$lcssa351354 = 0;
   }
   $30 = __Znam(($5 | 0) > -1 ? $5 : -1) | 0;
   $31 = $5 >>> 0 > 1073741823 ? -1 : $5 << 2;
   $32 = __Znam($31) | 0;
   HEAP32[$32 >> 2] = $$0271$lcssa352353;
   HEAP8[$30 + $$0271$lcssa352353 >> 0] = 0;
   $34 = $$0271$lcssa352353 + 1 | 0;
   $35 = $5 + -1 | 0;
   if (($5 | 0) > 2) {
    $$0278319 = ($34 | 0) < ($5 | 0) ? $34 : 0;
    $$1274320 = (($$0271$lcssa352353 | 0) < 1 ? $5 : $$0271$lcssa352353) + -1 | 0;
    $$3260321 = 1;
    while (1) {
     do if (($$0278319 | 0) == ($$0280$lcssa351354 | 0)) {
      HEAP32[$32 + ($$3260321 << 2) >> 2] = $$1274320;
      $$1274320$sink = $$1274320;
      $$1279 = $$0280$lcssa351354;
      $$4277 = ($$1274320 | 0) < 1 ? $35 : $$1274320 + -1 | 0;
      $$sink = -1;
     } else {
      if (($$1274320 | 0) == ($$0280$lcssa351354 | 0)) {
       HEAP32[$32 + ($$3260321 << 2) >> 2] = $$0278319;
       $45 = $$0278319 + 1 | 0;
       $$1274320$sink = $$0278319;
       $$1279 = ($45 | 0) < ($5 | 0) ? $45 : 0;
       $$4277 = $$0280$lcssa351354;
       $$sink = 1;
       break;
      }
      $50 = $32 + ($$3260321 << 2) | 0;
      if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $6 + ($$0278319 * 24 | 0) | 0, $6 + ($$1274320 * 24 | 0) | 0) | 0) {
       HEAP32[$50 >> 2] = $$1274320;
       $$1274320$sink = $$1274320;
       $$1279 = $$0278319;
       $$4277 = ($$1274320 | 0) < 1 ? $35 : $$1274320 + -1 | 0;
       $$sink = -1;
       break;
      } else {
       HEAP32[$50 >> 2] = $$0278319;
       $53 = $$0278319 + 1 | 0;
       $$1274320$sink = $$0278319;
       $$1279 = ($53 | 0) < ($5 | 0) ? $53 : 0;
       $$4277 = $$1274320;
       $$sink = 1;
       break;
      }
     } while (0);
     HEAP8[$30 + $$1274320$sink >> 0] = $$sink;
     $$3260321 = $$3260321 + 1 | 0;
     if (($$3260321 | 0) == ($35 | 0)) {
      $$3260$lcssa = $35;
      break;
     } else {
      $$0278319 = $$1279;
      $$1274320 = $$4277;
     }
    }
   } else $$3260$lcssa = 1;
   HEAP32[$32 + ($$3260$lcssa << 2) >> 2] = $$0280$lcssa351354;
   HEAP8[$30 + $$0280$lcssa351354 >> 0] = 0;
   $59 = __Znam($31) | 0;
   HEAP32[$59 >> 2] = HEAP32[$32 >> 2];
   $63 = $59 + 4 | 0;
   HEAP32[$63 >> 2] = HEAP32[$32 + 4 >> 2];
   $65 = $32 + 8 | 0;
   $66 = HEAP32[$65 >> 2] | 0;
   if (($5 | 0) > 3) {
    $$0313 = 2;
    $$4311 = 2;
    $68 = $66;
    $96 = $65;
    while (1) {
     $67 = $30 + $68 | 0;
     $69 = HEAP8[$67 >> 0] | 0;
     $70 = $$0313 + -1 | 0;
     $76 = ($$0313 | 0) > 1;
     if ($69 << 24 >> 24 == (HEAP8[$30 + (HEAP32[$59 + ($70 << 2) >> 2] | 0) >> 0] | 0)) {
      L42 : do if ($76) {
       $101 = $6 + ($68 * 24 | 0) | 0;
       $$1303$in = $$0313;
       $103 = $69;
       while (1) {
        $$1303 = $$1303$in + -1 | 0;
        if ($103 << 24 >> 24 == 1) {
         $107 = $6 + ((HEAP32[$59 + ($$1303$in + -2 << 2) >> 2] | 0) * 24 | 0) | 0;
         $110 = $6 + ((HEAP32[$59 + ($$1303 << 2) >> 2] | 0) * 24 | 0) | 0;
         if (!(__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $101, $107, $110) | 0)) {
          $$1$in$lcssa = $$1303$in;
          break L42;
         }
         __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($3, $101, $107, $110);
         __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $3);
        } else {
         $114 = $6 + ((HEAP32[$59 + ($$1303 << 2) >> 2] | 0) * 24 | 0) | 0;
         $118 = $6 + ((HEAP32[$59 + ($$1303$in + -2 << 2) >> 2] | 0) * 24 | 0) | 0;
         if (!(__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $101, $114, $118) | 0)) {
          $$1$in$lcssa = $$1303$in;
          break L42;
         }
         __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($3, $101, $114, $118);
         __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $3);
        }
        if (($$1303$in | 0) <= 2) {
         $$1$in$lcssa = $$1303;
         break L42;
        }
        $$1303$in = $$1303;
        $103 = HEAP8[$67 >> 0] | 0;
       }
      } else $$1$in$lcssa = $$0313; while (0);
      HEAP32[$59 + ($$1$in$lcssa << 2) >> 2] = $68;
      $$3 = $$1$in$lcssa + 1 | 0;
     } else {
      if ($76) {
       $77 = $6 + ($68 * 24 | 0) | 0;
       $$0269297 = 0;
       $79 = $69;
       while (1) {
        if ($79 << 24 >> 24 == 1) __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($3, $6 + ((HEAP32[$59 + ($$0269297 + 1 << 2) >> 2] | 0) * 24 | 0) | 0, $6 + ((HEAP32[$59 + ($$0269297 << 2) >> 2] | 0) * 24 | 0) | 0, $77); else __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($3, $6 + ((HEAP32[$59 + ($$0269297 << 2) >> 2] | 0) * 24 | 0) | 0, $6 + ((HEAP32[$59 + ($$0269297 + 1 << 2) >> 2] | 0) * 24 | 0) | 0, $77);
        __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $3);
        $94 = $$0269297 + 1 | 0;
        if (($94 | 0) >= ($70 | 0)) break;
        $$0269297 = $94;
        $79 = HEAP8[$67 >> 0] | 0;
       }
       $100 = HEAP32[$96 >> 2] | 0;
      } else $100 = $68;
      HEAP32[$59 >> 2] = HEAP32[$32 + ($$4311 + -1 << 2) >> 2];
      HEAP32[$63 >> 2] = $100;
      $$3 = 2;
     }
     $$4311 = $$4311 + 1 | 0;
     $96 = $32 + ($$4311 << 2) | 0;
     $68 = HEAP32[$96 >> 2] | 0;
     if (($$4311 | 0) >= ($35 | 0)) break; else $$0313 = $$3;
    }
    if (($$3 | 0) > 1) {
     $$lcssa355 = $68;
     $145 = $$3 + -1 | 0;
     label = 49;
    }
   } else {
    $$lcssa355 = $66;
    $145 = 1;
    label = 49;
   }
   if ((label | 0) == 49) {
    $129 = $6 + ($$lcssa355 * 24 | 0) | 0;
    $$1270296 = 0;
    do {
     $$1270296$looptemp = $$1270296;
     $$1270296 = $$1270296 + 1 | 0;
     $132 = HEAP32[$59 + ($$1270296 << 2) >> 2] | 0;
     if ((HEAP8[$30 + $132 >> 0] | 0) == 1) __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($3, $6 + ((HEAP32[$59 + ($$1270296$looptemp << 2) >> 2] | 0) * 24 | 0) | 0, $6 + ($132 * 24 | 0) | 0, $129); else __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($3, $6 + ($132 * 24 | 0) | 0, $6 + ((HEAP32[$59 + ($$1270296$looptemp << 2) >> 2] | 0) * 24 | 0) | 0, $129);
     __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $3);
    } while (($$1270296 | 0) < ($145 | 0));
   }
   __ZdaPv($32);
   __ZdaPv($30);
   __ZdaPv($59);
   $$0255 = 1;
  } while (0);
  __ZN8TPPLPolyD2Ev($3);
  $$1256 = $$0255;
 } else $$1256 = 0;
 STACKTOP = sp;
 return $$1256 | 0;
}

function _stbtt_InitFont_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $102 = 0, $104 = 0, $106 = 0, $11 = 0, $111 = 0, $115 = 0, $117 = 0, $12 = 0, $128 = 0, $13 = 0, $130 = 0, $138 = 0, $14 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $187 = 0, $19 = 0, $196 = 0, $20 = 0, $21 = 0, $212 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $46 = 0, $5 = 0, $51 = 0, $56 = 0, $6 = 0, $61 = 0, $66 = 0, $7 = 0, $71 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $$byval_copy2 = sp + 260 | 0;
 $$byval_copy1 = sp + 248 | 0;
 $3 = sp + 244 | 0;
 $4 = sp + 240 | 0;
 $5 = sp + 236 | 0;
 $6 = sp + 232 | 0;
 $7 = sp + 228 | 0;
 $8 = sp + 224 | 0;
 $9 = sp + 220 | 0;
 $10 = sp + 216 | 0;
 $11 = sp + 204 | 0;
 $12 = sp + 192 | 0;
 $13 = sp + 180 | 0;
 $14 = sp + 168 | 0;
 $15 = sp + 164 | 0;
 $16 = sp + 160 | 0;
 $17 = sp + 156 | 0;
 $18 = sp + 152 | 0;
 $19 = sp + 148 | 0;
 $20 = sp + 136 | 0;
 $21 = sp + 124 | 0;
 $22 = sp + 112 | 0;
 $23 = sp + 100 | 0;
 $24 = sp + 88 | 0;
 $25 = sp + 76 | 0;
 $26 = sp + 64 | 0;
 $27 = sp + 52 | 0;
 $28 = sp + 40 | 0;
 $29 = sp + 28 | 0;
 $30 = sp + 16 | 0;
 $31 = sp + 4 | 0;
 $32 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] = HEAP32[$6 >> 2];
 $40 = (HEAP32[$4 >> 2] | 0) + 48 | 0;
 _stbtt__new_buf($11, 0, 0);
 HEAP32[$40 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$40 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 HEAP32[$40 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
 HEAP32[$7 >> 2] = _stbtt__find_table(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 40096) | 0;
 $46 = _stbtt__find_table(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 40101) | 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = $46;
 $51 = _stbtt__find_table(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 40106) | 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] = $51;
 $56 = _stbtt__find_table(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 40111) | 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] = $56;
 $61 = _stbtt__find_table(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 40116) | 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] = $61;
 $66 = _stbtt__find_table(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 40121) | 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] = $66;
 $71 = _stbtt__find_table(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 40126) | 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] = $71;
 if (HEAP32[$7 >> 2] | 0) if (HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0) if (HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) if (HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) {
  if (HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0) {
   if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0)) {
    HEAP32[$3 >> 2] = 0;
    $215 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $215 | 0;
   }
  } else {
   HEAP32[$15 >> 2] = 2;
   HEAP32[$16 >> 2] = 0;
   HEAP32[$17 >> 2] = 0;
   HEAP32[$18 >> 2] = 0;
   HEAP32[$19 >> 2] = _stbtt__find_table(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 40131) | 0;
   if (!(HEAP32[$19 >> 2] | 0)) {
    HEAP32[$3 >> 2] = 0;
    $215 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $215 | 0;
   }
   $102 = (HEAP32[$4 >> 2] | 0) + 96 | 0;
   _stbtt__new_buf($20, 0, 0);
   HEAP32[$102 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$102 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
   HEAP32[$102 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
   $104 = (HEAP32[$4 >> 2] | 0) + 108 | 0;
   _stbtt__new_buf($21, 0, 0);
   HEAP32[$104 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$104 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
   HEAP32[$104 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
   $106 = (HEAP32[$4 >> 2] | 0) + 48 | 0;
   _stbtt__new_buf($22, (HEAP32[$5 >> 2] | 0) + (HEAP32[$19 >> 2] | 0) | 0, 536870912);
   HEAP32[$106 >> 2] = HEAP32[$22 >> 2];
   HEAP32[$106 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
   HEAP32[$106 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
   $111 = (HEAP32[$4 >> 2] | 0) + 48 | 0;
   HEAP32[$12 >> 2] = HEAP32[$111 >> 2];
   HEAP32[$12 + 4 >> 2] = HEAP32[$111 + 4 >> 2];
   HEAP32[$12 + 8 >> 2] = HEAP32[$111 + 8 >> 2];
   _stbtt__buf_skip($12, 2);
   _stbtt__buf_seek($12, (_stbtt__buf_get8($12) | 0) & 255);
   _stbtt__cff_get_index($23, $12);
   _stbtt__cff_get_index($24, $12);
   HEAP32[$14 >> 2] = HEAP32[$24 >> 2];
   HEAP32[$14 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
   HEAP32[$14 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
   HEAP32[$$byval_copy2 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
   _stbtt__cff_index_get($25, $$byval_copy2, 0);
   HEAP32[$13 >> 2] = HEAP32[$25 >> 2];
   HEAP32[$13 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
   HEAP32[$13 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
   _stbtt__cff_get_index($26, $12);
   $115 = (HEAP32[$4 >> 2] | 0) + 72 | 0;
   _stbtt__cff_get_index($27, $12);
   HEAP32[$115 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$115 + 4 >> 2] = HEAP32[$27 + 4 >> 2];
   HEAP32[$115 + 8 >> 2] = HEAP32[$27 + 8 >> 2];
   _stbtt__dict_get_ints($13, 17, 1, $16);
   _stbtt__dict_get_ints($13, 262, 1, $15);
   _stbtt__dict_get_ints($13, 292, 1, $17);
   _stbtt__dict_get_ints($13, 293, 1, $18);
   $117 = (HEAP32[$4 >> 2] | 0) + 84 | 0;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
   HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
   HEAP32[$$byval_copy2 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
   _stbtt__get_subrs($28, $$byval_copy1, $$byval_copy2);
   HEAP32[$117 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$117 + 4 >> 2] = HEAP32[$28 + 4 >> 2];
   HEAP32[$117 + 8 >> 2] = HEAP32[$28 + 8 >> 2];
   if ((HEAP32[$15 >> 2] | 0) != 2) {
    HEAP32[$3 >> 2] = 0;
    $215 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $215 | 0;
   }
   if (!(HEAP32[$16 >> 2] | 0)) {
    HEAP32[$3 >> 2] = 0;
    $215 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $215 | 0;
   }
   do if (HEAP32[$17 >> 2] | 0) {
    if (HEAP32[$18 >> 2] | 0) {
     _stbtt__buf_seek($12, HEAP32[$17 >> 2] | 0);
     $128 = (HEAP32[$4 >> 2] | 0) + 96 | 0;
     _stbtt__cff_get_index($29, $12);
     HEAP32[$128 >> 2] = HEAP32[$29 >> 2];
     HEAP32[$128 + 4 >> 2] = HEAP32[$29 + 4 >> 2];
     HEAP32[$128 + 8 >> 2] = HEAP32[$29 + 8 >> 2];
     $130 = (HEAP32[$4 >> 2] | 0) + 108 | 0;
     _stbtt__buf_range($30, $12, HEAP32[$18 >> 2] | 0, (HEAP32[$12 + 8 >> 2] | 0) - (HEAP32[$18 >> 2] | 0) | 0);
     HEAP32[$130 >> 2] = HEAP32[$30 >> 2];
     HEAP32[$130 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
     HEAP32[$130 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
     break;
    }
    HEAP32[$3 >> 2] = 0;
    $215 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $215 | 0;
   } while (0);
   _stbtt__buf_seek($12, HEAP32[$16 >> 2] | 0);
   $138 = (HEAP32[$4 >> 2] | 0) + 60 | 0;
   _stbtt__cff_get_index($31, $12);
   HEAP32[$138 >> 2] = HEAP32[$31 >> 2];
   HEAP32[$138 + 4 >> 2] = HEAP32[$31 + 4 >> 2];
   HEAP32[$138 + 8 >> 2] = HEAP32[$31 + 8 >> 2];
  }
  HEAP32[$8 >> 2] = _stbtt__find_table(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 40136) | 0;
  if (HEAP32[$8 >> 2] | 0) {
   $149 = (_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) + 4 | 0) | 0) & 65535;
   HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] = $149;
  } else HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] = 65535;
  HEAP32[$10 >> 2] = (_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) + 2 | 0) | 0) & 65535;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 40 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  while (1) {
   if ((HEAP32[$9 >> 2] | 0) >= (HEAP32[$10 >> 2] | 0)) break;
   HEAP32[$32 >> 2] = (HEAP32[$7 >> 2] | 0) + 4 + (HEAP32[$9 >> 2] << 3);
   L38 : do switch ((_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$32 >> 2] | 0) | 0) | 0) & 65535 | 0) {
   case 3:
    {
     switch ((_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$32 >> 2] | 0) + 2 | 0) | 0) & 65535 | 0) {
     case 10:
     case 1:
      break;
     default:
      break L38;
     }
     $187 = (HEAP32[$7 >> 2] | 0) + (_ttULONG((HEAP32[$5 >> 2] | 0) + (HEAP32[$32 >> 2] | 0) + 4 | 0) | 0) | 0;
     HEAP32[(HEAP32[$4 >> 2] | 0) + 40 >> 2] = $187;
     break;
    }
   case 0:
    {
     $196 = (HEAP32[$7 >> 2] | 0) + (_ttULONG((HEAP32[$5 >> 2] | 0) + (HEAP32[$32 >> 2] | 0) + 4 | 0) | 0) | 0;
     HEAP32[(HEAP32[$4 >> 2] | 0) + 40 >> 2] = $196;
     break;
    }
   default:
    {}
   } while (0);
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
  }
  if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 40 >> 2] | 0)) {
   HEAP32[$3 >> 2] = 0;
   $215 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $215 | 0;
  } else {
   $212 = (_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0) + 50 | 0) | 0) & 65535;
   HEAP32[(HEAP32[$4 >> 2] | 0) + 44 >> 2] = $212;
   HEAP32[$3 >> 2] = 1;
   $215 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $215 | 0;
  }
 }
 HEAP32[$3 >> 2] = 0;
 $215 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $215 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i131 = 0, $$0$i$i$i135 = 0, $$0$i$i$i139 = 0, $$0$i$i$i144 = 0, $$0$i$i$idx$i = 0, $$2103 = 0, $$899$ph = 0, $$9 = 0, $104 = 0, $105 = 0, $16 = 0, $17 = 0, $19 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $74 = 0, $77 = 0, $80 = 0, $84 = 0, $90 = 0, $92 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 $6 = sp + 24 | 0;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 68) if ((HEAP8[$0 + 1 >> 0] | 0) == 118) {
  $16 = $0 + 2 | 0;
  $17 = HEAP8[$16 >> 0] | 0;
  if (($17 + -49 & 255) < 9) {
   $19 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16, $1) | 0;
   if (($19 | 0) == ($1 | 0)) {
    $$9 = $0;
    break;
   }
   if ((HEAP8[$19 >> 0] | 0) != 95) {
    $$9 = $0;
    break;
   }
   $25 = $19 - $16 | 0;
   $26 = $19 + 1 | 0;
   if (($26 | 0) == ($1 | 0)) {
    $$9 = $0;
    break;
   }
   if ((HEAP8[$26 >> 0] | 0) != 112) {
    $30 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26, $1, $2) | 0;
    if (($30 | 0) == ($26 | 0)) {
     $$9 = $0;
     break;
    }
    $33 = $2 + 4 | 0;
    if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$33 >> 2] | 0)) {
     $$9 = $0;
     break;
    };
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($5, $16, $25);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5, 0, 47917) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 47926) | 0;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i131 = 0;
    while (1) {
     if (($$0$i$i$i131 | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i131 << 2) >> 2] = 0;
     $$0$i$i$i131 = $$0$i$i$i131 + 1 | 0;
    }
    $45 = HEAP8[$3 + 11 >> 0] | 0;
    $46 = $45 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$33 >> 2] | 0) + -24 | 0, $46 ? HEAP32[$3 >> 2] | 0 : $3, $46 ? HEAP32[$3 + 4 >> 2] | 0 : $45 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$9 = $30;
    break;
   }
   $53 = $19 + 2 | 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($5, $16, $25);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5, 0, 47928) | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i135 = 0;
   while (1) {
    if (($$0$i$i$i135 | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i135 << 2) >> 2] = 0;
    $$0$i$i$i135 = $$0$i$i$i135 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 47926) | 0;
   HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   $$0$i$i$i139 = 0;
   while (1) {
    if (($$0$i$i$i139 | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i$i139 << 2) >> 2] = 0;
    $$0$i$i$i139 = $$0$i$i$i139 + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $6);
   $60 = $2 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if ($61 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($61, $3);
    HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $$9 = $53;
   break;
  };
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  $$0$i$i = 0;
  while (1) {
   if (($$0$i$i | 0) == 3) break;
   HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
   $$0$i$i = $$0$i$i + 1 | 0;
  }
  if ($17 << 24 >> 24 == 95) {
   $$2103 = $16;
   label = 44;
  } else {
   $70 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
   if (($70 | 0) == ($16 | 0)) {
    $$2103 = $16;
    label = 44;
   } else {
    $73 = $2 + 4 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) != ($74 | 0)) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $74 + -24 | 0);
     $77 = $4 + 11 | 0;
     if ((HEAP8[$77 >> 0] | 0) < 0) {
      $80 = HEAP32[$4 >> 2] | 0;
      HEAP8[$3 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($80, $3);
      HEAP32[$4 + 4 >> 2] = 0;
     } else {
      HEAP8[$3 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($4, $3);
      HEAP8[$77 >> 0] = 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($4);
     HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     $$0$i$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i$i | 0) == 3) break;
      HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     $84 = HEAP32[$73 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($84 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$73 >> 2] = $84 + -24;
     $$2103 = $70;
     label = 44;
    }
   }
  }
  do if ((label | 0) == 44) {
   if (($$2103 | 0) == ($1 | 0)) $$899$ph = $0; else if ((HEAP8[$$2103 >> 0] | 0) == 95) {
    $90 = $$2103 + 1 | 0;
    if (($90 | 0) == ($1 | 0)) $$899$ph = $0; else {
     $92 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($90, $1, $2) | 0;
     if (($92 | 0) == ($90 | 0)) $$899$ph = $0; else {
      $95 = $2 + 4 | 0;
      if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$95 >> 2] | 0)) break;
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 47917, $4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 47926) | 0;
      HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i144 = 0;
      while (1) {
       if (($$0$i$i$i144 | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i144 << 2) >> 2] = 0;
       $$0$i$i$i144 = $$0$i$i$i144 + 1 | 0;
      }
      $104 = HEAP8[$3 + 11 >> 0] | 0;
      $105 = $104 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$95 >> 2] | 0) + -24 | 0, $105 ? HEAP32[$3 >> 2] | 0 : $3, $105 ? HEAP32[$3 + 4 >> 2] | 0 : $104 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$899$ph = $92;
     }
    }
   } else $$899$ph = $0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   $$9 = $$899$ph;
   break L1;
  } while (0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
  $$9 = $0;
 } else $$9 = $0; else $$9 = $0; else $$9 = $0; while (0);
 STACKTOP = sp;
 return $$9 | 0;
}

function _stbi__convert_format16($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $129 = 0, $13 = 0, $14 = 0, $146 = 0, $15 = 0, $203 = 0, $226 = 0, $251 = 0, $26 = 0, $274 = 0, $313 = 0, $35 = 0, $42 = 0, $45 = 0, $5 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $80 = 0, $9 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 if ((HEAP32[$8 >> 2] | 0) == (HEAP32[$7 >> 2] | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  $313 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $313 | 0;
 }
 if (!((HEAP32[$8 >> 2] | 0) >= 1 & (HEAP32[$8 >> 2] | 0) <= 4)) ___assert_fail(43587, 43392, 1636, 43935);
 $26 = Math_imul(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
 HEAP32[$13 >> 2] = _stbi__malloc((Math_imul($26, HEAP32[$10 >> 2] | 0) | 0) << 1) | 0;
 if (!(HEAP32[$13 >> 2] | 0)) {
  _free(HEAP32[$6 >> 2] | 0);
  $35 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$5 >> 2] = $35 ? 0 : 0;
  $313 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $313 | 0;
 }
 HEAP32[$12 >> 2] = 0;
 L12 : while (1) {
  $42 = HEAP32[$6 >> 2] | 0;
  if ((HEAP32[$12 >> 2] | 0) >= (HEAP32[$10 >> 2] | 0)) break;
  $45 = Math_imul(HEAP32[$12 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
  HEAP32[$14 >> 2] = $42 + ((Math_imul($45, HEAP32[$7 >> 2] | 0) | 0) << 1);
  $52 = Math_imul(HEAP32[$12 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
  HEAP32[$15 >> 2] = (HEAP32[$13 >> 2] | 0) + ((Math_imul($52, HEAP32[$8 >> 2] | 0) | 0) << 1);
  L15 : do switch ((HEAP32[$7 >> 2] << 3) + (HEAP32[$8 >> 2] | 0) | 0) {
  case 10:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$15 >> 2] >> 1] = HEAP16[HEAP32[$14 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 2 >> 1] = -1;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 2;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 4;
    }
    break;
   }
  case 11:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $80 = HEAP16[HEAP32[$14 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 4 >> 1] = $80;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 2 >> 1] = $80;
     HEAP16[HEAP32[$15 >> 2] >> 1] = $80;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 2;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 6;
    }
    break;
   }
  case 12:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $97 = HEAP16[HEAP32[$14 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 4 >> 1] = $97;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 2 >> 1] = $97;
     HEAP16[HEAP32[$15 >> 2] >> 1] = $97;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 6 >> 1] = -1;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 2;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
    }
    break;
   }
  case 17:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$15 >> 2] >> 1] = HEAP16[HEAP32[$14 >> 2] >> 1] | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 4;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 2;
    }
    break;
   }
  case 19:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $129 = HEAP16[HEAP32[$14 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 4 >> 1] = $129;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 2 >> 1] = $129;
     HEAP16[HEAP32[$15 >> 2] >> 1] = $129;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 4;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 6;
    }
    break;
   }
  case 20:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $146 = HEAP16[HEAP32[$14 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 4 >> 1] = $146;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 2 >> 1] = $146;
     HEAP16[HEAP32[$15 >> 2] >> 1] = $146;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 6 >> 1] = HEAP16[(HEAP32[$14 >> 2] | 0) + 2 >> 1] | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 4;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
    }
    break;
   }
  case 28:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$15 >> 2] >> 1] = HEAP16[HEAP32[$14 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[$14 >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 4 >> 1] = HEAP16[(HEAP32[$14 >> 2] | 0) + 4 >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 6 >> 1] = -1;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 6;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
    }
    break;
   }
  case 25:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $203 = _stbi__compute_y_16(HEAPU16[HEAP32[$14 >> 2] >> 1] | 0, HEAPU16[(HEAP32[$14 >> 2] | 0) + 2 >> 1] | 0, HEAPU16[(HEAP32[$14 >> 2] | 0) + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$15 >> 2] >> 1] = $203;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 6;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 2;
    }
    break;
   }
  case 26:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $226 = _stbi__compute_y_16(HEAPU16[HEAP32[$14 >> 2] >> 1] | 0, HEAPU16[(HEAP32[$14 >> 2] | 0) + 2 >> 1] | 0, HEAPU16[(HEAP32[$14 >> 2] | 0) + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$15 >> 2] >> 1] = $226;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 2 >> 1] = -1;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 6;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 4;
    }
    break;
   }
  case 33:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $251 = _stbi__compute_y_16(HEAPU16[HEAP32[$14 >> 2] >> 1] | 0, HEAPU16[(HEAP32[$14 >> 2] | 0) + 2 >> 1] | 0, HEAPU16[(HEAP32[$14 >> 2] | 0) + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$15 >> 2] >> 1] = $251;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 8;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 2;
    }
    break;
   }
  case 34:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $274 = _stbi__compute_y_16(HEAPU16[HEAP32[$14 >> 2] >> 1] | 0, HEAPU16[(HEAP32[$14 >> 2] | 0) + 2 >> 1] | 0, HEAPU16[(HEAP32[$14 >> 2] | 0) + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$15 >> 2] >> 1] = $274;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[$14 >> 2] | 0) + 6 >> 1] | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 8;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 4;
    }
    break;
   }
  case 35:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$15 >> 2] >> 1] = HEAP16[HEAP32[$14 >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[$14 >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[(HEAP32[$15 >> 2] | 0) + 4 >> 1] = HEAP16[(HEAP32[$14 >> 2] | 0) + 4 >> 1] | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 8;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 6;
    }
    break;
   }
  default:
   {
    label = 46;
    break L12;
   }
  } while (0);
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 }
 if ((label | 0) == 46) ___assert_fail(43639, 43392, 1665, 43935);
 _free($42);
 HEAP32[$5 >> 2] = HEAP32[$13 >> 2];
 $313 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $313 | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (setTempRet0($_0$1 | 0), $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = getTempRet0() | 0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}
function _stbi__convert_format($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $126 = 0, $13 = 0, $14 = 0, $143 = 0, $15 = 0, $200 = 0, $223 = 0, $248 = 0, $271 = 0, $310 = 0, $32 = 0, $39 = 0, $42 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $77 = 0, $8 = 0, $9 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 if ((HEAP32[$8 >> 2] | 0) == (HEAP32[$7 >> 2] | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  $310 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $310 | 0;
 }
 if (!((HEAP32[$8 >> 2] | 0) >= 1 & (HEAP32[$8 >> 2] | 0) <= 4)) ___assert_fail(43587, 43392, 1587, 43618);
 HEAP32[$13 >> 2] = _stbi__malloc_mad3(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, 0) | 0;
 if (!(HEAP32[$13 >> 2] | 0)) {
  _free(HEAP32[$6 >> 2] | 0);
  $32 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$5 >> 2] = $32 ? 0 : 0;
  $310 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $310 | 0;
 }
 HEAP32[$12 >> 2] = 0;
 L12 : while (1) {
  $39 = HEAP32[$6 >> 2] | 0;
  if ((HEAP32[$12 >> 2] | 0) >= (HEAP32[$10 >> 2] | 0)) break;
  $42 = Math_imul(HEAP32[$12 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
  HEAP32[$14 >> 2] = $39 + (Math_imul($42, HEAP32[$7 >> 2] | 0) | 0);
  $49 = Math_imul(HEAP32[$12 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
  HEAP32[$15 >> 2] = (HEAP32[$13 >> 2] | 0) + (Math_imul($49, HEAP32[$8 >> 2] | 0) | 0);
  L15 : do switch ((HEAP32[$7 >> 2] << 3) + (HEAP32[$8 >> 2] | 0) | 0) {
  case 10:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$15 >> 2] >> 0] = HEAP8[HEAP32[$14 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 2;
    }
    break;
   }
  case 11:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $77 = HEAP8[HEAP32[$14 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 2 >> 0] = $77;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 1 >> 0] = $77;
     HEAP8[HEAP32[$15 >> 2] >> 0] = $77;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 3;
    }
    break;
   }
  case 12:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $94 = HEAP8[HEAP32[$14 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 2 >> 0] = $94;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 1 >> 0] = $94;
     HEAP8[HEAP32[$15 >> 2] >> 0] = $94;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 4;
    }
    break;
   }
  case 17:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$15 >> 2] >> 0] = HEAP8[HEAP32[$14 >> 2] >> 0] | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 2;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
    break;
   }
  case 19:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $126 = HEAP8[HEAP32[$14 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 2 >> 0] = $126;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 1 >> 0] = $126;
     HEAP8[HEAP32[$15 >> 2] >> 0] = $126;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 2;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 3;
    }
    break;
   }
  case 20:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $143 = HEAP8[HEAP32[$14 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 2 >> 0] = $143;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 1 >> 0] = $143;
     HEAP8[HEAP32[$15 >> 2] >> 0] = $143;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[$14 >> 2] | 0) + 1 >> 0] | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 2;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 4;
    }
    break;
   }
  case 28:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$15 >> 2] >> 0] = HEAP8[HEAP32[$14 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$14 >> 2] | 0) + 1 >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$14 >> 2] | 0) + 2 >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 3;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 4;
    }
    break;
   }
  case 25:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $200 = _stbi__compute_y(HEAPU8[HEAP32[$14 >> 2] >> 0] | 0, HEAPU8[(HEAP32[$14 >> 2] | 0) + 1 >> 0] | 0, HEAPU8[(HEAP32[$14 >> 2] | 0) + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$15 >> 2] >> 0] = $200;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 3;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
    break;
   }
  case 26:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $223 = _stbi__compute_y(HEAPU8[HEAP32[$14 >> 2] >> 0] | 0, HEAPU8[(HEAP32[$14 >> 2] | 0) + 1 >> 0] | 0, HEAPU8[(HEAP32[$14 >> 2] | 0) + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$15 >> 2] >> 0] = $223;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 3;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 2;
    }
    break;
   }
  case 33:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $248 = _stbi__compute_y(HEAPU8[HEAP32[$14 >> 2] >> 0] | 0, HEAPU8[(HEAP32[$14 >> 2] | 0) + 1 >> 0] | 0, HEAPU8[(HEAP32[$14 >> 2] | 0) + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$15 >> 2] >> 0] = $248;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 4;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
    break;
   }
  case 34:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     $271 = _stbi__compute_y(HEAPU8[HEAP32[$14 >> 2] >> 0] | 0, HEAPU8[(HEAP32[$14 >> 2] | 0) + 1 >> 0] | 0, HEAPU8[(HEAP32[$14 >> 2] | 0) + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$15 >> 2] >> 0] = $271;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$14 >> 2] | 0) + 3 >> 0] | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 4;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 2;
    }
    break;
   }
  case 35:
   {
    HEAP32[$11 >> 2] = (HEAP32[$9 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$15 >> 2] >> 0] = HEAP8[HEAP32[$14 >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$14 >> 2] | 0) + 1 >> 0] | 0;
     HEAP8[(HEAP32[$15 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$14 >> 2] | 0) + 2 >> 0] | 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 4;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 3;
    }
    break;
   }
  default:
   {
    label = 46;
    break L12;
   }
  } while (0);
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 }
 if ((label | 0) == 46) ___assert_fail(43639, 43392, 1616, 43618);
 _free($39);
 HEAP32[$5 >> 2] = HEAP32[$13 >> 2];
 $310 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $310 | 0;
}

function _fons__getGlyph($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $377 = 0, $388 = 0, $400 = 0, $412 = 0, $417 = 0, $5 = 0, $6 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $5 = sp + 112 | 0;
 $6 = sp + 108 | 0;
 $7 = sp + 104 | 0;
 $8 = sp + 100 | 0;
 $9 = sp + 118 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 96 | 0;
 $12 = sp + 92 | 0;
 $13 = sp + 88 | 0;
 $14 = sp + 84 | 0;
 $15 = sp + 80 | 0;
 $16 = sp + 76 | 0;
 $17 = sp + 72 | 0;
 $18 = sp + 68 | 0;
 $19 = sp + 64 | 0;
 $20 = sp + 60 | 0;
 $21 = sp + 56 | 0;
 $22 = sp + 52 | 0;
 $23 = sp + 48 | 0;
 $24 = sp + 44 | 0;
 $25 = sp + 40 | 0;
 $26 = sp + 36 | 0;
 $27 = sp + 32 | 0;
 $28 = sp + 28 | 0;
 $29 = sp + 24 | 0;
 $30 = sp + 20 | 0;
 $31 = sp + 16 | 0;
 $32 = sp + 12 | 0;
 $33 = sp + 8 | 0;
 $34 = sp + 4 | 0;
 $35 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP16[$9 >> 1] = $3;
 HEAP16[$10 >> 1] = $4;
 HEAP32[$26 >> 2] = 0;
 HEAPF32[$28 >> 2] = +(HEAP16[$9 >> 1] | 0) / 10.0;
 HEAP32[$33 >> 2] = HEAP32[$7 >> 2];
 if ((HEAP16[$9 >> 1] | 0) < 2) {
  HEAP32[$5 >> 2] = 0;
  $417 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $417 | 0;
 }
 if ((HEAP16[$10 >> 1] | 0) > 20) HEAP16[$10 >> 1] = 20;
 HEAP32[$29 >> 2] = (HEAP16[$10 >> 1] | 0) + 2;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 20568 >> 2] = 0;
 HEAP32[$27 >> 2] = (_fons__hashint(HEAP32[$8 >> 2] | 0) | 0) & 255;
 HEAP32[$11 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 220 + (HEAP32[$27 >> 2] << 2) >> 2];
 while (1) {
  $62 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$11 >> 2] | 0) == -1) break;
  if ((HEAP32[(HEAP32[$62 + 208 >> 2] | 0) + (HEAP32[$11 >> 2] << 5) >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) if ((HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 208 >> 2] | 0) + (HEAP32[$11 >> 2] << 5) + 12 >> 1] | 0) == (HEAP16[$9 >> 1] | 0)) if ((HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 208 >> 2] | 0) + (HEAP32[$11 >> 2] << 5) + 14 >> 1] | 0) == (HEAP16[$10 >> 1] | 0)) {
   label = 10;
   break;
  }
  HEAP32[$11 >> 2] = HEAP32[(HEAP32[(HEAP32[$7 >> 2] | 0) + 208 >> 2] | 0) + (HEAP32[$11 >> 2] << 5) + 8 >> 2];
 }
 if ((label | 0) == 10) {
  HEAP32[$5 >> 2] = (HEAP32[(HEAP32[$7 >> 2] | 0) + 208 >> 2] | 0) + (HEAP32[$11 >> 2] << 5);
  $417 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $417 | 0;
 }
 HEAP32[$12 >> 2] = _fons__tt_getGlyphIndex($62, HEAP32[$8 >> 2] | 0) | 0;
 L19 : do if (!(HEAP32[$12 >> 2] | 0)) {
  HEAP32[$11 >> 2] = 0;
  while (1) {
   if ((HEAP32[$11 >> 2] | 0) >= (HEAP32[(HEAP32[$7 >> 2] | 0) + 1324 >> 2] | 0)) break L19;
   HEAP32[$34 >> 2] = HEAP32[(HEAP32[(HEAP32[$6 >> 2] | 0) + 64 >> 2] | 0) + (HEAP32[(HEAP32[$7 >> 2] | 0) + 1244 + (HEAP32[$11 >> 2] << 2) >> 2] << 2) >> 2];
   HEAP32[$35 >> 2] = _fons__tt_getGlyphIndex(HEAP32[$34 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
   if (HEAP32[$35 >> 2] | 0) break;
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
  }
  HEAP32[$12 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
 } while (0);
 HEAPF32[$25 >> 2] = +_fons__tt_getPixelHeightScale(HEAP32[$33 >> 2] | 0, +HEAPF32[$28 >> 2]);
 _fons__tt_buildGlyphBitmap(HEAP32[$33 >> 2] | 0, HEAP32[$12 >> 2] | 0, +HEAPF32[$28 >> 2], +HEAPF32[$25 >> 2], $13, $14, $15, $16, $17, $18) | 0;
 HEAP32[$19 >> 2] = (HEAP32[$17 >> 2] | 0) - (HEAP32[$15 >> 2] | 0) + (HEAP32[$29 >> 2] << 1);
 HEAP32[$20 >> 2] = (HEAP32[$18 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) + (HEAP32[$29 >> 2] << 1);
 HEAP32[$30 >> 2] = _fons__atlasAddRect(HEAP32[(HEAP32[$6 >> 2] | 0) + 68 >> 2] | 0, HEAP32[$19 >> 2] | 0, HEAP32[$20 >> 2] | 0, $21, $22) | 0;
 if (!(HEAP32[$30 >> 2] | 0)) if (HEAP32[(HEAP32[$6 >> 2] | 0) + 21056 >> 2] | 0) {
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$6 >> 2] | 0) + 21056 >> 2] & 3](HEAP32[(HEAP32[$6 >> 2] | 0) + 21060 >> 2] | 0, 1, 0);
  HEAP32[$30 >> 2] = _fons__atlasAddRect(HEAP32[(HEAP32[$6 >> 2] | 0) + 68 >> 2] | 0, HEAP32[$19 >> 2] | 0, HEAP32[$20 >> 2] | 0, $21, $22) | 0;
 }
 if (!(HEAP32[$30 >> 2] | 0)) {
  HEAP32[$5 >> 2] = 0;
  $417 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $417 | 0;
 }
 HEAP32[$26 >> 2] = _fons__allocGlyph(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[HEAP32[$26 >> 2] >> 2] = HEAP32[$8 >> 2];
 HEAP16[(HEAP32[$26 >> 2] | 0) + 12 >> 1] = HEAP16[$9 >> 1] | 0;
 HEAP16[(HEAP32[$26 >> 2] | 0) + 14 >> 1] = HEAP16[$10 >> 1] | 0;
 HEAP32[(HEAP32[$26 >> 2] | 0) + 4 >> 2] = HEAP32[$12 >> 2];
 HEAP16[(HEAP32[$26 >> 2] | 0) + 16 >> 1] = HEAP32[$21 >> 2];
 HEAP16[(HEAP32[$26 >> 2] | 0) + 18 >> 1] = HEAP32[$22 >> 2];
 HEAP16[(HEAP32[$26 >> 2] | 0) + 20 >> 1] = (HEAP16[(HEAP32[$26 >> 2] | 0) + 16 >> 1] | 0) + (HEAP32[$19 >> 2] | 0);
 HEAP16[(HEAP32[$26 >> 2] | 0) + 22 >> 1] = (HEAP16[(HEAP32[$26 >> 2] | 0) + 18 >> 1] | 0) + (HEAP32[$20 >> 2] | 0);
 HEAP16[(HEAP32[$26 >> 2] | 0) + 24 >> 1] = ~~(+HEAPF32[$25 >> 2] * +(HEAP32[$13 >> 2] | 0) * 10.0);
 HEAP16[(HEAP32[$26 >> 2] | 0) + 26 >> 1] = (HEAP32[$15 >> 2] | 0) - (HEAP32[$29 >> 2] | 0);
 HEAP16[(HEAP32[$26 >> 2] | 0) + 28 >> 1] = (HEAP32[$16 >> 2] | 0) - (HEAP32[$29 >> 2] | 0);
 HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 220 + (HEAP32[$27 >> 2] << 2) >> 2];
 HEAP32[(HEAP32[$7 >> 2] | 0) + 220 + (HEAP32[$27 >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$7 >> 2] | 0) + 216 >> 2] | 0) - 1;
 HEAP32[$32 >> 2] = (HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] | 0) + ((HEAP16[(HEAP32[$26 >> 2] | 0) + 16 >> 1] | 0) + (HEAP32[$29 >> 2] | 0) + (Math_imul((HEAP16[(HEAP32[$26 >> 2] | 0) + 18 >> 1] | 0) + (HEAP32[$29 >> 2] | 0) | 0, HEAP32[HEAP32[$6 >> 2] >> 2] | 0) | 0));
 _fons__tt_renderGlyphBitmap(HEAP32[$33 >> 2] | 0, HEAP32[$32 >> 2] | 0, (HEAP32[$19 >> 2] | 0) - (HEAP32[$29 >> 2] << 1) | 0, (HEAP32[$20 >> 2] | 0) - (HEAP32[$29 >> 2] << 1) | 0, HEAP32[HEAP32[$6 >> 2] >> 2] | 0, +HEAPF32[$25 >> 2], +HEAPF32[$25 >> 2], HEAP32[$12 >> 2] | 0);
 HEAP32[$32 >> 2] = (HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] | 0) + ((HEAP16[(HEAP32[$26 >> 2] | 0) + 16 >> 1] | 0) + (Math_imul(HEAP16[(HEAP32[$26 >> 2] | 0) + 18 >> 1] | 0, HEAP32[HEAP32[$6 >> 2] >> 2] | 0) | 0));
 HEAP32[$24 >> 2] = 0;
 while (1) {
  if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$20 >> 2] | 0)) break;
  HEAP8[(HEAP32[$32 >> 2] | 0) + (Math_imul(HEAP32[$24 >> 2] | 0, HEAP32[HEAP32[$6 >> 2] >> 2] | 0) | 0) >> 0] = 0;
  HEAP8[(HEAP32[$32 >> 2] | 0) + ((HEAP32[$19 >> 2] | 0) - 1 + (Math_imul(HEAP32[$24 >> 2] | 0, HEAP32[HEAP32[$6 >> 2] >> 2] | 0) | 0)) >> 0] = 0;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
 }
 HEAP32[$23 >> 2] = 0;
 while (1) {
  if ((HEAP32[$23 >> 2] | 0) >= (HEAP32[$19 >> 2] | 0)) break;
  HEAP8[(HEAP32[$32 >> 2] | 0) + (HEAP32[$23 >> 2] | 0) >> 0] = 0;
  HEAP8[(HEAP32[$32 >> 2] | 0) + ((HEAP32[$23 >> 2] | 0) + (Math_imul((HEAP32[$20 >> 2] | 0) - 1 | 0, HEAP32[HEAP32[$6 >> 2] >> 2] | 0) | 0)) >> 0] = 0;
  HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 1;
 }
 if ((HEAP16[$10 >> 1] | 0) > 0) {
  HEAP32[(HEAP32[$6 >> 2] | 0) + 20568 >> 2] = 0;
  HEAP32[$31 >> 2] = (HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] | 0) + ((HEAP16[(HEAP32[$26 >> 2] | 0) + 16 >> 1] | 0) + (Math_imul(HEAP16[(HEAP32[$26 >> 2] | 0) + 18 >> 1] | 0, HEAP32[HEAP32[$6 >> 2] >> 2] | 0) | 0));
  _fons__blur(HEAP32[$6 >> 2] | 0, HEAP32[$31 >> 2] | 0, HEAP32[$19 >> 2] | 0, HEAP32[$20 >> 2] | 0, HEAP32[HEAP32[$6 >> 2] >> 2] | 0, HEAP16[$10 >> 1] | 0);
 }
 $377 = _fons__mini(HEAP32[(HEAP32[$6 >> 2] | 0) + 48 >> 2] | 0, HEAP16[(HEAP32[$26 >> 2] | 0) + 16 >> 1] | 0) | 0;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 48 >> 2] = $377;
 $388 = _fons__mini(HEAP32[(HEAP32[$6 >> 2] | 0) + 48 + 4 >> 2] | 0, HEAP16[(HEAP32[$26 >> 2] | 0) + 18 >> 1] | 0) | 0;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 48 + 4 >> 2] = $388;
 $400 = _fons__maxi(HEAP32[(HEAP32[$6 >> 2] | 0) + 48 + 8 >> 2] | 0, HEAP16[(HEAP32[$26 >> 2] | 0) + 20 >> 1] | 0) | 0;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 48 + 8 >> 2] = $400;
 $412 = _fons__maxi(HEAP32[(HEAP32[$6 >> 2] | 0) + 48 + 12 >> 2] | 0, HEAP16[(HEAP32[$26 >> 2] | 0) + 22 >> 1] | 0) | 0;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 48 + 12 >> 2] = $412;
 HEAP32[$5 >> 2] = HEAP32[$26 >> 2];
 $417 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $417 | 0;
}

function _stbi__pic_load_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $174 = 0, $18 = 0, $180 = 0, $19 = 0, $190 = 0, $20 = 0, $21 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $36 = 0, $43 = 0, $46 = 0, $5 = 0, $50 = 0, $6 = 0, $63 = 0, $7 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 88 | 0;
 $11 = sp + 84 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 76 | 0;
 $14 = sp + 72 | 0;
 $15 = sp;
 $16 = sp + 68 | 0;
 $17 = sp + 64 | 0;
 $18 = sp + 60 | 0;
 $19 = sp + 56 | 0;
 $20 = sp + 52 | 0;
 $21 = sp + 48 | 0;
 $22 = sp + 44 | 0;
 $23 = sp + 120 | 0;
 $24 = sp + 116 | 0;
 $25 = sp + 40 | 0;
 $26 = sp + 36 | 0;
 $27 = sp + 32 | 0;
 $28 = sp + 112 | 0;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$12 >> 2] = 0;
 while (1) {
  if ((HEAP32[$12 >> 2] | 0) == 10) {
   label = 3;
   break;
  }
  $36 = HEAP32[$12 >> 2] | 0;
  HEAP32[$12 >> 2] = $36 + 1;
  HEAP32[$16 >> 2] = $15 + ($36 * 3 | 0);
  HEAP32[$14 >> 2] = (_stbi__get8(HEAP32[$6 >> 2] | 0) | 0) & 255;
  $43 = _stbi__get8(HEAP32[$6 >> 2] | 0) | 0;
  HEAP8[HEAP32[$16 >> 2] >> 0] = $43;
  $46 = _stbi__get8(HEAP32[$6 >> 2] | 0) | 0;
  HEAP8[(HEAP32[$16 >> 2] | 0) + 1 >> 0] = $46;
  $50 = _stbi__get8(HEAP32[$6 >> 2] | 0) | 0;
  HEAP8[(HEAP32[$16 >> 2] | 0) + 2 >> 0] = $50;
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | (HEAPU8[(HEAP32[$16 >> 2] | 0) + 2 >> 0] | 0);
  if (_stbi__at_eof(HEAP32[$6 >> 2] | 0) | 0) {
   label = 5;
   break;
  }
  if ((HEAPU8[HEAP32[$16 >> 2] >> 0] | 0 | 0) != 8) {
   label = 7;
   break;
  }
  if (!(HEAP32[$14 >> 2] | 0)) {
   label = 9;
   break;
  }
 }
 if ((label | 0) == 3) {
  $32 = (_stbi__err(43518) | 0) != 0;
  HEAP32[$5 >> 2] = $32 ? 0 : 0;
  $245 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $245 | 0;
 } else if ((label | 0) == 5) {
  $63 = (_stbi__err(43817) | 0) != 0;
  HEAP32[$5 >> 2] = $63 ? 0 : 0;
  $245 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $245 | 0;
 } else if ((label | 0) == 7) {
  $72 = (_stbi__err(43518) | 0) != 0;
  HEAP32[$5 >> 2] = $72 ? 0 : 0;
  $245 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $245 | 0;
 } else if ((label | 0) == 9) {
  HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$11 >> 2] & 16 | 0 ? 4 : 3;
  HEAP32[$13 >> 2] = 0;
  L10 : while (1) {
   if ((HEAP32[$13 >> 2] | 0) >= (HEAP32[$8 >> 2] | 0)) {
    label = 57;
    break;
   }
   HEAP32[$17 >> 2] = 0;
   while (1) {
    if ((HEAP32[$17 >> 2] | 0) >= (HEAP32[$12 >> 2] | 0)) break;
    HEAP32[$18 >> 2] = $15 + ((HEAP32[$17 >> 2] | 0) * 3 | 0);
    HEAP32[$19 >> 2] = (HEAP32[$10 >> 2] | 0) + ((Math_imul(HEAP32[$13 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0) << 2);
    L16 : do switch (HEAPU8[(HEAP32[$18 >> 2] | 0) + 1 >> 0] | 0 | 0) {
    case 0:
     {
      HEAP32[$20 >> 2] = 0;
      while (1) {
       if ((HEAP32[$20 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) break L16;
       if (!(_stbi__readval(HEAP32[$6 >> 2] | 0, HEAPU8[(HEAP32[$18 >> 2] | 0) + 2 >> 0] | 0, HEAP32[$19 >> 2] | 0) | 0)) {
        label = 18;
        break L10;
       }
       HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
       HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 4;
      }
      break;
     }
    case 1:
     {
      HEAP32[$21 >> 2] = HEAP32[$7 >> 2];
      while (1) {
       if ((HEAP32[$21 >> 2] | 0) <= 0) break L16;
       HEAP8[$23 >> 0] = _stbi__get8(HEAP32[$6 >> 2] | 0) | 0;
       if (_stbi__at_eof(HEAP32[$6 >> 2] | 0) | 0) {
        label = 23;
        break L10;
       }
       if ((HEAPU8[$23 >> 0] | 0 | 0) > (HEAP32[$21 >> 2] | 0)) HEAP8[$23 >> 0] = HEAP32[$21 >> 2];
       if (!(_stbi__readval(HEAP32[$6 >> 2] | 0, HEAPU8[(HEAP32[$18 >> 2] | 0) + 2 >> 0] | 0, $24) | 0)) {
        label = 27;
        break L10;
       }
       HEAP32[$22 >> 2] = 0;
       while (1) {
        if ((HEAP32[$22 >> 2] | 0) >= (HEAPU8[$23 >> 0] | 0 | 0)) break;
        _stbi__copyval(HEAPU8[(HEAP32[$18 >> 2] | 0) + 2 >> 0] | 0, HEAP32[$19 >> 2] | 0, $24);
        HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 1;
        HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 4;
       }
       HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) - (HEAPU8[$23 >> 0] | 0);
      }
      break;
     }
    case 2:
     {
      HEAP32[$25 >> 2] = HEAP32[$7 >> 2];
      while (1) {
       if ((HEAP32[$25 >> 2] | 0) <= 0) break L16;
       HEAP32[$26 >> 2] = (_stbi__get8(HEAP32[$6 >> 2] | 0) | 0) & 255;
       if (_stbi__at_eof(HEAP32[$6 >> 2] | 0) | 0) {
        label = 35;
        break L10;
       }
       $180 = HEAP32[$26 >> 2] | 0;
       L40 : do if ((HEAP32[$26 >> 2] | 0) >= 128) {
        if (($180 | 0) == 128) HEAP32[$26 >> 2] = _stbi__get16be(HEAP32[$6 >> 2] | 0) | 0; else HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) - 127;
        if ((HEAP32[$26 >> 2] | 0) > (HEAP32[$25 >> 2] | 0)) {
         label = 41;
         break L10;
        }
        if (!(_stbi__readval(HEAP32[$6 >> 2] | 0, HEAPU8[(HEAP32[$18 >> 2] | 0) + 2 >> 0] | 0, $28) | 0)) {
         label = 43;
         break L10;
        }
        HEAP32[$27 >> 2] = 0;
        while (1) {
         if ((HEAP32[$27 >> 2] | 0) >= (HEAP32[$26 >> 2] | 0)) break L40;
         _stbi__copyval(HEAPU8[(HEAP32[$18 >> 2] | 0) + 2 >> 0] | 0, HEAP32[$19 >> 2] | 0, $28);
         HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
         HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 4;
        }
       } else {
        HEAP32[$26 >> 2] = $180 + 1;
        if ((HEAP32[$26 >> 2] | 0) > (HEAP32[$25 >> 2] | 0)) {
         label = 48;
         break L10;
        }
        HEAP32[$27 >> 2] = 0;
        while (1) {
         if ((HEAP32[$27 >> 2] | 0) >= (HEAP32[$26 >> 2] | 0)) break L40;
         if (!(_stbi__readval(HEAP32[$6 >> 2] | 0, HEAPU8[(HEAP32[$18 >> 2] | 0) + 2 >> 0] | 0, HEAP32[$19 >> 2] | 0) | 0)) {
          label = 52;
          break L10;
         }
         HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
         HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 4;
        }
       } while (0);
       HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) - (HEAP32[$26 >> 2] | 0);
      }
      break;
     }
    default:
     {
      label = 14;
      break L10;
     }
    } while (0);
    HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
   }
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
  }
  switch (label | 0) {
  case 14:
   {
    $102 = (_stbi__err(43518) | 0) != 0;
    HEAP32[$5 >> 2] = $102 ? 0 : 0;
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  case 18:
   {
    HEAP32[$5 >> 2] = 0;
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  case 23:
   {
    $130 = (_stbi__err(43817) | 0) != 0;
    HEAP32[$5 >> 2] = $130 ? 0 : 0;
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  case 27:
   {
    HEAP32[$5 >> 2] = 0;
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  case 35:
   {
    $174 = (_stbi__err(43817) | 0) != 0;
    HEAP32[$5 >> 2] = $174 ? 0 : 0;
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  case 41:
   {
    $190 = (_stbi__err(43817) | 0) != 0;
    HEAP32[$5 >> 2] = $190 ? 0 : 0;
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  case 43:
   {
    HEAP32[$5 >> 2] = 0;
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  case 48:
   {
    $218 = (_stbi__err(43817) | 0) != 0;
    HEAP32[$5 >> 2] = $218 ? 0 : 0;
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  case 52:
   {
    HEAP32[$5 >> 2] = 0;
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  case 57:
   {
    HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
    $245 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $245 | 0;
   }
  }
 }
 return 0;
}

function __sg_gl_create_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $11 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $226 = 0, $23 = 0, $237 = 0, $286 = 0, $294 = 0, $3 = 0, $337 = 0, $4 = 0, $5 = 0, $6 = 0, $62 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 76 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 68 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 60 | 0;
 $8 = sp + 56 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $14 = sp + 36 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $21 = sp + 8 | 0;
 $22 = sp + 4 | 0;
 $23 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!((HEAP32[$3 >> 2] | 0) != 0 & (HEAP32[$4 >> 2] | 0) != 0)) ___assert_fail(32931, 17628, 5761, 32943);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5762, 32943);
 __sg_image_common_init((HEAP32[$3 >> 2] | 0) + 12 | 0, HEAP32[$4 >> 2] | 0);
 HEAP8[(HEAP32[$3 >> 2] | 0) + 88 + 20 >> 0] = 0 != (HEAP32[(HEAP32[$4 >> 2] | 0) + 848 >> 2] | 0) & 1;
 if (!(__sg_gl_supported_texture_format(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0)) {
  _puts(32963) | 0;
  HEAP32[$2 >> 2] = 3;
  $337 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $337 | 0;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) == 3) if (!(HEAP8[2156604] & 1)) {
  _puts(33007) | 0;
  HEAP32[$2 >> 2] = 3;
  $337 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $337 | 0;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) == 4) if (!(HEAP8[2156605] & 1)) {
  _puts(33048) | 0;
  HEAP32[$2 >> 2] = 3;
  $337 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $337 | 0;
 }
 $62 = __sg_is_valid_rendertarget_depth_format(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
 $64 = (HEAP32[$3 >> 2] | 0) + 12 | 0;
 L21 : do if ($62) {
  if ((HEAP32[$64 + 24 >> 2] | 0) != 1) ___assert_fail(33092, 17628, 5790, 32943);
  if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 68 >> 2] | 0) != 1) ___assert_fail(33092, 17628, 5790, 32943);
  if (HEAP8[(HEAP32[$3 >> 2] | 0) + 88 + 20 >> 0] & 1) ___assert_fail(33160, 17628, 5791, 32943); else {
   _glGenRenderbuffers(1, (HEAP32[$3 >> 2] | 0) + 88 + 4 | 0);
   _glBindRenderbuffer(36161, HEAP32[(HEAP32[$3 >> 2] | 0) + 88 + 4 >> 2] | 0);
   HEAP32[$5 >> 2] = __sg_gl_depth_attachment_format(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
   _glRenderbufferStorage(36161, HEAP32[$5 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 8 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 12 >> 2] | 0);
   break;
  }
 } else {
  $100 = __sg_gl_texture_target(HEAP32[$64 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2] = $100;
  HEAP32[$6 >> 2] = __sg_gl_teximage_internal_format(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
  if (HEAP8[(HEAP32[$3 >> 2] | 0) + 88 + 20 >> 0] & 1) {
   HEAP32[$7 >> 2] = 0;
   while (1) {
    $119 = HEAP32[$4 >> 2] | 0;
    if ((HEAP32[$7 >> 2] | 0) >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 68 >> 2] | 0)) break;
    if (!(HEAP32[$119 + 848 + (HEAP32[$7 >> 2] << 2) >> 2] | 0)) {
     label = 24;
     break;
    }
    HEAP32[(HEAP32[$3 >> 2] | 0) + 88 + 12 + (HEAP32[$7 >> 2] << 2) >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 848 + (HEAP32[$7 >> 2] << 2) >> 2];
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
   }
   if ((label | 0) == 24) ___assert_fail(33182, 17628, 5822, 32943);
   if (!(HEAP32[$119 + 856 >> 2] | 0)) break;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 856 >> 2];
   break;
  }
  HEAP32[$8 >> 2] = __sg_gl_teximage_format(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
  HEAP8[$9 >> 0] = (__sg_is_compressed_pixel_format(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0) & 1;
  HEAP32[$10 >> 2] = 0;
  while (1) {
   if ((HEAP32[$10 >> 2] | 0) >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 68 >> 2] | 0)) break L21;
   _glGenTextures(1, (HEAP32[$3 >> 2] | 0) + 88 + 12 + (HEAP32[$10 >> 2] << 2) | 0);
   if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 88 + 12 + (HEAP32[$10 >> 2] << 2) >> 2] | 0)) break;
   __sg_gl_cache_store_texture_binding(0);
   __sg_gl_cache_bind_texture(0, HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 88 + 12 + (HEAP32[$10 >> 2] << 2) >> 2] | 0);
   HEAP32[$11 >> 2] = __sg_gl_filter(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 36 >> 2] | 0) | 0;
   HEAP32[$12 >> 2] = __sg_gl_filter(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 40 >> 2] | 0) | 0;
   _glTexParameteri(HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2] | 0, 10241, HEAP32[$11 >> 2] | 0);
   _glTexParameteri(HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2] | 0, 10240, HEAP32[$12 >> 2] | 0);
   if (HEAP8[2157644] & 1) if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 60 >> 2] | 0) >>> 0 > 1) {
    HEAP32[$13 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 60 >> 2];
    if ((HEAP32[$13 >> 2] | 0) > (HEAP32[539412] | 0)) HEAP32[$13 >> 2] = HEAP32[539412];
    _glTexParameteri(HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2] | 0, 34046, HEAP32[$13 >> 2] | 0);
   }
   $226 = HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2] | 0;
   if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) == 2) {
    _glTexParameteri($226 | 0, 10242, 33071);
    _glTexParameteri(HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2] | 0, 10243, 33071);
   } else {
    _glTexParameteri($226 | 0, 10242, __sg_gl_wrap(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 44 >> 2] | 0) | 0);
    $237 = HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2] | 0;
    _glTexParameteri($237 | 0, 10243, __sg_gl_wrap(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 48 >> 2] | 0) | 0);
   }
   HEAP32[$14 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) == 2 ? 6 : 1;
   HEAP32[$15 >> 2] = 0;
   HEAP32[$16 >> 2] = 0;
   while (1) {
    if ((HEAP32[$16 >> 2] | 0) >= (HEAP32[$14 >> 2] | 0)) break;
    HEAP32[$17 >> 2] = 0;
    while (1) {
     if ((HEAP32[$17 >> 2] | 0) >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 20 >> 2] | 0)) break;
     HEAP32[$18 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 88 >> 2];
     if (2 == (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0)) HEAP32[$18 >> 2] = __sg_gl_cubeface_target(HEAP32[$16 >> 2] | 0) | 0;
     HEAP32[$19 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 + (HEAP32[$16 >> 2] << 7) + (HEAP32[$17 >> 2] << 3) >> 2];
     HEAP32[$20 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 + (HEAP32[$16 >> 2] << 7) + (HEAP32[$17 >> 2] << 3) + 4 >> 2];
     $286 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 8 >> 2] >> HEAP32[$17 >> 2];
     HEAP32[$21 >> 2] = $286;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) == 0 ? 1 : $286;
     $294 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 12 >> 2] >> HEAP32[$17 >> 2];
     HEAP32[$22 >> 2] = $294;
     HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) == 0 ? 1 : $294;
     if (1 == (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0)) label = 48; else if (2 == (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0)) label = 48;
     do if ((label | 0) == 48) {
      label = 0;
      if (HEAP8[$9 >> 0] & 1) {
       _glCompressedTexImage2D(HEAP32[$18 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0, 0, HEAP32[$20 >> 2] | 0, HEAP32[$19 >> 2] | 0);
       break;
      } else {
       HEAP32[$23 >> 2] = __sg_gl_teximage_type(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
       _glTexImage2D(HEAP32[$18 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0, 0, HEAP32[$8 >> 2] | 0, HEAP32[$23 >> 2] | 0, HEAP32[$19 >> 2] | 0);
       break;
      }
     } while (0);
     HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
    }
    HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
   }
   __sg_gl_cache_restore_texture_binding(0);
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
  }
  ___assert_fail(33206, 17628, 5835, 32943);
 } while (0);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5941, 32943);
 HEAP32[$2 >> 2] = 2;
 $337 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $337 | 0;
}

function _stbi__process_marker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $111 = 0, $12 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $222 = 0, $243 = 0, $252 = 0, $3 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $62 = 0, $64 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $2 = sp + 136 | 0;
 $3 = sp + 132 | 0;
 $4 = sp + 128 | 0;
 $5 = sp + 124 | 0;
 $6 = sp + 120 | 0;
 $7 = sp + 116 | 0;
 $8 = sp + 112 | 0;
 $9 = sp + 108 | 0;
 $10 = sp + 104 | 0;
 $11 = sp + 100 | 0;
 $12 = sp;
 $13 = sp + 96 | 0;
 $14 = sp + 92 | 0;
 $15 = sp + 88 | 0;
 $16 = sp + 84 | 0;
 $17 = sp + 80 | 0;
 $18 = sp + 76 | 0;
 $19 = sp + 72 | 0;
 $20 = sp + 68 | 0;
 $21 = sp + 64 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 switch (HEAP32[$4 >> 2] | 0) {
 case 255:
  {
   HEAP32[$2 >> 2] = _stbi__err(45110) | 0;
   $252 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $252 | 0;
  }
 case 221:
  {
   if ((_stbi__get16be(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) != 4) {
    HEAP32[$2 >> 2] = _stbi__err(45126) | 0;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   } else {
    $31 = _stbi__get16be(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0;
    HEAP32[(HEAP32[$3 >> 2] | 0) + 18436 >> 2] = $31;
    HEAP32[$2 >> 2] = 1;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   }
   break;
  }
 case 219:
  {
   HEAP32[$5 >> 2] = (_stbi__get16be(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) - 2;
   while (1) {
    if ((HEAP32[$5 >> 2] | 0) <= 0) {
     label = 19;
     break;
    }
    HEAP32[$6 >> 2] = (_stbi__get8(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) & 255;
    HEAP32[$7 >> 2] = HEAP32[$6 >> 2] >> 4;
    HEAP32[$8 >> 2] = (HEAP32[$7 >> 2] | 0) != 0 & 1;
    HEAP32[$9 >> 2] = HEAP32[$6 >> 2] & 15;
    if ((HEAP32[$7 >> 2] | 0) != 0 & (HEAP32[$7 >> 2] | 0) != 1) {
     label = 9;
     break;
    }
    if ((HEAP32[$9 >> 2] | 0) > 3) {
     label = 11;
     break;
    }
    HEAP32[$10 >> 2] = 0;
    while (1) {
     $62 = (HEAP32[$8 >> 2] | 0) != 0;
     if ((HEAP32[$10 >> 2] | 0) >= 64) break;
     $64 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
     if ($62) $69 = _stbi__get16be($64) | 0; else $69 = (_stbi__get8($64) | 0) & 255;
     HEAP16[(HEAP32[$3 >> 2] | 0) + 13444 + (HEAP32[$9 >> 2] << 7) + ((HEAPU8[9680 + (HEAP32[$10 >> 2] | 0) >> 0] | 0) << 1) >> 1] = $69;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - ($62 ? 129 : 65);
   }
   if ((label | 0) == 9) {
    HEAP32[$2 >> 2] = _stbi__err(45138) | 0;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   } else if ((label | 0) == 11) {
    HEAP32[$2 >> 2] = _stbi__err(45151) | 0;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   } else if ((label | 0) == 19) {
    HEAP32[$2 >> 2] = (HEAP32[$5 >> 2] | 0) == 0 & 1;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   }
   break;
  }
 case 196:
  {
   HEAP32[$5 >> 2] = (_stbi__get16be(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) - 2;
   while (1) {
    if ((HEAP32[$5 >> 2] | 0) <= 0) {
     label = 40;
     break;
    }
    HEAP32[$14 >> 2] = 0;
    HEAP32[$15 >> 2] = (_stbi__get8(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) & 255;
    HEAP32[$16 >> 2] = HEAP32[$15 >> 2] >> 4;
    HEAP32[$17 >> 2] = HEAP32[$15 >> 2] & 15;
    if ((HEAP32[$16 >> 2] | 0) > 1 | (HEAP32[$17 >> 2] | 0) > 3) {
     label = 23;
     break;
    }
    HEAP32[$13 >> 2] = 0;
    while (1) {
     if ((HEAP32[$13 >> 2] | 0) >= 16) break;
     $111 = (_stbi__get8(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) & 255;
     HEAP32[$12 + (HEAP32[$13 >> 2] << 2) >> 2] = $111;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + (HEAP32[$12 + (HEAP32[$13 >> 2] << 2) >> 2] | 0);
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - 17;
    $125 = HEAP32[$3 >> 2] | 0;
    if (!(HEAP32[$16 >> 2] | 0)) {
     if (!(_stbi__build_huffman($125 + 4 + ((HEAP32[$17 >> 2] | 0) * 1680 | 0) | 0, $12) | 0)) {
      label = 29;
      break;
     }
     HEAP32[$11 >> 2] = (HEAP32[$3 >> 2] | 0) + 4 + ((HEAP32[$17 >> 2] | 0) * 1680 | 0) + 1024;
    } else {
     if (!(_stbi__build_huffman($125 + 6724 + ((HEAP32[$17 >> 2] | 0) * 1680 | 0) | 0, $12) | 0)) {
      label = 32;
      break;
     }
     HEAP32[$11 >> 2] = (HEAP32[$3 >> 2] | 0) + 6724 + ((HEAP32[$17 >> 2] | 0) * 1680 | 0) + 1024;
    }
    HEAP32[$13 >> 2] = 0;
    while (1) {
     if ((HEAP32[$13 >> 2] | 0) >= (HEAP32[$14 >> 2] | 0)) break;
     $151 = _stbi__get8(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0;
     HEAP8[(HEAP32[$11 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) >> 0] = $151;
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
    }
    if (HEAP32[$16 >> 2] | 0) _stbi__build_fast_ac((HEAP32[$3 >> 2] | 0) + 13956 + (HEAP32[$17 >> 2] << 10) | 0, (HEAP32[$3 >> 2] | 0) + 6724 + ((HEAP32[$17 >> 2] | 0) * 1680 | 0) | 0);
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
   }
   if ((label | 0) == 23) {
    HEAP32[$2 >> 2] = _stbi__err(45165) | 0;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   } else if ((label | 0) == 29) {
    HEAP32[$2 >> 2] = 0;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   } else if ((label | 0) == 32) {
    HEAP32[$2 >> 2] = 0;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   } else if ((label | 0) == 40) {
    HEAP32[$2 >> 2] = (HEAP32[$5 >> 2] | 0) == 0 & 1;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   }
   break;
  }
 default:
  {
   if (!((HEAP32[$4 >> 2] | 0) >= 224 & (HEAP32[$4 >> 2] | 0) <= 239 | (HEAP32[$4 >> 2] | 0) == 254)) {
    HEAP32[$2 >> 2] = _stbi__err(45215) | 0;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   }
   HEAP32[$5 >> 2] = _stbi__get16be(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0;
   if ((HEAP32[$5 >> 2] | 0) < 2) if ((HEAP32[$4 >> 2] | 0) == 254) {
    HEAP32[$2 >> 2] = _stbi__err(45180) | 0;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   } else {
    HEAP32[$2 >> 2] = _stbi__err(45192) | 0;
    $252 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $252 | 0;
   }
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - 2;
   if ((HEAP32[$4 >> 2] | 0) == 224 & (HEAP32[$5 >> 2] | 0) >= 5) {
    HEAP32[$18 >> 2] = 1;
    HEAP32[$19 >> 2] = 0;
    while (1) {
     if ((HEAP32[$19 >> 2] | 0) >= 5) break;
     $199 = (_stbi__get8(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) & 255;
     if (($199 | 0) != (HEAPU8[45204 + (HEAP32[$19 >> 2] | 0) >> 0] | 0 | 0)) HEAP32[$18 >> 2] = 0;
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - 5;
    if (HEAP32[$18 >> 2] | 0) HEAP32[(HEAP32[$3 >> 2] | 0) + 18404 >> 2] = 1;
   } else if ((HEAP32[$4 >> 2] | 0) == 238 & (HEAP32[$5 >> 2] | 0) >= 12) {
    HEAP32[$20 >> 2] = 1;
    HEAP32[$21 >> 2] = 0;
    while (1) {
     if ((HEAP32[$21 >> 2] | 0) >= 6) break;
     $222 = (_stbi__get8(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) & 255;
     if (($222 | 0) != (HEAPU8[45209 + (HEAP32[$21 >> 2] | 0) >> 0] | 0 | 0)) HEAP32[$20 >> 2] = 0;
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1;
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - 6;
    if (HEAP32[$20 >> 2] | 0) {
     _stbi__get8(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0;
     _stbi__get16be(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0;
     _stbi__get16be(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0;
     $243 = (_stbi__get8(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) & 255;
     HEAP32[(HEAP32[$3 >> 2] | 0) + 18408 >> 2] = $243;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - 6;
    }
   }
   _stbi__skip(HEAP32[HEAP32[$3 >> 2] >> 2] | 0, HEAP32[$5 >> 2] | 0);
   HEAP32[$2 >> 2] = 1;
   $252 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $252 | 0;
  }
 }
 return 0;
}

function __ZL5framev() {
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0.0, $2 = 0, $23 = 0.0, $24 = 0.0, $3 = 0, $39 = 0, $4 = 0, $44 = 0, $5 = 0, $51 = 0.0, $53 = 0.0, $54 = 0, $6 = 0, $60 = 0.0, $62 = 0, $7 = 0, $72 = 0, $8 = 0, $81 = 0, $87 = 0, $9 = 0, $92 = 0, $93 = 0, $94 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 $$byval_copy12 = sp + 712 | 0;
 $$byval_copy10 = sp + 128 | 0;
 $$byval_copy = sp + 584 | 0;
 $0 = sp + 520 | 0;
 $1 = sp + 456 | 0;
 $2 = sp + 696 | 0;
 $3 = sp + 684 | 0;
 $4 = sp + 672 | 0;
 $5 = sp + 384 | 0;
 $6 = sp + 660 | 0;
 $7 = sp + 320 | 0;
 $8 = sp + 648 | 0;
 $9 = sp + 256 | 0;
 $10 = sp;
 $11 = sp + 192 | 0;
 $12 = sp + 448 | 0;
 _sfetch_dowork();
 $14 = +(_sapp_width() | 0);
 __ZL15HMM_Perspectiveffff($0, $14 / +(_sapp_height() | 0));
 __ZL8HMM_Vec3fff($2, 0.0, 1.5, +HEAPF32[(HEAP32[544716] | 0) + 28 >> 2] * +HEAPF32[2908]);
 __ZL8HMM_Vec3fff($3, 0.0, 0.0, 0.0);
 __ZL8HMM_Vec3fff($4, 0.0, 1.0, 0.0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$$byval_copy10 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy10 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy10 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 _HMM_LookAt($1, $$byval_copy, $$byval_copy10, $$byval_copy12);
 dest = $$byval_copy10;
 src = $0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$byval_copy12;
 src = $1;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _HMM_MultiplyMat4($$byval_copy, $$byval_copy10, $$byval_copy12);
 $23 = +HEAPF32[544724];
 __ZL8HMM_Vec3fff($6, 1.0, 0.0, 0.0);
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
 HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
 _HMM_Rotate($5, $23, $$byval_copy12);
 $24 = +HEAPF32[544725];
 __ZL8HMM_Vec3fff($8, 0.0, 1.0, 0.0);
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
 _HMM_Rotate($7, $24, $$byval_copy12);
 dest = $$byval_copy10;
 src = $5;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$byval_copy12;
 src = $7;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _HMM_MultiplyMat4($9, $$byval_copy10, $$byval_copy12);
 dest = $$byval_copy10;
 src = $9;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$byval_copy12;
 src = 2178904;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _HMM_MultiplyMat4($10, $$byval_copy10, $$byval_copy12);
 dest = 2178904;
 src = $10;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$$byval_copy12 >> 2] = +HEAPF32[544722] + +HEAPF32[544724];
 HEAPF32[544722] = +__ZN2Dr19EqualizeAngle0to360IfEET_RKS1_($$byval_copy12);
 HEAPF32[$$byval_copy12 >> 2] = +HEAPF32[544723] + +HEAPF32[544725];
 HEAPF32[544723] = +__ZN2Dr19EqualizeAngle0to360IfEET_RKS1_($$byval_copy12);
 __ZN6DrVec23setEff(2178896, 0.0, 0.0);
 dest = $10 + 64 | 0;
 src = 2178904;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$byval_copy10;
 src = $$byval_copy;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$byval_copy12;
 src = 2178904;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _HMM_MultiplyMat4($11, $$byval_copy10, $$byval_copy12);
 dest = $10;
 src = $11;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$$byval_copy10 >> 2] = (HEAP8[(HEAP32[544716] | 0) + 24 >> 0] | 0) == 0 ? 0.0 : 1.0;
 $39 = _sapp_width() | 0;
 _sg_begin_default_pass(54064, $39, _sapp_height() | 0);
 HEAP32[$12 >> 2] = HEAP32[13542];
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$12 >> 2];
 _sg_apply_pipeline($$byval_copy12);
 _sg_apply_bindings(54172);
 HEAP32[$$byval_copy12 >> 2] = $10;
 HEAP32[$$byval_copy12 + 4 >> 2] = 128;
 __Z17sg_apply_uniforms15sg_shader_stageiRK8sg_range(0, 0, $$byval_copy12);
 HEAP32[$$byval_copy12 >> 2] = $$byval_copy10;
 HEAP32[$$byval_copy12 + 4 >> 2] = 16;
 __Z17sg_apply_uniforms15sg_shader_stageiRK8sg_range(1, 0, $$byval_copy12);
 $44 = HEAP32[544716] | 0;
 _sg_draw(0, (HEAP32[$44 + 4 >> 2] | 0) - (HEAP32[$44 >> 2] | 0) >> 2, 1);
 _fonsClearState(HEAP32[276928] | 0);
 _sgl_defaults();
 _sgl_matrix_mode_projection();
 $51 = +_sapp_widthf();
 _sgl_ortho(0.0, $51, +_sapp_heightf(), 0.0, -1.0, 1.0);
 $53 = +HEAPF32[276929];
 $54 = HEAP32[276928] | 0;
 if ((HEAP32[276930] | 0) != -1) {
  _fonsSetAlign($54, 65);
  _fonsSetFont($54, HEAP32[276930] | 0);
  _fonsSetSize($54, $53 * 18.0);
  _fonsSetColor($54, _sfons_rgba(-1, -1, -1, -1) | 0);
  _fonsSetBlur($54, 0.0);
  _fonsSetSpacing($54, 0.0);
  $60 = $53 * 10.0;
  __ZNSt3__29to_stringEl($11, HEAP32[544721] | 0);
  $62 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($11, 0, 41633) | 0;
  HEAP32[$$byval_copy12 >> 2] = HEAP32[$62 >> 2];
  HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$62 + 4 >> 2];
  HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$62 + 8 >> 2];
  HEAP32[$62 >> 2] = 0;
  HEAP32[$62 + 4 >> 2] = 0;
  HEAP32[$62 + 8 >> 2] = 0;
  +_fonsDrawText($54, $60, $53 * 20.0, (HEAP8[$$byval_copy12 + 11 >> 0] | 0) < 0 ? HEAP32[$$byval_copy12 >> 2] | 0 : $$byval_copy12, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy12);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  __ZNSt3__29to_stringEi($11, (__ZNK6DrMesh10indexCountEv(HEAP32[544716] | 0) | 0) / 3 | 0);
  $72 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($11, 0, 41639) | 0;
  HEAP32[$$byval_copy12 >> 2] = HEAP32[$72 >> 2];
  HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$72 + 4 >> 2];
  HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$72 + 8 >> 2];
  HEAP32[$72 >> 2] = 0;
  HEAP32[$72 + 4 >> 2] = 0;
  HEAP32[$72 + 8 >> 2] = 0;
  +_fonsDrawText($54, $60, $53 * 40.0, (HEAP8[$$byval_copy12 + 11 >> 0] | 0) < 0 ? HEAP32[$$byval_copy12 >> 2] | 0 : $$byval_copy12, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy12);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
 }
 _sfons_flush($54);
 _sgl_draw();
 _sg_end_pass();
 _sg_commit();
 HEAP32[544720] = (HEAP32[544720] | 0) + 1;
 $81 = 54056;
 $87 = _stm_since(HEAP32[$81 >> 2] | 0, HEAP32[$81 + 4 >> 2] | 0) | 0;
 if (+_stm_sec($87, getTempRet0() | 0) >= 1.0) {
  HEAP32[544721] = HEAP32[544720];
  $92 = _stm_now() | 0;
  $93 = getTempRet0() | 0;
  $94 = 54056;
  HEAP32[$94 >> 2] = $92;
  HEAP32[$94 + 4 >> 2] = $93;
  HEAP32[544720] = 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i93 = 0, $$0$i$i$i = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i92 = 0, $$067 = 0, $$069 = 0, $$083 = 0, $$3 = 0, $$pre = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$copyload$i86103 = 0, $100 = 0, $101 = 0, $109 = 0, $113 = 0, $114 = 0, $115 = 0, $127 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $36 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $56 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 do if (($1 - $0 | 0) > 1) if ((HEAP8[$0 >> 0] | 0) == 73) {
  $13 = $2 + 61 | 0;
  $$pre = $2 + 36 | 0;
  if (HEAP8[$13 >> 0] | 0) {
   $16 = HEAP32[$$pre >> 2] | 0;
   $18 = HEAP32[$16 + -16 >> 2] | 0;
   $19 = $16 + -12 | 0;
   $$0$i$i$i = HEAP32[$19 >> 2] | 0;
   while (1) {
    if (($$0$i$i$i | 0) == ($18 | 0)) break;
    $22 = $$0$i$i$i + -16 | 0;
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($22);
    $$0$i$i$i = $22;
   }
   HEAP32[$19 >> 2] = $18;
  }
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($4, 47913, __ZNSt3__211char_traitsIcE6lengthEPKc(47913) | 0);
  $25 = $2 + 4 | 0;
  $$sroa$0$0$$sroa_idx$i = $2 + 12 | 0;
  $26 = $2 + 40 | 0;
  $27 = $2 + 32 | 0;
  $28 = $4 + 11 | 0;
  $29 = $4 + 4 | 0;
  $30 = $3 + 11 | 0;
  $31 = $3 + 4 | 0;
  $$083 = $0 + 1 | 0;
  while (1) {
   if ((HEAP8[$$083 >> 0] | 0) == 69) break;
   if (HEAP8[$13 >> 0] | 0) {
    HEAP32[$5 >> 2] = HEAP32[$$sroa$0$0$$sroa_idx$i >> 2];
    $36 = HEAP32[$$pre >> 2] | 0;
    if ($36 >>> 0 < (HEAP32[$26 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2IS4_EERKNS1_IT_Lm4096EEE($3, $5);
     HEAP32[$36 >> 2] = 0;
     HEAP32[$36 + 4 >> 2] = 0;
     HEAP32[$36 + 8 >> 2] = 0;
     HEAP32[$36 + 12 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$$pre >> 2] = (HEAP32[$$pre >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($27, $5);
   }
   $48 = ((HEAP32[$25 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $49 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$083, $1, $2) | 0;
   $53 = ((HEAP32[$25 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   if (HEAP8[$13 >> 0] | 0) {
    $56 = HEAP32[$$pre >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($56 + ($$0$i$i$add$i << 4) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$$pre >> 2] = $56 + -16;
   }
   if (($49 | 0) == ($$083 | 0) | ($49 | 0) == ($1 | 0)) {
    label = 53;
    break;
   }
   L29 : do if (HEAP8[$13 >> 0] | 0) {
    $64 = HEAP32[$$pre >> 2] | 0;
    $$sroa$0$0$copyload$i86103 = HEAP32[$$sroa$0$0$$sroa_idx$i >> 2] | 0;
    HEAP32[$3 >> 2] = $$sroa$0$0$copyload$i86103;
    $65 = $64 + -12 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if ($66 >>> 0 < (HEAP32[$64 + -8 >> 2] | 0) >>> 0) {
     HEAP32[$66 >> 2] = 0;
     HEAP32[$66 + 4 >> 2] = 0;
     HEAP32[$66 + 8 >> 2] = 0;
     HEAP32[$66 + 12 >> 2] = $$sroa$0$0$copyload$i86103;
     HEAP32[$65 >> 2] = (HEAP32[$65 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($64 + -16 | 0, $3);
    $$067 = $48;
    while (1) {
     if ($$067 >>> 0 >= $53 >>> 0) break L29;
     $79 = HEAP32[(HEAP32[$$pre >> 2] | 0) + -12 >> 2] | 0;
     $81 = (HEAP32[$2 >> 2] | 0) + ($$067 * 24 | 0) | 0;
     $82 = $79 + -12 | 0;
     $83 = HEAP32[$82 >> 2] | 0;
     if (($83 | 0) == (HEAP32[$79 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($79 + -16 | 0, $81); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($83, $81);
      HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + 24;
     }
     $$067 = $$067 + 1 | 0;
    }
   } while (0);
   $$0 = $48;
   while (1) {
    if ($$0 >>> 0 >= $53 >>> 0) break;
    $92 = HEAP8[$28 >> 0] | 0;
    if (($92 << 24 >> 24 < 0 ? HEAP32[$29 >> 2] | 0 : $92 & 255) >>> 0 > 1) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 48101) | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, (HEAP32[$2 >> 2] | 0) + ($$0 * 24 | 0) | 0);
    $100 = HEAP8[$30 >> 0] | 0;
    $101 = $100 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($4, $101 ? HEAP32[$3 >> 2] | 0 : $3, $101 ? HEAP32[$31 >> 2] | 0 : $100 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$0 = $$0 + 1 | 0;
   }
   $$069 = $53;
   while (1) {
    if (($$069 | 0) == ($48 | 0)) break;
    $109 = HEAP32[$25 >> 2] | 0;
    $$0$i$i$idx$i92 = 0;
    while (1) {
     if (($$0$i$i$idx$i92 | 0) == -1) break;
     $$0$i$i$add$i93 = $$0$i$i$idx$i92 + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($109 + ($$0$i$i$add$i93 * 24 | 0) | 0);
     $$0$i$i$idx$i92 = $$0$i$i$add$i93;
    }
    HEAP32[$25 >> 2] = $109 + -24;
    $$069 = $$069 + -1 | 0;
   }
   $$083 = $49;
  }
  if ((label | 0) == 53) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   $$3 = $0;
   break;
  }
  $113 = $$083 + 1 | 0;
  $114 = HEAP8[$28 >> 0] | 0;
  $115 = $114 << 24 >> 24 < 0;
  if ((HEAP8[($115 ? HEAP32[$4 >> 2] | 0 : $4) + ($115 ? HEAP32[$29 >> 2] | 0 : $114 & 255) + -1 >> 0] | 0) == 62) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 49292) | 0; else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 47915) | 0;
  HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $$0$i$i = 0;
  while (1) {
   if (($$0$i$i | 0) == 3) break;
   HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
   $$0$i$i = $$0$i$i + 1 | 0;
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $6);
  $127 = HEAP32[$25 >> 2] | 0;
  if ($127 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($127, $3);
   HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 24;
  } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
  $$3 = $113;
 } else $$3 = $0; else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _stbi__jpeg_decode_block_prog_ac($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $103 = 0, $11 = 0, $113 = 0, $115 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $133 = 0, $14 = 0, $15 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $20 = 0, $21 = 0, $223 = 0, $225 = 0, $233 = 0, $235 = 0, $242 = 0, $243 = 0, $268 = 0, $269 = 0, $271 = 0, $288 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $70 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 60 | 0;
 $6 = sp + 56 | 0;
 $7 = sp + 52 | 0;
 $8 = sp + 48 | 0;
 $9 = sp + 44 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 36 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 28 | 0;
 $14 = sp + 24 | 0;
 $15 = sp + 20 | 0;
 $16 = sp + 68 | 0;
 $17 = sp + 16 | 0;
 $18 = sp + 12 | 0;
 $19 = sp + 8 | 0;
 $20 = sp + 4 | 0;
 $21 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 18384 >> 2] | 0)) {
  HEAP32[$4 >> 2] = _stbi__err(45247) | 0;
  $288 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $288 | 0;
 }
 $33 = HEAP32[(HEAP32[$5 >> 2] | 0) + 18396 >> 2] | 0;
 L5 : do if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 18392 >> 2] | 0)) {
  HEAP32[$10 >> 2] = $33;
  $38 = HEAP32[$5 >> 2] | 0;
  if (HEAP32[(HEAP32[$5 >> 2] | 0) + 18400 >> 2] | 0) {
   $39 = $38 + 18400 | 0;
   HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + -1;
   HEAP32[$4 >> 2] = 1;
   $288 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $288 | 0;
  }
  HEAP32[$9 >> 2] = HEAP32[$38 + 18384 >> 2];
  L11 : while (1) {
   if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$5 >> 2] | 0);
   HEAP32[$12 >> 2] = (HEAP32[(HEAP32[$5 >> 2] | 0) + 18364 >> 2] | 0) >>> 23 & 511;
   HEAP32[$13 >> 2] = HEAP16[(HEAP32[$8 >> 2] | 0) + (HEAP32[$12 >> 2] << 1) >> 1];
   do if (HEAP32[$13 >> 2] | 0) {
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + (HEAP32[$13 >> 2] >> 4 & 15);
    HEAP32[$14 >> 2] = HEAP32[$13 >> 2] & 15;
    $70 = (HEAP32[$5 >> 2] | 0) + 18364 | 0;
    HEAP32[$70 >> 2] = HEAP32[$70 >> 2] << HEAP32[$14 >> 2];
    $75 = (HEAP32[$5 >> 2] | 0) + 18368 | 0;
    HEAP32[$75 >> 2] = (HEAP32[$75 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
    $78 = HEAP32[$9 >> 2] | 0;
    HEAP32[$9 >> 2] = $78 + 1;
    HEAP32[$11 >> 2] = HEAPU8[9680 + $78 >> 0];
    HEAP16[(HEAP32[$6 >> 2] | 0) + (HEAP32[$11 >> 2] << 1) >> 1] = HEAP32[$13 >> 2] >> 8 << HEAP32[$10 >> 2];
   } else {
    HEAP32[$15 >> 2] = _stbi__jpeg_huff_decode(HEAP32[$5 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
    if ((HEAP32[$15 >> 2] | 0) < 0) {
     label = 12;
     break L11;
    }
    HEAP32[$14 >> 2] = HEAP32[$15 >> 2] & 15;
    HEAP32[$13 >> 2] = HEAP32[$15 >> 2] >> 4;
    $103 = HEAP32[$13 >> 2] | 0;
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $103;
     $126 = HEAP32[$9 >> 2] | 0;
     HEAP32[$9 >> 2] = $126 + 1;
     HEAP32[$11 >> 2] = HEAPU8[9680 + $126 >> 0];
     $133 = _stbi__extend_receive(HEAP32[$5 >> 2] | 0, HEAP32[$14 >> 2] | 0) | 0;
     HEAP16[(HEAP32[$6 >> 2] | 0) + (HEAP32[$11 >> 2] << 1) >> 1] = $133 << HEAP32[$10 >> 2];
     break;
    }
    if (($103 | 0) < 15) break L11;
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 16;
   } while (0);
   if ((HEAP32[$9 >> 2] | 0) > (HEAP32[(HEAP32[$5 >> 2] | 0) + 18388 >> 2] | 0)) break L5;
  }
  if ((label | 0) == 12) {
   HEAP32[$4 >> 2] = _stbi__err(44717) | 0;
   $288 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $288 | 0;
  }
  HEAP32[(HEAP32[$5 >> 2] | 0) + 18400 >> 2] = 1 << HEAP32[$13 >> 2];
  if (HEAP32[$13 >> 2] | 0) {
   $113 = _stbi__jpeg_get_bits(HEAP32[$5 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
   $115 = (HEAP32[$5 >> 2] | 0) + 18400 | 0;
   HEAP32[$115 >> 2] = (HEAP32[$115 >> 2] | 0) + $113;
  }
  $119 = (HEAP32[$5 >> 2] | 0) + 18400 | 0;
  HEAP32[$119 >> 2] = (HEAP32[$119 >> 2] | 0) + -1;
 } else {
  HEAP16[$16 >> 1] = 1 << $33;
  $151 = HEAP32[$5 >> 2] | 0;
  if (HEAP32[(HEAP32[$5 >> 2] | 0) + 18400 >> 2] | 0) {
   $152 = $151 + 18400 | 0;
   HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + -1;
   HEAP32[$9 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 18384 >> 2];
   while (1) {
    if ((HEAP32[$9 >> 2] | 0) > (HEAP32[(HEAP32[$5 >> 2] | 0) + 18388 >> 2] | 0)) break L5;
    HEAP32[$17 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAPU8[9680 + (HEAP32[$9 >> 2] | 0) >> 0] << 1);
    do if (HEAP16[HEAP32[$17 >> 2] >> 1] | 0) if (_stbi__jpeg_get_bit(HEAP32[$5 >> 2] | 0) | 0) if (!(HEAP16[HEAP32[$17 >> 2] >> 1] & HEAP16[$16 >> 1])) {
     $188 = HEAP16[$16 >> 1] | 0;
     $189 = HEAP32[$17 >> 2] | 0;
     $191 = HEAP16[$189 >> 1] | 0;
     if ((HEAP16[HEAP32[$17 >> 2] >> 1] | 0) > 0) {
      HEAP16[$189 >> 1] = $191 + $188;
      break;
     } else {
      HEAP16[$189 >> 1] = $191 - $188;
      break;
     }
    } while (0);
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   }
  }
  HEAP32[$9 >> 2] = HEAP32[$151 + 18384 >> 2];
  L47 : while (1) {
   HEAP32[$20 >> 2] = _stbi__jpeg_huff_decode(HEAP32[$5 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
   if ((HEAP32[$20 >> 2] | 0) < 0) {
    label = 33;
    break;
   }
   HEAP32[$19 >> 2] = HEAP32[$20 >> 2] & 15;
   HEAP32[$18 >> 2] = HEAP32[$20 >> 2] >> 4;
   do if (!(HEAP32[$19 >> 2] | 0)) {
    if ((HEAP32[$18 >> 2] | 0) < 15) {
     HEAP32[(HEAP32[$5 >> 2] | 0) + 18400 >> 2] = (1 << HEAP32[$18 >> 2]) - 1;
     if (HEAP32[$18 >> 2] | 0) {
      $223 = _stbi__jpeg_get_bits(HEAP32[$5 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0;
      $225 = (HEAP32[$5 >> 2] | 0) + 18400 | 0;
      HEAP32[$225 >> 2] = (HEAP32[$225 >> 2] | 0) + $223;
     }
     HEAP32[$18 >> 2] = 64;
    }
   } else {
    if ((HEAP32[$19 >> 2] | 0) != 1) {
     label = 40;
     break L47;
    }
    $233 = (_stbi__jpeg_get_bit(HEAP32[$5 >> 2] | 0) | 0) != 0;
    $235 = HEAP16[$16 >> 1] | 0;
    if ($233) {
     HEAP32[$19 >> 2] = $235;
     break;
    } else {
     HEAP32[$19 >> 2] = 0 - $235;
     break;
    }
   } while (0);
   L62 : while (1) {
    if ((HEAP32[$9 >> 2] | 0) > (HEAP32[(HEAP32[$5 >> 2] | 0) + 18388 >> 2] | 0)) break;
    $242 = HEAP32[$6 >> 2] | 0;
    $243 = HEAP32[$9 >> 2] | 0;
    HEAP32[$9 >> 2] = $243 + 1;
    HEAP32[$21 >> 2] = $242 + (HEAPU8[9680 + $243 >> 0] << 1);
    do if (HEAP16[HEAP32[$21 >> 2] >> 1] | 0) {
     if (_stbi__jpeg_get_bit(HEAP32[$5 >> 2] | 0) | 0) if (!(HEAP16[HEAP32[$21 >> 2] >> 1] & HEAP16[$16 >> 1])) {
      $268 = HEAP16[$16 >> 1] | 0;
      $269 = HEAP32[$21 >> 2] | 0;
      $271 = HEAP16[$269 >> 1] | 0;
      if ((HEAP16[HEAP32[$21 >> 2] >> 1] | 0) > 0) {
       HEAP16[$269 >> 1] = $271 + $268;
       break;
      } else {
       HEAP16[$269 >> 1] = $271 - $268;
       break;
      }
     }
    } else {
     if (!(HEAP32[$18 >> 2] | 0)) {
      label = 53;
      break L62;
     }
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + -1;
    } while (0);
   }
   if ((label | 0) == 53) {
    label = 0;
    HEAP16[HEAP32[$21 >> 2] >> 1] = HEAP32[$19 >> 2];
   }
   if ((HEAP32[$9 >> 2] | 0) > (HEAP32[(HEAP32[$5 >> 2] | 0) + 18388 >> 2] | 0)) break L5;
  }
  if ((label | 0) == 33) {
   HEAP32[$4 >> 2] = _stbi__err(44717) | 0;
   $288 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $288 | 0;
  } else if ((label | 0) == 40) {
   HEAP32[$4 >> 2] = _stbi__err(44717) | 0;
   $288 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $288 | 0;
  }
 } while (0);
 HEAP32[$4 >> 2] = 1;
 $288 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $288 | 0;
}

function __Z32meshopt_optimizeVertexCacheTablePjPKjmmPKN7meshopt16VertexScoreTableE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0289342 = 0, $$0301364 = 0, $$0302360 = 0, $$0303359 = 0, $$0303359$phi = 0, $$0304358 = 0, $$0305350 = 0, $$0306349 = 0.0, $$0309348 = 0, $$0312357 = 0, $$0313336 = 0, $$0314356 = 0, $$0316355 = 0, $$0317$lcssa = 0, $$0317335 = 0, $$0319339 = 0, $$0320334 = 0, $$1307$lcssa = 0.0, $$1307341 = 0.0, $$1310$lcssa = 0, $$1310340 = 0, $$1315 = 0, $$1318 = 0, $$2308 = 0.0, $$2311 = 0, $100 = 0, $103 = 0, $104 = 0, $105 = 0, $109 = 0, $120 = 0, $125 = 0.0, $126 = 0, $128 = 0.0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $142 = 0, $144 = 0.0, $146 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $33 = 0, $35 = 0, $36 = 0, $5 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $7 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $85 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $5 = sp + 168 | 0;
 $6 = sp + 156 | 0;
 $7 = sp;
 $8 = sp + 152 | 0;
 $9 = ($2 >>> 0) / 3 | 0;
 if ($2 - ($9 * 3 | 0) | 0) ___assert_fail(43058, 42633, 173, 42718);
 __ZN17meshopt_AllocatorC2Ev($5);
 do if (!(($2 | 0) == 0 | ($3 | 0) == 0)) {
  if (($0 | 0) == ($1 | 0)) {
   $16 = __ZN17meshopt_Allocator8allocateIjEEPT_m($5, $2) | 0;
   _memcpy($16 | 0, $0 | 0, $2 << 2 | 0) | 0;
   $$0 = $16;
  } else $$0 = $1;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  __ZN7meshoptL22buildTriangleAdjacencyERNS_17TriangleAdjacencyEPKjmmR17meshopt_Allocator($6, $$0, $2, $3, $5);
  $18 = __ZN17meshopt_Allocator8allocateIjEEPT_m($5, $3) | 0;
  $19 = HEAP32[$6 >> 2] | 0;
  _memcpy($18 | 0, $19 | 0, $3 << 2 | 0) | 0;
  $21 = __ZN17meshopt_Allocator8allocateIhEEPT_m($5, $9) | 0;
  _memset($21 | 0, 0, $9 | 0) | 0;
  $22 = __ZN17meshopt_Allocator8allocateIfEEPT_m($5, $3) | 0;
  $$0301364 = 0;
  do {
   HEAPF32[$22 + ($$0301364 << 2) >> 2] = +__ZN7meshoptL11vertexScoreEPKNS_16VertexScoreTableEij($4, -1, HEAP32[$18 + ($$0301364 << 2) >> 2] | 0);
   $$0301364 = $$0301364 + 1 | 0;
  } while ($$0301364 >>> 0 < $3 >>> 0);
  $23 = __ZN17meshopt_Allocator8allocateIfEEPT_m($5, $9) | 0;
  if ($2 >>> 0 > 2) {
   $$0302360 = 0;
   do {
    $36 = $$0302360 * 3 | 0;
    HEAPF32[$23 + ($$0302360 << 2) >> 2] = +HEAPF32[$22 + (HEAP32[$$0 + ($36 << 2) >> 2] << 2) >> 2] + +HEAPF32[$22 + (HEAP32[$$0 + ($36 + 1 << 2) >> 2] << 2) >> 2] + +HEAPF32[$22 + (HEAP32[$$0 + ($36 + 2 << 2) >> 2] << 2) >> 2];
    $$0302360 = $$0302360 + 1 | 0;
   } while ($$0302360 >>> 0 < $9 >>> 0);
  }
  HEAP32[$8 >> 2] = 1;
  $33 = HEAP32[$6 + 8 >> 2] | 0;
  $35 = HEAP32[$6 + 4 >> 2] | 0;
  $$0303359 = $7;
  $$0304358 = $7 + 76 | 0;
  $$0312357 = 0;
  $$0314356 = 0;
  $$0316355 = 0;
  L17 : while (1) {
   if ($$0316355 >>> 0 >= $9 >>> 0) {
    label = 13;
    break;
   }
   $57 = $$0314356 * 3 | 0;
   $59 = HEAP32[$$0 + ($57 << 2) >> 2] | 0;
   $62 = HEAP32[$$0 + ($57 + 1 << 2) >> 2] | 0;
   $65 = HEAP32[$$0 + ($57 + 2 << 2) >> 2] | 0;
   $66 = $$0316355 * 3 | 0;
   HEAP32[$0 + ($66 << 2) >> 2] = $59;
   HEAP32[$0 + ($66 + 1 << 2) >> 2] = $62;
   HEAP32[$0 + ($66 + 2 << 2) >> 2] = $65;
   $$0316355 = $$0316355 + 1 | 0;
   HEAP8[$21 + $$0314356 >> 0] = 1;
   HEAPF32[$23 + ($$0314356 << 2) >> 2] = 0.0;
   HEAP32[$$0304358 >> 2] = $59;
   HEAP32[$$0304358 + 4 >> 2] = $62;
   HEAP32[$$0304358 + 8 >> 2] = $65;
   if (!$$0312357) $$0317$lcssa = 3; else {
    $$0317335 = 3;
    $$0320334 = 0;
    while (1) {
     $89 = HEAP32[$$0303359 + ($$0320334 << 2) >> 2] | 0;
     if (($89 | 0) == ($65 | 0) | (($89 | 0) == ($59 | 0) | ($89 | 0) == ($62 | 0))) $$1318 = $$0317335; else {
      HEAP32[$$0304358 + ($$0317335 << 2) >> 2] = $89;
      $$1318 = $$0317335 + 1 | 0;
     }
     $$0320334 = $$0320334 + 1 | 0;
     if (($$0320334 | 0) == ($$0312357 | 0)) {
      $$0317$lcssa = $$1318;
      break;
     } else $$0317335 = $$1318;
    }
   }
   $78 = $$0317$lcssa >>> 0 < 16;
   $79 = $18 + ($59 << 2) | 0;
   HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + -1;
   $82 = $18 + ($62 << 2) | 0;
   HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + -1;
   $85 = $18 + ($65 << 2) | 0;
   HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + -1;
   $$0319339 = 0;
   do {
    $100 = HEAP32[$$0 + ($$0319339 + $57 << 2) >> 2] | 0;
    $103 = $33 + (HEAP32[$35 + ($100 << 2) >> 2] << 2) | 0;
    $104 = $19 + ($100 << 2) | 0;
    $105 = HEAP32[$104 >> 2] | 0;
    L30 : do if ($105 | 0) {
     $$0313336 = 0;
     while (1) {
      $109 = $103 + ($$0313336 << 2) | 0;
      $$0313336 = $$0313336 + 1 | 0;
      if ((HEAP32[$109 >> 2] | 0) == ($$0314356 | 0)) break;
      if ($$0313336 >>> 0 >= $105 >>> 0) break L30;
     }
     HEAP32[$109 >> 2] = HEAP32[$103 + ($105 + -1 << 2) >> 2];
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + -1;
    } while (0);
    $$0319339 = $$0319339 + 1 | 0;
   } while (($$0319339 | 0) != 3);
   $$0312357 = $78 ? $$0317$lcssa : 16;
   if (!$$0317$lcssa) label = 37; else {
    $$0305350 = 0;
    $$0306349 = 0.0;
    $$0309348 = -1;
    while (1) {
     $120 = HEAP32[$$0304358 + ($$0305350 << 2) >> 2] | 0;
     $125 = +__ZN7meshoptL11vertexScoreEPKNS_16VertexScoreTableEij($4, $$0305350 >>> 0 > 15 ? -1 : $$0305350, HEAP32[$18 + ($120 << 2) >> 2] | 0);
     $126 = $22 + ($120 << 2) | 0;
     $128 = $125 - +HEAPF32[$126 >> 2];
     HEAPF32[$126 >> 2] = $125;
     $131 = $33 + (HEAP32[$35 + ($120 << 2) >> 2] << 2) | 0;
     $133 = HEAP32[$19 + ($120 << 2) >> 2] | 0;
     $134 = $131 + ($133 << 2) | 0;
     if (!$133) {
      $$1307$lcssa = $$0306349;
      $$1310$lcssa = $$0309348;
     } else {
      $$0289342 = $131;
      $$1307341 = $$0306349;
      $$1310340 = $$0309348;
      while (1) {
       $138 = HEAP32[$$0289342 >> 2] | 0;
       if (HEAP8[$21 + $138 >> 0] | 0) {
        label = 33;
        break L17;
       }
       $142 = $23 + ($138 << 2) | 0;
       $144 = $128 + +HEAPF32[$142 >> 2];
       if (!($144 > 0.0)) {
        label = 35;
        break L17;
       }
       $146 = $$1307341 < $144;
       $$2311 = $146 ? $138 : $$1310340;
       $$2308 = $146 ? $144 : $$1307341;
       HEAPF32[$142 >> 2] = $144;
       $$0289342 = $$0289342 + 4 | 0;
       if (($$0289342 | 0) == ($134 | 0)) {
        $$1307$lcssa = $$2308;
        $$1310$lcssa = $$2311;
        break;
       } else {
        $$1307341 = $$2308;
        $$1310340 = $$2311;
       }
      }
     }
     $$0305350 = $$0305350 + 1 | 0;
     if ($$0305350 >>> 0 >= $$0317$lcssa >>> 0) break; else {
      $$0306349 = $$1307$lcssa;
      $$0309348 = $$1310$lcssa;
     }
    }
    if (($$1310$lcssa | 0) == -1) label = 37; else $$1315 = $$1310$lcssa;
   }
   if ((label | 0) == 37) {
    label = 0;
    $$1315 = __ZN7meshoptL22getNextTriangleDeadEndERjPKhm($8, $21, $9) | 0;
   }
   if (($$1315 | 0) == -1) {
    label = 39;
    break;
   } else {
    $$0303359$phi = $$0304358;
    $$0314356 = $$1315;
    $$0304358 = $$0303359;
    $$0303359 = $$0303359$phi;
   }
  }
  if ((label | 0) == 13) ___assert_fail(42751, 42633, 236, 42718); else if ((label | 0) == 33) ___assert_fail(42780, 42633, 323, 42718); else if ((label | 0) == 35) ___assert_fail(42800, 42633, 326, 42718); else if ((label | 0) == 39) {
   if ((HEAP32[$8 >> 2] | 0) != ($9 | 0)) ___assert_fail(42814, 42633, 347, 42718);
   if (($$0316355 | 0) == ($9 | 0)) break; else ___assert_fail(42841, 42633, 348, 42718);
  }
 } while (0);
 __ZN17meshopt_AllocatorD2Ev($5);
 STACKTOP = sp;
 return;
}

function __sg_gl_create_shader($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $170 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $242 = 0, $25 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $2 = sp + 112 | 0;
 $3 = sp + 108 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 100 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 92 | 0;
 $8 = sp + 88 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 80 | 0;
 $11 = sp + 76 | 0;
 $12 = sp + 72 | 0;
 $13 = sp + 68 | 0;
 $14 = sp + 64 | 0;
 $15 = sp + 60 | 0;
 $16 = sp + 56 | 0;
 $17 = sp + 52 | 0;
 $18 = sp + 48 | 0;
 $19 = sp + 44 | 0;
 $20 = sp + 40 | 0;
 $21 = sp + 36 | 0;
 $22 = sp + 32 | 0;
 $23 = sp + 28 | 0;
 $24 = sp + 24 | 0;
 $25 = sp + 20 | 0;
 $26 = sp + 16 | 0;
 $27 = sp + 12 | 0;
 $28 = sp + 8 | 0;
 $29 = sp + 4 | 0;
 $30 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!((HEAP32[$3 >> 2] | 0) != 0 & (HEAP32[$4 >> 2] | 0) != 0)) ___assert_fail(33740, 17628, 5991, 33752);
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 252 >> 2] | 0) ___assert_fail(33773, 17628, 5992, 33752);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5993, 33752);
 __sg_shader_common_init((HEAP32[$3 >> 2] | 0) + 12 | 0, HEAP32[$4 >> 2] | 0);
 HEAP32[$5 >> 2] = 0;
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) >= 16) break;
  __sg_strcpy((HEAP32[$3 >> 2] | 0) + 252 + 4 + (HEAP32[$5 >> 2] << 4) | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 4 + ((HEAP32[$5 >> 2] | 0) * 12 | 0) >> 2] | 0);
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 }
 HEAP32[$6 >> 2] = __sg_gl_compile_shader(0, HEAP32[(HEAP32[$4 >> 2] | 0) + 196 >> 2] | 0) | 0;
 HEAP32[$7 >> 2] = __sg_gl_compile_shader(1, HEAP32[(HEAP32[$4 >> 2] | 0) + 1144 >> 2] | 0) | 0;
 if (!((HEAP32[$6 >> 2] | 0) != 0 & (HEAP32[$7 >> 2] | 0) != 0)) {
  HEAP32[$2 >> 2] = 3;
  $256 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $256 | 0;
 }
 HEAP32[$8 >> 2] = _glCreateProgram() | 0;
 _glAttachShader(HEAP32[$8 >> 2] | 0, HEAP32[$6 >> 2] | 0);
 _glAttachShader(HEAP32[$8 >> 2] | 0, HEAP32[$7 >> 2] | 0);
 _glLinkProgram(HEAP32[$8 >> 2] | 0);
 _glDeleteShader(HEAP32[$6 >> 2] | 0);
 _glDeleteShader(HEAP32[$7 >> 2] | 0);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6013, 33752);
 _glGetProgramiv(HEAP32[$8 >> 2] | 0, 35714, $9 | 0);
 if (!(HEAP32[$9 >> 2] | 0)) {
  HEAP32[$10 >> 2] = 0;
  _glGetProgramiv(HEAP32[$8 >> 2] | 0, 35716, $10 | 0);
  do if ((HEAP32[$10 >> 2] | 0) > 0) {
   HEAP32[$11 >> 2] = _malloc(HEAP32[$10 >> 2] | 0) | 0;
   _glGetProgramInfoLog(HEAP32[$8 >> 2] | 0, HEAP32[$10 >> 2] | 0, $10 | 0, HEAP32[$11 >> 2] | 0);
   if (HEAP32[$11 >> 2] | 0) {
    _puts(HEAP32[$11 >> 2] | 0) | 0;
    _free(HEAP32[$11 >> 2] | 0);
    break;
   } else ___assert_fail(33787, 17628, 6023, 33752);
  } while (0);
  _glDeleteProgram(HEAP32[$8 >> 2] | 0);
  HEAP32[$2 >> 2] = 3;
  $256 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $256 | 0;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 252 >> 2] = HEAP32[$8 >> 2];
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6032, 33752);
 HEAP32[$12 >> 2] = 0;
 L34 : while (1) {
  if ((HEAP32[$12 >> 2] | 0) >= 2) {
   label = 41;
   break;
  }
  $105 = HEAP32[$4 >> 2] | 0;
  HEAP32[$13 >> 2] = (HEAP32[$12 >> 2] | 0) == 0 ? $105 + 196 | 0 : $105 + 1144 | 0;
  HEAP32[$14 >> 2] = (HEAP32[$3 >> 2] | 0) + 252 + 260 + ((HEAP32[$12 >> 2] | 0) * 832 | 0);
  HEAP32[$15 >> 2] = 0;
  while (1) {
   if ((HEAP32[$15 >> 2] | 0) >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + ((HEAP32[$12 >> 2] | 0) * 120 | 0) >> 2] | 0)) break;
   HEAP32[$16 >> 2] = (HEAP32[$13 >> 2] | 0) + 20 + ((HEAP32[$15 >> 2] | 0) * 196 | 0);
   if ((HEAP32[HEAP32[$16 >> 2] >> 2] | 0) >>> 0 <= 0) {
    label = 27;
    break L34;
   }
   HEAP32[$17 >> 2] = (HEAP32[$14 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) * 196 | 0);
   if (HEAP32[HEAP32[$17 >> 2] >> 2] | 0) {
    label = 29;
    break L34;
   }
   HEAP32[$18 >> 2] = 0;
   HEAP32[$19 >> 2] = 0;
   while (1) {
    if ((HEAP32[$19 >> 2] | 0) >= 16) break;
    HEAP32[$20 >> 2] = (HEAP32[$16 >> 2] | 0) + 4 + ((HEAP32[$19 >> 2] | 0) * 12 | 0);
    if (!(HEAP32[(HEAP32[$20 >> 2] | 0) + 4 >> 2] | 0)) break;
    HEAP32[$21 >> 2] = (HEAP32[$17 >> 2] | 0) + 4 + ((HEAP32[$19 >> 2] | 0) * 12 | 0);
    HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$20 >> 2] | 0) + 4 >> 2];
    HEAP8[(HEAP32[$21 >> 2] | 0) + 8 >> 0] = HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2];
    HEAP16[(HEAP32[$21 >> 2] | 0) + 10 >> 1] = HEAP32[$18 >> 2];
    $170 = __sg_uniform_size(HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0, HEAPU8[(HEAP32[$21 >> 2] | 0) + 8 >> 0] | 0) | 0;
    HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $170;
    if (HEAP32[HEAP32[$20 >> 2] >> 2] | 0) {
     $179 = _glGetUniformLocation(HEAP32[$8 >> 2] | 0, HEAP32[HEAP32[$20 >> 2] >> 2] | 0) | 0;
     HEAP32[HEAP32[$21 >> 2] >> 2] = $179;
    } else HEAP32[HEAP32[$21 >> 2] >> 2] = HEAP32[$19 >> 2];
    $183 = HEAP32[$17 >> 2] | 0;
    HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + 1;
    HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
   }
   if ((HEAP32[HEAP32[$16 >> 2] >> 2] | 0) != (HEAP32[$18 >> 2] | 0)) {
    label = 38;
    break L34;
   }
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
  }
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 }
 if ((label | 0) == 27) ___assert_fail(33795, 17628, 6038, 33752); else if ((label | 0) == 29) ___assert_fail(33813, 17628, 6040, 33752); else if ((label | 0) == 38) ___assert_fail(33835, 17628, 6060, 33752); else if ((label | 0) == 41) {
  if (_glGetError() | 0) ___assert_fail(25839, 17628, 6065, 33752);
  HEAP32[$22 >> 2] = 0;
  _glGetIntegerv(35725, $22 | 0);
  _glUseProgram(HEAP32[$8 >> 2] | 0);
  HEAP32[$23 >> 2] = 0;
  HEAP32[$24 >> 2] = 0;
  L58 : while (1) {
   if ((HEAP32[$24 >> 2] | 0) >= 2) break;
   $203 = HEAP32[$4 >> 2] | 0;
   HEAP32[$25 >> 2] = (HEAP32[$24 >> 2] | 0) == 0 ? $203 + 196 | 0 : $203 + 1144 | 0;
   HEAP32[$26 >> 2] = (HEAP32[$3 >> 2] | 0) + 252 + 260 + ((HEAP32[$24 >> 2] | 0) * 832 | 0);
   HEAP32[$27 >> 2] = 0;
   while (1) {
    if ((HEAP32[$27 >> 2] | 0) >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + ((HEAP32[$24 >> 2] | 0) * 120 | 0) + 4 >> 2] | 0)) break;
    HEAP32[$28 >> 2] = (HEAP32[$25 >> 2] | 0) + 804 + ((HEAP32[$27 >> 2] | 0) * 12 | 0);
    if (!(HEAP32[(HEAP32[$28 >> 2] | 0) + 4 >> 2] | 0)) {
     label = 48;
     break L58;
    }
    HEAP32[$29 >> 2] = (HEAP32[$26 >> 2] | 0) + 784 + (HEAP32[$27 >> 2] << 2);
    HEAP32[$30 >> 2] = HEAP32[$27 >> 2];
    if (HEAP32[HEAP32[$28 >> 2] >> 2] | 0) HEAP32[$30 >> 2] = _glGetUniformLocation(HEAP32[$8 >> 2] | 0, HEAP32[HEAP32[$28 >> 2] >> 2] | 0) | 0;
    if ((HEAP32[$30 >> 2] | 0) != -1) {
     $242 = HEAP32[$23 >> 2] | 0;
     HEAP32[$23 >> 2] = $242 + 1;
     HEAP32[HEAP32[$29 >> 2] >> 2] = $242;
     _glUniform1i(HEAP32[$30 >> 2] | 0, HEAP32[HEAP32[$29 >> 2] >> 2] | 0);
    } else HEAP32[HEAP32[$29 >> 2] >> 2] = -1;
    HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
   }
   HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
  }
  if ((label | 0) == 48) ___assert_fail(33879, 17628, 6075, 33752);
  _glUseProgram(HEAP32[$22 >> 2] | 0);
  if (_glGetError() | 0) ___assert_fail(25839, 17628, 6092, 33752);
  HEAP32[$2 >> 2] = 2;
  $256 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $256 | 0;
 }
 return 0;
}

function __ZNSt3__26__sortIRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0160229 = 0, $$0167 = 0, $$0174 = 0, $$1 = 0, $$1$ph = 0, $$1$ph$be = 0, $$1155 = 0, $$1161 = 0, $$1181$ph = 0, $$1181$ph$be = 0, $$2156 = 0, $$2162 = 0, $$2176 = 0, $$2179 = 0, $$3157 = 0, $$3163 = 0, $$3170 = 0, $$4158 = 0, $$4164 = 0, $$4171 = 0, $$5159 = 0, $$5165 = 0, $$5172 = 0, $$6 = 0, $$6166 = 0, $$6173 = 0, $$6186 = 0, $10 = 0, $11 = 0, $12 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $9 = 0, label = 0;
 $$1$ph = $0;
 $$1181$ph = $1;
 L1 : while (1) {
  $3 = $$1181$ph;
  $4 = $$1181$ph + -4 | 0;
  $5 = $$1181$ph + -8 | 0;
  $6 = $$1181$ph;
  $$1 = $$1$ph;
  L3 : while (1) {
   $8 = $3 - $$1 | 0;
   $9 = $8 >> 2;
   switch ($9 | 0) {
   case 1:
   case 0:
    {
     break L1;
     break;
    }
   case 2:
    {
     label = 4;
     break L1;
     break;
    }
   case 3:
    {
     label = 6;
     break L1;
     break;
    }
   case 4:
    {
     label = 7;
     break L1;
     break;
    }
   case 5:
    {
     label = 8;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($8 | 0) < 124) {
    label = 10;
    break L1;
   }
   $26 = $$1 + ((($9 | 0) / 2 | 0) << 2) | 0;
   if (($8 | 0) > 3996) {
    $27 = ($9 | 0) / 4 | 0;
    $$0167 = __ZNSt3__27__sort5IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_S5_T_($$1, $$1 + ($27 << 2) | 0, $26, $26 + ($27 << 2) | 0, $4, $2) | 0;
   } else $$0167 = __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($$1, $26, $4, $2) | 0;
   $32 = HEAP32[$$1 >> 2] | 0;
   $33 = HEAP32[$26 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($2, $32, $33) | 0) {
    $$3157 = $4;
    $$3170 = $$0167;
   } else {
    if (($$1 | 0) == ($5 | 0)) {
     label = 18;
     break;
    }
    $37 = $5;
    while (1) {
     $57 = HEAP32[$37 >> 2] | 0;
     if (__ZN13TPPLPartition12VertexSorterclEll($2, $57, $33) | 0) break;
     $36 = $37 + -4 | 0;
     if (($$1 | 0) == ($36 | 0)) {
      label = 18;
      break L3;
     } else $37 = $36;
    }
    HEAP32[$$1 >> 2] = $57;
    HEAP32[$37 >> 2] = $32;
    $$3157 = $37;
    $$3170 = $$0167 + 1 | 0;
   }
   $60 = $$1 + 4 | 0;
   L19 : do if ($60 >>> 0 < $$3157 >>> 0) {
    $$0174 = $26;
    $$4158 = $$3157;
    $$4164 = $60;
    $$4171 = $$3170;
    while (1) {
     $62 = HEAP32[$$0174 >> 2] | 0;
     $$5165 = $$4164;
     while (1) {
      $63 = HEAP32[$$5165 >> 2] | 0;
      $65 = $$5165 + 4 | 0;
      if (__ZN13TPPLPartition12VertexSorterclEll($2, $63, $62) | 0) $$5165 = $65; else break;
     }
     $$5159 = $$4158;
     do {
      $$5159 = $$5159 + -4 | 0;
      $67 = HEAP32[$$5159 >> 2] | 0;
     } while (!(__ZN13TPPLPartition12VertexSorterclEll($2, $67, $62) | 0));
     if ($$5165 >>> 0 > $$5159 >>> 0) {
      $$2176 = $$0174;
      $$5172 = $$4171;
      $$6166 = $$5165;
      break L19;
     }
     HEAP32[$$5165 >> 2] = $67;
     HEAP32[$$5159 >> 2] = $63;
     $$0174 = ($$0174 | 0) == ($$5165 | 0) ? $$5159 : $$0174;
     $$4158 = $$5159;
     $$4164 = $65;
     $$4171 = $$4171 + 1 | 0;
    }
   } else {
    $$2176 = $26;
    $$5172 = $$3170;
    $$6166 = $60;
   } while (0);
   if (($$6166 | 0) == ($$2176 | 0)) $$6173 = $$5172; else {
    $73 = HEAP32[$$2176 >> 2] | 0;
    $74 = HEAP32[$$6166 >> 2] | 0;
    if (__ZN13TPPLPartition12VertexSorterclEll($2, $73, $74) | 0) {
     HEAP32[$$6166 >> 2] = $73;
     HEAP32[$$2176 >> 2] = $74;
     $$6173 = $$5172 + 1 | 0;
    } else $$6173 = $$5172;
   }
   if (!$$6173) {
    $78 = __ZNSt3__227__insertion_sort_incompleteIRN13TPPLPartition12VertexSorterEPlEEbT0_S5_T_($$1, $$6166, $2) | 0;
    $79 = $$6166 + 4 | 0;
    if (__ZNSt3__227__insertion_sort_incompleteIRN13TPPLPartition12VertexSorterEPlEEbT0_S5_T_($79, $$1181$ph, $2) | 0) {
     label = 47;
     break;
    }
    if ($78) {
     $$2179 = 2;
     $$6 = $79;
     $$6186 = $$1181$ph;
     label = 52;
     break;
    }
   }
   $82 = $$6166;
   if (($82 - $$1 | 0) >= ($6 - $82 | 0)) {
    label = 51;
    break;
   }
   __ZNSt3__26__sortIRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($$1, $$6166, $2);
   $$1 = $$6166 + 4 | 0;
  }
  L40 : do if ((label | 0) == 18) {
   label = 0;
   $39 = $$1 + 4 | 0;
   $40 = HEAP32[$4 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($2, $32, $40) | 0) $$1161 = $39; else {
    if (($39 | 0) == ($4 | 0)) break L1;
    $$0160229 = $39;
    while (1) {
     $43 = HEAP32[$$0160229 >> 2] | 0;
     if (__ZN13TPPLPartition12VertexSorterclEll($2, $32, $43) | 0) break;
     $46 = $$0160229 + 4 | 0;
     if (($46 | 0) == ($4 | 0)) break L1; else $$0160229 = $46;
    }
    HEAP32[$$0160229 >> 2] = $40;
    HEAP32[$4 >> 2] = $43;
    $$1161 = $$0160229 + 4 | 0;
   }
   if (($$1161 | 0) == ($4 | 0)) break L1;
   $$1155 = $4;
   $$2162 = $$1161;
   while (1) {
    $49 = HEAP32[$$1 >> 2] | 0;
    $$3163 = $$2162;
    while (1) {
     $50 = HEAP32[$$3163 >> 2] | 0;
     $52 = $$3163 + 4 | 0;
     if (__ZN13TPPLPartition12VertexSorterclEll($2, $49, $50) | 0) break; else $$3163 = $52;
    }
    $$2156 = $$1155;
    do {
     $$2156 = $$2156 + -4 | 0;
     $54 = HEAP32[$$2156 >> 2] | 0;
    } while (__ZN13TPPLPartition12VertexSorterclEll($2, $49, $54) | 0);
    if ($$3163 >>> 0 >= $$2156 >>> 0) {
     $$2179 = 4;
     $$6 = $$3163;
     $$6186 = $$1181$ph;
     label = 52;
     break L40;
    }
    HEAP32[$$3163 >> 2] = $54;
    HEAP32[$$2156 >> 2] = $50;
    $$1155 = $$2156;
    $$2162 = $52;
   }
  } else if ((label | 0) == 47) {
   label = 0;
   $$2179 = $78 ? 1 : 2;
   $$6 = $$1;
   $$6186 = $78 ? $$1181$ph : $$6166;
   label = 52;
  } else if ((label | 0) == 51) {
   label = 0;
   __ZNSt3__26__sortIRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($$6166 + 4 | 0, $$1181$ph, $2);
   $$1$ph$be = $$1;
   $$1181$ph$be = $$6166;
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   switch ($$2179 & 7) {
   case 2:
   case 4:
   case 0:
    {
     $$1$ph$be = $$6;
     $$1181$ph$be = $$6186;
     break;
    }
   default:
    break L1;
   }
  }
  $$1$ph = $$1$ph$be;
  $$1181$ph = $$1181$ph$be;
 }
 if ((label | 0) == 4) {
  $10 = $$1181$ph + -4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = HEAP32[$$1 >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($2, $11, $12) | 0) {
   HEAP32[$$1 >> 2] = $11;
   HEAP32[$10 >> 2] = $12;
  }
 } else if ((label | 0) == 6) __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($$1, $$1 + 4 | 0, $$1181$ph + -4 | 0, $2) | 0; else if ((label | 0) == 7) __ZNSt3__27__sort4IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_T_($$1, $$1 + 4 | 0, $$1 + 8 | 0, $$1181$ph + -4 | 0, $2) | 0; else if ((label | 0) == 8) __ZNSt3__27__sort5IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_S5_T_($$1, $$1 + 4 | 0, $$1 + 8 | 0, $$1 + 12 | 0, $$1181$ph + -4 | 0, $2) | 0; else if ((label | 0) == 10) __ZNSt3__218__insertion_sort_3IRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($$1, $$1181$ph, $2);
 return;
}

function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$lcssa237 = 0, $$0175219 = 0, $$0179218 = 0, $$0185217 = 0, $$0189$lcssa236 = 0, $$0189216 = 0, $$0193$lcssa234235 = 0, $$0193225 = 0, $$1176 = 0, $$1180 = 0, $$1186 = 0, $$1190 = 0, $$2177$$0175 = 0, $$2177$lcssa = 0, $$2177210 = 0, $$2181209 = 0, $$2187208 = 0, $$2191$$0189 = 0, $$2191$lcssa = 0, $$2191207 = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182 = 0, $$3188 = 0, $$3192 = 0, $$4183$sink = 0, $$5 = 0, $$5184201 = 0, $$6202 = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $104 = 0, $14 = 0, $2 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $55 = 0, $57 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $80 = 0, $9 = 0, $90 = 0, $95 = 0, $96 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $2 = sp + 1024 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 $4 = HEAP8[$1 >> 0] | 0;
 L1 : do if (!($4 << 24 >> 24)) {
  $$0175$lcssa237 = 1;
  $$0189$lcssa236 = -1;
  $$0193$lcssa234235 = 0;
  $$2177$lcssa = 1;
  $$2191$lcssa = -1;
  label = 25;
 } else {
  $$0193225 = 0;
  $10 = $4;
  do {
   if (!(HEAP8[$0 + $$0193225 >> 0] | 0)) {
    $$3 = 0;
    break L1;
   }
   $9 = $10 & 255;
   $14 = $2 + ($9 >>> 5 << 2) | 0;
   HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($9 & 31);
   $$0193225 = $$0193225 + 1 | 0;
   HEAP32[$3 + ($9 << 2) >> 2] = $$0193225;
   $10 = HEAP8[$1 + $$0193225 >> 0] | 0;
  } while ($10 << 24 >> 24 != 0);
  $22 = $$0193225 >>> 0 > 1;
  if ($22) {
   $$0175219 = 1;
   $$0179218 = 1;
   $$0185217 = 0;
   $$0189216 = -1;
   $27 = 1;
   while (1) {
    $25 = HEAP8[$1 + ($$0179218 + $$0189216) >> 0] | 0;
    $28 = HEAP8[$1 + $27 >> 0] | 0;
    do if ($25 << 24 >> 24 == $28 << 24 >> 24) if (($$0179218 | 0) == ($$0175219 | 0)) {
     $$1176 = $$0175219;
     $$1180 = 1;
     $$1186 = $$0175219 + $$0185217 | 0;
     $$1190 = $$0189216;
     break;
    } else {
     $$1176 = $$0175219;
     $$1180 = $$0179218 + 1 | 0;
     $$1186 = $$0185217;
     $$1190 = $$0189216;
     break;
    } else if (($25 & 255) > ($28 & 255)) {
     $$1176 = $27 - $$0189216 | 0;
     $$1180 = 1;
     $$1186 = $27;
     $$1190 = $$0189216;
     break;
    } else {
     $$1176 = 1;
     $$1180 = 1;
     $$1186 = $$0185217 + 1 | 0;
     $$1190 = $$0185217;
     break;
    } while (0);
    $27 = $$1180 + $$1186 | 0;
    if ($27 >>> 0 >= $$0193225 >>> 0) break; else {
     $$0175219 = $$1176;
     $$0179218 = $$1180;
     $$0185217 = $$1186;
     $$0189216 = $$1190;
    }
   }
   if ($22) {
    $$2177210 = 1;
    $$2181209 = 1;
    $$2187208 = 0;
    $$2191207 = -1;
    $42 = 1;
    while (1) {
     $40 = HEAP8[$1 + ($$2181209 + $$2191207) >> 0] | 0;
     $43 = HEAP8[$1 + $42 >> 0] | 0;
     do if ($40 << 24 >> 24 == $43 << 24 >> 24) if (($$2181209 | 0) == ($$2177210 | 0)) {
      $$3178 = $$2177210;
      $$3182 = 1;
      $$3188 = $$2177210 + $$2187208 | 0;
      $$3192 = $$2191207;
      break;
     } else {
      $$3178 = $$2177210;
      $$3182 = $$2181209 + 1 | 0;
      $$3188 = $$2187208;
      $$3192 = $$2191207;
      break;
     } else if (($40 & 255) < ($43 & 255)) {
      $$3178 = $42 - $$2191207 | 0;
      $$3182 = 1;
      $$3188 = $42;
      $$3192 = $$2191207;
      break;
     } else {
      $$3178 = 1;
      $$3182 = 1;
      $$3188 = $$2187208 + 1 | 0;
      $$3192 = $$2187208;
      break;
     } while (0);
     $42 = $$3182 + $$3188 | 0;
     if ($42 >>> 0 >= $$0193225 >>> 0) {
      $$0175$lcssa237 = $$1176;
      $$0189$lcssa236 = $$1190;
      $$0193$lcssa234235 = $$0193225;
      $$2177$lcssa = $$3178;
      $$2191$lcssa = $$3192;
      label = 25;
      break;
     } else {
      $$2177210 = $$3178;
      $$2181209 = $$3182;
      $$2187208 = $$3188;
      $$2191207 = $$3192;
     }
    }
   } else {
    $$0175$lcssa237 = $$1176;
    $$0189$lcssa236 = $$1190;
    $$0193$lcssa234235 = $$0193225;
    $$2177$lcssa = 1;
    $$2191$lcssa = -1;
    label = 25;
   }
  } else {
   $$0175$lcssa237 = 1;
   $$0189$lcssa236 = -1;
   $$0193$lcssa234235 = $$0193225;
   $$2177$lcssa = 1;
   $$2191$lcssa = -1;
   label = 25;
  }
 } while (0);
 L34 : do if ((label | 0) == 25) {
  $55 = ($$2191$lcssa + 1 | 0) >>> 0 > ($$0189$lcssa236 + 1 | 0) >>> 0;
  $$2177$$0175 = $55 ? $$2177$lcssa : $$0175$lcssa237;
  $$2191$$0189 = $55 ? $$2191$lcssa : $$0189$lcssa236;
  $57 = $$2191$$0189 + 1 | 0;
  if (!(_memcmp($1, $1 + $$2177$$0175 | 0, $57) | 0)) {
   $64 = $$0193$lcssa234235 - $$2177$$0175 | 0;
   $$0168 = $64;
   $$5 = $$2177$$0175;
   $$pre$phiZ2D = $64;
  } else {
   $61 = $$0193$lcssa234235 - $$2191$$0189 + -1 | 0;
   $63 = ($$2191$$0189 >>> 0 > $61 >>> 0 ? $$2191$$0189 : $61) + 1 | 0;
   $$0168 = 0;
   $$5 = $63;
   $$pre$phiZ2D = $$0193$lcssa234235 - $63 | 0;
  }
  $65 = $$0193$lcssa234235 | 63;
  $66 = $$0193$lcssa234235 + -1 | 0;
  $67 = ($$0168 | 0) != 0;
  $$0166 = $0;
  $$0169 = 0;
  $$0170 = $0;
  while (1) {
   $69 = $$0166;
   do if (($$0170 - $69 | 0) >>> 0 < $$0193$lcssa234235 >>> 0) {
    $72 = _memchr($$0170, 0, $65) | 0;
    if (!$72) {
     $$3173 = $$0170 + $65 | 0;
     break;
    } else if (($72 - $69 | 0) >>> 0 < $$0193$lcssa234235 >>> 0) {
     $$3 = 0;
     break L34;
    } else {
     $$3173 = $72;
     break;
    }
   } else $$3173 = $$0170; while (0);
   $80 = HEAPU8[$$0166 + $66 >> 0] | 0;
   L48 : do if (!(1 << ($80 & 31) & HEAP32[$2 + ($80 >>> 5 << 2) >> 2])) {
    $$0169$be = 0;
    $$4183$sink = $$0193$lcssa234235;
   } else {
    $90 = $$0193$lcssa234235 - (HEAP32[$3 + ($80 << 2) >> 2] | 0) | 0;
    if ($90 | 0) {
     $$0169$be = 0;
     $$4183$sink = $67 & ($$0169 | 0) != 0 & $90 >>> 0 < $$5 >>> 0 ? $$pre$phiZ2D : $90;
     break;
    }
    $95 = $57 >>> 0 > $$0169 >>> 0;
    $96 = $95 ? $57 : $$0169;
    $98 = HEAP8[$1 + $96 >> 0] | 0;
    L53 : do if ($98 << 24 >> 24) {
     $$5184201 = $96;
     $103 = $98;
     while (1) {
      if ($103 << 24 >> 24 != (HEAP8[$$0166 + $$5184201 >> 0] | 0)) break;
      $104 = $$5184201 + 1 | 0;
      $103 = HEAP8[$1 + $104 >> 0] | 0;
      if (!($103 << 24 >> 24)) break L53; else $$5184201 = $104;
     }
     $$0169$be = 0;
     $$4183$sink = $$5184201 - $$2191$$0189 | 0;
     break L48;
    } while (0);
    if (!$95) {
     $$3 = $$0166;
     break L34;
    }
    $$6202 = $57;
    while (1) {
     $$6202 = $$6202 + -1 | 0;
     if ((HEAP8[$1 + $$6202 >> 0] | 0) != (HEAP8[$$0166 + $$6202 >> 0] | 0)) {
      $$0169$be = $$0168;
      $$4183$sink = $$5;
      break L48;
     }
     if ($$6202 >>> 0 <= $$0169 >>> 0) {
      $$3 = $$0166;
      break L34;
     }
    }
   } while (0);
   $$0166 = $$0166 + $$4183$sink | 0;
   $$0169 = $$0169$be;
   $$0170 = $$3173;
  }
 } while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __sg_gl_apply_bindings($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $10 = sp + 96 | 0;
 $11 = sp + 92 | 0;
 $12 = sp + 88 | 0;
 $13 = sp + 84 | 0;
 $14 = sp + 80 | 0;
 $15 = sp + 76 | 0;
 $16 = sp + 72 | 0;
 $17 = sp + 68 | 0;
 $18 = sp + 64 | 0;
 $19 = sp + 60 | 0;
 $20 = sp + 56 | 0;
 $21 = sp + 52 | 0;
 $22 = sp + 48 | 0;
 $23 = sp + 44 | 0;
 $24 = sp + 40 | 0;
 $25 = sp + 36 | 0;
 $26 = sp + 32 | 0;
 $27 = sp + 28 | 0;
 $28 = sp + 24 | 0;
 $29 = sp + 20 | 0;
 $30 = sp + 16 | 0;
 $31 = sp + 12 | 0;
 $32 = sp + 100 | 0;
 $33 = sp + 8 | 0;
 $34 = sp + 4 | 0;
 $35 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAP32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = $9;
 if (!(HEAP32[$10 >> 2] | 0)) ___assert_fail(18659, 17628, 6782, 36248);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6786, 36248);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6789, 36248);
 HEAP32[$20 >> 2] = 0;
 L10 : while (1) {
  if ((HEAP32[$20 >> 2] | 0) >= 2) {
   label = 22;
   break;
  }
  HEAP32[$21 >> 2] = (HEAP32[(HEAP32[$10 >> 2] | 0) + 84 >> 2] | 0) + 12 + ((HEAP32[$20 >> 2] | 0) * 120 | 0);
  HEAP32[$22 >> 2] = (HEAP32[(HEAP32[$10 >> 2] | 0) + 84 >> 2] | 0) + 252 + 260 + ((HEAP32[$20 >> 2] | 0) * 832 | 0);
  HEAP32[$23 >> 2] = (HEAP32[$20 >> 2] | 0) == 0 ? HEAP32[$16 >> 2] | 0 : HEAP32[$18 >> 2] | 0;
  if ((((HEAP32[$20 >> 2] | 0) == 0 ? HEAP32[$17 >> 2] | 0 : HEAP32[$19 >> 2] | 0) | 0) != (HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0)) {
   label = 10;
   break;
  }
  HEAP32[$24 >> 2] = 0;
  while (1) {
   if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0)) break;
   HEAP32[$25 >> 2] = (HEAP32[$22 >> 2] | 0) + 784 + (HEAP32[$24 >> 2] << 2);
   if ((HEAP32[HEAP32[$25 >> 2] >> 2] | 0) != -1) {
    HEAP32[$26 >> 2] = HEAP32[(HEAP32[$23 >> 2] | 0) + (HEAP32[$24 >> 2] << 2) >> 2];
    HEAP32[$27 >> 2] = HEAP32[(HEAP32[$26 >> 2] | 0) + 88 + 12 + (HEAP32[(HEAP32[$26 >> 2] | 0) + 12 + 72 >> 2] << 2) >> 2];
    if (!(HEAP32[$26 >> 2] | 0)) {
     label = 16;
     break L10;
    }
    if (!(HEAP32[(HEAP32[$26 >> 2] | 0) + 88 >> 2] | 0)) {
     label = 16;
     break L10;
    }
    if (!(HEAP32[$27 >> 2] | 0 ? (HEAP32[HEAP32[$25 >> 2] >> 2] | 0) != -1 : 0)) {
     label = 18;
     break L10;
    }
    __sg_gl_cache_bind_texture(HEAP32[HEAP32[$25 >> 2] >> 2] | 0, HEAP32[(HEAP32[$26 >> 2] | 0) + 88 >> 2] | 0, HEAP32[$27 >> 2] | 0);
   }
   HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
  }
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
 }
 if ((label | 0) == 10) ___assert_fail(36270, 17628, 6794, 36248); else if ((label | 0) == 16) ___assert_fail(36355, 17628, 6800, 36248); else if ((label | 0) == 18) ___assert_fail(36377, 17628, 6801, 36248); else if ((label | 0) == 22) {
  if (_glGetError() | 0) ___assert_fail(25839, 17628, 6806, 36248);
  if (HEAP32[$14 >> 2] | 0) $129 = HEAP32[(HEAP32[$14 >> 2] | 0) + 48 + (HEAP32[(HEAP32[$14 >> 2] | 0) + 12 + 32 >> 2] << 2) >> 2] | 0; else $129 = 0;
  HEAP32[$28 >> 2] = $129;
  __sg_gl_cache_bind_buffer(34963, HEAP32[$28 >> 2] | 0);
  HEAP32[539405] = HEAP32[$15 >> 2];
  HEAP32[$29 >> 2] = 0;
  while (1) {
   if ((HEAP32[$29 >> 2] | 0) >>> 0 >= (HEAP32[539158] | 0) >>> 0) {
    label = 50;
    break;
   }
   HEAP32[$30 >> 2] = (HEAP32[$10 >> 2] | 0) + 88 + (HEAP32[$29 >> 2] << 4);
   HEAP32[$31 >> 2] = 2157176 + ((HEAP32[$29 >> 2] | 0) * 20 | 0);
   HEAP8[$32 >> 0] = 0;
   HEAP32[$33 >> 2] = 0;
   HEAP32[$34 >> 2] = 0;
   if ((HEAP8[HEAP32[$30 >> 2] >> 0] | 0) >= 0) {
    if ((HEAP8[HEAP32[$30 >> 2] >> 0] | 0) >= (HEAP32[$13 >> 2] | 0)) {
     label = 30;
     break;
    }
    HEAP32[$35 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + (HEAP8[HEAP32[$30 >> 2] >> 0] << 2) >> 2];
    if (!(HEAP32[$35 >> 2] | 0)) {
     label = 32;
     break;
    }
    HEAP32[$34 >> 2] = HEAP32[(HEAP32[$35 >> 2] | 0) + 48 + (HEAP32[(HEAP32[$35 >> 2] | 0) + 12 + 32 >> 2] << 2) >> 2];
    HEAP32[$33 >> 2] = (HEAP32[(HEAP32[$12 >> 2] | 0) + (HEAP8[HEAP32[$30 >> 2] >> 0] << 2) >> 2] | 0) + (HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] | 0);
    if ((HEAP32[$34 >> 2] | 0) != (HEAP32[(HEAP32[$31 >> 2] | 0) + 16 >> 2] | 0)) label = 40; else if ((HEAPU8[(HEAP32[$30 >> 2] | 0) + 3 >> 0] | 0) != (HEAPU8[(HEAP32[$31 >> 2] | 0) + 3 >> 0] | 0)) label = 40; else if ((HEAP32[(HEAP32[$30 >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[(HEAP32[$31 >> 2] | 0) + 12 >> 2] | 0)) label = 40; else if ((HEAPU8[(HEAP32[$30 >> 2] | 0) + 4 >> 0] | 0) != (HEAPU8[(HEAP32[$31 >> 2] | 0) + 4 >> 0] | 0)) label = 40; else if ((HEAPU8[(HEAP32[$30 >> 2] | 0) + 2 >> 0] | 0) != (HEAPU8[(HEAP32[$31 >> 2] | 0) + 2 >> 0] | 0)) label = 40; else if ((HEAP32[$33 >> 2] | 0) != (HEAP32[(HEAP32[$31 >> 2] | 0) + 8 >> 2] | 0)) label = 40; else if ((HEAP8[(HEAP32[$31 >> 2] | 0) + 1 >> 0] | 0) != (HEAP8[(HEAP32[$30 >> 2] | 0) + 1 >> 0] | 0)) label = 40;
    if ((label | 0) == 40) {
     label = 0;
     __sg_gl_cache_bind_buffer(34962, HEAP32[$34 >> 2] | 0);
     _glVertexAttribPointer(HEAP32[$29 >> 2] | 0, HEAPU8[(HEAP32[$30 >> 2] | 0) + 3 >> 0] | 0, HEAP32[(HEAP32[$30 >> 2] | 0) + 12 >> 2] | 0, HEAP8[(HEAP32[$30 >> 2] | 0) + 4 >> 0] | 0, HEAPU8[(HEAP32[$30 >> 2] | 0) + 2 >> 0] | 0, HEAP32[$33 >> 2] | 0);
     if (HEAP8[2156600] & 1) _glVertexAttribDivisorANGLE(HEAP32[$29 >> 2] | 0, HEAP8[(HEAP32[$30 >> 2] | 0) + 1 >> 0] | 0);
     HEAP8[$32 >> 0] = 1;
    }
    if ((HEAP8[HEAP32[$31 >> 2] >> 0] | 0) == -1) {
     _glEnableVertexAttribArray(HEAP32[$29 >> 2] | 0);
     HEAP8[$32 >> 0] = 1;
    }
   } else if ((HEAP8[HEAP32[$31 >> 2] >> 0] | 0) != -1) {
    _glDisableVertexAttribArray(HEAP32[$29 >> 2] | 0);
    HEAP8[$32 >> 0] = 1;
   }
   if (HEAP8[$32 >> 0] & 1) {
    $266 = HEAP32[$31 >> 2] | 0;
    $267 = HEAP32[$30 >> 2] | 0;
    HEAP32[$266 >> 2] = HEAP32[$267 >> 2];
    HEAP32[$266 + 4 >> 2] = HEAP32[$267 + 4 >> 2];
    HEAP32[$266 + 8 >> 2] = HEAP32[$267 + 8 >> 2];
    HEAP32[$266 + 12 >> 2] = HEAP32[$267 + 12 >> 2];
    HEAP32[(HEAP32[$31 >> 2] | 0) + 8 >> 2] = HEAP32[$33 >> 2];
    HEAP32[(HEAP32[$31 >> 2] | 0) + 16 >> 2] = HEAP32[$34 >> 2];
   }
   HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1;
  }
  if ((label | 0) == 30) ___assert_fail(36419, 17628, 6822, 36248); else if ((label | 0) == 32) ___assert_fail(36444, 17628, 6824, 36248); else if ((label | 0) == 50) if (!(_glGetError() | 0)) {
   STACKTOP = sp;
   return;
  } else ___assert_fail(25839, 17628, 6864, 36248);
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i71 = 0, $$0$i$i$i = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$i57 = 0, $$0$i$i$i61 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i70 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $63 = 0, $64 = 0, $7 = 0, $78 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $9 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $4 = sp + 84 | 0;
 $5 = sp + 72 | 0;
 $6 = sp + 60 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 $12 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $3) | 0;
 do if (($12 | 0) == ($0 | 0)) $$1 = $0; else {
  $14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12, $1, $3) | 0;
  $16 = $3 + 4 | 0;
  if (($14 | 0) == ($12 | 0)) {
   $95 = HEAP32[$16 >> 2] | 0;
   $$0$i$i$idx$i70 = 0;
   while (1) {
    if (($$0$i$i$idx$i70 | 0) == -1) break;
    $$0$i$i$add$i71 = $$0$i$i$idx$i70 + -1 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($95 + ($$0$i$i$add$i71 * 24 | 0) | 0);
    $$0$i$i$idx$i70 = $$0$i$i$add$i71;
   }
   HEAP32[$16 >> 2] = $95 + -24;
   $$1 = $0;
   break;
  }
  $17 = HEAP32[$16 >> 2] | 0;
  if ((($17 - (HEAP32[$3 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$1 = $0; else {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $17 + -24 | 0);
   $24 = HEAP32[$16 >> 2] | 0;
   $$0$i$i$idx$i = 0;
   while (1) {
    if (($$0$i$i$idx$i | 0) == -1) break;
    $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24 + ($$0$i$i$add$i * 24 | 0) | 0);
    $$0$i$i$idx$i = $$0$i$i$add$i;
   }
   HEAP32[$16 >> 2] = $24 + -24;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $24 + -48 | 0);
   $28 = HEAP32[$16 >> 2] | 0;
   $29 = $28 + -24 | 0;
   $30 = $29 + 11 | 0;
   if ((HEAP8[$30 >> 0] | 0) < 0) {
    $33 = HEAP32[$29 >> 2] | 0;
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($33, $4);
    HEAP32[$28 + -20 >> 2] = 0;
   } else {
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($29, $4);
    HEAP8[$30 >> 0] = 0;
   }
   $35 = __ZNSt3__211char_traitsIcE6lengthEPKc(47915) | 0;
   $36 = $2 + 11 | 0;
   $37 = HEAP8[$36 >> 0] | 0;
   $39 = $2 + 4 | 0;
   if (($35 | 0) == (($37 << 24 >> 24 < 0 ? HEAP32[$39 >> 2] | 0 : $37 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($2, 47915, $35) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($29, 40);
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($11, 47879, $6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($11, 48165) | 0;
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   $49 = HEAP8[$36 >> 0] | 0;
   $50 = $49 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($10, $50 ? HEAP32[$2 >> 2] | 0 : $2, $50 ? HEAP32[$39 >> 2] | 0 : $49 & 255) | 0;
   HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
   HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
   $$0$i$i$i50 = 0;
   while (1) {
    if (($$0$i$i$i50 | 0) == 3) break;
    HEAP32[$10 + ($$0$i$i$i50 << 2) >> 2] = 0;
    $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9, 47874) | 0;
   HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   $$0$i$i$i53 = 0;
   while (1) {
    if (($$0$i$i$i53 | 0) == 3) break;
    HEAP32[$9 + ($$0$i$i$i53 << 2) >> 2] = 0;
    $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
   }
   $63 = HEAP8[$5 + 11 >> 0] | 0;
   $64 = $63 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($8, $64 ? HEAP32[$5 >> 2] | 0 : $5, $64 ? HEAP32[$5 + 4 >> 2] | 0 : $63 & 255) | 0;
   HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
   $$0$i$i$i57 = 0;
   while (1) {
    if (($$0$i$i$i57 | 0) == 3) break;
    HEAP32[$8 + ($$0$i$i$i57 << 2) >> 2] = 0;
    $$0$i$i$i57 = $$0$i$i$i57 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 47877) | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $$0$i$i$i61 = 0;
   while (1) {
    if (($$0$i$i$i61 | 0) == 3) break;
    HEAP32[$7 + ($$0$i$i$i61 << 2) >> 2] = 0;
    $$0$i$i$i61 = $$0$i$i$i61 + 1 | 0;
   }
   $78 = HEAP8[$4 + 11 >> 0] | 0;
   $79 = $78 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($29, $79 ? HEAP32[$4 >> 2] | 0 : $4, $79 ? HEAP32[$4 + 4 >> 2] | 0 : $78 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
   $86 = __ZNSt3__211char_traitsIcE6lengthEPKc(47915) | 0;
   $87 = HEAP8[$36 >> 0] | 0;
   if (($86 | 0) == (($87 << 24 >> 24 < 0 ? HEAP32[$39 >> 2] | 0 : $87 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($2, 47915, $86) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($29, 41);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $$1 = $14;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0110 = 0, $$1 = 0, $$1111 = 0, $$2 = 0, $$2112 = 0, $$3113 = 0, $$4 = 0, $$4$lcssa188$pn = 0, $$4114 = 0, $$5115 = 0, $$6 = 0, $$7 = 0, $$phi$trans$insert155 = 0, $$pre = 0, $$pre$phi166Z2D = 0, $$pre$phi171Z2D = 0, $$pre$phi175Z2D = 0, $$pre$phi179Z2D = 0, $$pre$phi180Z2D = 0, $$pre$phi181Z2D = 0, $$pre152 = 0, $$pre158$pn = 0, $$sink252 = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $11 = 0, $113 = 0, $121 = 0, $124 = 0, $125 = 0, $129 = 0, $13 = 0, $133 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $39 = 0, $42 = 0, $52 = 0, $55 = 0, $57 = 0, $59 = 0, $63 = 0, $69 = 0, $7 = 0, $76 = 0, $82 = 0, $83 = 0, $89 = 0, $91 = 0, $92 = 0, $97 = 0, label = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) {
  $$pre$phi181Z2D = $1;
  $10 = $1;
  label = 4;
 } else if (!(HEAP32[$1 + 4 >> 2] | 0)) {
  $$pre$phi180Z2D = $1;
  $14 = $1;
  $17 = $2;
  label = 6;
 } else {
  $7 = __ZNSt3__211__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($1) | 0;
  $$pre = HEAP32[$7 >> 2] | 0;
  if (!$$pre) {
   $$pre$phi181Z2D = $7;
   $10 = $7;
   label = 4;
  } else {
   $$pre$phi180Z2D = $7;
   $14 = $7;
   $17 = $$pre;
   label = 6;
  }
 }
 if ((label | 0) == 4) {
  $11 = HEAP32[$10 + 4 >> 2] | 0;
  if (!$11) {
   $$pre$phi175Z2D = $10 + 8 | 0;
   $$pre$phi179Z2D = $$pre$phi181Z2D;
   $133 = 0;
   $21 = $10;
   $22 = 0;
  } else {
   $$pre$phi180Z2D = $$pre$phi181Z2D;
   $14 = $10;
   $17 = $11;
   label = 6;
  }
 }
 if ((label | 0) == 6) {
  $13 = $14 + 8 | 0;
  HEAP32[$17 + 8 >> 2] = HEAP32[$13 >> 2];
  $$pre$phi175Z2D = $13;
  $$pre$phi179Z2D = $$pre$phi180Z2D;
  $133 = 1;
  $21 = $14;
  $22 = $17;
 }
 $18 = HEAP32[$$pre$phi175Z2D >> 2] | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 if (($19 | 0) == ($21 | 0)) {
  HEAP32[$18 >> 2] = $22;
  if (($21 | 0) == ($0 | 0)) {
   $$0 = $22;
   $$0110 = 0;
  } else {
   $$0 = $0;
   $$0110 = HEAP32[$18 + 4 >> 2] | 0;
  }
 } else {
  HEAP32[$18 + 4 >> 2] = $22;
  $$0 = $0;
  $$0110 = $19;
 }
 $27 = $21 + 12 | 0;
 $29 = (HEAP8[$27 >> 0] | 0) != 0;
 if (($21 | 0) == ($1 | 0)) $$1 = $$0; else {
  $31 = $1 + 8 | 0;
  $32 = HEAP32[$31 >> 2] | 0;
  HEAP32[$$pre$phi175Z2D >> 2] = $32;
  HEAP32[((HEAP32[HEAP32[$31 >> 2] >> 2] | 0) == ($1 | 0) ? $32 : $32 + 4 | 0) >> 2] = $21;
  $39 = HEAP32[$1 >> 2] | 0;
  HEAP32[$$pre$phi179Z2D >> 2] = $39;
  HEAP32[$39 + 8 >> 2] = $21;
  $42 = HEAP32[$1 + 4 >> 2] | 0;
  HEAP32[$21 + 4 >> 2] = $42;
  if ($42 | 0) HEAP32[$42 + 8 >> 2] = $21;
  HEAP8[$27 >> 0] = HEAP8[$1 + 12 >> 0] | 0;
  $$1 = ($$0 | 0) == ($1 | 0) ? $21 : $$0;
 }
 L21 : do if ($29 & ($$1 | 0) != 0) {
  if ($133) {
   HEAP8[$22 + 12 >> 0] = 1;
   break;
  }
  $$1111 = $$0110;
  $$2 = $$1;
  while (1) {
   $52 = HEAP32[$$1111 + 8 >> 2] | 0;
   $55 = $$1111 + 12 | 0;
   $57 = (HEAP8[$55 >> 0] | 0) != 0;
   if ((HEAP32[$52 >> 2] | 0) == ($$1111 | 0)) {
    if ($57) {
     $$4114 = $$1111;
     $$6 = $$2;
    } else {
     HEAP8[$55 >> 0] = 1;
     HEAP8[$52 + 12 >> 0] = 0;
     __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($52);
     $97 = HEAP32[$$1111 + 4 >> 2] | 0;
     $$4114 = HEAP32[$97 >> 2] | 0;
     $$6 = ($$2 | 0) == ($97 | 0) ? $$1111 : $$2;
    }
    $100 = HEAP32[$$4114 >> 2] | 0;
    $101 = ($100 | 0) == 0;
    if (!$101) if (!(HEAP8[$100 + 12 >> 0] | 0)) {
     label = 45;
     break;
    }
    $106 = HEAP32[$$4114 + 4 >> 2] | 0;
    if ($106 | 0) if (!(HEAP8[$106 + 12 >> 0] | 0)) {
     label = 41;
     break;
    }
    HEAP8[$$4114 + 12 >> 0] = 0;
    $113 = HEAP32[$$4114 + 8 >> 2] | 0;
    if (($113 | 0) == ($$6 | 0) | (HEAP8[$113 + 12 >> 0] | 0) == 0) {
     label = 40;
     break;
    } else {
     $$7 = $$6;
     $$sink252 = $113;
    }
   } else {
    if ($57) {
     $$2112 = $$1111;
     $$4 = $$2;
    } else {
     HEAP8[$55 >> 0] = 1;
     HEAP8[$52 + 12 >> 0] = 0;
     __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($52);
     $59 = HEAP32[$$1111 >> 2] | 0;
     $$2112 = HEAP32[$59 + 4 >> 2] | 0;
     $$4 = ($$2 | 0) == ($59 | 0) ? $$1111 : $$2;
    }
    $63 = HEAP32[$$2112 >> 2] | 0;
    if ($63 | 0) if (!(HEAP8[$63 + 12 >> 0] | 0)) {
     label = 29;
     break;
    }
    $69 = HEAP32[$$2112 + 4 >> 2] | 0;
    if ($69 | 0) if (!(HEAP8[$69 + 12 >> 0] | 0)) {
     $83 = $69;
     label = 30;
     break;
    }
    HEAP8[$$2112 + 12 >> 0] = 0;
    $76 = HEAP32[$$2112 + 8 >> 2] | 0;
    if (($76 | 0) == ($$4 | 0)) {
     $$4$lcssa188$pn = $$4;
     label = 28;
     break;
    }
    if (!(HEAP8[$76 + 12 >> 0] | 0)) {
     $$4$lcssa188$pn = $76;
     label = 28;
     break;
    } else {
     $$7 = $$4;
     $$sink252 = $76;
    }
   }
   $129 = HEAP32[$$sink252 + 8 >> 2] | 0;
   $$1111 = HEAP32[((HEAP32[$129 >> 2] | 0) == ($$sink252 | 0) ? $129 + 4 | 0 : $129) >> 2] | 0;
   $$2 = $$7;
  }
  do if ((label | 0) == 28) {
   HEAP8[$$4$lcssa188$pn + 12 >> 0] = 1;
   break L21;
  } else if ((label | 0) == 29) {
   $$pre152 = HEAP32[$$2112 + 4 >> 2] | 0;
   if (!$$pre152) label = 31; else {
    $83 = $$pre152;
    label = 30;
   }
  } else if ((label | 0) == 40) {
   HEAP8[$113 + 12 >> 0] = 1;
   break L21;
  } else if ((label | 0) == 41) {
   if ($101) $$pre158$pn = $106; else {
    $$phi$trans$insert155 = $100 + 12 | 0;
    if (!(HEAP8[$$phi$trans$insert155 >> 0] | 0)) {
     $$5115 = $$4114;
     $$pre$phi166Z2D = $$phi$trans$insert155;
     label = 46;
     break;
    }
    $$pre158$pn = HEAP32[$$4114 + 4 >> 2] | 0;
   }
   HEAP8[$$pre158$pn + 12 >> 0] = 1;
   HEAP8[$$4114 + 12 >> 0] = 0;
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($$4114);
   $121 = HEAP32[$$4114 + 8 >> 2] | 0;
   $$5115 = $121;
   $$pre$phi166Z2D = (HEAP32[$121 >> 2] | 0) + 12 | 0;
   label = 46;
  } else if ((label | 0) == 45) {
   $$5115 = $$4114;
   $$pre$phi166Z2D = $100 + 12 | 0;
   label = 46;
  } while (0);
  if ((label | 0) == 30) {
   $82 = $83 + 12 | 0;
   if (!(HEAP8[$82 >> 0] | 0)) {
    $$3113 = $$2112;
    $$pre$phi171Z2D = $82;
   } else label = 31;
  } else if ((label | 0) == 46) {
   $124 = HEAP32[$$5115 + 8 >> 2] | 0;
   $125 = $124 + 12 | 0;
   HEAP8[$$5115 + 12 >> 0] = HEAP8[$125 >> 0] | 0;
   HEAP8[$125 >> 0] = 1;
   HEAP8[$$pre$phi166Z2D >> 0] = 1;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($124);
   break;
  }
  if ((label | 0) == 31) {
   HEAP8[$63 + 12 >> 0] = 1;
   HEAP8[$$2112 + 12 >> 0] = 0;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($$2112);
   $89 = HEAP32[$$2112 + 8 >> 2] | 0;
   $$3113 = $89;
   $$pre$phi171Z2D = (HEAP32[$89 + 4 >> 2] | 0) + 12 | 0;
  }
  $91 = HEAP32[$$3113 + 8 >> 2] | 0;
  $92 = $91 + 12 | 0;
  HEAP8[$$3113 + 12 >> 0] = HEAP8[$92 >> 0] | 0;
  HEAP8[$92 >> 0] = 1;
  HEAP8[$$pre$phi171Z2D >> 0] = 1;
  __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($91);
 } while (0);
 return;
}

function __sg_pipeline_desc_defaults($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $102 = 0, $11 = 0, $112 = 0, $12 = 0, $125 = 0, $13 = 0, $138 = 0, $14 = 0, $15 = 0, $151 = 0, $16 = 0, $161 = 0, $195 = 0, $2 = 0, $205 = 0, $219 = 0, $229 = 0, $239 = 0, $249 = 0, $259 = 0, $269 = 0, $298 = 0, $3 = 0, $308 = 0, $346 = 0, $349 = 0, $4 = 0, $5 = 0, $6 = 0, $63 = 0, $7 = 0, $76 = 0, $8 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 $2 = sp + 632 | 0;
 $3 = sp + 76 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 68 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 60 | 0;
 $8 = sp + 56 | 0;
 $9 = sp + 52 | 0;
 $10 = sp;
 $11 = sp + 636 | 0;
 $12 = sp + 48 | 0;
 $13 = sp + 44 | 0;
 $14 = sp + 40 | 0;
 $15 = sp + 36 | 0;
 $16 = sp + 32 | 0;
 HEAP32[$2 >> 2] = $1;
 _memcpy($3 | 0, HEAP32[$2 >> 2] | 0, 556) | 0;
 HEAP32[$3 + 508 >> 2] = (HEAP32[$3 + 508 >> 2] | 0) == 0 ? 4 : HEAP32[$3 + 508 >> 2] | 0;
 HEAP32[$3 + 512 >> 2] = (HEAP32[$3 + 512 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 512 >> 2] | 0;
 HEAP32[$3 + 516 >> 2] = (HEAP32[$3 + 516 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 516 >> 2] | 0;
 HEAP32[$3 + 520 >> 2] = (HEAP32[$3 + 520 >> 2] | 0) == 0 ? 2 : HEAP32[$3 + 520 >> 2] | 0;
 HEAP32[$3 + 524 >> 2] = (HEAP32[$3 + 524 >> 2] | 0) == 0 ? HEAP32[539089] | 0 : HEAP32[$3 + 524 >> 2] | 0;
 if (!(HEAP32[$3 + 320 + 4 >> 2] | 0)) $63 = 8; else $63 = HEAP32[$3 + 320 + 4 >> 2] | 0;
 HEAP32[$3 + 320 + 4 >> 2] = $63;
 if (!(HEAP32[$3 + 320 + 4 + 4 >> 2] | 0)) $76 = 1; else $76 = HEAP32[$3 + 320 + 4 + 4 >> 2] | 0;
 HEAP32[$3 + 320 + 4 + 4 >> 2] = $76;
 if (!(HEAP32[$3 + 320 + 4 + 8 >> 2] | 0)) $89 = 1; else $89 = HEAP32[$3 + 320 + 4 + 8 >> 2] | 0;
 HEAP32[$3 + 320 + 4 + 8 >> 2] = $89;
 if (!(HEAP32[$3 + 320 + 4 + 12 >> 2] | 0)) $102 = 1; else $102 = HEAP32[$3 + 320 + 4 + 12 >> 2] | 0;
 HEAP32[$3 + 320 + 4 + 12 >> 2] = $102;
 if (!(HEAP32[$3 + 320 + 20 >> 2] | 0)) $112 = 8; else $112 = HEAP32[$3 + 320 + 20 >> 2] | 0;
 HEAP32[$3 + 320 + 20 >> 2] = $112;
 if (!(HEAP32[$3 + 320 + 20 + 4 >> 2] | 0)) $125 = 1; else $125 = HEAP32[$3 + 320 + 20 + 4 >> 2] | 0;
 HEAP32[$3 + 320 + 20 + 4 >> 2] = $125;
 if (!(HEAP32[$3 + 320 + 20 + 8 >> 2] | 0)) $138 = 1; else $138 = HEAP32[$3 + 320 + 20 + 8 >> 2] | 0;
 HEAP32[$3 + 320 + 20 + 8 >> 2] = $138;
 if (!(HEAP32[$3 + 320 + 20 + 12 >> 2] | 0)) $151 = 1; else $151 = HEAP32[$3 + 320 + 20 + 12 >> 2] | 0;
 HEAP32[$3 + 320 + 20 + 12 >> 2] = $151;
 if (!(HEAP32[$3 + 296 + 4 >> 2] | 0)) $161 = 8; else $161 = HEAP32[$3 + 296 + 4 >> 2] | 0;
 HEAP32[$3 + 296 + 4 >> 2] = $161;
 HEAP32[$3 + 296 >> 2] = (HEAP32[$3 + 296 >> 2] | 0) == 0 ? HEAP32[539088] | 0 : HEAP32[$3 + 296 >> 2] | 0;
 HEAP32[$3 + 360 >> 2] = (HEAP32[$3 + 360 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 360 >> 2] | 0;
 if ((HEAP32[$3 + 360 >> 2] | 0) > 4) HEAP32[$3 + 360 >> 2] = 4;
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[$3 + 360 >> 2] | 0)) break;
  HEAP32[$5 >> 2] = $3 + 364 + ((HEAP32[$4 >> 2] | 0) * 36 | 0);
  if (!(HEAP32[HEAP32[$5 >> 2] >> 2] | 0)) $195 = HEAP32[539087] | 0; else $195 = HEAP32[HEAP32[$5 >> 2] >> 2] | 0;
  HEAP32[HEAP32[$5 >> 2] >> 2] = $195;
  if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0)) $205 = 15; else $205 = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = $205;
  HEAP32[$6 >> 2] = $3 + 364 + ((HEAP32[$4 >> 2] | 0) * 36 | 0) + 8;
  if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0)) $219 = 2; else $219 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] = $219;
  if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0)) $229 = 1; else $229 = HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] = $229;
  if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0)) $239 = 1; else $239 = HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] = $239;
  if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] | 0)) $249 = 2; else $249 = HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] = $249;
  if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0)) $259 = 1; else $259 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] = $259;
  if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] | 0)) $269 = 1; else $269 = HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] = $269;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= 16) break;
  HEAP32[$8 >> 2] = $3 + 8 + 96 + ((HEAP32[$7 >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0)) break;
  if ((HEAP32[HEAP32[$8 >> 2] >> 2] | 0) >= 8) {
   label = 45;
   break;
  }
  HEAP32[$9 >> 2] = $3 + 8 + ((HEAP32[HEAP32[$8 >> 2] >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] | 0)) $298 = 1; else $298 = HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] | 0;
  HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] = $298;
  if (!(HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0)) $308 = 1; else $308 = HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0;
  HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] = $308;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 if ((label | 0) == 45) ___assert_fail(34063, 17628, 13946, 34113);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$10 + 16 >> 2] = 0;
 HEAP32[$10 + 20 >> 2] = 0;
 HEAP32[$10 + 24 >> 2] = 0;
 HEAP32[$10 + 28 >> 2] = 0;
 HEAP8[$11 >> 0] = 1;
 HEAP32[$12 >> 2] = 0;
 while (1) {
  if ((HEAP32[$12 >> 2] | 0) >= 16) break;
  if (HEAP32[$3 + 8 + 96 + ((HEAP32[$12 >> 2] | 0) * 12 | 0) + 4 >> 2] | 0) HEAP8[$11 >> 0] = 0;
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 }
 HEAP32[$13 >> 2] = 0;
 while (1) {
  if ((HEAP32[$13 >> 2] | 0) >= 16) break;
  HEAP32[$14 >> 2] = $3 + 8 + 96 + ((HEAP32[$13 >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] | 0)) break;
  if ((HEAP32[HEAP32[$14 >> 2] >> 2] | 0) >= 8) {
   label = 60;
   break;
  }
  if (HEAP8[$11 >> 0] & 1) HEAP32[(HEAP32[$14 >> 2] | 0) + 4 >> 2] = HEAP32[$10 + (HEAP32[HEAP32[$14 >> 2] >> 2] << 2) >> 2];
  $346 = __sg_vertexformat_bytesize(HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] | 0) | 0;
  $349 = $10 + (HEAP32[HEAP32[$14 >> 2] >> 2] << 2) | 0;
  HEAP32[$349 >> 2] = (HEAP32[$349 >> 2] | 0) + $346;
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 }
 if ((label | 0) == 60) ___assert_fail(34063, 17628, 13967, 34113);
 HEAP32[$15 >> 2] = 0;
 while (1) {
  if ((HEAP32[$15 >> 2] | 0) >= 8) break;
  HEAP32[$16 >> 2] = $3 + 8 + ((HEAP32[$15 >> 2] | 0) * 12 | 0);
  if (!(HEAP32[HEAP32[$16 >> 2] >> 2] | 0)) HEAP32[HEAP32[$16 >> 2] >> 2] = HEAP32[$10 + (HEAP32[$15 >> 2] << 2) >> 2];
  HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
 }
 _memcpy($0 | 0, $3 | 0, 556) | 0;
 STACKTOP = sp;
 return;
}

function _stbtt_FindGlyphIndex($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $331 = 0, $336 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 60 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 52 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 84 | 0;
 $8 = sp + 44 | 0;
 $9 = sp + 40 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 82 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 78 | 0;
 $14 = sp + 76 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 74 | 0;
 $18 = sp + 72 | 0;
 $19 = sp + 70 | 0;
 $20 = sp + 68 | 0;
 $21 = sp + 24 | 0;
 $22 = sp + 20 | 0;
 $23 = sp + 16 | 0;
 $24 = sp + 12 | 0;
 $25 = sp + 8 | 0;
 $26 = sp + 4 | 0;
 $27 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
 HEAP32[$6 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 40 >> 2];
 HEAP16[$7 >> 1] = _ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0) | 0;
 if (!(HEAPU16[$7 >> 1] | 0)) {
  HEAP32[$8 >> 2] = (_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 2 | 0) | 0) & 65535;
  if ((HEAP32[$4 >> 2] | 0) < ((HEAP32[$8 >> 2] | 0) - 6 | 0)) {
   HEAP32[$2 >> 2] = HEAPU8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 6 + (HEAP32[$4 >> 2] | 0) >> 0];
   $336 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $336 | 0;
  } else {
   HEAP32[$2 >> 2] = 0;
   $336 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $336 | 0;
  }
 }
 if ((HEAPU16[$7 >> 1] | 0) == 6) {
  HEAP32[$9 >> 2] = (_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 6 | 0) | 0) & 65535;
  HEAP32[$10 >> 2] = (_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 8 | 0) | 0) & 65535;
  if ((HEAP32[$4 >> 2] | 0) >>> 0 >= (HEAP32[$9 >> 2] | 0) >>> 0) if ((HEAP32[$4 >> 2] | 0) >>> 0 < ((HEAP32[$9 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
   HEAP32[$2 >> 2] = (_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 10 + ((HEAP32[$4 >> 2] | 0) - (HEAP32[$9 >> 2] | 0) << 1) | 0) | 0) & 65535;
   $336 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $336 | 0;
  }
  HEAP32[$2 >> 2] = 0;
  $336 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $336 | 0;
 }
 if ((HEAPU16[$7 >> 1] | 0) == 2) ___assert_fail(43639, 40159, 1424, 40451);
 if ((HEAPU16[$7 >> 1] | 0) != 4) {
  if ((HEAPU16[$7 >> 1] | 0) != 12) if ((HEAPU16[$7 >> 1] | 0) != 13) ___assert_fail(43639, 40159, 1495, 40451);
  HEAP32[$21 >> 2] = _ttULONG((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 12 | 0) | 0;
  HEAP32[$22 >> 2] = 0;
  HEAP32[$23 >> 2] = HEAP32[$21 >> 2];
  while (1) {
   if ((HEAP32[$22 >> 2] | 0) >= (HEAP32[$23 >> 2] | 0)) {
    label = 41;
    break;
   }
   HEAP32[$24 >> 2] = (HEAP32[$22 >> 2] | 0) + ((HEAP32[$23 >> 2] | 0) - (HEAP32[$22 >> 2] | 0) >> 1);
   HEAP32[$25 >> 2] = _ttULONG((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 16 + ((HEAP32[$24 >> 2] | 0) * 12 | 0) | 0) | 0;
   HEAP32[$26 >> 2] = _ttULONG((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 16 + ((HEAP32[$24 >> 2] | 0) * 12 | 0) + 4 | 0) | 0;
   if ((HEAP32[$4 >> 2] | 0) >>> 0 < (HEAP32[$25 >> 2] | 0) >>> 0) HEAP32[$23 >> 2] = HEAP32[$24 >> 2]; else {
    if ((HEAP32[$4 >> 2] | 0) >>> 0 <= (HEAP32[$26 >> 2] | 0) >>> 0) break;
    HEAP32[$22 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
   }
  }
  if ((label | 0) == 41) {
   HEAP32[$2 >> 2] = 0;
   $336 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $336 | 0;
  }
  HEAP32[$27 >> 2] = _ttULONG((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 16 + ((HEAP32[$24 >> 2] | 0) * 12 | 0) + 8 | 0) | 0;
  $331 = HEAP32[$27 >> 2] | 0;
  if ((HEAPU16[$7 >> 1] | 0) == 12) {
   HEAP32[$2 >> 2] = $331 + (HEAP32[$4 >> 2] | 0) - (HEAP32[$25 >> 2] | 0);
   $336 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $336 | 0;
  } else {
   HEAP32[$2 >> 2] = $331;
   $336 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $336 | 0;
  }
 }
 HEAP16[$11 >> 1] = ((_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 6 | 0) | 0) & 65535) >> 1;
 HEAP16[$12 >> 1] = ((_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 8 | 0) | 0) & 65535) >> 1;
 HEAP16[$13 >> 1] = _ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 10 | 0) | 0;
 HEAP16[$14 >> 1] = ((_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 12 | 0) | 0) & 65535) >> 1;
 HEAP32[$15 >> 2] = (HEAP32[$6 >> 2] | 0) + 14;
 HEAP32[$16 >> 2] = HEAP32[$15 >> 2];
 if ((HEAP32[$4 >> 2] | 0) > 65535) {
  HEAP32[$2 >> 2] = 0;
  $336 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $336 | 0;
 }
 $133 = HEAP32[$4 >> 2] | 0;
 if (($133 | 0) >= ((_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) + (HEAPU16[$14 >> 1] << 1) | 0) | 0) & 65535 | 0)) HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + (HEAPU16[$14 >> 1] << 1);
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) - 2;
 while (1) {
  if (!(HEAP16[$13 >> 1] | 0)) break;
  HEAP16[$12 >> 1] = HEAPU16[$12 >> 1] >> 1;
  HEAP16[$17 >> 1] = _ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) + (HEAPU16[$12 >> 1] << 1) | 0) | 0;
  if ((HEAP32[$4 >> 2] | 0) > (HEAPU16[$17 >> 1] | 0)) HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + (HEAPU16[$12 >> 1] << 1);
  HEAP16[$13 >> 1] = (HEAP16[$13 >> 1] | 0) + -1 << 16 >> 16;
 }
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 2;
 HEAP16[$20 >> 1] = ((HEAP32[$16 >> 2] | 0) - (HEAP32[$15 >> 2] | 0) | 0) >>> 1;
 $183 = HEAP32[$4 >> 2] | 0;
 if (($183 | 0) > ((_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) + (HEAPU16[$20 >> 1] << 1) | 0) | 0) & 65535 | 0)) ___assert_fail(40472, 40159, 1460, 40451);
 HEAP16[$19 >> 1] = _ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 14 + (HEAPU16[$11 >> 1] << 1) + 2 + (HEAPU16[$20 >> 1] << 1) | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) < (HEAPU16[$19 >> 1] | 0)) {
  HEAP32[$2 >> 2] = 0;
  $336 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $336 | 0;
 }
 HEAP16[$18 >> 1] = _ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 14 + ((HEAPU16[$11 >> 1] | 0) * 6 | 0) + 2 + (HEAPU16[$20 >> 1] << 1) | 0) | 0;
 if (!(HEAPU16[$18 >> 1] | 0)) {
  $229 = HEAP32[$4 >> 2] | 0;
  HEAP32[$2 >> 2] = $229 + ((_ttSHORT((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) + 14 + (HEAPU16[$11 >> 1] << 2) + 2 + (HEAPU16[$20 >> 1] << 1) | 0) | 0) << 16 >> 16) & 65535;
  $336 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $336 | 0;
 } else {
  HEAP32[$2 >> 2] = (_ttUSHORT((HEAP32[$5 >> 2] | 0) + (HEAPU16[$18 >> 1] | 0) + ((HEAP32[$4 >> 2] | 0) - (HEAPU16[$19 >> 1] | 0) << 1) + (HEAP32[$6 >> 2] | 0) + 14 + ((HEAPU16[$11 >> 1] | 0) * 6 | 0) + 2 + (HEAPU16[$20 >> 1] << 1) | 0) | 0) & 65535;
  $336 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $336 | 0;
 }
 return 0;
}

function __ZNSt3__26__sortIR7comparePmEEvT0_S4_T_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0160221 = 0, $$0167 = 0, $$0174 = 0, $$1 = 0, $$1$ph = 0, $$1$ph$be = 0, $$1155 = 0, $$1161 = 0, $$1181$ph = 0, $$1181$ph$be = 0, $$2156 = 0, $$2162 = 0, $$2176 = 0, $$2179 = 0, $$3157 = 0, $$3163 = 0, $$3170 = 0, $$4158 = 0, $$4164 = 0, $$4171 = 0, $$5159 = 0, $$5165 = 0, $$5172 = 0, $$6 = 0, $$6166 = 0, $$6173 = 0, $$6186 = 0, $10 = 0, $14 = 0, $28 = 0, $29 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $49 = 0, $5 = 0, $52 = 0, $58 = 0, $6 = 0, $64 = 0, $69 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $9 = 0, $92 = 0, $95 = 0, $96 = 0, $99 = 0, label = 0;
 $$1$ph = $0;
 $$1181$ph = $1;
 L1 : while (1) {
  $3 = $$1181$ph;
  $4 = $$1181$ph + -4 | 0;
  $5 = $$1181$ph + -8 | 0;
  $6 = $$1181$ph;
  $$1 = $$1$ph;
  L3 : while (1) {
   $8 = $3 - $$1 | 0;
   $9 = $8 >> 2;
   switch ($9 | 0) {
   case 1:
   case 0:
    {
     break L1;
     break;
    }
   case 2:
    {
     label = 4;
     break L1;
     break;
    }
   case 3:
    {
     label = 6;
     break L1;
     break;
    }
   case 4:
    {
     label = 7;
     break L1;
     break;
    }
   case 5:
    {
     label = 8;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($8 | 0) < 124) {
    label = 10;
    break L1;
   }
   $28 = $$1 + ((($9 | 0) / 2 | 0) << 2) | 0;
   if (($8 | 0) > 3996) {
    $29 = ($9 | 0) / 4 | 0;
    $$0167 = __ZNSt3__27__sort5IR7comparePmEEjT0_S4_S4_S4_S4_T_($$1, $$1 + ($29 << 2) | 0, $28, $28 + ($29 << 2) | 0, $4, $2) | 0;
   } else $$0167 = __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($$1, $28, $4, $2) | 0;
   if (__ZN7compareclEmm($2, HEAP32[$$1 >> 2] | 0, HEAP32[$28 >> 2] | 0) | 0) {
    $$3157 = $4;
    $$3170 = $$0167;
   } else {
    if (($$1 | 0) == ($5 | 0)) {
     label = 18;
     break;
    }
    $39 = $5;
    while (1) {
     if (__ZN7compareclEmm($2, HEAP32[$39 >> 2] | 0, HEAP32[$28 >> 2] | 0) | 0) break;
     $38 = $39 + -4 | 0;
     if (($$1 | 0) == ($38 | 0)) {
      label = 18;
      break L3;
     } else $39 = $38;
    }
    $69 = HEAP32[$$1 >> 2] | 0;
    HEAP32[$$1 >> 2] = HEAP32[$39 >> 2];
    HEAP32[$39 >> 2] = $69;
    $$3157 = $39;
    $$3170 = $$0167 + 1 | 0;
   }
   $72 = $$1 + 4 | 0;
   L19 : do if ($72 >>> 0 < $$3157 >>> 0) {
    $$0174 = $28;
    $$4158 = $$3157;
    $$4164 = $72;
    $$4171 = $$3170;
    while (1) {
     $$5165 = $$4164;
     while (1) {
      $77 = $$5165 + 4 | 0;
      if (__ZN7compareclEmm($2, HEAP32[$$5165 >> 2] | 0, HEAP32[$$0174 >> 2] | 0) | 0) $$5165 = $77; else break;
     }
     $$5159 = $$4158;
     do $$5159 = $$5159 + -4 | 0; while (!(__ZN7compareclEmm($2, HEAP32[$$5159 >> 2] | 0, HEAP32[$$0174 >> 2] | 0) | 0));
     if ($$5165 >>> 0 > $$5159 >>> 0) {
      $$2176 = $$0174;
      $$5172 = $$4171;
      $$6166 = $$5165;
      break L19;
     }
     $83 = HEAP32[$$5165 >> 2] | 0;
     HEAP32[$$5165 >> 2] = HEAP32[$$5159 >> 2];
     HEAP32[$$5159 >> 2] = $83;
     $$0174 = ($$0174 | 0) == ($$5165 | 0) ? $$5159 : $$0174;
     $$4158 = $$5159;
     $$4164 = $77;
     $$4171 = $$4171 + 1 | 0;
    }
   } else {
    $$2176 = $28;
    $$5172 = $$3170;
    $$6166 = $72;
   } while (0);
   if (($$6166 | 0) == ($$2176 | 0)) $$6173 = $$5172; else if (__ZN7compareclEmm($2, HEAP32[$$2176 >> 2] | 0, HEAP32[$$6166 >> 2] | 0) | 0) {
    $92 = HEAP32[$$6166 >> 2] | 0;
    HEAP32[$$6166 >> 2] = HEAP32[$$2176 >> 2];
    HEAP32[$$2176 >> 2] = $92;
    $$6173 = $$5172 + 1 | 0;
   } else $$6173 = $$5172;
   if (!$$6173) {
    $95 = __ZNSt3__227__insertion_sort_incompleteIR7comparePmEEbT0_S4_T_($$1, $$6166, $2) | 0;
    $96 = $$6166 + 4 | 0;
    if (__ZNSt3__227__insertion_sort_incompleteIR7comparePmEEbT0_S4_T_($96, $$1181$ph, $2) | 0) {
     label = 47;
     break;
    }
    if ($95) {
     $$2179 = 2;
     $$6 = $96;
     $$6186 = $$1181$ph;
     label = 52;
     break;
    }
   }
   $99 = $$6166;
   if (($99 - $$1 | 0) >= ($6 - $99 | 0)) {
    label = 51;
    break;
   }
   __ZNSt3__26__sortIR7comparePmEEvT0_S4_T_($$1, $$6166, $2);
   $$1 = $$6166 + 4 | 0;
  }
  L40 : do if ((label | 0) == 18) {
   label = 0;
   $41 = $$1 + 4 | 0;
   if (__ZN7compareclEmm($2, HEAP32[$$1 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0) $$1161 = $41; else {
    if (($41 | 0) == ($4 | 0)) break L1;
    $$0160221 = $41;
    while (1) {
     if (__ZN7compareclEmm($2, HEAP32[$$1 >> 2] | 0, HEAP32[$$0160221 >> 2] | 0) | 0) break;
     $52 = $$0160221 + 4 | 0;
     if (($52 | 0) == ($4 | 0)) break L1; else $$0160221 = $52;
    }
    $49 = HEAP32[$$0160221 >> 2] | 0;
    HEAP32[$$0160221 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $49;
    $$1161 = $$0160221 + 4 | 0;
   }
   if (($$1161 | 0) == ($4 | 0)) break L1;
   $$1155 = $4;
   $$2162 = $$1161;
   while (1) {
    $$3163 = $$2162;
    while (1) {
     $58 = $$3163 + 4 | 0;
     if (__ZN7compareclEmm($2, HEAP32[$$1 >> 2] | 0, HEAP32[$$3163 >> 2] | 0) | 0) break; else $$3163 = $58;
    }
    $$2156 = $$1155;
    do $$2156 = $$2156 + -4 | 0; while (__ZN7compareclEmm($2, HEAP32[$$1 >> 2] | 0, HEAP32[$$2156 >> 2] | 0) | 0);
    if ($$3163 >>> 0 >= $$2156 >>> 0) {
     $$2179 = 4;
     $$6 = $$3163;
     $$6186 = $$1181$ph;
     label = 52;
     break L40;
    }
    $64 = HEAP32[$$3163 >> 2] | 0;
    HEAP32[$$3163 >> 2] = HEAP32[$$2156 >> 2];
    HEAP32[$$2156 >> 2] = $64;
    $$1155 = $$2156;
    $$2162 = $58;
   }
  } else if ((label | 0) == 47) {
   label = 0;
   $$2179 = $95 ? 1 : 2;
   $$6 = $$1;
   $$6186 = $95 ? $$1181$ph : $$6166;
   label = 52;
  } else if ((label | 0) == 51) {
   label = 0;
   __ZNSt3__26__sortIR7comparePmEEvT0_S4_T_($$6166 + 4 | 0, $$1181$ph, $2);
   $$1$ph$be = $$1;
   $$1181$ph$be = $$6166;
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   switch ($$2179 & 7) {
   case 2:
   case 4:
   case 0:
    {
     $$1$ph$be = $$6;
     $$1181$ph$be = $$6186;
     break;
    }
   default:
    break L1;
   }
  }
  $$1$ph = $$1$ph$be;
  $$1181$ph = $$1181$ph$be;
 }
 if ((label | 0) == 4) {
  $10 = $$1181$ph + -4 | 0;
  if (__ZN7compareclEmm($2, HEAP32[$10 >> 2] | 0, HEAP32[$$1 >> 2] | 0) | 0) {
   $14 = HEAP32[$$1 >> 2] | 0;
   HEAP32[$$1 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$10 >> 2] = $14;
  }
 } else if ((label | 0) == 6) __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($$1, $$1 + 4 | 0, $$1181$ph + -4 | 0, $2) | 0; else if ((label | 0) == 7) __ZNSt3__27__sort4IR7comparePmEEjT0_S4_S4_S4_T_($$1, $$1 + 4 | 0, $$1 + 8 | 0, $$1181$ph + -4 | 0, $2) | 0; else if ((label | 0) == 8) __ZNSt3__27__sort5IR7comparePmEEjT0_S4_S4_S4_S4_T_($$1, $$1 + 4 | 0, $$1 + 8 | 0, $$1 + 12 | 0, $$1181$ph + -4 | 0, $2) | 0; else if ((label | 0) == 10) __ZNSt3__218__insertion_sort_3IR7comparePmEEvT0_S4_T_($$1, $$1181$ph, $2);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$072 = 0, $$1 = 0, $$174 = 0, $$sroa$0102$0 = 0, $$sroa$096$0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $109 = 0, $12 = 0, $13 = 0, $14 = 0, $21 = 0, $22 = 0, $29 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $45 = 0, $46 = 0, $53 = 0, $54 = 0, $62 = 0, $68 = 0, $69 = 0, $70 = 0, $73 = 0, $84 = 0, $85 = 0, $92 = 0, $96 = 0, $isdigit = 0, $isdigit81 = 0, $isdigittmp = 0, $isdigittmp80 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp;
 L1 : do if (($1 - $0 | 0) > 1) if ((HEAP8[$0 >> 0] | 0) == 83) {
  $12 = HEAP8[$0 + 1 >> 0] | 0;
  switch ($12 | 0) {
  case 97:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($3, 49205);
    $13 = $2 + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    if ($14 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($14, $3);
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 98:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm18EEERAT__Kc($3, 49220);
    $21 = $2 + 4 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    if ($22 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($22, $3);
     HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 115:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($3, 48699);
    $29 = $2 + 4 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    if ($30 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($30, $3);
     HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 105:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($3, 48795);
    $37 = $2 + 4 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    if ($38 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($38, $3);
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 111:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($3, 48872);
    $45 = $2 + 4 | 0;
    $46 = HEAP32[$45 >> 2] | 0;
    if ($46 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($46, $3);
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 100:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm14EEERAT__Kc($3, 48949);
    $53 = $2 + 4 | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    if ($54 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54, $3);
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  case 95:
   {
    $62 = HEAP32[$2 + 16 >> 2] | 0;
    if (($62 | 0) == (HEAP32[$2 + 20 >> 2] | 0)) {
     $$1 = $0;
     break L1;
    }
    $68 = HEAP32[$62 + 4 >> 2] | 0;
    $69 = $2 + 4 | 0;
    $70 = $2 + 8 | 0;
    $$sroa$0102$0 = HEAP32[$62 >> 2] | 0;
    while (1) {
     if (($$sroa$0102$0 | 0) == ($68 | 0)) break;
     $73 = HEAP32[$69 >> 2] | 0;
     if (($73 | 0) == (HEAP32[$70 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$0102$0); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($73, $$sroa$0102$0);
      HEAP32[$69 >> 2] = (HEAP32[$69 >> 2] | 0) + 24;
     }
     $$sroa$0102$0 = $$sroa$0102$0 + 24 | 0;
    }
    $$1 = $0 + 2 | 0;
    break L1;
    break;
   }
  default:
   {
    $isdigittmp = $12 + -48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if (!$isdigit) if (!(_isupper($12) | 0)) {
     $$1 = $0;
     break L1;
    }
    $$072 = $0 + 2 | 0;
    $$174 = $isdigit ? $isdigittmp : $12 + -55 | 0;
    while (1) {
     if (($$072 | 0) == ($1 | 0)) {
      $$1 = $0;
      break L1;
     }
     $84 = HEAP8[$$072 >> 0] | 0;
     $85 = $84 << 24 >> 24;
     $isdigittmp80 = $85 + -48 | 0;
     $isdigit81 = $isdigittmp80 >>> 0 < 10;
     if (!$isdigit81) if (!(_isupper($85) | 0)) break;
     $$072 = $$072 + 1 | 0;
     $$174 = ($isdigit81 ? $isdigittmp80 : $85 + -55 | 0) + ($$174 * 36 | 0) | 0;
    }
    if ($84 << 24 >> 24 != 95) {
     $$1 = $0;
     break L1;
    }
    $92 = $$174 + 1 | 0;
    $96 = HEAP32[$2 + 16 >> 2] | 0;
    $100 = $96;
    if ($92 >>> 0 >= (HEAP32[$2 + 20 >> 2] | 0) - $96 >> 4 >>> 0) {
     $$1 = $0;
     break L1;
    }
    $104 = HEAP32[$100 + ($92 << 4) + 4 >> 2] | 0;
    $105 = $2 + 4 | 0;
    $106 = $2 + 8 | 0;
    $$sroa$096$0 = HEAP32[$100 + ($92 << 4) >> 2] | 0;
    while (1) {
     if (($$sroa$096$0 | 0) == ($104 | 0)) break;
     $109 = HEAP32[$105 >> 2] | 0;
     if (($109 | 0) == (HEAP32[$106 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$096$0); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($109, $$sroa$096$0);
      HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + 24;
     }
     $$sroa$096$0 = $$sroa$096$0 + 24 | 0;
    }
    $$1 = $$072 + 1 | 0;
    break L1;
   }
  }
 } else $$1 = $0; else $$1 = $0; while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __sfetch_channel_dowork($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $184 = 0, $2 = 0, $207 = 0, $218 = 0, $3 = 0, $32 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 32 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 24 | 0;
 $11 = sp + 20 | 0;
 $12 = sp + 16 | 0;
 $13 = sp + 12 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 4 | 0;
 $16 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = __sfetch_ring_count((HEAP32[$2 >> 2] | 0) + 20 | 0) | 0;
 HEAP32[$5 >> 2] = __sfetch_ring_count((HEAP32[$2 >> 2] | 0) + 4 | 0) | 0;
 HEAP32[$6 >> 2] = (HEAP32[$4 >> 2] | 0) >>> 0 < (HEAP32[$5 >> 2] | 0) >>> 0 ? HEAP32[$4 >> 2] | 0 : HEAP32[$5 >> 2] | 0;
 HEAP32[$7 >> 2] = 0;
 while (1) {
  $32 = HEAP32[$2 >> 2] | 0;
  if ((HEAP32[$7 >> 2] | 0) >>> 0 >= (HEAP32[$6 >> 2] | 0) >>> 0) {
   label = 10;
   break;
  }
  HEAP32[$8 >> 2] = __sfetch_ring_dequeue($32 + 20 | 0) | 0;
  HEAP32[$9 >> 2] = __sfetch_pool_item_lookup(HEAP32[$3 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
  if (!(HEAP32[$9 >> 2] | 0)) {
   label = 4;
   break;
  }
  if ((HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] | 0) != 1) {
   label = 6;
   break;
  }
  HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] = 2;
  $48 = __sfetch_ring_dequeue((HEAP32[$2 >> 2] | 0) + 4 | 0) | 0;
  HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] = $48;
  if (!(HEAP32[(HEAP32[$9 >> 2] | 0) + 24 >> 2] | 0)) __sfetch_invoke_response_callback(HEAP32[$9 >> 2] | 0);
  __sfetch_ring_enqueue((HEAP32[$2 >> 2] | 0) + 36 | 0, HEAP32[$8 >> 2] | 0);
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) ___assert_fail(39372, 21538, 2189, 39377); else if ((label | 0) == 6) ___assert_fail(39400, 21538, 2190, 39377); else if ((label | 0) == 10) {
  HEAP32[$10 >> 2] = __sfetch_ring_count($32 + 36 | 0) | 0;
  HEAP32[$11 >> 2] = 0;
  while (1) {
   if ((HEAP32[$11 >> 2] | 0) >>> 0 >= (HEAP32[$10 >> 2] | 0) >>> 0) {
    label = 29;
    break;
   }
   HEAP32[$12 >> 2] = __sfetch_ring_peek((HEAP32[$2 >> 2] | 0) + 36 | 0, HEAP32[$11 >> 2] | 0) | 0;
   HEAP32[$13 >> 2] = __sfetch_pool_item_lookup(HEAP32[$3 >> 2] | 0, HEAP32[$12 >> 2] | 0) | 0;
   if (!(HEAP32[$13 >> 2] | 0)) {
    label = 13;
    break;
   }
   if (!(HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] | 0)) {
    label = 15;
    break;
   }
   if ((HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] | 0) == 3) {
    label = 17;
    break;
   }
   if (HEAP8[(HEAP32[$13 >> 2] | 0) + 56 >> 0] & 1) {
    HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] = 5;
    HEAP8[(HEAP32[$13 >> 2] | 0) + 56 >> 0] = 0;
   }
   if (HEAP8[(HEAP32[$13 >> 2] | 0) + 56 + 1 >> 0] & 1) {
    if ((HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] | 0) == 5) HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] = 4;
    HEAP8[(HEAP32[$13 >> 2] | 0) + 56 + 1 >> 0] = 0;
   }
   if (HEAP8[(HEAP32[$13 >> 2] | 0) + 56 + 2 >> 0] & 1) {
    HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] = 6;
    HEAP8[(HEAP32[$13 >> 2] | 0) + 56 + 16 >> 0] = 1;
   }
   switch (HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] | 0) {
   case 4:
   case 2:
    {
     HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] = 3;
     break;
    }
   default:
    {}
   }
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
  }
  if ((label | 0) == 13) ___assert_fail(39372, 21538, 2205, 39377); else if ((label | 0) == 15) ___assert_fail(39439, 21538, 2206, 39377); else if ((label | 0) == 17) ___assert_fail(39476, 21538, 2207, 39377); else if ((label | 0) == 29) {
   while (1) {
    if (!((__sfetch_ring_empty((HEAP32[$2 >> 2] | 0) + 36 | 0) | 0) ^ 1)) break;
    HEAP32[$14 >> 2] = __sfetch_ring_dequeue((HEAP32[$2 >> 2] | 0) + 36 | 0) | 0;
    __sfetch_request_handler(HEAP32[HEAP32[$2 >> 2] >> 2] | 0, HEAP32[$14 >> 2] | 0);
   }
   while (1) {
    if (!((__sfetch_ring_empty((HEAP32[$2 >> 2] | 0) + 52 | 0) | 0) ^ 1)) {
     label = 60;
     break;
    }
    HEAP32[$15 >> 2] = __sfetch_ring_dequeue((HEAP32[$2 >> 2] | 0) + 52 | 0) | 0;
    if (!(HEAP32[$15 >> 2] | 0)) {
     label = 35;
     break;
    }
    HEAP32[$16 >> 2] = __sfetch_pool_item_lookup(HEAP32[$3 >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0;
    if (!(HEAP32[$16 >> 2] | 0)) {
     label = 38;
     break;
    }
    if (!(HEAP32[(HEAP32[$16 >> 2] | 0) + 20 >> 2] | 0)) {
     label = 38;
     break;
    }
    if (!(HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] | 0)) {
     label = 40;
     break;
    }
    if ((HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] | 0) == 1) {
     label = 42;
     break;
    }
    if ((HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] | 0) == 2) {
     label = 44;
     break;
    }
    if ((HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] | 0) == 4) {
     label = 46;
     break;
    }
    HEAP32[(HEAP32[$16 >> 2] | 0) + 56 + 4 >> 2] = HEAP32[(HEAP32[$16 >> 2] | 0) + 32 >> 2];
    HEAP32[(HEAP32[$16 >> 2] | 0) + 56 + 8 >> 2] = HEAP32[(HEAP32[$16 >> 2] | 0) + 32 + 4 >> 2];
    $184 = HEAP32[$16 >> 2] | 0;
    if (HEAP8[(HEAP32[$16 >> 2] | 0) + 56 + 2 >> 0] & 1) HEAP32[$184 + 56 + 12 >> 2] = 6; else HEAP32[(HEAP32[$16 >> 2] | 0) + 56 + 12 >> 2] = HEAP32[$184 + 32 + 8 >> 2];
    if (HEAP8[(HEAP32[$16 >> 2] | 0) + 32 + 13 >> 0] & 1) HEAP8[(HEAP32[$16 >> 2] | 0) + 56 + 16 >> 0] = 1;
    $207 = (HEAP32[$16 >> 2] | 0) + 4 | 0;
    if (HEAP8[(HEAP32[$16 >> 2] | 0) + 32 + 12 >> 0] & 1) HEAP32[$207 >> 2] = 6; else if ((HEAP32[$207 >> 2] | 0) == 3) HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] = 4;
    __sfetch_invoke_response_callback(HEAP32[$16 >> 2] | 0);
    $218 = HEAP32[$2 >> 2] | 0;
    if (HEAP8[(HEAP32[$16 >> 2] | 0) + 56 + 16 >> 0] & 1) {
     __sfetch_ring_enqueue($218 + 4 | 0, HEAP32[(HEAP32[$16 >> 2] | 0) + 12 >> 2] | 0);
     __sfetch_pool_item_free(HEAP32[$3 >> 2] | 0, HEAP32[$15 >> 2] | 0);
    } else __sfetch_ring_enqueue($218 + 36 | 0, HEAP32[$15 >> 2] | 0);
   }
   if ((label | 0) == 35) ___assert_fail(39514, 21538, 2252, 39377); else if ((label | 0) == 38) ___assert_fail(39522, 21538, 2254, 39377); else if ((label | 0) == 40) ___assert_fail(39439, 21538, 2255, 39377); else if ((label | 0) == 42) ___assert_fail(39545, 21538, 2256, 39377); else if ((label | 0) == 44) ___assert_fail(39584, 21538, 2257, 39377); else if ((label | 0) == 46) ___assert_fail(39624, 21538, 2258, 39377); else if ((label | 0) == 60) {
    STACKTOP = sp;
    return;
   }
  }
 }
}

function __sg_gl_create_pipeline($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $152 = 0, $202 = 0, $208 = 0, $214 = 0, $3 = 0, $4 = 0, $5 = 0, $53 = 0, $55 = 0, $6 = 0, $63 = 0, $66 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 44 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 20 | 0;
 $10 = sp + 16 | 0;
 $11 = sp + 12 | 0;
 $12 = sp + 8 | 0;
 $13 = sp + 4 | 0;
 $14 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!((HEAP32[$3 >> 2] | 0) != 0 & (HEAP32[$4 >> 2] | 0) != 0 & (HEAP32[$5 >> 2] | 0) != 0)) ___assert_fail(34336, 17628, 6107, 34355);
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] | 0) ___assert_fail(34378, 17628, 6108, 34355);
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) ___assert_fail(34378, 17628, 6108, 34355);
 if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[HEAP32[$4 >> 2] >> 2] | 0)) ___assert_fail(34433, 17628, 6109, 34355);
 if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 252 >> 2] | 0)) ___assert_fail(34465, 17628, 6110, 34355);
 HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] = HEAP32[$4 >> 2];
 __sg_pipeline_common_init((HEAP32[$3 >> 2] | 0) + 12 | 0, HEAP32[$5 >> 2] | 0);
 HEAP32[(HEAP32[$3 >> 2] | 0) + 88 + 320 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 508 >> 2];
 $53 = (HEAP32[$3 >> 2] | 0) + 88 + 256 | 0;
 $55 = (HEAP32[$5 >> 2] | 0) + 296 | 0;
 HEAP32[$53 >> 2] = HEAP32[$55 >> 2];
 HEAP32[$53 + 4 >> 2] = HEAP32[$55 + 4 >> 2];
 HEAP32[$53 + 8 >> 2] = HEAP32[$55 + 8 >> 2];
 HEAP32[$53 + 12 >> 2] = HEAP32[$55 + 12 >> 2];
 HEAP32[$53 + 16 >> 2] = HEAP32[$55 + 16 >> 2];
 HEAP32[$53 + 20 >> 2] = HEAP32[$55 + 20 >> 2];
 dest = (HEAP32[$3 >> 2] | 0) + 88 + 280 | 0;
 src = (HEAP32[$5 >> 2] | 0) + 320 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $63 = (HEAP32[$3 >> 2] | 0) + 88 + 324 | 0;
 $66 = (HEAP32[$5 >> 2] | 0) + 364 + 8 | 0;
 HEAP32[$63 >> 2] = HEAP32[$66 >> 2];
 HEAP32[$63 + 4 >> 2] = HEAP32[$66 + 4 >> 2];
 HEAP32[$63 + 8 >> 2] = HEAP32[$66 + 8 >> 2];
 HEAP32[$63 + 12 >> 2] = HEAP32[$66 + 12 >> 2];
 HEAP32[$63 + 16 >> 2] = HEAP32[$66 + 16 >> 2];
 HEAP32[$63 + 20 >> 2] = HEAP32[$66 + 20 >> 2];
 HEAP32[$63 + 24 >> 2] = HEAP32[$66 + 24 >> 2];
 HEAP32[$6 >> 2] = 0;
 while (1) {
  $69 = HEAP32[$5 >> 2] | 0;
  if ((HEAP32[$6 >> 2] | 0) >= 4) break;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 88 + 352 + (HEAP32[$6 >> 2] << 2) >> 2] = HEAP32[$69 + 364 + ((HEAP32[$6 >> 2] | 0) * 36 | 0) + 4 >> 2];
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 88 + 368 >> 2] = HEAP32[$69 + 516 >> 2];
 HEAP32[(HEAP32[$3 >> 2] | 0) + 88 + 372 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 520 >> 2];
 HEAP32[(HEAP32[$3 >> 2] | 0) + 88 + 376 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 524 >> 2];
 HEAP8[(HEAP32[$3 >> 2] | 0) + 88 + 380 >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 544 >> 0] & 1;
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= 16) break;
  HEAP8[(HEAP32[$3 >> 2] | 0) + 88 + (HEAP32[$7 >> 2] << 4) >> 0] = -1;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[539158] | 0)) {
   label = 38;
   break;
  }
  HEAP32[$9 >> 2] = (HEAP32[$5 >> 2] | 0) + 8 + 96 + ((HEAP32[$8 >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0)) {
   label = 38;
   break;
  }
  if ((HEAP32[HEAP32[$9 >> 2] >> 2] | 0) >= 8) {
   label = 20;
   break;
  }
  HEAP32[$10 >> 2] = (HEAP32[$5 >> 2] | 0) + 8 + ((HEAP32[HEAP32[$9 >> 2] >> 2] | 0) * 12 | 0);
  HEAP32[$11 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2];
  HEAP32[$12 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2];
  HEAP32[$13 >> 2] = HEAP32[$8 >> 2];
  if (!(__sg_strempty((HEAP32[$4 >> 2] | 0) + 252 + 4 + (HEAP32[$8 >> 2] << 4) | 0) | 0)) {
   $152 = HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] | 0) + 252 >> 2] | 0;
   HEAP32[$13 >> 2] = _glGetAttribLocation($152 | 0, __sg_strptr((HEAP32[$4 >> 2] | 0) + 252 + 4 + (HEAP32[$8 >> 2] << 4) | 0) | 0) | 0;
  }
  if ((HEAP32[$13 >> 2] | 0) >= (HEAP32[539158] | 0)) {
   label = 24;
   break;
  }
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   HEAP32[$14 >> 2] = (HEAP32[$3 >> 2] | 0) + 88 + (HEAP32[$13 >> 2] << 4);
   if ((HEAP8[HEAP32[$14 >> 2] >> 0] | 0) != -1) {
    label = 27;
    break;
   }
   HEAP8[HEAP32[$14 >> 2] >> 0] = HEAP32[HEAP32[$9 >> 2] >> 2];
   if ((HEAP32[$11 >> 2] | 0) == 1) HEAP8[(HEAP32[$14 >> 2] | 0) + 1 >> 0] = 0; else HEAP8[(HEAP32[$14 >> 2] | 0) + 1 >> 0] = HEAP32[$12 >> 2];
   if ((HEAP32[HEAP32[$10 >> 2] >> 2] | 0) <= 0) {
    label = 32;
    break;
   }
   HEAP8[(HEAP32[$14 >> 2] | 0) + 2 >> 0] = HEAP32[HEAP32[$10 >> 2] >> 2];
   HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2];
   $202 = (__sg_gl_vertexformat_size(HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0) | 0) & 255;
   HEAP8[(HEAP32[$14 >> 2] | 0) + 3 >> 0] = $202;
   $208 = __sg_gl_vertexformat_type(HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] = $208;
   $214 = __sg_gl_vertexformat_normalized(HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0) | 0;
   HEAP8[(HEAP32[$14 >> 2] | 0) + 4 >> 0] = $214;
   HEAP8[(HEAP32[$3 >> 2] | 0) + 12 + 8 + (HEAP32[HEAP32[$9 >> 2] >> 2] | 0) >> 0] = 1;
  } else {
   _puts(34567) | 0;
   if (!(__sg_strptr((HEAP32[$4 >> 2] | 0) + 252 + 4 + (HEAP32[$8 >> 2] << 4) | 0) | 0)) {
    label = 35;
    break;
   }
   _puts(__sg_strptr((HEAP32[$4 >> 2] | 0) + 252 + 4 + (HEAP32[$8 >> 2] << 4) | 0) | 0) | 0;
  }
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 if ((label | 0) == 20) ___assert_fail(34063, 17628, 6135, 34355); else if ((label | 0) == 24) ___assert_fail(34478, 17628, 6143, 34355); else if ((label | 0) == 27) ___assert_fail(34524, 17628, 6146, 34355); else if ((label | 0) == 32) ___assert_fail(34548, 17628, 6154, 34355); else if ((label | 0) == 35) ___assert_fail(34606, 17628, 6164, 34355); else if ((label | 0) == 38) {
  STACKTOP = sp;
  return 2;
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i$add$i = 0, $$0$i$i$add$i116 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i115 = 0, $$0105$ph = 0, $$0105$ph$ph = 0, $$0111 = 0, $$088 = 0, $$1112 = 0, $$1112$be = 0, $$1112$ph = 0, $$1112$ph$ph = 0, $$8 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $57 = 0, $58 = 0, $66 = 0, $71 = 0, $76 = 0, $77 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) $$8 = $0; else if ((HEAP8[$0 >> 0] | 0) == 70) {
  $8 = $0 + 1 | 0;
  if (($8 | 0) == ($1 | 0)) $$8 = $0; else {
   if ((HEAP8[$8 >> 0] | 0) == 89) {
    $12 = $0 + 2 | 0;
    if (($12 | 0) == ($1 | 0)) {
     $$8 = $0;
     break;
    } else $$0111 = $12;
   } else $$0111 = $8;
   $14 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0111, $1, $2) | 0;
   if (($14 | 0) == ($$0111 | 0)) $$8 = $0; else {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 47879, __ZNSt3__211char_traitsIcE6lengthEPKc(47879) | 0);
    $17 = $2 + 4 | 0;
    $18 = $3 + 11 | 0;
    $19 = $3 + 4 | 0;
    $20 = $4 + 11 | 0;
    $21 = $4 + 4 | 0;
    $$0105$ph = 0;
    $$1112$ph = $14;
    L9 : while (1) {
     $$1112 = $$1112$ph;
     L11 : while (1) {
      if (($$1112 | 0) == ($1 | 0)) {
       label = 11;
       break L9;
      }
      switch (HEAP8[$$1112 >> 0] | 0) {
      case 69:
       {
        label = 16;
        break L9;
        break;
       }
      case 118:
       {
        $$1112$be = $$1112 + 1 | 0;
        break;
       }
      case 82:
       {
        $29 = $$1112 + 1 | 0;
        if (($29 | 0) == ($1 | 0)) label = 23; else if ((HEAP8[$29 >> 0] | 0) == 69) {
         $$0105$ph$ph = 1;
         $$1112$ph$ph = $29;
         break L11;
        } else label = 23;
        break;
       }
      case 79:
       {
        $33 = $$1112 + 1 | 0;
        if (($33 | 0) == ($1 | 0)) label = 23; else if ((HEAP8[$33 >> 0] | 0) == 69) {
         $$0105$ph$ph = 2;
         $$1112$ph$ph = $33;
         break L11;
        } else label = 23;
        break;
       }
      default:
       label = 23;
      }
      L20 : do if ((label | 0) == 23) {
       label = 0;
       $40 = ((HEAP32[$17 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       $41 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$1112, $1, $2) | 0;
       $45 = ((HEAP32[$17 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
       if (($41 | 0) == ($$1112 | 0) | ($41 | 0) == ($1 | 0)) break L9;
       $$088 = $40;
       while (1) {
        if ($$088 >>> 0 >= $45 >>> 0) break;
        $49 = HEAP8[$18 >> 0] | 0;
        if (($49 << 24 >> 24 < 0 ? HEAP32[$19 >> 2] | 0 : $49 & 255) >>> 0 > 1) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 48101) | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$2 >> 2] | 0) + ($$088 * 24 | 0) | 0);
        $57 = HEAP8[$20 >> 0] | 0;
        $58 = $57 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3, $58 ? HEAP32[$4 >> 2] | 0 : $4, $58 ? HEAP32[$21 >> 2] | 0 : $57 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$088 = $$088 + 1 | 0;
       }
       $$0 = $40;
       while (1) {
        if ($$0 >>> 0 >= $45 >>> 0) {
         $$1112$be = $41;
         break L20;
        }
        $66 = HEAP32[$17 >> 2] | 0;
        $$0$i$i$idx$i115 = 0;
        while (1) {
         if (($$0$i$i$idx$i115 | 0) == -1) break;
         $$0$i$i$add$i116 = $$0$i$i$idx$i115 + -1 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($66 + ($$0$i$i$add$i116 * 24 | 0) | 0);
         $$0$i$i$idx$i115 = $$0$i$i$add$i116;
        }
        HEAP32[$17 >> 2] = $66 + -24;
        $$0 = $$0 + 1 | 0;
       }
      } while (0);
      $$1112 = $$1112$be;
     }
     $$0105$ph = $$0105$ph$ph;
     $$1112$ph = $$1112$ph$ph;
    }
    if ((label | 0) == 11) {
     $23 = HEAP32[$17 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$17 >> 2] = $23 + -24;
    } else if ((label | 0) == 16) {
     $27 = $$1112 + 1 | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 47877) | 0;
     switch ($$0105$ph & 3) {
     case 1:
      {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 49305) | 0;
       break;
      }
     case 2:
      {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 49308) | 0;
       break;
      }
     default:
      {}
     }
     $71 = HEAP32[$17 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) != ($71 | 0)) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($71 + -24 | 0, 47911) | 0;
      $76 = HEAP8[$18 >> 0] | 0;
      $77 = $76 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm((HEAP32[$17 >> 2] | 0) + -12 | 0, 0, $77 ? HEAP32[$3 >> 2] | 0 : $3, $77 ? HEAP32[$19 >> 2] | 0 : $76 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$8 = $27;
      break;
     }
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$8 = $0;
   }
  }
 } else $$8 = $0; while (0);
 STACKTOP = sp;
 return $$8 | 0;
}

function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $139 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge3 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 & -8;
 $5 = $0 + $4 | 0;
 $6 = HEAP32[546341] | 0;
 $8 = $3 & 3;
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) _abort();
 $11 = $5 + 4 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (!($12 & 1)) _abort();
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0;
   return $$2 | 0;
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) if (($4 - $1 | 0) >>> 0 <= HEAP32[546457] << 1 >>> 0) {
   $$2 = $0;
   return $$2 | 0;
  }
  $$2 = 0;
  return $$2 | 0;
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0;
  if ($24 >>> 0 <= 15) {
   $$2 = $0;
   return $$2 | 0;
  }
  $26 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$26 + 4 >> 2] = $24 | 3;
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1;
  _dispose_chunk($26, $24);
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[546343] | 0) == ($5 | 0)) {
  $37 = (HEAP32[546340] | 0) + $4 | 0;
  $39 = $37 - $1 | 0;
  $40 = $0 + $1 | 0;
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$40 + 4 >> 2] = $39 | 1;
  HEAP32[546343] = $40;
  HEAP32[546340] = $39;
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[546342] | 0) == ($5 | 0)) {
  $49 = (HEAP32[546339] | 0) + $4 | 0;
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  $51 = $49 - $1 | 0;
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0;
   $54 = $0 + $49 | 0;
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
   HEAP32[$53 + 4 >> 2] = $51 | 1;
   HEAP32[$54 >> 2] = $51;
   $60 = $54 + 4 | 0;
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2;
   $storemerge = $53;
   $storemerge3 = $51;
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2;
   $67 = $0 + $49 + 4 | 0;
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[546339] = $storemerge3;
  HEAP32[546342] = $storemerge;
  $$2 = $0;
  return $$2 | 0;
 }
 if ($12 & 2 | 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $73 = ($12 & -8) + $4 | 0;
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $75 = $73 - $1 | 0;
 $76 = $12 >>> 3;
 L49 : do if ($12 >>> 0 < 256) {
  $79 = HEAP32[$5 + 8 >> 2] | 0;
  $81 = HEAP32[$5 + 12 >> 2] | 0;
  $83 = 2185388 + ($76 << 1 << 2) | 0;
  if (($79 | 0) != ($83 | 0)) {
   if ($6 >>> 0 > $79 >>> 0) _abort();
   if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) _abort();
  }
  if (($81 | 0) == ($79 | 0)) {
   HEAP32[546337] = HEAP32[546337] & ~(1 << $76);
   break;
  }
  if (($81 | 0) == ($83 | 0)) $$pre$phiZ2D = $81 + 8 | 0; else {
   if ($6 >>> 0 > $81 >>> 0) _abort();
   $96 = $81 + 8 | 0;
   if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) $$pre$phiZ2D = $96; else _abort();
  }
  HEAP32[$79 + 12 >> 2] = $81;
  HEAP32[$$pre$phiZ2D >> 2] = $79;
 } else {
  $101 = HEAP32[$5 + 24 >> 2] | 0;
  $103 = HEAP32[$5 + 12 >> 2] | 0;
  do if (($103 | 0) == ($5 | 0)) {
   $114 = $5 + 16 | 0;
   $115 = $114 + 4 | 0;
   $116 = HEAP32[$115 >> 2] | 0;
   if (!$116) {
    $118 = HEAP32[$114 >> 2] | 0;
    if (!$118) {
     $$3 = 0;
     break;
    } else {
     $$1271$ph = $118;
     $$1274$ph = $114;
    }
   } else {
    $$1271$ph = $116;
    $$1274$ph = $115;
   }
   $$1271 = $$1271$ph;
   $$1274 = $$1274$ph;
   while (1) {
    $120 = $$1271 + 20 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    if (!$121) {
     $123 = $$1271 + 16 | 0;
     $124 = HEAP32[$123 >> 2] | 0;
     if (!$124) break; else {
      $$1271$be = $124;
      $$1274$be = $123;
     }
    } else {
     $$1271$be = $121;
     $$1274$be = $120;
    }
    $$1271 = $$1271$be;
    $$1274 = $$1274$be;
   }
   if ($6 >>> 0 > $$1274 >>> 0) _abort(); else {
    HEAP32[$$1274 >> 2] = 0;
    $$3 = $$1271;
    break;
   }
  } else {
   $106 = HEAP32[$5 + 8 >> 2] | 0;
   if ($6 >>> 0 > $106 >>> 0) _abort();
   $108 = $106 + 12 | 0;
   if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) _abort();
   $111 = $103 + 8 | 0;
   if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$108 >> 2] = $103;
    HEAP32[$111 >> 2] = $106;
    $$3 = $103;
    break;
   } else _abort();
  } while (0);
  if ($101 | 0) {
   $129 = HEAP32[$5 + 28 >> 2] | 0;
   $130 = 2185652 + ($129 << 2) | 0;
   do if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$130 >> 2] = $$3;
    if (!$$3) {
     HEAP32[546338] = HEAP32[546338] & ~(1 << $129);
     break L49;
    }
   } else if ((HEAP32[546341] | 0) >>> 0 > $101 >>> 0) _abort(); else {
    $139 = $101 + 16 | 0;
    HEAP32[((HEAP32[$139 >> 2] | 0) == ($5 | 0) ? $139 : $101 + 20 | 0) >> 2] = $$3;
    if (!$$3) break L49; else break;
   } while (0);
   $144 = HEAP32[546341] | 0;
   if ($144 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $101;
   $147 = $5 + 16 | 0;
   $148 = HEAP32[$147 >> 2] | 0;
   do if ($148 | 0) if ($144 >>> 0 > $148 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $148;
    HEAP32[$148 + 24 >> 2] = $$3;
    break;
   } while (0);
   $154 = HEAP32[$147 + 4 >> 2] | 0;
   if ($154 | 0) if ((HEAP32[546341] | 0) >>> 0 > $154 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $154;
    HEAP32[$154 + 24 >> 2] = $$3;
    break;
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $3 & 1 | $73 | 2;
  $165 = $0 + $73 + 4 | 0;
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1;
  $$2 = $0;
  return $$2 | 0;
 } else {
  $168 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$168 + 4 >> 2] = $75 | 3;
  $175 = $0 + $73 + 4 | 0;
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1;
  _dispose_chunk($168, $75);
  $$2 = $0;
  return $$2 | 0;
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i107 = 0, $$0$i$i$i110 = 0, $$0$i$i$i113 = 0, $$0$i$i$idx$i = 0, $$10 = 0, $$1100 = 0, $$4103 = 0, $$5104 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $5 = 0, $54 = 0, $6 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 99) if ((HEAP8[$0 + 1 >> 0] | 0) == 118) {
  $19 = $2 + 63 | 0;
  $20 = HEAP8[$19 >> 0] | 0;
  HEAP8[$19 >> 0] = 0;
  $21 = $0 + 2 | 0;
  $22 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($21, $1, $2) | 0;
  HEAP8[$19 >> 0] = $20;
  if (($22 | 0) == ($21 | 0) | ($22 | 0) == ($1 | 0)) $$10 = $0; else {
   if ((HEAP8[$22 >> 0] | 0) == 95) {
    $29 = $22 + 1 | 0;
    if (($29 | 0) == ($1 | 0)) {
     $$10 = $0;
     break;
    }
    $31 = HEAP8[$29 >> 0] | 0;
    L9 : do if ($31 << 24 >> 24 == 69) {
     $33 = $2 + 4 | 0;
     $34 = HEAP32[$33 >> 2] | 0;
     if ($34 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      HEAP32[$34 >> 2] = 0;
      HEAP32[$34 + 4 >> 2] = 0;
      HEAP32[$34 + 8 >> 2] = 0;
      HEAP32[$34 + 12 >> 2] = 0;
      HEAP32[$34 + 16 >> 2] = 0;
      HEAP32[$34 + 20 >> 2] = 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($34);
      HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 24;
      $$4103 = $29;
      break;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
      $$4103 = $29;
      break;
     }
    } else {
     $$1100 = $29;
     $41 = $31;
     while (1) {
      if ($41 << 24 >> 24 == 69) {
       $$4103 = $$1100;
       break L9;
      }
      $42 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1100, $1, $2) | 0;
      if (($42 | 0) == ($$1100 | 0) | ($42 | 0) == ($1 | 0)) {
       $$10 = $0;
       break L1;
      }
      $$1100 = $42;
      $41 = HEAP8[$42 >> 0] | 0;
     }
    } while (0);
    $$5104 = $$4103 + 1 | 0;
   } else {
    $27 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($22, $1, $2) | 0;
    if (($27 | 0) == ($22 | 0)) {
     $$10 = $0;
     break;
    } else $$5104 = $27;
   }
   $46 = $2 + 4 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   if ((($47 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$10 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $47 + -24 | 0);
    $54 = HEAP32[$46 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($54 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$46 >> 2] = $54 + -24;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $54 + -48 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9, 0, 47879) | 0;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 49043) | 0;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
    $$0$i$i$i107 = 0;
    while (1) {
     if (($$0$i$i$i107 | 0) == 3) break;
     HEAP32[$8 + ($$0$i$i$i107 << 2) >> 2] = 0;
     $$0$i$i$i107 = $$0$i$i$i107 + 1 | 0;
    }
    $65 = HEAP8[$3 + 11 >> 0] | 0;
    $66 = $65 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7, $66 ? HEAP32[$3 >> 2] | 0 : $3, $66 ? HEAP32[$3 + 4 >> 2] | 0 : $65 & 255) | 0;
    HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
    $$0$i$i$i110 = 0;
    while (1) {
     if (($$0$i$i$i110 | 0) == 3) break;
     HEAP32[$7 + ($$0$i$i$i110 << 2) >> 2] = 0;
     $$0$i$i$i110 = $$0$i$i$i110 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47877) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i113 = 0;
    while (1) {
     if (($$0$i$i$i113 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i113 << 2) >> 2] = 0;
     $$0$i$i$i113 = $$0$i$i$i113 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$46 >> 2] | 0) + -24 | 0, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$10 = $$5104;
   }
  }
 } else $$10 = $0; else $$10 = $0; else $$10 = $0; while (0);
 STACKTOP = sp;
 return $$10 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$067 = 0, $$1 = 0, $101 = 0, $103 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $53 = 0, $54 = 0, $59 = 0, $60 = 0, $64 = 0, $66 = 0, $71 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $85 = 0, $89 = 0, $90 = 0, $91 = 0, $96 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else switch (HEAP8[$0 >> 0] | 0) {
 case 84:
  {
   $8 = $2 + 4 | 0;
   $12 = ((HEAP32[$8 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $13 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   $14 = HEAP32[$8 >> 2] | 0;
   $17 = ($14 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $21 = $14;
   if (($13 | 0) != ($0 | 0) & ($17 | 0) == ($12 + 1 | 0)) {
    HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $21 + -24 | 0, $4);
    $23 = $2 + 20 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    if ($24 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
     HEAP32[$24 >> 2] = 0;
     $29 = $24 + 4 | 0;
     HEAP32[$29 >> 2] = 0;
     $30 = $24 + 8 | 0;
     HEAP32[$30 >> 2] = 0;
     HEAP32[$24 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$24 >> 2] = HEAP32[$3 >> 2];
     $34 = $3 + 4 | 0;
     HEAP32[$29 >> 2] = HEAP32[$34 >> 2];
     $36 = $3 + 8 | 0;
     HEAP32[$30 >> 2] = HEAP32[$36 >> 2];
     HEAP32[$36 >> 2] = 0;
     HEAP32[$34 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
    $$1 = $13;
    break L1;
   }
   $$067 = $17;
   $43 = $21;
   while (1) {
    if (($$067 | 0) == ($12 | 0)) {
     $$1 = $0;
     break L1;
    }
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    $44 = $43 + -24 | 0;
    HEAP32[$8 >> 2] = $44;
    $$067 = $$067 + -1 | 0;
    $43 = $44;
   }
   break;
  }
 case 68:
  {
   $46 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($46 | 0) == ($0 | 0)) {
    $$1 = $0;
    break L1;
   }
   $50 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($50 | 0)) {
    $$1 = $0;
    break L1;
   }
   HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
   __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $50 + -24 | 0, $4);
   $53 = $2 + 20 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   if ($54 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
    HEAP32[$54 >> 2] = 0;
    $59 = $54 + 4 | 0;
    HEAP32[$59 >> 2] = 0;
    $60 = $54 + 8 | 0;
    HEAP32[$60 >> 2] = 0;
    HEAP32[$54 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
    HEAP32[$54 >> 2] = HEAP32[$3 >> 2];
    $64 = $3 + 4 | 0;
    HEAP32[$59 >> 2] = HEAP32[$64 >> 2];
    $66 = $3 + 8 | 0;
    HEAP32[$60 >> 2] = HEAP32[$66 >> 2];
    HEAP32[$66 >> 2] = 0;
    HEAP32[$64 >> 2] = 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
   $$1 = $46;
   break L1;
   break;
  }
 case 83:
  {
   $71 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($71 | 0) != ($0 | 0)) {
    $$1 = $71;
    break L1;
   }
   if (($1 - $0 | 0) <= 2) {
    $$1 = $0;
    break L1;
   }
   if ((HEAP8[$0 + 1 >> 0] | 0) != 116) {
    $$1 = $0;
    break L1;
   }
   $80 = $0 + 2 | 0;
   $81 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($80, $1, $2) | 0;
   if (($81 | 0) == ($80 | 0)) {
    $$1 = $0;
    break L1;
   }
   $84 = $2 + 4 | 0;
   $85 = HEAP32[$84 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($85 | 0)) {
    $$1 = $0;
    break L1;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($85 + -24 | 0, 0, 48173) | 0;
   $89 = (HEAP32[$84 >> 2] | 0) + -24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
   __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $89, $4);
   $90 = $2 + 20 | 0;
   $91 = HEAP32[$90 >> 2] | 0;
   if ($91 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
    HEAP32[$91 >> 2] = 0;
    $96 = $91 + 4 | 0;
    HEAP32[$96 >> 2] = 0;
    $97 = $91 + 8 | 0;
    HEAP32[$97 >> 2] = 0;
    HEAP32[$91 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
    HEAP32[$91 >> 2] = HEAP32[$3 >> 2];
    $101 = $3 + 4 | 0;
    HEAP32[$96 >> 2] = HEAP32[$101 >> 2];
    $103 = $3 + 8 | 0;
    HEAP32[$97 >> 2] = HEAP32[$103 >> 2];
    HEAP32[$103 >> 2] = 0;
    HEAP32[$101 >> 2] = 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
   $$1 = $81;
   break L1;
   break;
  }
 default:
  {
   $$1 = $0;
   break L1;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN2Dr19FindObjectsInBitmapERK8DrBitmapRNSt3__26vectorIS0_NS3_9allocatorIS0_EEEERNS4_I6DrRectNS5_IS9_EEEEdb($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = $4 | 0;
 var $$0102 = 0, $$051106 = 0, $$05299 = 0, $$053100 = 0, $$054110 = 0, $$055114 = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $40 = 0, $48 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $81 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy1 = sp + 72 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 108 | 0;
 $7 = sp + 112 | 0;
 $8 = sp + 104 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 24 | 0;
 $11 = sp;
 $12 = sp + 100 | 0;
 $13 = sp + 96 | 0;
 __ZN8DrBitmapC2Ev($5);
 if ($4) {
  __ZN2Dr22BlackAndWhiteFromAlphaERK8DrBitmapdb($$byval_copy1, $0, $3, 1);
  __ZN8DrBitmapaSERKS_($5, $$byval_copy1) | 0;
  __ZN8DrBitmapD2Ev($$byval_copy1);
 } else __ZN8DrBitmapaSERKS_($5, $0) | 0;
 __ZN7DrColorC2Ej($6, 0);
 $14 = $5 + 4 | 0;
 L5 : do if ($4) {
  $15 = HEAP32[$14 >> 2] | 0;
  if (($15 | 0) > 0) {
   $17 = $5 + 8 | 0;
   $$055114 = 0;
   $19 = HEAP32[$17 >> 2] | 0;
   $87 = $15;
   while (1) {
    if (($19 | 0) > 0) {
     $$054110 = 0;
     do {
      __ZNK8DrBitmap8getPixelEii($7, $5, $$055114, $$054110);
      $$054110 = $$054110 + 1 | 0;
      if (__ZNK7DrColorneERKS_($7, $6) | 0) {
       label = 13;
       break L5;
      }
      $20 = HEAP32[$17 >> 2] | 0;
     } while (($$054110 | 0) < ($20 | 0));
     $26 = HEAP32[$14 >> 2] | 0;
     $88 = $20;
    } else {
     $26 = $87;
     $88 = $19;
    }
    $$055114 = $$055114 + 1 | 0;
    if (($$055114 | 0) >= ($26 | 0)) break; else {
     $19 = $88;
     $87 = $26;
    }
   }
   if (($26 | 0) > 0) {
    $62 = $5 + 8 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (($63 | 0) > 0) {
     $$051106 = 0;
     $71 = $63;
     $91 = $26;
     while (1) {
      if (($71 | 0) > 0) {
       $$0102 = 0;
       do {
        __ZN7DrColorC2Ej($13, -65536);
        HEAP8[$$byval_copy1 >> 0] = HEAP8[$13 >> 0] | 0;
        HEAP8[$$byval_copy1 + 1 >> 0] = HEAP8[$13 + 1 >> 0] | 0;
        HEAP8[$$byval_copy1 + 2 >> 0] = HEAP8[$13 + 2 >> 0] | 0;
        HEAP8[$$byval_copy1 + 3 >> 0] = HEAP8[$13 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($5, $$051106, $$0102, $$byval_copy1);
        $$0102 = $$0102 + 1 | 0;
        $76 = HEAP32[$62 >> 2] | 0;
       } while (($$0102 | 0) < ($76 | 0));
       $74 = HEAP32[$14 >> 2] | 0;
       $92 = $76;
      } else {
       $74 = $91;
       $92 = $71;
      }
      $$051106 = $$051106 + 1 | 0;
      if (($$051106 | 0) >= ($74 | 0)) break; else {
       $71 = $92;
       $91 = $74;
      }
     }
     __ZNK8DrBitmap4rectEv($$byval_copy1, $5);
     $65 = $2 + 4 | 0;
     $66 = HEAP32[$65 >> 2] | 0;
     if ($66 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN6DrRectC2ERKS_($66, $$byval_copy1);
      HEAP32[$65 >> 2] = (HEAP32[$65 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($2, $$byval_copy1);
     $80 = $1 + 4 | 0;
     $81 = HEAP32[$80 >> 2] | 0;
     if (($81 | 0) == (HEAP32[$1 + 8 >> 2] | 0)) {
      __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($1, $5);
      break;
     } else {
      __ZN8DrBitmapC2ERKS_($81, $5);
      HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 24;
      break;
     }
    }
   }
  }
 } else label = 13; while (0);
 if ((label | 0) == 13) {
  $27 = HEAP32[$14 >> 2] | 0;
  if (($27 | 0) > 0) {
   $29 = $5 + 8 | 0;
   $30 = $$byval_copy1 + 4 | 0;
   $31 = $$byval_copy1 + 8 | 0;
   $32 = $2 + 4 | 0;
   $33 = $2 + 8 | 0;
   $34 = $1 + 4 | 0;
   $35 = $1 + 8 | 0;
   $$053100 = 0;
   $37 = HEAP32[$29 >> 2] | 0;
   $89 = $27;
   while (1) {
    if (($37 | 0) > 0) {
     $$05299 = 0;
     do {
      __ZNK8DrBitmap8getPixelEii($8, $5, $$053100, $$05299);
      if (__ZNK7DrColoreqERKS_($8, $6) | 0) {
       __ZN6DrRectC2Ev($9);
       __ZN7DrColorC2Ej($12, -65536);
       HEAP8[$$byval_copy1 >> 0] = HEAP8[$12 >> 0] | 0;
       HEAP8[$$byval_copy1 + 1 >> 0] = HEAP8[$12 + 1 >> 0] | 0;
       HEAP8[$$byval_copy1 + 2 >> 0] = HEAP8[$12 + 2 >> 0] | 0;
       HEAP8[$$byval_copy1 + 3 >> 0] = HEAP8[$12 + 3 >> 0] | 0;
       __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($11, $5, $$053100, $$05299, $$byval_copy1, .001, 0, $10, $9);
       __ZN6DrRect6adjustEiiii($9, -1, -1, 1, 1);
       __ZN8DrBitmap4copyER6DrRect($$byval_copy1, $11, $9);
       do if ((HEAP32[$30 >> 2] | 0) > 0) if ((HEAP32[$31 >> 2] | 0) > 0 & (HEAP32[$10 >> 2] | 0) > 1) {
        $48 = HEAP32[$32 >> 2] | 0;
        if (($48 | 0) == (HEAP32[$33 >> 2] | 0)) __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($2, $9); else {
         __ZN6DrRectC2ERKS_($48, $9);
         HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 16;
        }
        $53 = HEAP32[$34 >> 2] | 0;
        if (($53 | 0) == (HEAP32[$35 >> 2] | 0)) {
         __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($1, $$byval_copy1);
         break;
        } else {
         __ZN8DrBitmapC2ERKS_($53, $$byval_copy1);
         HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 24;
         break;
        }
       } while (0);
       __ZN8DrBitmapD2Ev($$byval_copy1);
       __ZN8DrBitmapD2Ev($11);
      }
      $$05299 = $$05299 + 1 | 0;
      $59 = HEAP32[$29 >> 2] | 0;
     } while (($$05299 | 0) < ($59 | 0));
     $40 = HEAP32[$14 >> 2] | 0;
     $90 = $59;
    } else {
     $40 = $89;
     $90 = $37;
    }
    $$053100 = $$053100 + 1 | 0;
    if (($$053100 | 0) >= ($40 | 0)) break; else {
     $37 = $90;
     $89 = $40;
    }
   }
  }
 }
 __ZN8DrBitmapD2Ev($5);
 STACKTOP = sp;
 return 0;
}

function _stbi__create_png_image($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $104 = 0, $109 = 0, $11 = 0, $12 = 0, $129 = 0, $13 = 0, $133 = 0, $14 = 0, $142 = 0, $15 = 0, $152 = 0, $155 = 0, $159 = 0, $16 = 0, $165 = 0, $17 = 0, $170 = 0, $18 = 0, $189 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $38 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $7 = sp + 196 | 0;
 $8 = sp + 192 | 0;
 $9 = sp + 188 | 0;
 $10 = sp + 184 | 0;
 $11 = sp + 180 | 0;
 $12 = sp + 176 | 0;
 $13 = sp + 172 | 0;
 $14 = sp + 168 | 0;
 $15 = sp + 164 | 0;
 $16 = sp + 160 | 0;
 $17 = sp + 156 | 0;
 $18 = sp + 152 | 0;
 $19 = sp + 96 | 0;
 $20 = sp + 64 | 0;
 $21 = sp + 32 | 0;
 $22 = sp;
 $23 = sp + 148 | 0;
 $24 = sp + 144 | 0;
 $25 = sp + 140 | 0;
 $26 = sp + 136 | 0;
 $27 = sp + 132 | 0;
 $28 = sp + 128 | 0;
 $29 = sp + 124 | 0;
 HEAP32[$8 >> 2] = $0;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAP32[$13 >> 2] = $5;
 HEAP32[$14 >> 2] = $6;
 HEAP32[$15 >> 2] = (HEAP32[$12 >> 2] | 0) == 16 ? 2 : 1;
 HEAP32[$16 >> 2] = Math_imul(HEAP32[$11 >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0;
 $38 = HEAP32[$8 >> 2] | 0;
 if (!(HEAP32[$14 >> 2] | 0)) {
  HEAP32[$7 >> 2] = _stbi__create_png_image_raw($38, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[HEAP32[HEAP32[$8 >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$8 >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
  $189 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $189 | 0;
 }
 HEAP32[$17 >> 2] = _stbi__malloc_mad3(HEAP32[HEAP32[$38 >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$8 >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[$16 >> 2] | 0, 0) | 0;
 HEAP32[$18 >> 2] = 0;
 while (1) {
  if ((HEAP32[$18 >> 2] | 0) >= 7) {
   label = 16;
   break;
  };
  HEAP32[$19 >> 2] = HEAP32[2172];
  HEAP32[$19 + 4 >> 2] = HEAP32[2173];
  HEAP32[$19 + 8 >> 2] = HEAP32[2174];
  HEAP32[$19 + 12 >> 2] = HEAP32[2175];
  HEAP32[$19 + 16 >> 2] = HEAP32[2176];
  HEAP32[$19 + 20 >> 2] = HEAP32[2177];
  HEAP32[$19 + 24 >> 2] = HEAP32[2178];
  HEAP32[$20 >> 2] = HEAP32[2180];
  HEAP32[$20 + 4 >> 2] = HEAP32[2181];
  HEAP32[$20 + 8 >> 2] = HEAP32[2182];
  HEAP32[$20 + 12 >> 2] = HEAP32[2183];
  HEAP32[$20 + 16 >> 2] = HEAP32[2184];
  HEAP32[$20 + 20 >> 2] = HEAP32[2185];
  HEAP32[$20 + 24 >> 2] = HEAP32[2186];
  HEAP32[$21 >> 2] = HEAP32[2188];
  HEAP32[$21 + 4 >> 2] = HEAP32[2189];
  HEAP32[$21 + 8 >> 2] = HEAP32[2190];
  HEAP32[$21 + 12 >> 2] = HEAP32[2191];
  HEAP32[$21 + 16 >> 2] = HEAP32[2192];
  HEAP32[$21 + 20 >> 2] = HEAP32[2193];
  HEAP32[$21 + 24 >> 2] = HEAP32[2194];
  HEAP32[$22 >> 2] = HEAP32[2196];
  HEAP32[$22 + 4 >> 2] = HEAP32[2197];
  HEAP32[$22 + 8 >> 2] = HEAP32[2198];
  HEAP32[$22 + 12 >> 2] = HEAP32[2199];
  HEAP32[$22 + 16 >> 2] = HEAP32[2200];
  HEAP32[$22 + 20 >> 2] = HEAP32[2201];
  HEAP32[$22 + 24 >> 2] = HEAP32[2202];
  HEAP32[$25 >> 2] = (((HEAP32[HEAP32[HEAP32[$8 >> 2] >> 2] >> 2] | 0) - (HEAP32[$19 + (HEAP32[$18 >> 2] << 2) >> 2] | 0) + (HEAP32[$21 + (HEAP32[$18 >> 2] << 2) >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[$21 + (HEAP32[$18 >> 2] << 2) >> 2] | 0) >>> 0) | 0;
  HEAP32[$26 >> 2] = (((HEAP32[(HEAP32[HEAP32[$8 >> 2] >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[$20 + (HEAP32[$18 >> 2] << 2) >> 2] | 0) + (HEAP32[$22 + (HEAP32[$18 >> 2] << 2) >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[$22 + (HEAP32[$18 >> 2] << 2) >> 2] | 0) >>> 0) | 0;
  if ((HEAP32[$25 >> 2] | 0) != 0 & (HEAP32[$26 >> 2] | 0) != 0) {
   $104 = Math_imul(HEAP32[(HEAP32[HEAP32[$8 >> 2] >> 2] | 0) + 8 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0;
   $109 = ((Math_imul($104, HEAP32[$12 >> 2] | 0) | 0) + 7 >> 3) + 1 | 0;
   HEAP32[$27 >> 2] = Math_imul($109, HEAP32[$26 >> 2] | 0) | 0;
   if (!(_stbi__create_png_image_raw(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$25 >> 2] | 0, HEAP32[$26 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0)) {
    label = 7;
    break;
   }
   HEAP32[$24 >> 2] = 0;
   while (1) {
    if ((HEAP32[$24 >> 2] | 0) >= (HEAP32[$26 >> 2] | 0)) break;
    HEAP32[$23 >> 2] = 0;
    while (1) {
     $129 = HEAP32[$24 >> 2] | 0;
     if ((HEAP32[$23 >> 2] | 0) >= (HEAP32[$25 >> 2] | 0)) break;
     $133 = Math_imul($129, HEAP32[$22 + (HEAP32[$18 >> 2] << 2) >> 2] | 0) | 0;
     HEAP32[$28 >> 2] = $133 + (HEAP32[$20 + (HEAP32[$18 >> 2] << 2) >> 2] | 0);
     $142 = Math_imul(HEAP32[$23 >> 2] | 0, HEAP32[$21 + (HEAP32[$18 >> 2] << 2) >> 2] | 0) | 0;
     HEAP32[$29 >> 2] = $142 + (HEAP32[$19 + (HEAP32[$18 >> 2] << 2) >> 2] | 0);
     $152 = Math_imul(HEAP32[$28 >> 2] | 0, HEAP32[HEAP32[HEAP32[$8 >> 2] >> 2] >> 2] | 0) | 0;
     $155 = (HEAP32[$17 >> 2] | 0) + (Math_imul($152, HEAP32[$16 >> 2] | 0) | 0) | 0;
     $159 = $155 + (Math_imul(HEAP32[$29 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0) | 0;
     $165 = Math_imul(HEAP32[$24 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0;
     $170 = (HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul($165 + (HEAP32[$23 >> 2] | 0) | 0, HEAP32[$16 >> 2] | 0) | 0) | 0;
     _memcpy($159 | 0, $170 | 0, HEAP32[$16 >> 2] | 0) | 0;
     HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 1;
    }
    HEAP32[$24 >> 2] = $129 + 1;
   }
   _free(HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0);
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + (HEAP32[$27 >> 2] | 0);
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) - (HEAP32[$27 >> 2] | 0);
  }
  HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  _free(HEAP32[$17 >> 2] | 0);
  HEAP32[$7 >> 2] = 0;
  $189 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $189 | 0;
 } else if ((label | 0) == 16) {
  HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$7 >> 2] = 1;
  $189 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $189 | 0;
 }
 return 0;
}

function _stbi__bmp_parse_header($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $103 = 0, $121 = 0, $137 = 0, $141 = 0, $145 = 0, $163 = 0, $168 = 0, $17 = 0, $176 = 0, $181 = 0, $185 = 0, $189 = 0, $193 = 0, $2 = 0, $208 = 0, $25 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $67 = 0, $7 = 0, $74 = 0, $79 = 0, $90 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (((_stbi__get8(HEAP32[$3 >> 2] | 0) | 0) & 255 | 0) == 66) if (((_stbi__get8(HEAP32[$3 >> 2] | 0) | 0) & 255 | 0) == 77) {
  _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
  _stbi__get16le(HEAP32[$3 >> 2] | 0) | 0;
  _stbi__get16le(HEAP32[$3 >> 2] | 0) | 0;
  $25 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = $25;
  $29 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
  HEAP32[$5 >> 2] = $29;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] = $29;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] = 0;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] = 0;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] = 0;
  if ((HEAP32[$5 >> 2] | 0) != 12 & (HEAP32[$5 >> 2] | 0) != 40 & (HEAP32[$5 >> 2] | 0) != 56 & (HEAP32[$5 >> 2] | 0) != 108 & (HEAP32[$5 >> 2] | 0) != 124) {
   $51 = (_stbi__err(44155) | 0) != 0;
   HEAP32[$2 >> 2] = $51 ? 0 : 0;
   $208 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $208 | 0;
  }
  $57 = HEAP32[$3 >> 2] | 0;
  if ((HEAP32[$5 >> 2] | 0) == 12) {
   $58 = _stbi__get16le($57) | 0;
   HEAP32[HEAP32[$3 >> 2] >> 2] = $58;
   $61 = _stbi__get16le(HEAP32[$3 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = $61;
  } else {
   $64 = _stbi__get32le($57) | 0;
   HEAP32[HEAP32[$3 >> 2] >> 2] = $64;
   $67 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = $67;
  }
  if ((_stbi__get16le(HEAP32[$3 >> 2] | 0) | 0) != 1) {
   $74 = (_stbi__err(44167) | 0) != 0;
   HEAP32[$2 >> 2] = $74 ? 0 : 0;
   $208 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $208 | 0;
  }
  $79 = _stbi__get16le(HEAP32[$3 >> 2] | 0) | 0;
  HEAP32[HEAP32[$4 >> 2] >> 2] = $79;
  do if ((HEAP32[$5 >> 2] | 0) != 12) {
   HEAP32[$6 >> 2] = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   if ((HEAP32[$6 >> 2] | 0) == 1 | (HEAP32[$6 >> 2] | 0) == 2) {
    $90 = (_stbi__err(44175) | 0) != 0;
    HEAP32[$2 >> 2] = $90 ? 0 : 0;
    $208 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $208 | 0;
   }
   _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   $103 = HEAP32[$5 >> 2] | 0;
   if (!((HEAP32[$5 >> 2] | 0) == 40 | (HEAP32[$5 >> 2] | 0) == 56)) {
    if (($103 | 0) != 108 & (HEAP32[$5 >> 2] | 0) != 124) {
     $176 = (_stbi__err(44167) | 0) != 0;
     HEAP32[$2 >> 2] = $176 ? 0 : 0;
     $208 = HEAP32[$2 >> 2] | 0;
     STACKTOP = sp;
     return $208 | 0;
    }
    $181 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] = $181;
    $185 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = $185;
    $189 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] = $189;
    $193 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] = $193;
    _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    HEAP32[$7 >> 2] = 0;
    while (1) {
     if ((HEAP32[$7 >> 2] | 0) >= 12) break;
     _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
    }
    if ((HEAP32[$5 >> 2] | 0) != 124) break;
    _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    break;
   }
   if (($103 | 0) == 56) {
    _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   }
   if ((HEAP32[HEAP32[$4 >> 2] >> 2] | 0) != 16) if ((HEAP32[HEAP32[$4 >> 2] >> 2] | 0) != 32) break;
   if (!(HEAP32[$6 >> 2] | 0)) {
    $121 = (HEAP32[$4 >> 2] | 0) + 12 | 0;
    if ((HEAP32[HEAP32[$4 >> 2] >> 2] | 0) == 32) {
     HEAP32[$121 >> 2] = 16711680;
     HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 65280;
     HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] = 255;
     HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] = -16777216;
     HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] = 0;
     break;
    } else {
     HEAP32[$121 >> 2] = 31744;
     HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 992;
     HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] = 31;
     break;
    }
   }
   if ((HEAP32[$6 >> 2] | 0) != 3) {
    $168 = (_stbi__err(44167) | 0) != 0;
    HEAP32[$2 >> 2] = $168 ? 0 : 0;
    $208 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $208 | 0;
   }
   $137 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] = $137;
   $141 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = $141;
   $145 = _stbi__get32le(HEAP32[$3 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] = $145;
   if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0)) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0)) {
    $163 = (_stbi__err(44167) | 0) != 0;
    HEAP32[$2 >> 2] = $163 ? 0 : 0;
    $208 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $208 | 0;
   }
  } while (0);
  HEAP32[$2 >> 2] = 1;
  $208 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $208 | 0;
 }
 $17 = (_stbi__err(44147) | 0) != 0;
 HEAP32[$2 >> 2] = $17 ? 0 : 0;
 $208 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $208 | 0;
}

function __ZL10load_imagePhi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$03944 = 0, $$04345 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $37 = 0.0, $38 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $8 = 0, $84 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $$byval_copy3 = sp + 992 | 0;
 $2 = sp + 988 | 0;
 $3 = sp + 984 | 0;
 $5 = sp + 944 | 0;
 $6 = sp + 56 | 0;
 $7 = sp;
 $8 = sp + 980 | 0;
 $9 = sp + 976 | 0;
 $10 = sp + 968 | 0;
 $11 = sp + 940 | 0;
 $12 = _stbi_load_from_memory($0, $1, $2, $3, sp + 972 | 0, 4) | 0;
 if ($12 | 0) {
  $14 = HEAP32[$2 >> 2] | 0;
  $15 = HEAP32[$3 >> 2] | 0;
  HEAP32[$$byval_copy3 >> 2] = Math_imul($14 << 2, $15) | 0;
  __ZN8DrBitmapC2EPKhRKibii($5, $12, $$byval_copy3, 0, $14, $15);
  HEAPF32[$7 >> 2] = .25;
  __ZNSt3__210shared_ptrI7DrImageE11make_sharedIJRA7_KcR8DrBitmapfEEES2_DpOT_($6, 41459, $5, $7);
  $18 = HEAP32[$6 >> 2] | 0;
  $20 = $6 + 4 | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$20 >> 2] = 0;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[544718];
  HEAP32[544718] = $18;
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[544719];
  HEAP32[544719] = $21;
  __ZNSt3__210shared_ptrI7DrImageED2Ev($$byval_copy3);
  __ZNSt3__210shared_ptrI7DrImageED2Ev($6);
  __ZNSt3__210shared_ptrI6DrMeshE11make_sharedIJEEES2_DpOT_($6);
  $24 = HEAP32[$6 >> 2] | 0;
  $26 = $6 + 4 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$26 >> 2] = 0;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[544716];
  HEAP32[544716] = $24;
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[544717];
  HEAP32[544717] = $27;
  __ZNSt3__210shared_ptrI6DrMeshED2Ev($$byval_copy3);
  __ZNSt3__210shared_ptrI6DrMeshED2Ev($6);
  $32 = (__ZNK7DrImage9getBitmapEv(HEAP32[544718] | 0) | 0) + 4 | 0;
  $37 = +(__ZN2Dr3MaxIiEET_RKS1_S3_($32, (__ZNK7DrImage9getBitmapEv(HEAP32[544718] | 0) | 0) + 8 | 0) | 0);
  $38 = HEAP32[544716] | 0;
  HEAPF32[$38 + 28 >> 2] = $37;
  HEAP8[$38 + 24 >> 0] = 1;
  __ZN6DrMesh23initializeExtrudedImageEP7DrImage($38, HEAP32[544718] | 0);
  if ((__ZNK6DrMesh11vertexCountEv(HEAP32[544716] | 0) | 0) > 0) {
   $45 = HEAP32[544716] | 0;
   $50 = (HEAP32[$45 + 16 >> 2] | 0) - (HEAP32[$45 + 12 >> 2] | 0) | 0;
   $51 = ($50 | 0) / 44 | 0;
   $52 = _llvm_stacksave() | 0;
   $53 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($51 * 44 | 0) | 0) + 15 & -16) | 0;
   if ($50 | 0) {
    $56 = (HEAP32[544716] | 0) + 12 | 0;
    $$04345 = 0;
    do {
     dest = $53 + ($$04345 * 44 | 0) | 0;
     src = (HEAP32[$56 >> 2] | 0) + ($$04345 * 44 | 0) | 0;
     stop = dest + 44 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     $$04345 = $$04345 + 1 | 0;
    } while ($$04345 >>> 0 < $51 >>> 0);
   }
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$6 + 8 >> 2] = 0;
   HEAP32[$6 + 12 >> 2] = 0;
   HEAP32[$6 + 16 >> 2] = $53;
   HEAP32[$6 + 20 >> 2] = $50;
   HEAP32[$6 + 24 >> 2] = 41466;
   $60 = $6 + 28 | 0;
   HEAP32[$60 >> 2] = 0;
   HEAP32[$60 + 4 >> 2] = 0;
   HEAP32[$60 + 8 >> 2] = 0;
   HEAP32[$60 + 12 >> 2] = 0;
   HEAP32[$60 + 16 >> 2] = 0;
   HEAP32[$60 + 20 >> 2] = 0;
   HEAP32[$60 + 24 >> 2] = 0;
   HEAP32[$8 >> 2] = HEAP32[13544];
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$8 >> 2];
   _sg_destroy_buffer($$byval_copy3);
   HEAP32[13544] = _sg_make_buffer($6) | 0;
   $63 = HEAP32[544716] | 0;
   $66 = HEAP32[$63 >> 2] | 0;
   $67 = (HEAP32[$63 + 4 >> 2] | 0) - $66 | 0;
   $68 = $67 >> 2;
   $69 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($68 << 1) | 0) + 15 & -16) | 0;
   $71 = $66;
   if ($67 | 0) {
    $$03944 = 0;
    do {
     HEAP16[$69 + ($$03944 << 1) >> 1] = HEAP32[$71 + ($$03944 << 2) >> 2];
     $$03944 = $$03944 + 1 | 0;
    } while ($$03944 >>> 0 < $68 >>> 0);
   }
   HEAP32[$7 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   HEAP32[$7 + 8 >> 2] = 2;
   HEAP32[$7 + 12 >> 2] = 0;
   HEAP32[$7 + 16 >> 2] = $69;
   HEAP32[$7 + 20 >> 2] = $67 >> 1;
   HEAP32[$7 + 24 >> 2] = 41379;
   $84 = $7 + 28 | 0;
   HEAP32[$84 >> 2] = 0;
   HEAP32[$84 + 4 >> 2] = 0;
   HEAP32[$84 + 8 >> 2] = 0;
   HEAP32[$84 + 12 >> 2] = 0;
   HEAP32[$84 + 16 >> 2] = 0;
   HEAP32[$84 + 20 >> 2] = 0;
   HEAP32[$84 + 24 >> 2] = 0;
   HEAP32[$9 >> 2] = HEAP32[13560];
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$9 >> 2];
   _sg_destroy_buffer($$byval_copy3);
   HEAP32[13560] = _sg_make_buffer($7) | 0;
   __ZN6DrVec23setEff(2178888, 0.0, 0.0);
   __ZN6DrVec23setEff(2178896, 25.0, 25.0);
   __ZN2Dr14IdentityMatrixEv($$byval_copy3);
   dest = 2178904;
   src = $$byval_copy3;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _llvm_stackrestore($52 | 0);
  }
  _memset($6 | 0, 0, 884) | 0;
  HEAP32[$6 + 12 >> 2] = HEAP32[(__ZNK7DrImage9getBitmapEv(HEAP32[544718] | 0) | 0) + 4 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAP32[(__ZNK7DrImage9getBitmapEv(HEAP32[544718] | 0) | 0) + 8 >> 2];
  HEAP32[$6 + 32 >> 2] = 23;
  HEAP32[$6 + 40 >> 2] = 2;
  HEAP32[$6 + 44 >> 2] = 2;
  HEAP32[$6 + 76 >> 2] = HEAP32[(__ZNK7DrImage9getBitmapEv(HEAP32[544718] | 0) | 0) + 12 >> 2];
  HEAP32[$6 + 80 >> 2] = __ZNK8DrBitmap4sizeEv(__ZNK7DrImage9getBitmapEv(HEAP32[544718] | 0) | 0) | 0;
  if (HEAP8[2185856] | 0) {
   HEAP32[$10 >> 2] = HEAP32[13574];
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$10 >> 2];
   _sg_uninit_image($$byval_copy3) | 0;
  }
  HEAP32[$11 >> 2] = HEAP32[13574];
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$11 >> 2];
  _sg_init_image($$byval_copy3, $6);
  HEAP8[2185856] = 1;
  _stbi_image_free($12);
  __ZN8DrBitmapD2Ev($5);
 }
 STACKTOP = sp;
 return;
}

function _stbtt_FlattenCurves($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $222 = 0, $46 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $6 = sp + 60 | 0;
 $7 = sp + 56 | 0;
 $8 = sp + 52 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 44 | 0;
 $11 = sp + 40 | 0;
 $12 = sp + 36 | 0;
 $13 = sp + 32 | 0;
 $14 = sp + 28 | 0;
 $15 = sp + 24 | 0;
 $16 = sp + 20 | 0;
 $17 = sp + 16 | 0;
 $18 = sp + 12 | 0;
 $19 = sp + 8 | 0;
 $20 = sp + 4 | 0;
 $21 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAPF32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[$12 >> 2] = $5;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 HEAPF32[$15 >> 2] = +HEAPF32[$9 >> 2] * +HEAPF32[$9 >> 2];
 HEAP32[$17 >> 2] = 0;
 HEAP32[$18 >> 2] = 0;
 HEAP32[$16 >> 2] = 0;
 while (1) {
  if ((HEAP32[$16 >> 2] | 0) >= (HEAP32[$8 >> 2] | 0)) break;
  if ((HEAPU8[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) == 1) HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
  HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[$11 >> 2] >> 2] = HEAP32[$17 >> 2];
 if (!(HEAP32[$17 >> 2] | 0)) {
  HEAP32[$6 >> 2] = 0;
  $222 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $222 | 0;
 }
 $46 = _fons__tmpalloc(HEAP32[$17 >> 2] << 2, HEAP32[$12 >> 2] | 0) | 0;
 HEAP32[HEAP32[$10 >> 2] >> 2] = $46;
 if (!(HEAP32[HEAP32[$10 >> 2] >> 2] | 0)) {
  HEAP32[HEAP32[$11 >> 2] >> 2] = 0;
  HEAP32[$6 >> 2] = 0;
  $222 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $222 | 0;
 }
 HEAP32[$19 >> 2] = 0;
 while (1) {
  if ((HEAP32[$19 >> 2] | 0) >= 2) {
   label = 25;
   break;
  }
  HEAPF32[$20 >> 2] = 0.0;
  HEAPF32[$21 >> 2] = 0.0;
  if ((HEAP32[$19 >> 2] | 0) == 1) {
   HEAP32[$13 >> 2] = _fons__tmpalloc(HEAP32[$14 >> 2] << 3, HEAP32[$12 >> 2] | 0) | 0;
   if (!(HEAP32[$13 >> 2] | 0)) {
    label = 26;
    break;
   }
  }
  HEAP32[$14 >> 2] = 0;
  HEAP32[$17 >> 2] = -1;
  HEAP32[$16 >> 2] = 0;
  while (1) {
   if ((HEAP32[$16 >> 2] | 0) >= (HEAP32[$8 >> 2] | 0)) break;
   switch (HEAPU8[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) {
   case 1:
    {
     if ((HEAP32[$17 >> 2] | 0) >= 0) HEAP32[(HEAP32[HEAP32[$10 >> 2] >> 2] | 0) + (HEAP32[$17 >> 2] << 2) >> 2] = (HEAP32[$14 >> 2] | 0) - (HEAP32[$18 >> 2] | 0);
     HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
     HEAP32[$18 >> 2] = HEAP32[$14 >> 2];
     HEAPF32[$20 >> 2] = +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[$21 >> 2] = +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     $94 = HEAP32[$13 >> 2] | 0;
     $95 = HEAP32[$14 >> 2] | 0;
     HEAP32[$14 >> 2] = $95 + 1;
     _stbtt__add_point($94, $95, +HEAPF32[$20 >> 2], +HEAPF32[$21 >> 2]);
     break;
    }
   case 2:
    {
     HEAPF32[$20 >> 2] = +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[$21 >> 2] = +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     $110 = HEAP32[$13 >> 2] | 0;
     $111 = HEAP32[$14 >> 2] | 0;
     HEAP32[$14 >> 2] = $111 + 1;
     _stbtt__add_point($110, $111, +HEAPF32[$20 >> 2], +HEAPF32[$21 >> 2]);
     break;
    }
   case 3:
    {
     _stbtt__tesselate_curve(HEAP32[$13 >> 2] | 0, $14, +HEAPF32[$20 >> 2], +HEAPF32[$21 >> 2], +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 4 >> 1] | 0), +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 6 >> 1] | 0), +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) >> 1] | 0), +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0), +HEAPF32[$15 >> 2], 0) | 0;
     HEAPF32[$20 >> 2] = +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[$21 >> 2] = +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     break;
    }
   case 4:
    {
     _stbtt__tesselate_cubic(HEAP32[$13 >> 2] | 0, $14, +HEAPF32[$20 >> 2], +HEAPF32[$21 >> 2], +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 4 >> 1] | 0), +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 6 >> 1] | 0), +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 8 >> 1] | 0), +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 10 >> 1] | 0), +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) >> 1] | 0), +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0), +HEAPF32[$15 >> 2], 0);
     HEAPF32[$20 >> 2] = +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[$21 >> 2] = +(HEAP16[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     break;
    }
   default:
    {}
   }
   HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
  }
  HEAP32[(HEAP32[HEAP32[$10 >> 2] >> 2] | 0) + (HEAP32[$17 >> 2] << 2) >> 2] = (HEAP32[$14 >> 2] | 0) - (HEAP32[$18 >> 2] | 0);
  HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
 }
 if ((label | 0) == 25) {
  HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
  $222 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $222 | 0;
 } else if ((label | 0) == 26) {
  _fons__tmpfree(HEAP32[$13 >> 2] | 0, HEAP32[$12 >> 2] | 0);
  _fons__tmpfree(HEAP32[HEAP32[$10 >> 2] >> 2] | 0, HEAP32[$12 >> 2] | 0);
  HEAP32[HEAP32[$10 >> 2] >> 2] = 0;
  HEAP32[HEAP32[$11 >> 2] >> 2] = 0;
  HEAP32[$6 >> 2] = 0;
  $222 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $222 | 0;
 }
 return 0;
}

function __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $$04762 = 0, $$048$lcssa = 0.0, $$04861 = 0.0, $$050$lcssa = 0, $$05060 = 0, $$149 = 0.0, $$151 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$pre$phi66Z2D = 0, $$pre$phiZ2D = 0, $$pre64 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0.0, $33 = 0, $4 = 0, $5 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $$byval_copy8 = sp + 104 | 0;
 $$byval_copy7 = sp + 100 | 0;
 $$byval_copy6 = sp + 96 | 0;
 $3 = sp + 68 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 92 | 0;
 $6 = sp + 88 | 0;
 $7 = sp + 44 | 0;
 $8 = sp + 84 | 0;
 $9 = sp + 80 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 12 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 4 | 0;
 $16 = sp;
 HEAP32[$3 >> 2] = 0;
 $17 = $3 + 4 | 0;
 HEAP32[$17 >> 2] = 0;
 $18 = $3 + 8 | 0;
 HEAP32[$18 >> 2] = 0;
 $19 = $1 + 4 | 0;
 $21 = HEAP32[$1 >> 2] | 0;
 $23 = (HEAP32[$19 >> 2] | 0) - $21 >> 4;
 $25 = $21;
 if ($23 >>> 0 < 2) {
  $26 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($26, 43279);
  HEAP32[$26 >> 2] = 12348;
  ___cxa_throw($26 | 0, 11432, 16);
 }
 $27 = $23 + -1 | 0;
 if ($27 >>> 0 > 1) {
  $29 = $25 + ($27 << 4) | 0;
  $$04762 = 1;
  $$04861 = 0.0;
  $$05060 = 0;
  while (1) {
   $32 = +__Z21PerpendicularDistanceRK8DrPointFS1_S1_($25 + ($$04762 << 4) | 0, $25, $29);
   $33 = $32 > $$04861;
   $$151 = $33 ? $$04762 : $$05060;
   $$149 = $33 ? $32 : $$04861;
   $$04762 = $$04762 + 1 | 0;
   if (($$04762 | 0) == ($27 | 0)) {
    $$048$lcssa = $$149;
    $$050$lcssa = $$151;
    break;
   } else {
    $$04861 = $$149;
    $$05060 = $$151;
   }
  }
 } else {
  $$048$lcssa = 0.0;
  $$050$lcssa = 0;
 }
 do if ($$048$lcssa > $2) {
  HEAP32[$5 >> 2] = $25;
  HEAP32[$6 >> 2] = $25 + ($$050$lcssa << 4) + 16;
  HEAP32[$$byval_copy7 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$$byval_copy8 >> 2] = HEAP32[$6 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2INS_11__wrap_iterIPKS1_EEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISA_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueESA_E4typeE($4, $$byval_copy7, $$byval_copy8);
  HEAP32[$8 >> 2] = (HEAP32[$1 >> 2] | 0) + ($$050$lcssa << 4);
  HEAP32[$9 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$$byval_copy7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$$byval_copy8 >> 2] = HEAP32[$9 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2INS_11__wrap_iterIPKS1_EEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISA_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueESA_E4typeE($7, $$byval_copy7, $$byval_copy8);
  __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($10, $4, $2);
  __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($11, $7, $2);
  HEAP32[$12 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$13 >> 2] = (HEAP32[$10 + 4 >> 2] | 0) + -16;
  HEAP32[$$byval_copy7 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$$byval_copy8 >> 2] = HEAP32[$13 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE6assignINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_($3, $$byval_copy7, $$byval_copy8);
  HEAP32[$14 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$15 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$16 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$$byval_copy6 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$$byval_copy7 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$$byval_copy8 >> 2] = HEAP32[$16 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueES8_E4typeENS6_IPKS1_EESA_SA_($3, $$byval_copy6, $$byval_copy7, $$byval_copy8) | 0;
  if ((HEAP32[$17 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) >> 4 >>> 0 < 2) {
   $53 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc($53, 43309);
   ___cxa_throw($53 | 0, 11416, 18);
  } else {
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($11);
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($10);
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($7);
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($4);
   $$pre$phi66Z2D = $17;
   $$pre$phiZ2D = $3;
   break;
  }
 } else {
  HEAP32[$17 >> 2] = 0;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($3, $25);
  $$pre64 = HEAP32[$17 >> 2] | 0;
  $54 = (HEAP32[$1 >> 2] | 0) + ($27 << 4) | 0;
  if (($$pre64 | 0) == (HEAP32[$18 >> 2] | 0)) {
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($3, $54);
   $$pre$phi66Z2D = $17;
   $$pre$phiZ2D = $3;
   break;
  } else {
   HEAP32[$$pre64 >> 2] = HEAP32[$54 >> 2];
   HEAP32[$$pre64 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
   HEAP32[$$pre64 + 8 >> 2] = HEAP32[$54 + 8 >> 2];
   HEAP32[$$pre64 + 12 >> 2] = HEAP32[$54 + 12 >> 2];
   HEAP32[$17 >> 2] = $$pre64 + 16;
   $$pre$phi66Z2D = $17;
   $$pre$phiZ2D = $3;
   break;
  }
 } while (0);
 HEAP32[$0 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$$pre$phi66Z2D >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$18 >> 2] = 0;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($3);
 STACKTOP = sp;
 return;
}

function __sg_validate_string($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 27002;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 27033;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 27065;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 27168;
   break;
  }
 case 5:
  {
   HEAP32[$1 >> 2] = 27220;
   break;
  }
 case 6:
  {
   HEAP32[$1 >> 2] = 27281;
   break;
  }
 case 7:
  {
   HEAP32[$1 >> 2] = 27311;
   break;
  }
 case 8:
  {
   HEAP32[$1 >> 2] = 27343;
   break;
  }
 case 9:
  {
   HEAP32[$1 >> 2] = 27376;
   break;
  }
 case 10:
  {
   HEAP32[$1 >> 2] = 27421;
   break;
  }
 case 11:
  {
   HEAP32[$1 >> 2] = 27470;
   break;
  }
 case 12:
  {
   HEAP32[$1 >> 2] = 27518;
   break;
  }
 case 13:
  {
   HEAP32[$1 >> 2] = 27559;
   break;
  }
 case 14:
  {
   HEAP32[$1 >> 2] = 27607;
   break;
  }
 case 15:
  {
   HEAP32[$1 >> 2] = 27660;
   break;
  }
 case 16:
  {
   HEAP32[$1 >> 2] = 27704;
   break;
  }
 case 17:
  {
   HEAP32[$1 >> 2] = 27764;
   break;
  }
 case 18:
  {
   HEAP32[$1 >> 2] = 27795;
   break;
  }
 case 19:
  {
   HEAP32[$1 >> 2] = 27823;
   break;
  }
 case 20:
  {
   HEAP32[$1 >> 2] = 27849;
   break;
  }
 case 21:
  {
   HEAP32[$1 >> 2] = 27885;
   break;
  }
 case 22:
  {
   HEAP32[$1 >> 2] = 27929;
   break;
  }
 case 24:
  {
   HEAP32[$1 >> 2] = 27980;
   break;
  }
 case 25:
  {
   HEAP32[$1 >> 2] = 28031;
   break;
  }
 case 26:
  {
   HEAP32[$1 >> 2] = 28085;
   break;
  }
 case 27:
  {
   HEAP32[$1 >> 2] = 28119;
   break;
  }
 case 23:
  {
   HEAP32[$1 >> 2] = 28182;
   break;
  }
 case 28:
  {
   HEAP32[$1 >> 2] = 28225;
   break;
  }
 case 29:
  {
   HEAP32[$1 >> 2] = 28272;
   break;
  }
 case 30:
  {
   HEAP32[$1 >> 2] = 28318;
   break;
  }
 case 31:
  {
   HEAP32[$1 >> 2] = 28368;
   break;
  }
 case 32:
  {
   HEAP32[$1 >> 2] = 28428;
   break;
  }
 case 33:
  {
   HEAP32[$1 >> 2] = 28461;
   break;
  }
 case 34:
  {
   HEAP32[$1 >> 2] = 28504;
   break;
  }
 case 35:
  {
   HEAP32[$1 >> 2] = 28561;
   break;
  }
 case 36:
  {
   HEAP32[$1 >> 2] = 28624;
   break;
  }
 case 37:
  {
   HEAP32[$1 >> 2] = 28676;
   break;
  }
 case 38:
  {
   HEAP32[$1 >> 2] = 28727;
   break;
  }
 case 39:
  {
   HEAP32[$1 >> 2] = 28756;
   break;
  }
 case 40:
  {
   HEAP32[$1 >> 2] = 28804;
   break;
  }
 case 41:
  {
   HEAP32[$1 >> 2] = 28851;
   break;
  }
 case 42:
  {
   HEAP32[$1 >> 2] = 28886;
   break;
  }
 case 43:
  {
   HEAP32[$1 >> 2] = 28945;
   break;
  }
 case 44:
  {
   HEAP32[$1 >> 2] = 29005;
   break;
  }
 case 45:
  {
   HEAP32[$1 >> 2] = 29072;
   break;
  }
 case 46:
  {
   HEAP32[$1 >> 2] = 29136;
   break;
  }
 case 47:
  {
   HEAP32[$1 >> 2] = 29181;
   break;
  }
 case 48:
  {
   HEAP32[$1 >> 2] = 29246;
   break;
  }
 case 49:
  {
   HEAP32[$1 >> 2] = 29303;
   break;
  }
 case 50:
  {
   HEAP32[$1 >> 2] = 29348;
   break;
  }
 case 51:
  {
   HEAP32[$1 >> 2] = 29401;
   break;
  }
 case 52:
  {
   HEAP32[$1 >> 2] = 29435;
   break;
  }
 case 53:
  {
   HEAP32[$1 >> 2] = 29494;
   break;
  }
 case 54:
  {
   HEAP32[$1 >> 2] = 29542;
   break;
  }
 case 55:
  {
   HEAP32[$1 >> 2] = 29593;
   break;
  }
 case 56:
  {
   HEAP32[$1 >> 2] = 29647;
   break;
  }
 case 57:
  {
   HEAP32[$1 >> 2] = 29696;
   break;
  }
 case 58:
  {
   HEAP32[$1 >> 2] = 29748;
   break;
  }
 case 59:
  {
   HEAP32[$1 >> 2] = 29851;
   break;
  }
 case 60:
  {
   HEAP32[$1 >> 2] = 29958;
   break;
  }
 case 61:
  {
   HEAP32[$1 >> 2] = 30054;
   break;
  }
 case 62:
  {
   HEAP32[$1 >> 2] = 30150;
   break;
  }
 case 63:
  {
   HEAP32[$1 >> 2] = 30208;
   break;
  }
 case 64:
  {
   HEAP32[$1 >> 2] = 30277;
   break;
  }
 case 65:
  {
   HEAP32[$1 >> 2] = 30349;
   break;
  }
 case 66:
  {
   HEAP32[$1 >> 2] = 30441;
   break;
  }
 case 67:
  {
   HEAP32[$1 >> 2] = 30490;
   break;
  }
 case 68:
  {
   HEAP32[$1 >> 2] = 30574;
   break;
  }
 case 69:
  {
   HEAP32[$1 >> 2] = 30635;
   break;
  }
 case 70:
  {
   HEAP32[$1 >> 2] = 30726;
   break;
  }
 case 71:
  {
   HEAP32[$1 >> 2] = 30818;
   break;
  }
 case 72:
  {
   HEAP32[$1 >> 2] = 30866;
   break;
  }
 case 73:
  {
   HEAP32[$1 >> 2] = 30948;
   break;
  }
 case 74:
  {
   HEAP32[$1 >> 2] = 31008;
   break;
  }
 case 75:
  {
   HEAP32[$1 >> 2] = 31082;
   break;
  }
 case 76:
  {
   HEAP32[$1 >> 2] = 31137;
   break;
  }
 case 77:
  {
   HEAP32[$1 >> 2] = 31221;
   break;
  }
 case 78:
  {
   HEAP32[$1 >> 2] = 31297;
   break;
  }
 case 79:
  {
   HEAP32[$1 >> 2] = 31354;
   break;
  }
 case 80:
  {
   HEAP32[$1 >> 2] = 31440;
   break;
  }
 case 81:
  {
   HEAP32[$1 >> 2] = 31500;
   break;
  }
 case 82:
  {
   HEAP32[$1 >> 2] = 31577;
   break;
  }
 case 83:
  {
   HEAP32[$1 >> 2] = 31642;
   break;
  }
 case 84:
  {
   HEAP32[$1 >> 2] = 31691;
   break;
  }
 case 85:
  {
   HEAP32[$1 >> 2] = 31748;
   break;
  }
 case 86:
  {
   HEAP32[$1 >> 2] = 31811;
   break;
  }
 case 87:
  {
   HEAP32[$1 >> 2] = 31893;
   break;
  }
 case 88:
  {
   HEAP32[$1 >> 2] = 31945;
   break;
  }
 case 89:
  {
   HEAP32[$1 >> 2] = 32012;
   break;
  }
 case 90:
  {
   HEAP32[$1 >> 2] = 32094;
   break;
  }
 case 91:
  {
   HEAP32[$1 >> 2] = 32141;
   break;
  }
 case 92:
  {
   HEAP32[$1 >> 2] = 32192;
   break;
  }
 case 93:
  {
   HEAP32[$1 >> 2] = 32245;
   break;
  }
 case 94:
  {
   HEAP32[$1 >> 2] = 32306;
   break;
  }
 default:
  HEAP32[$1 >> 2] = 32367;
 } while (0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i$i = 0, $$032$ph = 0, $$032$ph$be = 0, $$034 = 0, $$034$ph = 0, $$1 = 0, $$2 = 0, $$2$pn = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $60 = 0, $66 = 0, label = 0;
 $2 = $1 + 11 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $5 = $1 + 4 | 0;
 L1 : do if (!(($3 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $3 & 255) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0, $1); else {
  $10 = __ZNSt3__211char_traitsIcE6lengthEPKc(48699) | 0;
  $11 = HEAP8[$2 >> 0] | 0;
  if (($10 | 0) == (($11 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $11 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($1, 48699, $10) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 48711);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 48782, __ZNSt3__211char_traitsIcE6lengthEPKc(48782) | 0);
   break;
  }
  $20 = __ZNSt3__211char_traitsIcE6lengthEPKc(48795) | 0;
  $21 = HEAP8[$2 >> 0] | 0;
  if (($20 | 0) == (($21 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $21 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($1, 48795, $20) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 48808);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 48858, __ZNSt3__211char_traitsIcE6lengthEPKc(48858) | 0);
   break;
  }
  $30 = __ZNSt3__211char_traitsIcE6lengthEPKc(48872) | 0;
  $31 = HEAP8[$2 >> 0] | 0;
  if (($30 | 0) == (($31 << 24 >> 24 < 0 ? HEAP32[$5 >> 2] | 0 : $31 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($1, 48872, $30) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 48885);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 48935, __ZNSt3__211char_traitsIcE6lengthEPKc(48935) | 0);
   break;
  }
  $40 = __ZNSt3__211char_traitsIcE6lengthEPKc(48949) | 0;
  $41 = HEAP8[$2 >> 0] | 0;
  $43 = HEAP32[$5 >> 2] | 0;
  $44 = $41 & 255;
  do if (($40 | 0) == (($41 << 24 >> 24 < 0 ? $43 : $44) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($1, 48949, $40) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1, 48963);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 49014, __ZNSt3__211char_traitsIcE6lengthEPKc(49014) | 0);
   break L1;
  } else {
   $$pre = HEAP8[$2 >> 0] | 0;
   $$pre$phiZ2D = $$pre & 255;
   $51 = $$pre;
   $55 = HEAP32[$5 >> 2] | 0;
   break;
  } else {
   $$pre$phiZ2D = $44;
   $51 = $41;
   $55 = $43;
  } while (0);
  $50 = $51 << 24 >> 24 < 0;
  $53 = $50 ? HEAP32[$1 >> 2] | 0 : $1;
  $56 = $53 + ($50 ? $55 : $$pre$phiZ2D) | 0;
  do if ((HEAP8[$56 + -1 >> 0] | 0) == 62) {
   $$032$ph = 1;
   $$034$ph = $56;
   L24 : while (1) {
    $$034 = $$034$ph;
    L26 : while (1) {
     $60 = $$034 + -1 | 0;
     if (($60 | 0) == ($53 | 0)) break L24;
     switch (HEAP8[$$034 + -2 >> 0] | 0) {
     case 60:
      {
       label = 24;
       break L26;
       break;
      }
     case 62:
      {
       label = 25;
       break L26;
       break;
      }
     default:
      $$034 = $60;
     }
    }
    if ((label | 0) == 24) {
     label = 0;
     $66 = $$032$ph + -1 | 0;
     if (!$66) {
      label = 27;
      break;
     } else $$032$ph$be = $66;
    } else if ((label | 0) == 25) {
     label = 0;
     $$032$ph$be = $$032$ph + 1 | 0;
    }
    $$032$ph = $$032$ph$be;
    $$034$ph = $60;
   }
   if ((label | 0) == 27) {
    $$2 = $$034 + -2 | 0;
    break;
   };
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break L1;
    HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
  } else $$2 = $56; while (0);
  $$2$pn = $$2;
  while (1) {
   $$0 = $$2$pn + -1 | 0;
   if (($$0 | 0) == ($53 | 0)) {
    $$1 = $53;
    break;
   }
   if ((HEAP8[$$0 >> 0] | 0) == 58) {
    $$1 = $$2$pn;
    break;
   } else $$2$pn = $$0;
  }
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0, $$1, $$2);
 } while (0);
 return;
}

function _stbtt__sort_edges_quicksort($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $117 = 0, $127 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $61 = 0, $64 = 0, $67 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 while (1) {
  if ((HEAP32[$3 >> 2] | 0) <= 12) break;
  HEAP32[$8 >> 2] = HEAP32[$3 >> 2] >> 1;
  HEAP32[$5 >> 2] = +HEAPF32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 20 | 0) + 4 >> 2] & 1;
  HEAP32[$6 >> 2] = +HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 20 | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$2 >> 2] | 0) + (((HEAP32[$3 >> 2] | 0) - 1 | 0) * 20 | 0) + 4 >> 2] & 1;
  if ((HEAP32[$5 >> 2] | 0) != (HEAP32[$6 >> 2] | 0)) {
   HEAP32[$7 >> 2] = +HEAPF32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$2 >> 2] | 0) + (((HEAP32[$3 >> 2] | 0) - 1 | 0) * 20 | 0) + 4 >> 2] & 1;
   HEAP32[$11 >> 2] = (HEAP32[$7 >> 2] | 0) == (HEAP32[$6 >> 2] | 0) ? 0 : (HEAP32[$3 >> 2] | 0) - 1 | 0;
   $61 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$11 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$4 >> 2] = HEAP32[$61 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$61 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$61 + 8 >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$61 + 12 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$61 + 16 >> 2];
   $64 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$11 >> 2] | 0) * 20 | 0) | 0;
   $67 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$64 >> 2] = HEAP32[$67 >> 2];
   HEAP32[$64 + 4 >> 2] = HEAP32[$67 + 4 >> 2];
   HEAP32[$64 + 8 >> 2] = HEAP32[$67 + 8 >> 2];
   HEAP32[$64 + 12 >> 2] = HEAP32[$67 + 12 >> 2];
   HEAP32[$64 + 16 >> 2] = HEAP32[$67 + 16 >> 2];
   $70 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$70 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$70 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$70 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$70 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
   HEAP32[$70 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
  }
  $71 = HEAP32[$2 >> 2] | 0;
  HEAP32[$4 >> 2] = HEAP32[$71 >> 2];
  HEAP32[$4 + 4 >> 2] = HEAP32[$71 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$71 + 8 >> 2];
  HEAP32[$4 + 12 >> 2] = HEAP32[$71 + 12 >> 2];
  HEAP32[$4 + 16 >> 2] = HEAP32[$71 + 16 >> 2];
  $72 = HEAP32[$2 >> 2] | 0;
  $75 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 20 | 0) | 0;
  HEAP32[$72 >> 2] = HEAP32[$75 >> 2];
  HEAP32[$72 + 4 >> 2] = HEAP32[$75 + 4 >> 2];
  HEAP32[$72 + 8 >> 2] = HEAP32[$75 + 8 >> 2];
  HEAP32[$72 + 12 >> 2] = HEAP32[$75 + 12 >> 2];
  HEAP32[$72 + 16 >> 2] = HEAP32[$75 + 16 >> 2];
  $78 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 20 | 0) | 0;
  HEAP32[$78 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$78 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$78 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$78 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[$78 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[$9 >> 2] = 1;
  HEAP32[$10 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
  while (1) {
   while (1) {
    if (!(+HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$9 >> 2] | 0) * 20 | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$2 >> 2] | 0) + 4 >> 2])) break;
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   }
   while (1) {
    if (!(+HEAPF32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) * 20 | 0) + 4 >> 2])) break;
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
   }
   if ((HEAP32[$9 >> 2] | 0) >= (HEAP32[$10 >> 2] | 0)) break;
   $108 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$9 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$4 >> 2] = HEAP32[$108 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$108 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$108 + 8 >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$108 + 12 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$108 + 16 >> 2];
   $111 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$9 >> 2] | 0) * 20 | 0) | 0;
   $114 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$111 >> 2] = HEAP32[$114 >> 2];
   HEAP32[$111 + 4 >> 2] = HEAP32[$114 + 4 >> 2];
   HEAP32[$111 + 8 >> 2] = HEAP32[$114 + 8 >> 2];
   HEAP32[$111 + 12 >> 2] = HEAP32[$114 + 12 >> 2];
   HEAP32[$111 + 16 >> 2] = HEAP32[$114 + 16 >> 2];
   $117 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$117 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$117 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$117 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$117 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
   HEAP32[$117 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
  }
  $127 = HEAP32[$2 >> 2] | 0;
  if ((HEAP32[$10 >> 2] | 0) < ((HEAP32[$3 >> 2] | 0) - (HEAP32[$9 >> 2] | 0) | 0)) {
   _stbtt__sort_edges_quicksort($127, HEAP32[$10 >> 2] | 0);
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$9 >> 2] | 0) * 20 | 0);
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - (HEAP32[$9 >> 2] | 0);
  } else {
   _stbtt__sort_edges_quicksort($127 + ((HEAP32[$9 >> 2] | 0) * 20 | 0) | 0, (HEAP32[$3 >> 2] | 0) - (HEAP32[$9 >> 2] | 0) | 0);
   HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i79 = 0, $$0$i$i$add$i83 = 0, $$0$i$i$add$i88 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i78 = 0, $$0$i$i$idx$i82 = 0, $$0$i$i$idx$i87 = 0, $$4 = 0, $13 = 0, $18 = 0, $21 = 0, $24 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $41 = 0, $48 = 0, $49 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $70 = 0, $77 = 0, $78 = 0, $8 = 0, $85 = 0, $86 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$4 = $0; else if ((HEAP8[$0 >> 0] | 0) == 90) {
  $7 = $0 + 1 | 0;
  $8 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($7, $1, $2) | 0;
  if (($8 | 0) == ($7 | 0) | ($8 | 0) == ($1 | 0)) $$4 = $0; else if ((HEAP8[$8 >> 0] | 0) == 69) {
   $13 = $8 + 1 | 0;
   if (($13 | 0) == ($1 | 0)) $$4 = $0; else switch (HEAP8[$13 >> 0] | 0) {
   case 115:
    {
     $18 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($8 + 2 | 0, $1) | 0;
     $21 = HEAP32[$2 + 4 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) {
      $$4 = $18;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($21 + -24 | 0, 49238) | 0;
     $$4 = $18;
     break L1;
     break;
    }
   case 100:
    {
     $24 = $8 + 2 | 0;
     if (($24 | 0) == ($1 | 0)) {
      $$4 = $0;
      break L1;
     }
     $26 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($24, $1) | 0;
     if (($26 | 0) == ($1 | 0)) {
      $$4 = $0;
      break L1;
     }
     if ((HEAP8[$26 >> 0] | 0) != 95) {
      $$4 = $0;
      break L1;
     }
     $30 = $26 + 1 | 0;
     $31 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($30, $1, $2) | 0;
     $33 = $2 + 4 | 0;
     if (($31 | 0) == ($30 | 0)) {
      $56 = HEAP32[$33 >> 2] | 0;
      $$0$i$i$idx$i78 = 0;
      while (1) {
       if (($$0$i$i$idx$i78 | 0) == -1) break;
       $$0$i$i$add$i79 = $$0$i$i$idx$i78 + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($56 + ($$0$i$i$add$i79 * 24 | 0) | 0);
       $$0$i$i$idx$i78 = $$0$i$i$add$i79;
      }
      HEAP32[$33 >> 2] = $56 + -24;
      $$4 = $0;
      break L1;
     }
     $34 = HEAP32[$33 >> 2] | 0;
     if ((($34 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$4 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $34 + -24 | 0);
     $41 = HEAP32[$33 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$33 >> 2] = $41 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($41 + -48 | 0, 47951) | 0;
     $48 = HEAP8[$3 + 11 >> 0] | 0;
     $49 = $48 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$33 >> 2] | 0) + -24 | 0, $49 ? HEAP32[$3 >> 2] | 0 : $3, $49 ? HEAP32[$3 + 4 >> 2] | 0 : $48 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$4 = $31;
     break L1;
     break;
    }
   default:
    {
     $59 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
     if (($59 | 0) == ($13 | 0)) {
      $85 = $2 + 4 | 0;
      $86 = HEAP32[$85 >> 2] | 0;
      $$0$i$i$idx$i87 = 0;
      while (1) {
       if (($$0$i$i$idx$i87 | 0) == -1) break;
       $$0$i$i$add$i88 = $$0$i$i$idx$i87 + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($86 + ($$0$i$i$add$i88 * 24 | 0) | 0);
       $$0$i$i$idx$i87 = $$0$i$i$add$i88;
      }
      HEAP32[$85 >> 2] = $86 + -24;
      $$4 = $0;
      break L1;
     }
     $61 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($59, $1) | 0;
     $62 = $2 + 4 | 0;
     $63 = HEAP32[$62 >> 2] | 0;
     if ((($63 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$4 = $61;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $63 + -24 | 0);
     $70 = HEAP32[$62 >> 2] | 0;
     $$0$i$i$idx$i82 = 0;
     while (1) {
      if (($$0$i$i$idx$i82 | 0) == -1) break;
      $$0$i$i$add$i83 = $$0$i$i$idx$i82 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($70 + ($$0$i$i$add$i83 * 24 | 0) | 0);
      $$0$i$i$idx$i82 = $$0$i$i$add$i83;
     }
     HEAP32[$62 >> 2] = $70 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($70 + -48 | 0, 47951) | 0;
     $77 = HEAP8[$3 + 11 >> 0] | 0;
     $78 = $77 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$62 >> 2] | 0) + -24 | 0, $78 ? HEAP32[$3 >> 2] | 0 : $3, $78 ? HEAP32[$3 + 4 >> 2] | 0 : $77 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$4 = $61;
     break L1;
    }
   }
  } else $$4 = $0;
 } else $$4 = $0; while (0);
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i91 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i90 = 0, $$3 = 0, $14 = 0, $16 = 0, $18 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $48 = 0, $55 = 0, $60 = 0, $61 = 0, $68 = 0, $73 = 0, $75 = 0, $76 = 0, $83 = 0, $88 = 0, $89 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 L1 : do if (($1 - $0 | 0) > 1) {
  $spec$select = (HEAP8[$0 >> 0] | 0) == 76 ? $0 + 1 | 0 : $0;
  switch (HEAP8[$spec$select >> 0] | 0) {
  case 78:
   {
    $14 = __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($spec$select, $1, $2) | 0;
    $$3 = ($14 | 0) == ($spec$select | 0) ? $0 : $14;
    break L1;
    break;
   }
  case 90:
   {
    $16 = __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($spec$select, $1, $2) | 0;
    $$3 = ($16 | 0) == ($spec$select | 0) ? $0 : $16;
    break L1;
    break;
   }
  default:
   {
    $18 = __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($spec$select, $1, $2) | 0;
    if (($18 | 0) == ($spec$select | 0)) {
     $68 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($spec$select, $1, $2) | 0;
     if (($68 | 0) == ($spec$select | 0) | ($68 | 0) == ($1 | 0)) {
      $$3 = $0;
      break L1;
     }
     if ((HEAP8[$68 >> 0] | 0) != 73) {
      $$3 = $0;
      break L1;
     }
     $73 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($68, $1, $2) | 0;
     if (($73 | 0) == ($68 | 0)) {
      $$3 = $0;
      break L1;
     }
     $75 = $2 + 4 | 0;
     $76 = HEAP32[$75 >> 2] | 0;
     if ((($76 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$3 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $76 + -24 | 0);
     $83 = HEAP32[$75 >> 2] | 0;
     $$0$i$i$idx$i90 = 0;
     while (1) {
      if (($$0$i$i$idx$i90 | 0) == -1) break;
      $$0$i$i$add$i91 = $$0$i$i$idx$i90 + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($83 + ($$0$i$i$add$i91 * 24 | 0) | 0);
      $$0$i$i$idx$i90 = $$0$i$i$add$i91;
     }
     HEAP32[$75 >> 2] = $83 + -24;
     $88 = HEAP8[$3 + 11 >> 0] | 0;
     $89 = $88 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($83 + -48 | 0, $89 ? HEAP32[$3 >> 2] | 0 : $3, $89 ? HEAP32[$3 + 4 >> 2] | 0 : $88 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $73;
     break L1;
    }
    if (($18 | 0) == ($1 | 0)) {
     $$3 = $1;
     break L1;
    }
    if ((HEAP8[$18 >> 0] | 0) != 73) {
     $$3 = $18;
     break L1;
    }
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($25 | 0)) {
     $$3 = $0;
     break L1;
    }
    HEAP32[$4 >> 2] = HEAP32[$2 + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($3, $25 + -24 | 0, $4);
    $28 = $2 + 20 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$2 + 24 >> 2] | 0) >>> 0) {
     HEAP32[$29 >> 2] = 0;
     $34 = $29 + 4 | 0;
     HEAP32[$34 >> 2] = 0;
     $35 = $29 + 8 | 0;
     HEAP32[$35 >> 2] = 0;
     HEAP32[$29 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$29 >> 2] = HEAP32[$3 >> 2];
     $39 = $3 + 4 | 0;
     HEAP32[$34 >> 2] = HEAP32[$39 >> 2];
     $41 = $3 + 8 | 0;
     HEAP32[$35 >> 2] = HEAP32[$41 >> 2];
     HEAP32[$41 >> 2] = 0;
     HEAP32[$39 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($2 + 16 | 0, $3);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($3);
    $46 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($18, $1, $2) | 0;
    if (($46 | 0) == ($18 | 0)) {
     $$3 = $0;
     break L1;
    }
    $48 = HEAP32[$24 >> 2] | 0;
    if ((($48 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$3 = $0;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $48 + -24 | 0);
    $55 = HEAP32[$24 >> 2] | 0;
    $$0$i$i$idx$i = 0;
    while (1) {
     if (($$0$i$i$idx$i | 0) == -1) break;
     $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($55 + ($$0$i$i$add$i * 24 | 0) | 0);
     $$0$i$i$idx$i = $$0$i$i$add$i;
    }
    HEAP32[$24 >> 2] = $55 + -24;
    $60 = HEAP8[$3 + 11 >> 0] | 0;
    $61 = $60 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($55 + -48 | 0, $61 ? HEAP32[$3 >> 2] | 0 : $3, $61 ? HEAP32[$3 + 4 >> 2] | 0 : $60 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = $46;
    break L1;
   }
  }
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __Z4initv() {
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0.0, $2 = 0, $20 = 0, $25 = 0, $3 = 0, $33 = 0, $4 = 0, $44 = 0, $48 = 0, $5 = 0, $52 = 0, $6 = 0, $69 = 0, $7 = 0, $8 = 0, $80 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976 | 0;
 $0 = sp + 824 | 0;
 $1 = sp + 796 | 0;
 $2 = sp + 776 | 0;
 $3 = sp + 720 | 0;
 $4 = sp + 664 | 0;
 $5 = sp + 104 | 0;
 $6 = sp + 92 | 0;
 $7 = sp + 80 | 0;
 $8 = sp + 40 | 0;
 $9 = sp;
 $10 = $0 + 40 | 0;
 dest = $0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _sapp_sgcontext($10);
 HEAP32[$0 + 140 >> 2] = 0;
 _sg_setup($0);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = 0;
 _sgl_setup($1);
 _stm_setup();
 $12 = _stm_now() | 0;
 $13 = getTempRet0() | 0;
 $14 = 54056;
 HEAP32[$14 >> 2] = $12;
 HEAP32[$14 + 4 >> 2] = $13;
 HEAP32[$2 >> 2] = HEAP32[2923];
 HEAP32[$2 + 4 >> 2] = HEAP32[2924];
 HEAP32[$2 + 8 >> 2] = HEAP32[2925];
 HEAP32[$2 + 12 >> 2] = HEAP32[2926];
 HEAP32[$2 + 16 >> 2] = HEAP32[2927];
 _sfetch_setup($2);
 $18 = +_sapp_dpi_scale();
 HEAPF32[276929] = $18;
 $20 = __ZN2Dr13RoundPowerOf2IfEEiT_($18 * 512.0) | 0;
 HEAP32[276928] = _sfons_create($20, $20, 1) | 0;
 HEAP32[276930] = -1;
 HEAP32[13517] = 1;
 HEAPF32[13518] = .125;
 HEAPF32[13519] = .25;
 HEAPF32[13520] = .3499999940395355;
 HEAPF32[13521] = 1.0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 1648;
 HEAP32[$3 + 20 >> 2] = 176;
 HEAP32[$3 + 24 >> 2] = 41365;
 $25 = $3 + 28 | 0;
 HEAP32[$25 >> 2] = 0;
 HEAP32[$25 + 4 >> 2] = 0;
 HEAP32[$25 + 8 >> 2] = 0;
 HEAP32[$25 + 12 >> 2] = 0;
 HEAP32[$25 + 16 >> 2] = 0;
 HEAP32[$25 + 20 >> 2] = 0;
 HEAP32[$25 + 24 >> 2] = 0;
 HEAP32[13544] = _sg_make_buffer($3) | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 2;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 12448;
 HEAP32[$4 + 20 >> 2] = 12;
 HEAP32[$4 + 24 >> 2] = 41379;
 $33 = $4 + 28 | 0;
 HEAP32[$33 >> 2] = 0;
 HEAP32[$33 + 4 >> 2] = 0;
 HEAP32[$33 + 8 >> 2] = 0;
 HEAP32[$33 + 12 >> 2] = 0;
 HEAP32[$33 + 16 >> 2] = 0;
 HEAP32[$33 + 20 >> 2] = 0;
 HEAP32[$33 + 24 >> 2] = 0;
 HEAP32[13560] = _sg_make_buffer($4) | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = _sg_make_shader(__ZL21extrude3D_shader_desc10sg_backend(_sg_query_backend() | 0) | 0) | 0;
 _memset($5 + 8 | 0, 0, 288) | 0;
 HEAP32[$5 + 112 >> 2] = 3;
 HEAP32[$5 + 124 >> 2] = 3;
 HEAP32[$5 + 136 >> 2] = 2;
 HEAP32[$5 + 148 >> 2] = 3;
 $44 = $5 + 296 | 0;
 HEAP32[$44 >> 2] = 0;
 HEAP32[$44 + 4 >> 2] = 0;
 HEAP32[$44 + 8 >> 2] = 0;
 HEAP32[$44 + 12 >> 2] = 0;
 HEAP32[$44 + 16 >> 2] = 0;
 HEAP32[$44 + 20 >> 2] = 0;
 HEAP32[$5 + 300 >> 2] = 4;
 HEAP8[$5 + 304 >> 0] = 1;
 $48 = $5 + 372 | 0;
 _memset($5 + 320 | 0, 0, 188) | 0;
 HEAP32[$48 >> 2] = HEAP32[2909];
 HEAP32[$48 + 4 >> 2] = HEAP32[2910];
 HEAP32[$48 + 8 >> 2] = HEAP32[2911];
 HEAP32[$48 + 12 >> 2] = HEAP32[2912];
 HEAP32[$48 + 16 >> 2] = HEAP32[2913];
 HEAP32[$48 + 20 >> 2] = HEAP32[2914];
 HEAP32[$48 + 24 >> 2] = HEAP32[2915];
 HEAP32[$5 + 508 >> 2] = 0;
 HEAP32[$5 + 512 >> 2] = 2;
 HEAP32[$5 + 516 >> 2] = 2;
 $52 = $5 + 520 | 0;
 HEAP32[$52 >> 2] = 0;
 HEAP32[$52 + 4 >> 2] = 0;
 HEAP32[$52 + 8 >> 2] = 0;
 HEAP32[$52 + 12 >> 2] = 0;
 HEAP32[$52 + 16 >> 2] = 0;
 HEAP32[$52 + 20 >> 2] = 0;
 HEAP8[$52 + 24 >> 0] = 0;
 HEAP32[$5 + 548 >> 2] = 41392;
 HEAP32[$5 + 552 >> 2] = 0;
 HEAP32[13542] = _sg_make_pipeline($5) | 0;
 HEAP32[13574] = _sg_alloc_image() | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($6, 2185869, __ZNSt3__211char_traitsIcE6lengthEPKc(2185869) | 0);
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($7, 2185869, __ZNSt3__211char_traitsIcE6lengthEPKc(2185869) | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($6, 41409) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($7, 41427) | 0;
 HEAP32[$8 >> 2] = 0;
 HEAP32[$8 + 4 >> 2] = 0;
 HEAP32[$8 + 8 >> 2] = (HEAP8[$6 + 11 >> 0] | 0) < 0 ? HEAP32[$6 >> 2] | 0 : $6;
 HEAP32[$8 + 12 >> 2] = 25;
 HEAP32[$8 + 16 >> 2] = 54348;
 HEAP32[$8 + 20 >> 2] = 1048576;
 $69 = $8 + 24 | 0;
 HEAP32[$69 >> 2] = 0;
 HEAP32[$69 + 4 >> 2] = 0;
 HEAP32[$69 + 8 >> 2] = 0;
 HEAP32[$69 + 12 >> 2] = 0;
 _sfetch_send($8) | 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = (HEAP8[$7 + 11 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7;
 HEAP32[$9 + 12 >> 2] = 26;
 HEAP32[$9 + 16 >> 2] = 1107724;
 HEAP32[$9 + 20 >> 2] = 1048576;
 $80 = $9 + 24 | 0;
 HEAP32[$80 >> 2] = 0;
 HEAP32[$80 + 4 >> 2] = 0;
 HEAP32[$80 + 8 >> 2] = 0;
 HEAP32[$80 + 12 >> 2] = 0;
 _sfetch_send($9) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;
 return;
}
function __ZL12image_loadedPK17sfetch_response_t($0) {
 $0 = $0 | 0;
 var $$sroa$7104 = 0, $$sroa$7123 = 0, $$sroa$782 = 0, $$sroa$825 = 0, $$sroa$844 = 0, $$sroa$863 = 0, $$sroa$9 = 0, $$sroa$9145 = 0, $16 = 0, $20 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 $$sroa$9145 = sp + 560 | 0;
 $$sroa$7123 = sp + 480 | 0;
 $$sroa$7104 = sp + 400 | 0;
 $$sroa$782 = sp + 320 | 0;
 $$sroa$863 = sp + 240 | 0;
 $$sroa$844 = sp + 160 | 0;
 $$sroa$825 = sp + 80 | 0;
 $$sroa$9 = sp;
 if (!(HEAP8[$0 + 5 >> 0] | 0)) {
  if (HEAP8[$0 + 7 >> 0] | 0) if (HEAP8[$0 + 8 >> 0] | 0) {
   dest = $$sroa$9145;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $$sroa$7123;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $$sroa$7104;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $$sroa$782;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $$sroa$863;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $$sroa$844;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $$sroa$825;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $$sroa$9;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   switch (HEAP32[$0 + 12 >> 2] | 0) {
   case 0:
    {
     HEAP32[13516] = 0;
     HEAP32[13517] = 1;
     HEAPF32[13518] = 1.0;
     HEAPF32[13519] = 1.0;
     HEAPF32[13520] = 1.0;
     HEAPF32[13521] = 1.0;
     dest = 54088;
     src = $$sroa$9145;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 1:
    {
     HEAP32[13516] = 0;
     HEAP32[13517] = 1;
     HEAPF32[13518] = 1.0;
     $16 = 54076;
     HEAP32[$16 >> 2] = 0;
     HEAP32[$16 + 4 >> 2] = 0;
     HEAPF32[13521] = 1.0;
     dest = 54088;
     src = $$sroa$7123;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 2:
    {
     HEAP32[13516] = 0;
     HEAP32[13517] = 1;
     HEAPF32[13518] = 0.0;
     HEAPF32[13519] = 1.0;
     HEAPF32[13520] = 0.0;
     HEAPF32[13521] = 1.0;
     dest = 54088;
     src = $$sroa$7104;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 3:
    {
     HEAP32[13516] = 0;
     HEAP32[13517] = 1;
     $20 = 54072;
     HEAP32[$20 >> 2] = 0;
     HEAP32[$20 + 4 >> 2] = 0;
     HEAPF32[13520] = 1.0;
     HEAPF32[13521] = 1.0;
     dest = 54088;
     src = $$sroa$782;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 4:
    {
     HEAP32[13516] = 0;
     HEAP32[13517] = 1;
     HEAPF32[13518] = 1.0;
     HEAPF32[13519] = 1.0;
     HEAPF32[13520] = 0.0;
     HEAPF32[13521] = 1.0;
     dest = 54088;
     src = $$sroa$863;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 6:
    {
     HEAP32[13516] = 0;
     HEAP32[13517] = 1;
     HEAPF32[13518] = 0.0;
     HEAPF32[13519] = 1.0;
     HEAPF32[13520] = 1.0;
     HEAPF32[13521] = 1.0;
     dest = 54088;
     src = $$sroa$844;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 5:
    {
     HEAP32[13516] = 0;
     HEAP32[13517] = 1;
     HEAPF32[13518] = 1.0;
     HEAPF32[13519] = 0.0;
     HEAPF32[13520] = 1.0;
     HEAPF32[13521] = 1.0;
     dest = 54088;
     src = $$sroa$825;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   default:
    {
     HEAP32[13516] = 0;
     HEAP32[13517] = 1;
     HEAPF32[13518] = .5;
     HEAPF32[13519] = .5;
     HEAPF32[13520] = .5;
     HEAPF32[13521] = 1.0;
     dest = 54088;
     src = $$sroa$9;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
    }
   }
  }
 } else __ZL10load_imagePhi(HEAP32[$0 + 40 >> 2] | 0, HEAP32[$0 + 36 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbi__process_gif_raster($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $109 = 0, $11 = 0, $12 = 0, $122 = 0, $129 = 0, $13 = 0, $130 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $166 = 0, $17 = 0, $173 = 0, $193 = 0, $197 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 60 | 0;
 $6 = sp + 44 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 20 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 12 | 0;
 $15 = sp + 8 | 0;
 $16 = sp + 4 | 0;
 $17 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP8[$5 >> 0] = _stbi__get8(HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAPU8[$5 >> 0] | 0 | 0) > 12) {
  HEAP32[$2 >> 2] = 0;
  $197 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 }
 HEAP32[$15 >> 2] = 1 << (HEAPU8[$5 >> 0] | 0);
 HEAP32[$8 >> 2] = 1;
 HEAP32[$9 >> 2] = (HEAPU8[$5 >> 0] | 0) + 1;
 HEAP32[$10 >> 2] = (1 << HEAP32[$9 >> 2]) - 1;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= (HEAP32[$15 >> 2] | 0)) break;
  HEAP16[(HEAP32[$4 >> 2] | 0) + 2088 + (HEAP32[$7 >> 2] << 2) >> 1] = -1;
  HEAP8[(HEAP32[$4 >> 2] | 0) + 2088 + (HEAP32[$7 >> 2] << 2) + 2 >> 0] = HEAP32[$7 >> 2];
  HEAP8[(HEAP32[$4 >> 2] | 0) + 2088 + (HEAP32[$7 >> 2] << 2) + 3 >> 0] = HEAP32[$7 >> 2];
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 HEAP32[$11 >> 2] = (HEAP32[$15 >> 2] | 0) + 2;
 HEAP32[$12 >> 2] = -1;
 HEAP32[$6 >> 2] = 0;
 L9 : while (1) do if ((HEAP32[$14 >> 2] | 0) < (HEAP32[$9 >> 2] | 0)) {
  if (!(HEAP32[$6 >> 2] | 0)) {
   HEAP32[$6 >> 2] = (_stbi__get8(HEAP32[$3 >> 2] | 0) | 0) & 255;
   if (!(HEAP32[$6 >> 2] | 0)) {
    label = 10;
    break L9;
   }
  }
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1;
  $74 = (_stbi__get8(HEAP32[$3 >> 2] | 0) | 0) & 255;
  HEAP32[$13 >> 2] = HEAP32[$13 >> 2] | $74 << HEAP32[$14 >> 2];
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 8;
 } else {
  HEAP32[$17 >> 2] = HEAP32[$13 >> 2] & HEAP32[$10 >> 2];
  HEAP32[$13 >> 2] = HEAP32[$13 >> 2] >> HEAP32[$9 >> 2];
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) - (HEAP32[$9 >> 2] | 0);
  if ((HEAP32[$17 >> 2] | 0) == (HEAP32[$15 >> 2] | 0)) {
   HEAP32[$9 >> 2] = (HEAPU8[$5 >> 0] | 0) + 1;
   HEAP32[$10 >> 2] = (1 << HEAP32[$9 >> 2]) - 1;
   HEAP32[$11 >> 2] = (HEAP32[$15 >> 2] | 0) + 2;
   HEAP32[$12 >> 2] = -1;
   HEAP32[$8 >> 2] = 0;
   break;
  }
  if ((HEAP32[$17 >> 2] | 0) == ((HEAP32[$15 >> 2] | 0) + 1 | 0)) {
   label = 15;
   break L9;
  }
  if ((HEAP32[$17 >> 2] | 0) > (HEAP32[$11 >> 2] | 0)) {
   label = 34;
   break L9;
  }
  if (HEAP32[$8 >> 2] | 0) {
   label = 21;
   break L9;
  }
  if ((HEAP32[$12 >> 2] | 0) >= 0) {
   $129 = (HEAP32[$4 >> 2] | 0) + 2088 | 0;
   $130 = HEAP32[$11 >> 2] | 0;
   HEAP32[$11 >> 2] = $130 + 1;
   HEAP32[$16 >> 2] = $129 + ($130 << 2);
   if ((HEAP32[$11 >> 2] | 0) > 8192) {
    label = 24;
    break L9;
   }
   HEAP16[HEAP32[$16 >> 2] >> 1] = HEAP32[$12 >> 2];
   HEAP8[(HEAP32[$16 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$4 >> 2] | 0) + 2088 + (HEAP32[$12 >> 2] << 2) + 2 >> 0] | 0;
   if ((HEAP32[$17 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) $166 = HEAPU8[(HEAP32[$16 >> 2] | 0) + 2 >> 0] | 0; else $166 = HEAPU8[(HEAP32[$4 >> 2] | 0) + 2088 + (HEAP32[$17 >> 2] << 2) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$16 >> 2] | 0) + 3 >> 0] = $166;
  } else if ((HEAP32[$17 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) {
   label = 30;
   break L9;
  }
  _stbi__out_gif_code(HEAP32[$4 >> 2] | 0, HEAP32[$17 >> 2] & 65535);
  if ((HEAP32[$11 >> 2] | 0) <= 4095 ? (HEAP32[$11 >> 2] & HEAP32[$10 >> 2] | 0) == 0 : 0) {
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   HEAP32[$10 >> 2] = (1 << HEAP32[$9 >> 2]) - 1;
  }
  HEAP32[$12 >> 2] = HEAP32[$17 >> 2];
 } while (0);
 if ((label | 0) == 10) {
  HEAP32[$2 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2];
  $197 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 } else if ((label | 0) == 15) {
  _stbi__skip(HEAP32[$3 >> 2] | 0, HEAP32[$6 >> 2] | 0);
  while (1) {
   $109 = (_stbi__get8(HEAP32[$3 >> 2] | 0) | 0) & 255;
   HEAP32[$6 >> 2] = $109;
   if (($109 | 0) <= 0) break;
   _stbi__skip(HEAP32[$3 >> 2] | 0, HEAP32[$6 >> 2] | 0);
  }
  HEAP32[$2 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2];
  $197 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 } else if ((label | 0) == 21) {
  $122 = (_stbi__err(44012) | 0) != 0;
  HEAP32[$2 >> 2] = $122 ? 0 : 0;
  $197 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 } else if ((label | 0) == 24) {
  $136 = (_stbi__err(44026) | 0) != 0;
  HEAP32[$2 >> 2] = $136 ? 0 : 0;
  $197 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 } else if ((label | 0) == 30) {
  $173 = (_stbi__err(44041) | 0) != 0;
  HEAP32[$2 >> 2] = $173 ? 0 : 0;
  $197 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 } else if ((label | 0) == 34) {
  $193 = (_stbi__err(44041) | 0) != 0;
  HEAP32[$2 >> 2] = $193 ? 0 : 0;
  $197 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $197 | 0;
 }
 return 0;
}

function _stbtt__rasterize_sorted_edges($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $160 = 0, $17 = 0, $172 = 0, $18 = 0, $187 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 $7 = sp + 612 | 0;
 $8 = sp + 608 | 0;
 $9 = sp + 604 | 0;
 $11 = sp + 596 | 0;
 $12 = sp + 592 | 0;
 $13 = sp + 588 | 0;
 $14 = sp + 576 | 0;
 $15 = sp + 572 | 0;
 $16 = sp + 568 | 0;
 $17 = sp + 564 | 0;
 $18 = sp + 560 | 0;
 $19 = sp;
 $20 = sp + 556 | 0;
 $21 = sp + 552 | 0;
 $22 = sp + 548 | 0;
 $23 = sp + 544 | 0;
 $24 = sp + 540 | 0;
 $25 = sp + 536 | 0;
 $26 = sp + 532 | 0;
 $27 = sp + 528 | 0;
 $28 = sp + 524 | 0;
 $29 = sp + 520 | 0;
 $30 = sp + 516 | 0;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[sp + 600 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[$12 >> 2] = $5;
 HEAP32[$13 >> 2] = $6;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP32[$14 + 8 >> 2] = 0;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$17 >> 2] = 0;
 if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) > 64) HEAP32[$20 >> 2] = _fons__tmpalloc((HEAP32[HEAP32[$7 >> 2] >> 2] << 1) + 1 << 2, HEAP32[$13 >> 2] | 0) | 0; else HEAP32[$20 >> 2] = $19;
 HEAP32[$21 >> 2] = (HEAP32[$20 >> 2] | 0) + (HEAP32[HEAP32[$7 >> 2] >> 2] << 2);
 HEAP32[$16 >> 2] = HEAP32[$12 >> 2];
 HEAPF32[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$9 >> 2] | 0) * 20 | 0) + 4 >> 2] = +((HEAP32[$12 >> 2] | 0) + (HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0) + 1.0;
 L5 : while (1) {
  if ((HEAP32[$17 >> 2] | 0) >= (HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0)) {
   label = 31;
   break;
  }
  HEAPF32[$22 >> 2] = +(HEAP32[$16 >> 2] | 0) + 0.0;
  HEAPF32[$23 >> 2] = +(HEAP32[$16 >> 2] | 0) + 1.0;
  HEAP32[$24 >> 2] = $15;
  _memset(HEAP32[$20 >> 2] | 0, 0, HEAP32[HEAP32[$7 >> 2] >> 2] << 2 | 0) | 0;
  _memset(HEAP32[$21 >> 2] | 0, 0, (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 1 << 2 | 0) | 0;
  while (1) {
   if (!(HEAP32[HEAP32[$24 >> 2] >> 2] | 0)) break;
   HEAP32[$25 >> 2] = HEAP32[HEAP32[$24 >> 2] >> 2];
   if (+HEAPF32[(HEAP32[$25 >> 2] | 0) + 24 >> 2] <= +HEAPF32[$22 >> 2]) {
    HEAP32[HEAP32[$24 >> 2] >> 2] = HEAP32[HEAP32[$25 >> 2] >> 2];
    if (!(+HEAPF32[(HEAP32[$25 >> 2] | 0) + 16 >> 2] != 0.0)) {
     label = 10;
     break L5;
    }
    HEAPF32[(HEAP32[$25 >> 2] | 0) + 16 >> 2] = 0.0;
    _stbtt__hheap_free($14, HEAP32[$25 >> 2] | 0);
   } else HEAP32[$24 >> 2] = HEAP32[HEAP32[$24 >> 2] >> 2];
  }
  while (1) {
   if (!(+HEAPF32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] <= +HEAPF32[$23 >> 2])) break;
   if (+HEAPF32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] != +HEAPF32[(HEAP32[$8 >> 2] | 0) + 12 >> 2]) {
    HEAP32[$26 >> 2] = _stbtt__new_active($14, HEAP32[$8 >> 2] | 0, HEAP32[$11 >> 2] | 0, +HEAPF32[$22 >> 2], HEAP32[$13 >> 2] | 0) | 0;
    if (HEAP32[$26 >> 2] | 0) {
     if (!(+HEAPF32[(HEAP32[$26 >> 2] | 0) + 24 >> 2] >= +HEAPF32[$22 >> 2])) {
      label = 19;
      break L5;
     }
     HEAP32[HEAP32[$26 >> 2] >> 2] = HEAP32[$15 >> 2];
     HEAP32[$15 >> 2] = HEAP32[$26 >> 2];
    }
   }
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 20;
  }
  if (HEAP32[$15 >> 2] | 0) _stbtt__fill_active_edges_new(HEAP32[$20 >> 2] | 0, (HEAP32[$21 >> 2] | 0) + 4 | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[$15 >> 2] | 0, +HEAPF32[$22 >> 2]);
  HEAPF32[$27 >> 2] = 0.0;
  HEAP32[$18 >> 2] = 0;
  while (1) {
   if ((HEAP32[$18 >> 2] | 0) >= (HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) break;
   HEAPF32[$27 >> 2] = +HEAPF32[$27 >> 2] + +HEAPF32[(HEAP32[$21 >> 2] | 0) + (HEAP32[$18 >> 2] << 2) >> 2];
   HEAPF32[$28 >> 2] = +HEAPF32[(HEAP32[$20 >> 2] | 0) + (HEAP32[$18 >> 2] << 2) >> 2] + +HEAPF32[$27 >> 2];
   HEAPF32[$28 >> 2] = +Math_abs(+(+HEAPF32[$28 >> 2])) * 255.0 + .5;
   $160 = ~~+HEAPF32[$28 >> 2];
   HEAP32[$29 >> 2] = $160;
   HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) > 255 ? 255 : $160;
   $172 = Math_imul(HEAP32[$17 >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) | 0;
   HEAP8[(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0) + ($172 + (HEAP32[$18 >> 2] | 0)) >> 0] = HEAP32[$29 >> 2];
   HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
  }
  HEAP32[$24 >> 2] = $15;
  while (1) {
   if (!(HEAP32[HEAP32[$24 >> 2] >> 2] | 0)) break;
   HEAP32[$30 >> 2] = HEAP32[HEAP32[$24 >> 2] >> 2];
   $187 = (HEAP32[$30 >> 2] | 0) + 4 | 0;
   HEAPF32[$187 >> 2] = +HEAPF32[$187 >> 2] + +HEAPF32[(HEAP32[$30 >> 2] | 0) + 8 >> 2];
   HEAP32[$24 >> 2] = HEAP32[HEAP32[$24 >> 2] >> 2];
  }
  HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
 }
 if ((label | 0) == 10) ___assert_fail(40661, 40159, 2851, 40674); else if ((label | 0) == 19) ___assert_fail(40704, 40159, 2864, 40674); else if ((label | 0) == 31) {
  _stbtt__hheap_cleanup($14, HEAP32[$13 >> 2] | 0);
  if ((HEAP32[$20 >> 2] | 0) == ($19 | 0)) {
   STACKTOP = sp;
   return;
  }
  _fons__tmpfree(HEAP32[$20 >> 2] | 0, HEAP32[$13 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __ZN13TPPLPartition14Triangulate_ECEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0107$off0126 = 0, $$0108125 = 0, $$0109139 = 0, $$0111129 = 0, $$0114 = 0, $$1$off0 = 0, $$1110135 = 0, $$1112124 = 0, $$1115 = 0, $$2113 = 0, $$2130 = 0, $$3123 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $41 = 0, $48 = 0, $52 = 0, $56 = 0, $76 = 0, $78 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if (__ZNK8TPPLPoly5ValidEv($1) | 0) {
  __ZN8TPPLPolyC2Ev($3);
  L3 : do if ((__ZNK8TPPLPoly12GetNumPointsEv($1) | 0) < 3) $$0114 = 0; else {
   if ((__ZNK8TPPLPoly12GetNumPointsEv($1) | 0) == 3) {
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $1);
    $$0114 = 1;
    break;
   }
   $9 = __ZNK8TPPLPoly12GetNumPointsEv($1) | 0;
   $11 = __Znam($9 >>> 0 > 89478485 ? -1 : $9 * 48 | 0) | 0;
   L8 : do if ($9 | 0) {
    $13 = $11 + ($9 * 48 | 0) | 0;
    $14 = $11;
    do {
     __ZN13TPPLPartition15PartitionVertexC2Ev($14);
     $14 = $14 + 48 | 0;
    } while (($14 | 0) != ($13 | 0));
    $17 = ($9 | 0) > 0;
    if ($17) {
     $18 = $9 + -1 | 0;
     $19 = $11 + ($18 * 48 | 0) + 44 | 0;
     $$0109139 = 0;
     do {
      HEAP8[$11 + ($$0109139 * 48 | 0) >> 0] = 1;
      $21 = __ZN8TPPLPoly8GetPointEl($1, $$0109139) | 0;
      $22 = $11 + ($$0109139 * 48 | 0) + 8 | 0;
      HEAP32[$22 >> 2] = HEAP32[$21 >> 2];
      HEAP32[$22 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
      HEAP32[$22 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
      HEAP32[$22 + 12 >> 2] = HEAP32[$21 + 12 >> 2];
      HEAP32[$22 + 16 >> 2] = HEAP32[$21 + 16 >> 2];
      HEAP32[$22 + 20 >> 2] = HEAP32[$21 + 20 >> 2];
      if (($$0109139 | 0) == ($18 | 0)) HEAP32[$19 >> 2] = $11; else HEAP32[$11 + ($$0109139 * 48 | 0) + 44 >> 2] = $11 + (($$0109139 + 1 | 0) * 48 | 0);
      HEAP32[$11 + ($$0109139 * 48 | 0) + 40 >> 2] = $11 + ((($$0109139 | 0) == 0 ? $18 : $$0109139 + -1 | 0) * 48 | 0);
      $$0109139 = $$0109139 + 1 | 0;
     } while (($$0109139 | 0) != ($9 | 0));
     if ($17) {
      $$1110135 = 0;
      do {
       __ZN13TPPLPartition12UpdateVertexEPNS_15PartitionVertexES1_l(0, $11 + ($$1110135 * 48 | 0) | 0, $11, $9);
       $$1110135 = $$1110135 + 1 | 0;
      } while (($$1110135 | 0) != ($9 | 0));
      $78 = 1;
     } else $78 = 0;
     $33 = $9 + -3 | 0;
     L26 : do if (($9 | 0) > 3) {
      $35 = $9 + -4 | 0;
      $$0111129 = 0;
      $$2130 = 0;
      while (1) {
       $$0107$off0126 = 0;
       $$0108125 = 0;
       $$1112124 = $$0111129;
       while (1) {
        $36 = $11 + ($$0108125 * 48 | 0) | 0;
        if (!(HEAP8[$36 >> 0] | 0)) {
         $$1$off0 = $$0107$off0126;
         $$2113 = $$1112124;
        } else {
         $41 = (HEAP8[$11 + ($$0108125 * 48 | 0) + 2 >> 0] | 0) == 0;
         if ($41 | $$0107$off0126 ^ 1) {
          $$1$off0 = $$0107$off0126 | $41 ^ 1;
          $$2113 = $41 ? $$1112124 : $36;
         } else if (+HEAPF64[$11 + ($$0108125 * 48 | 0) + 32 >> 3] > +HEAPF64[$$1112124 + 32 >> 3]) {
          $$1$off0 = $$0107$off0126;
          $$2113 = $36;
         } else {
          $$1$off0 = $$0107$off0126;
          $$2113 = $$1112124;
         }
        }
        $$0108125 = $$0108125 + 1 | 0;
        if (($$0108125 | 0) == ($9 | 0)) break; else {
         $$0107$off0126 = $$1$off0;
         $$1112124 = $$2113;
        }
       }
       if (!$$1$off0) break;
       $48 = $$2113 + 40 | 0;
       $52 = $$2113 + 44 | 0;
       __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($3, (HEAP32[$48 >> 2] | 0) + 8 | 0, $$2113 + 8 | 0, (HEAP32[$52 >> 2] | 0) + 8 | 0);
       __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $3);
       HEAP8[$$2113 >> 0] = 0;
       $56 = HEAP32[$48 >> 2] | 0;
       HEAP32[$56 + 44 >> 2] = HEAP32[$52 >> 2];
       HEAP32[(HEAP32[$52 >> 2] | 0) + 40 >> 2] = $56;
       if (($$2130 | 0) == ($35 | 0)) break L26;
       __ZN13TPPLPartition12UpdateVertexEPNS_15PartitionVertexES1_l(0, HEAP32[$48 >> 2] | 0, $11, $9);
       __ZN13TPPLPartition12UpdateVertexEPNS_15PartitionVertexES1_l(0, HEAP32[$52 >> 2] | 0, $11, $9);
       $$2130 = $$2130 + 1 | 0;
       if (($$2130 | 0) >= ($33 | 0)) break L26; else $$0111129 = $$2113;
      }
      __ZdaPv($11);
      $$0114 = 0;
      break L3;
     } while (0);
     if ($78) {
      $$3123 = 0;
      while (1) {
       if (HEAP8[$11 + ($$3123 * 48 | 0) >> 0] | 0) break;
       $76 = $$3123 + 1 | 0;
       if (($76 | 0) < ($9 | 0)) $$3123 = $76; else break L8;
      }
      __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($3, (HEAP32[$11 + ($$3123 * 48 | 0) + 40 >> 2] | 0) + 8 | 0, $11 + ($$3123 * 48 | 0) + 8 | 0, (HEAP32[$11 + ($$3123 * 48 | 0) + 44 >> 2] | 0) + 8 | 0);
      __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($2, $3);
     }
    }
   } while (0);
   __ZdaPv($11);
   $$0114 = 1;
  } while (0);
  __ZN8TPPLPolyD2Ev($3);
  $$1115 = $$0114;
 } else $$1115 = 0;
 STACKTOP = sp;
 return $$1115 | 0;
}

function _fonsTextBounds($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $203 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $7 = 0, $73 = 0.0, $76 = 0.0, $77 = 0.0, $8 = 0, $81 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $6 = sp + 108 | 0;
 $7 = sp + 104 | 0;
 $8 = sp + 100 | 0;
 $9 = sp + 96 | 0;
 $10 = sp + 92 | 0;
 $11 = sp + 88 | 0;
 $12 = sp + 84 | 0;
 $13 = sp + 80 | 0;
 $14 = sp + 76 | 0;
 $15 = sp + 72 | 0;
 $16 = sp + 40 | 0;
 $17 = sp + 36 | 0;
 $18 = sp + 32 | 0;
 $19 = sp + 114 | 0;
 $20 = sp + 112 | 0;
 $21 = sp + 28 | 0;
 $22 = sp + 24 | 0;
 $23 = sp + 20 | 0;
 $24 = sp + 16 | 0;
 $25 = sp + 12 | 0;
 $26 = sp + 8 | 0;
 $27 = sp + 4 | 0;
 $28 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAPF32[$8 >> 2] = $1;
 HEAPF32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[$12 >> 2] = $5;
 HEAP32[$13 >> 2] = _fons__getState(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$18 >> 2] = -1;
 HEAP16[$19 >> 1] = ~~(+HEAPF32[(HEAP32[$13 >> 2] | 0) + 8 >> 2] * 10.0);
 HEAP16[$20 >> 1] = ~~+HEAPF32[(HEAP32[$13 >> 2] | 0) + 16 >> 2];
 if (!(HEAP32[$7 >> 2] | 0)) {
  HEAPF32[$6 >> 2] = 0.0;
  $203 = +HEAPF32[$6 >> 2];
  STACKTOP = sp;
  return +$203;
 }
 if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) >= 0) if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) < (HEAP32[(HEAP32[$7 >> 2] | 0) + 76 >> 2] | 0)) {
  HEAP32[$22 >> 2] = HEAP32[(HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0) + (HEAP32[HEAP32[$13 >> 2] >> 2] << 2) >> 2];
  if (!(HEAP32[(HEAP32[$22 >> 2] | 0) + 184 >> 2] | 0)) {
   HEAPF32[$6 >> 2] = 0.0;
   $203 = +HEAPF32[$6 >> 2];
   STACKTOP = sp;
   return +$203;
  }
  HEAPF32[$21 >> 2] = +_fons__tt_getPixelHeightScale(HEAP32[$22 >> 2] | 0, +(HEAP16[$19 >> 1] | 0) / 10.0);
  $73 = +_fons__getVertAlign(HEAP32[$7 >> 2] | 0, HEAP32[$22 >> 2] | 0, HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] | 0, HEAP16[$19 >> 1] | 0);
  HEAPF32[$9 >> 2] = +HEAPF32[$9 >> 2] + $73;
  $76 = +HEAPF32[$8 >> 2];
  HEAPF32[$27 >> 2] = $76;
  HEAPF32[$25 >> 2] = $76;
  $77 = +HEAPF32[$9 >> 2];
  HEAPF32[$28 >> 2] = $77;
  HEAPF32[$26 >> 2] = $77;
  HEAPF32[$23 >> 2] = +HEAPF32[$8 >> 2];
  if (!(HEAP32[$11 >> 2] | 0)) {
   $81 = HEAP32[$10 >> 2] | 0;
   HEAP32[$11 >> 2] = $81 + (_strlen(HEAP32[$10 >> 2] | 0) | 0);
  }
  while (1) {
   if ((HEAP32[$10 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) break;
   if (!(_fons__decutf8($15, $14, HEAPU8[HEAP32[$10 >> 2] >> 0] | 0) | 0)) {
    HEAP32[$17 >> 2] = _fons__getGlyph(HEAP32[$7 >> 2] | 0, HEAP32[$22 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP16[$19 >> 1] | 0, HEAP16[$20 >> 1] | 0) | 0;
    do if (HEAP32[$17 >> 2] | 0) {
     _fons__getQuad(HEAP32[$7 >> 2] | 0, HEAP32[$22 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$17 >> 2] | 0, +HEAPF32[$21 >> 2], +HEAPF32[(HEAP32[$13 >> 2] | 0) + 20 >> 2], $8, $9, $16);
     if (+HEAPF32[$16 >> 2] < +HEAPF32[$25 >> 2]) HEAPF32[$25 >> 2] = +HEAPF32[$16 >> 2];
     if (+HEAPF32[$16 + 16 >> 2] > +HEAPF32[$27 >> 2]) HEAPF32[$27 >> 2] = +HEAPF32[$16 + 16 >> 2];
     if (HEAPU8[(HEAP32[$7 >> 2] | 0) + 8 >> 0] & 1 | 0) {
      if (+HEAPF32[$16 + 4 >> 2] < +HEAPF32[$26 >> 2]) HEAPF32[$26 >> 2] = +HEAPF32[$16 + 4 >> 2];
      if (!(+HEAPF32[$16 + 20 >> 2] > +HEAPF32[$28 >> 2])) break;
      HEAPF32[$28 >> 2] = +HEAPF32[$16 + 20 >> 2];
      break;
     } else {
      if (+HEAPF32[$16 + 20 >> 2] < +HEAPF32[$26 >> 2]) HEAPF32[$26 >> 2] = +HEAPF32[$16 + 20 >> 2];
      if (!(+HEAPF32[$16 + 4 >> 2] > +HEAPF32[$28 >> 2])) break;
      HEAPF32[$28 >> 2] = +HEAPF32[$16 + 4 >> 2];
      break;
     }
    } while (0);
    if (HEAP32[$17 >> 2] | 0) $154 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; else $154 = -1;
    HEAP32[$18 >> 2] = $154;
   }
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
  }
  HEAPF32[$24 >> 2] = +HEAPF32[$8 >> 2] - +HEAPF32[$23 >> 2];
  do if (!(HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] & 1)) {
   if (HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] & 4 | 0) {
    HEAPF32[$25 >> 2] = +HEAPF32[$25 >> 2] - +HEAPF32[$24 >> 2];
    HEAPF32[$27 >> 2] = +HEAPF32[$27 >> 2] - +HEAPF32[$24 >> 2];
    break;
   }
   if (HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] & 2 | 0) {
    HEAPF32[$25 >> 2] = +HEAPF32[$25 >> 2] - +HEAPF32[$24 >> 2] * .5;
    HEAPF32[$27 >> 2] = +HEAPF32[$27 >> 2] - +HEAPF32[$24 >> 2] * .5;
   }
  } while (0);
  if (HEAP32[$12 >> 2] | 0) {
   HEAPF32[HEAP32[$12 >> 2] >> 2] = +HEAPF32[$25 >> 2];
   HEAPF32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] = +HEAPF32[$26 >> 2];
   HEAPF32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] = +HEAPF32[$27 >> 2];
   HEAPF32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] = +HEAPF32[$28 >> 2];
  }
  HEAPF32[$6 >> 2] = +HEAPF32[$24 >> 2];
  $203 = +HEAPF32[$6 >> 2];
  STACKTOP = sp;
  return +$203;
 }
 HEAPF32[$6 >> 2] = 0.0;
 $203 = +HEAPF32[$6 >> 2];
 STACKTOP = sp;
 return +$203;
}

function _sg_apply_bindings($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $131 = 0, $14 = 0, $168 = 0, $2 = 0, $3 = 0, $4 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $1 = sp + 168 | 0;
 $2 = sp + 164 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 160 | 0;
 $5 = sp + 156 | 0;
 $6 = sp + 152 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 148 | 0;
 $9 = sp + 144 | 0;
 $10 = sp;
 $11 = sp + 140 | 0;
 $12 = sp + 136 | 0;
 $13 = sp + 132 | 0;
 $14 = sp + 128 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14858, 18726);
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(18744, 17628, 14859, 18726);
 if (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) ___assert_fail(18753, 17628, 14860, 18726);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 172 >> 2] | 0) ___assert_fail(18753, 17628, 14860, 18726);
 if (!(__sg_validate_apply_bindings(HEAP32[$1 >> 2] | 0) | 0)) {
  HEAP8[2156470] = 0;
  STACKTOP = sp;
  return;
 }
 HEAP8[2156469] = 1;
 HEAP32[$2 >> 2] = __sg_lookup_pipeline(2156476, HEAP32[539116] | 0) | 0;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(18659, 17628, 14869, 18726);
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$5 >> 2] = 0;
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) >= 8) break;
  if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 + (HEAP32[$5 >> 2] << 2) >> 2] | 0)) break;
  $45 = __sg_lookup_buffer(2156476, HEAP32[(HEAP32[$1 >> 2] | 0) + 4 + (HEAP32[$5 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[$3 + (HEAP32[$5 >> 2] << 2) >> 2] = $45;
  if (!(HEAP32[$3 + (HEAP32[$5 >> 2] << 2) >> 2] | 0)) {
   label = 16;
   break;
  }
  HEAP8[2156470] = (HEAP8[2156470] & 1 & 2 == (HEAP32[(HEAP32[$3 + (HEAP32[$5 >> 2] << 2) >> 2] | 0) + 8 >> 2] | 0) | 0) != 0 & 1;
  HEAP8[2156470] = (HEAP8[2156470] & 1 & ((HEAP8[(HEAP32[$3 + (HEAP32[$5 >> 2] << 2) >> 2] | 0) + 12 + 8 >> 0] & 1 ^ 1) & 1) | 0) != 0 & 1;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 if ((label | 0) == 16) ___assert_fail(18814, 17628, 14876, 18726);
 HEAP32[$6 >> 2] = 0;
 do if (HEAP32[(HEAP32[$1 >> 2] | 0) + 68 >> 2] | 0) {
  HEAP32[$6 >> 2] = __sg_lookup_buffer(2156476, HEAP32[(HEAP32[$1 >> 2] | 0) + 68 >> 2] | 0) | 0;
  if (HEAP32[$6 >> 2] | 0) {
   HEAP8[2156470] = (HEAP8[2156470] & 1 & 2 == (HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) | 0) != 0 & 1;
   HEAP8[2156470] = (HEAP8[2156470] & 1 & ((HEAP8[(HEAP32[$6 >> 2] | 0) + 12 + 8 >> 0] & 1 ^ 1) & 1) | 0) != 0 & 1;
   break;
  } else ___assert_fail(18821, 17628, 14888, 18726);
 } while (0);
 dest = $7;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$8 >> 2] = 0;
 HEAP32[$9 >> 2] = 0;
 while (1) {
  if ((HEAP32[$9 >> 2] | 0) >= 12) break;
  if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 76 + (HEAP32[$9 >> 2] << 2) >> 2] | 0)) break;
  $131 = __sg_lookup_image(2156476, HEAP32[(HEAP32[$1 >> 2] | 0) + 76 + (HEAP32[$9 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[$7 + (HEAP32[$9 >> 2] << 2) >> 2] = $131;
  if (!(HEAP32[$7 + (HEAP32[$9 >> 2] << 2) >> 2] | 0)) {
   label = 26;
   break;
  }
  HEAP8[2156470] = (HEAP8[2156470] & 1 & 2 == (HEAP32[(HEAP32[$7 + (HEAP32[$9 >> 2] << 2) >> 2] | 0) + 8 >> 2] | 0) | 0) != 0 & 1;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 if ((label | 0) == 26) ___assert_fail(18824, 17628, 14898, 18726);
 dest = $10;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$11 >> 2] = 0;
 HEAP32[$12 >> 2] = 0;
 while (1) {
  if ((HEAP32[$12 >> 2] | 0) >= 12) break;
  if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 124 + (HEAP32[$12 >> 2] << 2) >> 2] | 0)) break;
  $168 = __sg_lookup_image(2156476, HEAP32[(HEAP32[$1 >> 2] | 0) + 124 + (HEAP32[$12 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[$10 + (HEAP32[$12 >> 2] << 2) >> 2] = $168;
  if (!(HEAP32[$10 + (HEAP32[$12 >> 2] << 2) >> 2] | 0)) {
   label = 32;
   break;
  }
  HEAP8[2156470] = (HEAP8[2156470] & 1 & 2 == (HEAP32[(HEAP32[$10 + (HEAP32[$12 >> 2] << 2) >> 2] | 0) + 8 >> 2] | 0) | 0) != 0 & 1;
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
 }
 if ((label | 0) == 32) ___assert_fail(18835, 17628, 14911, 18726);
 if (!(HEAP8[2156470] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$13 >> 2] = (HEAP32[$1 >> 2] | 0) + 36;
 HEAP32[$14 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2];
 __sg_apply_bindings(HEAP32[$2 >> 2] | 0, $3, HEAP32[$13 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$14 >> 2] | 0, $7, HEAP32[$8 >> 2] | 0, $10, HEAP32[$11 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _fonsDrawText($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $109 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $216 = 0, $221 = 0.0, $5 = 0, $6 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $5 = sp + 84 | 0;
 $6 = sp + 80 | 0;
 $7 = sp + 76 | 0;
 $8 = sp + 72 | 0;
 $9 = sp + 68 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 60 | 0;
 $12 = sp + 56 | 0;
 $13 = sp + 52 | 0;
 $14 = sp + 48 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 12 | 0;
 $17 = sp + 90 | 0;
 $18 = sp + 88 | 0;
 $19 = sp + 8 | 0;
 $20 = sp + 4 | 0;
 $21 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAPF32[$7 >> 2] = $1;
 HEAPF32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = _fons__getState(HEAP32[$6 >> 2] | 0) | 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$16 >> 2] = -1;
 HEAP16[$17 >> 1] = ~~(+HEAPF32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] * 10.0);
 HEAP16[$18 >> 1] = ~~+HEAPF32[(HEAP32[$11 >> 2] | 0) + 16 >> 2];
 if (!(HEAP32[$6 >> 2] | 0)) {
  HEAPF32[$5 >> 2] = +HEAPF32[$7 >> 2];
  $221 = +HEAPF32[$5 >> 2];
  STACKTOP = sp;
  return +$221;
 }
 if ((HEAP32[HEAP32[$11 >> 2] >> 2] | 0) >= 0) if ((HEAP32[HEAP32[$11 >> 2] >> 2] | 0) < (HEAP32[(HEAP32[$6 >> 2] | 0) + 76 >> 2] | 0)) {
  HEAP32[$20 >> 2] = HEAP32[(HEAP32[(HEAP32[$6 >> 2] | 0) + 64 >> 2] | 0) + (HEAP32[HEAP32[$11 >> 2] >> 2] << 2) >> 2];
  if (!(HEAP32[(HEAP32[$20 >> 2] | 0) + 184 >> 2] | 0)) {
   HEAPF32[$5 >> 2] = +HEAPF32[$7 >> 2];
   $221 = +HEAPF32[$5 >> 2];
   STACKTOP = sp;
   return +$221;
  }
  HEAPF32[$19 >> 2] = +_fons__tt_getPixelHeightScale(HEAP32[$20 >> 2] | 0, +(HEAP16[$17 >> 1] | 0) / 10.0);
  if (!(HEAP32[$10 >> 2] | 0)) {
   $65 = HEAP32[$9 >> 2] | 0;
   HEAP32[$10 >> 2] = $65 + (_strlen(HEAP32[$9 >> 2] | 0) | 0);
  }
  do if (!(HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] & 1)) {
   if (HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] & 4 | 0) {
    HEAPF32[$21 >> 2] = +_fonsTextBounds(HEAP32[$6 >> 2] | 0, +HEAPF32[$7 >> 2], +HEAPF32[$8 >> 2], HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, 0);
    HEAPF32[$7 >> 2] = +HEAPF32[$7 >> 2] - +HEAPF32[$21 >> 2];
    break;
   }
   if (HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] & 2 | 0) {
    HEAPF32[$21 >> 2] = +_fonsTextBounds(HEAP32[$6 >> 2] | 0, +HEAPF32[$7 >> 2], +HEAPF32[$8 >> 2], HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, 0);
    HEAPF32[$7 >> 2] = +HEAPF32[$7 >> 2] - +HEAPF32[$21 >> 2] * .5;
   }
  } while (0);
  $109 = +_fons__getVertAlign(HEAP32[$6 >> 2] | 0, HEAP32[$20 >> 2] | 0, HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] | 0, HEAP16[$17 >> 1] | 0);
  HEAPF32[$8 >> 2] = +HEAPF32[$8 >> 2] + $109;
  while (1) {
   if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) break;
   if (!(_fons__decutf8($13, $12, HEAPU8[HEAP32[$9 >> 2] >> 0] | 0) | 0)) {
    HEAP32[$14 >> 2] = _fons__getGlyph(HEAP32[$6 >> 2] | 0, HEAP32[$20 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP16[$17 >> 1] | 0, HEAP16[$18 >> 1] | 0) | 0;
    if (HEAP32[$14 >> 2] | 0) {
     _fons__getQuad(HEAP32[$6 >> 2] | 0, HEAP32[$20 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$14 >> 2] | 0, +HEAPF32[$19 >> 2], +HEAPF32[(HEAP32[$11 >> 2] | 0) + 20 >> 2], $7, $8, $15);
     if (((HEAP32[(HEAP32[$6 >> 2] | 0) + 20560 >> 2] | 0) + 6 | 0) > 1024) _fons__flush(HEAP32[$6 >> 2] | 0);
     _fons__vertex(HEAP32[$6 >> 2] | 0, +HEAPF32[$15 >> 2], +HEAPF32[$15 + 4 >> 2], +HEAPF32[$15 + 8 >> 2], +HEAPF32[$15 + 12 >> 2], HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$6 >> 2] | 0, +HEAPF32[$15 + 16 >> 2], +HEAPF32[$15 + 20 >> 2], +HEAPF32[$15 + 24 >> 2], +HEAPF32[$15 + 28 >> 2], HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$6 >> 2] | 0, +HEAPF32[$15 + 16 >> 2], +HEAPF32[$15 + 4 >> 2], +HEAPF32[$15 + 24 >> 2], +HEAPF32[$15 + 12 >> 2], HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$6 >> 2] | 0, +HEAPF32[$15 >> 2], +HEAPF32[$15 + 4 >> 2], +HEAPF32[$15 + 8 >> 2], +HEAPF32[$15 + 12 >> 2], HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$6 >> 2] | 0, +HEAPF32[$15 >> 2], +HEAPF32[$15 + 20 >> 2], +HEAPF32[$15 + 8 >> 2], +HEAPF32[$15 + 28 >> 2], HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$6 >> 2] | 0, +HEAPF32[$15 + 16 >> 2], +HEAPF32[$15 + 20 >> 2], +HEAPF32[$15 + 24 >> 2], +HEAPF32[$15 + 28 >> 2], HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0);
    }
    if (HEAP32[$14 >> 2] | 0) $216 = HEAP32[(HEAP32[$14 >> 2] | 0) + 4 >> 2] | 0; else $216 = -1;
    HEAP32[$16 >> 2] = $216;
   }
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
  }
  _fons__flush(HEAP32[$6 >> 2] | 0);
  HEAPF32[$5 >> 2] = +HEAPF32[$7 >> 2];
  $221 = +HEAPF32[$5 >> 2];
  STACKTOP = sp;
  return +$221;
 }
 HEAPF32[$5 >> 2] = +HEAPF32[$7 >> 2];
 $221 = +HEAPF32[$5 >> 2];
 STACKTOP = sp;
 return +$221;
}

function __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$idx$i = 0, $$045 = 0, $$045$in = 0, $$046 = 0, $$148 = 0, $16 = 0, $19 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $51 = 0, $52 = 0, $59 = 0, $6 = 0, $65 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 90) {
  $16 = $0 + 2 | 0;
  if ((HEAP8[$16 >> 0] | 0) == 84) {
   $19 = $2 + 4 | 0;
   $23 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   $24 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
   $28 = ((HEAP32[$19 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0;
   if (($24 | 0) == ($16 | 0)) $$148 = $0; else {
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, 48090, __ZNSt3__211char_traitsIcE6lengthEPKc(48090) | 0);
    L7 : do if (($23 | 0) != ($28 | 0)) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$2 >> 2] | 0) + ($23 * 24 | 0) | 0);
     $35 = HEAP8[$4 + 11 >> 0] | 0;
     $36 = $35 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3, $36 ? HEAP32[$4 >> 2] | 0 : $4, $36 ? HEAP32[$4 + 4 >> 2] | 0 : $35 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     $43 = $4 + 11 | 0;
     $44 = $4 + 4 | 0;
     $$045$in = $23;
     while (1) {
      $$045 = $$045$in + 1 | 0;
      if (($$045 | 0) == ($28 | 0)) break L7;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, (HEAP32[$2 >> 2] | 0) + ($$045 * 24 | 0) | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5, 0, 48101) | 0;
      HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
      $$0$i$i$i = 0;
      while (1) {
       if (($$0$i$i$i | 0) == 3) break;
       HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
       $$0$i$i$i = $$0$i$i$i + 1 | 0;
      }
      $51 = HEAP8[$43 >> 0] | 0;
      $52 = $51 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($3, $52 ? HEAP32[$4 >> 2] | 0 : $4, $52 ? HEAP32[$44 >> 2] | 0 : $51 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$045$in = $$045;
     }
    } while (0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 47877) | 0;
    $$046 = $28;
    while (1) {
     if (($$046 | 0) == ($23 | 0)) break;
     $59 = HEAP32[$19 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($59 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$19 >> 2] = $59 + -24;
     $$046 = $$046 + -1 | 0;
    }
    HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$6 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    $$0$i$i = 0;
    while (1) {
     if (($$0$i$i | 0) == 3) break;
     HEAP32[$3 + ($$0$i$i << 2) >> 2] = 0;
     $$0$i$i = $$0$i$i + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $6);
    $65 = HEAP32[$19 >> 2] | 0;
    if ($65 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65, $4);
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$148 = $24;
   }
  } else $$148 = $0;
 } else $$148 = $0; else $$148 = $0; else $$148 = $0;
 STACKTOP = sp;
 return $$148 | 0;
}

function ___cxa_demangle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i55 = 0, $$158 = 0, $$2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $26 = 0, $29 = 0, $30 = 0, $34 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $70 = 0, $71 = 0, $79 = 0, $8 = 0, $84 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192 | 0;
 $4 = sp + 4176 | 0;
 $5 = sp;
 $6 = sp + 4112 | 0;
 if (!$0) label = 3; else {
  $8 = ($1 | 0) != 0;
  $9 = ($2 | 0) == 0;
  if ($8 & $9) label = 3; else {
   if ($8) $62 = HEAP32[$2 >> 2] | 0; else $62 = 0;
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EEC2Ev($5);
   __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILm4096EEERNS0_5arenaIXT_EEE($6, $5);
   $12 = $6 + 48 | 0;
   $13 = $6 + 61 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   HEAP32[$12 + 8 >> 2] = 0;
   HEAP8[$12 + 12 >> 0] = 0;
   HEAP8[$13 >> 0] = 1;
   $14 = $6 + 32 | 0;
   $15 = $6 + 36 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   if ($16 >>> 0 < (HEAP32[$6 + 40 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($4, $5);
    HEAP32[$16 >> 2] = 0;
    HEAP32[$16 + 4 >> 2] = 0;
    HEAP32[$16 + 8 >> 2] = 0;
    HEAP32[$16 + 12 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILm4096EEEEEEvDpOT_($14, $5);
   $26 = $6 + 62 | 0;
   HEAP8[$26 >> 0] = 0;
   HEAP8[$6 + 63 >> 0] = 1;
   HEAP32[$4 >> 2] = 0;
   $29 = $0 + (_strlen($0) | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0, $29, $6, $4);
   $30 = HEAP32[$4 >> 2] | 0;
   do if (($30 | 0) != 0 | (HEAP8[$26 >> 0] | 0) == 0) {
    $55 = $30;
    label = 22;
   } else {
    $34 = HEAP32[$14 >> 2] | 0;
    if (($34 | 0) == (HEAP32[$15 >> 2] | 0)) label = 23; else if ((HEAP32[$34 >> 2] | 0) == (HEAP32[$34 + 4 >> 2] | 0)) label = 23; else {
     HEAP8[$26 >> 0] = 0;
     HEAP8[$13 >> 0] = 0;
     $41 = HEAP32[$6 >> 2] | 0;
     $42 = $6 + 4 | 0;
     $$0$i$i$i = HEAP32[$42 >> 2] | 0;
     while (1) {
      if (($$0$i$i$i | 0) == ($41 | 0)) break;
      $45 = $$0$i$i$i + -24 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
      $$0$i$i$i = $45;
     }
     HEAP32[$42 >> 2] = $41;
     $47 = HEAP32[$6 + 16 >> 2] | 0;
     $48 = $6 + 20 | 0;
     $$0$i$i$i55 = HEAP32[$48 >> 2] | 0;
     while (1) {
      if (($$0$i$i$i55 | 0) == ($47 | 0)) break;
      $51 = $$0$i$i$i55 + -16 | 0;
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($51);
      $$0$i$i$i55 = $51;
     }
     HEAP32[$48 >> 2] = $47;
     __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0, $29, $6, $4);
     if (!(HEAP8[$26 >> 0] | 0)) {
      $55 = HEAP32[$4 >> 2] | 0;
      label = 22;
      break;
     } else {
      HEAP32[$4 >> 2] = -2;
      $$2 = 0;
      $87 = -2;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 22) if (!$55) label = 23; else {
    $$2 = 0;
    $87 = $55;
   }
   do if ((label | 0) == 23) {
    $56 = $6 + 4 | 0;
    $59 = __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv((HEAP32[$56 >> 2] | 0) + -24 | 0) | 0;
    $60 = $59 + 1 | 0;
    if ($60 >>> 0 > $62 >>> 0) {
     $63 = _realloc($1, $60) | 0;
     if (!$63) {
      HEAP32[$4 >> 2] = -1;
      $$2 = 0;
      $87 = -1;
      break;
     }
     if ($9) $$158 = $63; else {
      HEAP32[$2 >> 2] = $60;
      $$158 = $63;
     }
    } else if (!$1) {
     $$2 = 0;
     $87 = 0;
     break;
    } else $$158 = $1;
    $66 = HEAP32[$56 >> 2] | 0;
    $67 = $66 + -12 | 0;
    $70 = HEAP8[$67 + 11 >> 0] | 0;
    $71 = $70 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($66 + -24 | 0, $71 ? HEAP32[$67 >> 2] | 0 : $67, $71 ? HEAP32[$66 + -8 >> 2] | 0 : $70 & 255) | 0;
    $79 = (HEAP32[$56 >> 2] | 0) + -24 | 0;
    if ((HEAP8[$79 + 11 >> 0] | 0) < 0) $84 = HEAP32[$79 >> 2] | 0; else $84 = $79;
    _memcpy($$158 | 0, $84 | 0, $59 | 0) | 0;
    HEAP8[$$158 + $59 >> 0] = 0;
    $$2 = $$158;
    $87 = 0;
   } while (0);
   if ($3 | 0) HEAP32[$3 >> 2] = $87;
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($6);
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EED2Ev($5);
   $$0 = $$2;
  }
 }
 if ((label | 0) == 3) if (!$3) $$0 = 0; else {
  HEAP32[$3 >> 2] = -3;
  $$0 = 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$067 = 0, $$068 = 0, $$1 = 0, $$sroa$077$0 = 0, $$sroa$083$0 = 0, $12 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $37 = 0, $38 = 0, $4 = 0, $49 = 0, $58 = 0, $60 = 0, $64 = 0, $68 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $83 = 0, $84 = 0, $85 = 0, $isdigittmp = 0, $isdigittmp71 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 L1 : do if (($1 - $0 | 0) > 1) if ((HEAP8[$0 >> 0] | 0) == 84) {
  $12 = HEAP8[$0 + 1 >> 0] | 0;
  if ($12 << 24 >> 24 == 95) {
   $17 = HEAP32[$2 + 36 >> 2] | 0;
   if ((HEAP32[$2 + 32 >> 2] | 0) == ($17 | 0)) {
    $$1 = $0;
    break;
   }
   $20 = HEAP32[$17 + -16 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$17 + -12 >> 2] | 0)) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm3EEERAT__Kc($3);
    $37 = $2 + 4 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    if ($38 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($38, $3);
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    HEAP8[$2 + 62 >> 0] = 1;
    $$1 = $0 + 2 | 0;
    break;
   }
   $26 = HEAP32[$20 + 4 >> 2] | 0;
   $27 = $2 + 4 | 0;
   $28 = $2 + 8 | 0;
   $$sroa$083$0 = HEAP32[$20 >> 2] | 0;
   while (1) {
    if (($$sroa$083$0 | 0) == ($26 | 0)) break;
    $31 = HEAP32[$27 >> 2] | 0;
    if (($31 | 0) == (HEAP32[$28 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$083$0); else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($31, $$sroa$083$0);
     HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 24;
    }
    $$sroa$083$0 = $$sroa$083$0 + 24 | 0;
   }
   $$1 = $0 + 2 | 0;
   break;
  }
  $isdigittmp = ($12 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $$067 = $isdigittmp;
   $$068 = $0 + 2 | 0;
   while (1) {
    if (($$068 | 0) == ($1 | 0)) {
     $$1 = $0;
     break L1;
    }
    $49 = HEAP8[$$068 >> 0] | 0;
    $isdigittmp71 = ($49 << 24 >> 24) + -48 | 0;
    if ($isdigittmp71 >>> 0 >= 10) break;
    $$067 = $isdigittmp71 + ($$067 * 10 | 0) | 0;
    $$068 = $$068 + 1 | 0;
   }
   if ($49 << 24 >> 24 == 95) {
    $58 = HEAP32[$2 + 36 >> 2] | 0;
    if ((HEAP32[$2 + 32 >> 2] | 0) == ($58 | 0)) $$1 = $0; else {
     $60 = $$067 + 1 | 0;
     $64 = HEAP32[$58 + -16 >> 2] | 0;
     $68 = $64;
     if ($60 >>> 0 >= (HEAP32[$58 + -12 >> 2] | 0) - $64 >> 4 >>> 0) {
      $83 = $$068 + 1 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$4 + 8 >> 2] = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($4, $0, $83);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
      $84 = $2 + 4 | 0;
      $85 = HEAP32[$84 >> 2] | 0;
      if ($85 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($85, $3);
       HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      HEAP8[$2 + 62 >> 0] = 1;
      $$1 = $83;
      break;
     }
     $72 = HEAP32[$68 + ($60 << 4) + 4 >> 2] | 0;
     $73 = $2 + 4 | 0;
     $74 = $2 + 8 | 0;
     $$sroa$077$0 = HEAP32[$68 + ($60 << 4) >> 2] | 0;
     while (1) {
      if (($$sroa$077$0 | 0) == ($72 | 0)) break;
      $77 = HEAP32[$73 >> 2] | 0;
      if (($77 | 0) == (HEAP32[$74 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2, $$sroa$077$0); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($77, $$sroa$077$0);
       HEAP32[$73 >> 2] = (HEAP32[$73 >> 2] | 0) + 24;
      }
      $$sroa$077$0 = $$sroa$077$0 + 24 | 0;
     }
     $$1 = $$068 + 1 | 0;
    }
   } else $$1 = $0;
  } else $$1 = $0;
 } else $$1 = $0; else $$1 = $0; while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _fons__getQuad($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0.0, $44 = 0, $9 = 0, $90 = 0, $98 = 0.0, $99 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $9 = sp + 68 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 60 | 0;
 $12 = sp + 56 | 0;
 $13 = sp + 52 | 0;
 $14 = sp + 48 | 0;
 $15 = sp + 44 | 0;
 $16 = sp + 40 | 0;
 $17 = sp + 36 | 0;
 $18 = sp + 32 | 0;
 $19 = sp + 28 | 0;
 $20 = sp + 24 | 0;
 $21 = sp + 20 | 0;
 $22 = sp + 16 | 0;
 $23 = sp + 12 | 0;
 $24 = sp + 8 | 0;
 $25 = sp + 4 | 0;
 $26 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$12 >> 2] = $3;
 HEAPF32[$13 >> 2] = $4;
 HEAPF32[$14 >> 2] = $5;
 HEAP32[$15 >> 2] = $6;
 HEAP32[$16 >> 2] = $7;
 HEAP32[$17 >> 2] = $8;
 if ((HEAP32[$11 >> 2] | 0) != -1) {
  $35 = +(_fons__tt_getGlyphKernAdvance(HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] | 0) | 0);
  HEAPF32[$26 >> 2] = $35 * +HEAPF32[$13 >> 2];
  $44 = HEAP32[$15 >> 2] | 0;
  HEAPF32[$44 >> 2] = +HEAPF32[$44 >> 2] + +(~~(+HEAPF32[$26 >> 2] + +HEAPF32[$14 >> 2] + .5) | 0);
 }
 HEAPF32[$20 >> 2] = +(((HEAP16[(HEAP32[$12 >> 2] | 0) + 26 >> 1] | 0) + 1 & 65535) << 16 >> 16);
 HEAPF32[$21 >> 2] = +(((HEAP16[(HEAP32[$12 >> 2] | 0) + 28 >> 1] | 0) + 1 & 65535) << 16 >> 16);
 HEAPF32[$22 >> 2] = +((HEAP16[(HEAP32[$12 >> 2] | 0) + 16 >> 1] | 0) + 1 | 0);
 HEAPF32[$23 >> 2] = +((HEAP16[(HEAP32[$12 >> 2] | 0) + 18 >> 1] | 0) + 1 | 0);
 HEAPF32[$24 >> 2] = +((HEAP16[(HEAP32[$12 >> 2] | 0) + 20 >> 1] | 0) - 1 | 0);
 HEAPF32[$25 >> 2] = +((HEAP16[(HEAP32[$12 >> 2] | 0) + 22 >> 1] | 0) - 1 | 0);
 $90 = (HEAPU8[(HEAP32[$9 >> 2] | 0) + 8 >> 0] & 1 | 0) != 0;
 HEAPF32[$18 >> 2] = +(~~(+HEAPF32[HEAP32[$15 >> 2] >> 2] + +HEAPF32[$20 >> 2]) | 0);
 $98 = +HEAPF32[HEAP32[$16 >> 2] >> 2];
 $99 = +HEAPF32[$21 >> 2];
 if ($90) {
  HEAPF32[$19 >> 2] = +(~~($98 + $99) | 0);
  HEAPF32[HEAP32[$17 >> 2] >> 2] = +HEAPF32[$18 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] = +HEAPF32[$19 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 16 >> 2] = +HEAPF32[$18 >> 2] + +HEAPF32[$24 >> 2] - +HEAPF32[$22 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 20 >> 2] = +HEAPF32[$19 >> 2] + +HEAPF32[$25 >> 2] - +HEAPF32[$23 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 8 >> 2] = +HEAPF32[$22 >> 2] * +HEAPF32[(HEAP32[$9 >> 2] | 0) + 36 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] = +HEAPF32[$23 >> 2] * +HEAPF32[(HEAP32[$9 >> 2] | 0) + 40 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 24 >> 2] = +HEAPF32[$24 >> 2] * +HEAPF32[(HEAP32[$9 >> 2] | 0) + 36 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] = +HEAPF32[$25 >> 2] * +HEAPF32[(HEAP32[$9 >> 2] | 0) + 40 >> 2];
  $200 = HEAP32[$12 >> 2] | 0;
  $201 = $200 + 24 | 0;
  $202 = HEAP16[$201 >> 1] | 0;
  $203 = $202 << 16 >> 16;
  $204 = +($203 | 0);
  $205 = $204 / 10.0;
  $206 = $205 + .5;
  $207 = ~~$206;
  $208 = +($207 | 0);
  $209 = HEAP32[$15 >> 2] | 0;
  $210 = +HEAPF32[$209 >> 2];
  $211 = $210 + $208;
  HEAPF32[$209 >> 2] = $211;
  STACKTOP = sp;
  return;
 } else {
  HEAPF32[$19 >> 2] = +(~~($98 - $99) | 0);
  HEAPF32[HEAP32[$17 >> 2] >> 2] = +HEAPF32[$18 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] = +HEAPF32[$19 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 16 >> 2] = +HEAPF32[$18 >> 2] + +HEAPF32[$24 >> 2] - +HEAPF32[$22 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 20 >> 2] = +HEAPF32[$19 >> 2] - +HEAPF32[$25 >> 2] + +HEAPF32[$23 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 8 >> 2] = +HEAPF32[$22 >> 2] * +HEAPF32[(HEAP32[$9 >> 2] | 0) + 36 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] = +HEAPF32[$23 >> 2] * +HEAPF32[(HEAP32[$9 >> 2] | 0) + 40 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 24 >> 2] = +HEAPF32[$24 >> 2] * +HEAPF32[(HEAP32[$9 >> 2] | 0) + 36 >> 2];
  HEAPF32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] = +HEAPF32[$25 >> 2] * +HEAPF32[(HEAP32[$9 >> 2] | 0) + 40 >> 2];
  $200 = HEAP32[$12 >> 2] | 0;
  $201 = $200 + 24 | 0;
  $202 = HEAP16[$201 >> 1] | 0;
  $203 = $202 << 16 >> 16;
  $204 = +($203 | 0);
  $205 = $204 / 10.0;
  $206 = $205 + .5;
  $207 = ~~$206;
  $208 = +($207 | 0);
  $209 = HEAP32[$15 >> 2] | 0;
  $210 = +HEAPF32[$209 >> 2];
  $211 = $210 + $208;
  HEAPF32[$209 >> 2] = $211;
  STACKTOP = sp;
  return;
 }
}

function _stbtt__rasterize($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $104 = 0.0, $109 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $175 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $12 = sp + 88 | 0;
 $13 = sp + 84 | 0;
 $14 = sp + 80 | 0;
 $15 = sp + 76 | 0;
 $16 = sp + 72 | 0;
 $17 = sp + 68 | 0;
 $18 = sp + 64 | 0;
 $19 = sp + 60 | 0;
 $20 = sp + 56 | 0;
 $21 = sp + 52 | 0;
 $22 = sp + 48 | 0;
 $23 = sp + 44 | 0;
 $24 = sp + 40 | 0;
 $25 = sp + 36 | 0;
 $26 = sp + 32 | 0;
 $27 = sp + 28 | 0;
 $28 = sp + 24 | 0;
 $29 = sp + 20 | 0;
 $30 = sp + 16 | 0;
 $31 = sp + 12 | 0;
 $32 = sp + 8 | 0;
 $33 = sp + 4 | 0;
 $34 = sp;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$13 >> 2] = $1;
 HEAP32[$14 >> 2] = $2;
 HEAP32[$15 >> 2] = $3;
 HEAPF32[$16 >> 2] = $4;
 HEAPF32[$17 >> 2] = $5;
 HEAPF32[$18 >> 2] = $6;
 HEAPF32[$19 >> 2] = $7;
 HEAP32[$20 >> 2] = $8;
 HEAP32[$21 >> 2] = $9;
 HEAP32[$22 >> 2] = $10;
 HEAP32[$23 >> 2] = $11;
 $37 = +HEAPF32[$17 >> 2];
 HEAPF32[$24 >> 2] = HEAP32[$22 >> 2] | 0 ? -$37 : $37;
 HEAP32[$31 >> 2] = 1;
 HEAP32[$26 >> 2] = 0;
 HEAP32[$27 >> 2] = 0;
 while (1) {
  if ((HEAP32[$27 >> 2] | 0) >= (HEAP32[$15 >> 2] | 0)) break;
  HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + (HEAP32[(HEAP32[$14 >> 2] | 0) + (HEAP32[$27 >> 2] << 2) >> 2] | 0);
  HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
 }
 HEAP32[$25 >> 2] = _fons__tmpalloc(((HEAP32[$26 >> 2] | 0) + 1 | 0) * 20 | 0, HEAP32[$23 >> 2] | 0) | 0;
 if (!(HEAP32[$25 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$26 >> 2] = 0;
 HEAP32[$30 >> 2] = 0;
 HEAP32[$27 >> 2] = 0;
 while (1) {
  if ((HEAP32[$27 >> 2] | 0) >= (HEAP32[$15 >> 2] | 0)) break;
  HEAP32[$32 >> 2] = (HEAP32[$13 >> 2] | 0) + (HEAP32[$30 >> 2] << 3);
  HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + (HEAP32[(HEAP32[$14 >> 2] | 0) + (HEAP32[$27 >> 2] << 2) >> 2] | 0);
  HEAP32[$28 >> 2] = (HEAP32[(HEAP32[$14 >> 2] | 0) + (HEAP32[$27 >> 2] << 2) >> 2] | 0) - 1;
  HEAP32[$29 >> 2] = 0;
  while (1) {
   if ((HEAP32[$29 >> 2] | 0) >= (HEAP32[(HEAP32[$14 >> 2] | 0) + (HEAP32[$27 >> 2] << 2) >> 2] | 0)) break;
   HEAP32[$33 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$34 >> 2] = HEAP32[$28 >> 2];
   if (!(+HEAPF32[(HEAP32[$32 >> 2] | 0) + (HEAP32[$28 >> 2] << 3) + 4 >> 2] == +HEAPF32[(HEAP32[$32 >> 2] | 0) + (HEAP32[$29 >> 2] << 3) + 4 >> 2])) {
    HEAP32[(HEAP32[$25 >> 2] | 0) + ((HEAP32[$26 >> 2] | 0) * 20 | 0) + 16 >> 2] = 0;
    $104 = +HEAPF32[(HEAP32[$32 >> 2] | 0) + (HEAP32[$28 >> 2] << 3) + 4 >> 2];
    $109 = +HEAPF32[(HEAP32[$32 >> 2] | 0) + (HEAP32[$29 >> 2] << 3) + 4 >> 2];
    if (HEAP32[$22 >> 2] | 0) {
     if ($104 > $109) label = 13;
    } else if ($104 < $109) label = 13;
    if ((label | 0) == 13) {
     label = 0;
     HEAP32[(HEAP32[$25 >> 2] | 0) + ((HEAP32[$26 >> 2] | 0) * 20 | 0) + 16 >> 2] = 1;
     HEAP32[$33 >> 2] = HEAP32[$28 >> 2];
     HEAP32[$34 >> 2] = HEAP32[$29 >> 2];
    }
    HEAPF32[(HEAP32[$25 >> 2] | 0) + ((HEAP32[$26 >> 2] | 0) * 20 | 0) >> 2] = +HEAPF32[(HEAP32[$32 >> 2] | 0) + (HEAP32[$33 >> 2] << 3) >> 2] * +HEAPF32[$16 >> 2] + +HEAPF32[$18 >> 2];
    HEAPF32[(HEAP32[$25 >> 2] | 0) + ((HEAP32[$26 >> 2] | 0) * 20 | 0) + 4 >> 2] = (+HEAPF32[(HEAP32[$32 >> 2] | 0) + (HEAP32[$33 >> 2] << 3) + 4 >> 2] * +HEAPF32[$24 >> 2] + +HEAPF32[$19 >> 2]) * +(HEAP32[$31 >> 2] | 0);
    HEAPF32[(HEAP32[$25 >> 2] | 0) + ((HEAP32[$26 >> 2] | 0) * 20 | 0) + 8 >> 2] = +HEAPF32[(HEAP32[$32 >> 2] | 0) + (HEAP32[$34 >> 2] << 3) >> 2] * +HEAPF32[$16 >> 2] + +HEAPF32[$18 >> 2];
    HEAPF32[(HEAP32[$25 >> 2] | 0) + ((HEAP32[$26 >> 2] | 0) * 20 | 0) + 12 >> 2] = (+HEAPF32[(HEAP32[$32 >> 2] | 0) + (HEAP32[$34 >> 2] << 3) + 4 >> 2] * +HEAPF32[$24 >> 2] + +HEAPF32[$19 >> 2]) * +(HEAP32[$31 >> 2] | 0);
    HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + 1;
   }
   $175 = HEAP32[$29 >> 2] | 0;
   HEAP32[$29 >> 2] = $175 + 1;
   HEAP32[$28 >> 2] = $175;
  }
  HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
 }
 _stbtt__sort_edges(HEAP32[$25 >> 2] | 0, HEAP32[$26 >> 2] | 0);
 _stbtt__rasterize_sorted_edges(HEAP32[$12 >> 2] | 0, HEAP32[$25 >> 2] | 0, HEAP32[$26 >> 2] | 0, HEAP32[$31 >> 2] | 0, HEAP32[$20 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$23 >> 2] | 0);
 _fons__tmpfree(HEAP32[$25 >> 2] | 0, HEAP32[$23 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$add$i = 0, $$0$i$i$i$i = 0, $$0$i$i$idx$i = 0, $$063 = 0, $$066 = 0, $$1 = 0, $$164 = 0, $$6 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $46 = 0, $47 = 0, $50 = 0, $54 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $64 = 0, $72 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 99) if ((HEAP8[$0 + 1 >> 0] | 0) == 108) {
  $14 = $0 + 2 | 0;
  $15 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
  if (($15 | 0) == ($14 | 0) | ($15 | 0) == ($1 | 0)) $$6 = $0; else {
   $19 = $2 + 4 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($20 | 0)) $$6 = $0; else {
    $22 = $20 + -12 | 0;
    $25 = HEAP8[$22 + 11 >> 0] | 0;
    $26 = $25 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($20 + -24 | 0, $26 ? HEAP32[$22 >> 2] | 0 : $22, $26 ? HEAP32[$20 + -8 >> 2] | 0 : $25 & 255) | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    $$0$i$i = 0;
    while (1) {
     if (($$0$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
     $$0$i$i = $$0$i$i + 1 | 0;
    }
    $35 = HEAP32[$19 >> 2] | 0;
    $36 = $35 + -12 | 0;
    $37 = $36 + 11 | 0;
    if ((HEAP8[$37 >> 0] | 0) < 0) {
     $40 = HEAP32[$36 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($40, $3);
     HEAP32[$35 + -8 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($36, $3);
     HEAP8[$37 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($36);
    HEAP32[$36 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$36 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$36 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$19 >> 2] | 0) + -24 | 0, 47879) | 0;
    $46 = $3 + 11 | 0;
    $47 = $3 + 4 | 0;
    $$0 = 0;
    $$063 = $15;
    while (1) {
     if ((HEAP8[$$063 >> 0] | 0) == 69) break;
     $50 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$063, $1, $2) | 0;
     if (($50 | 0) == ($$063 | 0) | ($50 | 0) == ($1 | 0)) {
      $$6 = $0;
      break L1;
     }
     $54 = HEAP32[$19 >> 2] | 0;
     if ((HEAP32[$2 >> 2] | 0) == ($54 | 0)) {
      $$6 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $54 + -24 | 0);
     $57 = HEAP32[$19 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($57 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     $59 = $57 + -24 | 0;
     HEAP32[$19 >> 2] = $59;
     $60 = HEAP8[$46 >> 0] | 0;
     $61 = $60 << 24 >> 24 < 0;
     $64 = $61 ? HEAP32[$47 >> 2] | 0 : $60 & 255;
     if (!$64) {
      $$066 = 1;
      $$1 = $$0;
      $$164 = $50;
     } else if ((HEAP32[$2 >> 2] | 0) == ($59 | 0)) {
      $$066 = 0;
      $$1 = $0;
      $$164 = $$063;
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($57 + -48 | 0, $61 ? HEAP32[$3 >> 2] | 0 : $3, $64) | 0;
      $$066 = 1;
      $$1 = $$0;
      $$164 = $50;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     if ($$066) {
      $$0 = $$1;
      $$063 = $$164;
     } else {
      $$6 = $$1;
      break L1;
     }
    }
    $72 = HEAP32[$19 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($72 | 0)) $$6 = $0; else {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($72 + -24 | 0, 47877) | 0;
     $$6 = $$063 + 1 | 0;
    }
   }
  }
 } else $$6 = $0; else $$6 = $0; else $$6 = $0; while (0);
 STACKTOP = sp;
 return $$6 | 0;
}

function _stbi__process_scan_header($0) {
 $0 = $0 | 0;
 var $1 = 0, $119 = 0, $140 = 0, $15 = 0, $175 = 0, $2 = 0, $3 = 0, $4 = 0, $47 = 0, $5 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$4 >> 2] = _stbi__get16be(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0;
 $15 = (_stbi__get8(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0) & 255;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 18416 >> 2] = $15;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18416 >> 2] | 0) >= 1) if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18416 >> 2] | 0) <= 4) if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18416 >> 2] | 0) <= (HEAP32[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 8 >> 2] | 0)) {
  if ((HEAP32[$4 >> 2] | 0) != (6 + (HEAP32[(HEAP32[$2 >> 2] | 0) + 18416 >> 2] << 1) | 0)) {
   HEAP32[$1 >> 2] = _stbi__err(45482) | 0;
   $175 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $175 | 0;
  }
  HEAP32[$3 >> 2] = 0;
  while (1) {
   $47 = (HEAP32[$3 >> 2] | 0) < (HEAP32[(HEAP32[$2 >> 2] | 0) + 18416 >> 2] | 0);
   $51 = (_stbi__get8(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0) & 255;
   if (!$47) {
    label = 20;
    break;
   }
   HEAP32[$5 >> 2] = $51;
   HEAP32[$7 >> 2] = (_stbi__get8(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0) & 255;
   HEAP32[$6 >> 2] = 0;
   while (1) {
    if ((HEAP32[$6 >> 2] | 0) >= (HEAP32[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 8 >> 2] | 0)) break;
    if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) >> 2] | 0) == (HEAP32[$5 >> 2] | 0)) break;
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
   }
   if ((HEAP32[$6 >> 2] | 0) == (HEAP32[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 8 >> 2] | 0)) {
    label = 14;
    break;
   }
   HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 16 >> 2] = HEAP32[$7 >> 2] >> 4;
   if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) > 3) {
    label = 16;
    break;
   }
   HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 20 >> 2] = HEAP32[$7 >> 2] & 15;
   if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 20 >> 2] | 0) > 3) {
    label = 18;
    break;
   }
   HEAP32[(HEAP32[$2 >> 2] | 0) + 18420 + (HEAP32[$3 >> 2] << 2) >> 2] = HEAP32[$6 >> 2];
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
  }
  if ((label | 0) == 14) {
   HEAP32[$1 >> 2] = 0;
   $175 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $175 | 0;
  } else if ((label | 0) == 16) {
   HEAP32[$1 >> 2] = _stbi__err(45494) | 0;
   $175 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $175 | 0;
  } else if ((label | 0) == 18) {
   HEAP32[$1 >> 2] = _stbi__err(45506) | 0;
   $175 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $175 | 0;
  } else if ((label | 0) == 20) {
   HEAP32[(HEAP32[$2 >> 2] | 0) + 18384 >> 2] = $51;
   $119 = (_stbi__get8(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0) & 255;
   HEAP32[(HEAP32[$2 >> 2] | 0) + 18388 >> 2] = $119;
   HEAP32[$8 >> 2] = (_stbi__get8(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0) & 255;
   HEAP32[(HEAP32[$2 >> 2] | 0) + 18392 >> 2] = HEAP32[$8 >> 2] >> 4;
   HEAP32[(HEAP32[$2 >> 2] | 0) + 18396 >> 2] = HEAP32[$8 >> 2] & 15;
   $140 = HEAP32[(HEAP32[$2 >> 2] | 0) + 18384 >> 2] | 0;
   do if (HEAP32[(HEAP32[$2 >> 2] | 0) + 18380 >> 2] | 0) {
    if (($140 | 0) <= 63) if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18388 >> 2] | 0) <= 63) if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18384 >> 2] | 0) <= (HEAP32[(HEAP32[$2 >> 2] | 0) + 18388 >> 2] | 0)) if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18392 >> 2] | 0) <= 13) if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18396 >> 2] | 0) <= 13) break;
    HEAP32[$1 >> 2] = _stbi__err(45518) | 0;
    $175 = HEAP32[$1 >> 2] | 0;
    STACKTOP = sp;
    return $175 | 0;
   } else {
    if ($140 | 0) {
     HEAP32[$1 >> 2] = _stbi__err(45518) | 0;
     $175 = HEAP32[$1 >> 2] | 0;
     STACKTOP = sp;
     return $175 | 0;
    }
    if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 18392 >> 2] | 0)) if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 18396 >> 2] | 0)) {
     HEAP32[(HEAP32[$2 >> 2] | 0) + 18388 >> 2] = 63;
     break;
    }
    HEAP32[$1 >> 2] = _stbi__err(45518) | 0;
    $175 = HEAP32[$1 >> 2] | 0;
    STACKTOP = sp;
    return $175 | 0;
   } while (0);
   HEAP32[$1 >> 2] = 1;
   $175 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $175 | 0;
  }
 }
 HEAP32[$1 >> 2] = _stbi__err(45458) | 0;
 $175 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $175 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 114) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$24 >> 2] = $32 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9, 0, 48129) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 48126) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $43 = HEAP8[$3 + 11 >> 0] | 0;
     $44 = $43 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7, $44 ? HEAP32[$3 >> 2] | 0 : $3, $44 ? HEAP32[$3 + 4 >> 2] | 0 : $43 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47877) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 100) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$24 >> 2] = $32 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9, 0, 49029) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 48126) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $43 = HEAP8[$3 + 11 >> 0] | 0;
     $44 = $43 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7, $44 ? HEAP32[$3 >> 2] | 0 : $3, $44 ? HEAP32[$3 + 4 >> 2] | 0 : $43 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47877) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$24 >> 2] = $32 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9, 0, 48113) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 48126) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $43 = HEAP8[$3 + 11 >> 0] | 0;
     $44 = $43 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7, $44 ? HEAP32[$3 >> 2] | 0 : $3, $44 ? HEAP32[$3 + 4 >> 2] | 0 : $43 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47877) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$idx$i = 0, $$341 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 99) if ((HEAP8[$0 + 1 >> 0] | 0) == 99) {
  $19 = $0 + 2 | 0;
  $20 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19, $1, $2) | 0;
  if (($20 | 0) == ($19 | 0)) $$341 = $0; else {
   $22 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20, $1, $2) | 0;
   if (($22 | 0) == ($20 | 0)) $$341 = $0; else {
    $24 = $2 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ((($25 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$341 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $25 + -24 | 0);
     $32 = HEAP32[$24 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$24 >> 2] = $32 + -24;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $32 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($9, 0, 49046) | 0;
     HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$9 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 48126) | 0;
     HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$7 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
     $$0$i$i$i47 = 0;
     while (1) {
      if (($$0$i$i$i47 | 0) == 3) break;
      HEAP32[$8 + ($$0$i$i$i47 << 2) >> 2] = 0;
      $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
     }
     $43 = HEAP8[$3 + 11 >> 0] | 0;
     $44 = $43 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7, $44 ? HEAP32[$3 >> 2] | 0 : $3, $44 ? HEAP32[$3 + 4 >> 2] | 0 : $43 & 255) | 0;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $$0$i$i$i50 = 0;
     while (1) {
      if (($$0$i$i$i50 | 0) == 3) break;
      HEAP32[$7 + ($$0$i$i$i50 << 2) >> 2] = 0;
      $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47877) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i53 = 0;
     while (1) {
      if (($$0$i$i$i53 | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i53 << 2) >> 2] = 0;
      $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$24 >> 2] | 0) + -24 | 0, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$341 = $22;
    }
   }
  }
 } else $$341 = $0; else $$341 = $0; else $$341 = $0;
 STACKTOP = sp;
 return $$341 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i56 = 0, $$2 = 0, $$3 = 0, $17 = 0, $18 = 0, $25 = 0, $26 = 0, $3 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 24 | 0;
 $7 = sp;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 102) {
  switch (HEAP8[$0 + 1 >> 0] | 0) {
  case 112:
   {
    $17 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0 + 2 | 0, $1, $3) | 0;
    $18 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($17, $1) | 0;
    if (($18 | 0) == ($1 | 0)) $$0 = $0; else if ((HEAP8[$18 >> 0] | 0) == 95) {
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($6, $17, $18);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 49068) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
     $25 = $2 + 4 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     if ($26 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($26, $4);
      HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     $$0 = $18 + 1 | 0;
    } else $$0 = $0;
    $$3 = $$0;
    break L1;
    break;
   }
  case 76:
   break;
  default:
   {
    $$3 = $0;
    break L1;
   }
  }
  $34 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0 + 2 | 0, $1) | 0;
  if (($34 | 0) == ($1 | 0)) $$2 = $0; else if ((HEAP8[$34 >> 0] | 0) == 112) {
   $39 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($34 + 1 | 0, $1, $3) | 0;
   $40 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($39, $1) | 0;
   if (($40 | 0) == ($1 | 0)) $$2 = $0; else if ((HEAP8[$40 >> 0] | 0) == 95) {
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$6 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($6, $39, $40);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 49068) | 0;
    HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i56 = 0;
    while (1) {
     if (($$0$i$i$i56 | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i56 << 2) >> 2] = 0;
     $$0$i$i$i56 = $$0$i$i$i56 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $7);
    $47 = $2 + 4 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    if ($48 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($48, $4);
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$2 = $40 + 1 | 0;
   } else $$2 = $0;
  } else $$2 = $0;
  $$3 = $$2;
 } else $$3 = $0; else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __sg_validate_apply_bindings($0) {
 $0 = $0 | 0;
 var $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $130 = 0, $133 = 0, $174 = 0, $177 = 0, $2 = 0, $206 = 0, $3 = 0, $4 = 0, $5 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $88 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[$2 >> 2] = $0;
 __sg_validate_begin();
 __sg_validate((HEAP32[539116] | 0) != 0, 62);
 HEAP32[$3 >> 2] = __sg_lookup_pipeline(2156476, HEAP32[539116] | 0) | 0;
 __sg_validate((HEAP32[$3 >> 2] | 0) != 0, 63);
 if (!(HEAP32[$3 >> 2] | 0)) {
  HEAP8[$1 >> 0] = (__sg_validate_end() | 0) & 1;
  $$pre_trunc = HEAP8[$1 >> 0] | 0;
  $206 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $206 | 0;
 }
 __sg_validate((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) == 2, 64);
 if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(36043, 17628, 13664, 36220);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] >> 2] | 0)) ___assert_fail(36043, 17628, 13664, 36220);
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= 8) break;
  $52 = HEAP8[(HEAP32[$3 >> 2] | 0) + 12 + 8 + (HEAP32[$4 >> 2] | 0) >> 0] & 1;
  if (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + (HEAP32[$4 >> 2] << 2) >> 2] | 0) {
   __sg_validate($52, 65);
   HEAP32[$5 >> 2] = __sg_lookup_buffer(2156476, HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + (HEAP32[$4 >> 2] << 2) >> 2] | 0) | 0;
   __sg_validate((HEAP32[$5 >> 2] | 0) != 0, 66);
   if (HEAP32[$5 >> 2] | 0) if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) == 2) {
    __sg_validate(1 == (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 + 12 >> 2] | 0), 67);
    __sg_validate(HEAP8[(HEAP32[$5 >> 2] | 0) + 12 + 8 >> 0] & 1 ^ 1, 68);
   }
  } else __sg_validate($52 ^ 1, 65);
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 $88 = HEAP32[(HEAP32[$2 >> 2] | 0) + 68 >> 2] | 0;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 4 >> 2] | 0) == 1) __sg_validate(($88 | 0) == 0, 70); else __sg_validate(($88 | 0) != 0, 69);
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 68 >> 2] | 0) {
  HEAP32[$6 >> 2] = __sg_lookup_buffer(2156476, HEAP32[(HEAP32[$2 >> 2] | 0) + 68 >> 2] | 0) | 0;
  __sg_validate((HEAP32[$6 >> 2] | 0) != 0, 71);
  if (HEAP32[$6 >> 2] | 0) if ((HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) == 2) {
   __sg_validate(2 == (HEAP32[(HEAP32[$6 >> 2] | 0) + 12 + 12 >> 2] | 0), 72);
   __sg_validate(HEAP8[(HEAP32[$6 >> 2] | 0) + 12 + 8 >> 0] & 1 ^ 1, 73);
  }
 }
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= 12) break;
  HEAP32[$8 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] | 0) + 12;
  $130 = HEAP32[$7 >> 2] | 0;
  $133 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0;
  if (HEAP32[(HEAP32[$2 >> 2] | 0) + 76 + (HEAP32[$7 >> 2] << 2) >> 2] | 0) {
   __sg_validate(($130 | 0) < ($133 | 0), 74);
   HEAP32[$9 >> 2] = __sg_lookup_image(2156476, HEAP32[(HEAP32[$2 >> 2] | 0) + 76 + (HEAP32[$7 >> 2] << 2) >> 2] | 0) | 0;
   __sg_validate((HEAP32[$9 >> 2] | 0) != 0, 75);
   if (HEAP32[$9 >> 2] | 0) if ((HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0) == 2) __sg_validate((HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[$8 >> 2] | 0) + 24 + (HEAP32[$7 >> 2] << 3) >> 2] | 0), 76);
  } else __sg_validate(($130 | 0) >= ($133 | 0), 74);
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if ((HEAP32[$10 >> 2] | 0) >= 12) break;
  HEAP32[$11 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] | 0) + 12 + 120;
  $174 = HEAP32[$10 >> 2] | 0;
  $177 = HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] | 0;
  if (HEAP32[(HEAP32[$2 >> 2] | 0) + 124 + (HEAP32[$10 >> 2] << 2) >> 2] | 0) {
   __sg_validate(($174 | 0) < ($177 | 0), 77);
   HEAP32[$12 >> 2] = __sg_lookup_image(2156476, HEAP32[(HEAP32[$2 >> 2] | 0) + 124 + (HEAP32[$10 >> 2] << 2) >> 2] | 0) | 0;
   __sg_validate((HEAP32[$12 >> 2] | 0) != 0, 78);
   if (HEAP32[$12 >> 2] | 0) if ((HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0) == 2) __sg_validate((HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[$11 >> 2] | 0) + 24 + (HEAP32[$10 >> 2] << 3) >> 2] | 0), 79);
  } else __sg_validate(($174 | 0) >= ($177 | 0), 77);
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
 }
 HEAP8[$1 >> 0] = (__sg_validate_end() | 0) & 1;
 $$pre_trunc = HEAP8[$1 >> 0] | 0;
 $206 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $206 | 0;
}

function _stbtt__tesselate_cubic($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 $11 = $11 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $79 = 0.0, $89 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $12 = sp + 136 | 0;
 $13 = sp + 132 | 0;
 $14 = sp + 128 | 0;
 $15 = sp + 124 | 0;
 $16 = sp + 120 | 0;
 $17 = sp + 116 | 0;
 $18 = sp + 112 | 0;
 $19 = sp + 108 | 0;
 $20 = sp + 104 | 0;
 $21 = sp + 100 | 0;
 $22 = sp + 96 | 0;
 $23 = sp + 92 | 0;
 $24 = sp + 88 | 0;
 $25 = sp + 84 | 0;
 $26 = sp + 80 | 0;
 $27 = sp + 76 | 0;
 $28 = sp + 72 | 0;
 $29 = sp + 68 | 0;
 $30 = sp + 64 | 0;
 $31 = sp + 60 | 0;
 $32 = sp + 56 | 0;
 $33 = sp + 52 | 0;
 $34 = sp + 48 | 0;
 $35 = sp + 44 | 0;
 $36 = sp + 40 | 0;
 $37 = sp + 36 | 0;
 $38 = sp + 32 | 0;
 $39 = sp + 28 | 0;
 $40 = sp + 24 | 0;
 $41 = sp + 20 | 0;
 $42 = sp + 16 | 0;
 $43 = sp + 12 | 0;
 $44 = sp + 8 | 0;
 $45 = sp + 4 | 0;
 $46 = sp;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$13 >> 2] = $1;
 HEAPF32[$14 >> 2] = $2;
 HEAPF32[$15 >> 2] = $3;
 HEAPF32[$16 >> 2] = $4;
 HEAPF32[$17 >> 2] = $5;
 HEAPF32[$18 >> 2] = $6;
 HEAPF32[$19 >> 2] = $7;
 HEAPF32[$20 >> 2] = $8;
 HEAPF32[$21 >> 2] = $9;
 HEAPF32[$22 >> 2] = $10;
 HEAP32[$23 >> 2] = $11;
 HEAPF32[$24 >> 2] = +HEAPF32[$16 >> 2] - +HEAPF32[$14 >> 2];
 HEAPF32[$25 >> 2] = +HEAPF32[$17 >> 2] - +HEAPF32[$15 >> 2];
 HEAPF32[$26 >> 2] = +HEAPF32[$18 >> 2] - +HEAPF32[$16 >> 2];
 HEAPF32[$27 >> 2] = +HEAPF32[$19 >> 2] - +HEAPF32[$17 >> 2];
 HEAPF32[$28 >> 2] = +HEAPF32[$20 >> 2] - +HEAPF32[$18 >> 2];
 HEAPF32[$29 >> 2] = +HEAPF32[$21 >> 2] - +HEAPF32[$19 >> 2];
 HEAPF32[$30 >> 2] = +HEAPF32[$20 >> 2] - +HEAPF32[$14 >> 2];
 HEAPF32[$31 >> 2] = +HEAPF32[$21 >> 2] - +HEAPF32[$15 >> 2];
 $79 = +Math_sqrt(+(+HEAPF32[$24 >> 2] * +HEAPF32[$24 >> 2] + +HEAPF32[$25 >> 2] * +HEAPF32[$25 >> 2]));
 $89 = $79 + +Math_sqrt(+(+HEAPF32[$26 >> 2] * +HEAPF32[$26 >> 2] + +HEAPF32[$27 >> 2] * +HEAPF32[$27 >> 2]));
 HEAPF32[$32 >> 2] = $89 + +Math_sqrt(+(+HEAPF32[$28 >> 2] * +HEAPF32[$28 >> 2] + +HEAPF32[$29 >> 2] * +HEAPF32[$29 >> 2]));
 HEAPF32[$33 >> 2] = +Math_sqrt(+(+HEAPF32[$30 >> 2] * +HEAPF32[$30 >> 2] + +HEAPF32[$31 >> 2] * +HEAPF32[$31 >> 2]));
 HEAPF32[$34 >> 2] = +HEAPF32[$32 >> 2] * +HEAPF32[$32 >> 2] - +HEAPF32[$33 >> 2] * +HEAPF32[$33 >> 2];
 if ((HEAP32[$23 >> 2] | 0) > 16) {
  STACKTOP = sp;
  return;
 }
 if (+HEAPF32[$34 >> 2] > +HEAPF32[$22 >> 2]) {
  HEAPF32[$35 >> 2] = (+HEAPF32[$14 >> 2] + +HEAPF32[$16 >> 2]) / 2.0;
  HEAPF32[$36 >> 2] = (+HEAPF32[$15 >> 2] + +HEAPF32[$17 >> 2]) / 2.0;
  HEAPF32[$37 >> 2] = (+HEAPF32[$16 >> 2] + +HEAPF32[$18 >> 2]) / 2.0;
  HEAPF32[$38 >> 2] = (+HEAPF32[$17 >> 2] + +HEAPF32[$19 >> 2]) / 2.0;
  HEAPF32[$39 >> 2] = (+HEAPF32[$18 >> 2] + +HEAPF32[$20 >> 2]) / 2.0;
  HEAPF32[$40 >> 2] = (+HEAPF32[$19 >> 2] + +HEAPF32[$21 >> 2]) / 2.0;
  HEAPF32[$41 >> 2] = (+HEAPF32[$35 >> 2] + +HEAPF32[$37 >> 2]) / 2.0;
  HEAPF32[$42 >> 2] = (+HEAPF32[$36 >> 2] + +HEAPF32[$38 >> 2]) / 2.0;
  HEAPF32[$43 >> 2] = (+HEAPF32[$37 >> 2] + +HEAPF32[$39 >> 2]) / 2.0;
  HEAPF32[$44 >> 2] = (+HEAPF32[$38 >> 2] + +HEAPF32[$40 >> 2]) / 2.0;
  HEAPF32[$45 >> 2] = (+HEAPF32[$41 >> 2] + +HEAPF32[$43 >> 2]) / 2.0;
  HEAPF32[$46 >> 2] = (+HEAPF32[$42 >> 2] + +HEAPF32[$44 >> 2]) / 2.0;
  _stbtt__tesselate_cubic(HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, +HEAPF32[$14 >> 2], +HEAPF32[$15 >> 2], +HEAPF32[$35 >> 2], +HEAPF32[$36 >> 2], +HEAPF32[$41 >> 2], +HEAPF32[$42 >> 2], +HEAPF32[$45 >> 2], +HEAPF32[$46 >> 2], +HEAPF32[$22 >> 2], (HEAP32[$23 >> 2] | 0) + 1 | 0);
  _stbtt__tesselate_cubic(HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, +HEAPF32[$45 >> 2], +HEAPF32[$46 >> 2], +HEAPF32[$43 >> 2], +HEAPF32[$44 >> 2], +HEAPF32[$39 >> 2], +HEAPF32[$40 >> 2], +HEAPF32[$20 >> 2], +HEAPF32[$21 >> 2], +HEAPF32[$22 >> 2], (HEAP32[$23 >> 2] | 0) + 1 | 0);
  STACKTOP = sp;
  return;
 } else {
  _stbtt__add_point(HEAP32[$12 >> 2] | 0, HEAP32[HEAP32[$13 >> 2] >> 2] | 0, +HEAPF32[$20 >> 2], +HEAPF32[$21 >> 2]);
  HEAP32[HEAP32[$13 >> 2] >> 2] = (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) + 1;
  STACKTOP = sp;
  return;
 }
}

function __sg_setup_pools($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $117 = 0, $146 = 0, $175 = 0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $88 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 28 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(24943, 17628, 12875, 24945);
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(17623, 17628, 12876, 24945);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) <= 0) ___assert_fail(24961, 17628, 12878, 24945);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >= 65536) ___assert_fail(24961, 17628, 12878, 24945);
 __sg_init_pool(HEAP32[$2 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[$4 >> 2] = (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) * 60;
 $30 = _malloc(HEAP32[$4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 96 >> 2] = $30;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 96 >> 2] | 0)) ___assert_fail(25038, 17628, 12882, 24945);
 _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 96 >> 2] | 0, 0, HEAP32[$4 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) <= 0) ___assert_fail(25049, 17628, 12885, 24945);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) >= 65536) ___assert_fail(25049, 17628, 12885, 24945);
 __sg_init_pool((HEAP32[$2 >> 2] | 0) + 16 | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[$5 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0) * 112;
 $59 = _malloc(HEAP32[$5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 100 >> 2] = $59;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 100 >> 2] | 0)) ___assert_fail(25124, 17628, 12889, 24945);
 _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 100 >> 2] | 0, 0, HEAP32[$5 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) <= 0) ___assert_fail(25134, 17628, 12892, 24945);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) >= 65536) ___assert_fail(25134, 17628, 12892, 24945);
 __sg_init_pool((HEAP32[$2 >> 2] | 0) + 32 | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[$6 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0) * 2176;
 $88 = _malloc(HEAP32[$6 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 104 >> 2] = $88;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 104 >> 2] | 0)) ___assert_fail(25211, 17628, 12896, 24945);
 _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 104 >> 2] | 0, 0, HEAP32[$6 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) <= 0) ___assert_fail(25222, 17628, 12899, 24945);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) >= 65536) ___assert_fail(25222, 17628, 12899, 24945);
 __sg_init_pool((HEAP32[$2 >> 2] | 0) + 48 | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0);
 HEAP32[$7 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] | 0) * 472;
 $117 = _malloc(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 108 >> 2] = $117;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 108 >> 2] | 0)) ___assert_fail(25303, 17628, 12903, 24945);
 _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 108 >> 2] | 0, 0, HEAP32[$7 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] | 0) <= 0) ___assert_fail(25316, 17628, 12906, 24945);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] | 0) >= 65536) ___assert_fail(25316, 17628, 12906, 24945);
 __sg_init_pool((HEAP32[$2 >> 2] | 0) + 64 | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] | 0);
 HEAP32[$8 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0) * 120;
 $146 = _malloc(HEAP32[$8 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 112 >> 2] = $146;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 112 >> 2] | 0)) ___assert_fail(25389, 17628, 12910, 24945);
 _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 112 >> 2] | 0, 0, HEAP32[$8 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0) <= 0) ___assert_fail(25399, 17628, 12913, 24945);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0) >= 65536) ___assert_fail(25399, 17628, 12913, 24945);
 __sg_init_pool((HEAP32[$2 >> 2] | 0) + 80 | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0);
 HEAP32[$9 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 80 >> 2] << 4;
 $175 = _malloc(HEAP32[$9 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] = $175;
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0) {
  _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0, 0, HEAP32[$9 >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(25478, 17628, 12917, 24945);
}

function _sgl_setup($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $74 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3904 | 0;
 $1 = sp + 3896 | 0;
 $2 = sp + 3840 | 0;
 $3 = sp + 3832 | 0;
 $4 = sp;
 $5 = sp + 3828 | 0;
 $6 = sp + 2944 | 0;
 $7 = sp + 2936 | 0;
 $8 = sp + 2928 | 0;
 $9 = sp + 828 | 0;
 $10 = sp + 824 | 0;
 $11 = sp + 820 | 0;
 $12 = sp + 264 | 0;
 $13 = sp + 260 | 0;
 $14 = sp + 256 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17623, 19399, 2646, 19467);
 _memset(2157656, 0, 12884) | 0;
 HEAP32[539414] = -1412584499;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[539415] = HEAP32[$17 >> 2];
 HEAP32[539416] = HEAP32[$17 + 4 >> 2];
 HEAP32[539417] = HEAP32[$17 + 8 >> 2];
 HEAP32[539418] = HEAP32[$17 + 12 >> 2];
 HEAP32[539419] = HEAP32[$17 + 16 >> 2];
 HEAP32[539420] = HEAP32[$17 + 20 >> 2];
 HEAP32[539421] = HEAP32[$17 + 24 >> 2];
 HEAP32[539417] = (HEAP32[539417] | 0) == 0 ? 64 : HEAP32[539417] | 0;
 HEAP32[539415] = (HEAP32[539415] | 0) == 0 ? 65536 : HEAP32[539415] | 0;
 HEAP32[539416] = (HEAP32[539416] | 0) == 0 ? 16384 : HEAP32[539416] | 0;
 HEAP32[539421] = (HEAP32[539421] | 0) == 0 ? 1 : HEAP32[539421] | 0;
 HEAP32[539422] = HEAP32[539415];
 HEAP32[539423] = HEAP32[539416];
 HEAP32[539424] = HEAP32[539423];
 HEAP32[539428] = _malloc((HEAP32[539422] | 0) * 24 | 0) | 0;
 if (!(HEAP32[539428] | 0)) ___assert_fail(19477, 19399, 2660, 19467);
 HEAP32[539429] = _malloc(HEAP32[539423] << 7) | 0;
 if (!(HEAP32[539429] | 0)) ___assert_fail(19491, 19399, 2662, 19467);
 HEAP32[539430] = _malloc((HEAP32[539424] | 0) * 24 | 0) | 0;
 if (!(HEAP32[539430] | 0)) ___assert_fail(19505, 19399, 2664, 19467);
 __sgl_setup_pipeline_pool(2157660);
 _sg_push_debug_group(19519);
 dest = $2;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 + 4 >> 2] = (HEAP32[539422] | 0) * 24;
 HEAP32[$2 + 8 >> 2] = 1;
 HEAP32[$2 + 12 >> 2] = 3;
 HEAP32[$2 + 24 >> 2] = 19528;
 HEAP32[$3 >> 2] = _sg_make_buffer($2) | 0;
 HEAP32[539441] = HEAP32[$3 >> 2];
 if (!(HEAP32[539441] | 0)) ___assert_fail(19546, 19399, 2677, 19467);
 HEAP32[$5 >> 2] = 0;
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) >= 64) break;
  HEAP32[$4 + (HEAP32[$5 >> 2] << 2) >> 2] = -1;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 }
 _memset($6 | 0, 0, 884) | 0;
 HEAP32[$6 + 4 >> 2] = 1;
 HEAP32[$6 + 12 >> 2] = 8;
 HEAP32[$6 + 16 >> 2] = 8;
 HEAP32[$6 + 24 >> 2] = 1;
 HEAP32[$6 + 32 >> 2] = 23;
 HEAP32[$6 + 40 >> 2] = 1;
 HEAP32[$6 + 44 >> 2] = 1;
 $74 = $6 + 76 | 0;
 HEAP32[$7 >> 2] = $4;
 HEAP32[$7 + 4 >> 2] = 256;
 HEAP32[$74 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$74 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 844 >> 2] = 19576;
 HEAP32[$8 >> 2] = _sg_make_image($6) | 0;
 HEAP32[539442] = HEAP32[$8 >> 2];
 if (!(HEAP32[539442] | 0)) ___assert_fail(19596, 19399, 2695, 19467);
 HEAP32[539439] = HEAP32[539442];
 _memset($9 | 0, 0, 2100) | 0;
 HEAP32[$9 + 4 >> 2] = 19629;
 HEAP32[$9 + 4 + 12 >> 2] = 41553;
 HEAP32[$9 + 4 + 24 >> 2] = 19638;
 HEAP32[$9 + 4 + 4 >> 2] = 19645;
 HEAP32[$9 + 4 + 8 >> 2] = 0;
 HEAP32[$9 + 4 + 12 + 4 >> 2] = 19645;
 HEAP32[$9 + 4 + 12 + 8 >> 2] = 1;
 HEAP32[$9 + 4 + 24 + 4 >> 2] = 19645;
 HEAP32[$9 + 4 + 24 + 8 >> 2] = 2;
 HEAP32[$10 >> 2] = $9 + 196 + 20;
 HEAP32[HEAP32[$10 >> 2] >> 2] = 128;
 HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] = 41573;
 HEAP32[(HEAP32[$10 >> 2] | 0) + 4 + 4 >> 2] = 4;
 HEAP32[(HEAP32[$10 >> 2] | 0) + 4 + 8 >> 2] = 8;
 HEAP32[$9 + 1144 + 804 >> 2] = 41593;
 HEAP32[$9 + 1144 + 804 + 4 >> 2] = 1;
 HEAP32[$9 + 1144 + 804 + 8 >> 2] = 1;
 HEAP32[$9 + 2092 >> 2] = 19654;
 HEAP32[$9 + 196 >> 2] = 16;
 HEAP32[$9 + 1144 >> 2] = 400;
 HEAP32[$11 >> 2] = _sg_make_shader($9) | 0;
 HEAP32[539443] = HEAP32[$11 >> 2];
 if (!(HEAP32[539443] | 0)) ___assert_fail(19665, 19399, 2752, 19467);
 _memset($12 | 0, 0, 556) | 0;
 HEAP8[$12 + 296 + 8 >> 0] = 1;
 HEAP32[$13 >> 2] = __sgl_make_pipeline($12) | 0;
 HEAP32[539488] = HEAP32[$13 >> 2];
 _sg_pop_debug_group();
 HEAP32[539437] = -1;
 HEAP32[$14 >> 2] = 0;
 while (1) {
  if ((HEAP32[$14 >> 2] | 0) >= 3) break;
  __sgl_identity(2158252 + (HEAP32[$14 >> 2] << 12) | 0);
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
 }
 HEAP32[539495] = HEAP32[539488];
 HEAP8[2157761] = 1;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $13 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $47 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $69 = 0, $76 = 0, $77 = 0, $86 = 0, label = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $58 = HEAP32[$0 + 12 >> 2] | 0;
   $59 = $0 + 16 + ($58 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4);
   $60 = $0 + 24 | 0;
   if (($58 | 0) <= 1) break;
   $63 = HEAP32[$0 + 8 >> 2] | 0;
   if (!($63 & 2)) {
    $66 = $1 + 36 | 0;
    if ((HEAP32[$66 >> 2] | 0) != 1) {
     if (!($63 & 1)) {
      $86 = $1 + 54 | 0;
      $$2 = $60;
      while (1) {
       if (HEAP8[$86 >> 0] | 0) break L1;
       if ((HEAP32[$66 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4);
       $$2 = $$2 + 8 | 0;
       if ($$2 >>> 0 >= $59 >>> 0) break L1;
      }
     }
     $76 = $1 + 24 | 0;
     $77 = $1 + 54 | 0;
     $$1 = $60;
     while (1) {
      if (HEAP8[$77 >> 0] | 0) break L1;
      if ((HEAP32[$66 >> 2] | 0) == 1) if ((HEAP32[$76 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4);
      $$1 = $$1 + 8 | 0;
      if ($$1 >>> 0 >= $59 >>> 0) break L1;
     }
    }
   }
   $69 = $1 + 54 | 0;
   $$0 = $60;
   while (1) {
    if (HEAP8[$69 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4);
    $$0 = $$0 + 8 | 0;
    if ($$0 >>> 0 >= $59 >>> 0) break L1;
   }
  }
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    $19 = $1 + 44 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 4) break;
    $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    $26 = $1 + 52 | 0;
    $27 = $1 + 53 | 0;
    $28 = $1 + 54 | 0;
    $29 = $0 + 8 | 0;
    $30 = $1 + 24 | 0;
    $$081$off0 = 0;
    $$084 = $0 + 16 | 0;
    $$085$off0 = 0;
    L32 : while (1) {
     if ($$084 >>> 0 >= $25 >>> 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     HEAP8[$26 >> 0] = 0;
     HEAP8[$27 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4);
     if (HEAP8[$28 >> 0] | 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     do if (!(HEAP8[$27 >> 0] | 0)) {
      $$182$off0 = $$081$off0;
      $$186$off0 = $$085$off0;
     } else {
      if (!(HEAP8[$26 >> 0] | 0)) if (!(HEAP32[$29 >> 2] & 1)) {
       $$283$off0 = 1;
       label = 18;
       break L32;
      } else {
       $$182$off0 = 1;
       $$186$off0 = $$085$off0;
       break;
      }
      if ((HEAP32[$30 >> 2] | 0) == 1) {
       label = 23;
       break L32;
      }
      if (!(HEAP32[$29 >> 2] & 2)) {
       label = 23;
       break L32;
      } else {
       $$182$off0 = 1;
       $$186$off0 = 1;
      }
     } while (0);
     $$081$off0 = $$182$off0;
     $$084 = $$084 + 8 | 0;
     $$085$off0 = $$186$off0;
    }
    do if ((label | 0) == 18) {
     if (!$$085$off0) {
      HEAP32[$13 >> 2] = $2;
      $47 = $1 + 40 | 0;
      HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$30 >> 2] | 0) == 2) {
       HEAP8[$28 >> 0] = 1;
       if ($$283$off0) {
        label = 23;
        break;
       } else {
        $55 = 4;
        break;
       }
      }
     }
     if ($$283$off0) label = 23; else $55 = 4;
    } while (0);
    if ((label | 0) == 23) $55 = 3;
    HEAP32[$19 >> 2] = $55;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZN7meshoptL17calculateSortDataEPfPKjmPKfmS2_m($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0181198 = 0, $$0182191 = 0.0, $$0183184 = 0, $$0202 = 0, $$sroa$0102$0188 = 0.0, $$sroa$0144$0$lcssa = 0.0, $$sroa$0144$0203 = 0.0, $$sroa$086$0185 = 0.0, $$sroa$10$0186 = 0.0, $$sroa$13$1190 = 0.0, $$sroa$13152$0$lcssa = 0.0, $$sroa$13152$0205 = 0.0, $$sroa$17$1187 = 0.0, $$sroa$8106$0189 = 0.0, $$sroa$8148$0$lcssa = 0.0, $$sroa$8148$0204 = 0.0, $10 = 0.0, $101 = 0.0, $102 = 0.0, $104 = 0.0, $105 = 0.0, $108 = 0.0, $11 = 0.0, $111 = 0.0, $114 = 0.0, $12 = 0.0, $120 = 0.0, $123 = 0.0, $17 = 0, $19 = 0.0, $22 = 0.0, $25 = 0.0, $29 = 0, $31 = 0, $36 = 0, $40 = 0.0, $55 = 0.0, $58 = 0.0, $7 = 0, $74 = 0, $79 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $89 = 0.0, $9 = 0.0, $91 = 0.0, $92 = 0.0, $94 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $$0181198$looptemp = 0;
 $7 = $4 >>> 2;
 if (!$2) {
  $$sroa$0144$0$lcssa = 0.0;
  $$sroa$13152$0$lcssa = 0.0;
  $$sroa$8148$0$lcssa = 0.0;
 } else {
  $$0202 = 0;
  $$sroa$0144$0203 = 0.0;
  $$sroa$13152$0205 = 0.0;
  $$sroa$8148$0204 = 0.0;
  while (1) {
   $17 = $3 + ((Math_imul(HEAP32[$1 + ($$0202 << 2) >> 2] | 0, $7) | 0) << 2) | 0;
   $19 = $$sroa$0144$0203 + +HEAPF32[$17 >> 2];
   $22 = $$sroa$8148$0204 + +HEAPF32[$17 + 4 >> 2];
   $25 = $$sroa$13152$0205 + +HEAPF32[$17 + 8 >> 2];
   $$0202 = $$0202 + 1 | 0;
   if (($$0202 | 0) == ($2 | 0)) {
    $$sroa$0144$0$lcssa = $19;
    $$sroa$13152$0$lcssa = $25;
    $$sroa$8148$0$lcssa = $22;
    break;
   } else {
    $$sroa$0144$0203 = $19;
    $$sroa$13152$0205 = $25;
    $$sroa$8148$0204 = $22;
   }
  }
 }
 $9 = +($2 >>> 0);
 $10 = $$sroa$0144$0$lcssa / $9;
 $11 = $$sroa$8148$0$lcssa / $9;
 $12 = $$sroa$13152$0$lcssa / $9;
 L6 : do if ($6 | 0) {
  $$0181198 = 0;
  while (1) {
   $29 = (HEAP32[$5 + ($$0181198 << 2) >> 2] | 0) * 3 | 0;
   $$0181198$looptemp = $$0181198;
   $$0181198 = $$0181198 + 1 | 0;
   $31 = $$0181198 >>> 0 < $6 >>> 0;
   if ($31) $36 = (HEAP32[$5 + ($$0181198 << 2) >> 2] | 0) * 3 | 0; else $36 = $2;
   if ($29 >>> 0 >= $36 >>> 0) break;
   $$0182191 = 0.0;
   $$0183184 = $29;
   $$sroa$0102$0188 = 0.0;
   $$sroa$086$0185 = 0.0;
   $$sroa$10$0186 = 0.0;
   $$sroa$13$1190 = 0.0;
   $$sroa$17$1187 = 0.0;
   $$sroa$8106$0189 = 0.0;
   do {
    $74 = $3 + ((Math_imul(HEAP32[$1 + ($$0183184 << 2) >> 2] | 0, $7) | 0) << 2) | 0;
    $79 = $3 + ((Math_imul(HEAP32[$1 + ($$0183184 + 1 << 2) >> 2] | 0, $7) | 0) << 2) | 0;
    $84 = $3 + ((Math_imul(HEAP32[$1 + ($$0183184 + 2 << 2) >> 2] | 0, $7) | 0) << 2) | 0;
    $85 = +HEAPF32[$79 >> 2];
    $86 = +HEAPF32[$74 >> 2];
    $87 = $85 - $86;
    $89 = +HEAPF32[$79 + 4 >> 2];
    $91 = +HEAPF32[$74 + 4 >> 2];
    $92 = $89 - $91;
    $94 = +HEAPF32[$79 + 8 >> 2];
    $96 = +HEAPF32[$74 + 8 >> 2];
    $97 = $94 - $96;
    $98 = +HEAPF32[$84 >> 2];
    $99 = $98 - $86;
    $101 = +HEAPF32[$84 + 4 >> 2];
    $102 = $101 - $91;
    $104 = +HEAPF32[$84 + 8 >> 2];
    $105 = $104 - $96;
    $108 = $92 * $105 - $97 * $102;
    $111 = $97 * $99 - $87 * $105;
    $114 = $87 * $102 - $92 * $99;
    $120 = +Math_sqrt(+($114 * $114 + ($108 * $108 + $111 * $111)));
    $123 = $120 / 3.0;
    $$sroa$0102$0188 = $$sroa$0102$0188 + ($85 + $86 + $98) * $123;
    $$sroa$8106$0189 = $$sroa$8106$0189 + ($89 + $91 + $101) * $123;
    $$sroa$13$1190 = $$sroa$13$1190 + ($94 + $96 + $104) * $123;
    $$sroa$086$0185 = $$sroa$086$0185 + $108;
    $$sroa$10$0186 = $$sroa$10$0186 + $111;
    $$sroa$17$1187 = $$sroa$17$1187 + $114;
    $$0182191 = $$0182191 + $120;
    $$0183184 = $$0183184 + 3 | 0;
   } while ($$0183184 >>> 0 < $36 >>> 0);
   $40 = $$0182191 == 0.0 ? 0.0 : 1.0 / $$0182191;
   $55 = +Math_sqrt(+($$sroa$086$0185 * $$sroa$086$0185 + $$sroa$10$0186 * $$sroa$10$0186 + $$sroa$17$1187 * $$sroa$17$1187));
   $58 = $55 == 0.0 ? 0.0 : 1.0 / $55;
   HEAPF32[$0 + ($$0181198$looptemp << 2) >> 2] = $$sroa$17$1187 * $58 * ($$sroa$13$1190 * $40 - $12) + ($$sroa$086$0185 * $58 * ($$sroa$0102$0188 * $40 - $10) + $$sroa$10$0186 * $58 * ($$sroa$8106$0189 * $40 - $11));
   if (!$31) break L6;
  }
  ___assert_fail(42291, 42048, 36, 42507);
 } while (0);
 return;
}

function _stbi__jpeg_decode_block($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $133 = 0, $14 = 0, $140 = 0, $147 = 0, $15 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $41 = 0, $61 = 0, $7 = 0, $8 = 0, $89 = 0, $9 = 0, $94 = 0, $97 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $7 = sp + 64 | 0;
 $8 = sp + 60 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $14 = sp + 36 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $21 = sp + 8 | 0;
 $22 = sp + 4 | 0;
 $23 = sp;
 HEAP32[$8 >> 2] = $0;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAP32[$13 >> 2] = $5;
 HEAP32[$14 >> 2] = $6;
 if ((HEAP32[(HEAP32[$8 >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$8 >> 2] | 0);
 HEAP32[$18 >> 2] = _stbi__jpeg_huff_decode(HEAP32[$8 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0;
 if ((HEAP32[$18 >> 2] | 0) < 0) {
  HEAP32[$7 >> 2] = _stbi__err(44717) | 0;
  $153 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $153 | 0;
 }
 dest = HEAP32[$9 >> 2] | 0;
 stop = dest + 128 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 if (HEAP32[$18 >> 2] | 0) $41 = _stbi__extend_receive(HEAP32[$8 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0; else $41 = 0;
 HEAP32[$15 >> 2] = $41;
 HEAP32[$16 >> 2] = (HEAP32[(HEAP32[$8 >> 2] | 0) + 18076 + ((HEAP32[$13 >> 2] | 0) * 72 | 0) + 24 >> 2] | 0) + (HEAP32[$15 >> 2] | 0);
 HEAP32[(HEAP32[$8 >> 2] | 0) + 18076 + ((HEAP32[$13 >> 2] | 0) * 72 | 0) + 24 >> 2] = HEAP32[$16 >> 2];
 $61 = (Math_imul(HEAP32[$16 >> 2] | 0, HEAPU16[HEAP32[$14 >> 2] >> 1] | 0) | 0) & 65535;
 HEAP16[HEAP32[$9 >> 2] >> 1] = $61;
 HEAP32[$17 >> 2] = 1;
 L11 : while (1) {
  if ((HEAP32[(HEAP32[$8 >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$8 >> 2] | 0);
  HEAP32[$20 >> 2] = (HEAP32[(HEAP32[$8 >> 2] | 0) + 18364 >> 2] | 0) >>> 23 & 511;
  HEAP32[$21 >> 2] = HEAP16[(HEAP32[$12 >> 2] | 0) + (HEAP32[$20 >> 2] << 1) >> 1];
  do if (HEAP32[$21 >> 2] | 0) {
   HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + (HEAP32[$21 >> 2] >> 4 & 15);
   HEAP32[$22 >> 2] = HEAP32[$21 >> 2] & 15;
   $89 = (HEAP32[$8 >> 2] | 0) + 18364 | 0;
   HEAP32[$89 >> 2] = HEAP32[$89 >> 2] << HEAP32[$22 >> 2];
   $94 = (HEAP32[$8 >> 2] | 0) + 18368 | 0;
   HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) - (HEAP32[$22 >> 2] | 0);
   $97 = HEAP32[$17 >> 2] | 0;
   HEAP32[$17 >> 2] = $97 + 1;
   HEAP32[$19 >> 2] = HEAPU8[9680 + $97 >> 0];
   $110 = (Math_imul(HEAP32[$21 >> 2] >> 8, HEAPU16[(HEAP32[$14 >> 2] | 0) + (HEAP32[$19 >> 2] << 1) >> 1] | 0) | 0) & 65535;
   HEAP16[(HEAP32[$9 >> 2] | 0) + (HEAP32[$19 >> 2] << 1) >> 1] = $110;
  } else {
   HEAP32[$23 >> 2] = _stbi__jpeg_huff_decode(HEAP32[$8 >> 2] | 0, HEAP32[$11 >> 2] | 0) | 0;
   if ((HEAP32[$23 >> 2] | 0) < 0) {
    label = 13;
    break L11;
   }
   HEAP32[$22 >> 2] = HEAP32[$23 >> 2] & 15;
   HEAP32[$21 >> 2] = HEAP32[$23 >> 2] >> 4;
   if (HEAP32[$22 >> 2] | 0) {
    HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + (HEAP32[$21 >> 2] | 0);
    $133 = HEAP32[$17 >> 2] | 0;
    HEAP32[$17 >> 2] = $133 + 1;
    HEAP32[$19 >> 2] = HEAPU8[9680 + $133 >> 0];
    $140 = _stbi__extend_receive(HEAP32[$8 >> 2] | 0, HEAP32[$22 >> 2] | 0) | 0;
    $147 = (Math_imul($140, HEAPU16[(HEAP32[$14 >> 2] | 0) + (HEAP32[$19 >> 2] << 1) >> 1] | 0) | 0) & 65535;
    HEAP16[(HEAP32[$9 >> 2] | 0) + (HEAP32[$19 >> 2] << 1) >> 1] = $147;
    break;
   }
   if ((HEAP32[$23 >> 2] | 0) != 240) {
    label = 19;
    break L11;
   }
   HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 16;
  } while (0);
  if ((HEAP32[$17 >> 2] | 0) >= 64) {
   label = 19;
   break;
  }
 }
 if ((label | 0) == 13) {
  HEAP32[$7 >> 2] = _stbi__err(44717) | 0;
  $153 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $153 | 0;
 } else if ((label | 0) == 19) {
  HEAP32[$7 >> 2] = 1;
  $153 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $153 | 0;
 }
 return 0;
}

function __ZN2Dr10FillBorderER8DrBitmap7DrColor6DrRect($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03843 = 0, $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $38 = 0, $4 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $tmpcast$byval_copy = sp + 160 | 0;
 $3 = sp + 104 | 0;
 $4 = sp + 100 | 0;
 $5 = sp + 156 | 0;
 $6 = sp + 120 | 0;
 $7 = sp + 96 | 0;
 $8 = sp + 152 | 0;
 $9 = sp + 72 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 148 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 32 | 0;
 $14 = sp + 144 | 0;
 $15 = sp + 8 | 0;
 $16 = sp;
 __ZN6DrRectC2Ev($3);
 $17 = __ZN6DrRect3topEv($2) | 0;
 $18 = __ZN6DrRect6bottomEv($2) | 0;
 $19 = __ZN6DrRect4leftEv($2) | 0;
 $20 = __ZN6DrRect4leftEv($2) | 0;
 $21 = $2 + 8 | 0;
 if (($19 | 0) < ((HEAP32[$21 >> 2] | 0) + $20 | 0)) {
  $25 = HEAPU8[$1 >> 0] | HEAPU8[$1 + 1 >> 0] << 8 | HEAPU8[$1 + 2 >> 0] << 16 | HEAPU8[$1 + 3 >> 0] << 24;
  $$03843 = $19;
  do {
   __ZNK8DrBitmap8getPixelEii($5, $0, $$03843, $17);
   __ZN7DrColorC2Ej($tmpcast$byval_copy, 0);
   if (__ZNK7DrColoreqERKS_($5, $tmpcast$byval_copy) | 0) {
    HEAP32[$7 >> 2] = $25;
    HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$7 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
    __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($6, $0, $$03843, $17, $tmpcast$byval_copy, .001, 0, $4, $3);
    __ZN8DrBitmapD2Ev($6);
   }
   __ZNK8DrBitmap8getPixelEii($8, $0, $$03843, $18);
   __ZN7DrColorC2Ej($tmpcast$byval_copy, 0);
   if (__ZNK7DrColoreqERKS_($8, $tmpcast$byval_copy) | 0) {
    HEAP32[$10 >> 2] = $25;
    HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$10 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$10 + 2 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$10 + 3 >> 0] | 0;
    __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($9, $0, $$03843, $18, $tmpcast$byval_copy, .001, 0, $4, $3);
    __ZN8DrBitmapD2Ev($9);
   }
   $$03843 = $$03843 + 1 | 0;
   $38 = __ZN6DrRect4leftEv($2) | 0;
  } while (($$03843 | 0) < ((HEAP32[$21 >> 2] | 0) + $38 | 0));
 }
 $26 = __ZN6DrRect4leftEv($2) | 0;
 $27 = __ZN6DrRect5rightEv($2) | 0;
 $28 = __ZN6DrRect3topEv($2) | 0;
 $29 = __ZN6DrRect3topEv($2) | 0;
 $30 = $2 + 12 | 0;
 if (($28 | 0) < ((HEAP32[$30 >> 2] | 0) + $29 | 0)) {
  $34 = HEAPU8[$1 >> 0] | HEAPU8[$1 + 1 >> 0] << 8 | HEAPU8[$1 + 2 >> 0] << 16 | HEAPU8[$1 + 3 >> 0] << 24;
  $$042 = $28;
  do {
   __ZNK8DrBitmap8getPixelEii($11, $0, $26, $$042);
   __ZN7DrColorC2Ej($tmpcast$byval_copy, 0);
   if (__ZNK7DrColoreqERKS_($11, $tmpcast$byval_copy) | 0) {
    HEAP32[$13 >> 2] = $34;
    HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$13 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$13 + 1 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$13 + 2 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$13 + 3 >> 0] | 0;
    __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($12, $0, $26, $$042, $tmpcast$byval_copy, .001, 0, $4, $3);
    __ZN8DrBitmapD2Ev($12);
   }
   __ZNK8DrBitmap8getPixelEii($14, $0, $27, $$042);
   __ZN7DrColorC2Ej($tmpcast$byval_copy, 0);
   if (__ZNK7DrColoreqERKS_($14, $tmpcast$byval_copy) | 0) {
    HEAP32[$16 >> 2] = $34;
    HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$16 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$16 + 1 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$16 + 2 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$16 + 3 >> 0] | 0;
    __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($15, $0, $27, $$042, $tmpcast$byval_copy, .001, 0, $4, $3);
    __ZN8DrBitmapD2Ev($15);
   }
   $$042 = $$042 + 1 | 0;
   $45 = __ZN6DrRect3topEv($2) | 0;
  } while (($$042 | 0) < ((HEAP32[$30 >> 2] | 0) + $45 | 0));
 }
 STACKTOP = sp;
 return;
}

function _stbi__load_main($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $106 = 0, $11 = 0, $118 = 0, $12 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $24 = 0, $25 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $51 = 0, $52 = 0, $60 = 0, $61 = 0, $7 = 0, $70 = 0, $71 = 0, $79 = 0, $8 = 0, $80 = 0, $88 = 0, $89 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$8 >> 2] = $0;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAP32[$13 >> 2] = $5;
 HEAP32[$14 >> 2] = $6;
 $16 = HEAP32[$13 >> 2] | 0;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$16 + 4 >> 2] = 0;
 HEAP32[$16 + 8 >> 2] = 0;
 HEAP32[HEAP32[$13 >> 2] >> 2] = 8;
 HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] = 0;
 $24 = (_stbi__jpeg_test(HEAP32[$8 >> 2] | 0) | 0) != 0;
 $25 = HEAP32[$8 >> 2] | 0;
 if ($24) {
  HEAP32[$7 >> 2] = _stbi__jpeg_load($25, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 $33 = (_stbi__png_test($25) | 0) != 0;
 $34 = HEAP32[$8 >> 2] | 0;
 if ($33) {
  HEAP32[$7 >> 2] = _stbi__png_load($34, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 $42 = (_stbi__bmp_test($34) | 0) != 0;
 $43 = HEAP32[$8 >> 2] | 0;
 if ($42) {
  HEAP32[$7 >> 2] = _stbi__bmp_load($43, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 $51 = (_stbi__gif_test($43) | 0) != 0;
 $52 = HEAP32[$8 >> 2] | 0;
 if ($51) {
  HEAP32[$7 >> 2] = _stbi__gif_load($52, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 $60 = (_stbi__psd_test($52) | 0) != 0;
 $61 = HEAP32[$8 >> 2] | 0;
 if ($60) {
  HEAP32[$7 >> 2] = _stbi__psd_load($61, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0) | 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 $70 = (_stbi__pic_test($61) | 0) != 0;
 $71 = HEAP32[$8 >> 2] | 0;
 if ($70) {
  HEAP32[$7 >> 2] = _stbi__pic_load($71, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 $79 = (_stbi__pnm_test($71) | 0) != 0;
 $80 = HEAP32[$8 >> 2] | 0;
 if ($79) {
  HEAP32[$7 >> 2] = _stbi__pnm_load($80, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 $88 = (_stbi__hdr_test($80) | 0) != 0;
 $89 = HEAP32[$8 >> 2] | 0;
 if ($88) {
  HEAP32[$15 >> 2] = _stbi__hdr_load($89, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
  if (HEAP32[$12 >> 2] | 0) $106 = HEAP32[$12 >> 2] | 0; else $106 = HEAP32[HEAP32[$11 >> 2] >> 2] | 0;
  HEAP32[$7 >> 2] = _stbi__hdr_to_ldr(HEAP32[$15 >> 2] | 0, HEAP32[HEAP32[$9 >> 2] >> 2] | 0, HEAP32[HEAP32[$10 >> 2] >> 2] | 0, $106) | 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 } else if (_stbi__tga_test($89) | 0) {
  HEAP32[$7 >> 2] = _stbi__tga_load(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 } else {
  $118 = (_stbi__err(43499) | 0) != 0;
  HEAP32[$7 >> 2] = $118 ? 0 : 0;
  $122 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $122 | 0;
 }
 return 0;
}

function _stbi__parse_huffman_block($0) {
 $0 = $0 | 0;
 var $1 = 0, $113 = 0, $114 = 0, $117 = 0, $121 = 0, $123 = 0, $124 = 0, $127 = 0, $129 = 0, $18 = 0, $2 = 0, $3 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $7 = 0, $75 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 $8 = sp + 28 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2];
 L1 : while (1) {
  HEAP32[$4 >> 2] = _stbi__zhuffman_decode(HEAP32[$2 >> 2] | 0, (HEAP32[$2 >> 2] | 0) + 32 | 0) | 0;
  $18 = HEAP32[$4 >> 2] | 0;
  do if ((HEAP32[$4 >> 2] | 0) < 256) {
   if (($18 | 0) < 0) {
    label = 4;
    break L1;
   }
   if ((HEAP32[$3 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
    if (!(_stbi__zexpand(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, 1) | 0)) {
     label = 7;
     break L1;
    }
    HEAP32[$3 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2];
   }
   $34 = HEAP32[$4 >> 2] & 255;
   $35 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = $35 + 1;
   HEAP8[$35 >> 0] = $34;
  } else {
   if (($18 | 0) == 256) {
    label = 11;
    break L1;
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) - 257;
   HEAP32[$6 >> 2] = HEAP32[9136 + (HEAP32[$4 >> 2] << 2) >> 2];
   if (HEAP32[9264 + (HEAP32[$4 >> 2] << 2) >> 2] | 0) {
    $54 = _stbi__zreceive(HEAP32[$2 >> 2] | 0, HEAP32[9264 + (HEAP32[$4 >> 2] << 2) >> 2] | 0) | 0;
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $54;
   }
   HEAP32[$4 >> 2] = _stbi__zhuffman_decode(HEAP32[$2 >> 2] | 0, (HEAP32[$2 >> 2] | 0) + 2052 | 0) | 0;
   if ((HEAP32[$4 >> 2] | 0) < 0) {
    label = 15;
    break L1;
   }
   HEAP32[$7 >> 2] = HEAP32[9392 + (HEAP32[$4 >> 2] << 2) >> 2];
   if (HEAP32[9520 + (HEAP32[$4 >> 2] << 2) >> 2] | 0) {
    $75 = _stbi__zreceive(HEAP32[$2 >> 2] | 0, HEAP32[9520 + (HEAP32[$4 >> 2] << 2) >> 2] | 0) | 0;
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + $75;
   }
   if (((HEAP32[$3 >> 2] | 0) - (HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0) | 0) < (HEAP32[$7 >> 2] | 0)) {
    label = 19;
    break L1;
   }
   if (((HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
    if (!(_stbi__zexpand(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0)) {
     label = 22;
     break L1;
    }
    HEAP32[$3 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2];
   }
   HEAP32[$5 >> 2] = (HEAP32[$3 >> 2] | 0) + (0 - (HEAP32[$7 >> 2] | 0));
   if ((HEAP32[$7 >> 2] | 0) == 1) {
    HEAP8[$8 >> 0] = HEAP8[HEAP32[$5 >> 2] >> 0] | 0;
    if (!(HEAP32[$6 >> 2] | 0)) break;
    do {
     $113 = HEAP8[$8 >> 0] | 0;
     $114 = HEAP32[$3 >> 2] | 0;
     HEAP32[$3 >> 2] = $114 + 1;
     HEAP8[$114 >> 0] = $113;
     $117 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     HEAP32[$6 >> 2] = $117;
    } while (($117 | 0) != 0);
   } else {
    if (!(HEAP32[$6 >> 2] | 0)) break;
    do {
     $121 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $121 + 1;
     $123 = HEAP8[$121 >> 0] | 0;
     $124 = HEAP32[$3 >> 2] | 0;
     HEAP32[$3 >> 2] = $124 + 1;
     HEAP8[$124 >> 0] = $123;
     $127 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     HEAP32[$6 >> 2] = $127;
    } while (($127 | 0) != 0);
   }
  } while (0);
 }
 if ((label | 0) == 4) {
  HEAP32[$1 >> 2] = _stbi__err(44717) | 0;
  $129 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 } else if ((label | 0) == 7) {
  HEAP32[$1 >> 2] = 0;
  $129 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 } else if ((label | 0) == 11) {
  HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 >> 2] = 1;
  $129 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 } else if ((label | 0) == 15) {
  HEAP32[$1 >> 2] = _stbi__err(44717) | 0;
  $129 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 } else if ((label | 0) == 19) {
  HEAP32[$1 >> 2] = _stbi__err(44734) | 0;
  $129 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 } else if ((label | 0) == 22) {
  HEAP32[$1 >> 2] = 0;
  $129 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 }
 return 0;
}

function __sg_gl_begin_pass($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 53 | 0;
 $10 = sp + 24 | 0;
 $11 = sp + 52 | 0;
 $12 = sp + 51 | 0;
 $13 = sp + 50 | 0;
 $14 = sp + 49 | 0;
 $15 = sp + 20 | 0;
 $16 = sp + 48 | 0;
 $17 = sp + 16 | 0;
 $18 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 if (!(HEAP32[$5 >> 2] | 0)) ___assert_fail(35742, 17628, 6369, 35749);
 if (HEAP8[2157010] & 1) ___assert_fail(35767, 17628, 6370, 35749);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6371, 35749);
 HEAP8[2157010] = 1;
 HEAP32[539256] = HEAP32[$4 >> 2];
 if (HEAP32[$4 >> 2] | 0) HEAP32[539257] = HEAP32[HEAP32[$4 >> 2] >> 2]; else HEAP32[539257] = 0;
 HEAP32[539253] = HEAP32[$6 >> 2];
 HEAP32[539254] = HEAP32[$7 >> 2];
 if (HEAP32[$4 >> 2] | 0) $37 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; else $37 = 1;
 HEAP32[$8 >> 2] = $37;
 do if (HEAP32[$4 >> 2] | 0) if (HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0) {
  _glBindFramebuffer(36160, HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0);
  break;
 } else ___assert_fail(35783, 17628, 6389, 35749); else if (HEAP32[539255] | 0) {
  _glBindFramebuffer(36160, HEAP32[(HEAP32[539255] | 0) + 12 >> 2] | 0);
  break;
 } else ___assert_fail(35795, 17628, 6394, 35749); while (0);
 _glViewport(0, 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0);
 _glScissor(0, 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0);
 HEAP8[$9 >> 0] = 0;
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if ((HEAP32[$10 >> 2] | 0) >= (HEAP32[$8 >> 2] | 0)) break;
  if (1 == (HEAP32[(HEAP32[$5 >> 2] | 0) + 4 + ((HEAP32[$10 >> 2] | 0) * 20 | 0) >> 2] | 0)) {
   label = 22;
   break;
  }
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
 }
 if ((label | 0) == 22) HEAP8[$9 >> 0] = 1;
 HEAP8[$11 >> 0] = (HEAP32[(HEAP32[$5 >> 2] | 0) + 84 >> 2] | 0) == 1 & 1;
 HEAP8[$12 >> 0] = (HEAP32[(HEAP32[$5 >> 2] | 0) + 92 >> 2] | 0) == 1 & 1;
 HEAP8[$13 >> 0] = 0;
 if (HEAP8[$9 >> 0] & 1) {
  HEAP8[$14 >> 0] = 0;
  HEAP32[$15 >> 2] = 0;
  while (1) {
   if ((HEAP32[$15 >> 2] | 0) >= 4) break;
   if (15 != (HEAP32[2157124 + (HEAP32[$15 >> 2] << 2) >> 2] | 0)) {
    HEAP8[$13 >> 0] = 1;
    HEAP8[$14 >> 0] = 1;
    HEAP32[2157124 + (HEAP32[$15 >> 2] << 2) >> 2] = 15;
   }
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
  }
  if (HEAP8[$14 >> 0] & 1) _glColorMask(1, 1, 1, 1);
 }
 if (HEAP8[$11 >> 0] & 1) {
  if (!(HEAP8[2157040] & 1)) {
   HEAP8[$13 >> 0] = 1;
   HEAP8[2157040] = 1;
   _glDepthMask(1);
  }
  if ((HEAP32[539259] | 0) != 8) {
   HEAP8[$13 >> 0] = 1;
   HEAP32[539259] = 8;
   _glDepthFunc(519);
  }
 }
 if (HEAP8[$12 >> 0] & 1) if ((HEAPU8[2157093] | 0 | 0) != 255) {
  HEAP8[$13 >> 0] = 1;
  HEAP8[2157093] = -1;
  _glStencilMask(255);
 }
 if (HEAP8[$13 >> 0] & 1) {
  HEAP32[539409] = 0;
  HEAP32[539410] = 0;
 }
 HEAP8[$16 >> 0] = 0 != (HEAP32[$4 >> 2] | 0) & 1;
 HEAP8[$16 >> 0] = 0;
 if (!(HEAP8[$16 >> 0] & 1)) {
  HEAP32[$17 >> 2] = 0;
  if (HEAP8[$9 >> 0] & 1) {
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 16384;
   $115 = (HEAP32[$5 >> 2] | 0) + 4 + 4 | 0;
   HEAP32[$18 >> 2] = HEAP32[$115 >> 2];
   HEAP32[$18 + 4 >> 2] = HEAP32[$115 + 4 >> 2];
   HEAP32[$18 + 8 >> 2] = HEAP32[$115 + 8 >> 2];
   HEAP32[$18 + 12 >> 2] = HEAP32[$115 + 12 >> 2];
   _glClearColor(+(+HEAPF32[$18 >> 2]), +(+HEAPF32[$18 + 4 >> 2]), +(+HEAPF32[$18 + 8 >> 2]), +(+HEAPF32[$18 + 12 >> 2]));
  }
  if (HEAP8[$11 >> 0] & 1) {
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 256;
   _glClearDepthf(+(+HEAPF32[(HEAP32[$5 >> 2] | 0) + 84 + 4 >> 2]));
  }
  if (HEAP8[$12 >> 0] & 1) {
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 1024;
   _glClearStencil(HEAPU8[(HEAP32[$5 >> 2] | 0) + 92 + 4 >> 0] | 0 | 0);
  }
  if (HEAP32[$17 >> 2] | 0) _glClear(HEAP32[$17 >> 2] | 0);
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(25839, 17628, 6504, 35749);
}

function _stbi__compute_huffman_codes($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2560 | 0;
 $1 = sp + 2544 | 0;
 $2 = sp + 2540 | 0;
 $3 = sp + 520 | 0;
 $4 = sp + 32 | 0;
 $5 = sp;
 $6 = sp + 516 | 0;
 $7 = sp + 512 | 0;
 $8 = sp + 508 | 0;
 $9 = sp + 504 | 0;
 $10 = sp + 500 | 0;
 $11 = sp + 496 | 0;
 $12 = sp + 492 | 0;
 $13 = sp + 488 | 0;
 $14 = sp + 2548 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$8 >> 2] = (_stbi__zreceive(HEAP32[$2 >> 2] | 0, 5) | 0) + 257;
 HEAP32[$9 >> 2] = (_stbi__zreceive(HEAP32[$2 >> 2] | 0, 5) | 0) + 1;
 HEAP32[$10 >> 2] = (_stbi__zreceive(HEAP32[$2 >> 2] | 0, 4) | 0) + 4;
 HEAP32[$11 >> 2] = (HEAP32[$8 >> 2] | 0) + (HEAP32[$9 >> 2] | 0);
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP16[$5 + 16 >> 1] = 0;
 HEAP8[$5 + 18 >> 0] = 0;
 HEAP32[$6 >> 2] = 0;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= (HEAP32[$10 >> 2] | 0)) break;
  HEAP32[$12 >> 2] = _stbi__zreceive(HEAP32[$2 >> 2] | 0, 3) | 0;
  HEAP8[$5 + (HEAPU8[9648 + (HEAP32[$6 >> 2] | 0) >> 0] | 0) >> 0] = HEAP32[$12 >> 2];
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 if (!(_stbi__zbuild_huffman($3, $5, 19) | 0)) {
  HEAP32[$1 >> 2] = 0;
  $113 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $113 | 0;
 }
 HEAP32[$7 >> 2] = 0;
 L9 : while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= (HEAP32[$11 >> 2] | 0)) {
   label = 25;
   break;
  }
  HEAP32[$13 >> 2] = _stbi__zhuffman_decode(HEAP32[$2 >> 2] | 0, $3) | 0;
  if ((HEAP32[$13 >> 2] | 0) < 0 | (HEAP32[$13 >> 2] | 0) >= 19) {
   label = 9;
   break;
  }
  if ((HEAP32[$13 >> 2] | 0) < 16) {
   $56 = HEAP32[$13 >> 2] & 255;
   $57 = HEAP32[$7 >> 2] | 0;
   HEAP32[$7 >> 2] = $57 + 1;
   HEAP8[$4 + $57 >> 0] = $56;
  } else {
   HEAP8[$14 >> 0] = 0;
   do if ((HEAP32[$13 >> 2] | 0) == 16) {
    HEAP32[$13 >> 2] = (_stbi__zreceive(HEAP32[$2 >> 2] | 0, 2) | 0) + 3;
    if (!(HEAP32[$7 >> 2] | 0)) {
     label = 14;
     break L9;
    }
    HEAP8[$14 >> 0] = HEAP8[$4 + ((HEAP32[$7 >> 2] | 0) - 1) >> 0] | 0;
   } else {
    if ((HEAP32[$13 >> 2] | 0) == 17) {
     HEAP32[$13 >> 2] = (_stbi__zreceive(HEAP32[$2 >> 2] | 0, 3) | 0) + 3;
     break;
    }
    if ((HEAP32[$13 >> 2] | 0) != 18) {
     label = 19;
     break L9;
    }
    HEAP32[$13 >> 2] = (_stbi__zreceive(HEAP32[$2 >> 2] | 0, 7) | 0) + 11;
   } while (0);
   if (((HEAP32[$11 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0) < (HEAP32[$13 >> 2] | 0)) {
    label = 22;
    break;
   }
   _memset($4 + (HEAP32[$7 >> 2] | 0) | 0, (HEAPU8[$14 >> 0] | 0) & 255 | 0, HEAP32[$13 >> 2] | 0) | 0;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$13 >> 2] | 0);
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$1 >> 2] = _stbi__err(44892) | 0;
  $113 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $113 | 0;
 } else if ((label | 0) == 14) {
  HEAP32[$1 >> 2] = _stbi__err(44892) | 0;
  $113 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $113 | 0;
 } else if ((label | 0) == 19) ___assert_fail(44908, 43392, 4121, 44916); else if ((label | 0) == 22) {
  HEAP32[$1 >> 2] = _stbi__err(44892) | 0;
  $113 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $113 | 0;
 } else if ((label | 0) == 25) {
  if ((HEAP32[$7 >> 2] | 0) != (HEAP32[$11 >> 2] | 0)) {
   HEAP32[$1 >> 2] = _stbi__err(44892) | 0;
   $113 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $113 | 0;
  }
  if (!(_stbi__zbuild_huffman((HEAP32[$2 >> 2] | 0) + 32 | 0, $4, HEAP32[$8 >> 2] | 0) | 0)) {
   HEAP32[$1 >> 2] = 0;
   $113 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $113 | 0;
  }
  if (_stbi__zbuild_huffman((HEAP32[$2 >> 2] | 0) + 2052 | 0, $4 + (HEAP32[$8 >> 2] | 0) | 0, HEAP32[$9 >> 2] | 0) | 0) {
   HEAP32[$1 >> 2] = 1;
   $113 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $113 | 0;
  } else {
   HEAP32[$1 >> 2] = 0;
   $113 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $113 | 0;
  }
 }
 return 0;
}

function _stbi__zbuild_huffman($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $155 = 0, $160 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $3 = sp + 180 | 0;
 $4 = sp + 176 | 0;
 $5 = sp + 172 | 0;
 $6 = sp + 168 | 0;
 $7 = sp + 164 | 0;
 $8 = sp + 160 | 0;
 $9 = sp + 156 | 0;
 $10 = sp + 80 | 0;
 $11 = sp;
 $12 = sp + 152 | 0;
 $13 = sp + 148 | 0;
 $14 = sp + 184 | 0;
 $15 = sp + 144 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$8 >> 2] = 0;
 dest = $11;
 stop = dest + 68 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _memset(HEAP32[$4 >> 2] | 0, 0, 1024) | 0;
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
  $25 = $11 + ((HEAPU8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) >> 0] | 0) << 2) | 0;
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 HEAP32[$11 >> 2] = 0;
 HEAP32[$7 >> 2] = 1;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= 16) break;
  if ((HEAP32[$11 + (HEAP32[$7 >> 2] << 2) >> 2] | 0) > (1 << HEAP32[$7 >> 2] | 0)) {
   label = 7;
   break;
  }
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  HEAP32[$3 >> 2] = _stbi__err(44944) | 0;
  $160 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $160 | 0;
 }
 HEAP32[$9 >> 2] = 0;
 HEAP32[$7 >> 2] = 1;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= 16) break;
  HEAP32[$10 + (HEAP32[$7 >> 2] << 2) >> 2] = HEAP32[$9 >> 2];
  HEAP16[(HEAP32[$4 >> 2] | 0) + 1024 + (HEAP32[$7 >> 2] << 1) >> 1] = HEAP32[$9 >> 2];
  HEAP16[(HEAP32[$4 >> 2] | 0) + 1124 + (HEAP32[$7 >> 2] << 1) >> 1] = HEAP32[$8 >> 2];
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + (HEAP32[$11 + (HEAP32[$7 >> 2] << 2) >> 2] | 0);
  if (HEAP32[$11 + (HEAP32[$7 >> 2] << 2) >> 2] | 0) if (((HEAP32[$9 >> 2] | 0) - 1 | 0) >= (1 << HEAP32[$7 >> 2] | 0)) {
   label = 13;
   break;
  }
  HEAP32[(HEAP32[$4 >> 2] | 0) + 1056 + (HEAP32[$7 >> 2] << 2) >> 2] = HEAP32[$9 >> 2] << 16 - (HEAP32[$7 >> 2] | 0);
  HEAP32[$9 >> 2] = HEAP32[$9 >> 2] << 1;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + (HEAP32[$11 + (HEAP32[$7 >> 2] << 2) >> 2] | 0);
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) {
  HEAP32[$3 >> 2] = _stbi__err(44892) | 0;
  $160 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $160 | 0;
 }
 HEAP32[(HEAP32[$4 >> 2] | 0) + 1056 + 64 >> 2] = 65536;
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
  HEAP32[$12 >> 2] = HEAPU8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) >> 0];
  if (HEAP32[$12 >> 2] | 0) {
   HEAP32[$13 >> 2] = (HEAP32[$10 + (HEAP32[$12 >> 2] << 2) >> 2] | 0) - (HEAPU16[(HEAP32[$4 >> 2] | 0) + 1024 + (HEAP32[$12 >> 2] << 1) >> 1] | 0) + (HEAPU16[(HEAP32[$4 >> 2] | 0) + 1124 + (HEAP32[$12 >> 2] << 1) >> 1] | 0);
   HEAP16[$14 >> 1] = HEAP32[$12 >> 2] << 9 | HEAP32[$7 >> 2];
   HEAP8[(HEAP32[$4 >> 2] | 0) + 1156 + (HEAP32[$13 >> 2] | 0) >> 0] = HEAP32[$12 >> 2];
   HEAP16[(HEAP32[$4 >> 2] | 0) + 1444 + (HEAP32[$13 >> 2] << 1) >> 1] = HEAP32[$7 >> 2];
   L28 : do if ((HEAP32[$12 >> 2] | 0) <= 9) {
    HEAP32[$15 >> 2] = _stbi__bit_reverse(HEAP32[$10 + (HEAP32[$12 >> 2] << 2) >> 2] | 0, HEAP32[$12 >> 2] | 0) | 0;
    while (1) {
     if ((HEAP32[$15 >> 2] | 0) >= 512) break L28;
     HEAP16[(HEAP32[$4 >> 2] | 0) + (HEAP32[$15 >> 2] << 1) >> 1] = HEAP16[$14 >> 1] | 0;
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + (1 << HEAP32[$12 >> 2]);
    }
   } while (0);
   $155 = $10 + (HEAP32[$12 >> 2] << 2) | 0;
   HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + 1;
  }
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 HEAP32[$3 >> 2] = 1;
 $160 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $160 | 0;
}

function __sg_validate_shader_desc($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $166 = 0, $2 = 0, $3 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $5 = sp + 54 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 53 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 52 | 0;
 $15 = sp + 4 | 0;
 $16 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17623, 17628, 13371, 33698);
 __sg_validate_begin();
 __sg_validate((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 0, 17);
 __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 2096 >> 2] | 0) == 0, 17);
 __sg_validate(0 != (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0), 29);
 __sg_validate(0 != (HEAP32[(HEAP32[$1 >> 2] | 0) + 196 >> 2] | 0), 18);
 __sg_validate(0 != (HEAP32[(HEAP32[$1 >> 2] | 0) + 1144 >> 2] | 0), 18);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  $40 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) >= 16) break;
  if (HEAP32[$40 + 4 + ((HEAP32[$2 >> 2] | 0) * 12 | 0) >> 2] | 0) __sg_validate((_strlen(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 + ((HEAP32[$2 >> 2] | 0) * 12 | 0) >> 2] | 0) | 0) >>> 0 < 16, 31);
  if (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 + ((HEAP32[$2 >> 2] | 0) * 12 | 0) + 4 >> 2] | 0) __sg_validate((_strlen(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 + ((HEAP32[$2 >> 2] | 0) * 12 | 0) + 4 >> 2] | 0) | 0) >>> 0 < 16, 31);
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 if (HEAP32[$40 + 196 + 4 >> 2] | 0) __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 196 + 4 + 4 >> 2] | 0) >>> 0 > 0, 21);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 1144 + 4 >> 2] | 0) __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 1144 + 4 + 4 >> 2] | 0) >>> 0 > 0, 21);
 HEAP32[$3 >> 2] = 0;
 while (1) {
  if ((HEAP32[$3 >> 2] | 0) >= 2) break;
  $95 = HEAP32[$1 >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$3 >> 2] | 0) == 0 ? $95 + 196 | 0 : $95 + 1144 | 0;
  HEAP8[$5 >> 0] = 1;
  HEAP32[$6 >> 2] = 0;
  while (1) {
   if ((HEAP32[$6 >> 2] | 0) >= 4) break;
   HEAP32[$7 >> 2] = (HEAP32[$4 >> 2] | 0) + 20 + ((HEAP32[$6 >> 2] | 0) * 196 | 0);
   if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) >>> 0 > 0) {
    __sg_validate(HEAP8[$5 >> 0] & 1, 22);
    HEAP8[$8 >> 0] = 1;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$10 >> 2] = 0;
    HEAP32[$11 >> 2] = 0;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) >= 16) break;
     HEAP32[$12 >> 2] = (HEAP32[$7 >> 2] | 0) + 4 + ((HEAP32[$11 >> 2] | 0) * 12 | 0);
     if (HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] | 0) {
      __sg_validate(HEAP8[$8 >> 0] & 1, 24);
      __sg_validate(0 != (HEAP32[HEAP32[$12 >> 2] >> 2] | 0), 26);
      HEAP32[$13 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2];
      $132 = __sg_uniform_size(HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
      HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $132;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
     } else HEAP8[$8 >> 0] = 0;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
    }
    __sg_validate((HEAP32[$9 >> 2] | 0) == (HEAP32[HEAP32[$7 >> 2] >> 2] | 0), 27);
    __sg_validate((HEAP32[$10 >> 2] | 0) > 0, 25);
   } else HEAP8[$5 >> 0] = 0;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
  }
  HEAP8[$14 >> 0] = 1;
  HEAP32[$15 >> 2] = 0;
  while (1) {
   if ((HEAP32[$15 >> 2] | 0) >= 12) break;
   HEAP32[$16 >> 2] = (HEAP32[$4 >> 2] | 0) + 804 + ((HEAP32[$15 >> 2] | 0) * 12 | 0);
   if (HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] | 0) {
    __sg_validate(HEAP8[$14 >> 0] & 1, 23);
    __sg_validate(0 != (HEAP32[HEAP32[$16 >> 2] >> 2] | 0), 28);
   } else HEAP8[$14 >> 0] = 0;
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
  }
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 }
 $166 = __sg_validate_end() | 0;
 STACKTOP = sp;
 return $166 | 0;
}

function _stbtt__handle_clipped_edge($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0, $11 = 0, $114 = 0.0, $115 = 0, $12 = 0, $13 = 0, $143 = 0, $195 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAPF32[$10 >> 2] = $3;
 HEAPF32[$11 >> 2] = $4;
 HEAPF32[$12 >> 2] = $5;
 HEAPF32[$13 >> 2] = $6;
 if (+HEAPF32[$11 >> 2] == +HEAPF32[$13 >> 2]) {
  STACKTOP = sp;
  return;
 }
 if (!(+HEAPF32[$11 >> 2] < +HEAPF32[$13 >> 2])) ___assert_fail(40876, 40159, 2621, 40884);
 if (!(+HEAPF32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] <= +HEAPF32[(HEAP32[$9 >> 2] | 0) + 24 >> 2])) ___assert_fail(40911, 40159, 2622, 40884);
 if (+HEAPF32[$11 >> 2] > +HEAPF32[(HEAP32[$9 >> 2] | 0) + 24 >> 2]) {
  STACKTOP = sp;
  return;
 }
 if (+HEAPF32[$13 >> 2] < +HEAPF32[(HEAP32[$9 >> 2] | 0) + 20 >> 2]) {
  STACKTOP = sp;
  return;
 }
 if (+HEAPF32[$11 >> 2] < +HEAPF32[(HEAP32[$9 >> 2] | 0) + 20 >> 2]) {
  HEAPF32[$10 >> 2] = +HEAPF32[$10 >> 2] + (+HEAPF32[$12 >> 2] - +HEAPF32[$10 >> 2]) * (+HEAPF32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] - +HEAPF32[$11 >> 2]) / (+HEAPF32[$13 >> 2] - +HEAPF32[$11 >> 2]);
  HEAPF32[$11 >> 2] = +HEAPF32[(HEAP32[$9 >> 2] | 0) + 20 >> 2];
 }
 if (+HEAPF32[$13 >> 2] > +HEAPF32[(HEAP32[$9 >> 2] | 0) + 24 >> 2]) {
  HEAPF32[$12 >> 2] = +HEAPF32[$12 >> 2] + (+HEAPF32[$12 >> 2] - +HEAPF32[$10 >> 2]) * (+HEAPF32[(HEAP32[$9 >> 2] | 0) + 24 >> 2] - +HEAPF32[$13 >> 2]) / (+HEAPF32[$13 >> 2] - +HEAPF32[$11 >> 2]);
  HEAPF32[$13 >> 2] = +HEAPF32[(HEAP32[$9 >> 2] | 0) + 24 >> 2];
 }
 do if (+HEAPF32[$10 >> 2] == +(HEAP32[$8 >> 2] | 0)) if (+HEAPF32[$12 >> 2] <= +((HEAP32[$8 >> 2] | 0) + 1 | 0)) break; else ___assert_fail(40926, 40159, 2635, 40884); else {
  if (+HEAPF32[$10 >> 2] == +((HEAP32[$8 >> 2] | 0) + 1 | 0)) if (+HEAPF32[$12 >> 2] >= +(HEAP32[$8 >> 2] | 0)) break; else ___assert_fail(40936, 40159, 2637, 40884);
  if (+HEAPF32[$10 >> 2] <= +(HEAP32[$8 >> 2] | 0)) if (+HEAPF32[$12 >> 2] <= +(HEAP32[$8 >> 2] | 0)) break; else ___assert_fail(40944, 40159, 2639, 40884);
  $114 = +HEAPF32[$12 >> 2];
  $115 = HEAP32[$8 >> 2] | 0;
  if (+HEAPF32[$10 >> 2] >= +((HEAP32[$8 >> 2] | 0) + 1 | 0)) if ($114 >= +($115 + 1 | 0)) break; else ___assert_fail(40952, 40159, 2641, 40884);
  if (!($114 >= +($115 | 0))) ___assert_fail(40962, 40159, 2643, 40884);
  if (+HEAPF32[$12 >> 2] <= +((HEAP32[$8 >> 2] | 0) + 1 | 0)) break; else ___assert_fail(40962, 40159, 2643, 40884);
 } while (0);
 if (+HEAPF32[$10 >> 2] <= +(HEAP32[$8 >> 2] | 0)) if (+HEAPF32[$12 >> 2] <= +(HEAP32[$8 >> 2] | 0)) {
  $143 = (HEAP32[$7 >> 2] | 0) + (HEAP32[$8 >> 2] << 2) | 0;
  HEAPF32[$143 >> 2] = +HEAPF32[$143 >> 2] + +HEAPF32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] * (+HEAPF32[$13 >> 2] - +HEAPF32[$11 >> 2]);
  STACKTOP = sp;
  return;
 }
 if (+HEAPF32[$10 >> 2] >= +((HEAP32[$8 >> 2] | 0) + 1 | 0)) if (+HEAPF32[$12 >> 2] >= +((HEAP32[$8 >> 2] | 0) + 1 | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(+HEAPF32[$10 >> 2] >= +(HEAP32[$8 >> 2] | 0))) ___assert_fail(40983, 40159, 2650, 40884);
 if (!(+HEAPF32[$10 >> 2] <= +((HEAP32[$8 >> 2] | 0) + 1 | 0))) ___assert_fail(40983, 40159, 2650, 40884);
 if (!(+HEAPF32[$12 >> 2] >= +(HEAP32[$8 >> 2] | 0))) ___assert_fail(40983, 40159, 2650, 40884);
 if (!(+HEAPF32[$12 >> 2] <= +((HEAP32[$8 >> 2] | 0) + 1 | 0))) ___assert_fail(40983, 40159, 2650, 40884);
 $195 = (HEAP32[$7 >> 2] | 0) + (HEAP32[$8 >> 2] << 2) | 0;
 HEAPF32[$195 >> 2] = +HEAPF32[$195 >> 2] + +HEAPF32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] * (+HEAPF32[$13 >> 2] - +HEAPF32[$11 >> 2]) * (1.0 - (+HEAPF32[$10 >> 2] - +(HEAP32[$8 >> 2] | 0) + (+HEAPF32[$12 >> 2] - +(HEAP32[$8 >> 2] | 0))) / 2.0);
 STACKTOP = sp;
 return;
}

function _HMM_LookAt($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy12 = 0, $$byval_copy13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $$byval_copy13 = sp + 140 | 0;
 $$byval_copy12 = sp + 128 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy13 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 _HMM_SubtractVec3($6, $$byval_copy12, $$byval_copy13);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
 HEAP32[$$byval_copy13 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
 _HMM_NormalizeVec3($5, $$byval_copy13);
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy13 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 _HMM_Cross($8, $$byval_copy12, $$byval_copy13);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 HEAP32[$$byval_copy13 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
 _HMM_NormalizeVec3($7, $$byval_copy13);
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$$byval_copy13 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 _HMM_Cross($9, $$byval_copy12, $$byval_copy13);
 HEAPF32[$4 >> 2] = +HEAPF32[$7 >> 2];
 HEAPF32[$4 + 4 >> 2] = +HEAPF32[$9 >> 2];
 HEAPF32[$4 + 8 >> 2] = -+HEAPF32[$5 >> 2];
 HEAPF32[$4 + 12 >> 2] = 0.0;
 HEAPF32[$4 + 16 >> 2] = +HEAPF32[$7 + 4 >> 2];
 HEAPF32[$4 + 16 + 4 >> 2] = +HEAPF32[$9 + 4 >> 2];
 HEAPF32[$4 + 16 + 8 >> 2] = -+HEAPF32[$5 + 4 >> 2];
 HEAPF32[$4 + 16 + 12 >> 2] = 0.0;
 HEAPF32[$4 + 32 >> 2] = +HEAPF32[$7 + 8 >> 2];
 HEAPF32[$4 + 32 + 4 >> 2] = +HEAPF32[$9 + 8 >> 2];
 HEAPF32[$4 + 32 + 8 >> 2] = -+HEAPF32[$5 + 8 >> 2];
 HEAPF32[$4 + 32 + 12 >> 2] = 0.0;
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy13 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAPF32[$4 + 48 >> 2] = -+_HMM_DotVec3($$byval_copy12, $$byval_copy13);
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
 HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy13 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAPF32[$4 + 48 + 4 >> 2] = -+_HMM_DotVec3($$byval_copy12, $$byval_copy13);
 HEAP32[$$byval_copy12 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy12 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$$byval_copy12 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy13 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAPF32[$4 + 48 + 8 >> 2] = +_HMM_DotVec3($$byval_copy12, $$byval_copy13);
 HEAPF32[$4 + 48 + 12 >> 2] = 1.0;
 dest = $0;
 src = $4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __sg_validate_image_desc($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $178 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $83 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 28 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 41 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 39 | 0;
 $11 = sp + 38 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = sp + 37 | 0;
 $15 = sp + 36 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17623, 17628, 13308, 32762);
 __sg_validate_begin();
 __sg_validate((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 0, 6);
 __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 880 >> 2] | 0) == 0, 6);
 __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) > 0, 7);
 __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) > 0, 8);
 HEAP32[$2 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2];
 HEAP32[$3 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2];
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 848 >> 2] | 0) $56 = 1; else if (HEAP32[(HEAP32[$1 >> 2] | 0) + 860 >> 2] | 0) $56 = 1; else if (HEAP32[(HEAP32[$1 >> 2] | 0) + 868 >> 2] | 0) $56 = 1; else $56 = 0 != (HEAP32[(HEAP32[$1 >> 2] | 0) + 876 >> 2] | 0);
 HEAP8[$4 >> 0] = $56 & 1;
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 8 >> 0] & 1) {
  if (!((HEAP32[$2 >> 2] | 0) >= 0 & (HEAP32[$2 >> 2] | 0) < 62)) ___assert_fail(32786, 17628, 13321, 32762);
  __sg_validate(HEAP8[2156636 + ((HEAP32[$2 >> 2] | 0) * 6 | 0) + 2 >> 0] & 1, 9);
  if (!(HEAP8[2157009] & 1)) if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] | 0) > 1) {
   if (HEAP8[2156603] & 1) $83 = HEAP8[2156636 + ((HEAP32[$2 >> 2] | 0) * 6 | 0) + 4 >> 0] & 1; else $83 = 0;
   __sg_validate($83, 12);
  }
  __sg_validate((HEAP32[$3 >> 2] | 0) == 1, 13);
  __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0) == 0, 14);
  $178 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $178 | 0;
 }
 __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] | 0) <= 1, 11);
 HEAP8[$5 >> 0] = ((__sg_is_valid_rendertarget_depth_format(HEAP32[$2 >> 2] | 0) | 0) ^ 1) & 1;
 __sg_validate(HEAP8[$5 >> 0] & 1, 10);
 if ((HEAP8[$4 >> 0] & 1 ^ 1) & (HEAP32[$3 >> 2] | 0) == 1) {
  HEAP32[$6 >> 2] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) == 2 ? 6 : 1;
  HEAP32[$7 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2];
  HEAP32[$8 >> 2] = 0;
  while (1) {
   if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
   HEAP32[$9 >> 2] = 0;
   while (1) {
    if ((HEAP32[$9 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) break;
    HEAP8[$10 >> 0] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 76 + (HEAP32[$8 >> 2] << 7) + (HEAP32[$9 >> 2] << 3) >> 2] | 0) != 0 & 1;
    HEAP8[$11 >> 0] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 76 + (HEAP32[$8 >> 2] << 7) + (HEAP32[$9 >> 2] << 3) + 4 >> 2] | 0) >>> 0 > 0 & 1;
    __sg_validate(HEAP8[$10 >> 0] & 1 ? HEAP8[$11 >> 0] & 1 : 0, 15);
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   }
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
  }
  $178 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $178 | 0;
 } else {
  HEAP32[$12 >> 2] = 0;
  while (1) {
   if ((HEAP32[$12 >> 2] | 0) >= 6) break;
   HEAP32[$13 >> 2] = 0;
   while (1) {
    if ((HEAP32[$13 >> 2] | 0) >= 16) break;
    HEAP8[$14 >> 0] = 0 == (HEAP32[(HEAP32[$1 >> 2] | 0) + 76 + (HEAP32[$12 >> 2] << 7) + (HEAP32[$13 >> 2] << 3) >> 2] | 0) & 1;
    HEAP8[$15 >> 0] = 0 == (HEAP32[(HEAP32[$1 >> 2] | 0) + 76 + (HEAP32[$12 >> 2] << 7) + (HEAP32[$13 >> 2] << 3) + 4 >> 2] | 0) & 1;
    __sg_validate(HEAP8[$14 >> 0] & 1 ? HEAP8[$15 >> 0] & 1 : 0, 16);
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
   }
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  }
  $178 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $178 | 0;
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$add$i69 = 0, $$0$i$i$idx$i = 0, $$0$i$i$idx$i68 = 0, $$2 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $55 = 0, $60 = 0, $61 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 L1 : do if (($1 - $0 | 0) > 1) {
  $8 = HEAP8[$0 >> 0] | 0;
  switch ($8 << 24 >> 24) {
  case 100:
  case 111:
   {
    if ((HEAP8[$0 + 1 >> 0] | 0) == 110) {
     $13 = $0 + 2 | 0;
     if ($8 << 24 >> 24 != 111) {
      $39 = __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
      $$2 = ($39 | 0) == ($13 | 0) ? $0 : $39;
      break L1;
     }
     $14 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
     if (($14 | 0) == ($13 | 0)) {
      $$2 = $0;
      break L1;
     }
     $16 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
     if (($16 | 0) == ($14 | 0)) {
      $$2 = $14;
      break L1;
     }
     $18 = $2 + 4 | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     if ((($19 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$2 = $16;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $19 + -24 | 0);
     $26 = HEAP32[$18 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$18 >> 2] = $26 + -24;
     $31 = HEAP8[$3 + 11 >> 0] | 0;
     $32 = $31 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($26 + -48 | 0, $32 ? HEAP32[$3 >> 2] | 0 : $3, $32 ? HEAP32[$3 + 4 >> 2] | 0 : $31 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2 = $16;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  $41 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($41 | 0) == ($0 | 0)) {
   $43 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   if (($43 | 0) == ($0 | 0)) $$2 = $0; else {
    $45 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($43, $1, $2) | 0;
    if (($45 | 0) == ($43 | 0)) $$2 = $43; else {
     $47 = $2 + 4 | 0;
     $48 = HEAP32[$47 >> 2] | 0;
     if ((($48 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$2 = $45; else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $48 + -24 | 0);
      $55 = HEAP32[$47 >> 2] | 0;
      $$0$i$i$idx$i68 = 0;
      while (1) {
       if (($$0$i$i$idx$i68 | 0) == -1) break;
       $$0$i$i$add$i69 = $$0$i$i$idx$i68 + -1 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($55 + ($$0$i$i$add$i69 * 24 | 0) | 0);
       $$0$i$i$idx$i68 = $$0$i$i$add$i69;
      }
      HEAP32[$47 >> 2] = $55 + -24;
      $60 = HEAP8[$3 + 11 >> 0] | 0;
      $61 = $60 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($55 + -48 | 0, $61 ? HEAP32[$3 >> 2] | 0 : $3, $61 ? HEAP32[$3 + 4 >> 2] | 0 : $60 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $$2 = $45;
     }
    }
   }
  } else $$2 = $41;
 } else $$2 = $0; while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i$i = 0, $$038 = 0, $$040$in = 0, $$3 = 0, $12 = 0, $20 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $9 = 0, $isdigittmp = 0, $isdigittmp47 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 L1 : do if (($0 | 0) == ($1 | 0)) $$3 = $0; else {
  $isdigittmp = (HEAP8[$0 >> 0] | 0) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $9 = $0 + 1 | 0;
   if (($9 | 0) == ($1 | 0)) $$3 = $0; else {
    $$038 = $isdigittmp;
    $$040$in = $9;
    while (1) {
     $isdigittmp47 = (HEAP8[$$040$in >> 0] | 0) + -48 | 0;
     if ($isdigittmp47 >>> 0 >= 10) break;
     $12 = $$040$in + 1 | 0;
     if (($12 | 0) == ($1 | 0)) {
      $$3 = $0;
      break L1;
     }
     $$038 = $isdigittmp47 + ($$038 * 10 | 0) | 0;
     $$040$in = $12;
    }
    if (($1 - $$040$in | 0) >>> 0 < $$038 >>> 0) $$3 = $0; else {
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($3, $$040$in, $$038);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($4, $3, 10);
     $20 = __ZNSt3__211char_traitsIcE6lengthEPKc(49259) | 0;
     $22 = HEAP8[$4 + 11 >> 0] | 0;
     if (($20 | 0) == (($22 << 24 >> 24 < 0 ? HEAP32[$4 + 4 >> 2] | 0 : $22 & 255) | 0)) $$0$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($4, 49259, $20) | 0) == 0; else $$0$i = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     if ($$0$i) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm22EEERAT__Kc($4);
      $31 = $2 + 4 | 0;
      $32 = HEAP32[$31 >> 2] | 0;
      if ($32 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($32, $4);
       HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     } else {
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
      $$0$i$i = 0;
      while (1) {
       if (($$0$i$i | 0) == 3) break;
       HEAP32[$3 + ($$0$i$i << 2) >> 2] = 0;
       $$0$i$i = $$0$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
      $40 = $2 + 4 | 0;
      $41 = HEAP32[$40 >> 2] | 0;
      if ($41 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($41, $4);
       HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $$040$in + $$038 | 0;
    }
   }
  } else $$3 = $0;
 } while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __sg_destroy_all_resources($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = 1;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 96 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 60 | 0) + 4 >> 2] | 0) == (HEAP32[$3 >> 2] | 0)) {
   HEAP32[$5 >> 2] = HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 96 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 60 | 0) + 8 >> 2];
   if ((HEAP32[$5 >> 2] | 0) == 2 | (HEAP32[$5 >> 2] | 0) == 3) __sg_destroy_buffer((HEAP32[(HEAP32[$2 >> 2] | 0) + 96 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 60 | 0) | 0);
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 HEAP32[$6 >> 2] = 1;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 100 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) * 112 | 0) + 4 >> 2] | 0) == (HEAP32[$3 >> 2] | 0)) {
   HEAP32[$7 >> 2] = HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 100 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) * 112 | 0) + 8 >> 2];
   if ((HEAP32[$7 >> 2] | 0) == 2 | (HEAP32[$7 >> 2] | 0) == 3) __sg_destroy_image((HEAP32[(HEAP32[$2 >> 2] | 0) + 100 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) * 112 | 0) | 0);
  }
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 HEAP32[$8 >> 2] = 1;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 104 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 2176 | 0) + 4 >> 2] | 0) == (HEAP32[$3 >> 2] | 0)) {
   HEAP32[$9 >> 2] = HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 104 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 2176 | 0) + 8 >> 2];
   if ((HEAP32[$9 >> 2] | 0) == 2 | (HEAP32[$9 >> 2] | 0) == 3) __sg_destroy_shader((HEAP32[(HEAP32[$2 >> 2] | 0) + 104 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) * 2176 | 0) | 0);
  }
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 HEAP32[$10 >> 2] = 1;
 while (1) {
  if ((HEAP32[$10 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 108 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) * 472 | 0) + 4 >> 2] | 0) == (HEAP32[$3 >> 2] | 0)) {
   HEAP32[$11 >> 2] = HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 108 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) * 472 | 0) + 8 >> 2];
   if ((HEAP32[$11 >> 2] | 0) == 2 | (HEAP32[$11 >> 2] | 0) == 3) __sg_destroy_pipeline((HEAP32[(HEAP32[$2 >> 2] | 0) + 108 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) * 472 | 0) | 0);
  }
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
 }
 HEAP32[$12 >> 2] = 1;
 while (1) {
  if ((HEAP32[$12 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 112 >> 2] | 0) + ((HEAP32[$12 >> 2] | 0) * 120 | 0) + 4 >> 2] | 0) == (HEAP32[$3 >> 2] | 0)) {
   HEAP32[$13 >> 2] = HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 112 >> 2] | 0) + ((HEAP32[$12 >> 2] | 0) * 120 | 0) + 8 >> 2];
   if ((HEAP32[$13 >> 2] | 0) == 2 | (HEAP32[$13 >> 2] | 0) == 3) __sg_destroy_pass((HEAP32[(HEAP32[$2 >> 2] | 0) + 112 >> 2] | 0) + ((HEAP32[$12 >> 2] | 0) * 120 | 0) | 0);
  }
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN10Delaunator8legalizeEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$079$ph = 0, $$079$ph$be$in = 0, $$080 = 0, $$080$ph = 0, $$080$ph$be = 0, $10 = 0, $104 = 0, $11 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $41 = 0, $43 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $6 = 0, $62 = 0, $69 = 0, $7 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $0 + 100 | 0;
 $5 = $0 + 104 | 0;
 HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
 $6 = $0 + 16 | 0;
 $7 = $0 + 4 | 0;
 $8 = $0 + 64 | 0;
 $9 = $0 + 52 | 0;
 $10 = $0 + 28 | 0;
 $11 = $0 + 108 | 0;
 $$079$ph = $1;
 $$080$ph = 0;
 while (1) {
  $13 = $$079$ph - (($$079$ph >>> 0) % 3 | 0) | 0;
  $16 = $13 + ((($$079$ph + 2 | 0) >>> 0) % 3 | 0) | 0;
  $19 = $13 + ((($$079$ph + 1 | 0) >>> 0) % 3 | 0) | 0;
  $$080 = $$080$ph;
  while (1) {
   $22 = HEAP32[(HEAP32[$6 >> 2] | 0) + ($$079$ph << 2) >> 2] | 0;
   if (($22 | 0) == -1) {
    label = 4;
    break;
   }
   $29 = $22 - (($22 >>> 0) % 3 | 0) | 0;
   $32 = $29 + ((($22 + 2 | 0) >>> 0) % 3 | 0) | 0;
   $33 = HEAP32[$7 >> 2] | 0;
   $35 = HEAP32[$33 + ($16 << 2) >> 2] | 0;
   $41 = HEAP32[$33 + ($32 << 2) >> 2] | 0;
   $43 = $35 << 1;
   $44 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
   $50 = HEAP32[$33 + ($$079$ph << 2) >> 2] << 1;
   $56 = HEAP32[$33 + ($19 << 2) >> 2] << 1;
   $62 = $41 << 1;
   if (!(__Z9in_circledddddddd(+HEAPF64[$44 + ($43 << 3) >> 3], +HEAPF64[$44 + (($43 | 1) << 3) >> 3], +HEAPF64[$44 + ($50 << 3) >> 3], +HEAPF64[$44 + (($50 | 1) << 3) >> 3], +HEAPF64[$44 + ($56 << 3) >> 3], +HEAPF64[$44 + (($56 | 1) << 3) >> 3], +HEAPF64[$44 + ($62 << 3) >> 3], +HEAPF64[$44 + (($62 | 1) << 3) >> 3]) | 0)) {
    label = 18;
    break;
   }
   $69 = HEAP32[$7 >> 2] | 0;
   HEAP32[$69 + ($$079$ph << 2) >> 2] = $41;
   HEAP32[$69 + ($22 << 2) >> 2] = $35;
   $74 = HEAP32[(HEAP32[$6 >> 2] | 0) + ($32 << 2) >> 2] | 0;
   L7 : do if (($74 | 0) == -1) {
    $76 = HEAP32[$8 >> 2] | 0;
    $77 = HEAP32[$9 >> 2] | 0;
    $$0 = $76;
    while (1) {
     $78 = $77 + ($$0 << 2) | 0;
     if ((HEAP32[$78 >> 2] | 0) == ($32 | 0)) break;
     $$0 = HEAP32[(HEAP32[$10 >> 2] | 0) + ($$0 << 2) >> 2] | 0;
     if (($$0 | 0) == ($76 | 0)) break L7;
    }
    HEAP32[$78 >> 2] = $$079$ph;
   } while (0);
   __ZN10Delaunator4linkEmm($0, $$079$ph, $74);
   __ZN10Delaunator4linkEmm($0, $22, HEAP32[(HEAP32[$6 >> 2] | 0) + ($16 << 2) >> 2] | 0);
   __ZN10Delaunator4linkEmm($0, $16, $32);
   $90 = $29 + ((($22 + 1 | 0) >>> 0) % 3 | 0) | 0;
   HEAP32[$2 >> 2] = $90;
   $91 = HEAP32[$5 >> 2] | 0;
   $92 = HEAP32[$3 >> 2] | 0;
   $96 = $91;
   do if ($$080 >>> 0 < $91 - $92 >> 2 >>> 0) HEAP32[$92 + ($$080 << 2) >> 2] = $90; else if ((HEAP32[$11 >> 2] | 0) == ($96 | 0)) {
    __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($3, $2);
    break;
   } else {
    HEAP32[$96 >> 2] = $90;
    HEAP32[$5 >> 2] = $96 + 4;
    break;
   } while (0);
   $$080 = $$080 + 1 | 0;
  }
  if ((label | 0) == 4) {
   label = 0;
   $25 = $$080 + -1 | 0;
   if (!$$080) break;
   $$079$ph$be$in = (HEAP32[$3 >> 2] | 0) + ($25 << 2) | 0;
   $$080$ph$be = $25;
  } else if ((label | 0) == 18) {
   label = 0;
   $104 = $$080 + -1 | 0;
   if (!$$080) break;
   $$079$ph$be$in = (HEAP32[$3 >> 2] | 0) + ($104 << 2) | 0;
   $$080$ph$be = $104;
  }
  $$079$ph = HEAP32[$$079$ph$be$in >> 2] | 0;
  $$080$ph = $$080$ph$be;
 }
 STACKTOP = sp;
 return $16 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$i = 0, $$025 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $23 = 0, $24 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 $7 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0, $1) | 0;
 if (($7 | 0) == ($0 | 0) | ($7 | 0) == ($1 | 0)) $$1 = $0; else if ((HEAP8[$7 >> 0] | 0) == 69) {
  $12 = $2 + 11 | 0;
  $13 = HEAP8[$12 >> 0] | 0;
  $15 = $2 + 4 | 0;
  do if (($13 << 24 >> 24 < 0 ? HEAP32[$15 >> 2] | 0 : $13 & 255) >>> 0 > 3) {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6, 47879, $2);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47877) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
   $23 = $3 + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   if ($24 >>> 0 < (HEAP32[$3 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24, $4);
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($3, $4);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
  } else {
   $30 = $3 + 4 | 0;
   $31 = HEAP32[$30 >> 2] | 0;
   if ($31 >>> 0 < (HEAP32[$3 + 8 >> 2] | 0) >>> 0) {
    HEAP32[$31 >> 2] = 0;
    HEAP32[$31 + 4 >> 2] = 0;
    HEAP32[$31 + 8 >> 2] = 0;
    HEAP32[$31 + 12 >> 2] = 0;
    HEAP32[$31 + 16 >> 2] = 0;
    HEAP32[$31 + 20 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($31);
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 24;
    break;
   } else {
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($3);
    break;
   }
  } while (0);
  $39 = $3 + 4 | 0;
  if ((HEAP8[$0 >> 0] | 0) == 110) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$39 >> 2] | 0) + -24 | 0, 45);
   $$025 = $0 + 1 | 0;
  } else $$025 = $0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_((HEAP32[$39 >> 2] | 0) + -24 | 0, $$025, $7);
  $45 = HEAP8[$12 >> 0] | 0;
  $46 = $45 << 24 >> 24 < 0;
  $49 = $46 ? HEAP32[$15 >> 2] | 0 : $45 & 255;
  if ($49 >>> 0 < 4) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$39 >> 2] | 0) + -24 | 0, $46 ? HEAP32[$2 >> 2] | 0 : $2, $49) | 0;
  $$1 = $7 + 1 | 0;
 } else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$059 = 0, $$1 = 0, $$byval_copy = 0, $$sroa$0$1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $69 = 0, $7 = 0, $72 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $6 = $0 + 11 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 << 24 >> 24 < 0;
 if ($8) $11 = HEAP32[$0 >> 2] | 0; else $11 = $0;
 $12 = HEAP32[$1 >> 2] | 0;
 $13 = $12 - $11 | 0;
 $16 = $3 - $2 | 0;
 do if (!$16) {
  $69 = $7;
  label = 27;
 } else {
  if ($8) {
   $23 = HEAP32[$0 >> 2] | 0;
   $24 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $23 = $0;
   $24 = $7 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($2, $23, $23 + $24 | 0) | 0) {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($4, $2, $3);
   HEAP32[$5 >> 2] = $12;
   $27 = HEAP8[$4 + 11 >> 0] | 0;
   $28 = $27 << 24 >> 24 < 0;
   $33 = $28 ? HEAP32[$4 >> 2] | 0 : $4;
   $35 = $33 + ($28 ? HEAP32[$4 + 4 >> 2] | 0 : $27 & 255) | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2];
   $36 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0, $$byval_copy, $33, $35) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   $$sroa$0$1 = $36;
   break;
  }
  $37 = HEAP8[$6 >> 0] | 0;
  $38 = $37 << 24 >> 24 < 0;
  if ($38) {
   $46 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
   $47 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $46 = 10;
   $47 = $37 & 255;
  }
  if (($46 - $47 | 0) >>> 0 < $16 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEmmmmmm($0, $46, $47 + $16 - $46 | 0, $47, $13, $16);
   $$0 = HEAP32[$0 >> 2] | 0;
  } else {
   if ($38) $53 = HEAP32[$0 >> 2] | 0; else $53 = $0;
   $50 = $47 - $13 | 0;
   if (!$50) $$0 = $53; else {
    $52 = $53 + $13 | 0;
    __ZNSt3__211char_traitsIcE4moveEPcPKcm($52 + $16 | 0, $52, $50) | 0;
    $$0 = $53;
   }
  }
  $58 = $47 + $16 | 0;
  if ((HEAP8[$6 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $58; else HEAP8[$6 >> 0] = $58;
  HEAP8[$$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $58 | 0, $$byval_copy);
  $$059 = $2;
  $$1 = $$0 + $13 | 0;
  while (1) {
   if (($$059 | 0) == ($3 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($$1, $$059);
   $$059 = $$059 + 1 | 0;
   $$1 = $$1 + 1 | 0;
  }
  $69 = HEAP8[$6 >> 0] | 0;
  label = 27;
 } while (0);
 if ((label | 0) == 27) {
  if ($69 << 24 >> 24 < 0) $72 = HEAP32[$0 >> 2] | 0; else $72 = $0;
  $$sroa$0$1 = $72 + $13 | 0;
 }
 STACKTOP = sp;
 return $$sroa$0$1 | 0;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueES8_E4typeENS6_IPKS1_EESA_SA_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$03$i$i = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$sroa$044$059 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $47 = 0, $5 = 0, $51 = 0, $52 = 0, $56 = 0, $6 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$byval_copy3 = sp + 40 | 0;
 $$byval_copy2 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = HEAP32[$0 >> 2] | 0;
 $10 = $9;
 $14 = $9 + ((HEAP32[$1 >> 2] | 0) - $10 >> 4 << 4) | 0;
 $15 = HEAP32[$2 >> 2] | 0;
 $16 = HEAP32[$3 >> 2] | 0;
 $17 = $16 - $15 | 0;
 $18 = $17 >> 4;
 do if (($17 | 0) > 0) {
  $20 = $0 + 8 | 0;
  $23 = HEAP32[$0 + 4 >> 2] | 0;
  $24 = $23;
  if (($18 | 0) > ((HEAP32[$20 >> 2] | 0) - $24 >> 4 | 0)) {
   $46 = ($24 - $10 >> 4) + $18 | 0;
   $47 = __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
   if ($47 >>> 0 < $46 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
    $51 = HEAP32[$0 >> 2] | 0;
    $52 = (HEAP32[$20 >> 2] | 0) - $51 | 0;
    $56 = $52 >> 3;
    __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEEC2EmmS4_($6, $52 >> 4 >>> 0 < $47 >>> 1 >>> 0 ? ($56 >>> 0 < $46 >>> 0 ? $46 : $56) : $47, $14 - $51 >> 4, $0 + 8 | 0);
    HEAP32[$7 >> 2] = $15;
    HEAP32[$8 >> 2] = $16;
    HEAP32[$$byval_copy2 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$8 >> 2];
    __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($6, $$byval_copy2, $$byval_copy3);
    $61 = __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_($0, $6, $14) | 0;
    __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEED2Ev($6);
    $$0 = $61;
    break;
   }
  }
  $29 = $24 - $14 | 0;
  $30 = $29 >> 4;
  $32 = $15;
  $34 = $32 + ($30 << 4) | 0;
  if (($18 | 0) > ($30 | 0)) {
   HEAP32[$4 >> 2] = $34;
   HEAP32[$5 >> 2] = $16;
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$5 >> 2];
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($0, $$byval_copy2, $$byval_copy3, $18 - $30 | 0);
   if (($29 | 0) > 0) $$sroa$044$059 = $34; else {
    $$0 = $14;
    break;
   }
  } else $$sroa$044$059 = $16;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE12__move_rangeEPS1_S5_S5_($0, $14, $23, $14 + ($18 << 4) | 0);
  $38 = $$sroa$044$059;
  if (($32 | 0) == ($38 | 0)) $$0 = $14; else {
   $$03$i$i = $14;
   $40 = $32;
   while (1) {
    __ZN8DrPointFaSERKS_($$03$i$i, $40) | 0;
    $40 = $40 + 16 | 0;
    if (($40 | 0) == ($38 | 0)) {
     $$0 = $14;
     break;
    } else $$03$i$i = $$03$i$i + 16 | 0;
   }
  }
 } else $$0 = $14; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _fons__atlasAddSkylineLevel($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $161 = 0, $173 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $90 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 20 | 0;
 $10 = sp + 16 | 0;
 $11 = sp + 12 | 0;
 $12 = sp + 8 | 0;
 $13 = sp + 4 | 0;
 $14 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[$12 >> 2] = $5;
 if (!(_fons__atlasInsertNode(HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, (HEAP32[$10 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0, HEAP32[$11 >> 2] | 0) | 0)) {
  HEAP32[$6 >> 2] = 0;
  $173 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $173 | 0;
 }
 HEAP32[$13 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 while (1) {
  if ((HEAP32[$13 >> 2] | 0) >= (HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0)) break;
  if ((HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$13 >> 2] | 0) * 6 | 0) >> 1] | 0) >= ((HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$13 >> 2] | 0) - 1 | 0) * 6 | 0) >> 1] | 0) + (HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$13 >> 2] | 0) - 1 | 0) * 6 | 0) + 4 >> 1] | 0) | 0)) break;
  HEAP32[$14 >> 2] = (HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$13 >> 2] | 0) - 1 | 0) * 6 | 0) >> 1] | 0) + (HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$13 >> 2] | 0) - 1 | 0) * 6 | 0) + 4 >> 1] | 0) - (HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$13 >> 2] | 0) * 6 | 0) >> 1] | 0);
  $90 = (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$13 >> 2] | 0) * 6 | 0) | 0;
  HEAP16[$90 >> 1] = (HEAP16[$90 >> 1] | 0) + ((HEAP32[$14 >> 2] & 65535) << 16 >> 16);
  $103 = (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$13 >> 2] | 0) * 6 | 0) + 4 | 0;
  HEAP16[$103 >> 1] = (HEAP16[$103 >> 1] | 0) - ((HEAP32[$14 >> 2] & 65535) << 16 >> 16);
  if ((HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$13 >> 2] | 0) * 6 | 0) + 4 >> 1] | 0) > 0) break;
  _fons__atlasRemoveNode(HEAP32[$7 >> 2] | 0, HEAP32[$13 >> 2] | 0);
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 }
 HEAP32[$13 >> 2] = 0;
 while (1) {
  if ((HEAP32[$13 >> 2] | 0) >= ((HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0) - 1 | 0)) break;
  if ((HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$13 >> 2] | 0) * 6 | 0) + 2 >> 1] | 0) == (HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$13 >> 2] | 0) + 1 | 0) * 6 | 0) + 2 >> 1] | 0)) {
   $161 = (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$13 >> 2] | 0) * 6 | 0) + 4 | 0;
   HEAP16[$161 >> 1] = (HEAP16[$161 >> 1] | 0) + (HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$13 >> 2] | 0) + 1 | 0) * 6 | 0) + 4 >> 1] | 0);
   _fons__atlasRemoveNode(HEAP32[$7 >> 2] | 0, (HEAP32[$13 >> 2] | 0) + 1 | 0);
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
  }
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 }
 HEAP32[$6 >> 2] = 1;
 $173 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $173 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$023 = 0, $12 = 0, $13 = 0, $21 = 0, $3 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 L1 : do if (($1 - $0 | 0) > 1) {
  $12 = $2 + 4 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($13 | 0)) $$023 = $0; else {
   switch (HEAP8[$0 >> 0] | 0) {
   case 67:
    {
     switch (HEAP8[$0 + 1 >> 0] | 0) {
     case 53:
     case 51:
     case 50:
     case 49:
      break;
     default:
      {
       $$023 = $0;
       break L1;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($4, $13 + -24 | 0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
     $21 = HEAP32[$12 >> 2] | 0;
     if ($21 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($21, $3);
      HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     HEAP8[$2 + 60 >> 0] = 1;
     $$023 = $0 + 2 | 0;
     break L1;
     break;
    }
   case 68:
    break;
   default:
    {
     $$023 = $0;
     break L1;
    }
   }
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 53:
   case 50:
   case 49:
   case 48:
    break;
   default:
    {
     $$023 = $0;
     break L1;
    }
   }
   __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($6, $13 + -24 | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 47949) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $5);
   $36 = HEAP32[$12 >> 2] | 0;
   if ($36 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($36, $3);
    HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $3);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   HEAP8[$2 + 60 >> 0] = 1;
   $$023 = $0 + 2 | 0;
  }
 } else $$023 = $0; while (0);
 STACKTOP = sp;
 return $$023 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i20 = 0, $$018 = 0, $12 = 0, $18 = 0, $19 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp;
 $9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $3) | 0;
 if (($9 | 0) == ($0 | 0)) $$018 = $0; else {
  $12 = $3 + 4 | 0;
  if ((HEAP32[$3 >> 2] | 0) == (HEAP32[$12 >> 2] | 0)) $$018 = $0; else {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($7, $2, 47879);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8, (HEAP32[$12 >> 2] | 0) + -24 | 0);
   $18 = HEAP8[$8 + 11 >> 0] | 0;
   $19 = $18 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($7, $19 ? HEAP32[$8 >> 2] | 0 : $8, $19 ? HEAP32[$8 + 4 >> 2] | 0 : $18 & 255) | 0;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$7 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 47877) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i20 = 0;
   while (1) {
    if (($$0$i$i$i20 | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i20 << 2) >> 2] = 0;
    $$0$i$i$i20 = $$0$i$i$i20 + 1 | 0;
   }
   $32 = HEAP32[$12 >> 2] | 0;
   $33 = $32 + -24 | 0;
   $34 = $33 + 11 | 0;
   if ((HEAP8[$34 >> 0] | 0) < 0) {
    $37 = HEAP32[$33 >> 2] | 0;
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($37, $4);
    HEAP32[$32 + -20 >> 2] = 0;
   } else {
    HEAP8[$4 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($33, $4);
    HEAP8[$34 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($33);
   HEAP32[$33 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$33 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$33 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i$i | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
   $$018 = $9;
  }
 }
 STACKTOP = sp;
 return $$018 | 0;
}

function _stbi__build_huffman($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $126 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $59 = 0, $6 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$5 >> 2] = 0;
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) >= 16) break;
  HEAP32[$6 >> 2] = 0;
  while (1) {
   $21 = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   if ((HEAP32[$6 >> 2] | 0) >= (HEAP32[(HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] << 2) >> 2] | 0)) break;
   $24 = (HEAP32[$3 >> 2] | 0) + 1280 | 0;
   $25 = HEAP32[$7 >> 2] | 0;
   HEAP32[$7 >> 2] = $25 + 1;
   HEAP8[$24 + $25 >> 0] = $21;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
  }
  HEAP32[$5 >> 2] = $21;
 }
 HEAP8[(HEAP32[$3 >> 2] | 0) + 1280 + (HEAP32[$7 >> 2] | 0) >> 0] = 0;
 HEAP32[$8 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$6 >> 2] = 1;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) > 16) break;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 1612 + (HEAP32[$6 >> 2] << 2) >> 2] = (HEAP32[$7 >> 2] | 0) - (HEAP32[$8 >> 2] | 0);
  if ((HEAPU8[(HEAP32[$3 >> 2] | 0) + 1280 + (HEAP32[$7 >> 2] | 0) >> 0] | 0 | 0) == (HEAP32[$6 >> 2] | 0)) {
   while (1) {
    $59 = HEAP32[$8 >> 2] | 0;
    if ((HEAPU8[(HEAP32[$3 >> 2] | 0) + 1280 + (HEAP32[$7 >> 2] | 0) >> 0] | 0 | 0) != (HEAP32[$6 >> 2] | 0)) break;
    HEAP32[$8 >> 2] = $59 + 1;
    $63 = (HEAP32[$3 >> 2] | 0) + 512 | 0;
    $64 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $64 + 1;
    HEAP16[$63 + ($64 << 1) >> 1] = $59;
   }
   if (($59 - 1 | 0) >>> 0 >= 1 << HEAP32[$6 >> 2] >>> 0) {
    label = 14;
    break;
   }
  }
  HEAP32[(HEAP32[$3 >> 2] | 0) + 1540 + (HEAP32[$6 >> 2] << 2) >> 2] = HEAP32[$8 >> 2] << 16 - (HEAP32[$6 >> 2] | 0);
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] << 1;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 if ((label | 0) == 14) {
  HEAP32[$2 >> 2] = _stbi__err(45230) | 0;
  $126 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $126 | 0;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 1540 + (HEAP32[$6 >> 2] << 2) >> 2] = -1;
 _memset(HEAP32[$3 >> 2] | 0, -1, 512) | 0;
 HEAP32[$5 >> 2] = 0;
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) break;
  HEAP32[$9 >> 2] = HEAPU8[(HEAP32[$3 >> 2] | 0) + 1280 + (HEAP32[$5 >> 2] | 0) >> 0];
  L26 : do if ((HEAP32[$9 >> 2] | 0) <= 9) {
   HEAP32[$10 >> 2] = (HEAPU16[(HEAP32[$3 >> 2] | 0) + 512 + (HEAP32[$5 >> 2] << 1) >> 1] | 0) << 9 - (HEAP32[$9 >> 2] | 0);
   HEAP32[$11 >> 2] = 1 << 9 - (HEAP32[$9 >> 2] | 0);
   HEAP32[$6 >> 2] = 0;
   while (1) {
    if ((HEAP32[$6 >> 2] | 0) >= (HEAP32[$11 >> 2] | 0)) break L26;
    HEAP8[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + (HEAP32[$6 >> 2] | 0)) >> 0] = HEAP32[$5 >> 2];
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 }
 HEAP32[$2 >> 2] = 1;
 $126 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $126 | 0;
}

function __sg_gl_apply_uniforms($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(HEAP32[539409] | 0)) ___assert_fail(36593, 17628, 6868, 36619);
 if ((HEAP32[HEAP32[539409] >> 2] | 0) != (HEAP32[539410] | 0)) ___assert_fail(36641, 17628, 6869, 36619);
 if ((HEAP32[HEAP32[(HEAP32[539409] | 0) + 84 >> 2] >> 2] | 0) != (HEAP32[(HEAP32[539409] | 0) + 12 >> 2] | 0)) ___assert_fail(36711, 17628, 6870, 36619);
 if ((HEAP32[(HEAP32[(HEAP32[539409] | 0) + 84 >> 2] | 0) + 12 + ((HEAP32[$3 >> 2] | 0) * 120 | 0) >> 2] | 0) <= (HEAP32[$4 >> 2] | 0)) ___assert_fail(36801, 17628, 6871, 36619);
 if ((HEAP32[(HEAP32[(HEAP32[539409] | 0) + 84 >> 2] | 0) + 12 + ((HEAP32[$3 >> 2] | 0) * 120 | 0) + 8 + (HEAP32[$4 >> 2] << 2) >> 2] | 0) != (HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0)) ___assert_fail(36889, 17628, 6872, 36619);
 HEAP32[$6 >> 2] = (HEAP32[(HEAP32[539409] | 0) + 84 >> 2] | 0) + 252 + 260 + ((HEAP32[$3 >> 2] | 0) * 832 | 0);
 HEAP32[$7 >> 2] = (HEAP32[$6 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 196 | 0);
 HEAP32[$8 >> 2] = 0;
 L16 : while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) {
   label = 24;
   break;
  }
  HEAP32[$9 >> 2] = (HEAP32[$7 >> 2] | 0) + 4 + ((HEAP32[$8 >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] | 0)) {
   label = 14;
   break;
  }
  L20 : do if ((HEAP32[HEAP32[$9 >> 2] >> 2] | 0) != -1) {
   HEAP32[$10 >> 2] = (HEAP32[HEAP32[$5 >> 2] >> 2] | 0) + (HEAPU16[(HEAP32[$9 >> 2] | 0) + 10 >> 1] | 0);
   switch (HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] | 0) {
   case 0:
    {
     break L20;
     break;
    }
   case 1:
    {
     _glUniform1fv(HEAP32[HEAP32[$9 >> 2] >> 2] | 0, HEAPU8[(HEAP32[$9 >> 2] | 0) + 8 >> 0] | 0 | 0, HEAP32[$10 >> 2] | 0);
     break L20;
     break;
    }
   case 2:
    {
     _glUniform2fv(HEAP32[HEAP32[$9 >> 2] >> 2] | 0, HEAPU8[(HEAP32[$9 >> 2] | 0) + 8 >> 0] | 0 | 0, HEAP32[$10 >> 2] | 0);
     break L20;
     break;
    }
   case 3:
    {
     _glUniform3fv(HEAP32[HEAP32[$9 >> 2] >> 2] | 0, HEAPU8[(HEAP32[$9 >> 2] | 0) + 8 >> 0] | 0 | 0, HEAP32[$10 >> 2] | 0);
     break L20;
     break;
    }
   case 4:
    {
     _glUniform4fv(HEAP32[HEAP32[$9 >> 2] >> 2] | 0, HEAPU8[(HEAP32[$9 >> 2] | 0) + 8 >> 0] | 0 | 0, HEAP32[$10 >> 2] | 0);
     break L20;
     break;
    }
   case 5:
    {
     _glUniformMatrix4fv(HEAP32[HEAP32[$9 >> 2] >> 2] | 0, HEAPU8[(HEAP32[$9 >> 2] | 0) + 8 >> 0] | 0 | 0, 0, HEAP32[$10 >> 2] | 0);
     break L20;
     break;
    }
   default:
    {
     label = 22;
     break L16;
    }
   }
  } while (0);
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 if ((label | 0) == 14) ___assert_fail(36991, 17628, 6877, 36619); else if ((label | 0) == 22) ___assert_fail(43639, 17628, 6901, 36619); else if ((label | 0) == 24) {
  STACKTOP = sp;
  return;
 }
}

function _stbi__decode_jpeg_image($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $57 = 0, $6 = 0, $62 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = 0;
 while (1) {
  $9 = HEAP32[$2 >> 2] | 0;
  if ((HEAP32[$3 >> 2] | 0) >= 4) break;
  HEAP32[$9 + 18076 + ((HEAP32[$3 >> 2] | 0) * 72 | 0) + 48 >> 2] = 0;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 18076 + ((HEAP32[$3 >> 2] | 0) * 72 | 0) + 52 >> 2] = 0;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 }
 HEAP32[$9 + 18436 >> 2] = 0;
 if (!(_stbi__decode_jpeg_header(HEAP32[$2 >> 2] | 0, 0) | 0)) {
  HEAP32[$1 >> 2] = 0;
  $89 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $89 | 0;
 }
 HEAP32[$3 >> 2] = (_stbi__get_marker(HEAP32[$2 >> 2] | 0) | 0) & 255;
 L9 : while (1) {
  if (!((HEAP32[$3 >> 2] | 0) == 217 ^ 1)) {
   label = 27;
   break;
  }
  L12 : do if ((HEAP32[$3 >> 2] | 0) == 218) {
   if (!(_stbi__process_scan_header(HEAP32[$2 >> 2] | 0) | 0)) {
    label = 10;
    break L9;
   }
   if (!(_stbi__parse_entropy_coded_data(HEAP32[$2 >> 2] | 0) | 0)) {
    label = 12;
    break L9;
   }
   if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) == 255) {
    do {
     if (!((_stbi__at_eof(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0) != 0 ^ 1)) break L12;
     HEAP32[$4 >> 2] = (_stbi__get8(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0) & 255;
    } while ((HEAP32[$4 >> 2] | 0) != 255);
    $57 = _stbi__get8(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0;
    HEAP8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] = $57;
   }
  } else {
   $62 = HEAP32[$2 >> 2] | 0;
   if ((HEAP32[$3 >> 2] | 0) != 220) if (_stbi__process_marker($62, HEAP32[$3 >> 2] | 0) | 0) break; else {
    label = 25;
    break L9;
   }
   HEAP32[$5 >> 2] = _stbi__get16be(HEAP32[$62 >> 2] | 0) | 0;
   HEAP32[$6 >> 2] = _stbi__get16be(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0;
   if ((HEAP32[$5 >> 2] | 0) != 4) {
    label = 21;
    break L9;
   }
   if ((HEAP32[$6 >> 2] | 0) != (HEAP32[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 4 >> 2] | 0)) {
    label = 23;
    break L9;
   }
  } while (0);
  HEAP32[$3 >> 2] = (_stbi__get_marker(HEAP32[$2 >> 2] | 0) | 0) & 255;
 }
 if ((label | 0) == 10) {
  HEAP32[$1 >> 2] = 0;
  $89 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $89 | 0;
 } else if ((label | 0) == 12) {
  HEAP32[$1 >> 2] = 0;
  $89 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $89 | 0;
 } else if ((label | 0) == 21) {
  HEAP32[$1 >> 2] = _stbi__err(45083) | 0;
  $89 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $89 | 0;
 } else if ((label | 0) == 23) {
  HEAP32[$1 >> 2] = _stbi__err(45095) | 0;
  $89 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $89 | 0;
 } else if ((label | 0) == 25) {
  HEAP32[$1 >> 2] = 0;
  $89 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $89 | 0;
 } else if ((label | 0) == 27) {
  if (HEAP32[(HEAP32[$2 >> 2] | 0) + 18380 >> 2] | 0) _stbi__jpeg_finish(HEAP32[$2 >> 2] | 0);
  HEAP32[$1 >> 2] = 1;
  $89 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $89 | 0;
 }
 return 0;
}

function __sg_gl_update_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $103 = 0, $11 = 0, $111 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) != 0)) ___assert_fail(37226, 17628, 6984, 37289);
 $20 = (HEAP32[$2 >> 2] | 0) + 12 + 72 | 0;
 $22 = (HEAP32[$20 >> 2] | 0) + 1 | 0;
 HEAP32[$20 >> 2] = $22;
 if (($22 | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 68 >> 2] | 0)) HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 72 >> 2] = 0;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 72 >> 2] | 0) >= 2) ___assert_fail(37309, 17628, 6989, 37289);
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 88 + 12 + (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 72 >> 2] << 2) >> 2] | 0)) ___assert_fail(37355, 17628, 6990, 37289);
 __sg_gl_cache_store_texture_binding(0);
 __sg_gl_cache_bind_texture(0, HEAP32[(HEAP32[$2 >> 2] | 0) + 88 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 88 + 12 + (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 72 >> 2] << 2) >> 2] | 0);
 HEAP32[$4 >> 2] = __sg_gl_teximage_format(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
 HEAP32[$5 >> 2] = __sg_gl_teximage_type(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
 HEAP32[$6 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) == 2 ? 6 : 1;
 HEAP32[$7 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 20 >> 2];
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
  HEAP32[$9 >> 2] = 0;
  while (1) {
   if ((HEAP32[$9 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) break;
   HEAP32[$10 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 88 >> 2];
   if (2 == (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) HEAP32[$10 >> 2] = __sg_gl_cubeface_target(HEAP32[$8 >> 2] | 0) | 0;
   HEAP32[$11 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + (HEAP32[$8 >> 2] << 7) + (HEAP32[$9 >> 2] << 3) >> 2];
   $103 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 8 >> 2] >> HEAP32[$9 >> 2];
   HEAP32[$12 >> 2] = $103;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) == 0 ? 1 : $103;
   $111 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 12 >> 2] >> HEAP32[$9 >> 2];
   HEAP32[$13 >> 2] = $111;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) == 0 ? 1 : $111;
   if (1 == (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) label = 17; else if (2 == (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) label = 17;
   if ((label | 0) == 17) {
    label = 0;
    _glTexSubImage2D(HEAP32[$10 >> 2] | 0, HEAP32[$9 >> 2] | 0, 0, 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$11 >> 2] | 0);
   }
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
  }
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 __sg_gl_cache_restore_texture_binding(0);
 STACKTOP = sp;
 return;
}

function _stbi__jpeg_huff_decode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $121 = 0, $126 = 0, $135 = 0, $2 = 0, $3 = 0, $39 = 0, $4 = 0, $44 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$3 >> 2] | 0);
 HEAP32[$6 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 18364 >> 2] | 0) >>> 23 & 511;
 HEAP32[$7 >> 2] = HEAPU8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) >> 0];
 if ((HEAP32[$7 >> 2] | 0) < 255) {
  HEAP32[$8 >> 2] = HEAPU8[(HEAP32[$4 >> 2] | 0) + 1280 + (HEAP32[$7 >> 2] | 0) >> 0];
  if ((HEAP32[$8 >> 2] | 0) > (HEAP32[(HEAP32[$3 >> 2] | 0) + 18368 >> 2] | 0)) {
   HEAP32[$2 >> 2] = -1;
   $135 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $135 | 0;
  } else {
   $39 = (HEAP32[$3 >> 2] | 0) + 18364 | 0;
   HEAP32[$39 >> 2] = HEAP32[$39 >> 2] << HEAP32[$8 >> 2];
   $44 = (HEAP32[$3 >> 2] | 0) + 18368 | 0;
   HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - (HEAP32[$8 >> 2] | 0);
   HEAP32[$2 >> 2] = HEAPU8[(HEAP32[$4 >> 2] | 0) + 1024 + (HEAP32[$7 >> 2] | 0) >> 0];
   $135 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $135 | 0;
  }
 }
 HEAP32[$5 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 18364 >> 2] | 0) >>> 16;
 HEAP32[$7 >> 2] = 10;
 while (1) {
  $64 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$5 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$4 >> 2] | 0) + 1540 + (HEAP32[$7 >> 2] << 2) >> 2] | 0) >>> 0) break;
  HEAP32[$7 >> 2] = $64 + 1;
 }
 if (($64 | 0) == 17) {
  $68 = (HEAP32[$3 >> 2] | 0) + 18368 | 0;
  HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) - 16;
  HEAP32[$2 >> 2] = -1;
  $135 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $135 | 0;
 }
 if ((HEAP32[$7 >> 2] | 0) > (HEAP32[(HEAP32[$3 >> 2] | 0) + 18368 >> 2] | 0)) {
  HEAP32[$2 >> 2] = -1;
  $135 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $135 | 0;
 }
 HEAP32[$6 >> 2] = ((HEAP32[(HEAP32[$3 >> 2] | 0) + 18364 >> 2] | 0) >>> (32 - (HEAP32[$7 >> 2] | 0) | 0) & HEAP32[9760 + (HEAP32[$7 >> 2] << 2) >> 2]) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 1612 + (HEAP32[$7 >> 2] << 2) >> 2] | 0);
 if (((HEAP32[(HEAP32[$3 >> 2] | 0) + 18364 >> 2] | 0) >>> (32 - (HEAPU8[(HEAP32[$4 >> 2] | 0) + 1280 + (HEAP32[$6 >> 2] | 0) >> 0] | 0) | 0) & HEAP32[9760 + ((HEAPU8[(HEAP32[$4 >> 2] | 0) + 1280 + (HEAP32[$6 >> 2] | 0) >> 0] | 0) << 2) >> 2] | 0) != (HEAPU16[(HEAP32[$4 >> 2] | 0) + 512 + (HEAP32[$6 >> 2] << 1) >> 1] | 0 | 0)) ___assert_fail(45353, 43392, 1952, 45435);
 $121 = (HEAP32[$3 >> 2] | 0) + 18368 | 0;
 HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) - (HEAP32[$7 >> 2] | 0);
 $126 = (HEAP32[$3 >> 2] | 0) + 18364 | 0;
 HEAP32[$126 >> 2] = HEAP32[$126 >> 2] << HEAP32[$7 >> 2];
 HEAP32[$2 >> 2] = HEAPU8[(HEAP32[$4 >> 2] | 0) + 1024 + (HEAP32[$6 >> 2] | 0) >> 0];
 $135 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $135 | 0;
}

function __sfons_render_create($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $118 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $68 = 0, $7 = 0, $8 = 0, $85 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3584 | 0;
 $$byval_copy = sp + 3572 | 0;
 $3 = sp + 3568 | 0;
 $4 = sp + 3564 | 0;
 $5 = sp + 3560 | 0;
 $6 = sp + 3556 | 0;
 $7 = sp + 1456 | 0;
 $8 = sp + 1452 | 0;
 $9 = sp + 1448 | 0;
 $10 = sp + 892 | 0;
 $11 = sp + 888 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!((HEAP32[$3 >> 2] | 0) != 0 & (HEAP32[$4 >> 2] | 0) > 8 & (HEAP32[$5 >> 2] | 0) > 8)) ___assert_fail(41028, 24442, 1591, 41068);
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 if (!(HEAP32[HEAP32[$6 >> 2] >> 2] | 0)) {
  _memset($7 | 0, 0, 2100) | 0;
  HEAP32[$7 + 4 >> 2] = 19629;
  HEAP32[$7 + 4 + 12 >> 2] = 41553;
  HEAP32[$7 + 4 + 24 >> 2] = 19638;
  HEAP32[$7 + 4 + 4 >> 2] = 19645;
  HEAP32[$7 + 4 + 8 >> 2] = 0;
  HEAP32[$7 + 4 + 12 + 4 >> 2] = 19645;
  HEAP32[$7 + 4 + 12 + 8 >> 2] = 1;
  HEAP32[$7 + 4 + 24 + 4 >> 2] = 19645;
  HEAP32[$7 + 4 + 24 + 8 >> 2] = 2;
  HEAP32[$8 >> 2] = $7 + 196 + 20;
  HEAP32[HEAP32[$8 >> 2] >> 2] = 128;
  HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] = 41573;
  HEAP32[(HEAP32[$8 >> 2] | 0) + 4 + 4 >> 2] = 4;
  HEAP32[(HEAP32[$8 >> 2] | 0) + 4 + 8 >> 2] = 8;
  HEAP32[$7 + 1144 + 804 >> 2] = 41593;
  HEAP32[$7 + 1144 + 804 + 4 >> 2] = 1;
  HEAP32[$7 + 1144 + 804 + 8 >> 2] = 1;
  HEAP32[$7 + 2092 >> 2] = 41089;
  HEAP32[$7 + 196 >> 2] = 1024;
  HEAP32[$7 + 1144 >> 2] = 1408;
  HEAP32[$7 + 2092 >> 2] = 41112;
  $68 = HEAP32[$6 >> 2] | 0;
  HEAP32[$9 >> 2] = _sg_make_shader($7) | 0;
  HEAP32[$68 >> 2] = HEAP32[$9 >> 2];
 }
 if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0)) {
  _memset($10 | 0, 0, 556) | 0;
  HEAP32[$10 + 4 >> 2] = HEAP32[HEAP32[$6 >> 2] >> 2];
  HEAP8[$10 + 364 + 8 >> 0] = 1;
  HEAP32[$10 + 364 + 8 + 4 >> 2] = 5;
  HEAP32[$10 + 364 + 8 + 8 >> 2] = 6;
  $85 = (HEAP32[$6 >> 2] | 0) + 4 | 0;
  HEAP32[$11 >> 2] = _sgl_make_pipeline($10) | 0;
  HEAP32[$85 >> 2] = HEAP32[$11 >> 2];
 }
 if (HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) {
  HEAP32[$$byval_copy >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2];
  _sg_destroy_image($$byval_copy);
  HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] = 0;
 }
 HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] = HEAP32[$4 >> 2];
 HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] = HEAP32[$5 >> 2];
 if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0)) {
  _memset($12 | 0, 0, 884) | 0;
  HEAP32[$12 + 12 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2];
  HEAP32[$12 + 16 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2];
  HEAP32[$12 + 40 >> 2] = 2;
  HEAP32[$12 + 44 >> 2] = 2;
  HEAP32[$12 + 28 >> 2] = 2;
  HEAP32[$12 + 32 >> 2] = 2;
  $118 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
  HEAP32[$13 >> 2] = _sg_make_image($12) | 0;
  HEAP32[$118 >> 2] = HEAP32[$13 >> 2];
  STACKTOP = sp;
  return 1;
 } else ___assert_fail(41125, 24442, 1674, 41068);
 return 0;
}

function _sgl_draw() {
 var $$byval_copy4 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy4 = sp + 52 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp;
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 3241, 20113);
 if (!((HEAP32[539433] | 0) == 0 & (HEAP32[539425] | 0) > 0 & (HEAP32[539427] | 0) > 0)) {
  __sgl_rewind();
  STACKTOP = sp;
  return;
 }
 HEAP32[$0 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$2 >> 2] = -1;
 _sg_push_debug_group(19519);
 HEAP32[$3 >> 2] = HEAP32[539428];
 HEAP32[$3 + 4 >> 2] = (HEAP32[539425] | 0) * 24;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[539441];
 _sg_update_buffer($$byval_copy4, $3);
 HEAP32[539445] = HEAP32[539441];
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[539427] | 0)) break;
  HEAP32[$5 >> 2] = (HEAP32[539430] | 0) + ((HEAP32[$4 >> 2] | 0) * 24 | 0);
  switch (HEAP32[HEAP32[$5 >> 2] >> 2] | 0) {
  case 1:
   {
    HEAP32[$6 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
    _sg_apply_viewport(HEAP32[HEAP32[$6 >> 2] >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0, HEAP8[(HEAP32[$6 >> 2] | 0) + 16 >> 0] & 1);
    break;
   }
  case 2:
   {
    HEAP32[$7 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
    _sg_apply_scissor_rect(HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, HEAP8[(HEAP32[$7 >> 2] | 0) + 16 >> 0] & 1);
    break;
   }
  case 0:
   {
    HEAP32[$8 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
    if ((HEAP32[HEAP32[$8 >> 2] >> 2] | 0) != (HEAP32[$0 >> 2] | 0)) {
     HEAP32[$$byval_copy4 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
     _sg_apply_pipeline($$byval_copy4);
     HEAP32[$0 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
     HEAP32[$1 >> 2] = 0;
     HEAP32[$2 >> 2] = -1;
    }
    if ((HEAP32[$1 >> 2] | 0) != (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0)) {
     HEAP32[539475] = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2];
     _sg_apply_bindings(2157776);
     HEAP32[$1 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2];
    }
    if ((HEAP32[$2 >> 2] | 0) != (HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] | 0)) {
     HEAP32[$9 >> 2] = (HEAP32[539429] | 0) + (HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] << 7);
     HEAP32[$9 + 4 >> 2] = 128;
     _sg_apply_uniforms(0, 0, $9);
     HEAP32[$2 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2];
    }
    if ((HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0) > 0) _sg_draw(HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0, 1);
    break;
   }
  default:
   {}
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 _sg_pop_debug_group();
 __sgl_rewind();
 STACKTOP = sp;
 return;
}

function _fonsCreateInternal($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $119 = 0, $2 = 0, $3 = 0, $42 = 0, $49 = 0, $58 = 0, $82 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 >> 2] = _malloc(21064) | 0;
 do if (HEAP32[$3 >> 2] | 0) {
  _memset(HEAP32[$3 >> 2] | 0, 0, 21064) | 0;
  dest = HEAP32[$3 >> 2] | 0;
  src = HEAP32[$2 >> 2] | 0;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $10 = _malloc(64e3) | 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 20564 >> 2] = $10;
  if (HEAP32[(HEAP32[$3 >> 2] | 0) + 20564 >> 2] | 0) if (_fons__tt_init(HEAP32[$3 >> 2] | 0) | 0) {
   if (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] & 15](HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0, HEAP32[HEAP32[$3 >> 2] >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0)) break;
   $42 = _fons__allocAtlas(HEAP32[HEAP32[$3 >> 2] >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0, 256) | 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 68 >> 2] = $42;
   if (HEAP32[(HEAP32[$3 >> 2] | 0) + 68 >> 2] | 0) {
    $49 = _malloc(16) | 0;
    HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] = $49;
    if (HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0) {
     $58 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0;
     HEAP32[$58 >> 2] = 0;
     HEAP32[$58 + 4 >> 2] = 0;
     HEAP32[$58 + 8 >> 2] = 0;
     HEAP32[$58 + 12 >> 2] = 0;
     HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] = 4;
     HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] = 0;
     HEAPF32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] = 1.0 / +(HEAP32[HEAP32[$3 >> 2] >> 2] | 0);
     HEAPF32[(HEAP32[$3 >> 2] | 0) + 40 >> 2] = 1.0 / +(HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0);
     $82 = _malloc(Math_imul(HEAP32[HEAP32[$3 >> 2] >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
     HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] = $82;
     if (HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] | 0) {
      _memset(HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] | 0, 0, Math_imul(HEAP32[HEAP32[$3 >> 2] >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
      HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
      HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 4 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
      HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 8 >> 2] = 0;
      HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 12 >> 2] = 0;
      _fons__addWhiteRect(HEAP32[$3 >> 2] | 0, 2, 2);
      _fonsPushState(HEAP32[$3 >> 2] | 0);
      _fonsClearState(HEAP32[$3 >> 2] | 0);
      HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
      $119 = HEAP32[$1 >> 2] | 0;
      STACKTOP = sp;
      return $119 | 0;
     }
    }
   }
  }
 } while (0);
 _fonsDeleteInternal(HEAP32[$3 >> 2] | 0);
 HEAP32[$1 >> 2] = 0;
 $119 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $119 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 97) if ((HEAP8[$0 + 1 >> 0] | 0) == 122) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$1 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$1 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 49058) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 47877) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i25 = 0;
    while (1) {
     if (($$0$i$i$i25 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i25 << 2) >> 2] = 0;
     $$0$i$i$i25 = $$0$i$i$i25 + 1 | 0;
    }
    $30 = HEAP32[$20 >> 2] | 0;
    $31 = $30 + -24 | 0;
    $32 = $31 + 11 | 0;
    if ((HEAP8[$32 >> 0] | 0) < 0) {
     $35 = HEAP32[$31 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($35, $3);
     HEAP32[$30 + -20 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($31, $3);
     HEAP8[$32 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($31);
    HEAP32[$31 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$31 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$31 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$1 = $17;
   }
  }
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 97) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$1 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$1 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 49058) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 47877) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i25 = 0;
    while (1) {
     if (($$0$i$i$i25 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i25 << 2) >> 2] = 0;
     $$0$i$i$i25 = $$0$i$i$i25 + 1 | 0;
    }
    $30 = HEAP32[$20 >> 2] | 0;
    $31 = $30 + -24 | 0;
    $32 = $31 + 11 | 0;
    if ((HEAP8[$32 >> 0] | 0) < 0) {
     $35 = HEAP32[$31 >> 2] | 0;
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($35, $3);
     HEAP32[$30 + -20 >> 2] = 0;
    } else {
     HEAP8[$3 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($31, $3);
     HEAP8[$32 >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($31);
    HEAP32[$31 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$31 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$31 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    $$0$i$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i$i | 0) == 3) break;
     HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$1 = $17;
   }
  }
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN7meshoptL22buildTriangleAdjacencyERNS_17TriangleAdjacencyEPKjmmR17meshopt_Allocator($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$08094 = 0, $$081$lcssa = 0, $$08190 = 0, $$08289 = 0, $$08385 = 0, $$084 = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $60 = 0, $61 = 0, $63 = 0, $68 = 0, $8 = 0, label = 0;
 $5 = ($2 >>> 0) / 3 | 0;
 HEAP32[$0 >> 2] = __ZN17meshopt_Allocator8allocateIjEEPT_m($4, $3) | 0;
 $8 = $0 + 4 | 0;
 HEAP32[$8 >> 2] = __ZN17meshopt_Allocator8allocateIjEEPT_m($4, $3) | 0;
 $10 = $0 + 8 | 0;
 HEAP32[$10 >> 2] = __ZN17meshopt_Allocator8allocateIjEEPT_m($4, $2) | 0;
 _memset(HEAP32[$0 >> 2] | 0, 0, $3 << 2 | 0) | 0;
 L1 : do if (!$2) if (!$3) {
  $$081$lcssa = 0;
  $68 = 1;
 } else label = 4; else {
  $14 = HEAP32[$0 >> 2] | 0;
  $$08094 = 0;
  while (1) {
   $19 = HEAP32[$1 + ($$08094 << 2) >> 2] | 0;
   if ($19 >>> 0 >= $3 >>> 0) break;
   $21 = $14 + ($19 << 2) | 0;
   HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1;
   $$08094 = $$08094 + 1 | 0;
   if ($$08094 >>> 0 >= $2 >>> 0) {
    label = 4;
    break L1;
   }
  }
  ___assert_fail(42943, 42633, 55, 42969);
 } while (0);
 if ((label | 0) == 4) {
  $16 = HEAP32[$8 >> 2] | 0;
  $17 = HEAP32[$0 >> 2] | 0;
  $$08190 = 0;
  $$08289 = 0;
  while (1) {
   HEAP32[$16 + ($$08289 << 2) >> 2] = $$08190;
   $30 = (HEAP32[$17 + ($$08289 << 2) >> 2] | 0) + $$08190 | 0;
   $$08289 = $$08289 + 1 | 0;
   if (($$08289 | 0) == ($3 | 0)) {
    $$081$lcssa = $30;
    $68 = 0;
    break;
   } else $$08190 = $30;
  }
 }
 if (($$081$lcssa | 0) != ($2 | 0)) ___assert_fail(42992, 42633, 69, 42969);
 if ($2 >>> 0 > 2) {
  $33 = HEAP32[$10 >> 2] | 0;
  $34 = HEAP32[$8 >> 2] | 0;
  $$08385 = 0;
  do {
   $37 = $$08385 * 3 | 0;
   $42 = HEAP32[$1 + ($37 + 1 << 2) >> 2] | 0;
   $45 = HEAP32[$1 + ($37 + 2 << 2) >> 2] | 0;
   $46 = $34 + (HEAP32[$1 + ($37 << 2) >> 2] << 2) | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   HEAP32[$46 >> 2] = $47 + 1;
   HEAP32[$33 + ($47 << 2) >> 2] = $$08385;
   $50 = $34 + ($42 << 2) | 0;
   $51 = HEAP32[$50 >> 2] | 0;
   HEAP32[$50 >> 2] = $51 + 1;
   HEAP32[$33 + ($51 << 2) >> 2] = $$08385;
   $54 = $34 + ($45 << 2) | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   HEAP32[$54 >> 2] = $55 + 1;
   HEAP32[$33 + ($55 << 2) >> 2] = $$08385;
   $$08385 = $$08385 + 1 | 0;
  } while ($$08385 >>> 0 < $5 >>> 0);
 }
 L21 : do if (!$68) {
  $35 = HEAP32[$8 >> 2] | 0;
  $36 = HEAP32[$0 >> 2] | 0;
  $$084 = 0;
  while (1) {
   $60 = $35 + ($$084 << 2) | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   $63 = HEAP32[$36 + ($$084 << 2) >> 2] | 0;
   if ($61 >>> 0 < $63 >>> 0) break;
   HEAP32[$60 >> 2] = $61 - $63;
   $$084 = $$084 + 1 | 0;
   if ($$084 >>> 0 >= $3 >>> 0) break L21;
  }
  ___assert_fail(43014, 42633, 84, 42969);
 } while (0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEmmPKcm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$014 = 0, $$069 = 0, $$070 = 0, $$074 = 0, $$215 = 0, $$3 = 0, $$316 = 0, $$373 = 0, $$377 = 0, $$4 = 0, $$sroa$speculated18 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $25 = 0, $3 = 0, $34 = 0, $4 = 0, $41 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $0 + 11 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 if ($5) {
  $9 = HEAP32[$0 + 4 >> 2] | 0;
  $$sroa$speculated18 = $9 >>> 0 < 11 ? $9 : 11;
  $15 = $9;
  $17 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $6 = $4 & 255;
  $$sroa$speculated18 = $6 >>> 0 < 11 ? $6 : 11;
  $15 = $6;
  $17 = 10;
 }
 if (($$sroa$speculated18 - $15 + $17 | 0) >>> 0 < $1 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $17, $1 - $$sroa$speculated18 + $15 - $17 | 0, $15, 0, $$sroa$speculated18, $1, 49298); else {
  if ($5) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
  do if (($$sroa$speculated18 | 0) == ($1 | 0)) {
   $$215 = $1;
   $$3 = 0;
   $$373 = 49298;
   $$377 = $1;
   label = 17;
  } else {
   $21 = $15 - $$sroa$speculated18 | 0;
   if (!$21) {
    $$215 = $$sroa$speculated18;
    $$3 = 0;
    $$373 = 49298;
    $$377 = $1;
    label = 17;
   } else {
    if ($$sroa$speculated18 >>> 0 > $1 >>> 0) {
     __ZNSt3__211char_traitsIcE4moveEPcPKcm($25, 49298, $1) | 0;
     __ZNSt3__211char_traitsIcE4moveEPcPKcm($25 + $1 | 0, $25 + $$sroa$speculated18 | 0, $21) | 0;
     $$316 = $$sroa$speculated18;
     $$4 = $1;
     break;
    }
    do if ($25 >>> 0 < 49298 >>> 0 & ($25 + $15 | 0) >>> 0 > 49298 >>> 0) if (($25 + $$sroa$speculated18 | 0) >>> 0 > 49298 >>> 0) {
     __ZNSt3__211char_traitsIcE4moveEPcPKcm($25, 49298, $$sroa$speculated18) | 0;
     $$014 = 0;
     $$069 = $$sroa$speculated18;
     $$070 = 49298 + $1 | 0;
     $$074 = $1 - $$sroa$speculated18 | 0;
     break;
    } else {
     $$014 = $$sroa$speculated18;
     $$069 = 0;
     $$070 = 49298 + ($1 - $$sroa$speculated18) | 0;
     $$074 = $1;
     break;
    } else {
     $$014 = $$sroa$speculated18;
     $$069 = 0;
     $$070 = 49298;
     $$074 = $1;
    } while (0);
    $34 = $25 + $$069 | 0;
    __ZNSt3__211char_traitsIcE4moveEPcPKcm($34 + $$074 | 0, $34 + $$014 | 0, $21) | 0;
    $$215 = $$014;
    $$3 = $$069;
    $$373 = $$070;
    $$377 = $$074;
    label = 17;
   }
  } while (0);
  if ((label | 0) == 17) {
   __ZNSt3__211char_traitsIcE4moveEPcPKcm($25 + $$3 | 0, $$373, $$377) | 0;
   $$316 = $$215;
   $$4 = $$377;
  }
  $41 = $$4 - $$316 + $15 | 0;
  if ((HEAP8[$3 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $41; else HEAP8[$3 >> 0] = $41;
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($25 + $41 | 0, $2);
 }
 STACKTOP = sp;
 return;
}

function _sgl_end() {
 var $$byval_copy4 = 0, $0 = 0, $1 = 0, $2 = 0, $23 = 0, $24 = 0, $27 = 0, $3 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $65 = 0, $7 = 0, $78 = 0, $81 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy4 = sp + 24 | 0;
 $0 = sp + 29 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2954, 19997);
 if (!(HEAP8[2157736] & 1)) ___assert_fail(20005, 19399, 2955, 19997);
 if ((HEAP32[539425] | 0) < (HEAP32[539431] | 0)) ___assert_fail(20019, 19399, 2956, 19997);
 HEAP8[2157736] = 0;
 HEAP8[$0 >> 0] = HEAP8[2157761] & 1;
 if (HEAP8[$0 >> 0] & 1) {
  HEAP8[2157761] = 0;
  HEAP32[$1 >> 2] = __sgl_next_uniform() | 0;
  if (HEAP32[$1 >> 2] | 0) {
   $23 = HEAP32[$1 >> 2] | 0;
   $24 = __sgl_matrix_projection() | 0;
   __sgl_matmul4($23, $24, __sgl_matrix_modelview() | 0);
   $27 = (HEAP32[$1 >> 2] | 0) + 64 | 0;
   dest = $27;
   src = __sgl_matrix_texture() | 0;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
  }
 }
 $31 = HEAP32[539438] | 0;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[2157980 + (HEAP32[539494] << 2) >> 2];
 HEAP32[$2 >> 2] = __sgl_get_pipeline($$byval_copy4, $31) | 0;
 if (HEAP8[2157760] & 1) HEAP32[$3 >> 2] = HEAP32[539439]; else HEAP32[$3 >> 2] = HEAP32[539442];
 HEAP32[$4 >> 2] = __sgl_prev_command() | 0;
 HEAP8[$5 >> 0] = 0;
 if (HEAP32[$4 >> 2] | 0) if (((HEAP32[539438] | 0) != 2 ? (HEAP32[HEAP32[$4 >> 2] >> 2] | 0) == 0 : 0) & (HEAP32[539438] | 0) != 4) if (!(HEAP8[$0 >> 0] & 1)) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 + 4 >> 2] | 0) == (HEAP32[$3 >> 2] | 0)) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) HEAP8[$5 >> 0] = 1;
 if (HEAP8[$5 >> 0] & 1) {
  $65 = (HEAP32[$4 >> 2] | 0) + 4 + 12 | 0;
  HEAP32[$65 >> 2] = (HEAP32[$65 >> 2] | 0) + ((HEAP32[539425] | 0) - (HEAP32[539431] | 0));
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = __sgl_next_command() | 0;
 if (!(HEAP32[$6 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[539426] | 0) <= 0) ___assert_fail(20055, 19399, 2991, 19997);
 HEAP32[HEAP32[$6 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 4 + 4 >> 2] = HEAP32[$3 >> 2];
 $78 = (HEAP32[$6 >> 2] | 0) + 4 | 0;
 $81 = HEAP32[539438] | 0;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[2157980 + (HEAP32[539494] << 2) >> 2];
 HEAP32[$7 >> 2] = __sgl_get_pipeline($$byval_copy4, $81) | 0;
 HEAP32[$78 >> 2] = HEAP32[$7 >> 2];
 HEAP32[(HEAP32[$6 >> 2] | 0) + 4 + 8 >> 2] = HEAP32[539431];
 HEAP32[(HEAP32[$6 >> 2] | 0) + 4 + 12 >> 2] = (HEAP32[539425] | 0) - (HEAP32[539431] | 0);
 HEAP32[(HEAP32[$6 >> 2] | 0) + 4 + 16 >> 2] = (HEAP32[539426] | 0) - 1;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$049$idx = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $11 = 0, $12 = 0, $17 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $4 = sp;
 $5 = sp + 64 | 0;
 L1 : do if (($1 - $0 | 0) >>> 0 > 16) {
  $$049$idx = 0;
  $$050 = $3;
  while (1) {
   $11 = HEAP8[$0 + $$049$idx >> 0] | 0;
   $12 = $11 << 24 >> 24;
   if (($$049$idx | 0) == 16) {
    label = 6;
    break;
   }
   if (!(_isxdigit($12) | 0)) break;
   $17 = HEAP8[$0 + ($$049$idx | 1) >> 0] | 0;
   HEAP8[$$050 >> 0] = ((($12 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $12 << 4) + $17 + (($17 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $$049$idx = $$049$idx + 2 | 0;
   $$050 = $$050 + 1 | 0;
  }
  do if ((label | 0) == 6) {
   if ($11 << 24 >> 24 == 69) {
    L11 : do if (($$050 | 0) != ($3 | 0)) {
     $$0$i$i = $$050;
     $$07$i$i = $3;
     while (1) {
      $25 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $25 >>> 0) break L11;
      $27 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$25 >> 0] | 0;
      HEAP8[$25 >> 0] = $27;
      $$0$i$i = $25;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    HEAP32[$4 + 12 >> 2] = 0;
    HEAP32[$4 + 16 >> 2] = 0;
    HEAP32[$4 + 20 >> 2] = 0;
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$3 >> 3];
    $31 = _snprintf($4, 32, 49188, $vararg_buffer) | 0;
    if ($31 >>> 0 > 31) break;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($5, $4, $31);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($vararg_buffer, $5);
    $33 = $2 + 4 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    if ($34 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($34, $vararg_buffer);
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($vararg_buffer);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$247$ph = $0 + 17 | 0;
   } else $$247$ph = $0;
   $$3 = $$247$ph;
   break L1;
  } while (0);
  $$3 = $0;
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function ___stpncpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03754 = 0, $$038$lcssa = 0, $$03867 = 0, $$039$lcssa = 0, $$03966 = 0, $$042$lcssa = 0, $$04265 = 0, $$055 = 0, $$1$lcssa = 0, $$140 = 0, $$143 = 0, $$153 = 0, $$2 = 0, $$24147 = 0, $$24446 = 0, $$345 = 0, $$348 = 0, $$4 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $22 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $37 = 0, label = 0;
 $3 = $1;
 L1 : do if (!(($3 ^ $0) & 3)) {
  $10 = ($2 | 0) != 0;
  if ($10 & ($3 & 3 | 0) != 0) {
   $$03867 = $2;
   $$03966 = $1;
   $$04265 = $0;
   while (1) {
    $11 = HEAP8[$$03966 >> 0] | 0;
    HEAP8[$$04265 >> 0] = $11;
    if (!($11 << 24 >> 24)) {
     $$345 = $$04265;
     $$4 = $$03867;
     break L1;
    }
    $13 = $$03867 + -1 | 0;
    $14 = $$03966 + 1 | 0;
    $15 = $$04265 + 1 | 0;
    $19 = ($13 | 0) != 0;
    if ($19 & ($14 & 3 | 0) != 0) {
     $$03867 = $13;
     $$03966 = $14;
     $$04265 = $15;
    } else {
     $$038$lcssa = $13;
     $$039$lcssa = $14;
     $$042$lcssa = $15;
     $$lcssa = $19;
     break;
    }
   }
  } else {
   $$038$lcssa = $2;
   $$039$lcssa = $1;
   $$042$lcssa = $0;
   $$lcssa = $10;
  }
  if ($$lcssa) if (!(HEAP8[$$039$lcssa >> 0] | 0)) {
   $$345 = $$042$lcssa;
   $$4 = $$038$lcssa;
  } else {
   L11 : do if ($$038$lcssa >>> 0 > 3) {
    $$03754 = $$042$lcssa;
    $$055 = $$039$lcssa;
    $$153 = $$038$lcssa;
    while (1) {
     $22 = HEAP32[$$055 >> 2] | 0;
     if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009 | 0) {
      $$0$lcssa = $$055;
      $$037$lcssa = $$03754;
      $$1$lcssa = $$153;
      break L11;
     }
     HEAP32[$$03754 >> 2] = $22;
     $28 = $$153 + -4 | 0;
     $29 = $$055 + 4 | 0;
     $30 = $$03754 + 4 | 0;
     if ($28 >>> 0 > 3) {
      $$03754 = $30;
      $$055 = $29;
      $$153 = $28;
     } else {
      $$0$lcssa = $29;
      $$037$lcssa = $30;
      $$1$lcssa = $28;
      break;
     }
    }
   } else {
    $$0$lcssa = $$039$lcssa;
    $$037$lcssa = $$042$lcssa;
    $$1$lcssa = $$038$lcssa;
   } while (0);
   $$140 = $$0$lcssa;
   $$143 = $$037$lcssa;
   $$2 = $$1$lcssa;
   label = 13;
  } else {
   $$345 = $$042$lcssa;
   $$4 = 0;
  }
 } else {
  $$140 = $1;
  $$143 = $0;
  $$2 = $2;
  label = 13;
 } while (0);
 L17 : do if ((label | 0) == 13) if (!$$2) {
  $$345 = $$143;
  $$4 = 0;
 } else {
  $$24147 = $$140;
  $$24446 = $$143;
  $$348 = $$2;
  while (1) {
   $33 = HEAP8[$$24147 >> 0] | 0;
   HEAP8[$$24446 >> 0] = $33;
   if (!($33 << 24 >> 24)) {
    $$345 = $$24446;
    $$4 = $$348;
    break L17;
   }
   $$348 = $$348 + -1 | 0;
   $37 = $$24446 + 1 | 0;
   if (!$$348) {
    $$345 = $37;
    $$4 = 0;
    break;
   } else {
    $$24147 = $$24147 + 1 | 0;
    $$24446 = $37;
   }
  }
 } while (0);
 _memset($$345 | 0, 0, $$4 | 0) | 0;
 return $$345 | 0;
}

function __sapp_emsc_key_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $45 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $6 = sp + 17 | 0;
 $7 = sp;
 $8 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[sp + 4 >> 2] = $2;
 HEAP8[$6 >> 0] = 1;
 if (__sapp_events_enabled() | 0) {
  switch (HEAP32[$3 >> 2] | 0) {
  case 2:
   {
    HEAP32[$7 >> 2] = 1;
    break;
   }
  case 3:
   {
    HEAP32[$7 >> 2] = 2;
    break;
   }
  case 1:
   {
    HEAP32[$7 >> 2] = 3;
    break;
   }
  default:
   HEAP32[$7 >> 2] = 0;
  }
  if (HEAP32[$7 >> 2] | 0) {
   HEAP8[$8 >> 0] = 0;
   __sapp_init_event(HEAP32[$7 >> 2] | 0);
   HEAP8[50972] = (HEAP32[(HEAP32[$4 >> 2] | 0) + 84 >> 2] | 0) != 0 & 1;
   if (HEAP32[(HEAP32[$4 >> 2] | 0) + 68 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 2;
   if (HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 1;
   if (HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 4;
   if (HEAP32[(HEAP32[$4 >> 2] | 0) + 80 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 8;
   $45 = HEAP32[$4 >> 2] | 0;
   L22 : do if ((HEAP32[$7 >> 2] | 0) == 3) {
    HEAP32[12742] = HEAP32[$45 + 152 >> 2];
    if (HEAP32[(HEAP32[$4 >> 2] | 0) + 80 >> 2] | 0) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 152 >> 2] | 0) == 118) HEAP8[$6 >> 0] = 0;
   } else {
    HEAP32[12741] = __sapp_translate_key(HEAP32[$45 + 156 >> 2] | 0) | 0;
    if ((HEAP32[$7 >> 2] | 0) == 1 & (HEAP32[12741] | 0) != 343 & (HEAP32[12741] | 0) != 347) if (HEAP32[12744] & 8 | 0) HEAP8[$8 >> 0] = 1;
    switch (HEAP32[12741] | 0) {
    case 348:
    case 347:
    case 346:
    case 345:
    case 344:
    case 343:
    case 342:
    case 341:
    case 340:
    case 314:
    case 313:
    case 312:
    case 311:
    case 310:
    case 309:
    case 308:
    case 307:
    case 306:
    case 305:
    case 304:
    case 303:
    case 302:
    case 301:
    case 300:
    case 299:
    case 298:
    case 297:
    case 296:
    case 295:
    case 294:
    case 293:
    case 292:
    case 291:
    case 290:
    case 284:
    case 283:
    case 282:
    case 281:
    case 280:
    case 269:
    case 268:
    case 267:
    case 266:
    case 265:
    case 264:
    case 263:
    case 262:
    case 261:
    case 260:
    case 259:
    case 258:
    case 257:
    case 256:
    case 162:
    case 161:
     {
      break L22;
      break;
     }
    default:
     {}
    }
    HEAP8[$6 >> 0] = 0;
   } while (0);
   if (__sapp_call_event(50952) | 0) HEAP8[$6 >> 0] = 1;
   if (HEAP8[$8 >> 0] & 1) {
    HEAP32[12740] = 2;
    if (__sapp_call_event(50952) | 0) HEAP8[$6 >> 0] = 1;
   }
  }
 }
 __sapp_emsc_update_keyboard_state();
 __sapp_emsc_update_mouse_lock_state();
 STACKTOP = sp;
 return HEAP8[$6 >> 0] & 1 | 0;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE6assignINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa$i$i = 0, $$03$i$i = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy3 = sp + 20 | 0;
 $$byval_copy2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 $7 = HEAP32[$1 >> 2] | 0;
 $8 = HEAP32[$2 >> 2] | 0;
 $10 = $8 - $7 >> 4;
 $11 = $0 + 8 | 0;
 $13 = HEAP32[$0 >> 2] | 0;
 $17 = $13;
 do if ($10 >>> 0 > (HEAP32[$11 >> 2] | 0) - $13 >> 4 >>> 0) {
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE10deallocateEv($0);
  $37 = __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
  if ($37 >>> 0 < $10 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
   $41 = (HEAP32[$11 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0;
   $45 = $41 >> 3;
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8allocateEm($0, $41 >> 4 >>> 0 < $37 >>> 1 >>> 0 ? ($45 >>> 0 < $10 >>> 0 ? $10 : $45) : $37);
   HEAP32[$5 >> 2] = $7;
   HEAP32[$6 >> 2] = $8;
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$6 >> 2];
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($0, $$byval_copy2, $$byval_copy3, $10);
   break;
  }
 } else {
  $18 = $0 + 4 | 0;
  $21 = (HEAP32[$18 >> 2] | 0) - $13 >> 4;
  $22 = $10 >>> 0 > $21 >>> 0;
  $23 = $7;
  $spec$select = $22 ? $23 + ($21 << 4) | 0 : $8;
  $26 = $spec$select;
  if (($23 | 0) == ($26 | 0)) $$0$lcssa$i$i = $17; else {
   $$03$i$i = $17;
   $28 = $23;
   while (1) {
    __ZN8DrPointFaSERKS_($$03$i$i, $28) | 0;
    $28 = $28 + 16 | 0;
    $30 = $$03$i$i + 16 | 0;
    if (($28 | 0) == ($26 | 0)) {
     $$0$lcssa$i$i = $30;
     break;
    } else $$03$i$i = $30;
   }
  }
  if ($22) {
   HEAP32[$3 >> 2] = $spec$select;
   HEAP32[$4 >> 2] = $8;
   $36 = $10 - ((HEAP32[$18 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) | 0;
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$4 >> 2];
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($0, $$byval_copy2, $$byval_copy3, $36);
   break;
  } else {
   HEAP32[$18 >> 2] = $$0$lcssa$i$i;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __sapp_emsc_mouse_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = sp + 24 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[sp + 12 >> 2] = $2;
 $12 = HEAP32[$4 >> 2] | 0;
 if (HEAP8[51177] & 1) {
  HEAPF32[12792] = +(HEAP32[$12 + 44 >> 2] | 0);
  HEAPF32[12793] = +(HEAP32[(HEAP32[$4 >> 2] | 0) + 48 >> 2] | 0);
 } else {
  HEAPF32[$6 >> 2] = +(HEAP32[$12 + 52 >> 2] | 0) * +HEAPF32[12734];
  HEAPF32[$7 >> 2] = +(HEAP32[(HEAP32[$4 >> 2] | 0) + 56 >> 2] | 0) * +HEAPF32[12734];
  if (HEAP8[51178] & 1) {
   HEAPF32[12792] = +HEAPF32[$6 >> 2] - +HEAPF32[12790];
   HEAPF32[12793] = +HEAPF32[$7 >> 2] - +HEAPF32[12791];
  }
  HEAPF32[12790] = +HEAPF32[$6 >> 2];
  HEAPF32[12791] = +HEAPF32[$7 >> 2];
  HEAP8[51178] = 1;
 }
 if (!(__sapp_events_enabled() | 0)) {
  __sapp_emsc_update_keyboard_state();
  STACKTOP = sp;
  return 1;
 }
 if ((HEAPU16[(HEAP32[$4 >> 2] | 0) + 40 >> 1] | 0 | 0) < 0) {
  __sapp_emsc_update_keyboard_state();
  STACKTOP = sp;
  return 1;
 }
 if ((HEAPU16[(HEAP32[$4 >> 2] | 0) + 40 >> 1] | 0 | 0) >= 3) {
  __sapp_emsc_update_keyboard_state();
  STACKTOP = sp;
  return 1;
 }
 HEAP8[$9 >> 0] = 0;
 switch (HEAP32[$3 >> 2] | 0) {
 case 5:
  {
   HEAP32[$8 >> 2] = 4;
   HEAP8[$9 >> 0] = 1;
   break;
  }
 case 6:
  {
   HEAP32[$8 >> 2] = 5;
   HEAP8[$9 >> 0] = 1;
   break;
  }
 case 8:
  {
   HEAP32[$8 >> 2] = 7;
   break;
  }
 case 33:
  {
   HEAP32[$8 >> 2] = 8;
   break;
  }
 case 34:
  {
   HEAP32[$8 >> 2] = 9;
   break;
  }
 default:
  HEAP32[$8 >> 2] = 0;
 }
 if (HEAP32[$8 >> 2] | 0) {
  __sapp_init_event(HEAP32[$8 >> 2] | 0);
  if (HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 2;
  if (HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 1;
  if (HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 4;
  if (HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 8;
  L39 : do if (HEAP8[$9 >> 0] & 1) switch (HEAPU16[(HEAP32[$4 >> 2] | 0) + 40 >> 1] | 0 | 0) {
  case 0:
   {
    HEAP32[12745] = 0;
    break L39;
    break;
   }
  case 1:
   {
    HEAP32[12745] = 2;
    break L39;
    break;
   }
  case 2:
   {
    HEAP32[12745] = 1;
    break L39;
    break;
   }
  default:
   {
    HEAP32[12745] = HEAPU16[(HEAP32[$4 >> 2] | 0) + 40 >> 1];
    break L39;
   }
  } else HEAP32[12745] = 256; while (0);
  __sapp_call_event(50952) | 0;
 }
 if (!(HEAP8[$9 >> 0] & 1)) {
  __sapp_emsc_update_keyboard_state();
  STACKTOP = sp;
  return 1;
 }
 __sapp_emsc_update_mouse_lock_state();
 __sapp_emsc_update_keyboard_state();
 STACKTOP = sp;
 return 1;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$049$idx = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $11 = 0, $12 = 0, $17 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer = sp + 24 | 0;
 $3 = sp + 60 | 0;
 $4 = sp;
 $5 = sp + 48 | 0;
 L1 : do if (($1 - $0 | 0) >>> 0 > 8) {
  $$049$idx = 0;
  $$050 = $3;
  while (1) {
   $11 = HEAP8[$0 + $$049$idx >> 0] | 0;
   $12 = $11 << 24 >> 24;
   if (($$049$idx | 0) == 8) {
    label = 6;
    break;
   }
   if (!(_isxdigit($12) | 0)) break;
   $17 = HEAP8[$0 + ($$049$idx | 1) >> 0] | 0;
   HEAP8[$$050 >> 0] = ((($12 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $12 << 4) + $17 + (($17 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $$049$idx = $$049$idx + 2 | 0;
   $$050 = $$050 + 1 | 0;
  }
  do if ((label | 0) == 6) {
   if ($11 << 24 >> 24 == 69) {
    L11 : do if (($$050 | 0) != ($3 | 0)) {
     $$0$i$i = $$050;
     $$07$i$i = $3;
     while (1) {
      $25 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $25 >>> 0) break L11;
      $27 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$25 >> 0] | 0;
      HEAP8[$25 >> 0] = $27;
      $$0$i$i = $25;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    HEAP32[$4 + 12 >> 2] = 0;
    HEAP32[$4 + 16 >> 2] = 0;
    HEAP32[$4 + 20 >> 2] = 0;
    HEAPF64[$vararg_buffer >> 3] = +HEAPF32[$3 >> 2];
    $32 = _snprintf($4, 24, 49191, $vararg_buffer) | 0;
    if ($32 >>> 0 > 23) break;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($5, $4, $32);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($vararg_buffer, $5);
    $34 = $2 + 4 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    if ($35 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($35, $vararg_buffer);
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($vararg_buffer);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$247$ph = $0 + 9 | 0;
   } else $$247$ph = $0;
   $$3 = $$247$ph;
   break L1;
  } while (0);
  $$3 = $0;
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$049$idx = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $11 = 0, $12 = 0, $17 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer = sp + 48 | 0;
 $3 = sp + 40 | 0;
 $4 = sp;
 $5 = sp + 72 | 0;
 L1 : do if (($1 - $0 | 0) >>> 0 > 20) {
  $$049$idx = 0;
  $$050 = $3;
  while (1) {
   $11 = HEAP8[$0 + $$049$idx >> 0] | 0;
   $12 = $11 << 24 >> 24;
   if (($$049$idx | 0) == 20) {
    label = 6;
    break;
   }
   if (!(_isxdigit($12) | 0)) break;
   $17 = HEAP8[$0 + ($$049$idx | 1) >> 0] | 0;
   HEAP8[$$050 >> 0] = ((($12 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $12 << 4) + $17 + (($17 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $$049$idx = $$049$idx + 2 | 0;
   $$050 = $$050 + 1 | 0;
  }
  do if ((label | 0) == 6) {
   if ($11 << 24 >> 24 == 69) {
    L11 : do if (($$050 | 0) != ($3 | 0)) {
     $$0$i$i = $$050;
     $$07$i$i = $3;
     while (1) {
      $25 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $25 >>> 0) break L11;
      $27 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$25 >> 0] | 0;
      HEAP8[$25 >> 0] = $27;
      $$0$i$i = $25;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    dest = $4;
    stop = dest + 40 | 0;
    do {
     HEAP32[dest >> 2] = 0;
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$3 >> 3];
    $31 = _snprintf($4, 40, 49183, $vararg_buffer) | 0;
    if ($31 >>> 0 > 39) break;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($5, $4, $31);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($vararg_buffer, $5);
    $33 = $2 + 4 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    if ($34 >>> 0 < (HEAP32[$2 + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($34, $vararg_buffer);
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($2, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($vararg_buffer);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$247$ph = $0 + 21 | 0;
   } else $$247$ph = $0;
   $$3 = $$247$ph;
   break L1;
  } while (0);
  $$3 = $0;
 } else $$3 = $0; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN7meshoptL22generateSoftBoundariesEPjPKjmmS2_mjfS0_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 $7 = $7 | 0;
 var $$0$lcssa = 0, $$013 = 0, $$0906 = 0, $$0915 = 0, $$0934 = 0, $$09512 = 0, $$0963 = 0, $$0972 = 0, $$17 = 0, $$192 = 0, $$194 = 0, $$2 = 0, $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $16 = 0, $20 = 0, $28 = 0.0, $33 = 0, $44 = 0, $48 = 0, $58 = 0, $59 = 0, $66 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp;
 _memset($7 | 0, 0, $3 << 2 | 0) | 0;
 HEAP32[$8 >> 2] = 0;
 L1 : do if (!$5) $$0$lcssa = 0; else {
  $11 = ($2 >>> 0) / 3 | 0;
  $$013 = 0;
  $$09512 = 0;
  while (1) {
   $14 = HEAP32[$4 + ($$09512 << 2) >> 2] | 0;
   $$09512 = $$09512 + 1 | 0;
   $16 = $$09512 >>> 0 < $5 >>> 0;
   if ($16) $20 = HEAP32[$4 + ($$09512 << 2) >> 2] | 0; else $20 = $11;
   if ($20 >>> 0 <= $14 >>> 0) break;
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 17;
   $$0963 = $14;
   $$0972 = 0;
   do {
    $33 = $$0963 * 3 | 0;
    $$0972 = (__ZN7meshoptL11updateCacheEjjjjPjRj(HEAP32[$1 + ($33 << 2) >> 2] | 0, HEAP32[$1 + ($33 + 1 << 2) >> 2] | 0, HEAP32[$1 + ($33 + 2 << 2) >> 2] | 0, $7, $8) | 0) + $$0972 | 0;
    $$0963 = $$0963 + 1 | 0;
   } while (($$0963 | 0) != ($20 | 0));
   $28 = +($$0972 >>> 0) / +(($20 - $14 | 0) >>> 0) * $6;
   HEAP32[$0 + ($$013 << 2) >> 2] = $14;
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 17;
   $$0906 = $14;
   $$0915 = 0;
   $$0934 = 0;
   $$17 = $$013 + 1 | 0;
   while (1) {
    $48 = $$0906 * 3 | 0;
    $58 = (__ZN7meshoptL11updateCacheEjjjjPjRj(HEAP32[$1 + ($48 << 2) >> 2] | 0, HEAP32[$1 + ($48 + 1 << 2) >> 2] | 0, HEAP32[$1 + ($48 + 2 << 2) >> 2] | 0, $7, $8) | 0) + $$0934 | 0;
    $59 = $$0915 + 1 | 0;
    if (!(+($58 >>> 0) / +($59 >>> 0) <= $28)) {
     $$192 = $59;
     $$194 = $58;
     $$2 = $$17;
     $$pre$phiZ2D = $$0906 + 1 | 0;
    } else {
     $66 = $$0906 + 1 | 0;
     HEAP32[$0 + ($$17 << 2) >> 2] = $66;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 17;
     $$192 = 0;
     $$194 = 0;
     $$2 = $$17 + 1 | 0;
     $$pre$phiZ2D = $66;
    }
    if (($$pre$phiZ2D | 0) == ($20 | 0)) break; else {
     $$0906 = $$pre$phiZ2D;
     $$0915 = $$192;
     $$0934 = $$194;
     $$17 = $$2;
    }
   }
   $44 = $$2 + -1 | 0;
   $spec$select = (HEAP32[$0 + ($44 << 2) >> 2] | 0) == ($14 | 0) ? $$2 : $44;
   if (!$16) {
    $$0$lcssa = $spec$select;
    break L1;
   } else $$013 = $spec$select;
  }
  ___assert_fail(42525, 42048, 202, 42537);
 } while (0);
 if ($$0$lcssa >>> 0 < $5 >>> 0) ___assert_fail(42560, 42048, 262, 42537);
 if ($$0$lcssa >>> 0 > (($2 >>> 0) / 3 | 0) >>> 0) ___assert_fail(42584, 42048, 263, 42537); else {
  STACKTOP = sp;
  return $$0$lcssa | 0;
 }
 return 0;
}

function __sg_gl_init_caps_gles2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 21 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 19 | 0;
 $3 = sp + 18 | 0;
 $4 = sp + 17 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 15 | 0;
 $7 = sp + 14 | 0;
 $8 = sp + 13 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 4 | 0;
 $11 = sp + 11 | 0;
 $12 = sp + 10 | 0;
 $13 = sp + 9 | 0;
 $14 = sp + 8 | 0;
 $15 = sp;
 HEAP32[539149] = 1;
 HEAP8[$0 >> 0] = 0;
 HEAP8[$1 >> 0] = 0;
 HEAP8[$2 >> 0] = 0;
 HEAP8[$3 >> 0] = 0;
 HEAP8[$4 >> 0] = 0;
 HEAP8[$5 >> 0] = 0;
 HEAP8[$6 >> 0] = 0;
 HEAP8[$7 >> 0] = 0;
 HEAP8[$8 >> 0] = 0;
 HEAP8[$9 >> 0] = 0;
 HEAP32[$10 >> 2] = _glGetString(7939) | 0;
 if (HEAP32[$10 >> 2] | 0) {
  if (_strstr(HEAP32[$10 >> 2] | 0, 25555) | 0) $26 = 1; else $26 = (_strstr(HEAP32[$10 >> 2] | 0, 25581) | 0) != 0;
  HEAP8[$0 >> 0] = $26 & 1;
  HEAP8[$1 >> 0] = (_strstr(HEAP32[$10 >> 2] | 0, 25606) | 0) != 0 & 1;
  HEAP8[$2 >> 0] = (_strstr(HEAP32[$10 >> 2] | 0, 25632) | 0) != 0 & 1;
  if (_strstr(HEAP32[$10 >> 2] | 0, 25658) | 0) $42 = 1; else $42 = (_strstr(HEAP32[$10 >> 2] | 0, 25685) | 0) != 0;
  HEAP8[$3 >> 0] = $42 & 1;
  HEAP8[$4 >> 0] = (_strstr(HEAP32[$10 >> 2] | 0, 25711) | 0) != 0 & 1;
  HEAP8[$5 >> 0] = (_strstr(HEAP32[$10 >> 2] | 0, 25735) | 0) != 0 & 1;
  HEAP8[$6 >> 0] = (_strstr(HEAP32[$10 >> 2] | 0, 25750) | 0) != 0 & 1;
  HEAP8[$7 >> 0] = (_strstr(HEAP32[$10 >> 2] | 0, 25772) | 0) != 0 & 1;
  HEAP8[$8 >> 0] = (_strstr(HEAP32[$10 >> 2] | 0, 25792) | 0) != 0 & 1;
  HEAP8[$9 >> 0] = (_strstr(HEAP32[$10 >> 2] | 0, 25805) | 0) != 0 & 1;
  HEAP8[2157644] = (_strstr(HEAP32[$10 >> 2] | 0, 25823) | 0) != 0 & 1;
 }
 HEAP8[2156601] = 0;
 HEAP8[2156600] = HEAP8[$9 >> 0] & 1;
 HEAP8[2156602] = 0;
 HEAP8[2156603] = 0;
 HEAP8[2156604] = 0;
 HEAP8[2156605] = 0;
 HEAP8[2156606] = 0;
 HEAP8[2156607] = 0;
 HEAP8[2156608] = 0;
 __sg_gl_init_limits();
 HEAP8[$11 >> 0] = 0;
 HEAP8[$12 >> 0] = 0;
 HEAP8[$13 >> 0] = 0;
 HEAP8[$14 >> 0] = 0;
 __sg_gl_init_pixelformats(0);
 if (HEAP8[$5 >> 0] & 1) __sg_gl_init_pixelformats_float(HEAP8[$7 >> 0] & 1, HEAP8[$6 >> 0] & 1, HEAP8[$8 >> 0] & 1);
 if (HEAP8[$0 >> 0] & 1) __sg_gl_init_pixelformats_s3tc();
 if (HEAP8[$1 >> 0] & 1) __sg_gl_init_pixelformats_rgtc();
 if (HEAP8[$2 >> 0] & 1) __sg_gl_init_pixelformats_bptc();
 if (HEAP8[$3 >> 0] & 1) __sg_gl_init_pixelformats_pvrtc();
 if (HEAP8[$4 >> 0] & 1) __sg_gl_init_pixelformats_etc2();
 HEAP32[$15 >> 2] = 0;
 while (1) {
  if ((HEAP32[$15 >> 2] | 0) >= 62) break;
  HEAP8[2156636 + ((HEAP32[$15 >> 2] | 0) * 6 | 0) + 4 >> 0] = 0;
  HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i18 = 0, $$016 = 0, $10 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 $7 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
 if (($7 | 0) == ($0 | 0)) $$016 = $0; else {
  $10 = $2 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($11 | 0)) $$016 = $0; else {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $11 + -24 | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 48150) | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 47877) | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i18 = 0;
   while (1) {
    if (($$0$i$i$i18 | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i18 << 2) >> 2] = 0;
    $$0$i$i$i18 = $$0$i$i$i18 + 1 | 0;
   }
   $20 = HEAP32[$10 >> 2] | 0;
   $21 = $20 + -24 | 0;
   $22 = $21 + 11 | 0;
   if ((HEAP8[$22 >> 0] | 0) < 0) {
    $25 = HEAP32[$21 >> 2] | 0;
    HEAP8[$3 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($25, $3);
    HEAP32[$20 + -20 >> 2] = 0;
   } else {
    HEAP8[$3 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($21, $3);
    HEAP8[$22 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($21);
   HEAP32[$21 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$21 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$21 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   $$0$i$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
   $$016 = $7;
  }
 }
 STACKTOP = sp;
 return $$016 | 0;
}

function _stbi__do_png($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $118 = 0, $12 = 0, $13 = 0, $19 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[$12 >> 2] = $5;
 HEAP32[$13 >> 2] = 0;
 if ((HEAP32[$11 >> 2] | 0) < 0 | (HEAP32[$11 >> 2] | 0) > 4) {
  $19 = (_stbi__err(44183) | 0) != 0;
  HEAP32[$6 >> 2] = $19 ? 0 : 0;
  $118 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 if (_stbi__parse_png_file(HEAP32[$7 >> 2] | 0, 0, HEAP32[$11 >> 2] | 0) | 0) {
  if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0) < 8) HEAP32[HEAP32[$12 >> 2] >> 2] = 8; else HEAP32[HEAP32[$12 >> 2] >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2];
  HEAP32[$13 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2];
  HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] = 0;
  if (HEAP32[$11 >> 2] | 0) if ((HEAP32[$11 >> 2] | 0) != (HEAP32[(HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 12 >> 2] | 0)) {
   $52 = HEAP32[$13 >> 2] | 0;
   if ((HEAP32[HEAP32[$12 >> 2] >> 2] | 0) == 8) HEAP32[$13 >> 2] = _stbi__convert_format($52, HEAP32[(HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 12 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[HEAP32[HEAP32[$7 >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 4 >> 2] | 0) | 0; else HEAP32[$13 >> 2] = _stbi__convert_format16($52, HEAP32[(HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 12 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[HEAP32[HEAP32[$7 >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 4 >> 2] | 0) | 0;
   HEAP32[(HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 12 >> 2] = HEAP32[$11 >> 2];
   if (!(HEAP32[$13 >> 2] | 0)) {
    HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
    $118 = HEAP32[$6 >> 2] | 0;
    STACKTOP = sp;
    return $118 | 0;
   }
  }
  HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[HEAP32[HEAP32[$7 >> 2] >> 2] >> 2];
  HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 4 >> 2];
  if (HEAP32[$10 >> 2] | 0) HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 8 >> 2];
 }
 _free(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] = 0;
 _free(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] = 0;
 _free(HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 $118 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $118 | 0;
}

function __ZN7DrImage12setSimpleBoxEv($0) {
 $0 = $0 | 0;
 var $$08$i$i$i = 0, $$08$i$i$i5 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $28 = 0, $3 = 0, $31 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 12 | 0;
 $3 = sp;
 __ZNK8DrBitmap7polygonEv($2, $0 + 12 | 0);
 __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($1, __ZN10DrPolygonF6pointsEv($2) | 0);
 __ZN10DrPolygonFD2Ev($2);
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE8allocateEm($2, 1);
 __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE18__construct_at_endIPKS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m($2, $3, $3 + 12 | 0, 1);
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($3);
 __ZN10DrPolygonF24ensureWindingOrientationERNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE19Winding_Orientation($1, 1);
 $11 = $0 + 36 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = $0 + 40 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 if (($14 | 0) != ($12 | 0)) {
  $$08$i$i$i = $14;
  do {
   $$08$i$i$i = $$08$i$i$i + -12 | 0;
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($$08$i$i$i);
  } while (($$08$i$i$i | 0) != ($12 | 0));
 }
 HEAP32[$13 >> 2] = $12;
 $18 = $0 + 48 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $20 = $0 + 52 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 if (($21 | 0) == ($19 | 0)) $28 = $12; else {
  $$08$i$i$i5 = $21;
  do {
   $$08$i$i$i5 = $$08$i$i$i5 + -12 | 0;
   __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($$08$i$i$i5);
  } while (($$08$i$i$i5 | 0) != ($19 | 0));
  $28 = HEAP32[$13 >> 2] | 0;
 }
 HEAP32[$20 >> 2] = $19;
 if (($28 | 0) == (HEAP32[$0 + 44 >> 2] | 0)) __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($11, $1); else {
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($28, $1);
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 12;
 }
 $31 = HEAP32[$20 >> 2] | 0;
 if (($31 | 0) == (HEAP32[$0 + 56 >> 2] | 0)) __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($18, $2); else {
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEC2ERKS6_($31, $2);
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 12;
 }
 HEAP8[$0 + 60 >> 0] = 1;
 HEAP8[$0 + 61 >> 0] = 0;
 __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($2);
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;
 return;
}

function _stbi__out_gif_code($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $103 = 0, $124 = 0, $138 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $84 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP16[$3 >> 1] = $1;
 if ((HEAP16[(HEAP32[$2 >> 2] | 0) + 2088 + (HEAPU16[$3 >> 1] << 2) >> 1] | 0) >= 0) _stbi__out_gif_code(HEAP32[$2 >> 2] | 0, HEAP16[(HEAP32[$2 >> 2] | 0) + 2088 + (HEAPU16[$3 >> 1] << 2) >> 1] | 0);
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 34892 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 34884 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 34888 >> 2] | 0) + (HEAP32[(HEAP32[$2 >> 2] | 0) + 34892 >> 2] | 0);
 HEAP32[$4 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$6 >> 2] | 0);
 HEAP8[(HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) / 4 | 0) >> 0] = 1;
 HEAP32[$5 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 34856 >> 2] | 0) + (HEAPU8[(HEAP32[$2 >> 2] | 0) + 2088 + (HEAPU16[$3 >> 1] << 2) + 3 >> 0] << 2);
 if ((HEAPU8[(HEAP32[$5 >> 2] | 0) + 3 >> 0] | 0) > 128) {
  HEAP8[HEAP32[$4 >> 2] >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] | 0;
  HEAP8[(HEAP32[$4 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0;
  HEAP8[(HEAP32[$4 >> 2] | 0) + 2 >> 0] = HEAP8[HEAP32[$5 >> 2] >> 0] | 0;
  HEAP8[(HEAP32[$4 >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 3 >> 0] | 0;
 }
 $84 = (HEAP32[$2 >> 2] | 0) + 34888 | 0;
 HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 4;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 34888 >> 2] | 0) < (HEAP32[(HEAP32[$2 >> 2] | 0) + 34880 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$2 >> 2] | 0) + 34888 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 34872 >> 2];
 $103 = (HEAP32[$2 >> 2] | 0) + 34892 | 0;
 HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + (HEAP32[(HEAP32[$2 >> 2] | 0) + 34864 >> 2] | 0);
 while (1) {
  if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 34892 >> 2] | 0) < (HEAP32[(HEAP32[$2 >> 2] | 0) + 34884 >> 2] | 0)) {
   label = 11;
   break;
  }
  if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 34860 >> 2] | 0) <= 0) {
   label = 11;
   break;
  }
  $124 = Math_imul(1 << HEAP32[(HEAP32[$2 >> 2] | 0) + 34860 >> 2], HEAP32[(HEAP32[$2 >> 2] | 0) + 34896 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 34864 >> 2] = $124;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 34892 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 34876 >> 2] | 0) + (HEAP32[(HEAP32[$2 >> 2] | 0) + 34864 >> 2] >> 1);
  $138 = (HEAP32[$2 >> 2] | 0) + 34860 | 0;
  HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + -1;
 }
 if ((label | 0) == 11) {
  STACKTOP = sp;
  return;
 }
}

function _pop_arg_656($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $100 = 0, $109 = 0, $11 = 0, $110 = 0.0, $17 = 0, $18 = 0, $21 = 0, $30 = 0, $31 = 0, $32 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $57 = 0, $58 = 0, $60 = 0, $63 = 0, $72 = 0, $73 = 0, $74 = 0, $83 = 0, $84 = 0, $86 = 0, $89 = 0, $98 = 0, $99 = 0;
 L1 : do if ($1 >>> 0 <= 20) do switch ($1 | 0) {
 case 9:
  {
   $10 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $11 = HEAP32[$10 >> 2] | 0;
   HEAP32[$2 >> 2] = $10 + 4;
   HEAP32[$0 >> 2] = $11;
   break L1;
   break;
  }
 case 10:
  {
   $17 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $18 = HEAP32[$17 >> 2] | 0;
   HEAP32[$2 >> 2] = $17 + 4;
   $21 = $0;
   HEAP32[$21 >> 2] = $18;
   HEAP32[$21 + 4 >> 2] = (($18 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $30 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $31 = HEAP32[$30 >> 2] | 0;
   HEAP32[$2 >> 2] = $30 + 4;
   $32 = $0;
   HEAP32[$32 >> 2] = $31;
   HEAP32[$32 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $41 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $42 = $41;
   $44 = HEAP32[$42 >> 2] | 0;
   $47 = HEAP32[$42 + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = $41 + 8;
   $48 = $0;
   HEAP32[$48 >> 2] = $44;
   HEAP32[$48 + 4 >> 2] = $47;
   break L1;
   break;
  }
 case 13:
  {
   $57 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $58 = HEAP32[$57 >> 2] | 0;
   HEAP32[$2 >> 2] = $57 + 4;
   $60 = ($58 & 65535) << 16 >> 16;
   $63 = $0;
   HEAP32[$63 >> 2] = $60;
   HEAP32[$63 + 4 >> 2] = (($60 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $72 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $73 = HEAP32[$72 >> 2] | 0;
   HEAP32[$2 >> 2] = $72 + 4;
   $74 = $0;
   HEAP32[$74 >> 2] = $73 & 65535;
   HEAP32[$74 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $83 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $84 = HEAP32[$83 >> 2] | 0;
   HEAP32[$2 >> 2] = $83 + 4;
   $86 = ($84 & 255) << 24 >> 24;
   $89 = $0;
   HEAP32[$89 >> 2] = $86;
   HEAP32[$89 + 4 >> 2] = (($86 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $98 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $99 = HEAP32[$98 >> 2] | 0;
   HEAP32[$2 >> 2] = $98 + 4;
   $100 = $0;
   HEAP32[$100 >> 2] = $99 & 255;
   HEAP32[$100 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $109 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $110 = +HEAPF64[$109 >> 3];
   HEAP32[$2 >> 2] = $109 + 8;
   HEAPF64[$0 >> 3] = $110;
   break L1;
   break;
  }
 case 18:
  {
   FUNCTION_TABLE_vii[$3 & 3]($0, $2);
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _meshopt_optimizeOverdraw($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = +$6;
 var $$0 = 0, $$0129145 = 0, $$0130$lcssa = 0, $$0130144 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $36 = 0, $37 = 0, $43 = 0, $46 = 0, $48 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $7 = sp;
 $8 = ($2 >>> 0) / 3 | 0;
 if ($2 - ($8 * 3 | 0) | 0) ___assert_fail(43058, 42048, 274, 42135);
 if (($5 + -1 | 0) >>> 0 >= 256) ___assert_fail(42160, 42048, 275, 42135);
 if ($5 & 3 | 0) ___assert_fail(42222, 42048, 276, 42135);
 __ZN17meshopt_AllocatorC2Ev($7);
 if (!(($2 | 0) == 0 | ($4 | 0) == 0)) {
  if (($0 | 0) == ($1 | 0)) {
   $18 = __ZN17meshopt_Allocator8allocateIjEEPT_m($7, $2) | 0;
   _memcpy($18 | 0, $0 | 0, $2 << 2 | 0) | 0;
   $$0 = $18;
  } else $$0 = $1;
  $20 = __ZN17meshopt_Allocator8allocateIjEEPT_m($7, $4) | 0;
  $21 = __ZN17meshopt_Allocator8allocateIjEEPT_m($7, $8) | 0;
  $22 = __ZN7meshoptL22generateHardBoundariesEPjPKjmmjS0_($21, $$0, $2, $4, $20) | 0;
  $24 = __ZN17meshopt_Allocator8allocateIjEEPT_m($7, $8 + 1 | 0) | 0;
  $25 = __ZN7meshoptL22generateSoftBoundariesEPjPKjmmS2_mjfS0_($24, $$0, $2, $4, $21, $22, $6, $20) | 0;
  $26 = __ZN17meshopt_Allocator8allocateIfEEPT_m($7, $25) | 0;
  __ZN7meshoptL17calculateSortDataEPfPKjmPKfmS2_m($26, $$0, $2, $3, $5, $24, $25);
  $27 = __ZN17meshopt_Allocator8allocateItEEPT_m($7, $25) | 0;
  $28 = __ZN17meshopt_Allocator8allocateIjEEPT_m($7, $25) | 0;
  __ZN7meshoptL23calculateSortOrderRadixEPjPKfPtm($28, $26, $27, $25);
  L15 : do if (!$25) $$0130$lcssa = 0; else {
   $$0129145 = 0;
   $$0130144 = 0;
   while (1) {
    $32 = HEAP32[$28 + ($$0129145 << 2) >> 2] | 0;
    if ($32 >>> 0 >= $25 >>> 0) {
     label = 14;
     break;
    }
    $36 = (HEAP32[$24 + ($32 << 2) >> 2] | 0) * 3 | 0;
    $37 = $32 + 1 | 0;
    if ($37 >>> 0 < $25 >>> 0) $43 = (HEAP32[$24 + ($37 << 2) >> 2] | 0) * 3 | 0; else $43 = $2;
    if ($43 >>> 0 <= $36 >>> 0) {
     label = 18;
     break;
    }
    $46 = $43 - $36 | 0;
    _memcpy($0 + ($$0130144 << 2) | 0, $$0 + ($36 << 2) | 0, $46 << 2 | 0) | 0;
    $48 = $46 + $$0130144 | 0;
    $$0129145 = $$0129145 + 1 | 0;
    if ($$0129145 >>> 0 >= $25 >>> 0) {
     $$0130$lcssa = $48;
     break L15;
    } else $$0130144 = $48;
   }
   if ((label | 0) == 14) ___assert_fail(42267, 42048, 322, 42135); else if ((label | 0) == 18) ___assert_fail(42291, 42048, 326, 42135);
  } while (0);
  if (($$0130$lcssa | 0) != ($2 | 0)) ___assert_fail(42992, 42048, 332, 42135);
 }
 __ZN17meshopt_AllocatorD2Ev($7);
 STACKTOP = sp;
 return;
}

function __sg_validate_apply_pipeline($0) {
 $0 = $0 | 0;
 var $$pre_trunc = 0, $1 = 0, $114 = 0, $2 = 0, $3 = 0, $4 = 0, $45 = 0, $5 = 0, $56 = 0, $6 = 0, $87 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 __sg_validate_begin();
 __sg_validate((HEAP32[$0 >> 2] | 0) != 0, 53);
 HEAP32[$2 >> 2] = __sg_lookup_pipeline(2156476, HEAP32[$0 >> 2] | 0) | 0;
 __sg_validate((HEAP32[$2 >> 2] | 0) != 0, 54);
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAP8[$1 >> 0] = (__sg_validate_end() | 0) & 1;
  $$pre_trunc = HEAP8[$1 >> 0] | 0;
  $114 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $114 | 0;
 }
 __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) == 2, 55);
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(35981, 17628, 13617, 35993);
 __sg_validate((HEAP32[HEAP32[(HEAP32[$2 >> 2] | 0) + 84 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0), 56);
 __sg_validate((HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 84 >> 2] | 0) + 8 >> 2] | 0) == 2, 57);
 HEAP32[$3 >> 2] = __sg_lookup_pass(2156476, HEAP32[539115] | 0) | 0;
 $45 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 16 >> 2] | 0;
 do if (HEAP32[$3 >> 2] | 0) {
  __sg_validate(($45 | 0) == (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0), 58);
  HEAP32[$4 >> 2] = 0;
  while (1) {
   $56 = HEAP32[$3 >> 2] | 0;
   if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 16 >> 2] | 0)) break;
   HEAP32[$5 >> 2] = __sg_pass_color_image($56, HEAP32[$4 >> 2] | 0) | 0;
   __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 20 + (HEAP32[$4 >> 2] << 2) >> 2] | 0) == (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 + 28 >> 2] | 0), 59);
   __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 40 >> 2] | 0) == (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 + 32 >> 2] | 0), 61);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
  }
  HEAP32[$6 >> 2] = __sg_pass_ds_image($56) | 0;
  $87 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 36 >> 2] | 0;
  if (HEAP32[$6 >> 2] | 0) {
   __sg_validate(($87 | 0) == (HEAP32[(HEAP32[$6 >> 2] | 0) + 12 + 28 >> 2] | 0), 60);
   break;
  } else {
   __sg_validate(($87 | 0) == 1, 60);
   break;
  }
 } else {
  __sg_validate(($45 | 0) == 1, 58);
  __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 20 >> 2] | 0) == (HEAP32[539087] | 0), 59);
  __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 36 >> 2] | 0) == (HEAP32[539088] | 0), 60);
  __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 40 >> 2] | 0) == (HEAP32[539089] | 0), 61);
 } while (0);
 HEAP8[$1 >> 0] = (__sg_validate_end() | 0) & 1;
 $$pre_trunc = HEAP8[$1 >> 0] | 0;
 $114 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $114 | 0;
}

function __ZN6DrMesh12optimizeMeshEv($0) {
 $0 = $0 | 0;
 var $$02633 = 0, $$032 = 0, $1 = 0, $10 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 __ZN6DrMeshC2Ev($1);
 $3 = __ZNK6DrMesh11vertexCountEv($0) | 0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEEC2Em($2, $3);
 $5 = $0 + 12 | 0;
 $7 = _meshopt_generateVertexRemap(HEAP32[$2 >> 2] | 0, 0, $3, HEAP32[$5 >> 2] | 0, $3, 44) | 0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEm($1, $3);
 _meshopt_remapIndexBuffer(HEAP32[$1 >> 2] | 0, 0, $3, HEAP32[$2 >> 2] | 0);
 $10 = $1 + 12 | 0;
 __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE6resizeEm($10, $7);
 _meshopt_remapVertexBuffer(HEAP32[$10 >> 2] | 0, HEAP32[$5 >> 2] | 0, $3, 44, HEAP32[$2 >> 2] | 0);
 $14 = HEAP32[$1 >> 2] | 0;
 $15 = $1 + 4 | 0;
 $19 = $1 + 16 | 0;
 _meshopt_optimizeVertexCache($14, $14, (HEAP32[$15 >> 2] | 0) - $14 >> 2, ((HEAP32[$19 >> 2] | 0) - (HEAP32[$10 >> 2] | 0) | 0) / 44 | 0);
 $24 = HEAP32[$1 >> 2] | 0;
 $28 = HEAP32[$10 >> 2] | 0;
 _meshopt_optimizeOverdraw($24, $24, (HEAP32[$15 >> 2] | 0) - $24 >> 2, $28, ((HEAP32[$19 >> 2] | 0) - $28 | 0) / 44 | 0, 44, 1.0499999523162842);
 $32 = HEAP32[$10 >> 2] | 0;
 $33 = HEAP32[$1 >> 2] | 0;
 _meshopt_optimizeVertexFetch($32, $33, (HEAP32[$15 >> 2] | 0) - $33 >> 2, $32, ((HEAP32[$19 >> 2] | 0) - $32 | 0) / 44 | 0, 44) | 0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEm($0, (HEAP32[$15 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) >> 2);
 __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE6resizeEm($5, ((HEAP32[$19 >> 2] | 0) - (HEAP32[$10 >> 2] | 0) | 0) / 44 | 0);
 $49 = HEAP32[$15 >> 2] | 0;
 $50 = HEAP32[$1 >> 2] | 0;
 $52 = $50;
 if (($49 | 0) != ($50 | 0)) {
  $53 = HEAP32[$0 >> 2] | 0;
  $55 = $49 - $50 >> 2;
  $$02633 = 0;
  do {
   HEAP32[$53 + ($$02633 << 2) >> 2] = HEAP32[$52 + ($$02633 << 2) >> 2];
   $$02633 = $$02633 + 1 | 0;
  } while ($$02633 >>> 0 < $55 >>> 0);
 }
 $56 = HEAP32[$19 >> 2] | 0;
 $57 = HEAP32[$10 >> 2] | 0;
 $59 = $57;
 if (($56 | 0) != ($57 | 0)) {
  $61 = ($56 - $57 | 0) / 44 | 0;
  $$032 = 0;
  do {
   dest = (HEAP32[$5 >> 2] | 0) + ($$032 * 44 | 0) | 0;
   src = $59 + ($$032 * 44 | 0) | 0;
   stop = dest + 44 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $$032 = $$032 + 1 | 0;
  } while ($$032 >>> 0 < $61 >>> 0);
 }
 __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($2);
 __ZN6DrMeshD2Ev($1);
 STACKTOP = sp;
 return;
}

function _stbi__expand_png_palette($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[sp + 32 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$10 >> 2] = Math_imul(HEAP32[HEAP32[HEAP32[$5 >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$5 >> 2] >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$13 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2];
 HEAP32[$11 >> 2] = _stbi__malloc_mad2(HEAP32[$10 >> 2] | 0, HEAP32[$8 >> 2] | 0, 0) | 0;
 if (!(HEAP32[$11 >> 2] | 0)) {
  HEAP32[$4 >> 2] = _stbi__err(43490) | 0;
  $113 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $113 | 0;
 }
 HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
 $35 = (HEAP32[$8 >> 2] | 0) == 3;
 HEAP32[$9 >> 2] = 0;
 L5 : do if ($35) while (1) {
  if ((HEAP32[$9 >> 2] | 0) >>> 0 >= (HEAP32[$10 >> 2] | 0) >>> 0) break L5;
  HEAP32[$14 >> 2] = (HEAPU8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) >> 0] | 0) << 2;
  HEAP8[HEAP32[$11 >> 2] >> 0] = HEAP8[(HEAP32[$6 >> 2] | 0) + (HEAP32[$14 >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[$11 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$14 >> 2] | 0) + 1) >> 0] | 0;
  HEAP8[(HEAP32[$11 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$14 >> 2] | 0) + 2) >> 0] | 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 3;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
 } else while (1) {
  if ((HEAP32[$9 >> 2] | 0) >>> 0 >= (HEAP32[$10 >> 2] | 0) >>> 0) break L5;
  HEAP32[$15 >> 2] = (HEAPU8[(HEAP32[$13 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) >> 0] | 0) << 2;
  HEAP8[HEAP32[$11 >> 2] >> 0] = HEAP8[(HEAP32[$6 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[$11 >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 1) >> 0] | 0;
  HEAP8[(HEAP32[$11 >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 2) >> 0] | 0;
  HEAP8[(HEAP32[$11 >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 3) >> 0] | 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 4;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
 } while (0);
 _free(HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$4 >> 2] = 1;
 $113 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $113 | 0;
}

function _stbi__hdr_to_ldr($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $25 = 0, $32 = 0, $4 = 0, $45 = 0, $5 = 0, $6 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $9 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 20 | 0;
 $10 = sp + 16 | 0;
 $11 = sp + 12 | 0;
 $12 = sp + 8 | 0;
 $13 = sp + 4 | 0;
 $14 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if (!(HEAP32[$5 >> 2] | 0)) {
  HEAP32[$4 >> 2] = 0;
  $104 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $104 | 0;
 }
 HEAP32[$12 >> 2] = _stbi__malloc_mad3(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, 0) | 0;
 if (!(HEAP32[$12 >> 2] | 0)) {
  _free(HEAP32[$5 >> 2] | 0);
  $25 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$4 >> 2] = $25 ? 0 : 0;
  $104 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $104 | 0;
 }
 $32 = HEAP32[$8 >> 2] | 0;
 if (HEAP32[$8 >> 2] & 1 | 0) HEAP32[$11 >> 2] = $32; else HEAP32[$11 >> 2] = $32 - 1;
 HEAP32[$9 >> 2] = 0;
 while (1) {
  if ((HEAP32[$9 >> 2] | 0) >= (Math_imul(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0)) break;
  HEAP32[$10 >> 2] = 0;
  while (1) {
   if ((HEAP32[$10 >> 2] | 0) >= (HEAP32[$11 >> 2] | 0)) break;
   $45 = Math_imul(HEAP32[$9 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
   HEAPF32[$13 >> 2] = +Math_pow(+(+HEAPF32[(HEAP32[$5 >> 2] | 0) + ($45 + (HEAP32[$10 >> 2] | 0) << 2) >> 2] * 1.0), +(.45454543828964233)) * 255.0 + .5;
   if (+HEAPF32[$13 >> 2] < 0.0) HEAPF32[$13 >> 2] = 0.0;
   if (+HEAPF32[$13 >> 2] > 255.0) HEAPF32[$13 >> 2] = 255.0;
   $67 = Math_imul(HEAP32[$9 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
   HEAP8[(HEAP32[$12 >> 2] | 0) + ($67 + (HEAP32[$10 >> 2] | 0)) >> 0] = ~~+HEAPF32[$13 >> 2];
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
  }
  if ((HEAP32[$10 >> 2] | 0) < (HEAP32[$8 >> 2] | 0)) {
   $79 = Math_imul(HEAP32[$9 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
   HEAPF32[$14 >> 2] = +HEAPF32[(HEAP32[$5 >> 2] | 0) + ($79 + (HEAP32[$10 >> 2] | 0) << 2) >> 2] * 255.0 + .5;
   if (+HEAPF32[$14 >> 2] < 0.0) HEAPF32[$14 >> 2] = 0.0;
   if (+HEAPF32[$14 >> 2] > 255.0) HEAPF32[$14 >> 2] = 255.0;
   $96 = Math_imul(HEAP32[$9 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
   HEAP8[(HEAP32[$12 >> 2] | 0) + ($96 + (HEAP32[$10 >> 2] | 0)) >> 0] = ~~+HEAPF32[$14 >> 2];
  }
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
 }
 _free(HEAP32[$5 >> 2] | 0);
 HEAP32[$4 >> 2] = HEAP32[$12 >> 2];
 $104 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $104 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$025 = 0, $$127 = 0, $14 = 0, $16 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 L1 : do if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 116) {
  $14 = HEAP8[$0 + 1 >> 0] | 0;
  switch ($14 << 24 >> 24) {
  case 105:
  case 101:
   break;
  default:
   {
    $$127 = $0;
    break L1;
   }
  }
  $16 = $0 + 2 | 0;
  if ($14 << 24 >> 24 == 101) $$025 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0; else $$025 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($$025 | 0) == ($16 | 0)) $$127 = $0; else {
   $21 = $2 + 4 | 0;
   $22 = HEAP32[$21 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($22 | 0)) $$127 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $22 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 48082) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 47877) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i30 = 0;
    while (1) {
     if (($$0$i$i$i30 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i30 << 2) >> 2] = 0;
     $$0$i$i$i30 = $$0$i$i$i30 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$21 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$127 = $$025;
   }
  }
 } else $$127 = $0; else $$127 = $0; while (0);
 STACKTOP = sp;
 return $$127 | 0;
}

function _stbi__de_iphone($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $6 = sp + 24 | 0;
 $7 = sp + 23 | 0;
 $8 = sp + 22 | 0;
 $9 = sp + 21 | 0;
 $10 = sp + 20 | 0;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[HEAP32[$1 >> 2] >> 2];
 HEAP32[$4 >> 2] = Math_imul(HEAP32[HEAP32[$2 >> 2] >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$5 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2];
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) == 3) {
  HEAP32[$3 >> 2] = 0;
  while (1) {
   if ((HEAP32[$3 >> 2] | 0) >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) break;
   HEAP8[$6 >> 0] = HEAP8[HEAP32[$5 >> 2] >> 0] | 0;
   HEAP8[HEAP32[$5 >> 2] >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = HEAP8[$6 >> 0] | 0;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 3;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) != 4) ___assert_fail(44447, 43392, 4766, 44465);
 HEAP32[$3 >> 2] = 0;
 if (!0) {
  while (1) {
   if ((HEAP32[$3 >> 2] | 0) >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) break;
   HEAP8[$10 >> 0] = HEAP8[HEAP32[$5 >> 2] >> 0] | 0;
   HEAP8[HEAP32[$5 >> 2] >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = HEAP8[$10 >> 0] | 0;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
 while (1) {
  if ((HEAP32[$3 >> 2] | 0) >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) break;
  HEAP8[$7 >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 3 >> 0] | 0;
  HEAP8[$8 >> 0] = HEAP8[HEAP32[$5 >> 2] >> 0] | 0;
  if (HEAP8[$7 >> 0] | 0) {
   HEAP8[$9 >> 0] = (HEAPU8[$7 >> 0] | 0) / 2 | 0;
   HEAP8[HEAP32[$5 >> 2] >> 0] = (((HEAPU8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] | 0) * 255 | 0) + (HEAPU8[$9 >> 0] | 0) | 0) / (HEAPU8[$7 >> 0] | 0) | 0;
   HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = (((HEAPU8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) * 255 | 0) + (HEAPU8[$9 >> 0] | 0) | 0) / (HEAPU8[$7 >> 0] | 0) | 0;
   HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = (((HEAPU8[$8 >> 0] | 0) * 255 | 0) + (HEAPU8[$9 >> 0] | 0) | 0) / (HEAPU8[$7 >> 0] | 0) | 0;
  } else {
   HEAP8[HEAP32[$5 >> 2] >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = HEAP8[$8 >> 0] | 0;
  }
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN8DrBitmap4copyER6DrRect($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$05564 = 0, $$05667 = 0, $$06066 = 0, $$065 = 0, $$byval_copy = 0, $14 = 0, $17 = 0, $20 = 0, $23 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 28 | 0;
 $3 = sp;
 $4 = sp + 24 | 0;
 $5 = __ZN6DrRect4leftEv($2) | 0;
 $6 = __ZN6DrRect3topEv($2) | 0;
 if (($5 | 0) < 0) {
  $8 = $2 + 8 | 0;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $5;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) - $5;
 }
 if (($6 | 0) < 0) {
  $14 = $2 + 12 | 0;
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $6;
  $17 = $2 + 4 | 0;
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) - $6;
 }
 $20 = $2 + 8 | 0;
 do if ((HEAP32[$20 >> 2] | 0) < 1) label = 7; else {
  $23 = $2 + 12 | 0;
  if ((HEAP32[$23 >> 2] | 0) < 1) label = 7; else {
   $26 = __ZN6DrRect5rightEv($2) | 0;
   $28 = HEAP32[$1 + 4 >> 2] | 0;
   if (($26 | 0) >= ($28 | 0)) HEAP32[$20 >> 2] = $28 - (__ZN6DrRect4leftEv($2) | 0);
   $32 = __ZN6DrRect6bottomEv($2) | 0;
   $34 = HEAP32[$1 + 8 >> 2] | 0;
   if (($32 | 0) < ($34 | 0)) $41 = HEAP32[$23 >> 2] | 0; else {
    $37 = $34 - (__ZN6DrRect3topEv($2) | 0) | 0;
    HEAP32[$23 >> 2] = $37;
    $41 = $37;
   }
   $38 = HEAP32[$20 >> 2] | 0;
   if (($38 | 0) < 1 | ($41 | 0) < 1) {
    __ZN8DrBitmapC2Eii($0, 0, 0);
    break;
   }
   __ZN8DrBitmapC2Eii($3, $38, $41);
   $42 = __ZN6DrRect4leftEv($2) | 0;
   $43 = $3 + 4 | 0;
   if ((HEAP32[$43 >> 2] | 0) > 0) {
    $46 = $3 + 8 | 0;
    $$05667 = 0;
    $$06066 = $42;
    while (1) {
     $47 = __ZN6DrRect3topEv($2) | 0;
     if ((HEAP32[$46 >> 2] | 0) > 0) {
      $$05564 = $47;
      $$065 = 0;
      while (1) {
       __ZNK8DrBitmap8getPixelEii($4, $1, $$06066, $$05564);
       HEAP8[$$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
       HEAP8[$$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
       HEAP8[$$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
       HEAP8[$$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
       __ZN8DrBitmap8setPixelEii7DrColor($3, $$05667, $$065, $$byval_copy);
       $$065 = $$065 + 1 | 0;
       if (($$065 | 0) >= (HEAP32[$46 >> 2] | 0)) break; else $$05564 = $$05564 + 1 | 0;
      }
     }
     $$05667 = $$05667 + 1 | 0;
     if (($$05667 | 0) >= (HEAP32[$43 >> 2] | 0)) break; else $$06066 = $$06066 + 1 | 0;
    }
   }
   __ZN8DrBitmapC2ERKS_($0, $3);
   __ZN8DrBitmapD2Ev($3);
  }
 } while (0);
 if ((label | 0) == 7) __ZN8DrBitmapC2Eii($0, 0, 0);
 STACKTOP = sp;
 return;
}

function _sfetch_setup($0) {
 $0 = $0 | 0;
 var $1 = 0, $109 = 0, $111 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $38 = 0, $51 = 0, $64 = 0, $80 = 0, $82 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17623, 21538, 2337, 21787);
 if (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) ___assert_fail(17706, 21538, 2338, 21787);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) ___assert_fail(17706, 21538, 2338, 21787);
 if (HEAP32[542635] | 0) ___assert_fail(21800, 21538, 2339, 21787);
 HEAP32[542635] = _malloc(1264) | 0;
 if (!(HEAP32[542635] | 0)) ___assert_fail(21813, 21538, 2341, 21787);
 _memset(HEAP32[542635] | 0, 0, 1264) | 0;
 HEAP32[$2 >> 2] = __sfetch_ctx() | 0;
 $21 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
 $22 = HEAP32[$1 >> 2] | 0;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$21 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
 HEAP32[$21 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
 HEAP32[$21 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
 HEAP32[$21 + 16 >> 2] = HEAP32[$22 + 16 >> 2];
 HEAP8[HEAP32[$2 >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$2 >> 2] | 0) + 1 >> 0] = 1;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 4 >> 2] | 0)) $38 = 128; else $38 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 4 >> 2] | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 4 >> 2] = $38;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 8 >> 2] | 0)) $51 = 1; else $51 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 8 >> 2] | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 8 >> 2] = $51;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 12 >> 2] | 0)) $64 = 1; else $64 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 12 >> 2] | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 12 >> 2] = $64;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0 > 16) {
  HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 8 >> 2] = 16;
  _puts(21821) | 0;
 }
 $80 = (__sfetch_pool_init((HEAP32[$2 >> 2] | 0) + 24 | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 4 >> 2] | 0) | 0) & 1;
 $82 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
 HEAP8[$82 >> 0] = (HEAP8[$82 >> 0] & 1 & $80 | 0) != 0 & 1;
 HEAP32[$3 >> 2] = 0;
 while (1) {
  if ((HEAP32[$3 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) break;
  $109 = (__sfetch_channel_init((HEAP32[$2 >> 2] | 0) + 48 + ((HEAP32[$3 >> 2] | 0) * 76 | 0) | 0, HEAP32[$2 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 4 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 12 >> 2] | 0, 1) | 0) & 1;
  $111 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
  HEAP8[$111 >> 0] = (HEAP8[$111 >> 0] & 1 & $109 | 0) != 0 & 1;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$127 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 L1 : do if (($1 - $0 | 0) > 3) if ((HEAP8[$0 >> 0] | 0) == 68) {
  switch (HEAP8[$0 + 1 >> 0] | 0) {
  case 84:
  case 116:
   break;
  default:
   {
    $$127 = $0;
    break L1;
   }
  }
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0) | ($17 | 0) == ($1 | 0)) $$127 = $0; else if ((HEAP8[$17 >> 0] | 0) == 69) {
   $23 = $2 + 4 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($24 | 0)) $$127 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $24 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 49195) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 47877) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i30 = 0;
    while (1) {
     if (($$0$i$i$i30 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i30 << 2) >> 2] = 0;
     $$0$i$i$i30 = $$0$i$i$i30 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$23 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$127 = $17 + 1 | 0;
   }
  } else $$127 = $0;
 } else $$127 = $0; else $$127 = $0; while (0);
 STACKTOP = sp;
 return $$127 | 0;
}

function _stbi__parse_uncompressed_block($0) {
 $0 = $0 | 0;
 var $1 = 0, $104 = 0, $107 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$2 >> 2] = $0;
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] & 7 | 0) _stbi__zreceive(HEAP32[$2 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] & 7) | 0;
 HEAP32[$6 >> 2] = 0;
 while (1) {
  $21 = HEAP32[$2 >> 2] | 0;
  if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) <= 0) break;
  $25 = HEAP32[$21 + 12 >> 2] & 255;
  $26 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $26 + 1;
  HEAP8[$3 + $26 >> 0] = $25;
  $30 = (HEAP32[$2 >> 2] | 0) + 12 | 0;
  HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) >>> 8;
  $34 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
  HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) - 8;
 }
 if (HEAP32[$21 + 8 >> 2] | 0) ___assert_fail(44954, 43392, 4148, 44971);
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= 4) break;
  $43 = _stbi__zget8(HEAP32[$2 >> 2] | 0) | 0;
  $44 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $44 + 1;
  HEAP8[$3 + $44 >> 0] = $43;
 }
 HEAP32[$4 >> 2] = ((HEAPU8[$3 + 1 >> 0] | 0) << 8) + (HEAPU8[$3 >> 0] | 0);
 HEAP32[$5 >> 2] = ((HEAPU8[$3 + 3 >> 0] | 0) << 8) + (HEAPU8[$3 + 2 >> 0] | 0);
 if ((HEAP32[$5 >> 2] | 0) != (HEAP32[$4 >> 2] ^ 65535 | 0)) {
  HEAP32[$1 >> 2] = _stbi__err(45002) | 0;
  $107 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $107 | 0;
 }
 if (((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + (HEAP32[$4 >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  HEAP32[$1 >> 2] = _stbi__err(45015) | 0;
  $107 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $107 | 0;
 }
 if (((HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] | 0) >>> 0) if (!(_stbi__zexpand(HEAP32[$2 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0)) {
  HEAP32[$1 >> 2] = 0;
  $107 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $107 | 0;
 }
 _memcpy(HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0, HEAP32[HEAP32[$2 >> 2] >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
 $99 = HEAP32[$2 >> 2] | 0;
 HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
 $104 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
 HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
 HEAP32[$1 >> 2] = 1;
 $107 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $107 | 0;
}

function __ZNSt3__227__insertion_sort_incompleteIRN13TPPLPartition12VertexSorterEPlEEbT0_S5_T_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$lcssa = 0, $$06277 = 0, $$06476 = 0, $$06974 = 0, $$06974$phi = 0, $$165 = 0, $$170 = 0, $$170$phi = 0, $$5 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $9 = 0;
 L1 : do switch ($1 - $0 >> 2 | 0) {
 case 1:
 case 0:
  {
   $$5 = 1;
   break;
  }
 case 2:
  {
   $7 = $1 + -4 | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   $9 = HEAP32[$0 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($2, $8, $9) | 0) {
    HEAP32[$0 >> 2] = $8;
    HEAP32[$7 >> 2] = $9;
    $$5 = 1;
   } else $$5 = 1;
   break;
  }
 case 3:
  {
   __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($0, $0 + 4 | 0, $1 + -4 | 0, $2) | 0;
   $$5 = 1;
   break;
  }
 case 4:
  {
   __ZNSt3__27__sort4IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_T_($0, $0 + 4 | 0, $0 + 8 | 0, $1 + -4 | 0, $2) | 0;
   $$5 = 1;
   break;
  }
 case 5:
  {
   __ZNSt3__27__sort5IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_S5_T_($0, $0 + 4 | 0, $0 + 8 | 0, $0 + 12 | 0, $1 + -4 | 0, $2) | 0;
   $$5 = 1;
   break;
  }
 default:
  {
   $20 = $0 + 8 | 0;
   __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($0, $0 + 4 | 0, $20, $2) | 0;
   $22 = $0 + 12 | 0;
   if (($22 | 0) == ($1 | 0)) $$5 = 1; else {
    $$06277 = $22;
    $$06476 = 0;
    $$06974 = $20;
    while (1) {
     $24 = HEAP32[$$06277 >> 2] | 0;
     $25 = HEAP32[$$06974 >> 2] | 0;
     if (__ZN13TPPLPartition12VertexSorterclEll($2, $24, $25) | 0) {
      $$0 = $$06974;
      $$170 = $$06277;
      $27 = $25;
      while (1) {
       HEAP32[$$170 >> 2] = $27;
       if (($$0 | 0) == ($0 | 0)) {
        $$0$lcssa = $0;
        break;
       }
       $29 = $$0 + -4 | 0;
       $27 = HEAP32[$29 >> 2] | 0;
       if (!(__ZN13TPPLPartition12VertexSorterclEll($2, $24, $27) | 0)) {
        $$0$lcssa = $$0;
        break;
       } else {
        $$170$phi = $$0;
        $$0 = $29;
        $$170 = $$170$phi;
       }
      }
      HEAP32[$$0$lcssa >> 2] = $24;
      $32 = $$06476 + 1 | 0;
      if (($32 | 0) == 8) break; else $$165 = $32;
     } else $$165 = $$06476;
     $34 = $$06277 + 4 | 0;
     if (($34 | 0) == ($1 | 0)) {
      $$5 = 1;
      break L1;
     } else {
      $$06974$phi = $$06277;
      $$06277 = $34;
      $$06476 = $$165;
      $$06974 = $$06974$phi;
     }
    }
    $$5 = ($$06277 + 4 | 0) == ($1 | 0);
   }
  }
 } while (0);
 return $$5 | 0;
}

function __sgl_init_pipeline($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $82 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 $2 = sp + 580 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$2 >> 2] = $1;
 if (!((HEAP32[$0 >> 2] | 0) != 0 & (HEAP32[$2 >> 2] | 0) != 0)) ___assert_fail(37620, 19399, 2233, 37660);
 _memcpy($3 | 0, HEAP32[$2 >> 2] | 0, 556) | 0;
 HEAP32[$3 + 8 >> 2] = 24;
 HEAP32[$4 >> 2] = $3 + 8 + 96;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] = 3;
 HEAP32[$5 >> 2] = $3 + 8 + 96 + 12;
 HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 12;
 HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] = 2;
 HEAP32[$6 >> 2] = $3 + 8 + 96 + 24;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] = 20;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] = 8;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[$3 + 4 >> 2] = HEAP32[539443];
 HEAP32[$3 + 512 >> 2] = 1;
 HEAP32[$3 + 524 >> 2] = HEAP32[539420];
 if (!(HEAP32[$3 + 520 >> 2] | 0)) HEAP32[$3 + 520 >> 2] = HEAP32[539421];
 HEAP32[$3 + 296 >> 2] = HEAP32[539419];
 HEAP32[$3 + 364 >> 2] = HEAP32[539418];
 if (!(HEAP32[$3 + 364 + 4 >> 2] | 0)) HEAP32[$3 + 364 + 4 >> 2] = 7;
 HEAP32[$7 >> 2] = __sgl_lookup_pipeline(HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$7 >> 2] | 0)) ___assert_fail(37679, 19399, 2268, 37660);
 if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) != 1) ___assert_fail(37679, 19399, 2268, 37660);
 HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] = 2;
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= 6) break;
  switch (HEAP32[$8 >> 2] | 0) {
  case 0:
   {
    HEAP32[$3 + 508 >> 2] = 1;
    break;
   }
  case 1:
   {
    HEAP32[$3 + 508 >> 2] = 2;
    break;
   }
  case 2:
   {
    HEAP32[$3 + 508 >> 2] = 3;
    break;
   }
  case 3:
   {
    HEAP32[$3 + 508 >> 2] = 4;
    break;
   }
  case 5:
  case 4:
   {
    HEAP32[$3 + 508 >> 2] = 5;
    break;
   }
  default:
   {}
  }
  $82 = (HEAP32[$7 >> 2] | 0) + 8 + (HEAP32[$8 >> 2] << 2) | 0;
  if (5 == (HEAP32[$8 >> 2] | 0)) HEAP32[$82 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 + 12 >> 2]; else {
   HEAP32[$9 >> 2] = _sg_make_pipeline($3) | 0;
   HEAP32[$82 >> 2] = HEAP32[$9 >> 2];
   if (!(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 + (HEAP32[$8 >> 2] << 2) >> 2] | 0)) {
    _puts(37730) | 0;
    HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] = 3;
   }
  }
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _fons__atlasAddRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $91 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 44 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 20 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 12 | 0;
 $15 = sp + 8 | 0;
 $16 = sp + 4 | 0;
 $17 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2];
 HEAP32[$12 >> 2] = HEAP32[HEAP32[$6 >> 2] >> 2];
 HEAP32[$13 >> 2] = -1;
 HEAP32[$14 >> 2] = -1;
 HEAP32[$15 >> 2] = -1;
 HEAP32[$16 >> 2] = 0;
 while (1) {
  if ((HEAP32[$16 >> 2] | 0) >= (HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0)) break;
  HEAP32[$17 >> 2] = _fons__atlasRectFits(HEAP32[$6 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
  do if ((HEAP32[$17 >> 2] | 0) != -1) {
   if (((HEAP32[$17 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0) >= (HEAP32[$11 >> 2] | 0)) {
    if (((HEAP32[$17 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0) != (HEAP32[$11 >> 2] | 0)) break;
    if ((HEAP16[(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 6 | 0) + 4 >> 1] | 0) >= (HEAP32[$12 >> 2] | 0)) break;
   }
   HEAP32[$13 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$12 >> 2] = HEAP16[(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 6 | 0) + 4 >> 1];
   HEAP32[$11 >> 2] = (HEAP32[$17 >> 2] | 0) + (HEAP32[$8 >> 2] | 0);
   HEAP32[$14 >> 2] = HEAP16[(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$16 >> 2] | 0) * 6 | 0) >> 1];
   HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
  } while (0);
  HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
 }
 if ((HEAP32[$13 >> 2] | 0) == -1) {
  HEAP32[$5 >> 2] = 0;
  $91 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 if (!(_fons__atlasAddSkylineLevel(HEAP32[$6 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0)) {
  HEAP32[$5 >> 2] = 0;
  $91 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 } else {
  HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$14 >> 2];
  HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[$15 >> 2];
  HEAP32[$5 >> 2] = 1;
  $91 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $91 | 0;
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i28 = 0, $$125 = 0, $16 = 0, $19 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 90) {
  $16 = $0 + 2 | 0;
  if ((HEAP8[$16 >> 0] | 0) == 102) {
   $19 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
   if (($19 | 0) == ($16 | 0)) $$125 = $0; else {
    $22 = $2 + 4 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) == ($23 | 0)) $$125 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $23 + -24 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 48090) | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $$0$i$i$i = 0;
     while (1) {
      if (($$0$i$i$i | 0) == 3) break;
      HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
      $$0$i$i$i = $$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 47877) | 0;
     HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
     $$0$i$i$i28 = 0;
     while (1) {
      if (($$0$i$i$i28 | 0) == 3) break;
      HEAP32[$5 + ($$0$i$i$i28 << 2) >> 2] = 0;
      $$0$i$i$i28 = $$0$i$i$i28 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$22 >> 2] | 0) + -24 | 0, $3);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     $$125 = $19;
    }
   }
  } else $$125 = $0;
 } else $$125 = $0; else $$125 = $0; else $$125 = $0;
 STACKTOP = sp;
 return $$125 | 0;
}

function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $39 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255;
 $7 = ($2 | 0) != 0;
 L1 : do if ($7 & ($0 & 3 | 0) != 0) {
  $8 = $1 & 255;
  $$03555 = $0;
  $$03654 = $2;
  while (1) {
   if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
    $$035$lcssa65 = $$03555;
    $$036$lcssa64 = $$03654;
    label = 6;
    break L1;
   }
   $11 = $$03555 + 1 | 0;
   $12 = $$03654 + -1 | 0;
   $16 = ($12 | 0) != 0;
   if ($16 & ($11 & 3 | 0) != 0) {
    $$03555 = $11;
    $$03654 = $12;
   } else {
    $$035$lcssa = $11;
    $$036$lcssa = $12;
    $$lcssa = $16;
    label = 5;
    break;
   }
  }
 } else {
  $$035$lcssa = $0;
  $$036$lcssa = $2;
  $$lcssa = $7;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$035$lcssa65 = $$035$lcssa;
  $$036$lcssa64 = $$036$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $18 = $1 & 255;
  if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) if (!$$036$lcssa64) {
   label = 16;
   break;
  } else {
   $39 = $$035$lcssa65;
   break;
  }
  $20 = Math_imul($3, 16843009) | 0;
  L13 : do if ($$036$lcssa64 >>> 0 > 3) {
   $$046 = $$035$lcssa65;
   $$13745 = $$036$lcssa64;
   while (1) {
    $23 = HEAP32[$$046 >> 2] ^ $20;
    if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
     $$137$lcssa66 = $$13745;
     $$in = $$046;
     break L13;
    }
    $29 = $$046 + 4 | 0;
    $30 = $$13745 + -4 | 0;
    if ($30 >>> 0 > 3) {
     $$046 = $29;
     $$13745 = $30;
    } else {
     $$0$lcssa = $29;
     $$137$lcssa = $30;
     label = 11;
     break;
    }
   }
  } else {
   $$0$lcssa = $$035$lcssa65;
   $$137$lcssa = $$036$lcssa64;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$$137$lcssa) {
   label = 16;
   break;
  } else {
   $$137$lcssa66 = $$137$lcssa;
   $$in = $$0$lcssa;
  }
  $$140 = $$in;
  $$23839 = $$137$lcssa66;
  while (1) {
   if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
    $39 = $$140;
    break L8;
   }
   $$23839 = $$23839 + -1 | 0;
   if (!$$23839) {
    label = 16;
    break;
   } else $$140 = $$140 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $39 = 0;
 return $39 | 0;
}

function _stbi__YCbCr_to_RGB_row($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $48 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 44 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 32 | 0;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 20 | 0;
 $14 = sp + 16 | 0;
 $15 = sp + 12 | 0;
 $16 = sp + 8 | 0;
 $17 = sp + 4 | 0;
 $18 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = $5;
 HEAP32[$12 >> 2] = 0;
 while (1) {
  if ((HEAP32[$12 >> 2] | 0) >= (HEAP32[$10 >> 2] | 0)) break;
  HEAP32[$13 >> 2] = ((HEAPU8[(HEAP32[$7 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) >> 0] | 0) << 20) + 524288;
  HEAP32[$17 >> 2] = (HEAPU8[(HEAP32[$9 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) >> 0] | 0) - 128;
  HEAP32[$18 >> 2] = (HEAPU8[(HEAP32[$8 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) >> 0] | 0) - 128;
  HEAP32[$14 >> 2] = (HEAP32[$13 >> 2] | 0) + (Math_imul(HEAP32[$17 >> 2] | 0, 1470208) | 0);
  $48 = (HEAP32[$13 >> 2] | 0) + (Math_imul(HEAP32[$17 >> 2] | 0, -748800) | 0) | 0;
  HEAP32[$15 >> 2] = $48 + ((Math_imul(HEAP32[$18 >> 2] | 0, -360960) | 0) & -65536);
  HEAP32[$16 >> 2] = (HEAP32[$13 >> 2] | 0) + (Math_imul(HEAP32[$18 >> 2] | 0, 1858048) | 0);
  HEAP32[$14 >> 2] = HEAP32[$14 >> 2] >> 20;
  HEAP32[$15 >> 2] = HEAP32[$15 >> 2] >> 20;
  HEAP32[$16 >> 2] = HEAP32[$16 >> 2] >> 20;
  do if ((HEAP32[$14 >> 2] | 0) >>> 0 > 255) if ((HEAP32[$14 >> 2] | 0) < 0) {
   HEAP32[$14 >> 2] = 0;
   break;
  } else {
   HEAP32[$14 >> 2] = 255;
   break;
  } while (0);
  do if ((HEAP32[$15 >> 2] | 0) >>> 0 > 255) if ((HEAP32[$15 >> 2] | 0) < 0) {
   HEAP32[$15 >> 2] = 0;
   break;
  } else {
   HEAP32[$15 >> 2] = 255;
   break;
  } while (0);
  do if ((HEAP32[$16 >> 2] | 0) >>> 0 > 255) if ((HEAP32[$16 >> 2] | 0) < 0) {
   HEAP32[$16 >> 2] = 0;
   break;
  } else {
   HEAP32[$16 >> 2] = 255;
   break;
  } while (0);
  HEAP8[HEAP32[$6 >> 2] >> 0] = HEAP32[$14 >> 2];
  HEAP8[(HEAP32[$6 >> 2] | 0) + 1 >> 0] = HEAP32[$15 >> 2];
  HEAP8[(HEAP32[$6 >> 2] | 0) + 2 >> 0] = HEAP32[$16 >> 2];
  HEAP8[(HEAP32[$6 >> 2] | 0) + 3 >> 0] = -1;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$11 >> 2] | 0);
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _fonsAddFontMem($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $89 = 0, $9 = 0, $92 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 44 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 20 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 12 | 0;
 $15 = sp + 8 | 0;
 $16 = sp + 4 | 0;
 $17 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$17 >> 2] = _fons__allocFont(HEAP32[$6 >> 2] | 0) | 0;
 if ((HEAP32[$17 >> 2] | 0) == -1) {
  HEAP32[$5 >> 2] = -1;
  $92 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $92 | 0;
 }
 HEAP32[$16 >> 2] = HEAP32[(HEAP32[(HEAP32[$6 >> 2] | 0) + 64 >> 2] | 0) + (HEAP32[$17 >> 2] << 2) >> 2];
 _strncpy((HEAP32[$16 >> 2] | 0) + 120 | 0, HEAP32[$7 >> 2] | 0, 64) | 0;
 HEAP8[(HEAP32[$16 >> 2] | 0) + 120 + 63 >> 0] = 0;
 HEAP32[$11 >> 2] = 0;
 while (1) {
  if ((HEAP32[$11 >> 2] | 0) >= 256) break;
  HEAP32[(HEAP32[$16 >> 2] | 0) + 220 + (HEAP32[$11 >> 2] << 2) >> 2] = -1;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$16 >> 2] | 0) + 188 >> 2] = HEAP32[$9 >> 2];
 HEAP32[(HEAP32[$16 >> 2] | 0) + 184 >> 2] = HEAP32[$8 >> 2];
 HEAP8[(HEAP32[$16 >> 2] | 0) + 192 >> 0] = HEAP32[$10 >> 2];
 HEAP32[(HEAP32[$6 >> 2] | 0) + 20568 >> 2] = 0;
 $59 = (_fons__tt_loadFont(HEAP32[$6 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0) != 0;
 $60 = HEAP32[$16 >> 2] | 0;
 if ($59) {
  _fons__tt_getFontVMetrics($60, $12, $13, $15);
  HEAP32[$14 >> 2] = (HEAP32[$12 >> 2] | 0) - (HEAP32[$13 >> 2] | 0);
  HEAPF32[(HEAP32[$16 >> 2] | 0) + 196 >> 2] = +(HEAP32[$12 >> 2] | 0) / +(HEAP32[$14 >> 2] | 0);
  HEAPF32[(HEAP32[$16 >> 2] | 0) + 200 >> 2] = +(HEAP32[$13 >> 2] | 0) / +(HEAP32[$14 >> 2] | 0);
  HEAPF32[(HEAP32[$16 >> 2] | 0) + 204 >> 2] = +((HEAP32[$14 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0) / +(HEAP32[$14 >> 2] | 0);
  HEAP32[$5 >> 2] = HEAP32[$17 >> 2];
  $92 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $92 | 0;
 } else {
  _fons__freeFont($60);
  $89 = (HEAP32[$6 >> 2] | 0) + 76 | 0;
  HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + -1;
  HEAP32[$5 >> 2] = -1;
  $92 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $92 | 0;
 }
 return 0;
}

function _stbtt__tesselate_curve($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = $9 | 0;
 var $10 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $62 = 0, $63 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $10 = sp + 56 | 0;
 $11 = sp + 52 | 0;
 $12 = sp + 48 | 0;
 $13 = sp + 44 | 0;
 $14 = sp + 40 | 0;
 $15 = sp + 36 | 0;
 $16 = sp + 32 | 0;
 $17 = sp + 28 | 0;
 $18 = sp + 24 | 0;
 $19 = sp + 20 | 0;
 $20 = sp + 16 | 0;
 $21 = sp + 12 | 0;
 $22 = sp + 8 | 0;
 $23 = sp + 4 | 0;
 $24 = sp;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$12 >> 2] = $1;
 HEAPF32[$13 >> 2] = $2;
 HEAPF32[$14 >> 2] = $3;
 HEAPF32[$15 >> 2] = $4;
 HEAPF32[$16 >> 2] = $5;
 HEAPF32[$17 >> 2] = $6;
 HEAPF32[$18 >> 2] = $7;
 HEAPF32[$19 >> 2] = $8;
 HEAP32[$20 >> 2] = $9;
 HEAPF32[$21 >> 2] = (+HEAPF32[$13 >> 2] + +HEAPF32[$15 >> 2] * 2.0 + +HEAPF32[$17 >> 2]) / 4.0;
 HEAPF32[$22 >> 2] = (+HEAPF32[$14 >> 2] + +HEAPF32[$16 >> 2] * 2.0 + +HEAPF32[$18 >> 2]) / 4.0;
 HEAPF32[$23 >> 2] = (+HEAPF32[$13 >> 2] + +HEAPF32[$17 >> 2]) / 2.0 - +HEAPF32[$21 >> 2];
 HEAPF32[$24 >> 2] = (+HEAPF32[$14 >> 2] + +HEAPF32[$18 >> 2]) / 2.0 - +HEAPF32[$22 >> 2];
 if ((HEAP32[$20 >> 2] | 0) > 16) {
  HEAP32[$10 >> 2] = 1;
  $103 = HEAP32[$10 >> 2] | 0;
  STACKTOP = sp;
  return $103 | 0;
 }
 $62 = HEAP32[$11 >> 2] | 0;
 $63 = HEAP32[$12 >> 2] | 0;
 if (+HEAPF32[$23 >> 2] * +HEAPF32[$23 >> 2] + +HEAPF32[$24 >> 2] * +HEAPF32[$24 >> 2] > +HEAPF32[$19 >> 2]) {
  _stbtt__tesselate_curve($62, $63, +HEAPF32[$13 >> 2], +HEAPF32[$14 >> 2], (+HEAPF32[$13 >> 2] + +HEAPF32[$15 >> 2]) / 2.0, (+HEAPF32[$14 >> 2] + +HEAPF32[$16 >> 2]) / 2.0, +HEAPF32[$21 >> 2], +HEAPF32[$22 >> 2], +HEAPF32[$19 >> 2], (HEAP32[$20 >> 2] | 0) + 1 | 0) | 0;
  _stbtt__tesselate_curve(HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, +HEAPF32[$21 >> 2], +HEAPF32[$22 >> 2], (+HEAPF32[$15 >> 2] + +HEAPF32[$17 >> 2]) / 2.0, (+HEAPF32[$16 >> 2] + +HEAPF32[$18 >> 2]) / 2.0, +HEAPF32[$17 >> 2], +HEAPF32[$18 >> 2], +HEAPF32[$19 >> 2], (HEAP32[$20 >> 2] | 0) + 1 | 0) | 0;
 } else {
  _stbtt__add_point($62, HEAP32[$63 >> 2] | 0, +HEAPF32[$17 >> 2], +HEAPF32[$18 >> 2]);
  HEAP32[HEAP32[$12 >> 2] >> 2] = (HEAP32[HEAP32[$12 >> 2] >> 2] | 0) + 1;
 }
 HEAP32[$10 >> 2] = 1;
 $103 = HEAP32[$10 >> 2] | 0;
 STACKTOP = sp;
 return $103 | 0;
}

function _stbi__pnm_load($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $100 = 0, $11 = 0, $13 = 0, $46 = 0, $6 = 0, $62 = 0, $7 = 0, $73 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $13 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[sp + 4 >> 2] = $5;
 if (!(_stbi__pnm_info(HEAP32[$7 >> 2] | 0, HEAP32[$7 >> 2] | 0, (HEAP32[$7 >> 2] | 0) + 4 | 0, (HEAP32[$7 >> 2] | 0) + 8 | 0) | 0)) {
  HEAP32[$6 >> 2] = 0;
  $100 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 }
 HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
 HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$10 >> 2] | 0) HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2];
 if (!(_stbi__mad3sizes_valid(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0, 0) | 0)) {
  $46 = (_stbi__err(43529) | 0) != 0;
  HEAP32[$6 >> 2] = $46 ? 0 : 0;
  $100 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 }
 HEAP32[$13 >> 2] = _stbi__malloc_mad3(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0, 0) | 0;
 if (!(HEAP32[$13 >> 2] | 0)) {
  $62 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$6 >> 2] = $62 ? 0 : 0;
  $100 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $100 | 0;
 }
 $73 = Math_imul(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0) | 0;
 _stbi__getn(HEAP32[$7 >> 2] | 0, HEAP32[$13 >> 2] | 0, Math_imul($73, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
 if (HEAP32[$11 >> 2] | 0) if ((HEAP32[$11 >> 2] | 0) != (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP32[$13 >> 2] = _stbi__convert_format(HEAP32[$13 >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) | 0;
  if (!(HEAP32[$13 >> 2] | 0)) {
   HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
   $100 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $100 | 0;
  }
 }
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 $100 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $100 | 0;
}

function _stbtt__cid_get_glyph_subrs($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $3 = 0, $4 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy2 = sp + 84 | 0;
 $$byval_copy1 = sp + 72 | 0;
 $3 = sp + 68 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 52 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 44 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 32 | 0;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 12 | 0;
 $14 = sp;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = $2;
 $16 = (HEAP32[$3 >> 2] | 0) + 108 | 0;
 HEAP32[$5 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
 HEAP32[$5 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
 HEAP32[$11 >> 2] = -1;
 _stbtt__buf_seek($5, 0);
 HEAP32[$10 >> 2] = (_stbtt__buf_get8($5) | 0) & 255;
 L1 : do if (!(HEAP32[$10 >> 2] | 0)) {
  _stbtt__buf_skip($5, HEAP32[$4 >> 2] | 0);
  HEAP32[$11 >> 2] = (_stbtt__buf_get8($5) | 0) & 255;
 } else if ((HEAP32[$10 >> 2] | 0) == 3) {
  HEAP32[$6 >> 2] = _stbtt__buf_get($5, 2) | 0;
  HEAP32[$7 >> 2] = _stbtt__buf_get($5, 2) | 0;
  HEAP32[$12 >> 2] = 0;
  while (1) {
   if ((HEAP32[$12 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break L1;
   HEAP32[$9 >> 2] = (_stbtt__buf_get8($5) | 0) & 255;
   HEAP32[$8 >> 2] = _stbtt__buf_get($5, 2) | 0;
   if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) if ((HEAP32[$4 >> 2] | 0) < (HEAP32[$8 >> 2] | 0)) break;
   HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  }
  HEAP32[$11 >> 2] = HEAP32[$9 >> 2];
 } while (0);
 if ((HEAP32[$11 >> 2] | 0) == -1) _stbtt__new_buf($13, 0, 0);
 $47 = (HEAP32[$3 >> 2] | 0) + 48 | 0;
 $49 = (HEAP32[$3 >> 2] | 0) + 96 | 0;
 $50 = HEAP32[$11 >> 2] | 0;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$49 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$49 + 4 >> 2];
 HEAP32[$$byval_copy2 + 8 >> 2] = HEAP32[$49 + 8 >> 2];
 _stbtt__cff_index_get($14, $$byval_copy2, $50);
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$47 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$47 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$47 + 8 >> 2];
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
 HEAP32[$$byval_copy2 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
 _stbtt__get_subrs($0, $$byval_copy1, $$byval_copy2);
 STACKTOP = sp;
 return;
}

function __ZN7DrImageC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEER8DrBitmapfb($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $6 = $0 + 12 | 0;
 __ZN8DrBitmapC2Ev($6);
 $7 = $0 + 36 | 0;
 $8 = $0 + 40 | 0;
 $10 = $0 + 48 | 0;
 $11 = $0 + 52 | 0;
 $12 = $0 + 56 | 0;
 $13 = $0 + 64 | 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$13 + 8 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 HEAP32[$7 + 12 >> 2] = 0;
 HEAP32[$7 + 16 >> 2] = 0;
 HEAP32[$7 + 20 >> 2] = 0;
 HEAP16[$7 + 24 >> 1] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($13, 2185869, __ZNSt3__211char_traitsIcE6lengthEPKc(2185869) | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0, $1) | 0;
 __ZN8DrBitmapaSERKS_($6, $2) | 0;
 if ($4) __ZN7DrImage17autoOutlinePointsEf($0, $3); else {
  __ZNK8DrBitmap7polygonEv($5, $2);
  $15 = __ZN10DrPolygonF6pointsEv($5) | 0;
  $16 = HEAP32[$8 >> 2] | 0;
  if (($16 | 0) == (HEAP32[$0 + 44 >> 2] | 0)) __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($7, $15); else {
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($16, $15);
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 12;
  }
  __ZN10DrPolygonFD2Ev($5);
  HEAP32[$5 >> 2] = 0;
  $21 = $5 + 4 | 0;
  HEAP32[$21 >> 2] = 0;
  $22 = $5 + 8 | 0;
  HEAP32[$22 >> 2] = 0;
  $23 = HEAP32[$11 >> 2] | 0;
  if ($23 >>> 0 < (HEAP32[$12 >> 2] | 0) >>> 0) {
   HEAP32[$23 >> 2] = 0;
   $26 = $23 + 4 | 0;
   HEAP32[$26 >> 2] = 0;
   $27 = $23 + 8 | 0;
   HEAP32[$27 >> 2] = 0;
   HEAP32[$23 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$26 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$27 >> 2] = HEAP32[$22 >> 2];
   HEAP32[$22 >> 2] = 0;
   HEAP32[$21 >> 2] = 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 12;
  } else __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($10, $5);
  __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($5);
 }
 STACKTOP = sp;
 return;
}

function __sapp_emsc_touch_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $41 = 0, $6 = 0, $7 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[sp + 16 >> 2] = $2;
 HEAP8[$6 >> 0] = 1;
 if (!(__sapp_events_enabled() | 0)) {
  __sapp_emsc_update_keyboard_state();
  $81 = HEAP8[$6 >> 0] | 0;
  $82 = $81 & 1;
  $83 = $82 & 1;
  STACKTOP = sp;
  return $83 | 0;
 }
 switch (HEAP32[$3 >> 2] | 0) {
 case 22:
  {
   HEAP32[$7 >> 2] = 10;
   break;
  }
 case 24:
  {
   HEAP32[$7 >> 2] = 11;
   break;
  }
 case 23:
  {
   HEAP32[$7 >> 2] = 12;
   break;
  }
 case 25:
  {
   HEAP32[$7 >> 2] = 13;
   break;
  }
 default:
  {
   HEAP32[$7 >> 2] = 0;
   HEAP8[$6 >> 0] = 0;
  }
 }
 if (!(HEAP32[$7 >> 2] | 0)) {
  __sapp_emsc_update_keyboard_state();
  $81 = HEAP8[$6 >> 0] | 0;
  $82 = $81 & 1;
  $83 = $82 & 1;
  STACKTOP = sp;
  return $83 | 0;
 }
 __sapp_init_event(HEAP32[$7 >> 2] | 0);
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 2;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 1;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 4;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 8;
 $41 = HEAP32[HEAP32[$4 >> 2] >> 2] | 0;
 HEAP32[12752] = $41;
 HEAP32[12752] = (HEAP32[12752] | 0) > 8 ? 8 : $41;
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[12752] | 0)) break;
  HEAP32[$9 >> 2] = (HEAP32[$4 >> 2] | 0) + 20 + ((HEAP32[$8 >> 2] | 0) * 52 | 0);
  HEAP32[$10 >> 2] = 51012 + (HEAP32[$8 >> 2] << 4);
  HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
  HEAPF32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] = +(HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] | 0) * +HEAPF32[12734];
  HEAPF32[(HEAP32[$10 >> 2] | 0) + 8 >> 2] = +(HEAP32[(HEAP32[$9 >> 2] | 0) + 40 >> 2] | 0) * +HEAPF32[12734];
  HEAP8[(HEAP32[$10 >> 2] | 0) + 12 >> 0] = (HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] | 0) != 0 & 1;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 __sapp_call_event(50952) | 0;
 __sapp_emsc_update_keyboard_state();
 $81 = HEAP8[$6 >> 0] | 0;
 $82 = $81 & 1;
 $83 = $82 & 1;
 STACKTOP = sp;
 return $83 | 0;
}

function __ZN6DrMesh12insertPointsERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$025 = 0, $$in = 0, $15 = 0, $2 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = 0;
 $5 = $2 + 4 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $2 + 8 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $1 + 4 | 0;
 $9 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$7 >> 2] | 0) - $9 >> 4 >>> 0 < 11) __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($0, $1); else {
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($2, $9);
  $15 = HEAP32[$1 >> 2] | 0;
  if (((HEAP32[$7 >> 2] | 0) - $15 | 0) > 16) {
   $$025 = 1;
   $$in = $15;
   do {
    $23 = $$in;
    $24 = $$025 + -1 | 0;
    if (+__ZNK8DrPointF8distanceERKS_($23 + ($24 << 4) | 0, $23 + ($$025 << 4) | 0) > 10.0) {
     $29 = HEAP32[$1 >> 2] | 0;
     __ZNK8DrPointFplERKS_($4, $29 + ($24 << 4) | 0, $29 + ($$025 << 4) | 0);
     __ZNK8DrPointFdvEd($3, $4, 2.0);
     $32 = HEAP32[$5 >> 2] | 0;
     if (($32 | 0) == (HEAP32[$6 >> 2] | 0)) __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($2, $3); else {
      HEAP32[$32 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$32 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
      HEAP32[$32 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
      HEAP32[$32 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
      HEAP32[$5 >> 2] = $32 + 16;
     }
    }
    $37 = (HEAP32[$1 >> 2] | 0) + ($$025 << 4) | 0;
    $38 = HEAP32[$5 >> 2] | 0;
    if (($38 | 0) == (HEAP32[$6 >> 2] | 0)) __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($2, $37); else {
     HEAP32[$38 >> 2] = HEAP32[$37 >> 2];
     HEAP32[$38 + 4 >> 2] = HEAP32[$37 + 4 >> 2];
     HEAP32[$38 + 8 >> 2] = HEAP32[$37 + 8 >> 2];
     HEAP32[$38 + 12 >> 2] = HEAP32[$37 + 12 >> 2];
     HEAP32[$5 >> 2] = $38 + 16;
    }
    $$025 = $$025 + 1 | 0;
    $$in = HEAP32[$1 >> 2] | 0;
   } while (($$025 | 0) < ((HEAP32[$7 >> 2] | 0) - $$in >> 4 | 0));
  }
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$6 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
 }
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($2);
 STACKTOP = sp;
 return;
}

function _meshopt_generateVertexRemap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$05470 = 0, $$055$lcssa71 = 0, $$05569 = 0, $$05569$sink = 0, $$257 = 0, $$257$ph = 0, $10 = 0, $18 = 0, $19 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 $10 = ($1 | 0) != 0;
 if (!($10 | ($2 | 0) == ($4 | 0))) ___assert_fail(41691, 41730, 189, 41814);
 if (($2 >>> 0) % 3 | 0 | 0) ___assert_fail(43058, 41730, 190, 41814);
 if (($5 + -1 | 0) >>> 0 >= 256) ___assert_fail(43241, 41730, 191, 41814);
 __ZN17meshopt_AllocatorC2Ev($6);
 _memset($0 | 0, -1, $4 << 2 | 0) | 0;
 HEAP32[$7 >> 2] = $3;
 HEAP32[$7 + 4 >> 2] = $5;
 HEAP32[$7 + 8 >> 2] = $5;
 $18 = __ZN7meshoptL11hashBucketsEm($4) | 0;
 $19 = __ZN17meshopt_Allocator8allocateIjEEPT_m($6, $18) | 0;
 _memset($19 | 0, -1, $18 << 2 | 0) | 0;
 do if (!$2) $$055$lcssa71 = 0; else {
  $$05470 = 0;
  $$05569 = 0;
  while (1) {
   if ($10) $25 = HEAP32[$1 + ($$05470 << 2) >> 2] | 0; else $25 = $$05470;
   HEAP32[$8 >> 2] = $25;
   if ($25 >>> 0 >= $4 >>> 0) {
    label = 13;
    break;
   }
   $27 = $0 + ($25 << 2) | 0;
   if ((HEAP32[$27 >> 2] | 0) == -1) {
    HEAP32[$9 >> 2] = -1;
    $30 = __ZN7meshoptL10hashLookupIjNS_12VertexHasherEEEPT_S3_mRKT0_RKS2_S8_($19, $18, $7, $8, $9) | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    if (($31 | 0) == -1) {
     HEAP32[$30 >> 2] = $25;
     $$05569$sink = $$05569;
     $$257$ph = $$05569 + 1 | 0;
    } else {
     $35 = HEAP32[$0 + ($31 << 2) >> 2] | 0;
     if (($35 | 0) == -1) {
      label = 18;
      break;
     } else {
      $$05569$sink = $35;
      $$257$ph = $$05569;
     }
    }
    HEAP32[$27 >> 2] = $$05569$sink;
    $$257 = $$257$ph;
   } else $$257 = $$05569;
   $$05470 = $$05470 + 1 | 0;
   if ($$05470 >>> 0 >= $2 >>> 0) {
    label = 9;
    break;
   } else $$05569 = $$257;
  }
  if ((label | 0) == 9) {
   if ($$257 >>> 0 <= $4 >>> 0) {
    $$055$lcssa71 = $$257;
    break;
   }
   ___assert_fail(43185, 41730, 229, 41814);
  } else if ((label | 0) == 13) ___assert_fail(43164, 41730, 208, 41814); else if ((label | 0) == 18) ___assert_fail(41842, 41730, 222, 41814);
 } while (0);
 __ZN17meshopt_AllocatorD2Ev($6);
 STACKTOP = sp;
 return $$055$lcssa71 | 0;
}

function __saudio_fifo_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 __saudio_mutex_lock((HEAP32[$3 >> 2] | 0) + 24 | 0);
 HEAP32[$6 >> 2] = 0;
 if (!(HEAP8[HEAP32[$3 >> 2] >> 0] & 1)) {
  $81 = HEAP32[$3 >> 2] | 0;
  $82 = $81 + 24 | 0;
  __saudio_mutex_unlock($82);
  $83 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 if ((HEAP32[$5 >> 2] | 0) % (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0) ___assert_fail(39828, 22303, 943, 39865);
 if ((HEAP32[$5 >> 2] | 0) > (Math_imul(HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) | 0)) ___assert_fail(39883, 22303, 944, 39865);
 HEAP32[$7 >> 2] = (HEAP32[$5 >> 2] | 0) / (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
 $40 = __saudio_ring_count((HEAP32[$3 >> 2] | 0) + 28 | 0) | 0;
 if (($40 | 0) < (HEAP32[$7 >> 2] | 0)) {
  $81 = HEAP32[$3 >> 2] | 0;
  $82 = $81 + 24 | 0;
  __saudio_mutex_unlock($82);
  $83 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 HEAP32[$9 >> 2] = 0;
 while (1) {
  if ((HEAP32[$9 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) break;
  HEAP32[$10 >> 2] = __saudio_ring_dequeue((HEAP32[$3 >> 2] | 0) + 28 | 0) | 0;
  __saudio_ring_enqueue((HEAP32[$3 >> 2] | 0) + 4136 | 0, HEAP32[$10 >> 2] | 0);
  HEAP32[$11 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$10 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0);
  _memcpy(HEAP32[$8 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0);
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0);
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
 }
 if ((HEAP32[$5 >> 2] | 0) != (HEAP32[$6 >> 2] | 0)) ___assert_fail(39936, 22303, 957, 39865);
 $81 = HEAP32[$3 >> 2] | 0;
 $82 = $81 + 24 | 0;
 __saudio_mutex_unlock($82);
 $83 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $83 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 122) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$124 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$124 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 48104) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 47877) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i27 = 0;
    while (1) {
     if (($$0$i$i$i27 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i27 << 2) >> 2] = 0;
     $$0$i$i$i27 = $$0$i$i$i27 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$20 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$124 = $17;
   }
  }
 } else $$124 = $0; else $$124 = $0; else $$124 = $0;
 STACKTOP = sp;
 return $$124 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$124 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 24 | 0;
 $6 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $16 = $0 + 2 | 0;
  $17 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16, $1, $2) | 0;
  if (($17 | 0) == ($16 | 0)) $$124 = $0; else {
   $20 = $2 + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$124 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $21 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($6, 0, 48104) | 0;
    HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$6 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 47877) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i27 = 0;
    while (1) {
     if (($$0$i$i$i27 | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i27 << 2) >> 2] = 0;
     $$0$i$i$i27 = $$0$i$i$i27 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$20 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$124 = $17;
   }
  }
 } else $$124 = $0; else $$124 = $0; else $$124 = $0;
 STACKTOP = sp;
 return $$124 | 0;
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE6assignINS_21__list_const_iteratorIS1_PvEEEEvT_S9_PNS_9enable_ifIXsr19__is_input_iteratorIS9_EE5valueEvE4typeE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$sroa$05$0 = 0, $$sroa$05$0$lcssa = 0, $$sroa$05$011 = 0, $$sroa$05$012 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $23 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy4 = sp + 28 | 0;
 $$byval_copy3 = sp + 24 | 0;
 $$byval_copy = sp + 16 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $10 = $0;
 $$sroa$05$011 = HEAP32[$0 + 4 >> 2] | 0;
 $11 = HEAP32[$1 >> 2] | 0;
 $12 = HEAP32[$2 >> 2] | 0;
 $14 = $11;
 $15 = $12;
 L1 : do if (($11 | 0) == ($12 | 0)) {
  $$sroa$05$0$lcssa = $$sroa$05$011;
  $30 = $14;
 } else {
  $$sroa$05$012 = $$sroa$05$011;
  $19 = $11;
  $23 = $11;
  $31 = $14;
  while (1) {
   $16 = $$sroa$05$012;
   if (($0 | 0) == ($16 | 0)) {
    $$sroa$05$0$lcssa = $$sroa$05$012;
    $30 = $31;
    break L1;
   }
   __ZN8TPPLPolyaSERKS_($$sroa$05$012 + 8 | 0, $19 + 8 | 0) | 0;
   $31 = HEAP32[$23 + 4 >> 2] | 0;
   HEAP32[$1 >> 2] = $31;
   $$sroa$05$0 = HEAP32[$16 + 4 >> 2] | 0;
   $23 = $31;
   if (($12 | 0) == ($23 | 0)) {
    $$sroa$05$0$lcssa = $$sroa$05$0;
    $30 = $31;
    break;
   } else {
    $$sroa$05$012 = $$sroa$05$0;
    $19 = $31;
   }
  }
 } while (0);
 if (($0 | 0) == ($$sroa$05$0$lcssa | 0)) {
  HEAP32[$4 >> 2] = $10;
  HEAP32[$5 >> 2] = $30;
  HEAP32[$6 >> 2] = $15;
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$$byval_copy4 >> 2] = HEAP32[$6 >> 2];
  __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE6insertINS_21__list_const_iteratorIS1_PvEEEENS_15__list_iteratorIS1_S7_EES8_T_SB_PNS_9enable_ifIXsr19__is_input_iteratorISB_EE5valueEvE4typeE($0, $$byval_copy, $$byval_copy3, $$byval_copy4, 0) | 0;
 } else {
  HEAP32[$7 >> 2] = $$sroa$05$0$lcssa;
  HEAP32[$8 >> 2] = $10;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy4 >> 2] = HEAP32[$8 >> 2];
  __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEES7_($0, $$byval_copy3, $$byval_copy4) | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN6DrMesh7extrudeEffffffffi($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = $9 | 0;
 var $$07072 = 0.0, $$073 = 0, $$pn = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0.0, $20 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 36 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 12 | 0;
 $14 = sp;
 $17 = +HEAPF32[$0 + 28 >> 2] * .10000000149011612;
 $20 = $17 * 2.0 / +($9 | 0);
 if (($9 | 0) > 0) {
  $$07072 = $17;
  $$073 = 0;
  $$pn = $17;
  while (1) {
   $$pn = $$pn - $20;
   __ZN6DrVec3C2Ev($10);
   __ZN6DrVec3C2Efff($12, $1, $2, $$07072);
   __ZN6DrVec3C2Efff($13, $5, $6, $$07072);
   __ZN6DrVec3C2Efff($14, $1, $2, $$pn);
   __ZN6DrVec314triangleNormalERKS_S1_S1_($11, $12, $13, $14);
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   __ZN6DrVec3C2Efff($11, $1, $2, $$07072);
   __ZN6DrVec2C2Eff($12, $3, $4);
   __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $11, $10, $12, 0);
   __ZN6DrVec3C2Efff($11, $1, $2, $$pn);
   __ZN6DrVec2C2Eff($12, $3, $4);
   __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $11, $10, $12, 1);
   __ZN6DrVec3C2Efff($11, $5, $6, $$07072);
   __ZN6DrVec2C2Eff($12, $7, $8);
   __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $11, $10, $12, 2);
   __ZN6DrVec3C2Efff($12, $5, $6, $$07072);
   __ZN6DrVec3C2Efff($13, $5, $6, $$pn);
   __ZN6DrVec3C2Efff($14, $1, $2, $$pn);
   __ZN6DrVec314triangleNormalERKS_S1_S1_($11, $12, $13, $14);
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   __ZN6DrVec3C2Efff($11, $5, $6, $$07072);
   __ZN6DrVec2C2Eff($12, $7, $8);
   __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $11, $10, $12, 0);
   __ZN6DrVec3C2Efff($11, $1, $2, $$pn);
   __ZN6DrVec2C2Eff($12, $3, $4);
   __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $11, $10, $12, 1);
   __ZN6DrVec3C2Efff($11, $5, $6, $$pn);
   __ZN6DrVec2C2Eff($12, $7, $8);
   __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $11, $10, $12, 2);
   $$073 = $$073 + 1 | 0;
   if (($$073 | 0) == ($9 | 0)) break; else $$07072 = $$07072 - $20;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this | 0;
 __embind_register_void(__ZN10emscripten8internal6TypeIDIvE3getEv() | 0, 49316);
 __embind_register_bool(__ZN10emscripten8internal6TypeIDIbE3getEv() | 0, 49321, 1, 1, 0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_116register_integerItEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_116register_integerImEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc();
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0, 48699);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0, 45698);
 __embind_register_std_wstring(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0, 4, 45731);
 __embind_register_emval(__ZN10emscripten8internal6TypeIDINS_3valEE3getEv() | 0, 45744);
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(45760);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(45797);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(45836);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(45867);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(45907);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(45936);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(45974);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(46006);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(46039);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(46072);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(46106);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(46139);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc();
 return;
}

function __sg_gl_create_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) != 0)) ___assert_fail(32451, 17628, 5711, 32463);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5712, 32463);
 __sg_buffer_common_init((HEAP32[$2 >> 2] | 0) + 12 | 0, HEAP32[$3 >> 2] | 0);
 HEAP8[(HEAP32[$2 >> 2] | 0) + 48 + 8 >> 0] = 0 != (HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] | 0) & 1;
 HEAP32[$4 >> 2] = __sg_gl_buffer_target(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 12 >> 2] | 0) | 0;
 HEAP32[$5 >> 2] = __sg_gl_usage(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 16 >> 2] | 0) | 0;
 HEAP32[$6 >> 2] = 0;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 28 >> 2] | 0)) {
   label = 17;
   break;
  }
  HEAP32[$7 >> 2] = 0;
  if (HEAP8[(HEAP32[$2 >> 2] | 0) + 48 + 8 >> 0] & 1) {
   if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 28 + (HEAP32[$6 >> 2] << 2) >> 2] | 0)) {
    label = 9;
    break;
   }
   HEAP32[$7 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 28 + (HEAP32[$6 >> 2] << 2) >> 2];
  } else {
   _glGenBuffers(1, $7 | 0);
   __sg_gl_cache_store_buffer_binding(HEAP32[$4 >> 2] | 0);
   __sg_gl_cache_bind_buffer(HEAP32[$4 >> 2] | 0, HEAP32[$7 >> 2] | 0);
   _glBufferData(HEAP32[$4 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0, 0, HEAP32[$5 >> 2] | 0);
   if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 16 >> 2] | 0) == 1) {
    if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0)) {
     label = 13;
     break;
    }
    _glBufferSubData(HEAP32[$4 >> 2] | 0, 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0);
   }
   __sg_gl_cache_restore_buffer_binding(HEAP32[$4 >> 2] | 0);
  }
  HEAP32[(HEAP32[$2 >> 2] | 0) + 48 + (HEAP32[$6 >> 2] << 2) >> 2] = HEAP32[$7 >> 2];
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 if ((label | 0) == 9) ___assert_fail(32484, 17628, 5720, 32463); else if ((label | 0) == 13) ___assert_fail(32507, 17628, 5729, 32463); else if ((label | 0) == 17) if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return 2;
 } else ___assert_fail(25839, 17628, 5736, 32463);
 return 0;
}

function _stbi__pic_load($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $32 = 0, $41 = 0, $6 = 0, $7 = 0, $78 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $6 = sp + 44 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 12 | 0;
 $15 = sp + 8 | 0;
 $16 = sp + 4 | 0;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[sp + 20 >> 2] = $5;
 if (!(HEAP32[$10 >> 2] | 0)) HEAP32[$10 >> 2] = sp;
 HEAP32[$14 >> 2] = 0;
 while (1) {
  $22 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$14 >> 2] | 0) >= 92) break;
  _stbi__get8($22) | 0;
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
 }
 HEAP32[$15 >> 2] = _stbi__get16be($22) | 0;
 HEAP32[$16 >> 2] = _stbi__get16be(HEAP32[$7 >> 2] | 0) | 0;
 if (_stbi__at_eof(HEAP32[$7 >> 2] | 0) | 0) {
  $32 = (_stbi__err(43817) | 0) != 0;
  HEAP32[$6 >> 2] = $32 ? 0 : 0;
  $78 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 }
 if (!(_stbi__mad3sizes_valid(HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, 4, 0) | 0)) {
  $41 = (_stbi__err(43529) | 0) != 0;
  HEAP32[$6 >> 2] = $41 ? 0 : 0;
  $78 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $78 | 0;
 }
 _stbi__get32be(HEAP32[$7 >> 2] | 0) | 0;
 _stbi__get16be(HEAP32[$7 >> 2] | 0) | 0;
 _stbi__get16be(HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$13 >> 2] = _stbi__malloc_mad3(HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, 4, 0) | 0;
 _memset(HEAP32[$13 >> 2] | 0, -1, (Math_imul(HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0) << 2 | 0) | 0;
 if (!(_stbi__pic_load_core(HEAP32[$7 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0)) {
  _free(HEAP32[$13 >> 2] | 0);
  HEAP32[$13 >> 2] = 0;
 }
 HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[$15 >> 2];
 HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$16 >> 2];
 if (!(HEAP32[$11 >> 2] | 0)) HEAP32[$11 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
 HEAP32[$13 >> 2] = _stbi__convert_format(HEAP32[$13 >> 2] | 0, 4, HEAP32[$11 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0;
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 $78 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $78 | 0;
}

function __ZNSt3__227__insertion_sort_incompleteIR7comparePmEEbT0_S4_T_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$lcssa = 0, $$06277 = 0, $$06476 = 0, $$06974 = 0, $$06974$phi = 0, $$165 = 0, $$170 = 0, $$170$phi = 0, $$5 = 0, $11 = 0, $22 = 0, $24 = 0, $29 = 0, $32 = 0, $35 = 0, $37 = 0, $7 = 0;
 L1 : do switch ($1 - $0 >> 2 | 0) {
 case 1:
 case 0:
  {
   $$5 = 1;
   break;
  }
 case 2:
  {
   $7 = $1 + -4 | 0;
   if (__ZN7compareclEmm($2, HEAP32[$7 >> 2] | 0, HEAP32[$0 >> 2] | 0) | 0) {
    $11 = HEAP32[$0 >> 2] | 0;
    HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$7 >> 2] = $11;
    $$5 = 1;
   } else $$5 = 1;
   break;
  }
 case 3:
  {
   __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($0, $0 + 4 | 0, $1 + -4 | 0, $2) | 0;
   $$5 = 1;
   break;
  }
 case 4:
  {
   __ZNSt3__27__sort4IR7comparePmEEjT0_S4_S4_S4_T_($0, $0 + 4 | 0, $0 + 8 | 0, $1 + -4 | 0, $2) | 0;
   $$5 = 1;
   break;
  }
 case 5:
  {
   __ZNSt3__27__sort5IR7comparePmEEjT0_S4_S4_S4_S4_T_($0, $0 + 4 | 0, $0 + 8 | 0, $0 + 12 | 0, $1 + -4 | 0, $2) | 0;
   $$5 = 1;
   break;
  }
 default:
  {
   $22 = $0 + 8 | 0;
   __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($0, $0 + 4 | 0, $22, $2) | 0;
   $24 = $0 + 12 | 0;
   if (($24 | 0) == ($1 | 0)) $$5 = 1; else {
    $$06277 = $24;
    $$06476 = 0;
    $$06974 = $22;
    while (1) {
     if (__ZN7compareclEmm($2, HEAP32[$$06277 >> 2] | 0, HEAP32[$$06974 >> 2] | 0) | 0) {
      $29 = HEAP32[$$06277 >> 2] | 0;
      $$0 = $$06974;
      $$170 = $$06277;
      while (1) {
       HEAP32[$$170 >> 2] = HEAP32[$$0 >> 2];
       if (($$0 | 0) == ($0 | 0)) {
        $$0$lcssa = $0;
        break;
       }
       $32 = $$0 + -4 | 0;
       if (__ZN7compareclEmm($2, $29, HEAP32[$32 >> 2] | 0) | 0) {
        $$170$phi = $$0;
        $$0 = $32;
        $$170 = $$170$phi;
       } else {
        $$0$lcssa = $$0;
        break;
       }
      }
      HEAP32[$$0$lcssa >> 2] = $29;
      $35 = $$06476 + 1 | 0;
      if (($35 | 0) == 8) break; else $$165 = $35;
     } else $$165 = $$06476;
     $37 = $$06277 + 4 | 0;
     if (($37 | 0) == ($1 | 0)) {
      $$5 = 1;
      break L1;
     } else {
      $$06974$phi = $$06277;
      $$06277 = $37;
      $$06476 = $$165;
      $$06974 = $$06974$phi;
     }
    }
    $$5 = ($$06277 + 4 | 0) == ($1 | 0);
   }
  }
 } while (0);
 return $$5 | 0;
}

function __sg_validate_update_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $109 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $68 = 0, $7 = 0, $8 = 0, $82 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) != 0)) ___assert_fail(37226, 17628, 13801, 37238);
 __sg_validate_begin();
 __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 24 >> 2] | 0) != 1, 90);
 __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 64 >> 2] | 0) != (HEAP32[539113] | 0), 94);
 __sg_validate((__sg_is_compressed_pixel_format(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 28 >> 2] | 0) | 0) ^ 1, 93);
 HEAP32[$4 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) == 2 ? 6 : 1;
 HEAP32[$5 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 20 >> 2];
 HEAP32[$6 >> 2] = 0;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= (HEAP32[$4 >> 2] | 0)) break;
  HEAP32[$7 >> 2] = 0;
  while (1) {
   if ((HEAP32[$7 >> 2] | 0) >= (HEAP32[$5 >> 2] | 0)) break;
   __sg_validate(0 != (HEAP32[(HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] << 7) + (HEAP32[$7 >> 2] << 3) >> 2] | 0), 91);
   if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 8 >> 2] >> HEAP32[$7 >> 2] | 0) > 1) $68 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 8 >> 2] >> HEAP32[$7 >> 2]; else $68 = 1;
   HEAP32[$8 >> 2] = $68;
   if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 12 >> 2] >> HEAP32[$7 >> 2] | 0) > 1) $82 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 12 >> 2] >> HEAP32[$7 >> 2]; else $82 = 1;
   HEAP32[$9 >> 2] = $82;
   HEAP32[$10 >> 2] = __sg_surface_pitch(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 28 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, 1) | 0;
   HEAP32[$11 >> 2] = Math_imul(HEAP32[$10 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 16 >> 2] | 0) | 0;
   __sg_validate((HEAP32[(HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] << 7) + (HEAP32[$7 >> 2] << 3) + 4 >> 2] | 0) >>> 0 <= (HEAP32[$11 >> 2] | 0) >>> 0, 92);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
  }
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 $109 = __sg_validate_end() | 0;
 STACKTOP = sp;
 return $109 | 0;
}

function __sfetch_pool_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $27 = 0, $3 = 0, $34 = 0, $4 = 0, $44 = 0, $5 = 0, $6 = 0, $68 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) >>> 0 > 0 & (HEAP32[$3 >> 2] | 0) >>> 0 < 65535)) ___assert_fail(38122, 21538, 1376, 38175);
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) ___assert_fail(38193, 21538, 1377, 38175);
 HEAP32[HEAP32[$2 >> 2] >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$4 >> 2] = (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) * 1232;
 $27 = _malloc(HEAP32[$4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] = $27;
 HEAP32[$5 >> 2] = HEAP32[HEAP32[$2 >> 2] >> 2] << 2;
 $34 = _malloc(HEAP32[$5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = $34;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0)) ___assert_fail(25523, 21538, 1386, 38175);
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2] << 2;
 $44 = _malloc(HEAP32[$6 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] = $44;
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) if (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) {
  _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0, 0, HEAP32[$4 >> 2] | 0) | 0;
  _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0, 0, HEAP32[$5 >> 2] | 0) | 0;
  HEAP32[$7 >> 2] = (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[$7 >> 2] | 0) >>> 0 < 1) break;
   $68 = HEAP32[$7 >> 2] | 0;
   $71 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0;
   $73 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
   $74 = HEAP32[$73 >> 2] | 0;
   HEAP32[$73 >> 2] = $74 + 1;
   HEAP32[$71 + ($74 << 2) >> 2] = $68;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  }
  HEAP8[(HEAP32[$2 >> 2] | 0) + 20 >> 0] = 1;
  $82 = HEAP32[$2 >> 2] | 0;
  $83 = $82 + 20 | 0;
  $84 = HEAP8[$83 >> 0] | 0;
  $85 = $84 & 1;
  STACKTOP = sp;
  return $85 | 0;
 }
 __sfetch_pool_discard(HEAP32[$2 >> 2] | 0);
 $82 = HEAP32[$2 >> 2] | 0;
 $83 = $82 + 20 | 0;
 $84 = HEAP8[$83 >> 0] | 0;
 $85 = $84 & 1;
 STACKTOP = sp;
 return $85 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$040 = 0, $15 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $44 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $scevgep5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $1;
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $35 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  $36 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $35 = 10;
  $36 = $6 & 255;
 }
 $15 = $2 - $3 | 0;
 do if ($15 | 0) {
  if ($7) {
   $22 = HEAP32[$0 >> 2] | 0;
   $23 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $22 = $0;
   $23 = $6 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1, $22, $22 + $23 | 0) | 0) {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($4, $1, $2);
   $26 = HEAP8[$4 + 11 >> 0] | 0;
   $27 = $26 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0, $27 ? HEAP32[$4 >> 2] | 0 : $4, $27 ? HEAP32[$4 + 4 >> 2] | 0 : $26 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   break;
  }
  if (($35 - $36 | 0) >>> 0 < $15 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEmmmmmm($0, $35, $36 + $15 - $35 | 0, $36, $36, 0);
  if ((HEAP8[$5 >> 0] | 0) < 0) $44 = HEAP32[$0 >> 2] | 0; else $44 = $0;
  $scevgep5 = $2 + ($36 - $3) | 0;
  $$0 = $44 + $36 | 0;
  $$040 = $1;
  while (1) {
   if (($$040 | 0) == ($2 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $$040);
   $$0 = $$0 + 1 | 0;
   $$040 = $$040 + 1 | 0;
  }
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($44 + $scevgep5 | 0, $4);
  $49 = $36 + $15 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $49;
   break;
  } else {
   HEAP8[$5 >> 0] = $49;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i16 = 0, $$014 = 0, $10 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 if (($0 | 0) == ($1 | 0)) $$014 = $0; else if ((HEAP8[$0 >> 0] | 0) == 46) {
  $10 = $2 + 4 | 0;
  if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) $$014 = $0; else {
   HEAP32[$5 >> 2] = 0;
   HEAP32[$5 + 4 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5, $0, $1);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5, 0, 47874) | 0;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4, 47877) | 0;
   HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   $$0$i$i$i16 = 0;
   while (1) {
    if (($$0$i$i$i16 | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i$i16 << 2) >> 2] = 0;
    $$0$i$i$i16 = $$0$i$i$i16 + 1 | 0;
   }
   $22 = HEAP8[$3 + 11 >> 0] | 0;
   $23 = $22 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$10 >> 2] | 0) + -24 | 0, $23 ? HEAP32[$3 >> 2] | 0 : $3, $23 ? HEAP32[$3 + 4 >> 2] | 0 : $22 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $$014 = $1;
  }
 } else $$014 = $0;
 STACKTOP = sp;
 return $$014 | 0;
}

function _stbi__gif_header($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $42 = 0, $45 = 0, $5 = 0, $50 = 0, $55 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $83 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = sp + 20 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if (((_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255 | 0) == 71) if (((_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255 | 0) == 73) if (((_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255 | 0) == 70) if (((_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255 | 0) == 56) {
  HEAP8[$9 >> 0] = _stbi__get8(HEAP32[$5 >> 2] | 0) | 0;
  if ((HEAPU8[$9 >> 0] | 0 | 0) != 55) if ((HEAPU8[$9 >> 0] | 0 | 0) != 57) {
   HEAP32[$4 >> 2] = _stbi__err(44064) | 0;
   $83 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $83 | 0;
  }
  if (((_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255 | 0) != 97) {
   HEAP32[$4 >> 2] = _stbi__err(44064) | 0;
   $83 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $83 | 0;
  }
  $42 = _stbi__get16le(HEAP32[$5 >> 2] | 0) | 0;
  HEAP32[HEAP32[$6 >> 2] >> 2] = $42;
  $45 = _stbi__get16le(HEAP32[$5 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] = $45;
  $50 = (_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] = $50;
  $55 = (_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] = $55;
  $60 = (_stbi__get8(HEAP32[$5 >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] = $60;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2] = -1;
  if (HEAP32[$7 >> 2] | 0) HEAP32[HEAP32[$7 >> 2] >> 2] = 4;
  if (HEAP32[$8 >> 2] | 0) {
   HEAP32[$4 >> 2] = 1;
   $83 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $83 | 0;
  }
  if (HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] & 128 | 0) _stbi__gif_parse_colortable(HEAP32[$5 >> 2] | 0, (HEAP32[$6 >> 2] | 0) + 40 | 0, 2 << (HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] & 7), -1);
  HEAP32[$4 >> 2] = 1;
  $83 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 HEAP32[$4 >> 2] = _stbi__err(44064) | 0;
 $83 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $83 | 0;
}

function __sgl_matmul4($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = 0;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= 4) break;
  HEAPF32[$7 >> 2] = +HEAPF32[(HEAP32[$4 >> 2] | 0) + (HEAP32[$6 >> 2] << 2) >> 2];
  HEAPF32[$8 >> 2] = +HEAPF32[(HEAP32[$4 >> 2] | 0) + 16 + (HEAP32[$6 >> 2] << 2) >> 2];
  HEAPF32[$9 >> 2] = +HEAPF32[(HEAP32[$4 >> 2] | 0) + 32 + (HEAP32[$6 >> 2] << 2) >> 2];
  HEAPF32[$10 >> 2] = +HEAPF32[(HEAP32[$4 >> 2] | 0) + 48 + (HEAP32[$6 >> 2] << 2) >> 2];
  HEAPF32[(HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] << 2) >> 2] = +HEAPF32[$7 >> 2] * +HEAPF32[HEAP32[$5 >> 2] >> 2] + +HEAPF32[$8 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] + +HEAPF32[$9 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] + +HEAPF32[$10 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 12 >> 2];
  HEAPF32[(HEAP32[$3 >> 2] | 0) + 16 + (HEAP32[$6 >> 2] << 2) >> 2] = +HEAPF32[$7 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] + +HEAPF32[$8 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 16 + 4 >> 2] + +HEAPF32[$9 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 16 + 8 >> 2] + +HEAPF32[$10 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 16 + 12 >> 2];
  HEAPF32[(HEAP32[$3 >> 2] | 0) + 32 + (HEAP32[$6 >> 2] << 2) >> 2] = +HEAPF32[$7 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] + +HEAPF32[$8 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 32 + 4 >> 2] + +HEAPF32[$9 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 32 + 8 >> 2] + +HEAPF32[$10 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 32 + 12 >> 2];
  HEAPF32[(HEAP32[$3 >> 2] | 0) + 48 + (HEAP32[$6 >> 2] << 2) >> 2] = +HEAPF32[$7 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] + +HEAPF32[$8 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 48 + 4 >> 2] + +HEAPF32[$9 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 48 + 8 >> 2] + +HEAPF32[$10 >> 2] * +HEAPF32[(HEAP32[$5 >> 2] | 0) + 48 + 12 >> 2];
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($0) {
 $0 = $0 | 0;
 var $$017$off022 = 0, $$01918 = 0, $$020153134 = 0, $$02016 = 0, $$pre$phi37Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $28 = 0, $3 = 0, $spec$select$i = 0, label = 0;
 $1 = $0 + 11 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 << 24 >> 24 < 0;
 if ($3) {
  $11 = HEAP32[$0 + 4 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $11 = $2 & 255;
  $15 = 10;
 }
 $10 = $11 >>> 0 < 11;
 $spec$select$i = $10 ? 10 : ($11 + 16 & -16) + -1 | 0;
 L5 : do if (($spec$select$i | 0) != ($15 | 0)) {
  do if ($10) {
   $23 = HEAP32[$0 >> 2] | 0;
   if ($3) {
    $$017$off022 = 0;
    $$01918 = $23;
    $$02016 = $0;
    label = 12;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcm($0, $23, ($2 & 255) + 1 | 0) | 0;
    __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($23);
    label = 15;
   }
  } else {
   $17 = $spec$select$i + 1 | 0;
   $18 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($17) | 0;
   if ($spec$select$i >>> 0 <= $15 >>> 0 & ($18 | 0) == 0) break L5;
   $20 = HEAP8[$1 >> 0] | 0;
   if ($20 << 24 >> 24 < 0) {
    $$017$off022 = 1;
    $$01918 = HEAP32[$0 >> 2] | 0;
    $$02016 = $18;
    label = 12;
    break;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcm($18, $0, ($20 & 255) + 1 | 0) | 0;
    $$020153134 = $18;
    $$pre$phi37Z2D = $17;
    $$pre$phiZ2D = $0 + 4 | 0;
    label = 14;
    break;
   }
  } while (0);
  if ((label | 0) == 12) {
   $28 = $0 + 4 | 0;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($$02016, $$01918, (HEAP32[$28 >> 2] | 0) + 1 | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($$01918);
   if ($$017$off022) {
    $$020153134 = $$02016;
    $$pre$phi37Z2D = $spec$select$i + 1 | 0;
    $$pre$phiZ2D = $28;
    label = 14;
   } else label = 15;
  }
  if ((label | 0) == 14) {
   HEAP32[$0 + 8 >> 2] = $$pre$phi37Z2D | -2147483648;
   HEAP32[$$pre$phiZ2D >> 2] = $11;
   HEAP32[$0 >> 2] = $$020153134;
   break;
  } else if ((label | 0) == 15) {
   HEAP8[$1 >> 0] = $11;
   break;
  }
 } while (0);
 return;
}

function _HMM_Rotate($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $$byval_copy = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $$byval_copy = sp + 92 | 0;
 $3 = sp + 88 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAPF32[$3 >> 2] = $1;
 _HMM_Mat4d($4, 1.0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 _HMM_NormalizeVec3($5, $$byval_copy);
 HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAPF32[$6 >> 2] = +_HMM_SinF(+_HMM_ToRadians(+HEAPF32[$3 >> 2]));
 HEAPF32[$7 >> 2] = +_HMM_CosF(+_HMM_ToRadians(+HEAPF32[$3 >> 2]));
 HEAPF32[$8 >> 2] = 1.0 - +HEAPF32[$7 >> 2];
 HEAPF32[$4 >> 2] = +HEAPF32[$2 >> 2] * +HEAPF32[$2 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$7 >> 2];
 HEAPF32[$4 + 4 >> 2] = +HEAPF32[$2 >> 2] * +HEAPF32[$2 + 4 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$2 + 8 >> 2] * +HEAPF32[$6 >> 2];
 HEAPF32[$4 + 8 >> 2] = +HEAPF32[$2 >> 2] * +HEAPF32[$2 + 8 >> 2] * +HEAPF32[$8 >> 2] - +HEAPF32[$2 + 4 >> 2] * +HEAPF32[$6 >> 2];
 HEAPF32[$4 + 16 >> 2] = +HEAPF32[$2 + 4 >> 2] * +HEAPF32[$2 >> 2] * +HEAPF32[$8 >> 2] - +HEAPF32[$2 + 8 >> 2] * +HEAPF32[$6 >> 2];
 HEAPF32[$4 + 16 + 4 >> 2] = +HEAPF32[$2 + 4 >> 2] * +HEAPF32[$2 + 4 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$7 >> 2];
 HEAPF32[$4 + 16 + 8 >> 2] = +HEAPF32[$2 + 4 >> 2] * +HEAPF32[$2 + 8 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$2 >> 2] * +HEAPF32[$6 >> 2];
 HEAPF32[$4 + 32 >> 2] = +HEAPF32[$2 + 8 >> 2] * +HEAPF32[$2 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$2 + 4 >> 2] * +HEAPF32[$6 >> 2];
 HEAPF32[$4 + 32 + 4 >> 2] = +HEAPF32[$2 + 8 >> 2] * +HEAPF32[$2 + 4 >> 2] * +HEAPF32[$8 >> 2] - +HEAPF32[$2 >> 2] * +HEAPF32[$6 >> 2];
 HEAPF32[$4 + 32 + 8 >> 2] = +HEAPF32[$2 + 8 >> 2] * +HEAPF32[$2 + 8 >> 2] * +HEAPF32[$8 >> 2] + +HEAPF32[$7 >> 2];
 dest = $0;
 src = $4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __sgl_vtx($0, $1, $2, $3, $4, $5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $23 = 0, $25 = 0, $29 = 0, $31 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAPF32[$6 >> 2] = $0;
 HEAPF32[$7 >> 2] = $1;
 HEAPF32[$8 >> 2] = $2;
 HEAPF32[$9 >> 2] = $3;
 HEAPF32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = $5;
 if (!(HEAP8[2157736] & 1)) ___assert_fail(20005, 19399, 2413, 37952);
 if ((HEAP32[539438] | 0) == 5) if ((HEAP32[539432] & 3 | 0) == 3) {
  HEAP32[$12 >> 2] = __sgl_next_vertex() | 0;
  if (HEAP32[$12 >> 2] | 0) {
   $23 = HEAP32[$12 >> 2] | 0;
   $25 = (HEAP32[$12 >> 2] | 0) + -72 | 0;
   HEAP32[$23 >> 2] = HEAP32[$25 >> 2];
   HEAP32[$23 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
   HEAP32[$23 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
   HEAP32[$23 + 12 >> 2] = HEAP32[$25 + 12 >> 2];
   HEAP32[$23 + 16 >> 2] = HEAP32[$25 + 16 >> 2];
   HEAP32[$23 + 20 >> 2] = HEAP32[$25 + 20 >> 2];
  }
  HEAP32[$12 >> 2] = __sgl_next_vertex() | 0;
  if (HEAP32[$12 >> 2] | 0) {
   $29 = HEAP32[$12 >> 2] | 0;
   $31 = (HEAP32[$12 >> 2] | 0) + -48 | 0;
   HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
   HEAP32[$29 + 4 >> 2] = HEAP32[$31 + 4 >> 2];
   HEAP32[$29 + 8 >> 2] = HEAP32[$31 + 8 >> 2];
   HEAP32[$29 + 12 >> 2] = HEAP32[$31 + 12 >> 2];
   HEAP32[$29 + 16 >> 2] = HEAP32[$31 + 16 >> 2];
   HEAP32[$29 + 20 >> 2] = HEAP32[$31 + 20 >> 2];
  }
 }
 HEAP32[$12 >> 2] = __sgl_next_vertex() | 0;
 if (!(HEAP32[$12 >> 2] | 0)) {
  $53 = HEAP32[539432] | 0;
  $54 = $53 + 1 | 0;
  HEAP32[539432] = $54;
  STACKTOP = sp;
  return;
 }
 HEAPF32[HEAP32[$12 >> 2] >> 2] = +HEAPF32[$6 >> 2];
 HEAPF32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] = +HEAPF32[$7 >> 2];
 HEAPF32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] = +HEAPF32[$8 >> 2];
 HEAPF32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] = +HEAPF32[$9 >> 2];
 HEAPF32[(HEAP32[$12 >> 2] | 0) + 12 + 4 >> 2] = +HEAPF32[$10 >> 2];
 HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] = HEAP32[$11 >> 2];
 $53 = HEAP32[539432] | 0;
 $54 = $53 + 1 | 0;
 HEAP32[539432] = $54;
 STACKTOP = sp;
 return;
}

function __sg_gl_reset_state_cache() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (!(HEAP32[539255] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5559, 26526);
 _memset(2157032, 0, 612) | 0;
 __sg_gl_cache_clear_buffer_bindings(1);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5568, 26526);
 __sg_gl_cache_clear_texture_bindings(1);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5570, 26526);
 HEAP32[$0 >> 2] = 0;
 while (1) {
  if ((HEAP32[$0 >> 2] | 0) >= (HEAP32[539158] | 0)) break;
  HEAP32[$1 >> 2] = 2157176 + ((HEAP32[$0 >> 2] | 0) * 20 | 0);
  HEAP8[HEAP32[$1 >> 2] >> 0] = -1;
  HEAP8[(HEAP32[$1 >> 2] | 0) + 1 >> 0] = -1;
  _glDisableVertexAttribArray(HEAP32[$0 >> 2] | 0);
  if (_glGetError() | 0) {
   label = 11;
   break;
  }
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 }
 if ((label | 0) == 11) ___assert_fail(25839, 17628, 5576, 26526);
 HEAP32[539406] = 4;
 _glGetIntegerv(35725, 2157512);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5582, 26526);
 HEAP32[539259] = 8;
 HEAP32[539265] = 8;
 HEAP32[539266] = 1;
 HEAP32[539267] = 1;
 HEAP32[539268] = 1;
 HEAP32[539269] = 8;
 HEAP32[539270] = 1;
 HEAP32[539271] = 1;
 HEAP32[539272] = 1;
 _glEnable(2929);
 _glDepthFunc(519);
 _glDepthMask(0);
 _glDisable(2960);
 _glStencilFunc(519, 0, 0);
 _glStencilOp(7680, 7680, 7680);
 _glStencilMask(0);
 HEAP32[539275] = 2;
 HEAP32[539276] = 1;
 HEAP32[539277] = 1;
 HEAP32[539278] = 2;
 HEAP32[539279] = 1;
 HEAP32[539280] = 1;
 _glDisable(3042);
 _glBlendFuncSeparate(1, 0, 1, 0);
 _glBlendEquationSeparate(32774, 32774);
 _glBlendColor(0.0, 0.0, 0.0, 0.0);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if ((HEAP32[$2 >> 2] | 0) >= 4) break;
  HEAP32[2157124 + (HEAP32[$2 >> 2] << 2) >> 2] = 15;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 HEAP32[539285] = 1;
 HEAP32[539286] = 2;
 HEAP32[539288] = 1;
 _glColorMask(1, 1, 1, 1);
 _glPolygonOffset(0.0, 0.0);
 _glDisable(32823);
 _glDisable(2884);
 _glFrontFace(2304);
 _glCullFace(1029);
 _glEnable(3089);
 _glDisable(32926);
 _glEnable(3024);
 _glDisable(32823);
 STACKTOP = sp;
 return;
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $5;
 $7 = $0 + 20 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0;
 HEAP32[$3 + 4 >> 2] = $9;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($12 | 0) == ($17 | 0)) label = 3; else {
  $$04756 = 2;
  $$04855 = $12;
  $$04954 = $3;
  $27 = $17;
  while (1) {
   if (($27 | 0) < 0) break;
   $$04855 = $$04855 - $27 | 0;
   $37 = HEAP32[$$04954 + 4 >> 2] | 0;
   $38 = $27 >>> 0 > $37 >>> 0;
   $$150 = $38 ? $$04954 + 8 | 0 : $$04954;
   $$1 = $$04756 + ($38 << 31 >> 31) | 0;
   $$0 = $27 - ($38 ? $37 : 0) | 0;
   HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0;
   $44 = $$150 + 4 | 0;
   HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $$150;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $$1;
   $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($$04855 | 0) == ($27 | 0)) {
    label = 3;
    break L1;
   } else {
    $$04756 = $$1;
    $$04954 = $$150;
   }
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  if (($$04756 | 0) == 2) $$051 = 0; else $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$4 >> 2] = $25;
  HEAP32[$7 >> 2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}

function __sapp_emsc_keytable_init() {
 HEAP32[13005] = 259;
 HEAP32[13006] = 258;
 HEAP32[13010] = 257;
 HEAP32[13013] = 340;
 HEAP32[13014] = 341;
 HEAP32[13015] = 342;
 HEAP32[13016] = 284;
 HEAP32[13024] = 256;
 HEAP32[13029] = 32;
 HEAP32[13030] = 266;
 HEAP32[13031] = 267;
 HEAP32[13032] = 269;
 HEAP32[13033] = 268;
 HEAP32[13034] = 263;
 HEAP32[13035] = 265;
 HEAP32[13036] = 262;
 HEAP32[13037] = 264;
 HEAP32[13042] = 260;
 HEAP32[13043] = 261;
 HEAP32[13045] = 48;
 HEAP32[13046] = 49;
 HEAP32[13047] = 50;
 HEAP32[13048] = 51;
 HEAP32[13049] = 52;
 HEAP32[13050] = 53;
 HEAP32[13051] = 54;
 HEAP32[13052] = 55;
 HEAP32[13053] = 56;
 HEAP32[13054] = 57;
 HEAP32[13056] = 59;
 HEAP32[13061] = 61;
 HEAP32[13062] = 65;
 HEAP32[13063] = 66;
 HEAP32[13064] = 67;
 HEAP32[13065] = 68;
 HEAP32[13066] = 69;
 HEAP32[13067] = 70;
 HEAP32[13068] = 71;
 HEAP32[13069] = 72;
 HEAP32[13070] = 73;
 HEAP32[13071] = 74;
 HEAP32[13072] = 75;
 HEAP32[13073] = 76;
 HEAP32[13074] = 77;
 HEAP32[13075] = 78;
 HEAP32[13076] = 79;
 HEAP32[13077] = 80;
 HEAP32[13078] = 81;
 HEAP32[13079] = 82;
 HEAP32[13080] = 83;
 HEAP32[13081] = 84;
 HEAP32[13082] = 85;
 HEAP32[13083] = 86;
 HEAP32[13084] = 87;
 HEAP32[13085] = 88;
 HEAP32[13086] = 89;
 HEAP32[13087] = 90;
 HEAP32[13088] = 343;
 HEAP32[13090] = 348;
 HEAP32[13093] = 320;
 HEAP32[13094] = 321;
 HEAP32[13095] = 322;
 HEAP32[13096] = 323;
 HEAP32[13097] = 324;
 HEAP32[13098] = 325;
 HEAP32[13099] = 326;
 HEAP32[13100] = 327;
 HEAP32[13101] = 328;
 HEAP32[13102] = 329;
 HEAP32[13103] = 332;
 HEAP32[13104] = 334;
 HEAP32[13106] = 333;
 HEAP32[13107] = 330;
 HEAP32[13108] = 331;
 HEAP32[13109] = 290;
 HEAP32[13110] = 291;
 HEAP32[13111] = 292;
 HEAP32[13112] = 293;
 HEAP32[13113] = 294;
 HEAP32[13114] = 295;
 HEAP32[13115] = 296;
 HEAP32[13116] = 297;
 HEAP32[13117] = 298;
 HEAP32[13118] = 299;
 HEAP32[13119] = 300;
 HEAP32[13120] = 301;
 HEAP32[13141] = 282;
 HEAP32[13142] = 281;
 HEAP32[13170] = 45;
 HEAP32[13183] = 59;
 HEAP32[13184] = 61;
 HEAP32[13185] = 44;
 HEAP32[13186] = 45;
 HEAP32[13187] = 46;
 HEAP32[13188] = 47;
 HEAP32[13189] = 96;
 HEAP32[13216] = 91;
 HEAP32[13217] = 92;
 HEAP32[13218] = 93;
 HEAP32[13219] = 39;
 HEAP32[13221] = 343;
 return;
}

function __sg_shader_desc_defaults($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $22 = 0, $3 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $92 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2144 | 0;
 $2 = sp + 2132 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$2 >> 2] = $1;
 _memcpy($3 | 0, HEAP32[$2 >> 2] | 0, 2100) | 0;
 if (!(HEAP32[$3 + 196 + 12 >> 2] | 0)) $22 = 41568; else $22 = HEAP32[$3 + 196 + 12 >> 2] | 0;
 HEAP32[$3 + 196 + 12 >> 2] = $22;
 if (!(HEAP32[$3 + 1144 + 12 >> 2] | 0)) $32 = 41568; else $32 = HEAP32[$3 + 1144 + 12 >> 2] | 0;
 HEAP32[$3 + 1144 + 12 >> 2] = $32;
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= 2) break;
  HEAP32[$5 >> 2] = (HEAP32[$4 >> 2] | 0) == 0 ? $3 + 196 | 0 : $3 + 1144 | 0;
  HEAP32[$6 >> 2] = 0;
  while (1) {
   if ((HEAP32[$6 >> 2] | 0) >= 4) break;
   HEAP32[$7 >> 2] = (HEAP32[$5 >> 2] | 0) + 20 + ((HEAP32[$6 >> 2] | 0) * 196 | 0);
   if (!(HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) break;
   HEAP32[$8 >> 2] = 0;
   while (1) {
    if ((HEAP32[$8 >> 2] | 0) >= 16) break;
    HEAP32[$9 >> 2] = (HEAP32[$7 >> 2] | 0) + 4 + ((HEAP32[$8 >> 2] | 0) * 12 | 0);
    if (!(HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] | 0)) break;
    if (!(HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0)) $68 = 1; else $68 = HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0;
    HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] = $68;
    HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
   }
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
  }
  HEAP32[$10 >> 2] = 0;
  while (1) {
   if ((HEAP32[$10 >> 2] | 0) >= 12) break;
   HEAP32[$11 >> 2] = (HEAP32[$5 >> 2] | 0) + 804 + ((HEAP32[$10 >> 2] | 0) * 12 | 0);
   if (!(HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] | 0)) break;
   if (!(HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0)) $92 = 1; else $92 = HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0;
   HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] = $92;
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 _memcpy($0 | 0, $3 | 0, 2100) | 0;
 STACKTOP = sp;
 return;
}

function _stbtt_GetGlyphBitmapBoxSubpixel($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $48 = 0, $61 = 0, $73 = 0, $86 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $14 = sp + 36 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $21 = sp + 8 | 0;
 $22 = sp + 4 | 0;
 $23 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAPF32[$12 >> 2] = $2;
 HEAPF32[$13 >> 2] = $3;
 HEAPF32[$14 >> 2] = $4;
 HEAPF32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = $9;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$21 >> 2] = 0;
 $27 = (_stbtt_GetGlyphBox(HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, $20, $21, $22, $23) | 0) != 0;
 $29 = (HEAP32[$16 >> 2] | 0) != 0;
 if ($27) {
  if ($29) {
   $48 = ~~+Math_floor(+(+(HEAP32[$20 >> 2] | 0) * +HEAPF32[$12 >> 2] + +HEAPF32[$14 >> 2]));
   HEAP32[HEAP32[$16 >> 2] >> 2] = $48;
  }
  if (HEAP32[$17 >> 2] | 0) {
   $61 = ~~+Math_floor(+(+(0 - (HEAP32[$23 >> 2] | 0) | 0) * +HEAPF32[$13 >> 2] + +HEAPF32[$15 >> 2]));
   HEAP32[HEAP32[$17 >> 2] >> 2] = $61;
  }
  if (HEAP32[$18 >> 2] | 0) {
   $73 = ~~+Math_ceil(+(+(HEAP32[$22 >> 2] | 0) * +HEAPF32[$12 >> 2] + +HEAPF32[$14 >> 2]));
   HEAP32[HEAP32[$18 >> 2] >> 2] = $73;
  }
  if (!(HEAP32[$19 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  $86 = ~~+Math_ceil(+(+(0 - (HEAP32[$21 >> 2] | 0) | 0) * +HEAPF32[$13 >> 2] + +HEAPF32[$15 >> 2]));
  HEAP32[HEAP32[$19 >> 2] >> 2] = $86;
  STACKTOP = sp;
  return;
 } else {
  if ($29) HEAP32[HEAP32[$16 >> 2] >> 2] = 0;
  if (HEAP32[$17 >> 2] | 0) HEAP32[HEAP32[$17 >> 2] >> 2] = 0;
  if (HEAP32[$18 >> 2] | 0) HEAP32[HEAP32[$18 >> 2] >> 2] = 0;
  if (!(HEAP32[$19 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[HEAP32[$19 >> 2] >> 2] = 0;
  STACKTOP = sp;
  return;
 }
}

function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert28 = 0, $$pre = 0, $1 = 0, $12 = 0, $17 = 0, $2 = 0, $23 = 0, $26 = 0, $28 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $49 = 0, $50 = 0, $56 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $7 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $83 = 0, $84 = 0, $89 = 0, label = 0;
 $1 = $0 + 112 | 0;
 $2 = $1;
 $4 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 if (($4 | 0) == 0 & ($7 | 0) == 0) label = 3; else {
  $12 = $0 + 120 | 0;
  $17 = HEAP32[$12 + 4 >> 2] | 0;
  if (($17 | 0) < ($7 | 0) | (($17 | 0) == ($7 | 0) ? (HEAP32[$12 >> 2] | 0) >>> 0 < $4 >>> 0 : 0)) label = 3; else label = 4;
 }
 if ((label | 0) == 3) {
  $23 = ___uflow($0) | 0;
  if (($23 | 0) < 0) label = 4; else {
   $26 = $1;
   $28 = HEAP32[$26 >> 2] | 0;
   $31 = HEAP32[$26 + 4 >> 2] | 0;
   $$pre = HEAP32[$0 + 8 >> 2] | 0;
   if (($28 | 0) == 0 & ($31 | 0) == 0) {
    $89 = $$pre;
    label = 9;
   } else {
    $37 = HEAP32[$0 + 4 >> 2] | 0;
    $39 = $$pre - $37 | 0;
    $41 = (($39 | 0) < 0) << 31 >> 31;
    $43 = $0 + 120 | 0;
    $49 = _i64Subtract($28 | 0, $31 | 0, HEAP32[$43 >> 2] | 0, HEAP32[$43 + 4 >> 2] | 0) | 0;
    $50 = getTempRet0() | 0;
    $56 = $$pre;
    if (($50 | 0) > ($41 | 0) | ($50 | 0) == ($41 | 0) & $49 >>> 0 > $39 >>> 0) {
     $89 = $56;
     label = 9;
    } else {
     HEAP32[$0 + 104 >> 2] = $37 + ($49 + -1);
     $62 = $56;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$0 + 104 >> 2] = $$pre;
    $62 = $89;
   }
   $$phi$trans$insert28 = $0 + 4 | 0;
   if (!$62) $84 = HEAP32[$$phi$trans$insert28 >> 2] | 0; else {
    $63 = HEAP32[$$phi$trans$insert28 >> 2] | 0;
    $66 = $62 + 1 - $63 | 0;
    $69 = $0 + 120 | 0;
    $70 = $69;
    $76 = _i64Add(HEAP32[$70 >> 2] | 0, HEAP32[$70 + 4 >> 2] | 0, $66 | 0, (($66 | 0) < 0) << 31 >> 31 | 0) | 0;
    $77 = getTempRet0() | 0;
    $78 = $69;
    HEAP32[$78 >> 2] = $76;
    HEAP32[$78 + 4 >> 2] = $77;
    $84 = $63;
   }
   $83 = $84 + -1 | 0;
   if (($23 | 0) == (HEAPU8[$83 >> 0] | 0 | 0)) $$0 = $23; else {
    HEAP8[$83 >> 0] = $23;
    $$0 = $23;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 104 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _stbi__psd_decode_rle($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $13 = 0, $22 = 0, $3 = 0, $33 = 0, $4 = 0, $5 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 $10 = sp + 28 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = 0;
 L1 : while (1) {
  $13 = (HEAP32[$6 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0;
  HEAP32[$8 >> 2] = $13;
  if (($13 | 0) <= 0) {
   label = 17;
   break;
  }
  HEAP32[$9 >> 2] = (_stbi__get8(HEAP32[$4 >> 2] | 0) | 0) & 255;
  L4 : do if ((HEAP32[$9 >> 2] | 0) != 128) {
   $22 = HEAP32[$9 >> 2] | 0;
   if ((HEAP32[$9 >> 2] | 0) < 128) {
    HEAP32[$9 >> 2] = $22 + 1;
    if ((HEAP32[$9 >> 2] | 0) > (HEAP32[$8 >> 2] | 0)) {
     label = 6;
     break L1;
    }
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$9 >> 2] | 0);
    while (1) {
     if (!(HEAP32[$9 >> 2] | 0)) break L4;
     $33 = _stbi__get8(HEAP32[$4 >> 2] | 0) | 0;
     HEAP8[HEAP32[$5 >> 2] >> 0] = $33;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
    }
   }
   if (($22 | 0) > 128) {
    HEAP32[$9 >> 2] = 257 - (HEAP32[$9 >> 2] | 0);
    if ((HEAP32[$9 >> 2] | 0) > (HEAP32[$8 >> 2] | 0)) {
     label = 12;
     break L1;
    }
    HEAP8[$10 >> 0] = _stbi__get8(HEAP32[$4 >> 2] | 0) | 0;
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$9 >> 2] | 0);
    while (1) {
     if (!(HEAP32[$9 >> 2] | 0)) break L4;
     HEAP8[HEAP32[$5 >> 2] >> 0] = HEAP8[$10 >> 0] | 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
    }
   }
  } while (0);
 }
 if ((label | 0) == 6) {
  HEAP32[$3 >> 2] = 0;
  $58 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 } else if ((label | 0) == 12) {
  HEAP32[$3 >> 2] = 0;
  $58 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 } else if ((label | 0) == 17) {
  HEAP32[$3 >> 2] = 1;
  $58 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 }
 return 0;
}

function __Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$05060 = 0, $$051$lcssa = 0.0, $$05159 = 0.0, $$052$lcssa = 0.0, $$05258 = 0.0, $$056 = 0, $$1$lcssa = 0.0, $$153$lcssa = 0.0, $$15354 = 0.0, $$155 = 0.0, $$2 = 0.0, $12 = 0, $17 = 0, $20 = 0, $23 = 0, $25 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0.0, $46 = 0.0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = ~~+_llvm_round_f64(+(+HEAPF64[$1 >> 3]));
 HEAP32[$4 >> 2] = 0;
 $9 = $0 + 4 | 0;
 HEAP32[$5 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
 $12 = __ZN2Dr5ClampIiEET_RKS1_S3_S3_($3, $4, $5) | 0;
 HEAP32[$3 >> 2] = ~~+_llvm_round_f64(+(+HEAPF64[$1 + 8 >> 3]));
 HEAP32[$4 >> 2] = 0;
 $17 = $0 + 8 | 0;
 HEAP32[$5 >> 2] = (HEAP32[$17 >> 2] | 0) + -1;
 $20 = __ZN2Dr5ClampIiEET_RKS1_S3_S3_($3, $4, $5) | 0;
 $23 = ($12 | 0) > 0 ? $12 + -1 | 0 : 0;
 $25 = (HEAP32[$9 >> 2] | 0) + -1 | 0;
 $28 = ($12 | 0) < ($25 | 0) ? $12 + 1 | 0 : $25;
 $31 = ($20 | 0) > 0 ? $20 + -1 | 0 : 0;
 $33 = (HEAP32[$17 >> 2] | 0) + -1 | 0;
 $36 = ($20 | 0) < ($33 | 0) ? $20 + 1 | 0 : $33;
 if (($23 | 0) > ($28 | 0)) {
  $$051$lcssa = 0.0;
  $$052$lcssa = 0.0;
 } else {
  $38 = ($31 | 0) > ($36 | 0);
  $$05060 = $23;
  $$05159 = 0.0;
  $$05258 = 0.0;
  while (1) {
   if ($38) {
    $$1$lcssa = $$05159;
    $$153$lcssa = $$05258;
   } else {
    $$056 = $31;
    $$15354 = $$05258;
    $$155 = $$05159;
    while (1) {
     __ZNK8DrBitmap8getPixelEii($3, $0, $$05060, $$056);
     $42 = +__ZNK7DrColor6alphaFEv($3);
     $$2 = $42 < +HEAPF64[$2 >> 3] ? $$155 + 1.0 : $$155;
     $46 = $$15354 + 1.0;
     if (($$056 | 0) < ($36 | 0)) {
      $$056 = $$056 + 1 | 0;
      $$15354 = $46;
      $$155 = $$2;
     } else {
      $$1$lcssa = $$2;
      $$153$lcssa = $46;
      break;
     }
    }
   }
   if (($$05060 | 0) < ($28 | 0)) {
    $$05060 = $$05060 + 1 | 0;
    $$05159 = $$1$lcssa;
    $$05258 = $$153$lcssa;
   } else {
    $$051$lcssa = $$1$lcssa;
    $$052$lcssa = $$153$lcssa;
    break;
   }
  }
 }
 STACKTOP = sp;
 return +($$051$lcssa / $$052$lcssa);
}

function __ZL5inputPK10sapp_event($0) {
 $0 = $0 | 0;
 var $$sink = 0.0, $$sink28 = 0.0, $1 = 0, $13 = 0, $2 = 0, $3 = 0, $35 = 0.0, $37 = 0.0, $38 = 0.0, $46 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 _memcpy(1102928 + ((HEAP32[$3 >> 2] | 0) * 208 | 0) | 0, $0 | 0, 208) | 0;
 switch (HEAP32[$3 >> 2] | 0) {
 case 1:
  {
   if (!(HEAP8[$0 + 20 >> 0] | 0)) if ((HEAP32[$0 + 12 >> 2] | 0) == 87) {
    $13 = (HEAP32[544716] | 0) + 24 | 0;
    HEAP8[$13 >> 0] = HEAP8[$13 >> 0] ^ 1;
   }
   break;
  }
 case 6:
  {
   HEAPF32[2908] = +HEAPF32[2908] - +HEAPF32[$0 + 52 >> 2] * .10000000149011612;
   HEAPF32[$1 >> 2] = .5;
   HEAPF32[$2 >> 2] = 5.0;
   HEAPF32[2908] = +__ZN2Dr5ClampIfEET_RKS1_S3_S3_(11632, $1, $2);
   break;
  }
 case 4:
  {
   if (!(HEAP32[$0 + 28 >> 2] | 0)) {
    __ZN6DrVec23setEff(2178968, +HEAPF32[$0 + 36 >> 2], +HEAPF32[$0 + 32 >> 2]);
    HEAP8[2185857] = 1;
   }
   break;
  }
 case 5:
  {
   if (!(HEAP32[$0 + 28 >> 2] | 0)) HEAP8[2185857] = 0;
   break;
  }
 case 7:
  {
   if (HEAP8[2185857] | 0) {
    $35 = +HEAPF32[$0 + 36 >> 2];
    $37 = +HEAPF32[$0 + 32 >> 2];
    $38 = +HEAPF32[544742];
    if ($38 < $35) {
     $$sink = ($35 - $38) * 1.0;
     label = 15;
    } else if ($38 > $35) {
     $$sink = 360.0 - ($38 - $35) * 1.0;
     label = 15;
    }
    if ((label | 0) == 15) HEAPF32[544724] = $$sink;
    $46 = +HEAPF32[544743];
    if ($46 > $37) {
     $$sink28 = 360.0 - ($46 - $37) * 1.0;
     label = 20;
    } else if ($46 < $37) {
     $$sink28 = ($37 - $46) * 1.0;
     label = 20;
    }
    if ((label | 0) == 20) HEAPF32[544725] = $$sink28;
    HEAPF32[544742] = $35;
    HEAPF32[544743] = $37;
    HEAPF32[544724] = +__ZN2Dr19EqualizeAngle0to360IfEET_RKS1_(2178896);
    HEAPF32[544725] = +__ZN2Dr19EqualizeAngle0to360IfEET_RKS1_(2178900);
   }
   break;
  }
 case 22:
  {
   HEAP32[$1 >> 2] = HEAP32[2960];
   HEAP32[$1 + 4 >> 2] = HEAP32[2961];
   HEAP32[$1 + 8 >> 2] = HEAP32[2962];
   HEAP32[$1 + 12 >> 2] = HEAP32[2963];
   HEAP32[$1 + 16 >> 2] = HEAP32[2964];
   _sapp_html5_fetch_dropped_file($1);
   break;
  }
 default:
  {}
 }
 STACKTOP = sp;
 return;
}

function _fons__atlasInsertNode($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $30 = 0, $38 = 0, $5 = 0, $55 = 0, $6 = 0, $61 = 0, $7 = 0, $8 = 0, $88 = 0, $9 = 0, $91 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 if (((HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] | 0)) {
  if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] | 0)) $30 = 8; else $30 = HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] << 1;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] = $30;
  $38 = _realloc(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] | 0) * 6 | 0) | 0;
  HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] = $38;
  if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0)) {
   HEAP32[$5 >> 2] = 0;
   $91 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $91 | 0;
  }
 }
 HEAP32[$11 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2];
 while (1) {
  if ((HEAP32[$11 >> 2] | 0) <= (HEAP32[$7 >> 2] | 0)) break;
  $55 = (HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$11 >> 2] | 0) * 6 | 0) | 0;
  $61 = (HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$11 >> 2] | 0) - 1 | 0) * 6 | 0) | 0;
  HEAP16[$55 >> 1] = HEAP16[$61 >> 1] | 0;
  HEAP16[$55 + 2 >> 1] = HEAP16[$61 + 2 >> 1] | 0;
  HEAP16[$55 + 4 >> 1] = HEAP16[$61 + 4 >> 1] | 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
 }
 HEAP16[(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) * 6 | 0) >> 1] = HEAP32[$8 >> 2];
 HEAP16[(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) * 6 | 0) + 2 >> 1] = HEAP32[$9 >> 2];
 HEAP16[(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) * 6 | 0) + 4 >> 1] = HEAP32[$10 >> 2];
 $88 = (HEAP32[$6 >> 2] | 0) + 12 | 0;
 HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + 1;
 HEAP32[$5 >> 2] = 1;
 $91 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $91 | 0;
}

function __sg_shader_common_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= 2) {
   label = 16;
   break;
  }
  $15 = HEAP32[$3 >> 2] | 0;
  HEAP32[$5 >> 2] = (HEAP32[$4 >> 2] | 0) == 0 ? $15 + 196 | 0 : $15 + 1144 | 0;
  HEAP32[$6 >> 2] = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 120 | 0);
  if (HEAP32[HEAP32[$6 >> 2] >> 2] | 0) {
   label = 4;
   break;
  }
  HEAP32[$7 >> 2] = 0;
  while (1) {
   if ((HEAP32[$7 >> 2] | 0) >= 4) break;
   HEAP32[$8 >> 2] = (HEAP32[$5 >> 2] | 0) + 20 + ((HEAP32[$7 >> 2] | 0) * 196 | 0);
   if (!(HEAP32[HEAP32[$8 >> 2] >> 2] | 0)) break;
   HEAP32[(HEAP32[$6 >> 2] | 0) + 8 + (HEAP32[$7 >> 2] << 2) >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
   $40 = HEAP32[$6 >> 2] | 0;
   HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
  }
  if (HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0) {
   label = 10;
   break;
  }
  HEAP32[$9 >> 2] = 0;
  while (1) {
   if ((HEAP32[$9 >> 2] | 0) >= 12) break;
   HEAP32[$10 >> 2] = (HEAP32[$5 >> 2] | 0) + 804 + ((HEAP32[$9 >> 2] | 0) * 12 | 0);
   if (!(HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] | 0)) break;
   HEAP32[(HEAP32[$6 >> 2] | 0) + 24 + (HEAP32[$9 >> 2] << 3) >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2];
   HEAP32[(HEAP32[$6 >> 2] | 0) + 24 + (HEAP32[$9 >> 2] << 3) + 4 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2];
   $75 = (HEAP32[$6 >> 2] | 0) + 4 | 0;
   HEAP32[$75 >> 2] = (HEAP32[$75 >> 2] | 0) + 1;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) ___assert_fail(33925, 17628, 2798, 33956); else if ((label | 0) == 10) ___assert_fail(33979, 17628, 2807, 33956); else if ((label | 0) == 16) {
  STACKTOP = sp;
  return;
 }
}

function __sfetch_channel_init($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $32 = 0, $42 = 0, $5 = 0, $50 = 0, $6 = 0, $61 = 0, $7 = 0, $72 = 0, $8 = 0, $81 = 0, $83 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 25 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp + 24 | 0;
 $12 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 if (!((HEAP32[$6 >> 2] | 0) != 0 & (HEAP32[$8 >> 2] | 0) >>> 0 > 0 & (HEAP32[$10 >> 2] | 0) != 0)) ___assert_fail(38210, 21538, 2113, 38252);
 if (HEAP8[(HEAP32[$6 >> 2] | 0) + 72 >> 0] & 1) ___assert_fail(38273, 21538, 2114, 38252);
 HEAP8[$11 >> 0] = 1;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 68 >> 2] = HEAP32[$10 >> 2];
 HEAP32[HEAP32[$6 >> 2] >> 2] = HEAP32[$7 >> 2];
 $32 = (__sfetch_ring_init((HEAP32[$6 >> 2] | 0) + 4 | 0, HEAP32[$9 >> 2] | 0) | 0) & 1;
 HEAP8[$11 >> 0] = (HEAP8[$11 >> 0] & 1 & $32 | 0) != 0 & 1;
 HEAP32[$12 >> 2] = 0;
 while (1) {
  $42 = HEAP32[$6 >> 2] | 0;
  if ((HEAP32[$12 >> 2] | 0) >>> 0 >= (HEAP32[$9 >> 2] | 0) >>> 0) break;
  __sfetch_ring_enqueue($42 + 4 | 0, HEAP32[$12 >> 2] | 0);
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
 }
 $50 = (__sfetch_ring_init($42 + 20 | 0, HEAP32[$8 >> 2] | 0) | 0) & 1;
 HEAP8[$11 >> 0] = (HEAP8[$11 >> 0] & 1 & $50 | 0) != 0 & 1;
 $61 = (__sfetch_ring_init((HEAP32[$6 >> 2] | 0) + 36 | 0, HEAP32[$9 >> 2] | 0) | 0) & 1;
 HEAP8[$11 >> 0] = (HEAP8[$11 >> 0] & 1 & $61 | 0) != 0 & 1;
 $72 = (__sfetch_ring_init((HEAP32[$6 >> 2] | 0) + 52 | 0, HEAP32[$9 >> 2] | 0) | 0) & 1;
 HEAP8[$11 >> 0] = (HEAP8[$11 >> 0] & 1 & $72 | 0) != 0 & 1;
 $81 = HEAP32[$6 >> 2] | 0;
 if (HEAP8[$11 >> 0] & 1) {
  HEAP8[$81 + 72 >> 0] = 1;
  HEAP8[$5 >> 0] = 1;
  $$pre_trunc = HEAP8[$5 >> 0] | 0;
  $83 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $83 | 0;
 } else {
  __sfetch_channel_discard($81);
  HEAP8[$5 >> 0] = 0;
  $$pre_trunc = HEAP8[$5 >> 0] | 0;
  $83 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $83 | 0;
 }
 return 0;
}

function _stbtt_MakeGlyphBitmapSubpixel($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = $9 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $56 = 0, $57 = 0, $58 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $10 = sp + 68 | 0;
 $11 = sp + 64 | 0;
 $12 = sp + 60 | 0;
 $13 = sp + 56 | 0;
 $14 = sp + 52 | 0;
 $15 = sp + 48 | 0;
 $16 = sp + 44 | 0;
 $17 = sp + 40 | 0;
 $18 = sp + 36 | 0;
 $19 = sp + 32 | 0;
 $20 = sp + 28 | 0;
 $21 = sp + 24 | 0;
 $22 = sp + 20 | 0;
 $23 = sp + 16 | 0;
 $24 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAPF32[$15 >> 2] = $5;
 HEAPF32[$16 >> 2] = $6;
 HEAPF32[$17 >> 2] = $7;
 HEAPF32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = $9;
 HEAP32[$23 >> 2] = _stbtt_GetGlyphShape(HEAP32[$10 >> 2] | 0, HEAP32[$19 >> 2] | 0, $22) | 0;
 _stbtt_GetGlyphBitmapBoxSubpixel(HEAP32[$10 >> 2] | 0, HEAP32[$19 >> 2] | 0, +HEAPF32[$15 >> 2], +HEAPF32[$16 >> 2], +HEAPF32[$17 >> 2], +HEAPF32[$18 >> 2], $20, $21, 0, 0);
 HEAP32[$24 + 12 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$24 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$24 + 4 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$24 + 8 >> 2] = HEAP32[$14 >> 2];
 if (!(HEAP32[$24 >> 2] | 0)) {
  $56 = HEAP32[$22 >> 2] | 0;
  $57 = HEAP32[$10 >> 2] | 0;
  $58 = HEAP32[$57 >> 2] | 0;
  _fons__tmpfree($56, $58);
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$24 + 4 >> 2] | 0)) {
  $56 = HEAP32[$22 >> 2] | 0;
  $57 = HEAP32[$10 >> 2] | 0;
  $58 = HEAP32[$57 >> 2] | 0;
  _fons__tmpfree($56, $58);
  STACKTOP = sp;
  return;
 }
 _stbtt_Rasterize($24, .3499999940395355, HEAP32[$22 >> 2] | 0, HEAP32[$23 >> 2] | 0, +HEAPF32[$15 >> 2], +HEAPF32[$16 >> 2], +HEAPF32[$17 >> 2], +HEAPF32[$18 >> 2], HEAP32[$20 >> 2] | 0, HEAP32[$21 >> 2] | 0, 1, HEAP32[HEAP32[$10 >> 2] >> 2] | 0);
 $56 = HEAP32[$22 >> 2] | 0;
 $57 = HEAP32[$10 >> 2] | 0;
 $58 = HEAP32[$57 >> 2] | 0;
 _fons__tmpfree($56, $58);
 STACKTOP = sp;
 return;
}

function _stbtt_GetGlyphKernAdvance($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] | 0);
 if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] | 0)) {
  HEAP32[$3 >> 2] = 0;
  $73 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $73 | 0;
 }
 if (((_ttUSHORT((HEAP32[$7 >> 2] | 0) + 2 | 0) | 0) & 65535 | 0) < 1) {
  HEAP32[$3 >> 2] = 0;
  $73 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $73 | 0;
 }
 if (((_ttUSHORT((HEAP32[$7 >> 2] | 0) + 8 | 0) | 0) & 65535 | 0) != 1) {
  HEAP32[$3 >> 2] = 0;
  $73 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $73 | 0;
 }
 HEAP32[$10 >> 2] = 0;
 HEAP32[$11 >> 2] = ((_ttUSHORT((HEAP32[$7 >> 2] | 0) + 10 | 0) | 0) & 65535) - 1;
 HEAP32[$8 >> 2] = HEAP32[$5 >> 2] << 16 | HEAP32[$6 >> 2];
 while (1) {
  if ((HEAP32[$10 >> 2] | 0) > (HEAP32[$11 >> 2] | 0)) {
   label = 15;
   break;
  }
  HEAP32[$12 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$11 >> 2] | 0) >> 1;
  HEAP32[$9 >> 2] = _ttULONG((HEAP32[$7 >> 2] | 0) + 18 + ((HEAP32[$12 >> 2] | 0) * 6 | 0) | 0) | 0;
  if ((HEAP32[$8 >> 2] | 0) >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) HEAP32[$11 >> 2] = (HEAP32[$12 >> 2] | 0) - 1; else {
   if ((HEAP32[$8 >> 2] | 0) >>> 0 <= (HEAP32[$9 >> 2] | 0) >>> 0) {
    label = 13;
    break;
   }
   HEAP32[$10 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  }
 }
 if ((label | 0) == 13) {
  HEAP32[$3 >> 2] = (_ttSHORT((HEAP32[$7 >> 2] | 0) + 22 + ((HEAP32[$12 >> 2] | 0) * 6 | 0) | 0) | 0) << 16 >> 16;
  $73 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $73 | 0;
 } else if ((label | 0) == 15) {
  HEAP32[$3 >> 2] = 0;
  $73 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $73 | 0;
 }
 return 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
  return dest | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function _stbi__decode_jpeg_header($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 18404 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 18408 >> 2] = -1;
 HEAP8[(HEAP32[$3 >> 2] | 0) + 18372 >> 0] = -1;
 HEAP32[$5 >> 2] = (_stbi__get_marker(HEAP32[$3 >> 2] | 0) | 0) & 255;
 if ((HEAP32[$5 >> 2] | 0) != 216) {
  HEAP32[$2 >> 2] = _stbi__err(45526) | 0;
  $57 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 }
 if ((HEAP32[$4 >> 2] | 0) == 1) {
  HEAP32[$2 >> 2] = 1;
  $57 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 }
 HEAP32[$5 >> 2] = (_stbi__get_marker(HEAP32[$3 >> 2] | 0) | 0) & 255;
 L9 : while (1) {
  if ((HEAP32[$5 >> 2] | 0) == 192 | (HEAP32[$5 >> 2] | 0) == 193) $30 = 1; else $30 = (HEAP32[$5 >> 2] | 0) == 194;
  if (!($30 ^ 1)) {
   label = 17;
   break;
  }
  if (!(_stbi__process_marker(HEAP32[$3 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0)) {
   label = 10;
   break;
  }
  HEAP32[$5 >> 2] = (_stbi__get_marker(HEAP32[$3 >> 2] | 0) | 0) & 255;
  while (1) {
   if ((HEAP32[$5 >> 2] | 0) != 255) break;
   if (_stbi__at_eof(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) {
    label = 14;
    break L9;
   }
   HEAP32[$5 >> 2] = (_stbi__get_marker(HEAP32[$3 >> 2] | 0) | 0) & 255;
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$2 >> 2] = 0;
  $57 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 } else if ((label | 0) == 14) {
  HEAP32[$2 >> 2] = _stbi__err(45533) | 0;
  $57 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $57 | 0;
 } else if ((label | 0) == 17) {
  HEAP32[(HEAP32[$3 >> 2] | 0) + 18380 >> 2] = (HEAP32[$5 >> 2] | 0) == 194 & 1;
  if (_stbi__process_frame_header(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0) {
   HEAP32[$2 >> 2] = 1;
   $57 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $57 | 0;
  } else {
   HEAP32[$2 >> 2] = 0;
   $57 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $57 | 0;
  }
 }
 return 0;
}

function __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $33 = 0, $37 = 0, $47 = 0, $9 = 0;
 $9 = HEAP32[$2 >> 2] | 0;
 $10 = $9 + 1 | 0;
 HEAP32[$2 >> 2] = $9 + 2;
 $12 = $1 + ($3 << 5) | 0;
 $13 = $1 + ($9 << 5) | 0;
 HEAP32[$13 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$13 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
 HEAP32[$13 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
 HEAP32[$13 + 12 >> 2] = HEAP32[$12 + 12 >> 2];
 HEAP32[$13 + 16 >> 2] = HEAP32[$12 + 16 >> 2];
 HEAP32[$13 + 20 >> 2] = HEAP32[$12 + 20 >> 2];
 $14 = $1 + ($4 << 5) | 0;
 $15 = $1 + ($10 << 5) | 0;
 HEAP32[$15 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$15 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
 HEAP32[$15 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
 HEAP32[$15 + 12 >> 2] = HEAP32[$14 + 12 >> 2];
 HEAP32[$15 + 16 >> 2] = HEAP32[$14 + 16 >> 2];
 HEAP32[$15 + 20 >> 2] = HEAP32[$14 + 20 >> 2];
 $16 = $1 + ($4 << 5) + 28 | 0;
 HEAP32[$1 + ($10 << 5) + 28 >> 2] = HEAP32[$16 >> 2];
 $19 = $1 + ($3 << 5) + 28 | 0;
 HEAP32[$1 + ($9 << 5) + 28 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$1 + (HEAP32[$16 >> 2] << 5) + 24 >> 2] = $10;
 HEAP32[$1 + (HEAP32[$19 >> 2] << 5) + 24 >> 2] = $9;
 HEAP32[$19 >> 2] = $10;
 HEAP32[$1 + ($10 << 5) + 24 >> 2] = $3;
 HEAP32[$16 >> 2] = $9;
 HEAP32[$1 + ($9 << 5) + 24 >> 2] = $4;
 HEAP8[$5 + $9 >> 0] = HEAP8[$5 + $3 >> 0] | 0;
 $33 = HEAP32[$6 + ($3 << 2) >> 2] | 0;
 HEAP32[$6 + ($9 << 2) >> 2] = $33;
 HEAP32[$8 + ($9 << 2) >> 2] = HEAP32[$8 + ($3 << 2) >> 2];
 $37 = $7 + 4 | 0;
 if (($37 | 0) != ($33 | 0)) HEAP32[$33 + 16 >> 2] = $9;
 HEAP8[$5 + $10 >> 0] = HEAP8[$5 + $4 >> 0] | 0;
 $47 = HEAP32[$6 + ($4 << 2) >> 2] | 0;
 HEAP32[$6 + ($10 << 2) >> 2] = $47;
 HEAP32[$8 + ($10 << 2) >> 2] = HEAP32[$8 + ($4 << 2) >> 2];
 if (($37 | 0) != ($47 | 0)) HEAP32[$47 + 16 >> 2] = $10;
 return;
}

function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$056 = 0, $$pre = 0, $$pre$phi74Z2D = 0, $$pre$phi80Z2D = 0, $$pre68 = 0, $$sink = 0, $11 = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $24 = 0, $26 = 0, $33 = 0, $6 = 0, $7 = 0, label = 0;
 $2 = ($1 | 0) == ($0 | 0);
 HEAP8[$1 + 12 >> 0] = $2 & 1;
 L1 : do if (!$2) {
  $$056 = $1;
  while (1) {
   $6 = HEAP32[$$056 + 8 >> 2] | 0;
   $7 = $6 + 12 | 0;
   if (HEAP8[$7 >> 0] | 0) break L1;
   $11 = HEAP32[$6 + 8 >> 2] | 0;
   $12 = HEAP32[$11 >> 2] | 0;
   if (($12 | 0) == ($6 | 0)) {
    $15 = HEAP32[$11 + 4 >> 2] | 0;
    if (!$15) {
     label = 7;
     break;
    }
    $17 = $15 + 12 | 0;
    if (!(HEAP8[$17 >> 0] | 0)) $$sink = $17; else {
     label = 7;
     break;
    }
   } else {
    if (!$12) {
     label = 12;
     break;
    }
    $26 = $12 + 12 | 0;
    if (!(HEAP8[$26 >> 0] | 0)) $$sink = $26; else {
     label = 12;
     break;
    }
   }
   HEAP8[$7 >> 0] = 1;
   HEAP8[$11 + 12 >> 0] = ($11 | 0) == ($0 | 0) & 1;
   HEAP8[$$sink >> 0] = 1;
   if (($11 | 0) == ($0 | 0)) break L1; else $$056 = $11;
  }
  if ((label | 0) == 7) {
   if ((HEAP32[$6 >> 2] | 0) == ($$056 | 0)) {
    $$pre$phi74Z2D = $7;
    $24 = $11;
   } else {
    __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($6);
    $$pre68 = HEAP32[$6 + 8 >> 2] | 0;
    $$pre$phi74Z2D = $$pre68 + 12 | 0;
    $24 = HEAP32[$$pre68 + 8 >> 2] | 0;
   }
   HEAP8[$$pre$phi74Z2D >> 0] = 1;
   HEAP8[$24 + 12 >> 0] = 0;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($24);
   break;
  } else if ((label | 0) == 12) {
   if ((HEAP32[$6 >> 2] | 0) == ($$056 | 0)) {
    __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($6);
    $$pre = HEAP32[$6 + 8 >> 2] | 0;
    $$pre$phi80Z2D = $$pre + 12 | 0;
    $33 = HEAP32[$$pre + 8 >> 2] | 0;
   } else {
    $$pre$phi80Z2D = $7;
    $33 = $11;
   }
   HEAP8[$$pre$phi80Z2D >> 0] = 1;
   HEAP8[$33 + 12 >> 0] = 0;
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($33);
   break;
  }
 } while (0);
 return;
}

function __sg_validate_pipeline_desc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17623, 17628, 13467, 34309);
 __sg_validate_begin();
 __sg_validate((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 0, 32);
 __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 552 >> 2] | 0) == 0, 32);
 __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) != 0, 33);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  $24 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
  if ((HEAP32[$2 >> 2] | 0) >= 8) break;
  HEAP32[$3 >> 2] = $24 + ((HEAP32[$2 >> 2] | 0) * 12 | 0);
  if (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) __sg_validate((HEAP32[HEAP32[$3 >> 2] >> 2] & 3 | 0) == 0, 35);
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 __sg_validate((HEAP32[$24 + 96 + 8 >> 2] | 0) != 0, 34);
 HEAP32[$4 >> 2] = __sg_lookup_shader(2156476, HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0;
 __sg_validate(0 != (HEAP32[$4 >> 2] | 0), 33);
 if (!(HEAP32[$4 >> 2] | 0)) {
  $77 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $77 | 0;
 }
 __sg_validate((HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) == 2, 33);
 HEAP8[$5 >> 0] = 1;
 HEAP32[$6 >> 2] = 0;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= 16) {
   label = 17;
   break;
  }
  HEAP32[$7 >> 2] = (HEAP32[$1 >> 2] | 0) + 8 + 96 + ((HEAP32[$6 >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0)) HEAP8[$5 >> 0] = 0; else {
   __sg_validate(HEAP8[$5 >> 0] & 1, 34);
   if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) >= 8) {
    label = 14;
    break;
   }
   __sg_validate((__sg_strempty((HEAP32[$4 >> 2] | 0) + 252 + 4 + (HEAP32[$6 >> 2] << 4) | 0) | 0) ^ 1, 36);
  }
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 if ((label | 0) == 14) ___assert_fail(34063, 17628, 13492, 34309); else if ((label | 0) == 17) {
  $77 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $77 | 0;
 }
 return 0;
}

function _fons__getVertAlign($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $91 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 $8 = sp + 16 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP16[$8 >> 1] = $3;
 $17 = (HEAP32[$7 >> 2] & 8 | 0) != 0;
 if (HEAPU8[(HEAP32[$5 >> 2] | 0) + 8 >> 0] & 1 | 0) {
  if ($17) {
   HEAPF32[$4 >> 2] = +HEAPF32[(HEAP32[$6 >> 2] | 0) + 196 >> 2] * +(HEAP16[$8 >> 1] | 0) / 10.0;
   $91 = +HEAPF32[$4 >> 2];
   STACKTOP = sp;
   return +$91;
  }
  if (HEAP32[$7 >> 2] & 16 | 0) {
   HEAPF32[$4 >> 2] = (+HEAPF32[(HEAP32[$6 >> 2] | 0) + 196 >> 2] + +HEAPF32[(HEAP32[$6 >> 2] | 0) + 200 >> 2]) / 2.0 * +(HEAP16[$8 >> 1] | 0) / 10.0;
   $91 = +HEAPF32[$4 >> 2];
   STACKTOP = sp;
   return +$91;
  }
  if (HEAP32[$7 >> 2] & 64 | 0) {
   HEAPF32[$4 >> 2] = 0.0;
   $91 = +HEAPF32[$4 >> 2];
   STACKTOP = sp;
   return +$91;
  }
  if (HEAP32[$7 >> 2] & 32 | 0) {
   HEAPF32[$4 >> 2] = +HEAPF32[(HEAP32[$6 >> 2] | 0) + 200 >> 2] * +(HEAP16[$8 >> 1] | 0) / 10.0;
   $91 = +HEAPF32[$4 >> 2];
   STACKTOP = sp;
   return +$91;
  }
 } else {
  if ($17) {
   HEAPF32[$4 >> 2] = -+HEAPF32[(HEAP32[$6 >> 2] | 0) + 196 >> 2] * +(HEAP16[$8 >> 1] | 0) / 10.0;
   $91 = +HEAPF32[$4 >> 2];
   STACKTOP = sp;
   return +$91;
  }
  if (HEAP32[$7 >> 2] & 16 | 0) {
   HEAPF32[$4 >> 2] = -(+HEAPF32[(HEAP32[$6 >> 2] | 0) + 196 >> 2] + +HEAPF32[(HEAP32[$6 >> 2] | 0) + 200 >> 2]) / 2.0 * +(HEAP16[$8 >> 1] | 0) / 10.0;
   $91 = +HEAPF32[$4 >> 2];
   STACKTOP = sp;
   return +$91;
  }
  if (HEAP32[$7 >> 2] & 64 | 0) {
   HEAPF32[$4 >> 2] = 0.0;
   $91 = +HEAPF32[$4 >> 2];
   STACKTOP = sp;
   return +$91;
  }
  if (HEAP32[$7 >> 2] & 32 | 0) {
   HEAPF32[$4 >> 2] = -+HEAPF32[(HEAP32[$6 >> 2] | 0) + 200 >> 2] * +(HEAP16[$8 >> 1] | 0) / 10.0;
   $91 = +HEAPF32[$4 >> 2];
   STACKTOP = sp;
   return +$91;
  }
 }
 HEAPF32[$4 >> 2] = 0.0;
 $91 = +HEAPF32[$4 >> 2];
 STACKTOP = sp;
 return +$91;
}

function _stbi__resample_row_h_2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $112 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[sp + 20 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[sp + 12 >> 2] = $4;
 HEAP32[$12 >> 2] = HEAP32[$7 >> 2];
 $18 = HEAP8[HEAP32[$12 >> 2] >> 0] | 0;
 $19 = HEAP32[$6 >> 2] | 0;
 if ((HEAP32[$9 >> 2] | 0) == 1) {
  HEAP8[$19 + 1 >> 0] = $18;
  HEAP8[HEAP32[$6 >> 2] >> 0] = $18;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  $112 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 HEAP8[$19 >> 0] = $18;
 HEAP8[(HEAP32[$6 >> 2] | 0) + 1 >> 0] = ((HEAPU8[HEAP32[$12 >> 2] >> 0] | 0) * 3 | 0) + (HEAPU8[(HEAP32[$12 >> 2] | 0) + 1 >> 0] | 0) + 2 >> 2;
 HEAP32[$11 >> 2] = 1;
 while (1) {
  $41 = HEAP32[$12 >> 2] | 0;
  if ((HEAP32[$11 >> 2] | 0) >= ((HEAP32[$9 >> 2] | 0) - 1 | 0)) break;
  HEAP32[$13 >> 2] = ((HEAPU8[$41 + (HEAP32[$11 >> 2] | 0) >> 0] | 0) * 3 | 0) + 2;
  HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$11 >> 2] << 1) + 0) >> 0] = (HEAP32[$13 >> 2] | 0) + (HEAPU8[(HEAP32[$12 >> 2] | 0) + ((HEAP32[$11 >> 2] | 0) - 1) >> 0] | 0) >> 2;
  HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$11 >> 2] << 1) + 1) >> 0] = (HEAP32[$13 >> 2] | 0) + (HEAPU8[(HEAP32[$12 >> 2] | 0) + ((HEAP32[$11 >> 2] | 0) + 1) >> 0] | 0) >> 2;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
 }
 HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$11 >> 2] << 1) + 0) >> 0] = ((HEAPU8[$41 + ((HEAP32[$9 >> 2] | 0) - 2) >> 0] | 0) * 3 | 0) + (HEAPU8[(HEAP32[$12 >> 2] | 0) + ((HEAP32[$9 >> 2] | 0) - 1) >> 0] | 0) + 2 >> 2;
 HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$11 >> 2] << 1) + 1) >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ((HEAP32[$9 >> 2] | 0) - 1) >> 0] | 0;
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $112 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $112 | 0;
}

function __ZN6DrMesh8triangleEffffffffffff($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 $11 = +$11;
 $12 = +$12;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0.0, $21 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $13 = sp + 48 | 0;
 $14 = sp + 36 | 0;
 $15 = sp + 24 | 0;
 $16 = sp + 12 | 0;
 $17 = sp;
 __ZN6DrVec3C2Ev($13);
 __ZN6DrVec3C2Efff($15, $1, $2, 0.0);
 __ZN6DrVec3C2Efff($16, $9, $10, 0.0);
 __ZN6DrVec3C2Efff($17, $5, $6, 0.0);
 __ZN6DrVec314triangleNormalERKS_S1_S1_($14, $15, $16, $17);
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
 HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
 $20 = +HEAPF32[$0 + 28 >> 2] * .10000000149011612;
 __ZN6DrVec3C2Efff($14, $1, $2, $20);
 __ZN6DrVec2C2Eff($15, $3, $4);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $14, $13, $15, 0);
 __ZN6DrVec3C2Efff($14, $5, $6, $20);
 __ZN6DrVec2C2Eff($15, $7, $8);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $14, $13, $15, 1);
 __ZN6DrVec3C2Efff($14, $9, $10, $20);
 __ZN6DrVec2C2Eff($15, $11, $12);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $14, $13, $15, 2);
 __ZN6DrVec3C2Efff($15, $1, $2, 0.0);
 __ZN6DrVec3C2Efff($16, $5, $6, 0.0);
 __ZN6DrVec3C2Efff($17, $9, $10, 0.0);
 __ZN6DrVec314triangleNormalERKS_S1_S1_($14, $15, $16, $17);
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
 HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
 $21 = -$20;
 __ZN6DrVec3C2Efff($14, $1, $2, $21);
 __ZN6DrVec2C2Eff($15, $3, $4);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $14, $13, $15, 0);
 __ZN6DrVec3C2Efff($14, $9, $10, $21);
 __ZN6DrVec2C2Eff($15, $11, $12);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $14, $13, $15, 1);
 __ZN6DrVec3C2Efff($14, $5, $6, $21);
 __ZN6DrVec2C2Eff($15, $7, $8);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $14, $13, $15, 2);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 100) if ((HEAP8[$0 + 1 >> 0] | 0) == 115) {
  $14 = $0 + 2 | 0;
  $15 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
  if (($15 | 0) == ($14 | 0)) $$3 = $0; else {
   $17 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
   if (($17 | 0) == ($15 | 0)) $$3 = $0; else {
    $19 = $2 + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    if ((($20 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $20 + -24 | 0);
     $27 = HEAP32[$19 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$19 >> 2] = $27 + -24;
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4, 48170, $3);
     $33 = HEAP8[$4 + 11 >> 0] | 0;
     $34 = $33 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$19 >> 2] | 0) + -24 | 0, $34 ? HEAP32[$4 >> 2] | 0 : $4, $34 ? HEAP32[$4 + 4 >> 2] | 0 : $33 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $17;
    }
   }
  }
 } else $$3 = $0; else $$3 = $0; else $$3 = $0;
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 100) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $14 = $0 + 2 | 0;
  $15 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
  if (($15 | 0) == ($14 | 0)) $$3 = $0; else {
   $17 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
   if (($17 | 0) == ($15 | 0)) $$3 = $0; else {
    $19 = $2 + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    if ((($20 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $20 + -24 | 0);
     $27 = HEAP32[$19 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$19 >> 2] = $27 + -24;
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($4, 48168, $3);
     $33 = HEAP8[$4 + 11 >> 0] | 0;
     $34 = $33 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$19 >> 2] | 0) + -24 | 0, $34 ? HEAP32[$4 >> 2] | 0 : $4, $34 ? HEAP32[$4 + 4 >> 2] | 0 : $33 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $17;
    }
   }
  }
 } else $$3 = $0; else $$3 = $0; else $$3 = $0;
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN13TPPLPartition12UpdateVertexEPNS_15PartitionVertexES1_l($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$062 = 0, $$sroa$08$0$copyload = 0.0, $$sroa$410$0$copyload = 0.0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $22 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $7 = HEAP32[$1 + 40 >> 2] | 0;
 $9 = HEAP32[$1 + 44 >> 2] | 0;
 $10 = $7 + 8 | 0;
 $11 = $1 + 8 | 0;
 $12 = $9 + 8 | 0;
 $14 = $1 + 1 | 0;
 HEAP8[$14 >> 0] = (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $10, $11, $12) | 0) & 1;
 __ZNK9TPPLPointmiERKS_($5, $10, $11);
 __ZN13TPPLPartition9NormalizeERK9TPPLPoint($4, 0, $5);
 $$sroa$08$0$copyload = +HEAPF64[$4 >> 3];
 $$sroa$410$0$copyload = +HEAPF64[$4 + 8 >> 3];
 __ZNK9TPPLPointmiERKS_($5, $12, $11);
 __ZN13TPPLPartition9NormalizeERK9TPPLPoint($4, 0, $5);
 HEAPF64[$1 + 32 >> 3] = $$sroa$08$0$copyload * +HEAPF64[$4 >> 3] + $$sroa$410$0$copyload * +HEAPF64[$4 + 8 >> 3];
 $22 = $1 + 2 | 0;
 L1 : do if (!(HEAP8[$14 >> 0] | 0)) HEAP8[$22 >> 0] = 0; else {
  HEAP8[$22 >> 0] = 1;
  if (($3 | 0) > 0) {
   $24 = +HEAPF64[$11 >> 3];
   $25 = $1 + 16 | 0;
   $26 = $7 + 16 | 0;
   $27 = $9 + 16 | 0;
   $$062 = 0;
   L5 : while (1) {
    $28 = $2 + ($$062 * 48 | 0) + 8 | 0;
    $29 = +HEAPF64[$28 >> 3];
    if ($29 == $24) {
     if (!(+HEAPF64[$2 + ($$062 * 48 | 0) + 16 >> 3] == +HEAPF64[$25 >> 3])) label = 6;
    } else label = 6;
    do if ((label | 0) == 6) {
     label = 0;
     if ($29 == +HEAPF64[$10 >> 3]) if (+HEAPF64[$2 + ($$062 * 48 | 0) + 16 >> 3] == +HEAPF64[$26 >> 3]) break;
     if ($29 == +HEAPF64[$12 >> 3]) if (+HEAPF64[$2 + ($$062 * 48 | 0) + 16 >> 3] == +HEAPF64[$27 >> 3]) break;
     if (__ZN13TPPLPartition8IsInsideER9TPPLPointS1_S1_S1_(0, $10, $11, $12, $28) | 0) break L5;
    } while (0);
    $$062 = $$062 + 1 | 0;
    if (($$062 | 0) >= ($3 | 0)) break L1;
   }
   HEAP8[$22 >> 0] = 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _stbi__jpeg_finish($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $86 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 18380 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 8 >> 2] | 0)) break;
  HEAP32[$5 >> 2] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + ((HEAP32[$4 >> 2] | 0) * 72 | 0) + 28 >> 2] | 0) + 7 >> 3;
  HEAP32[$6 >> 2] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + ((HEAP32[$4 >> 2] | 0) * 72 | 0) + 32 >> 2] | 0) + 7 >> 3;
  HEAP32[$3 >> 2] = 0;
  while (1) {
   if ((HEAP32[$3 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
   HEAP32[$2 >> 2] = 0;
   while (1) {
    if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[$5 >> 2] | 0)) break;
    HEAP32[$7 >> 2] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + ((HEAP32[$4 >> 2] | 0) * 72 | 0) + 60 >> 2] | 0) + ((HEAP32[$2 >> 2] | 0) + (Math_imul(HEAP32[$3 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + ((HEAP32[$4 >> 2] | 0) * 72 | 0) + 64 >> 2] | 0) | 0) << 6 << 1);
    _stbi__jpeg_dequantize(HEAP32[$7 >> 2] | 0, (HEAP32[$1 >> 2] | 0) + 13444 + (HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + ((HEAP32[$4 >> 2] | 0) * 72 | 0) + 12 >> 2] << 7) | 0);
    $86 = (HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + ((HEAP32[$4 >> 2] | 0) * 72 | 0) + 44 >> 2] | 0) + ((Math_imul(HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + ((HEAP32[$4 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0) << 3) | 0;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[$1 >> 2] | 0) + 18444 >> 2] & 3]($86 + (HEAP32[$2 >> 2] << 3) | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + ((HEAP32[$4 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[$7 >> 2] | 0);
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
   }
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbtt__sort_edges_ins_sort($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $15 = 0, $2 = 0, $3 = 0, $35 = 0, $39 = 0, $4 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = 1;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[$3 >> 2] | 0)) break;
  $15 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 20 | 0) | 0;
  HEAP32[$6 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAP32[$15 + 16 >> 2];
  HEAP32[$7 >> 2] = $6;
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  while (1) {
   if ((HEAP32[$5 >> 2] | 0) <= 0) break;
   HEAP32[$8 >> 2] = (HEAP32[$2 >> 2] | 0) + (((HEAP32[$5 >> 2] | 0) - 1 | 0) * 20 | 0);
   HEAP32[$9 >> 2] = +HEAPF32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] & 1;
   if (!(HEAP32[$9 >> 2] | 0)) break;
   $35 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$5 >> 2] | 0) * 20 | 0) | 0;
   $39 = (HEAP32[$2 >> 2] | 0) + (((HEAP32[$5 >> 2] | 0) - 1 | 0) * 20 | 0) | 0;
   HEAP32[$35 >> 2] = HEAP32[$39 >> 2];
   HEAP32[$35 + 4 >> 2] = HEAP32[$39 + 4 >> 2];
   HEAP32[$35 + 8 >> 2] = HEAP32[$39 + 8 >> 2];
   HEAP32[$35 + 12 >> 2] = HEAP32[$39 + 12 >> 2];
   HEAP32[$35 + 16 >> 2] = HEAP32[$39 + 16 >> 2];
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  }
  if ((HEAP32[$4 >> 2] | 0) != (HEAP32[$5 >> 2] | 0)) {
   $47 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$5 >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$47 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$47 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
   HEAP32[$47 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   HEAP32[$47 + 12 >> 2] = HEAP32[$6 + 12 >> 2];
   HEAP32[$47 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbi__parse_zlib($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (HEAP32[$4 >> 2] | 0) if (_stbi__parse_zlib_header(HEAP32[$3 >> 2] | 0) | 0) label = 4; else HEAP32[$2 >> 2] = 0; else label = 4;
 do if ((label | 0) == 4) {
  HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = 0;
  while (1) {
   HEAP32[$5 >> 2] = _stbi__zreceive(HEAP32[$3 >> 2] | 0, 1) | 0;
   HEAP32[$6 >> 2] = _stbi__zreceive(HEAP32[$3 >> 2] | 0, 2) | 0;
   if (!(HEAP32[$6 >> 2] | 0)) {
    if (!(_stbi__parse_uncompressed_block(HEAP32[$3 >> 2] | 0) | 0)) {
     label = 7;
     break;
    }
   } else {
    if ((HEAP32[$6 >> 2] | 0) == 3) {
     label = 9;
     break;
    }
    $29 = HEAP32[$3 >> 2] | 0;
    if ((HEAP32[$6 >> 2] | 0) == 1) {
     if (!(_stbi__zbuild_huffman($29 + 32 | 0, 8816, 288) | 0)) {
      label = 12;
      break;
     }
     if (!(_stbi__zbuild_huffman((HEAP32[$3 >> 2] | 0) + 2052 | 0, 9104, 32) | 0)) {
      label = 14;
      break;
     }
    } else if (!(_stbi__compute_huffman_codes($29) | 0)) {
     label = 16;
     break;
    }
    if (!(_stbi__parse_huffman_block(HEAP32[$3 >> 2] | 0) | 0)) {
     label = 18;
     break;
    }
   }
   if (!((HEAP32[$5 >> 2] | 0) != 0 ^ 1)) {
    label = 20;
    break;
   }
  }
  if ((label | 0) == 7) {
   HEAP32[$2 >> 2] = 0;
   break;
  } else if ((label | 0) == 9) {
   HEAP32[$2 >> 2] = 0;
   break;
  } else if ((label | 0) == 12) {
   HEAP32[$2 >> 2] = 0;
   break;
  } else if ((label | 0) == 14) {
   HEAP32[$2 >> 2] = 0;
   break;
  } else if ((label | 0) == 16) {
   HEAP32[$2 >> 2] = 0;
   break;
  } else if ((label | 0) == 18) {
   HEAP32[$2 >> 2] = 0;
   break;
  } else if ((label | 0) == 20) {
   HEAP32[$2 >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _stbtt__close_shape($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $38 = 0, $39 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 28 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 20 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 12 | 0;
 $17 = sp + 8 | 0;
 $18 = sp + 4 | 0;
 $19 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAP32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = $9;
 $23 = (HEAP32[$12 >> 2] | 0) != 0;
 if (HEAP32[$13 >> 2] | 0) {
  if ($23) {
   $24 = HEAP32[$10 >> 2] | 0;
   $25 = HEAP32[$11 >> 2] | 0;
   HEAP32[$11 >> 2] = $25 + 1;
   _stbtt_setvertex($24 + ($25 * 14 | 0) | 0, 3, (HEAP32[$18 >> 2] | 0) + (HEAP32[$16 >> 2] | 0) >> 1, (HEAP32[$19 >> 2] | 0) + (HEAP32[$17 >> 2] | 0) >> 1, HEAP32[$18 >> 2] | 0, HEAP32[$19 >> 2] | 0);
  }
  $38 = HEAP32[$10 >> 2] | 0;
  $39 = HEAP32[$11 >> 2] | 0;
  HEAP32[$11 >> 2] = $39 + 1;
  _stbtt_setvertex($38 + ($39 * 14 | 0) | 0, 3, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0);
  $54 = HEAP32[$11 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 $46 = HEAP32[$10 >> 2] | 0;
 $47 = HEAP32[$11 >> 2] | 0;
 HEAP32[$11 >> 2] = $47 + 1;
 $49 = $46 + ($47 * 14 | 0) | 0;
 $50 = HEAP32[$14 >> 2] | 0;
 $51 = HEAP32[$15 >> 2] | 0;
 if ($23) {
  _stbtt_setvertex($49, 3, $50, $51, HEAP32[$18 >> 2] | 0, HEAP32[$19 >> 2] | 0);
  $54 = HEAP32[$11 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 } else {
  _stbtt_setvertex($49, 2, $50, $51, 0, 0);
  $54 = HEAP32[$11 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 return 0;
}

function _stbtt__csctx_v($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$8 >> 2] = $0;
 HEAP8[$9 >> 0] = $1;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAP32[$13 >> 2] = $5;
 HEAP32[$14 >> 2] = $6;
 HEAP32[$15 >> 2] = $7;
 $19 = HEAP32[$8 >> 2] | 0;
 if (!(HEAP32[HEAP32[$8 >> 2] >> 2] | 0)) {
  _stbtt_setvertex((HEAP32[$19 + 40 >> 2] | 0) + ((HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0) * 14 | 0) | 0, HEAP8[$9 >> 0] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0);
  HEAP16[(HEAP32[(HEAP32[$8 >> 2] | 0) + 40 >> 2] | 0) + ((HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0) * 14 | 0) + 8 >> 1] = HEAP32[$14 >> 2];
  HEAP16[(HEAP32[(HEAP32[$8 >> 2] | 0) + 40 >> 2] | 0) + ((HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0) * 14 | 0) + 10 >> 1] = HEAP32[$15 >> 2];
  $62 = HEAP32[$8 >> 2] | 0;
  $63 = $62 + 44 | 0;
  $64 = HEAP32[$63 >> 2] | 0;
  $65 = $64 + 1 | 0;
  HEAP32[$63 >> 2] = $65;
  STACKTOP = sp;
  return;
 }
 _stbtt__track_vertex($19, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0);
 if ((HEAPU8[$9 >> 0] | 0 | 0) != 4) {
  $62 = HEAP32[$8 >> 2] | 0;
  $63 = $62 + 44 | 0;
  $64 = HEAP32[$63 >> 2] | 0;
  $65 = $64 + 1 | 0;
  HEAP32[$63 >> 2] = $65;
  STACKTOP = sp;
  return;
 }
 _stbtt__track_vertex(HEAP32[$8 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0);
 _stbtt__track_vertex(HEAP32[$8 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0);
 $62 = HEAP32[$8 >> 2] | 0;
 $63 = $62 + 44 | 0;
 $64 = HEAP32[$63 >> 2] | 0;
 $65 = $64 + 1 | 0;
 HEAP32[$63 >> 2] = $65;
 STACKTOP = sp;
 return;
}

function _fons__atlasRectFits($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = HEAP16[(HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) * 6 | 0) >> 1];
 HEAP32[$10 >> 2] = HEAP16[(HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) * 6 | 0) + 2 >> 1];
 if (((HEAP32[$9 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) | 0) > (HEAP32[HEAP32[$5 >> 2] >> 2] | 0)) {
  HEAP32[$4 >> 2] = -1;
  $71 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
 while (1) {
  if ((HEAP32[$11 >> 2] | 0) <= 0) {
   label = 10;
   break;
  }
  if ((HEAP32[$6 >> 2] | 0) == (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0)) {
   label = 6;
   break;
  }
  HEAP32[$10 >> 2] = _fons__maxi(HEAP32[$10 >> 2] | 0, HEAP16[(HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) * 6 | 0) + 2 >> 1] | 0) | 0;
  if (((HEAP32[$10 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0) > (HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0)) {
   label = 8;
   break;
  }
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAP16[(HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) * 6 | 0) + 4 >> 1] | 0);
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 if ((label | 0) == 6) {
  HEAP32[$4 >> 2] = -1;
  $71 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 } else if ((label | 0) == 8) {
  HEAP32[$4 >> 2] = -1;
  $71 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 } else if ((label | 0) == 10) {
  HEAP32[$4 >> 2] = HEAP32[$10 >> 2];
  $71 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 return 0;
}

function _sfetch_send($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $56 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(21880, 21538, 2413, 21914);
 if (!(HEAP8[HEAP32[$3 >> 2] >> 0] & 1)) ___assert_fail(21880, 21538, 2413, 21914);
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(21926, 21538, 2414, 21914);
 if (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) ___assert_fail(21926, 21538, 2414, 21914);
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0) ___assert_fail(21926, 21538, 2414, 21914);
 HEAP32[$4 >> 2] = __sfetch_make_handle(0) | 0;
 if (!(HEAP8[(HEAP32[$3 >> 2] | 0) + 1 >> 0] & 1)) {
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $56 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $56 | 0;
 }
 if (!(__sfetch_validate_request(HEAP32[$3 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0)) {
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $56 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $56 | 0;
 }
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) ___assert_fail(21998, 21538, 2423, 21914);
 HEAP32[$5 >> 2] = __sfetch_pool_item_alloc((HEAP32[$3 >> 2] | 0) + 24 | 0, HEAP32[$2 >> 2] | 0) | 0;
 if (!(HEAP32[$5 >> 2] | 0)) {
  _puts(22040) | 0;
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $56 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $56 | 0;
 }
 if (__sfetch_channel_send((HEAP32[$3 >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) * 76 | 0) | 0, HEAP32[$5 >> 2] | 0) | 0) {
  HEAP32[$1 >> 2] = __sfetch_make_handle(HEAP32[$5 >> 2] | 0) | 0;
  $56 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $56 | 0;
 } else {
  __sfetch_pool_item_free((HEAP32[$3 >> 2] | 0) + 24 | 0, HEAP32[$5 >> 2] | 0);
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $56 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $56 | 0;
 }
 return 0;
}

function _fons__blurRows($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $32 = 0, $5 = 0, $6 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if ((HEAP32[$10 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
  while (1) {
   if ((HEAP32[$11 >> 2] | 0) >= (Math_imul(HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0)) break;
   $32 = (Math_imul(HEAP32[$9 >> 2] | 0, ((HEAPU8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$11 >> 2] | 0) >> 0] | 0) << 7) - (HEAP32[$12 >> 2] | 0) | 0) | 0) >> 16;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + $32;
   HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$11 >> 2] | 0) >> 0] = HEAP32[$12 >> 2] >> 7;
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + (HEAP32[$8 >> 2] | 0);
  }
  HEAP8[(HEAP32[$5 >> 2] | 0) + (Math_imul((HEAP32[$7 >> 2] | 0) - 1 | 0, HEAP32[$8 >> 2] | 0) | 0) >> 0] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$11 >> 2] = Math_imul((HEAP32[$7 >> 2] | 0) - 2 | 0, HEAP32[$8 >> 2] | 0) | 0;
  while (1) {
   if ((HEAP32[$11 >> 2] | 0) < 0) break;
   $66 = (Math_imul(HEAP32[$9 >> 2] | 0, ((HEAPU8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$11 >> 2] | 0) >> 0] | 0) << 7) - (HEAP32[$12 >> 2] | 0) | 0) | 0) >> 16;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + $66;
   HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$11 >> 2] | 0) >> 0] = HEAP32[$12 >> 2] >> 7;
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAP32[$8 >> 2] | 0);
  }
  HEAP8[HEAP32[$5 >> 2] >> 0] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN6DrMesh23initializeExtrudedImageEP7DrImage($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$044 = 0, $$sroa$039$043 = 0, $10 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0.0, $26 = 0, $3 = 0, $31 = 0, $34 = 0, $38 = 0, $40 = 0, $44 = 0, $8 = 0, $9 = 0;
 $2 = $1 + 36 | 0;
 $3 = $1 + 40 | 0;
 if (((HEAP32[$3 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) > 0) {
  $8 = $1 + 48 | 0;
  $9 = $1 + 61 | 0;
  $10 = $0 + 24 | 0;
  $$044 = 0;
  do {
   if ((HEAP32[(__ZNK7DrImage9getBitmapEv($1) | 0) + 4 >> 2] | 0) >= 1) if ((HEAP32[(__ZNK7DrImage9getBitmapEv($1) | 0) + 8 >> 2] | 0) >= 1) {
    $20 = (HEAP32[$2 >> 2] | 0) + ($$044 * 12 | 0) | 0;
    $21 = HEAP32[$8 >> 2] | 0;
    $22 = $21 + ($$044 * 12 | 0) | 0;
    $25 = (HEAP8[$9 >> 0] | 0) == 0 ? 0.0 : .875;
    $26 = __ZNK7DrImage9getBitmapEv($1) | 0;
    __ZN6DrMesh15triangulateFaceERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEERKNS1_IS5_NS3_IS5_EEEERK8DrBitmapb14Trianglulationd($0, $20, $22, $26, (HEAP8[$10 >> 0] | 0) != 0, 1, $25);
    $31 = (HEAP8[$10 >> 0] | 0) == 0 ? 1 : 3;
    $34 = HEAP32[(__ZNK7DrImage9getBitmapEv($1) | 0) + 4 >> 2] | 0;
    __ZN6DrMesh18extrudeFacePolygonERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEiiib($0, $20, $34, HEAP32[(__ZNK7DrImage9getBitmapEv($1) | 0) + 8 >> 2] | 0, $31, 0);
    $38 = HEAP32[$22 >> 2] | 0;
    $40 = HEAP32[$21 + ($$044 * 12 | 0) + 4 >> 2] | 0;
    if (($38 | 0) != ($40 | 0)) {
     $$sroa$039$043 = $38;
     do {
      $44 = HEAP32[(__ZNK7DrImage9getBitmapEv($1) | 0) + 4 >> 2] | 0;
      __ZN6DrMesh18extrudeFacePolygonERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEiiib($0, $$sroa$039$043, $44, HEAP32[(__ZNK7DrImage9getBitmapEv($1) | 0) + 8 >> 2] | 0, $31, 0);
      $$sroa$039$043 = $$sroa$039$043 + 12 | 0;
     } while (($$sroa$039$043 | 0) != ($40 | 0));
    }
   }
   $$044 = $$044 + 1 | 0;
  } while (($$044 | 0) < (((HEAP32[$3 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0) / 12 | 0 | 0));
 }
 __ZN6DrMesh12optimizeMeshEv($0);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $33 = 0, $43 = 0, $45 = 0, label = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $45 = HEAP32[$0 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$45 >> 2] | 0) + 24 >> 2] & 7]($45, $1, $2, $3, $4);
   break;
  }
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    $19 = $1 + 44 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 4) break;
    $22 = $1 + 52 | 0;
    HEAP8[$22 >> 0] = 0;
    $23 = $1 + 53 | 0;
    HEAP8[$23 >> 0] = 0;
    $25 = HEAP32[$0 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] & 7]($25, $1, $2, $2, 1, $4);
    if (!(HEAP8[$23 >> 0] | 0)) {
     $$037$off038 = 0;
     label = 11;
    } else if (!(HEAP8[$22 >> 0] | 0)) {
     $$037$off038 = 1;
     label = 11;
    } else label = 15;
    do if ((label | 0) == 11) {
     HEAP32[$13 >> 2] = $2;
     $33 = $1 + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
      HEAP8[$1 + 54 >> 0] = 1;
      if ($$037$off038) {
       label = 15;
       break;
      } else {
       $43 = 4;
       break;
      }
     }
     if ($$037$off038) label = 15; else $43 = 4;
    } while (0);
    if ((label | 0) == 15) $43 = 3;
    HEAP32[$19 >> 2] = $43;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $3 = 0, $33 = 0, $34 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 112) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
  $13 = $0 + 2 | 0;
  $14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
  if (($14 | 0) == ($13 | 0)) $$3 = $0; else {
   $16 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0;
   if (($16 | 0) == ($14 | 0)) $$3 = $0; else {
    $18 = $2 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    if ((($19 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $19 + -24 | 0);
     $26 = HEAP32[$18 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$18 >> 2] = $26 + -24;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($26 + -48 | 0, 48147) | 0;
     $33 = HEAP8[$3 + 11 >> 0] | 0;
     $34 = $33 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm((HEAP32[$18 >> 2] | 0) + -24 | 0, $34 ? HEAP32[$3 >> 2] | 0 : $3, $34 ? HEAP32[$3 + 4 >> 2] | 0 : $33 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $16;
    }
   }
  }
 } else $$3 = $0; else $$3 = $0; else $$3 = $0;
 STACKTOP = sp;
 return $$3 | 0;
}

function __sfetch_item_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $52 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $6 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(39014, 21538, 1327, 39045);
 if (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) ___assert_fail(39014, 21538, 1327, 39045);
 if (!(HEAP32[$5 >> 2] | 0)) ___assert_fail(39063, 21538, 1328, 39045);
 if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(39063, 21538, 1328, 39045);
 _memset(HEAP32[$3 >> 2] | 0, 0, 1232) | 0;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$4 >> 2];
 HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2];
 HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = -1;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2];
 HEAP32[(HEAP32[$3 >> 2] | 0) + 24 + 4 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2];
 $52 = (HEAP32[$3 >> 2] | 0) + 208 | 0;
 __sfetch_path_make($6, HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0);
 _memcpy($52 | 0, $6 | 0, 1024) | 0;
 if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] | 0) >>> 0 <= 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] | 0) >>> 0 > 128) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 56 + 20 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2];
 _memcpy((HEAP32[$3 >> 2] | 0) + 56 + 24 | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function _stbi__hdr_convert($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(HEAPU8[(HEAP32[$4 >> 2] | 0) + 3 >> 0] | 0)) {
  switch (HEAP32[$5 >> 2] | 0) {
  case 4:
   {
    HEAPF32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = 1.0;
    label = 11;
    break;
   }
  case 3:
   {
    label = 11;
    break;
   }
  case 2:
   {
    HEAPF32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 1.0;
    label = 13;
    break;
   }
  case 1:
   {
    label = 13;
    break;
   }
  default:
   {
    STACKTOP = sp;
    return;
   }
  }
  if ((label | 0) == 11) {
   HEAPF32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = 0.0;
   HEAPF32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 0.0;
   HEAPF32[HEAP32[$3 >> 2] >> 2] = 0.0;
   STACKTOP = sp;
   return;
  } else if ((label | 0) == 13) {
   HEAPF32[HEAP32[$3 >> 2] >> 2] = 0.0;
   STACKTOP = sp;
   return;
  }
 }
 HEAPF32[$6 >> 2] = +_ldexp(1.0, (HEAPU8[(HEAP32[$4 >> 2] | 0) + 3 >> 0] | 0) - 136 | 0);
 $23 = HEAPU8[HEAP32[$4 >> 2] >> 0] | 0;
 if ((HEAP32[$5 >> 2] | 0) <= 2) HEAPF32[HEAP32[$3 >> 2] >> 2] = +($23 + (HEAPU8[(HEAP32[$4 >> 2] | 0) + 1 >> 0] | 0) + (HEAPU8[(HEAP32[$4 >> 2] | 0) + 2 >> 0] | 0) | 0) * +HEAPF32[$6 >> 2] / 3.0; else {
  HEAPF32[HEAP32[$3 >> 2] >> 2] = +($23 | 0) * +HEAPF32[$6 >> 2];
  HEAPF32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = +(HEAPU8[(HEAP32[$4 >> 2] | 0) + 1 >> 0] | 0 | 0) * +HEAPF32[$6 >> 2];
  HEAPF32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = +(HEAPU8[(HEAP32[$4 >> 2] | 0) + 2 >> 0] | 0 | 0) * +HEAPF32[$6 >> 2];
 }
 if ((HEAP32[$5 >> 2] | 0) == 2) HEAPF32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 1.0;
 if ((HEAP32[$5 >> 2] | 0) != 4) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = 1.0;
 STACKTOP = sp;
 return;
}

function _stbi__pnm_info($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $44 = 0, $48 = 0, $5 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 $11 = sp + 30 | 0;
 $12 = sp + 29 | 0;
 $13 = sp + 28 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if (!(HEAP32[$6 >> 2] | 0)) HEAP32[$6 >> 2] = $10;
 if (!(HEAP32[$7 >> 2] | 0)) HEAP32[$7 >> 2] = $10;
 if (!(HEAP32[$8 >> 2] | 0)) HEAP32[$8 >> 2] = $10;
 _stbi__rewind(HEAP32[$5 >> 2] | 0);
 HEAP8[$12 >> 0] = _stbi__get8(HEAP32[$5 >> 2] | 0) | 0;
 HEAP8[$13 >> 0] = _stbi__get8(HEAP32[$5 >> 2] | 0) | 0;
 do if ((HEAP8[$12 >> 0] | 0) == 80) {
  if ((HEAP8[$13 >> 0] | 0) != 53) if ((HEAP8[$13 >> 0] | 0) != 54) break;
  HEAP32[HEAP32[$8 >> 2] >> 2] = (HEAP8[$13 >> 0] | 0) == 54 ? 3 : 1;
  HEAP8[$11 >> 0] = _stbi__get8(HEAP32[$5 >> 2] | 0) | 0;
  _stbi__pnm_skip_whitespace(HEAP32[$5 >> 2] | 0, $11);
  $44 = _stbi__pnm_getinteger(HEAP32[$5 >> 2] | 0, $11) | 0;
  HEAP32[HEAP32[$6 >> 2] >> 2] = $44;
  _stbi__pnm_skip_whitespace(HEAP32[$5 >> 2] | 0, $11);
  $48 = _stbi__pnm_getinteger(HEAP32[$5 >> 2] | 0, $11) | 0;
  HEAP32[HEAP32[$7 >> 2] >> 2] = $48;
  _stbi__pnm_skip_whitespace(HEAP32[$5 >> 2] | 0, $11);
  HEAP32[$9 >> 2] = _stbi__pnm_getinteger(HEAP32[$5 >> 2] | 0, $11) | 0;
  if ((HEAP32[$9 >> 2] | 0) > 255) {
   HEAP32[$4 >> 2] = _stbi__err(43801) | 0;
   $56 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $56 | 0;
  } else {
   HEAP32[$4 >> 2] = 1;
   $56 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $56 | 0;
  }
 } while (0);
 _stbi__rewind(HEAP32[$5 >> 2] | 0);
 HEAP32[$4 >> 2] = 0;
 $56 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $56 | 0;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILm4096EEEEEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp;
 $4 = $0 + 4 | 0;
 $9 = ((HEAP32[$4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $10 = __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE8max_sizeEv($0) | 0;
 if ($10 >>> 0 < $9 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $15 = HEAP32[$0 >> 2] | 0;
  $16 = (HEAP32[$0 + 8 >> 2] | 0) - $15 | 0;
  $20 = $16 >> 3;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEEC2EmmSB_($3, $16 >> 4 >>> 0 < $10 >>> 1 >>> 0 ? ($20 >>> 0 < $9 >>> 0 ? $9 : $20) : $10, (HEAP32[$4 >> 2] | 0) - $15 >> 4, $0 + 12 | 0);
  $25 = $3 + 8 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($2, $1);
  HEAP32[$26 >> 2] = 0;
  HEAP32[$26 + 4 >> 2] = 0;
  HEAP32[$26 + 8 >> 2] = 0;
  HEAP32[$26 + 12 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$25 >> 2] = $26 + 16;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0, $3);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
}

function _stbtt__new_active($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $44 = 0.0, $5 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $82 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAPF32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = _stbtt__hheap_alloc(HEAP32[$6 >> 2] | 0, 28, HEAP32[$10 >> 2] | 0) | 0;
 HEAPF32[$12 >> 2] = (+HEAPF32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] - +HEAPF32[HEAP32[$7 >> 2] >> 2]) / (+HEAPF32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] - +HEAPF32[(HEAP32[$7 >> 2] | 0) + 4 >> 2]);
 if (!(HEAP32[$11 >> 2] | 0)) ___assert_fail(40724, 40159, 2451, 40740);
 if (!(HEAP32[$11 >> 2] | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
  $82 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $82 | 0;
 }
 HEAPF32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] = +HEAPF32[$12 >> 2];
 if (+HEAPF32[$12 >> 2] != 0.0) $44 = 1.0 / +HEAPF32[$12 >> 2]; else $44 = 0.0;
 HEAPF32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] = $44;
 HEAPF32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] = +HEAPF32[HEAP32[$7 >> 2] >> 2] + +HEAPF32[$12 >> 2] * (+HEAPF32[$9 >> 2] - +HEAPF32[(HEAP32[$7 >> 2] | 0) + 4 >> 2]);
 $60 = (HEAP32[$11 >> 2] | 0) + 4 | 0;
 HEAPF32[$60 >> 2] = +HEAPF32[$60 >> 2] - +(HEAP32[$8 >> 2] | 0);
 HEAPF32[(HEAP32[$11 >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0 ? 1.0 : -1.0;
 HEAPF32[(HEAP32[$11 >> 2] | 0) + 20 >> 2] = +HEAPF32[(HEAP32[$7 >> 2] | 0) + 4 >> 2];
 HEAPF32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] = +HEAPF32[(HEAP32[$7 >> 2] | 0) + 12 >> 2];
 HEAP32[HEAP32[$11 >> 2] >> 2] = 0;
 HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
 $82 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $82 | 0;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE21__push_back_slow_pathIS6_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $9 = __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 3;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEEC2EmmS9_($2, $15 >> 4 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 4, $0 + 12 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAP32[$25 >> 2] = 0;
  $27 = $25 + 4 | 0;
  HEAP32[$27 >> 2] = 0;
  $28 = $25 + 8 | 0;
  HEAP32[$28 >> 2] = 0;
  HEAP32[$25 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$25 >> 2] = HEAP32[$1 >> 2];
  $32 = $1 + 4 | 0;
  HEAP32[$27 >> 2] = HEAP32[$32 >> 2];
  $34 = $1 + 8 | 0;
  HEAP32[$28 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$34 >> 2] = 0;
  HEAP32[$32 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$24 >> 2] = $25 + 16;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $2);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function _fons__addWhiteRect($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $49 = 0, $5 = 0, $57 = 0, $6 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(_fons__atlasAddRect(HEAP32[(HEAP32[$3 >> 2] | 0) + 68 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, $8, $9) | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$10 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] | 0) + ((HEAP32[$8 >> 2] | 0) + (Math_imul(HEAP32[$9 >> 2] | 0, HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0));
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= (HEAP32[$5 >> 2] | 0)) break;
  HEAP32[$6 >> 2] = 0;
  while (1) {
   if ((HEAP32[$6 >> 2] | 0) >= (HEAP32[$4 >> 2] | 0)) break;
   HEAP8[(HEAP32[$10 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) >> 0] = -1;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
  }
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[HEAP32[$3 >> 2] >> 2] | 0);
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 $49 = _fons__mini(HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] = $49;
 $57 = _fons__mini(HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 4 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 4 >> 2] = $57;
 $68 = _fons__maxi(HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 8 >> 2] | 0, (HEAP32[$8 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) | 0) | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 8 >> 2] = $68;
 $79 = _fons__maxi(HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 12 >> 2] | 0, (HEAP32[$9 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0) | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 12 >> 2] = $79;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp;
 $4 = $0 + 4 | 0;
 $9 = ((HEAP32[$4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $10 = __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE8max_sizeEv($0) | 0;
 if ($10 >>> 0 < $9 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $15 = HEAP32[$0 >> 2] | 0;
  $16 = (HEAP32[$0 + 8 >> 2] | 0) - $15 | 0;
  $20 = $16 >> 3;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEEC2EmmSB_($3, $16 >> 4 >>> 0 < $10 >>> 1 >>> 0 ? ($20 >>> 0 < $9 >>> 0 ? $9 : $20) : $10, (HEAP32[$4 >> 2] | 0) - $15 >> 4, $0 + 12 | 0);
  $25 = $3 + 8 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2IS4_EERKNS1_IT_Lm4096EEE($2, $1);
  HEAP32[$26 >> 2] = 0;
  HEAP32[$26 + 4 >> 2] = 0;
  HEAP32[$26 + 8 >> 2] = 0;
  HEAP32[$26 + 12 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$25 >> 2] = $26 + 16;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0, $3);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEED2Ev($3);
  STACKTOP = sp;
  return;
 }
}

function _stbtt_GetGlyphBox($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $19 = 0, $20 = 0, $37 = 0, $48 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $72 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[$12 >> 2] = $5;
 $19 = HEAP32[$7 >> 2] | 0;
 $20 = HEAP32[$8 >> 2] | 0;
 if (HEAP32[(HEAP32[$7 >> 2] | 0) + 48 + 8 >> 2] | 0) _stbtt__GetGlyphInfoT2($19, $20, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0) | 0; else {
  HEAP32[$13 >> 2] = _stbtt__GetGlyfOffset($19, $20) | 0;
  if ((HEAP32[$13 >> 2] | 0) < 0) {
   HEAP32[$6 >> 2] = 0;
   $72 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $72 | 0;
  }
  if (HEAP32[$9 >> 2] | 0) {
   $37 = (_ttSHORT((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) + 2 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$9 >> 2] >> 2] = $37;
  }
  if (HEAP32[$10 >> 2] | 0) {
   $48 = (_ttSHORT((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) + 4 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$10 >> 2] >> 2] = $48;
  }
  if (HEAP32[$11 >> 2] | 0) {
   $59 = (_ttSHORT((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) + 6 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$11 >> 2] >> 2] = $59;
  }
  if (HEAP32[$12 >> 2] | 0) {
   $70 = (_ttSHORT((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$13 >> 2] | 0) + 8 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$12 >> 2] >> 2] = $70;
  }
 }
 HEAP32[$6 >> 2] = 1;
 $72 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $72 | 0;
}

function __ZN7meshoptL23calculateSortOrderRadixEPjPKfPtm($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05977 = 0.0, $$06067 = 0, $$06166 = 0, $$06268 = 0, $$06376 = 0, $$06472 = 0, $$065 = 0, $25 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $5 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8192 | 0;
 $4 = sp;
 $5 = ($3 | 0) == 0;
 if ($5) label = 6; else {
  $$05977 = 1.0000000474974513e-03;
  $$06376 = 0;
  do {
   $8 = +Math_abs(+(+HEAPF32[$1 + ($$06376 << 2) >> 2]));
   $$05977 = $$05977 < $8 ? $8 : $$05977;
   $$06376 = $$06376 + 1 | 0;
  } while (($$06376 | 0) != ($3 | 0));
  if ($5) label = 6; else {
   $$06472 = 0;
   do {
    HEAP16[$2 + ($$06472 << 1) >> 1] = (__Z21meshopt_quantizeUnormfi(.5 - +HEAPF32[$1 + ($$06472 << 2) >> 2] / $$05977 * .5, 11) | 0) & 2047;
    $$06472 = $$06472 + 1 | 0;
   } while (($$06472 | 0) != ($3 | 0));
   _memset($4 | 0, 0, 8192) | 0;
   if ($5) $42 = $4; else {
    $$06268 = 0;
    do {
     $25 = $4 + ((HEAPU16[$2 + ($$06268 << 1) >> 1] | 0) << 2) | 0;
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
     $$06268 = $$06268 + 1 | 0;
    } while (($$06268 | 0) != ($3 | 0));
    $42 = $4;
   }
  }
 }
 if ((label | 0) == 6) {
  _memset($4 | 0, 0, 8192) | 0;
  $42 = $4;
 }
 $$06067 = 0;
 $$06166 = 0;
 do {
  $31 = $4 + ($$06067 << 2) | 0;
  $32 = HEAP32[$31 >> 2] | 0;
  HEAP32[$31 >> 2] = $$06166;
  $$06166 = $32 + $$06166 | 0;
  $$06067 = $$06067 + 1 | 0;
 } while (($$06067 | 0) != 2048);
 if (($$06166 | 0) != ($3 | 0)) ___assert_fail(42319, 42048, 126, 42350);
 if (!$5) {
  $$065 = 0;
  do {
   $37 = $4 + ((HEAPU16[$2 + ($$065 << 1) >> 1] | 0) << 2) | 0;
   $38 = HEAP32[$37 >> 2] | 0;
   HEAP32[$37 >> 2] = $38 + 1;
   HEAP32[$0 + ($38 << 2) >> 2] = $$065;
   $$065 = $$065 + 1 | 0;
  } while (($$065 | 0) != ($3 | 0));
 }
 STACKTOP = sp;
 return;
}

function __sg_pipeline_common_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $36 = 0, $4 = 0, $5 = 0, $75 = 0, $77 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 360 >> 2] | 0) >= 4) ___assert_fail(34650, 17628, 2835, 34695);
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 512 >> 2];
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= 8) break;
  HEAP8[(HEAP32[$2 >> 2] | 0) + 8 + (HEAP32[$4 >> 2] | 0) >> 0] = 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 360 >> 2];
 HEAP32[$5 >> 2] = 0;
 while (1) {
  $36 = HEAP32[$3 >> 2] | 0;
  if ((HEAP32[$5 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0)) break;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 20 + (HEAP32[$5 >> 2] << 2) >> 2] = HEAP32[$36 + 364 + ((HEAP32[$5 >> 2] | 0) * 36 | 0) >> 2];
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] = HEAP32[$36 + 296 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 524 >> 2];
 HEAPF32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] = +HEAPF32[(HEAP32[$3 >> 2] | 0) + 296 + 12 >> 2];
 HEAPF32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] = +HEAPF32[(HEAP32[$3 >> 2] | 0) + 296 + 16 >> 2];
 HEAPF32[(HEAP32[$2 >> 2] | 0) + 52 >> 2] = +HEAPF32[(HEAP32[$3 >> 2] | 0) + 296 + 20 >> 2];
 $75 = (HEAP32[$2 >> 2] | 0) + 56 | 0;
 $77 = (HEAP32[$3 >> 2] | 0) + 528 | 0;
 HEAP32[$75 >> 2] = HEAP32[$77 >> 2];
 HEAP32[$75 + 4 >> 2] = HEAP32[$77 + 4 >> 2];
 HEAP32[$75 + 8 >> 2] = HEAP32[$77 + 8 >> 2];
 HEAP32[$75 + 12 >> 2] = HEAP32[$77 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _stbi__jpeg_decode_block_prog_dc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $66 = 0, $7 = 0, $71 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if (HEAP32[(HEAP32[$5 >> 2] | 0) + 18388 >> 2] | 0) {
  HEAP32[$4 >> 2] = _stbi__err(45247) | 0;
  $71 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$5 >> 2] | 0);
 if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 18392 >> 2] | 0)) {
  dest = HEAP32[$6 >> 2] | 0;
  stop = dest + 128 | 0;
  do {
   HEAP16[dest >> 1] = 0;
   dest = dest + 2 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$11 >> 2] = _stbi__jpeg_huff_decode(HEAP32[$5 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
  if (HEAP32[$11 >> 2] | 0) $35 = _stbi__extend_receive(HEAP32[$5 >> 2] | 0, HEAP32[$11 >> 2] | 0) | 0; else $35 = 0;
  HEAP32[$9 >> 2] = $35;
  HEAP32[$10 >> 2] = (HEAP32[(HEAP32[$5 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 24 >> 2] | 0) + (HEAP32[$9 >> 2] | 0);
  HEAP32[(HEAP32[$5 >> 2] | 0) + 18076 + ((HEAP32[$8 >> 2] | 0) * 72 | 0) + 24 >> 2] = HEAP32[$10 >> 2];
  HEAP16[HEAP32[$6 >> 2] >> 1] = HEAP32[$10 >> 2] << HEAP32[(HEAP32[$5 >> 2] | 0) + 18396 >> 2];
 } else if (_stbi__jpeg_get_bit(HEAP32[$5 >> 2] | 0) | 0) {
  $66 = HEAP32[$6 >> 2] | 0;
  HEAP16[$66 >> 1] = (HEAP16[$66 >> 1] | 0) + ((1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 18396 >> 2] & 65535) << 16 >> 16);
 }
 HEAP32[$4 >> 2] = 1;
 $71 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $71 | 0;
}

function __sfetch_pool_item_free($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $33 = 0, $4 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(37961, 21538, 1423, 39183);
 if (!(HEAP8[(HEAP32[$2 >> 2] | 0) + 20 >> 0] & 1)) ___assert_fail(37961, 21538, 1423, 39183);
 HEAP32[$4 >> 2] = __sfetch_slot_index(HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(26137, 21538, 1425, 39183);
 if ((HEAP32[$4 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0) ___assert_fail(26137, 21538, 1425, 39183);
 if ((HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 1232 | 0) >> 2] | 0) != (HEAP32[$3 >> 2] | 0)) ___assert_fail(39206, 21538, 1426, 39183);
 HEAP32[$5 >> 2] = 0;
 while (1) {
  $33 = HEAP32[$2 >> 2] | 0;
  if ((HEAP32[$5 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
  if ((HEAP32[(HEAP32[$33 + 12 >> 2] | 0) + (HEAP32[$5 >> 2] << 2) >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
   label = 12;
   break;
  }
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 }
 if ((label | 0) == 12) ___assert_fail(39251, 21538, 1430, 39183);
 __sfetch_item_discard((HEAP32[$33 + 8 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 1232 | 0) | 0);
 $47 = HEAP32[$4 >> 2] | 0;
 $50 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0;
 $52 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
 $53 = HEAP32[$52 >> 2] | 0;
 HEAP32[$52 >> 2] = $53 + 1;
 HEAP32[$50 + ($53 << 2) >> 2] = $47;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= ((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) - 1 | 0) >>> 0) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(39285, 21538, 1435, 39183);
}

function __ZL21extrude3D_shader_desc10sg_backend($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 switch ($0 | 0) {
 case 0:
  {
   if (!(HEAP8[2185858] | 0)) {
    HEAP8[2185858] = 1;
    HEAP32[544745] = 41544;
    HEAP32[544748] = 41548;
    HEAP32[544751] = 41553;
    HEAP32[544754] = 41563;
    HEAP32[544793] = 1824;
    HEAP32[544796] = 41568;
    HEAP32[544798] = 128;
    HEAP32[544799] = 41573;
    HEAP32[544800] = 4;
    HEAP32[544801] = 8;
    HEAP32[545030] = 2400;
    HEAP32[545033] = 41568;
    HEAP32[545035] = 16;
    HEAP32[545036] = 41583;
    HEAP32[545037] = 4;
    HEAP32[545038] = 1;
    HEAP32[545231] = 41593;
    HEAP32[545232] = 1;
    HEAP32[545233] = 1;
    HEAP32[545267] = 41597;
    $$0 = 2178976;
   } else $$0 = 2178976;
   break;
  }
 case 1:
  {
   if (!(HEAP8[2185859] | 0)) {
    HEAP8[2185859] = 1;
    HEAP32[545270] = 41544;
    HEAP32[545273] = 41548;
    HEAP32[545276] = 41553;
    HEAP32[545279] = 41563;
    HEAP32[545318] = 3696;
    HEAP32[545321] = 41568;
    HEAP32[545323] = 128;
    HEAP32[545324] = 41573;
    HEAP32[545325] = 4;
    HEAP32[545326] = 8;
    HEAP32[545555] = 4240;
    HEAP32[545558] = 41568;
    HEAP32[545560] = 16;
    HEAP32[545561] = 41583;
    HEAP32[545562] = 4;
    HEAP32[545563] = 1;
    HEAP32[545756] = 41593;
    HEAP32[545757] = 1;
    HEAP32[545758] = 1;
    HEAP32[545792] = 41597;
    $$0 = 2181076;
   } else $$0 = 2181076;
   break;
  }
 case 5:
  {
   if (!(HEAP8[2185860] | 0)) {
    HEAP8[2185860] = 1;
    HEAP32[545843] = 5696;
    HEAP32[545846] = 41614;
    HEAP32[545848] = 128;
    HEAP32[546080] = 6656;
    HEAP32[546083] = 41614;
    HEAP32[546085] = 16;
    HEAP32[546281] = 41593;
    HEAP32[546282] = 1;
    HEAP32[546283] = 1;
    HEAP32[546317] = 41597;
    $$0 = 2183176;
   } else $$0 = 2183176;
   break;
  }
 default:
  $$0 = 0;
 }
 return $$0 | 0;
}

function __sg_image_desc_defaults($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $39 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896 | 0;
 $2 = sp + 884 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 _memcpy($3 | 0, HEAP32[$2 >> 2] | 0, 884) | 0;
 HEAP32[$3 + 4 >> 2] = (HEAP32[$3 + 4 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 4 >> 2] | 0;
 HEAP32[$3 + 20 >> 2] = (HEAP32[$3 + 20 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 20 >> 2] | 0;
 HEAP32[$3 + 24 >> 2] = (HEAP32[$3 + 24 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 24 >> 2] | 0;
 HEAP32[$3 + 28 >> 2] = (HEAP32[$3 + 28 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 28 >> 2] | 0;
 $39 = (HEAP32[$3 + 32 >> 2] | 0) == 0;
 if (HEAP8[(HEAP32[$2 >> 2] | 0) + 8 >> 0] & 1) {
  HEAP32[$3 + 32 >> 2] = $39 ? HEAP32[539087] | 0 : HEAP32[$3 + 32 >> 2] | 0;
  HEAP32[$3 + 36 >> 2] = (HEAP32[$3 + 36 >> 2] | 0) == 0 ? HEAP32[539089] | 0 : HEAP32[$3 + 36 >> 2] | 0;
 } else {
  HEAP32[$3 + 32 >> 2] = $39 ? 23 : HEAP32[$3 + 32 >> 2] | 0;
  HEAP32[$3 + 36 >> 2] = (HEAP32[$3 + 36 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 36 >> 2] | 0;
 }
 HEAP32[$3 + 40 >> 2] = (HEAP32[$3 + 40 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 40 >> 2] | 0;
 HEAP32[$3 + 44 >> 2] = (HEAP32[$3 + 44 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 44 >> 2] | 0;
 HEAP32[$3 + 48 >> 2] = (HEAP32[$3 + 48 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 48 >> 2] | 0;
 HEAP32[$3 + 52 >> 2] = (HEAP32[$3 + 52 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 52 >> 2] | 0;
 HEAP32[$3 + 56 >> 2] = (HEAP32[$3 + 56 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 56 >> 2] | 0;
 HEAP32[$3 + 60 >> 2] = (HEAP32[$3 + 60 >> 2] | 0) == 0 ? 2 : HEAP32[$3 + 60 >> 2] | 0;
 HEAP32[$3 + 64 >> 2] = (HEAP32[$3 + 64 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 64 >> 2] | 0;
 HEAPF32[$3 + 72 >> 2] = +HEAPF32[$3 + 72 >> 2] == 0.0 ? 3402823466385288598117041.0e14 : +HEAPF32[$3 + 72 >> 2];
 _memcpy($0 | 0, $3 | 0, 884) | 0;
 STACKTOP = sp;
 return;
}

function __ZN13TPPLPartition10IntersectsER9TPPLPointS1_S1_S1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $$sroa$0$0$copyload = 0.0, $$sroa$0$0$copyload15 = 0.0, $$sroa$10$0$copyload = 0.0, $$sroa$10$0$copyload23 = 0.0, $14 = 0.0, $21 = 0.0, $30 = 0.0, $32 = 0.0, $36 = 0.0, $37 = 0.0, $40 = 0.0, $41 = 0.0, $44 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp;
 $6 = +HEAPF64[$1 >> 3];
 $7 = +HEAPF64[$3 >> 3];
 if ($6 == $7) if (+HEAPF64[$1 + 8 >> 3] == +HEAPF64[$3 + 8 >> 3]) $$1 = 0; else label = 3; else label = 3;
 do if ((label | 0) == 3) {
  $14 = +HEAPF64[$4 >> 3];
  if ($6 == $14) if (+HEAPF64[$1 + 8 >> 3] == +HEAPF64[$4 + 8 >> 3]) {
   $$1 = 0;
   break;
  }
  $21 = +HEAPF64[$2 >> 3];
  if ($21 == $7) if (+HEAPF64[$2 + 8 >> 3] == +HEAPF64[$3 + 8 >> 3]) {
   $$1 = 0;
   break;
  }
  $30 = +HEAPF64[$2 + 8 >> 3];
  $32 = +HEAPF64[$4 + 8 >> 3];
  if ($21 == $14 & $30 == $32) $$1 = 0; else {
   $36 = $30 - +HEAPF64[$1 + 8 >> 3];
   $37 = $6 - $21;
   $40 = $32 - +HEAPF64[$3 + 8 >> 3];
   $41 = $7 - $14;
   __ZNK9TPPLPointmiERKS_($5, $3, $1);
   $$sroa$0$0$copyload = +HEAPF64[$5 >> 3];
   $$sroa$10$0$copyload = +HEAPF64[$5 + 8 >> 3];
   __ZNK9TPPLPointmiERKS_($5, $4, $1);
   $$sroa$0$0$copyload15 = +HEAPF64[$5 >> 3];
   $$sroa$10$0$copyload23 = +HEAPF64[$5 + 8 >> 3];
   __ZNK9TPPLPointmiERKS_($5, $1, $3);
   $44 = $40 * +HEAPF64[$5 >> 3] + $41 * +HEAPF64[$5 + 8 >> 3];
   __ZNK9TPPLPointmiERKS_($5, $2, $3);
   if ($44 * ($40 * +HEAPF64[$5 >> 3] + $41 * +HEAPF64[$5 + 8 >> 3]) > 0.0) $$1 = 0; else $$1 = !(($36 * $$sroa$0$0$copyload + $37 * $$sroa$10$0$copyload) * ($36 * $$sroa$0$0$copyload15 + $37 * $$sroa$10$0$copyload23) > 0.0) & 1;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _stbi__getn($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $75 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) {
  HEAP32[$7 >> 2] = (HEAP32[(HEAP32[$4 >> 2] | 0) + 172 >> 2] | 0) - (HEAP32[(HEAP32[$4 >> 2] | 0) + 168 >> 2] | 0);
  if ((HEAP32[$7 >> 2] | 0) < (HEAP32[$6 >> 2] | 0)) {
   _memcpy(HEAP32[$5 >> 2] | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 168 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
   HEAP32[$9 >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] & 15](HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0, (HEAP32[$5 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) | 0, (HEAP32[$6 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0) | 0;
   HEAP32[$8 >> 2] = (HEAP32[$9 >> 2] | 0) == ((HEAP32[$6 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0) & 1;
   HEAP32[(HEAP32[$4 >> 2] | 0) + 168 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 172 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
   $75 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $75 | 0;
  }
 }
 if (((HEAP32[(HEAP32[$4 >> 2] | 0) + 168 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0) >>> 0 <= (HEAP32[(HEAP32[$4 >> 2] | 0) + 172 >> 2] | 0) >>> 0) {
  _memcpy(HEAP32[$5 >> 2] | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 168 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
  $72 = (HEAP32[$4 >> 2] | 0) + 168 | 0;
  HEAP32[$72 >> 2] = (HEAP32[$72 >> 2] | 0) + (HEAP32[$6 >> 2] | 0);
  HEAP32[$3 >> 2] = 1;
  $75 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 } else {
  HEAP32[$3 >> 2] = 0;
  $75 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 return 0;
}

function _fons__blurCols($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $29 = 0, $5 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 HEAP32[$11 >> 2] = 0;
 while (1) {
  if ((HEAP32[$11 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) break;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 1;
  while (1) {
   if ((HEAP32[$10 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
   $29 = (Math_imul(HEAP32[$9 >> 2] | 0, ((HEAPU8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0) << 7) - (HEAP32[$12 >> 2] | 0) | 0) | 0) >> 16;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + $29;
   HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = HEAP32[$12 >> 2] >> 7;
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
  }
  HEAP8[(HEAP32[$5 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - 1) >> 0] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = (HEAP32[$6 >> 2] | 0) - 2;
  while (1) {
   if ((HEAP32[$10 >> 2] | 0) < 0) break;
   $58 = (Math_imul(HEAP32[$9 >> 2] | 0, ((HEAPU8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0) << 7) - (HEAP32[$12 >> 2] | 0) | 0) | 0) >> 16;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + $58;
   HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = HEAP32[$12 >> 2] >> 7;
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
  }
  HEAP8[HEAP32[$5 >> 2] >> 0] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + (HEAP32[$8 >> 2] | 0);
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbi__resample_row_hv_2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $23 = 0, $26 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $86 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[sp + 12 >> 2] = $4;
 $23 = ((HEAPU8[HEAP32[$7 >> 2] >> 0] | 0) * 3 | 0) + (HEAPU8[HEAP32[$8 >> 2] >> 0] | 0) | 0;
 if ((HEAP32[$9 >> 2] | 0) == 1) {
  $26 = $23 + 2 >> 2 & 255;
  HEAP8[(HEAP32[$6 >> 2] | 0) + 1 >> 0] = $26;
  HEAP8[HEAP32[$6 >> 2] >> 0] = $26;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  $86 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $86 | 0;
 }
 HEAP32[$13 >> 2] = $23;
 HEAP8[HEAP32[$6 >> 2] >> 0] = (HEAP32[$13 >> 2] | 0) + 2 >> 2;
 HEAP32[$11 >> 2] = 1;
 while (1) {
  $39 = HEAP32[$13 >> 2] | 0;
  if ((HEAP32[$11 >> 2] | 0) >= (HEAP32[$9 >> 2] | 0)) break;
  HEAP32[$12 >> 2] = $39;
  HEAP32[$13 >> 2] = ((HEAPU8[(HEAP32[$7 >> 2] | 0) + (HEAP32[$11 >> 2] | 0) >> 0] | 0) * 3 | 0) + (HEAPU8[(HEAP32[$8 >> 2] | 0) + (HEAP32[$11 >> 2] | 0) >> 0] | 0);
  HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$11 >> 2] << 1) - 1) >> 0] = ((HEAP32[$12 >> 2] | 0) * 3 | 0) + (HEAP32[$13 >> 2] | 0) + 8 >> 4;
  HEAP8[(HEAP32[$6 >> 2] | 0) + (HEAP32[$11 >> 2] << 1) >> 0] = ((HEAP32[$13 >> 2] | 0) * 3 | 0) + (HEAP32[$12 >> 2] | 0) + 8 >> 4;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
 }
 HEAP8[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$9 >> 2] << 1) - 1) >> 0] = $39 + 2 >> 2;
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $86 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $86 | 0;
}

function __ZN6DrMesh18extrudeFacePolygonERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEiiib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0102 = 0.0, $$0103 = 0.0, $$0104 = 0.0, $$0105 = 0.0, $$0106 = 0, $$in = 0, $10 = 0, $11 = 0, $16 = 0.0, $17 = 0.0, $19 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $27 = 0, $29 = 0.0, $32 = 0.0, $36 = 0.0, $38 = 0.0, $40 = 0.0, $43 = 0.0, $47 = 0.0, $49 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $spec$select = 0, $$0106$looptemp = 0;
 $6 = +($2 | 0);
 $7 = +($3 | 0);
 $8 = $1 + 4 | 0;
 $10 = HEAP32[$1 >> 2] | 0;
 $11 = (HEAP32[$8 >> 2] | 0) - $10 | 0;
 if (($11 | 0) > 0) {
  $16 = $6 * .5;
  $17 = $7 * .5;
  $19 = 1.0 / +($2 | 0);
  $21 = 1.0 / +($3 | 0);
  $22 = -$19;
  $23 = -$21;
  $$0106 = 0;
  $$in = $10;
  $27 = $11 >>> 4;
  do {
   $24 = $$in;
   $$0106$looptemp = $$0106;
   $$0106 = $$0106 + 1 | 0;
   $spec$select = ($$0106 | 0) < ($27 | 0) ? $$0106 : 0;
   $29 = +HEAPF64[$24 + ($spec$select << 4) >> 3];
   $32 = +HEAPF64[$24 + ($spec$select << 4) + 8 >> 3];
   $36 = $29 / $6;
   $38 = $32 / $7;
   $40 = +HEAPF64[$24 + ($$0106$looptemp << 4) >> 3];
   $43 = +HEAPF64[$24 + ($$0106$looptemp << 4) + 8 >> 3];
   $47 = $40 / $6;
   $49 = $43 / $7;
   $$0102 = $29 - $16 + ($36 > .5 ? $22 : $19);
   $$0105 = $40 - $16 + ($47 > .5 ? $22 : $19);
   $$0103 = $7 - $32 - $17 + ($38 > .5 ? $23 : $21);
   $$0104 = $7 - $43 - $17 + ($49 > .5 ? $23 : $21);
   if ($5) __ZN6DrMesh7extrudeEffffffffi($0, $$0105, $$0104, $47, $49, $$0102, $$0103, $36, $38, $4); else __ZN6DrMesh7extrudeEffffffffi($0, $$0102, $$0103, $36, $38, $$0105, $$0104, $47, $49, $4);
   $$in = HEAP32[$1 >> 2] | 0;
   $27 = (HEAP32[$8 >> 2] | 0) - $$in >> 4;
  } while (($$0106 | 0) < ($27 | 0));
 }
 return;
}

function __ZN2Dr22BlackAndWhiteFromAlphaERK8DrBitmapdb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $$02526 = 0, $$027 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $18 = 0, $22 = 0, $23 = 0, $26 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 4 | 0;
 __ZN7DrColorC2Ej($4, 0);
 __ZN7DrColorC2Ej($5, -1);
 if ($3) __ZN2Dr4SwapI7DrColorEEvRT_S3_($4, $5);
 __ZN8DrBitmapC2ERKS_($0, $1);
 $9 = ~~($2 * 255.0);
 $10 = $1 + 4 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (($11 | 0) > 0) {
  $13 = $1 + 8 | 0;
  $$027 = 0;
  $15 = HEAP32[$13 >> 2] | 0;
  $28 = $11;
  while (1) {
   if (($15 | 0) > 0) {
    $$02526 = 0;
    do {
     __ZNK8DrBitmap8getPixelEii($7, $1, $$027, $$02526);
     $22 = (HEAPU8[(__ZNK7DrColor5alphaEv($7) | 0) >> 0] | 0 | 0) < ($9 | 0);
     $23 = $22 ? $4 : $5;
     HEAP32[$6 >> 2] = HEAPU8[$23 >> 0] | HEAPU8[$23 + 1 >> 0] << 8 | HEAPU8[$23 + 2 >> 0] << 16 | HEAPU8[$23 + 3 >> 0] << 24;
     HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
     HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
     HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
     HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
     __ZN8DrBitmap8setPixelEii7DrColor($0, $$027, $$02526, $tmpcast$byval_copy);
     $$02526 = $$02526 + 1 | 0;
     $26 = HEAP32[$13 >> 2] | 0;
    } while (($$02526 | 0) < ($26 | 0));
    $18 = HEAP32[$10 >> 2] | 0;
    $29 = $26;
   } else {
    $18 = $28;
    $29 = $15;
   }
   $$027 = $$027 + 1 | 0;
   if (($$027 | 0) >= ($18 | 0)) break; else {
    $15 = $29;
    $28 = $18;
   }
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$1 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 24 | 0;
 $4 = sp;
 $5 = sp + 12 | 0;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 116) if ((HEAP8[$0 + 1 >> 0] | 0) == 119) {
  $15 = $0 + 2 | 0;
  $16 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15, $1, $2) | 0;
  if (($16 | 0) == ($15 | 0)) $$1 = $0; else {
   $19 = $2 + 4 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($20 | 0)) $$1 = $0; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $20 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($5, 0, 48075) | 0;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
    $$0$i$i$i = 0;
    while (1) {
     if (($$0$i$i$i | 0) == 3) break;
     HEAP32[$5 + ($$0$i$i$i << 2) >> 2] = 0;
     $$0$i$i$i = $$0$i$i$i + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$19 >> 2] | 0) + -24 | 0, $3);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$1 = $16;
   }
  }
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 STACKTOP = sp;
 return $$1 | 0;
}

function _stbtt_Rasterize($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $12 = sp + 60 | 0;
 $13 = sp + 56 | 0;
 $14 = sp + 52 | 0;
 $15 = sp + 48 | 0;
 $16 = sp + 44 | 0;
 $17 = sp + 40 | 0;
 $18 = sp + 36 | 0;
 $19 = sp + 32 | 0;
 $20 = sp + 28 | 0;
 $21 = sp + 24 | 0;
 $22 = sp + 20 | 0;
 $23 = sp + 16 | 0;
 $24 = sp + 12 | 0;
 $25 = sp + 8 | 0;
 $26 = sp + 4 | 0;
 $27 = sp;
 HEAP32[$12 >> 2] = $0;
 HEAPF32[$13 >> 2] = $1;
 HEAP32[$14 >> 2] = $2;
 HEAP32[$15 >> 2] = $3;
 HEAPF32[$16 >> 2] = $4;
 HEAPF32[$17 >> 2] = $5;
 HEAPF32[$18 >> 2] = $6;
 HEAPF32[$19 >> 2] = $7;
 HEAP32[$20 >> 2] = $8;
 HEAP32[$21 >> 2] = $9;
 HEAP32[$22 >> 2] = $10;
 HEAP32[$23 >> 2] = $11;
 HEAPF32[$24 >> 2] = +HEAPF32[$16 >> 2] > +HEAPF32[$17 >> 2] ? +HEAPF32[$17 >> 2] : +HEAPF32[$16 >> 2];
 HEAP32[$27 >> 2] = _stbtt_FlattenCurves(HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, +HEAPF32[$13 >> 2] / +HEAPF32[$24 >> 2], $26, $25, HEAP32[$23 >> 2] | 0) | 0;
 if (!(HEAP32[$27 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _stbtt__rasterize(HEAP32[$12 >> 2] | 0, HEAP32[$27 >> 2] | 0, HEAP32[$26 >> 2] | 0, HEAP32[$25 >> 2] | 0, +HEAPF32[$16 >> 2], +HEAPF32[$17 >> 2], +HEAPF32[$18 >> 2], +HEAPF32[$19 >> 2], HEAP32[$20 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0, HEAP32[$23 >> 2] | 0);
 _fons__tmpfree(HEAP32[$26 >> 2] | 0, HEAP32[$23 >> 2] | 0);
 _fons__tmpfree(HEAP32[$27 >> 2] | 0, HEAP32[$23 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE6insertINS_21__list_const_iteratorIS1_PvEEEENS_15__list_iteratorIS1_S7_EES8_T_SB_PNS_9enable_ifIXsr19__is_input_iteratorISB_EE5valueEvE4typeE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$022$lcssa = 0, $$02258 = 0, $$cast = 0, $$in = 0, $$pre$phiZ2D = 0, $$sroa$028$0$lcssa = 0, $$sroa$028$057 = 0, $12 = 0, $14 = 0, $23 = 0, $29 = 0, $30 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $$sroa$028$057$looptemp = 0;
 $5 = HEAP32[$1 >> 2] | 0;
 $6 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$3 >> 2] | 0;
 if (($6 | 0) == ($7 | 0)) $$pre$phiZ2D = $5; else {
  $9 = __Znwm(20) | 0;
  HEAP32[$9 >> 2] = 0;
  __ZN8TPPLPolyC2ERKS_($9 + 8 | 0, $6 + 8 | 0);
  $12 = $9;
  $14 = HEAP32[$6 + 4 >> 2] | 0;
  HEAP32[$2 >> 2] = $14;
  $$cast = $14;
  if (($7 | 0) == ($$cast | 0)) {
   $$022$lcssa = 1;
   $$sroa$028$0$lcssa = $12;
  } else {
   $$02258 = 1;
   $$in = $14;
   $$sroa$028$057 = $12;
   $23 = $$cast;
   do {
    $$sroa$028$057$looptemp = $$sroa$028$057;
    $$sroa$028$057 = __Znwm(20) | 0;
    __ZN8TPPLPolyC2ERKS_($$sroa$028$057 + 8 | 0, $$in + 8 | 0);
    HEAP32[$$sroa$028$057$looptemp + 4 >> 2] = $$sroa$028$057;
    HEAP32[$$sroa$028$057 >> 2] = $$sroa$028$057$looptemp;
    $$in = HEAP32[$23 + 4 >> 2] | 0;
    HEAP32[$2 >> 2] = $$in;
    $$02258 = $$02258 + 1 | 0;
    $23 = $$in;
   } while (($7 | 0) != ($23 | 0));
   $$022$lcssa = $$02258;
   $$sroa$028$0$lcssa = $$sroa$028$057;
  }
  $29 = $$sroa$028$0$lcssa;
  $30 = HEAP32[$5 >> 2] | 0;
  HEAP32[$30 + 4 >> 2] = $9;
  HEAP32[$9 >> 2] = $30;
  HEAP32[$5 >> 2] = $29;
  HEAP32[$29 + 4 >> 2] = $5;
  $34 = $0 + 8 | 0;
  HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + $$022$lcssa;
  $$pre$phiZ2D = $9;
 }
 return $$pre$phiZ2D | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $27 = 0, $28 = 0, label = 0;
 L1 : do if ($0 >>> 0 < $1 >>> 0) {
  L3 : do if ((HEAP8[$0 >> 0] | 0) == 95) {
   if (($1 - $0 | 0) <= 3) {
    HEAP32[$3 >> 2] = -2;
    break L1;
   }
   switch (HEAP8[$0 + 1 >> 0] | 0) {
   case 90:
    {
     $13 = $0 + 2 | 0;
     $14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($13, $1, $2) | 0;
     if (($14 | 0) == ($13 | 0) | ($14 | 0) == ($1 | 0)) $$0 = $14; else if ((HEAP8[$14 >> 0] | 0) == 46) $$0 = __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($14, $1, $2) | 0; else $$0 = $14;
     if (($$0 | 0) == ($1 | 0)) break L3;
     HEAP32[$3 >> 2] = -2;
     break L1;
     break;
    }
   case 95:
    {
     label = 11;
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 11) if ((HEAP8[$0 + 2 >> 0] | 0) == 95) if ((HEAP8[$0 + 3 >> 0] | 0) == 90) {
    $27 = $0 + 4 | 0;
    $28 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($27, $1, $2) | 0;
    if (($28 | 0) == ($27 | 0) | ($28 | 0) == ($1 | 0)) {
     HEAP32[$3 >> 2] = -2;
     break L1;
    }
    if ((__ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($28, $1, $2) | 0) == ($1 | 0)) break;
    HEAP32[$3 >> 2] = -2;
    break L1;
   }
   HEAP32[$3 >> 2] = -2;
   break L1;
  } else if ((__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = -2;
   break L1;
  } while (0);
  if (!(HEAP32[$3 >> 2] | 0)) if ((HEAP32[$2 >> 2] | 0) == (HEAP32[$2 + 4 >> 2] | 0)) HEAP32[$3 >> 2] = -2;
 } else HEAP32[$3 >> 2] = -2; while (0);
 return;
}

function _stbtt__GetGlyfOffset($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $27 = 0, $3 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $5 = 0, $6 = 0, $66 = 0, $85 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 48 + 8 >> 2] | 0) ___assert_fail(40528, 40159, 1517, 40544);
 if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[$2 >> 2] = -1;
  $85 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $85 | 0;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] | 0) >= 2) {
  HEAP32[$2 >> 2] = -1;
  $85 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $85 | 0;
 }
 $27 = HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0;
 $34 = (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) | 0;
 $35 = HEAP32[$4 >> 2] | 0;
 if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] | 0)) {
  HEAP32[$5 >> 2] = $27 + (((_ttUSHORT($34 + ($35 << 1) | 0) | 0) & 65535) << 1);
  $44 = HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$6 >> 2] = $44 + (((_ttUSHORT((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$4 >> 2] << 1) + 2 | 0) | 0) & 65535) << 1);
 } else {
  HEAP32[$5 >> 2] = $27 + (_ttULONG($34 + ($35 << 2) | 0) | 0);
  $66 = HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$6 >> 2] = $66 + (_ttULONG((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$4 >> 2] << 2) + 4 | 0) | 0);
 }
 HEAP32[$2 >> 2] = (HEAP32[$5 >> 2] | 0) == (HEAP32[$6 >> 2] | 0) ? -1 : HEAP32[$5 >> 2] | 0;
 $85 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $85 | 0;
}

function ___vfprintf_internal($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$1 = 0, $15 = 0, $16 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $37 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $spec$select = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $5 = sp + 208 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 80 | 0;
 $8 = sp;
 dest = $6;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 if ((_printf_core(0, $1, $5, $7, $6, $3, $4) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $42 = ___lockfile($0) | 0; else $42 = 0;
  $15 = HEAP32[$0 >> 2] | 0;
  $16 = $15 & 32;
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) HEAP32[$0 >> 2] = $15 & -33;
  $21 = $0 + 48 | 0;
  if (!(HEAP32[$21 >> 2] | 0)) {
   $25 = $0 + 44 | 0;
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$25 >> 2] = $8;
   $27 = $0 + 28 | 0;
   HEAP32[$27 >> 2] = $8;
   $28 = $0 + 20 | 0;
   HEAP32[$28 >> 2] = $8;
   HEAP32[$21 >> 2] = 80;
   $30 = $0 + 16 | 0;
   HEAP32[$30 >> 2] = $8 + 80;
   $31 = _printf_core($0, $1, $5, $7, $6, $3, $4) | 0;
   if (!$26) $$1 = $31; else {
    FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
    $spec$select = (HEAP32[$28 >> 2] | 0) == 0 ? -1 : $31;
    HEAP32[$25 >> 2] = $26;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$30 >> 2] = 0;
    HEAP32[$27 >> 2] = 0;
    HEAP32[$28 >> 2] = 0;
    $$1 = $spec$select;
   }
  } else $$1 = _printf_core($0, $1, $5, $7, $6, $3, $4) | 0;
  $37 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $37 | $16;
  if ($42 | 0) ___unlockfile($0);
  $$0 = ($37 & 32 | 0) == 0 ? $$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __sg_gl_teximage_format($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do switch (HEAP32[$2 >> 2] | 0) {
 case 17:
 case 10:
 case 7:
 case 6:
 case 3:
 case 2:
  {
   HEAP32[$1 >> 2] = 6409;
   break;
  }
 case 28:
 case 40:
 case 37:
 case 34:
 case 33:
 case 24:
 case 23:
  {
   HEAP32[$1 >> 2] = 6408;
   break;
  }
 case 29:
  {
   HEAP32[$1 >> 2] = 6407;
   break;
  }
 case 41:
  {
   HEAP32[$1 >> 2] = 6402;
   break;
  }
 case 42:
  {
   HEAP32[$1 >> 2] = 34041;
   break;
  }
 case 43:
  {
   HEAP32[$1 >> 2] = 33777;
   break;
  }
 case 44:
  {
   HEAP32[$1 >> 2] = 33778;
   break;
  }
 case 45:
  {
   HEAP32[$1 >> 2] = 33779;
   break;
  }
 case 46:
  {
   HEAP32[$1 >> 2] = 36283;
   break;
  }
 case 47:
  {
   HEAP32[$1 >> 2] = 36284;
   break;
  }
 case 48:
  {
   HEAP32[$1 >> 2] = 36285;
   break;
  }
 case 49:
  {
   HEAP32[$1 >> 2] = 36286;
   break;
  }
 case 50:
  {
   HEAP32[$1 >> 2] = 36494;
   break;
  }
 case 51:
  {
   HEAP32[$1 >> 2] = 36495;
   break;
  }
 case 52:
  {
   HEAP32[$1 >> 2] = 36492;
   break;
  }
 case 53:
  {
   HEAP32[$1 >> 2] = 35841;
   break;
  }
 case 54:
  {
   HEAP32[$1 >> 2] = 35840;
   break;
  }
 case 55:
  {
   HEAP32[$1 >> 2] = 35843;
   break;
  }
 case 56:
  {
   HEAP32[$1 >> 2] = 35842;
   break;
  }
 case 57:
  {
   HEAP32[$1 >> 2] = 37492;
   break;
  }
 case 58:
  {
   HEAP32[$1 >> 2] = 37494;
   break;
  }
 case 59:
  {
   HEAP32[$1 >> 2] = 37496;
   break;
  }
 case 60:
  {
   HEAP32[$1 >> 2] = 37490;
   break;
  }
 case 61:
  {
   HEAP32[$1 >> 2] = 37491;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4754, 33309);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}
function __sg_image_common_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
 HEAP8[(HEAP32[$2 >> 2] | 0) + 4 >> 0] = HEAP8[(HEAP32[$3 >> 2] | 0) + 8 >> 0] & 1;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 32 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 40 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 52 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 56 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 56 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 60 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 60 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] = 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 68 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] | 0) == 1 ? 1 : 2;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _stbtt_GetGlyphHMetrics($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $23 = 0, $35 = 0, $4 = 0, $5 = 0, $51 = 0, $6 = 0, $66 = 0, $7 = 0, $8 = 0, $88 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 $8 = sp + 16 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 HEAP16[$8 >> 1] = _ttUSHORT((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) + 34 | 0) | 0;
 $23 = (HEAP32[$6 >> 2] | 0) != 0;
 if ((HEAP32[$5 >> 2] | 0) < (HEAPU16[$8 >> 1] | 0 | 0)) {
  if ($23) {
   $35 = (_ttSHORT((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[$5 >> 2] << 2) | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$6 >> 2] >> 2] = $35;
  }
  if (!(HEAP32[$7 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  $51 = (_ttSHORT((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[$5 >> 2] << 2) + 2 | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[$7 >> 2] >> 2] = $51;
  STACKTOP = sp;
  return;
 } else {
  if ($23) {
   $66 = (_ttSHORT((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) + ((HEAPU16[$8 >> 1] | 0) - 1 << 2) | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$6 >> 2] >> 2] = $66;
  }
  if (!(HEAP32[$7 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  $88 = (_ttSHORT((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) + ((HEAPU16[$8 >> 1] | 0) << 2) + ((HEAP32[$5 >> 2] | 0) - (HEAPU16[$8 >> 1] | 0) << 1) | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[$7 >> 2] >> 2] = $88;
  STACKTOP = sp;
  return;
 }
}

function _stbi__vertical_flip($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096 | 0;
 $4 = sp + 2088 | 0;
 $5 = sp + 2084 | 0;
 $6 = sp + 2080 | 0;
 $7 = sp + 2076 | 0;
 $8 = sp + 2072 | 0;
 $9 = sp + 2068 | 0;
 $10 = sp;
 $11 = sp + 2064 | 0;
 $12 = sp + 2060 | 0;
 $13 = sp + 2056 | 0;
 $14 = sp + 2052 | 0;
 $15 = sp + 2048 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 HEAP32[$9 >> 2] = Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$11 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[$6 >> 2] >> 1 | 0)) break;
  HEAP32[$12 >> 2] = (HEAP32[$11 >> 2] | 0) + (Math_imul(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0);
  HEAP32[$13 >> 2] = (HEAP32[$11 >> 2] | 0) + (Math_imul((HEAP32[$6 >> 2] | 0) - (HEAP32[$8 >> 2] | 0) - 1 | 0, HEAP32[$9 >> 2] | 0) | 0);
  HEAP32[$14 >> 2] = HEAP32[$9 >> 2];
  while (1) {
   if (!(HEAP32[$14 >> 2] | 0)) break;
   HEAP32[$15 >> 2] = (HEAP32[$14 >> 2] | 0) >>> 0 < 2048 ? HEAP32[$14 >> 2] | 0 : 2048;
   _memcpy($10 | 0, HEAP32[$12 >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0;
   _memcpy(HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0;
   _memcpy(HEAP32[$13 >> 2] | 0, $10 | 0, HEAP32[$15 >> 2] | 0) | 0;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + (HEAP32[$15 >> 2] | 0);
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + (HEAP32[$15 >> 2] | 0);
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) - (HEAP32[$15 >> 2] | 0);
  }
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _meshopt_optimizeVertexFetch($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$05967 = 0, $$060$lcssa68 = 0, $$06066 = 0, $$161 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $28 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $6 = sp;
 if (($2 >>> 0) % 3 | 0 | 0) ___assert_fail(43058, 43079, 33, 43213);
 if (($5 + -1 | 0) >>> 0 >= 256) ___assert_fail(43241, 43079, 34, 43213);
 __ZN17meshopt_AllocatorC2Ev($6);
 if (($0 | 0) == ($3 | 0)) {
  $11 = Math_imul($5, $4) | 0;
  $12 = __ZN17meshopt_Allocator8allocateIhEEPT_m($6, $11) | 0;
  _memcpy($12 | 0, $0 | 0, $11 | 0) | 0;
  $$0 = $12;
 } else $$0 = $3;
 $13 = __ZN17meshopt_Allocator8allocateIjEEPT_m($6, $4) | 0;
 _memset($13 | 0, -1, $4 << 2 | 0) | 0;
 if (!$2) $$060$lcssa68 = 0; else {
  $$05967 = 0;
  $$06066 = 0;
  while (1) {
   $17 = $1 + ($$05967 << 2) | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   if ($18 >>> 0 >= $4 >>> 0) {
    label = 11;
    break;
   }
   $20 = $13 + ($18 << 2) | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   if (($21 | 0) == -1) {
    _memcpy($0 + (Math_imul($$06066, $5) | 0) | 0, $$0 + (Math_imul($18, $5) | 0) | 0, $5 | 0) | 0;
    HEAP32[$20 >> 2] = $$06066;
    $$161 = $$06066 + 1 | 0;
    $28 = $$06066;
   } else {
    $$161 = $$06066;
    $28 = $21;
   }
   HEAP32[$17 >> 2] = $28;
   $$05967 = $$05967 + 1 | 0;
   if ($$05967 >>> 0 >= $2 >>> 0) break; else $$06066 = $$161;
  }
  if ((label | 0) == 11) ___assert_fail(43164, 43079, 55, 43213);
  if ($$161 >>> 0 > $4 >>> 0) ___assert_fail(43185, 43079, 71, 43213); else $$060$lcssa68 = $$161;
 }
 __ZN17meshopt_AllocatorD2Ev($6);
 STACKTOP = sp;
 return $$060$lcssa68 | 0;
}

function __ZNK8DrBitmap7polygonEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy3 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy3 = sp + 64 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 __ZN10DrPolygonFC2Ev($0);
 __ZN8DrPointFC2Edd($2, 0.0, 0.0);
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$$byval_copy3 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
 __ZN10DrPolygonF8addPointE8DrPointF($0, $$byval_copy3);
 $6 = $1 + 4 | 0;
 __ZN8DrPointFC2Edd($3, +((HEAP32[$6 >> 2] | 0) + -1 | 0), 0.0);
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$$byval_copy3 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
 __ZN10DrPolygonF8addPointE8DrPointF($0, $$byval_copy3);
 $13 = $1 + 8 | 0;
 __ZN8DrPointFC2Edd($4, +((HEAP32[$6 >> 2] | 0) + -1 | 0), +((HEAP32[$13 >> 2] | 0) + -1 | 0));
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$$byval_copy3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
 __ZN10DrPolygonF8addPointE8DrPointF($0, $$byval_copy3);
 __ZN8DrPointFC2Edd($5, 0.0, +((HEAP32[$13 >> 2] | 0) + -1 | 0));
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$$byval_copy3 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$$byval_copy3 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
 __ZN10DrPolygonF8addPointE8DrPointF($0, $$byval_copy3);
 STACKTOP = sp;
 return;
}

function _stbi__compute_transparency16($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
 HEAP32[$8 >> 2] = Math_imul(HEAP32[HEAP32[$6 >> 2] >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$9 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2];
 if (!((HEAP32[$5 >> 2] | 0) == 2 | (HEAP32[$5 >> 2] | 0) == 4)) ___assert_fail(44481, 43392, 4685, 44533);
 $26 = (HEAP32[$5 >> 2] | 0) == 2;
 HEAP32[$7 >> 2] = 0;
 if ($26) {
  while (1) {
   if ((HEAP32[$7 >> 2] | 0) >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) break;
   HEAP16[(HEAP32[$9 >> 2] | 0) + 2 >> 1] = (HEAPU16[HEAP32[$9 >> 2] >> 1] | 0 | 0) == (HEAPU16[HEAP32[$4 >> 2] >> 1] | 0 | 0) ? 0 : 65535;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 4;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return 1;
 }
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) break;
  if ((HEAPU16[HEAP32[$9 >> 2] >> 1] | 0 | 0) == (HEAPU16[HEAP32[$4 >> 2] >> 1] | 0 | 0)) if ((HEAPU16[(HEAP32[$9 >> 2] | 0) + 2 >> 1] | 0 | 0) == (HEAPU16[(HEAP32[$4 >> 2] | 0) + 2 >> 1] | 0 | 0)) if ((HEAPU16[(HEAP32[$9 >> 2] | 0) + 4 >> 1] | 0 | 0) == (HEAPU16[(HEAP32[$4 >> 2] | 0) + 4 >> 1] | 0 | 0)) HEAP16[(HEAP32[$9 >> 2] | 0) + 6 >> 1] = 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 8;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return 1;
}

function _fons__allocFont($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $41 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $66 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = 0;
 if (((HEAP32[(HEAP32[$2 >> 2] | 0) + 76 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0)) {
  if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0)) $22 = 8; else $22 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] << 1;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] = $22;
  $30 = _realloc(HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] << 2) | 0;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] = $30;
  if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0)) {
   HEAP32[$1 >> 2] = -1;
   $66 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $66 | 0;
  }
 }
 HEAP32[$3 >> 2] = _malloc(1328) | 0;
 if (HEAP32[$3 >> 2] | 0) {
  _memset(HEAP32[$3 >> 2] | 0, 0, 1328) | 0;
  $41 = _malloc(8192) | 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 208 >> 2] = $41;
  if (HEAP32[(HEAP32[$3 >> 2] | 0) + 208 >> 2] | 0) {
   HEAP32[(HEAP32[$3 >> 2] | 0) + 212 >> 2] = 256;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 216 >> 2] = 0;
   $52 = HEAP32[$3 >> 2] | 0;
   $55 = HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0;
   $57 = (HEAP32[$2 >> 2] | 0) + 76 | 0;
   $58 = HEAP32[$57 >> 2] | 0;
   HEAP32[$57 >> 2] = $58 + 1;
   HEAP32[$55 + ($58 << 2) >> 2] = $52;
   HEAP32[$1 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 76 >> 2] | 0) - 1;
   $66 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $66 | 0;
  }
 }
 _fons__freeFont(HEAP32[$3 >> 2] | 0);
 HEAP32[$1 >> 2] = -1;
 $66 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $66 | 0;
}

function __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 12 | 0;
  $19 = $16 << 1;
  __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEEC2EmmS9_($2, $16 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, ((HEAP32[$3 >> 2] | 0) - $14 | 0) / 12 | 0, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAP32[$25 >> 2] = 0;
  $26 = $25 + 4 | 0;
  HEAP32[$26 >> 2] = 0;
  $27 = $25 + 8 | 0;
  HEAP32[$27 >> 2] = 0;
  HEAP32[$25 >> 2] = HEAP32[$1 >> 2];
  $29 = $1 + 4 | 0;
  HEAP32[$26 >> 2] = HEAP32[$29 >> 2];
  $31 = $1 + 8 | 0;
  HEAP32[$27 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$31 >> 2] = 0;
  HEAP32[$29 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 12;
  __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $2);
  __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function _stbi__compute_transparency($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
 HEAP32[$8 >> 2] = Math_imul(HEAP32[HEAP32[$6 >> 2] >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$9 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2];
 if (!((HEAP32[$5 >> 2] | 0) == 2 | (HEAP32[$5 >> 2] | 0) == 4)) ___assert_fail(44481, 43392, 4660, 44506);
 $26 = (HEAP32[$5 >> 2] | 0) == 2;
 HEAP32[$7 >> 2] = 0;
 if ($26) {
  while (1) {
   if ((HEAP32[$7 >> 2] | 0) >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) break;
   HEAP8[(HEAP32[$9 >> 2] | 0) + 1 >> 0] = (HEAPU8[HEAP32[$9 >> 2] >> 0] | 0 | 0) == (HEAPU8[HEAP32[$4 >> 2] >> 0] | 0 | 0) ? 0 : 255;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 2;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return 1;
 }
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) break;
  if ((HEAPU8[HEAP32[$9 >> 2] >> 0] | 0 | 0) == (HEAPU8[HEAP32[$4 >> 2] >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[$9 >> 2] | 0) + 1 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[$4 >> 2] | 0) + 1 >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[$9 >> 2] | 0) + 2 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[$4 >> 2] | 0) + 2 >> 0] | 0 | 0)) HEAP8[(HEAP32[$9 >> 2] | 0) + 3 >> 0] = 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 4;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return 1;
}

function __sapp_init_state($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $1 = sp + 100 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 _memset(50800, 0, 3240) | 0;
 __sapp_desc_defaults($2, HEAP32[$1 >> 2] | 0);
 dest = 50800;
 src = $2;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[50903] = 1;
 HEAP32[12728] = HEAP32[12711];
 HEAP32[12729] = HEAP32[12712];
 HEAP32[12730] = HEAP32[12728];
 HEAP32[12731] = HEAP32[12729];
 HEAP32[12732] = HEAP32[12713];
 HEAP32[12733] = HEAP32[12714];
 HEAP8[51220] = 35;
 __sapp_strcpy(HEAP32[12722] | 0, 51221, 127) | 0;
 HEAP32[12722] = 51221;
 HEAP8[50909] = HEAP8[50895] & 1;
 HEAP8[51180] = HEAP8[50869] & 1;
 if (HEAP8[51180] & 1) {
  HEAP32[12796] = HEAP32[12718];
  HEAP32[12797] = _calloc(1, HEAP32[12796] | 0) | 0;
 }
 HEAP8[51192] = HEAP8[50876] & 1;
 if (!(HEAP8[51192] & 1)) {
  $34 = HEAP32[12716] | 0;
  __sapp_strcpy($34, 51348, 128) | 0;
  HEAP32[12716] = 51348;
  HEAPF32[12734] = 1.0;
  $35 = HEAP8[50861] | 0;
  $36 = $35 & 1;
  $37 = $36 & 1;
  HEAP8[50901] = $37;
  HEAP8[51176] = 1;
  STACKTOP = sp;
  return;
 }
 HEAP32[12799] = HEAP32[12720];
 HEAP32[12800] = HEAP32[12721];
 HEAP32[12802] = Math_imul(HEAP32[12799] | 0, HEAP32[12800] | 0) | 0;
 HEAP32[12803] = _calloc(1, HEAP32[12802] | 0) | 0;
 $34 = HEAP32[12716] | 0;
 __sapp_strcpy($34, 51348, 128) | 0;
 HEAP32[12716] = 51348;
 HEAPF32[12734] = 1.0;
 $35 = HEAP8[50861] | 0;
 $36 = $35 & 1;
 $37 = $36 & 1;
 HEAP8[50901] = $37;
 HEAP8[51176] = 1;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051 = 0, $$4 = 0, $13 = 0, $17 = 0, $20 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$4 = $0; else switch (HEAP8[$0 >> 0] | 0) {
 case 88:
  {
   $6 = $0 + 1 | 0;
   $7 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6, $1, $2) | 0;
   if (($7 | 0) == ($6 | 0) | ($7 | 0) == ($1 | 0)) {
    $$4 = $0;
    break L1;
   }
   $$4 = (HEAP8[$7 >> 0] | 0) == 69 ? $7 + 1 | 0 : $0;
   break L1;
   break;
  }
 case 74:
  {
   $13 = $0 + 1 | 0;
   if (($13 | 0) == ($1 | 0)) {
    $$4 = $0;
    break L1;
   }
   $$051 = $13;
   while (1) {
    if ((HEAP8[$$051 >> 0] | 0) == 69) break;
    $17 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$051, $1, $2) | 0;
    if (($17 | 0) == ($$051 | 0)) {
     $$4 = $0;
     break L1;
    } else $$051 = $17;
   }
   $$4 = $$051 + 1 | 0;
   break L1;
   break;
  }
 case 76:
  {
   $20 = $0 + 1 | 0;
   if (($20 | 0) != ($1 | 0)) if ((HEAP8[$20 >> 0] | 0) == 90) {
    $24 = $0 + 2 | 0;
    $25 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($24, $1, $2) | 0;
    if (($25 | 0) == ($24 | 0) | ($25 | 0) == ($1 | 0)) {
     $$4 = $0;
     break L1;
    }
    $$4 = (HEAP8[$25 >> 0] | 0) == 69 ? $25 + 1 | 0 : $0;
    break L1;
   }
   $$4 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 default:
  {
   $$4 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
  }
 } while (0);
 return $$4 | 0;
}

function __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $$06$i$looptemp = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + 4 | 0;
 if (($4 | 0) == ($2 | 0)) {
  $$pre$phi15Z2D = $5;
  $$pre$phiZ2D = $0;
  $22 = HEAP32[$5 >> 2] | 0;
  $23 = $2;
 } else {
  $$06$i = $4;
  $9 = HEAP32[$5 >> 2] | 0;
  do {
   $8 = $9 + -12 | 0;
   $$06$i$looptemp = $$06$i;
   $$06$i = $$06$i + -12 | 0;
   HEAP32[$8 >> 2] = 0;
   $11 = $9 + -8 | 0;
   HEAP32[$11 >> 2] = 0;
   $12 = $9 + -4 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$8 >> 2] = HEAP32[$$06$i >> 2];
   $14 = $$06$i$looptemp + -8 | 0;
   HEAP32[$11 >> 2] = HEAP32[$14 >> 2];
   $16 = $$06$i$looptemp + -4 | 0;
   HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$16 >> 2] = 0;
   HEAP32[$14 >> 2] = 0;
   HEAP32[$$06$i >> 2] = 0;
   $9 = (HEAP32[$5 >> 2] | 0) + -12 | 0;
   HEAP32[$5 >> 2] = $9;
  } while (($$06$i | 0) != ($2 | 0));
  $$pre$phi15Z2D = $5;
  $$pre$phiZ2D = $0;
  $22 = $9;
  $23 = HEAP32[$0 >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $22;
 HEAP32[$$pre$phi15Z2D >> 2] = $23;
 $24 = $1 + 8 | 0;
 $25 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$24 >> 2] = $25;
 $27 = $0 + 8 | 0;
 $28 = $1 + 12 | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$28 >> 2] = $29;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phi15Z2D >> 2];
 return;
}

function __sfetch_pool_item_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $19 = 0, $2 = 0, $21 = 0, $23 = 0, $3 = 0, $32 = 0, $37 = 0, $39 = 0, $4 = 0, $5 = 0, $56 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(37961, 21538, 1407, 38990);
 if (!(HEAP8[(HEAP32[$3 >> 2] | 0) + 20 >> 0] & 1)) ___assert_fail(37961, 21538, 1407, 38990);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 0) {
  HEAP32[$2 >> 2] = __sfetch_make_id(0, 0) | 0;
  $56 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $56 | 0;
 }
 $19 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0;
 $21 = (HEAP32[$3 >> 2] | 0) + 4 | 0;
 $23 = (HEAP32[$21 >> 2] | 0) + -1 | 0;
 HEAP32[$21 >> 2] = $23;
 HEAP32[$5 >> 2] = HEAP32[$19 + ($23 << 2) >> 2];
 if ((HEAP32[$5 >> 2] | 0) >>> 0 <= 0) ___assert_fail(26137, 21538, 1410, 38990);
 if ((HEAP32[$5 >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) >>> 0) ___assert_fail(26137, 21538, 1410, 38990);
 $32 = HEAP32[$5 >> 2] | 0;
 $37 = (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$5 >> 2] << 2) | 0;
 $39 = (HEAP32[$37 >> 2] | 0) + 1 | 0;
 HEAP32[$37 >> 2] = $39;
 HEAP32[$6 >> 2] = __sfetch_make_id($32, $39) | 0;
 __sfetch_item_init((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$5 >> 2] | 0) * 1232 | 0) | 0, HEAP32[$6 >> 2] | 0, HEAP32[$4 >> 2] | 0);
 HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$5 >> 2] | 0) * 1232 | 0) + 4 >> 2] = 1;
 HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
 $56 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $56 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $0 + 11 | 0;
 if ((HEAP8[$3 >> 0] | 0) < 0) {
  $6 = HEAP32[$0 >> 2] | 0;
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($6, $2);
  HEAP32[$0 + 4 >> 2] = 0;
 } else {
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($0, $2);
  HEAP8[$3 >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($0);
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i$i$i = 0;
 while (1) {
  if (($$0$i$i$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i$i$i << 2) >> 2] = 0;
  $$0$i$i$i$i = $$0$i$i$i$i + 1 | 0;
 }
 $10 = $0 + 12 | 0;
 $11 = $1 + 12 | 0;
 $12 = $10 + 11 | 0;
 if ((HEAP8[$12 >> 0] | 0) < 0) {
  $15 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($15, $2);
  HEAP32[$0 + 16 >> 2] = 0;
 } else {
  HEAP8[$2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($10, $2);
  HEAP8[$12 >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEm($10);
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
 $$0$i$i$i$i3 = 0;
 while (1) {
  if (($$0$i$i$i$i3 | 0) == 3) break;
  HEAP32[$11 + ($$0$i$i$i$i3 << 2) >> 2] = 0;
  $$0$i$i$i$i3 = $$0$i$i$i$i3 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __sg_gl_update_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $19 = 0, $2 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) != 0)) ___assert_fail(37107, 17628, 6945, 37152);
 if (!(HEAP32[HEAP32[$3 >> 2] >> 2] | 0)) ___assert_fail(37107, 17628, 6945, 37152);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(37107, 17628, 6945, 37152);
 $19 = (HEAP32[$2 >> 2] | 0) + 12 + 32 | 0;
 $21 = (HEAP32[$19 >> 2] | 0) + 1 | 0;
 HEAP32[$19 >> 2] = $21;
 if (($21 | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 28 >> 2] | 0)) HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 32 >> 2] = 0;
 HEAP32[$4 >> 2] = __sg_gl_buffer_target(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 12 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 32 >> 2] | 0) >= 2) ___assert_fail(37173, 17628, 6951, 37152);
 HEAP32[$5 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 48 + (HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 32 >> 2] << 2) >> 2];
 if (!(HEAP32[$5 >> 2] | 0)) ___assert_fail(37219, 17628, 6953, 37152);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6954, 37152);
 __sg_gl_cache_store_buffer_binding(HEAP32[$4 >> 2] | 0);
 __sg_gl_cache_bind_buffer(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
 _glBufferSubData(HEAP32[$4 >> 2] | 0, 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0, HEAP32[HEAP32[$3 >> 2] >> 2] | 0);
 __sg_gl_cache_restore_buffer_binding(HEAP32[$4 >> 2] | 0);
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(25839, 17628, 6959, 37152);
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS5_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $$06$i$looptemp = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + 4 | 0;
 if (($4 | 0) == ($2 | 0)) {
  $$pre$phi15Z2D = $5;
  $$pre$phiZ2D = $0;
  $22 = HEAP32[$5 >> 2] | 0;
  $23 = $2;
 } else {
  $$06$i = $4;
  $9 = HEAP32[$5 >> 2] | 0;
  do {
   $8 = $9 + -12 | 0;
   $$06$i$looptemp = $$06$i;
   $$06$i = $$06$i + -12 | 0;
   HEAP32[$8 >> 2] = 0;
   $11 = $9 + -8 | 0;
   HEAP32[$11 >> 2] = 0;
   $12 = $9 + -4 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$8 >> 2] = HEAP32[$$06$i >> 2];
   $14 = $$06$i$looptemp + -8 | 0;
   HEAP32[$11 >> 2] = HEAP32[$14 >> 2];
   $16 = $$06$i$looptemp + -4 | 0;
   HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$16 >> 2] = 0;
   HEAP32[$14 >> 2] = 0;
   HEAP32[$$06$i >> 2] = 0;
   $9 = (HEAP32[$5 >> 2] | 0) + -12 | 0;
   HEAP32[$5 >> 2] = $9;
  } while (($$06$i | 0) != ($2 | 0));
  $$pre$phi15Z2D = $5;
  $$pre$phiZ2D = $0;
  $22 = $9;
  $23 = HEAP32[$0 >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $22;
 HEAP32[$$pre$phi15Z2D >> 2] = $23;
 $24 = $1 + 8 | 0;
 $25 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$24 >> 2] = $25;
 $27 = $0 + 8 | 0;
 $28 = $1 + 12 | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$28 >> 2] = $29;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phi15Z2D >> 2];
 return;
}

function __ZN10Delaunator4linkEmm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = $2;
 $5 = $0 + 16 | 0;
 $6 = $0 + 20 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = HEAP32[$5 >> 2] | 0;
 $10 = $7 - $8 >> 2;
 $12 = $8;
 $13 = $7;
 do if (($10 | 0) == ($1 | 0)) if ((HEAP32[$0 + 24 >> 2] | 0) == ($13 | 0)) {
  __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($5, $4);
  break;
 } else {
  HEAP32[$13 >> 2] = $2;
  HEAP32[$6 >> 2] = $13 + 4;
  break;
 } else if ($10 >>> 0 > $1 >>> 0) {
  HEAP32[$12 + ($1 << 2) >> 2] = $2;
  break;
 } else {
  $20 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc($20, 41674);
  ___cxa_throw($20 | 0, 11416, 18);
 } while (0);
 $21 = HEAP32[$4 >> 2] | 0;
 do if (($21 | 0) != -1) {
  $23 = HEAP32[$6 >> 2] | 0;
  $24 = HEAP32[$5 >> 2] | 0;
  $26 = $23 - $24 >> 2;
  $28 = $24;
  $29 = $23;
  if (($21 | 0) == ($26 | 0)) if ((HEAP32[$0 + 24 >> 2] | 0) == ($29 | 0)) {
   __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($5, $3);
   break;
  } else {
   HEAP32[$29 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$6 >> 2] = $29 + 4;
   break;
  } else if ($21 >>> 0 < $26 >>> 0) {
   HEAP32[$28 + ($21 << 2) >> 2] = HEAP32[$3 >> 2];
   break;
  } else {
   $38 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc($38, 41674);
   ___cxa_throw($38 | 0, 11416, 18);
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $25 = 0, $29 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $spec$select = 0;
 $4 = $1;
 $5 = $2 - $4 | 0;
 $6 = $0 + 8 | 0;
 $8 = HEAP32[$0 >> 2] | 0;
 $11 = $8;
 do if ($5 >>> 0 > ((HEAP32[$6 >> 2] | 0) - $8 | 0) >>> 0) {
  __ZNSt3__26vectorIhNS_9allocatorIhEEE10deallocateEv($0);
  $25 = __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0) | 0;
  if ($25 >>> 0 < $5 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
   $29 = (HEAP32[$6 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0;
   $32 = $29 << 1;
   __ZNSt3__26vectorIhNS_9allocatorIhEEE8allocateEm($0, $29 >>> 0 < $25 >>> 1 >>> 0 ? ($32 >>> 0 < $5 >>> 0 ? $5 : $32) : $25);
   __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($0, $1, $2, $5);
   break;
  }
 } else {
  $12 = $0 + 4 | 0;
  $14 = (HEAP32[$12 >> 2] | 0) - $8 | 0;
  $15 = $5 >>> 0 > $14 >>> 0;
  $spec$select = $15 ? $1 + $14 | 0 : $2;
  $18 = $spec$select - $4 | 0;
  if ($18 | 0) _memmove($11 | 0, $1 | 0, $18 | 0) | 0;
  if ($15) {
   __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($0, $spec$select, $2, $5 - (HEAP32[$12 >> 2] | 0) + (HEAP32[$0 >> 2] | 0) | 0);
   break;
  } else {
   HEAP32[$12 >> 2] = $11 + $18;
   break;
  }
 } while (0);
 return;
}

function _stbi__build_fast_ac($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= 512) break;
  HEAP8[$5 >> 0] = HEAP8[(HEAP32[$3 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) >> 0] | 0;
  HEAP16[(HEAP32[$2 >> 2] | 0) + (HEAP32[$4 >> 2] << 1) >> 1] = 0;
  if ((HEAPU8[$5 >> 0] | 0 | 0) < 255) {
   HEAP32[$6 >> 2] = HEAPU8[(HEAP32[$3 >> 2] | 0) + 1024 + (HEAPU8[$5 >> 0] | 0) >> 0];
   HEAP32[$7 >> 2] = HEAP32[$6 >> 2] >> 4 & 15;
   HEAP32[$8 >> 2] = HEAP32[$6 >> 2] & 15;
   HEAP32[$9 >> 2] = HEAPU8[(HEAP32[$3 >> 2] | 0) + 1280 + (HEAPU8[$5 >> 0] | 0) >> 0];
   if (HEAP32[$8 >> 2] | 0) if (((HEAP32[$9 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0) <= 9) {
    HEAP32[$10 >> 2] = (HEAP32[$4 >> 2] << HEAP32[$9 >> 2] & 511) >> 9 - (HEAP32[$8 >> 2] | 0);
    HEAP32[$11 >> 2] = 1 << (HEAP32[$8 >> 2] | 0) - 1;
    if ((HEAP32[$10 >> 2] | 0) < (HEAP32[$11 >> 2] | 0)) HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((-1 << HEAP32[$8 >> 2]) + 1);
    if ((HEAP32[$10 >> 2] | 0) >= -128 & (HEAP32[$10 >> 2] | 0) <= 127) HEAP16[(HEAP32[$2 >> 2] | 0) + (HEAP32[$4 >> 2] << 1) >> 1] = (HEAP32[$10 >> 2] << 8) + (HEAP32[$7 >> 2] << 4) + ((HEAP32[$9 >> 2] | 0) + (HEAP32[$8 >> 2] | 0));
   }
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __sfons_render_draw($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy8 = 0, $10 = 0, $11 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy8 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 if (!((HEAP32[$5 >> 2] | 0) != 0 & (HEAP32[$6 >> 2] | 0) != 0 & (HEAP32[$7 >> 2] | 0) != 0 & (HEAP32[$8 >> 2] | 0) != 0 & (HEAP32[$9 >> 2] | 0) > 0)) ___assert_fail(41202, 24442, 1700, 41257);
 HEAP32[$10 >> 2] = HEAP32[$5 >> 2];
 _sgl_enable_texture();
 HEAP32[$$byval_copy8 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2];
 _sgl_texture($$byval_copy8);
 _sgl_push_pipeline();
 HEAP32[$$byval_copy8 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2];
 _sgl_load_pipeline($$byval_copy8);
 _sgl_begin_triangles();
 HEAP32[$11 >> 2] = 0;
 while (1) {
  if ((HEAP32[$11 >> 2] | 0) >= (HEAP32[$9 >> 2] | 0)) break;
  _sgl_v2f_t2f_c1i(+HEAPF32[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$11 >> 2] << 1) + 0 << 2) >> 2], +HEAPF32[(HEAP32[$6 >> 2] | 0) + ((HEAP32[$11 >> 2] << 1) + 1 << 2) >> 2], +HEAPF32[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$11 >> 2] << 1) + 0 << 2) >> 2], +HEAPF32[(HEAP32[$7 >> 2] | 0) + ((HEAP32[$11 >> 2] << 1) + 1 << 2) >> 2], HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[$11 >> 2] << 2) >> 2] | 0);
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
 }
 _sgl_end();
 _sgl_pop_pipeline();
 _sgl_disable_texture();
 STACKTOP = sp;
 return;
}

function _fons__allocAtlas($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $50 = 0, $57 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 >> 2] = _malloc(20) | 0;
 if (HEAP32[$7 >> 2] | 0) {
  $11 = HEAP32[$7 >> 2] | 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$11 + 8 >> 2] = 0;
  HEAP32[$11 + 12 >> 2] = 0;
  HEAP32[$11 + 16 >> 2] = 0;
  HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[$4 >> 2];
  HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] = HEAP32[$5 >> 2];
  $19 = _malloc((HEAP32[$6 >> 2] | 0) * 6 | 0) | 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] = $19;
  if (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) {
   _memset(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0, 0, (HEAP32[$6 >> 2] | 0) * 6 | 0) | 0;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] = 0;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] = HEAP32[$6 >> 2];
   HEAP16[HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] >> 1] = 0;
   HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + 2 >> 1] = 0;
   HEAP16[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 1] = HEAP32[$4 >> 2];
   $50 = (HEAP32[$7 >> 2] | 0) + 12 | 0;
   HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
   HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
   $57 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $57 | 0;
  }
 }
 if (HEAP32[$7 >> 2] | 0) _fons__deleteAtlas(HEAP32[$7 >> 2] | 0);
 HEAP32[$3 >> 2] = 0;
 $57 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $57 | 0;
}

function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp;
 $5 = HEAP32[$0 >> 2] | 0;
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0;
 $10 = HEAP32[$5 + -4 >> 2] | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $3;
 $14 = $4 + 16 | 0;
 $15 = $4 + 20 | 0;
 $16 = $4 + 24 | 0;
 $17 = $4 + 28 | 0;
 $18 = $4 + 32 | 0;
 $19 = $4 + 40 | 0;
 dest = $14;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0;
 HEAP8[$14 + 38 >> 0] = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
  HEAP32[$4 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 7]($10, $4, $8, $8, 1, 0);
  $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 7]($10, $4, $8, 1, 0);
  switch (HEAP32[$4 + 36 >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$16 >> 2] | 0) != 1) if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
   $$0 = 0;
   break;
  }
  $$0 = HEAP32[$14 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _stbtt__hheap_alloc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $3 = 0, $30 = 0, $34 = 0, $4 = 0, $48 = 0, $5 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 $14 = HEAP32[$4 >> 2] | 0;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$7 >> 2] = HEAP32[$14 + 4 >> 2];
  HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
  HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
  $59 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 do if (!(HEAP32[$14 + 8 >> 2] | 0)) {
  if ((HEAP32[$5 >> 2] | 0) >>> 0 < 32) $30 = 2e3; else $30 = (HEAP32[$5 >> 2] | 0) >>> 0 < 128 ? 800 : 100;
  HEAP32[$8 >> 2] = $30;
  $34 = 4 + (Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0) | 0;
  HEAP32[$9 >> 2] = _fons__tmpalloc($34, HEAP32[$6 >> 2] | 0) | 0;
  if (HEAP32[$9 >> 2] | 0) {
   HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
   HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$9 >> 2];
   HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] = HEAP32[$8 >> 2];
   break;
  }
  HEAP32[$3 >> 2] = 0;
  $59 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 } while (0);
 $48 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + -1;
 HEAP32[$3 >> 2] = (HEAP32[HEAP32[$4 >> 2] >> 2] | 0) + (Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) | 0);
 $59 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $59 | 0;
}

function _sapp_html5_fetch_dropped_file($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $28 = 0, $3 = 0, $35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP8[51192] & 1)) ___assert_fail(17083, 12505, 10401, 17200);
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17230, 12505, 10402, 17200);
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0)) ___assert_fail(17238, 12505, 10403, 17200);
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(17256, 12505, 10404, 17200);
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) >>> 0 <= 0) ___assert_fail(17276, 12505, 10405, 17200);
 HEAP32[$2 >> 2] = HEAP32[HEAP32[$1 >> 2] >> 2];
 HEAP32[$3 >> 2] = 0;
 if ((HEAP32[$2 >> 2] | 0) < 0) label = 13; else if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[12801] | 0)) label = 13;
 if ((label | 0) == 13) HEAP32[$3 >> 2] = 2;
 $28 = _sapp_html5_get_dropped_file_size(HEAP32[$2 >> 2] | 0) | 0;
 if ($28 >>> 0 > (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) >>> 0) HEAP32[$3 >> 2] = 1;
 $35 = HEAP32[$2 >> 2] | 0;
 if (HEAP32[$3 >> 2] | 0) {
  __sapp_emsc_invoke_fetch_cb($35, 0, HEAP32[$3 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0, 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  _sapp_js_fetch_dropped_file($35 | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __sg_row_pitch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $9 = sp + 12 | 0;
 $12 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 switch (HEAP32[$3 >> 2] | 0) {
 case 58:
 case 57:
 case 47:
 case 46:
 case 43:
  {
   HEAP32[$6 >> 2] = (((HEAP32[$4 >> 2] | 0) + 3 | 0) / 4 | 0) << 3;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) < 8 ? 8 : HEAP32[$6 >> 2] | 0;
   break;
  }
 case 61:
 case 60:
 case 59:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
 case 45:
 case 44:
  {
   HEAP32[$6 >> 2] = (((HEAP32[$4 >> 2] | 0) + 3 | 0) / 4 | 0) << 4;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) < 16 ? 16 : HEAP32[$6 >> 2] | 0;
   break;
  }
 case 56:
 case 54:
  {
   HEAP32[sp + 20 >> 2] = 16;
   HEAP32[sp + 16 >> 2] = 4;
   HEAP32[$9 >> 2] = (HEAP32[$4 >> 2] | 0) / 4 | 0;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) < 2 ? 2 : HEAP32[$9 >> 2] | 0;
   HEAP32[$6 >> 2] = HEAP32[$9 >> 2] << 3;
   break;
  }
 case 55:
 case 53:
  {
   HEAP32[sp + 8 >> 2] = 32;
   HEAP32[sp + 4 >> 2] = 2;
   HEAP32[$12 >> 2] = (HEAP32[$4 >> 2] | 0) / 4 | 0;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) < 2 ? 2 : HEAP32[$12 >> 2] | 0;
   HEAP32[$6 >> 2] = HEAP32[$12 >> 2] << 3;
   break;
  }
 default:
  HEAP32[$6 >> 2] = Math_imul(HEAP32[$4 >> 2] | 0, __sg_pixelformat_bytesize(HEAP32[$3 >> 2] | 0) | 0) | 0;
 }
 HEAP32[$6 >> 2] = __sg_roundup(HEAP32[$6 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$6 >> 2] | 0;
}

function _stbi__zexpand($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = HEAP32[$5 >> 2];
 if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0)) {
  HEAP32[$3 >> 2] = _stbi__err(44743) | 0;
  $65 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 }
 HEAP32[$8 >> 2] = (HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) - (HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0);
 $36 = (HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0) - (HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0) | 0;
 HEAP32[sp >> 2] = $36;
 HEAP32[$9 >> 2] = $36;
 while (1) {
  if (((HEAP32[$8 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0) <= (HEAP32[$9 >> 2] | 0)) break;
  HEAP32[$9 >> 2] = HEAP32[$9 >> 2] << 1;
 }
 HEAP32[$7 >> 2] = _realloc(HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
 if (!(HEAP32[$7 >> 2] | 0)) {
  HEAP32[$3 >> 2] = _stbi__err(43490) | 0;
  $65 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 } else {
  HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] = HEAP32[$7 >> 2];
  HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$8 >> 2] | 0);
  HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$9 >> 2] | 0);
  HEAP32[$3 >> 2] = 1;
  $65 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$add$i = 0, $$0$i$i$idx$i = 0, $$3 = 0, $10 = 0, $17 = 0, $22 = 0, $23 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) $$3 = $0; else {
  $5 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($5 | 0) == ($0 | 0)) $$3 = $0; else {
   $7 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($5, $1, $2) | 0;
   if (($7 | 0) == ($5 | 0)) $$3 = $5; else {
    $9 = $2 + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    if ((($10 - (HEAP32[$2 >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $0; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $10 + -24 | 0);
     $17 = HEAP32[$9 >> 2] | 0;
     $$0$i$i$idx$i = 0;
     while (1) {
      if (($$0$i$i$idx$i | 0) == -1) break;
      $$0$i$i$add$i = $$0$i$i$idx$i + -1 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17 + ($$0$i$i$add$i * 24 | 0) | 0);
      $$0$i$i$idx$i = $$0$i$i$add$i;
     }
     HEAP32[$9 >> 2] = $17 + -24;
     $22 = HEAP8[$3 + 11 >> 0] | 0;
     $23 = $22 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($17 + -48 | 0, $23 ? HEAP32[$3 >> 2] | 0 : $3, $23 ? HEAP32[$3 + 4 >> 2] | 0 : $22 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$3 = $7;
    }
   }
  }
 }
 STACKTOP = sp;
 return $$3 | 0;
}

function _stbtt__find_table($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = (_ttUSHORT((HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) + 4 | 0) | 0) & 65535;
 HEAP32[$8 >> 2] = (HEAP32[$5 >> 2] | 0) + 12;
 HEAP32[$9 >> 2] = 0;
 while (1) {
  if ((HEAP32[$9 >> 2] | 0) >= (HEAP32[$7 >> 2] | 0)) {
   label = 9;
   break;
  }
  HEAP32[$10 >> 2] = (HEAP32[$8 >> 2] | 0) + (HEAP32[$9 >> 2] << 4);
  if ((HEAPU8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0) == (HEAP8[HEAP32[$6 >> 2] >> 0] | 0)) if ((HEAPU8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + 1 >> 0] | 0) == (HEAP8[(HEAP32[$6 >> 2] | 0) + 1 >> 0] | 0)) if ((HEAPU8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + 2 >> 0] | 0) == (HEAP8[(HEAP32[$6 >> 2] | 0) + 2 >> 0] | 0)) if ((HEAPU8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + 3 >> 0] | 0) == (HEAP8[(HEAP32[$6 >> 2] | 0) + 3 >> 0] | 0)) {
   label = 7;
   break;
  }
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  HEAP32[$3 >> 2] = _ttULONG((HEAP32[$4 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + 8 | 0) | 0;
  $75 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 } else if ((label | 0) == 9) {
  HEAP32[$3 >> 2] = 0;
  $75 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 return 0;
}

function __sg_resolve_default_pass_action($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) != 0)) ___assert_fail(35699, 17628, 4125, 35710);
 dest = HEAP32[$3 >> 2] | 0;
 src = HEAP32[$2 >> 2] | 0;
 stop = dest + 104 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$4 >> 2] = 0;
 while (1) {
  $13 = HEAP32[$3 >> 2] | 0;
  if ((HEAP32[$4 >> 2] | 0) >= 4) break;
  if (!(HEAP32[$13 + 4 + ((HEAP32[$4 >> 2] | 0) * 20 | 0) >> 2] | 0)) {
   HEAP32[(HEAP32[$3 >> 2] | 0) + 4 + ((HEAP32[$4 >> 2] | 0) * 20 | 0) >> 2] = 1;
   HEAPF32[(HEAP32[$3 >> 2] | 0) + 4 + ((HEAP32[$4 >> 2] | 0) * 20 | 0) + 4 >> 2] = .5;
   HEAPF32[(HEAP32[$3 >> 2] | 0) + 4 + ((HEAP32[$4 >> 2] | 0) * 20 | 0) + 4 + 4 >> 2] = .5;
   HEAPF32[(HEAP32[$3 >> 2] | 0) + 4 + ((HEAP32[$4 >> 2] | 0) * 20 | 0) + 4 + 8 >> 2] = .5;
   HEAPF32[(HEAP32[$3 >> 2] | 0) + 4 + ((HEAP32[$4 >> 2] | 0) * 20 | 0) + 4 + 12 >> 2] = 1.0;
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 if (!(HEAP32[$13 + 84 >> 2] | 0)) {
  HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] = 1;
  HEAPF32[(HEAP32[$3 >> 2] | 0) + 84 + 4 >> 2] = 1.0;
 }
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 92 >> 2] | 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 92 >> 2] = 1;
 HEAP8[(HEAP32[$3 >> 2] | 0) + 92 + 4 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __sfetch_emsc_send_get_request($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0) if (HEAP32[(HEAP32[$3 >> 2] | 0) + 24 + 4 >> 2] | 0) {
  HEAP32[$4 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  do if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) >>> 0 > 0) {
   if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 32 + 20 >> 2] | 0) >>> 0 <= 0) ___assert_fail(21508, 21538, 1982, 21609);
   if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 32 + 16 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 32 + 20 >> 2] | 0) >>> 0) ___assert_fail(21639, 21538, 1983, 21609);
   HEAP32[$5 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 32 + 20 >> 2] | 0) - (HEAP32[(HEAP32[$3 >> 2] | 0) + 32 + 16 >> 2] | 0);
   if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) >>> 0) HEAP32[$5 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2];
   if ((HEAP32[$5 >> 2] | 0) >>> 0 > 0) {
    HEAP32[$4 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 32 + 16 >> 2];
    break;
   } else ___assert_fail(21698, 21538, 1988, 21609);
  } while (0);
  _sfetch_js_send_get_request(HEAP32[$2 >> 2] | 0, (HEAP32[$3 >> 2] | 0) + 208 | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 24 + 4 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 32 + 8 >> 2] = 2;
 HEAP8[(HEAP32[$3 >> 2] | 0) + 32 + 12 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function _stbi__tga_test($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = 0;
 _stbi__get8(HEAP32[$1 >> 2] | 0) | 0;
 HEAP32[$4 >> 2] = (_stbi__get8(HEAP32[$1 >> 2] | 0) | 0) & 255;
 do if ((HEAP32[$4 >> 2] | 0) <= 1) {
  HEAP32[$3 >> 2] = (_stbi__get8(HEAP32[$1 >> 2] | 0) | 0) & 255;
  $16 = HEAP32[$3 >> 2] | 0;
  if ((HEAP32[$4 >> 2] | 0) == 1) {
   if (($16 | 0) != 1 & (HEAP32[$3 >> 2] | 0) != 9) break;
   _stbi__skip(HEAP32[$1 >> 2] | 0, 4);
   HEAP32[$3 >> 2] = (_stbi__get8(HEAP32[$1 >> 2] | 0) | 0) & 255;
   if ((HEAP32[$3 >> 2] | 0) != 8 & (HEAP32[$3 >> 2] | 0) != 15 & (HEAP32[$3 >> 2] | 0) != 16 & (HEAP32[$3 >> 2] | 0) != 24 & (HEAP32[$3 >> 2] | 0) != 32) break;
   _stbi__skip(HEAP32[$1 >> 2] | 0, 4);
  } else {
   if (($16 | 0) != 2 & (HEAP32[$3 >> 2] | 0) != 3 & (HEAP32[$3 >> 2] | 0) != 10 & (HEAP32[$3 >> 2] | 0) != 11) break;
   _stbi__skip(HEAP32[$1 >> 2] | 0, 9);
  }
  if ((_stbi__get16le(HEAP32[$1 >> 2] | 0) | 0) >= 1) if ((_stbi__get16le(HEAP32[$1 >> 2] | 0) | 0) >= 1) {
   HEAP32[$3 >> 2] = (_stbi__get8(HEAP32[$1 >> 2] | 0) | 0) & 255;
   if (!((HEAP32[$4 >> 2] | 0) == 1 & (HEAP32[$3 >> 2] | 0) != 8 & (HEAP32[$3 >> 2] | 0) != 16)) if (!((HEAP32[$3 >> 2] | 0) != 8 & (HEAP32[$3 >> 2] | 0) != 15 & (HEAP32[$3 >> 2] | 0) != 16 & (HEAP32[$3 >> 2] | 0) != 24 & (HEAP32[$3 >> 2] | 0) != 32)) HEAP32[$2 >> 2] = 1;
  }
 } while (0);
 _stbi__rewind(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _stbi__load_and_postprocess_8bit($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $36 = 0, $44 = 0, $5 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$12 >> 2] = _stbi__load_main(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, $11, 8) | 0;
 if (!(HEAP32[$12 >> 2] | 0)) {
  HEAP32[$5 >> 2] = 0;
  $53 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $53 | 0;
 }
 if ((HEAP32[$11 >> 2] | 0) != 8) {
  if ((HEAP32[$11 >> 2] | 0) != 16) ___assert_fail(43366, 43392, 1128, 43458);
  if (!(HEAP32[$10 >> 2] | 0)) $36 = HEAP32[HEAP32[$9 >> 2] >> 2] | 0; else $36 = HEAP32[$10 >> 2] | 0;
  HEAP32[$12 >> 2] = _stbi__convert_16_to_8(HEAP32[$12 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[HEAP32[$8 >> 2] >> 2] | 0, $36) | 0;
  HEAP32[$11 >> 2] = 8;
 }
 if (0) {
  if (HEAP32[$10 >> 2] | 0) $44 = HEAP32[$10 >> 2] | 0; else $44 = HEAP32[HEAP32[$9 >> 2] >> 2] | 0;
  HEAP32[$13 >> 2] = $44;
  _stbi__vertical_flip(HEAP32[$12 >> 2] | 0, HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[HEAP32[$8 >> 2] >> 2] | 0, HEAP32[$13 >> 2] | 0);
 }
 HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
 $53 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $53 | 0;
}

function __ZN10Delaunator12add_triangleEmmmmmm($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 $10 = $0 + 4 | 0;
 $11 = $0 + 8 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $15 = $12 - (HEAP32[$10 >> 2] | 0) >> 2;
 $$cast = $12;
 $16 = $0 + 12 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 if (($17 | 0) == ($$cast | 0)) {
  __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($10, $7);
  $21 = HEAP32[$11 >> 2] | 0;
  $22 = HEAP32[$16 >> 2] | 0;
 } else {
  HEAP32[$$cast >> 2] = $1;
  $19 = $$cast + 4 | 0;
  HEAP32[$11 >> 2] = $19;
  $21 = $19;
  $22 = $17;
 }
 if (($21 | 0) == ($22 | 0)) {
  __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($10, $8);
  $26 = HEAP32[$11 >> 2] | 0;
  $27 = HEAP32[$16 >> 2] | 0;
 } else {
  HEAP32[$21 >> 2] = HEAP32[$8 >> 2];
  $24 = $21 + 4 | 0;
  HEAP32[$11 >> 2] = $24;
  $26 = $24;
  $27 = $22;
 }
 if (($26 | 0) == ($27 | 0)) __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($10, $9); else {
  HEAP32[$26 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$11 >> 2] = $26 + 4;
 }
 __ZN10Delaunator4linkEmm($0, $15, $4);
 __ZN10Delaunator4linkEmm($0, $15 + 1 | 0, $5);
 __ZN10Delaunator4linkEmm($0, $15 + 2 | 0, $6);
 STACKTOP = sp;
 return $15 | 0;
}

function __sapp_emsc_register_eventhandlers() {
 _emscripten_set_mousedown_callback_on_thread(51220, 0, 1, 9, 2) | 0;
 _emscripten_set_mouseup_callback_on_thread(51220, 0, 1, 9, 2) | 0;
 _emscripten_set_mousemove_callback_on_thread(51220, 0, 1, 9, 2) | 0;
 _emscripten_set_mouseenter_callback_on_thread(51220, 0, 1, 9, 2) | 0;
 _emscripten_set_mouseleave_callback_on_thread(51220, 0, 1, 9, 2) | 0;
 _emscripten_set_wheel_callback_on_thread(51220, 0, 1, 10, 2) | 0;
 _emscripten_set_keydown_callback_on_thread(2, 0, 1, 11, 2) | 0;
 _emscripten_set_keyup_callback_on_thread(2, 0, 1, 11, 2) | 0;
 _emscripten_set_keypress_callback_on_thread(2, 0, 1, 11, 2) | 0;
 _emscripten_set_touchstart_callback_on_thread(51220, 0, 1, 12, 2) | 0;
 _emscripten_set_touchmove_callback_on_thread(51220, 0, 1, 12, 2) | 0;
 _emscripten_set_touchend_callback_on_thread(51220, 0, 1, 12, 2) | 0;
 _emscripten_set_touchcancel_callback_on_thread(51220, 0, 1, 12, 2) | 0;
 _emscripten_set_pointerlockchange_callback_on_thread(1, 0, 1, 13, 2) | 0;
 _emscripten_set_pointerlockerror_callback_on_thread(1, 0, 1, 14, 2) | 0;
 _sapp_js_add_beforeunload_listener();
 if (HEAP8[51180] & 1) _sapp_js_add_clipboard_listener();
 if (!(HEAP8[51192] & 1)) {
  _emscripten_set_webglcontextlost_callback_on_thread(51220, 0, 1, 15, 2) | 0;
  _emscripten_set_webglcontextrestored_callback_on_thread(51220, 0, 1, 15, 2) | 0;
  return;
 }
 _sapp_js_add_dragndrop_listeners(51221);
 _emscripten_set_webglcontextlost_callback_on_thread(51220, 0, 1, 15, 2) | 0;
 _emscripten_set_webglcontextrestored_callback_on_thread(51220, 0, 1, 15, 2) | 0;
 return;
}

function __sapp_emsc_unregister_eventhandlers() {
 _emscripten_set_mousedown_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_mouseup_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_mousemove_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_mouseenter_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_mouseleave_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_wheel_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_keydown_callback_on_thread(2, 0, 1, 0, 2) | 0;
 _emscripten_set_keyup_callback_on_thread(2, 0, 1, 0, 2) | 0;
 _emscripten_set_keypress_callback_on_thread(2, 0, 1, 0, 2) | 0;
 _emscripten_set_touchstart_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_touchmove_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_touchend_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_touchcancel_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_pointerlockchange_callback_on_thread(1, 0, 1, 0, 2) | 0;
 _emscripten_set_pointerlockerror_callback_on_thread(1, 0, 1, 0, 2) | 0;
 _sapp_js_remove_beforeunload_listener();
 if (HEAP8[51180] & 1) _sapp_js_remove_clipboard_listener();
 if (!(HEAP8[51192] & 1)) {
  _emscripten_set_webglcontextlost_callback_on_thread(51220, 0, 1, 0, 2) | 0;
  _emscripten_set_webglcontextrestored_callback_on_thread(51220, 0, 1, 0, 2) | 0;
  return;
 }
 _sapp_js_remove_dragndrop_listeners(51221);
 _emscripten_set_webglcontextlost_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 _emscripten_set_webglcontextrestored_callback_on_thread(51220, 0, 1, 0, 2) | 0;
 return;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $9 = __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 3;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEEC2EmmS9_($2, $15 >> 4 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 4, $0 + 12 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAP32[$25 >> 2] = 0;
  HEAP32[$25 + 4 >> 2] = 0;
  HEAP32[$25 + 8 >> 2] = 0;
  HEAP32[$25 + 12 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$24 >> 2] = $25 + 16;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $2);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$sink = 0.0, $$sink10 = 0.0, $$sink12 = 0.0, $29 = 0, $30 = 0, $5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp;
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$5 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$5 + 16 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$5 + 20 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$5 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 switch ($4 | 0) {
 case 0:
  {
   $$sink = 0.0;
   $$sink10 = 0.0;
   $$sink12 = 1.0;
   label = 4;
   break;
  }
 case 1:
  {
   $$sink = 0.0;
   $$sink10 = 1.0;
   $$sink12 = 0.0;
   label = 4;
   break;
  }
 case 2:
  {
   $$sink = 1.0;
   $$sink10 = 0.0;
   $$sink12 = 0.0;
   label = 4;
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 4) {
  HEAPF32[$5 + 32 >> 2] = $$sink12;
  HEAPF32[$5 + 36 >> 2] = $$sink10;
  HEAPF32[$5 + 40 >> 2] = $$sink;
 }
 $29 = $0 + 16 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if (($30 | 0) == (HEAP32[$0 + 20 >> 2] | 0)) __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0 + 12 | 0, $5); else {
  dest = $30;
  src = $5;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 44;
 }
 STACKTOP = sp;
 return;
}

function __sg_validate_apply_uniforms($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $57 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!((HEAP32[$3 >> 2] | 0) == 0 | (HEAP32[$3 >> 2] | 0) == 1)) ___assert_fail(36447, 17628, 13745, 36520);
 if (!((HEAP32[$4 >> 2] | 0) >= 0 & (HEAP32[$4 >> 2] | 0) < 4)) ___assert_fail(18925, 17628, 13746, 36520);
 __sg_validate_begin();
 __sg_validate((HEAP32[539116] | 0) != 0, 80);
 HEAP32[$6 >> 2] = __sg_lookup_pipeline(2156476, HEAP32[539116] | 0) | 0;
 if (!(HEAP32[$6 >> 2] | 0)) ___assert_fail(36548, 17628, 13750, 36520);
 if ((HEAP32[HEAP32[$6 >> 2] >> 2] | 0) != (HEAP32[539116] | 0)) ___assert_fail(36548, 17628, 13750, 36520);
 if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(18663, 17628, 13751, 36520);
 if ((HEAP32[HEAP32[(HEAP32[$6 >> 2] | 0) + 84 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[$7 >> 2] = (HEAP32[(HEAP32[$6 >> 2] | 0) + 84 >> 2] | 0) + 12 + ((HEAP32[$3 >> 2] | 0) * 120 | 0);
  __sg_validate((HEAP32[$4 >> 2] | 0) < (HEAP32[HEAP32[$7 >> 2] >> 2] | 0), 81);
  __sg_validate((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 + (HEAP32[$4 >> 2] << 2) >> 2] | 0) >>> 0, 82);
  $57 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $57 | 0;
 } else ___assert_fail(18663, 17628, 13751, 36520);
 return 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp;
 $2 = $0 + 4 | 0;
 $7 = (((HEAP32[$2 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $8 = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0) | 0;
 if ($8 >>> 0 < $7 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $13 = HEAP32[$0 >> 2] | 0;
  $15 = ((HEAP32[$0 + 8 >> 2] | 0) - $13 | 0) / 24 | 0;
  $18 = $15 << 1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEEC2EmmS6_($1, $15 >>> 0 < $8 >>> 1 >>> 0 ? ($18 >>> 0 < $7 >>> 0 ? $7 : $18) : $8, ((HEAP32[$2 >> 2] | 0) - $13 | 0) / 24 | 0, $0 + 12 | 0);
  $23 = $1 + 8 | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  HEAP32[$24 >> 2] = 0;
  HEAP32[$24 + 4 >> 2] = 0;
  HEAP32[$24 + 8 >> 2] = 0;
  HEAP32[$24 + 12 >> 2] = 0;
  HEAP32[$24 + 16 >> 2] = 0;
  HEAP32[$24 + 20 >> 2] = 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($24);
  HEAP32[$23 >> 2] = $24 + 24;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEED2Ev($1);
  STACKTOP = sp;
  return;
 }
}

function __sfetch_invoke_response_callback($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 48 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 dest = $2;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = HEAP32[HEAP32[$1 >> 2] >> 2];
 HEAP8[$2 + 4 >> 0] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) == 2 & 1;
 HEAP8[$2 + 5 >> 0] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) == 4 & 1;
 HEAP8[$2 + 6 >> 0] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) == 5 & 1;
 HEAP8[$2 + 7 >> 0] = HEAP8[(HEAP32[$1 >> 2] | 0) + 56 + 16 >> 0] & 1;
 HEAP8[$2 + 8 >> 0] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) == 6 & 1;
 HEAP8[$2 + 9 >> 0] = HEAP8[(HEAP32[$1 >> 2] | 0) + 56 + 2 >> 0] & 1;
 HEAP32[$2 + 12 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 56 + 12 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2];
 HEAP32[$2 + 20 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2];
 HEAP32[$2 + 24 >> 2] = (HEAP32[$1 >> 2] | 0) + 208;
 HEAP32[$2 + 28 >> 2] = (HEAP32[$1 >> 2] | 0) + 56 + 24;
 HEAP32[$2 + 32 >> 2] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 56 + 4 >> 2] | 0) - (HEAP32[(HEAP32[$1 >> 2] | 0) + 56 + 8 >> 2] | 0);
 HEAP32[$2 + 36 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 56 + 8 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2];
 HEAP32[$2 + 44 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 24 + 4 >> 2];
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 31]($2);
 STACKTOP = sp;
 return;
}

function _stbtt__GetGlyphInfoT2($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $6 = sp + 76 | 0;
 $7 = sp + 72 | 0;
 $8 = sp + 68 | 0;
 $9 = sp + 64 | 0;
 $10 = sp + 60 | 0;
 $11 = sp + 56 | 0;
 $12 = sp + 8 | 0;
 $13 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = $5;
 dest = $12;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$12 >> 2] = 1;
 HEAP32[$13 >> 2] = _stbtt__run_charstring(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, $12) | 0;
 if (!(HEAP32[$8 >> 2] | 0)) {
  $43 = HEAP32[$13 >> 2] | 0;
  $44 = ($43 | 0) != 0;
  $45 = $12 + 44 | 0;
  $46 = HEAP32[$45 >> 2] | 0;
  $47 = $44 ? $46 : 0;
  STACKTOP = sp;
  return $47 | 0;
 }
 HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[$13 >> 2] | 0 ? HEAP32[$12 + 24 >> 2] | 0 : 0;
 HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$13 >> 2] | 0 ? HEAP32[$12 + 32 >> 2] | 0 : 0;
 HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[$13 >> 2] | 0 ? HEAP32[$12 + 28 >> 2] | 0 : 0;
 HEAP32[HEAP32[$11 >> 2] >> 2] = HEAP32[$13 >> 2] | 0 ? HEAP32[$12 + 36 >> 2] | 0 : 0;
 $43 = HEAP32[$13 >> 2] | 0;
 $44 = ($43 | 0) != 0;
 $45 = $12 + 44 | 0;
 $46 = HEAP32[$45 >> 2] | 0;
 $47 = $44 ? $46 : 0;
 STACKTOP = sp;
 return $47 | 0;
}

function __sg_pool_free_index($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if ((HEAP32[$3 >> 2] | 0) <= 0) ___assert_fail(26221, 17628, 12807, 26571);
 if ((HEAP32[$3 >> 2] | 0) >= (HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) ___assert_fail(26221, 17628, 12807, 26571);
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(26094, 17628, 12808, 26571);
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(25538, 17628, 12809, 26571);
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) ___assert_fail(26591, 17628, 12810, 26571);
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$4 >> 2] << 2) >> 2] | 0) == (HEAP32[$3 >> 2] | 0)) {
   label = 13;
   break;
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) ___assert_fail(26620, 17628, 12814, 26571);
 $38 = HEAP32[$3 >> 2] | 0;
 $41 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0;
 $43 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
 $44 = HEAP32[$43 >> 2] | 0;
 HEAP32[$43 >> 2] = $44 + 1;
 HEAP32[$41 + ($44 << 2) >> 2] = $38;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) <= ((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) - 1 | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(26654, 17628, 12818, 26571);
}

function _stbi__free_jpeg_components($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = 0;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >= (HEAP32[$4 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 48 >> 2] | 0) {
   _free(HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 48 >> 2] | 0);
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 48 >> 2] = 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 44 >> 2] = 0;
  }
  if (HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 52 >> 2] | 0) {
   _free(HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 52 >> 2] | 0);
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 52 >> 2] = 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 60 >> 2] = 0;
  }
  if (HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 56 >> 2] | 0) {
   _free(HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 56 >> 2] | 0);
   HEAP32[(HEAP32[$3 >> 2] | 0) + 18076 + ((HEAP32[$6 >> 2] | 0) * 72 | 0) + 56 >> 2] = 0;
  }
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function __sgl_pool_free_index($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if ((HEAP32[$3 >> 2] | 0) <= 0) ___assert_fail(26221, 19399, 2130, 37913);
 if ((HEAP32[$3 >> 2] | 0) >= (HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) ___assert_fail(26221, 19399, 2130, 37913);
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(26094, 19399, 2131, 37913);
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(25538, 19399, 2132, 37913);
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) ___assert_fail(26591, 19399, 2133, 37913);
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$4 >> 2] << 2) >> 2] | 0) == (HEAP32[$3 >> 2] | 0)) {
   label = 13;
   break;
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) ___assert_fail(26620, 19399, 2137, 37913);
 $38 = HEAP32[$3 >> 2] | 0;
 $41 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0;
 $43 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
 $44 = HEAP32[$43 >> 2] | 0;
 HEAP32[$43 >> 2] = $44 + 1;
 HEAP32[$41 + ($44 << 2) >> 2] = $38;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) <= ((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) - 1 | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(26654, 19399, 2141, 37913);
}

function _sg_setup($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17623, 17628, 14287, 17697);
 if (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) ___assert_fail(17706, 17628, 14288, 17697);
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 140 >> 2] | 0)) {
  _memset(2156304, 0, 1352) | 0;
  _memcpy(2156308, HEAP32[$1 >> 2] | 0, 144) | 0;
  HEAP32[539087] = (HEAP32[539087] | 0) == 0 ? 23 : HEAP32[539087] | 0;
  HEAP32[539088] = (HEAP32[539088] | 0) == 0 ? 42 : HEAP32[539088] | 0;
  HEAP32[539089] = (HEAP32[539089] | 0) == 0 ? 1 : HEAP32[539089] | 0;
  HEAP32[539078] = (HEAP32[539078] | 0) == 0 ? 128 : HEAP32[539078] | 0;
  HEAP32[539079] = (HEAP32[539079] | 0) == 0 ? 128 : HEAP32[539079] | 0;
  HEAP32[539080] = (HEAP32[539080] | 0) == 0 ? 32 : HEAP32[539080] | 0;
  HEAP32[539081] = (HEAP32[539081] | 0) == 0 ? 64 : HEAP32[539081] | 0;
  HEAP32[539082] = (HEAP32[539082] | 0) == 0 ? 16 : HEAP32[539082] | 0;
  HEAP32[539083] = (HEAP32[539083] | 0) == 0 ? 16 : HEAP32[539083] | 0;
  HEAP32[539084] = (HEAP32[539084] | 0) == 0 ? 4194304 : HEAP32[539084] | 0;
  HEAP32[539085] = (HEAP32[539085] | 0) == 0 ? 8388608 : HEAP32[539085] | 0;
  HEAP32[539086] = (HEAP32[539086] | 0) == 0 ? 64 : HEAP32[539086] | 0;
  __sg_setup_pools(2156476, 2156308);
  HEAP32[539113] = 1;
  __sg_setup_backend(2156308);
  HEAP8[2156304] = 1;
  HEAP32[sp >> 2] = _sg_setup_context() | 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(17706, 17628, 14288, 17697);
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $9 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $9 = $1 + 52 | 0;
  $10 = HEAP8[$9 >> 0] | 0;
  $11 = $1 + 53 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  $15 = HEAP32[$0 + 12 >> 2] | 0;
  $16 = $0 + 16 + ($15 << 3) | 0;
  HEAP8[$9 >> 0] = 0;
  HEAP8[$11 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5);
  L4 : do if (($15 | 0) > 1) {
   $19 = $1 + 24 | 0;
   $20 = $0 + 8 | 0;
   $21 = $1 + 54 | 0;
   $$0 = $0 + 24 | 0;
   do {
    if (HEAP8[$21 >> 0] | 0) break L4;
    if (!(HEAP8[$9 >> 0] | 0)) {
     if (HEAP8[$11 >> 0] | 0) if (!(HEAP32[$20 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[$19 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[$20 >> 2] & 2)) break L4;
    }
    HEAP8[$9 >> 0] = 0;
    HEAP8[$11 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5);
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $16 >>> 0);
  } while (0);
  HEAP8[$9 >> 0] = $10;
  HEAP8[$11 >> 0] = $12;
 }
 return;
}

function __sgl_ortho($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $7 = sp + 88 | 0;
 $8 = sp + 84 | 0;
 $9 = sp + 80 | 0;
 $10 = sp + 76 | 0;
 $11 = sp + 72 | 0;
 $12 = sp + 68 | 0;
 $13 = sp + 64 | 0;
 $14 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAPF32[$8 >> 2] = $1;
 HEAPF32[$9 >> 2] = $2;
 HEAPF32[$10 >> 2] = $3;
 HEAPF32[$11 >> 2] = $4;
 HEAPF32[$12 >> 2] = $5;
 HEAPF32[$13 >> 2] = $6;
 HEAPF32[$14 >> 2] = 2.0 / (+HEAPF32[$9 >> 2] - +HEAPF32[$8 >> 2]);
 HEAPF32[$14 + 16 >> 2] = 0.0;
 HEAPF32[$14 + 32 >> 2] = 0.0;
 HEAPF32[$14 + 48 >> 2] = -(+HEAPF32[$9 >> 2] + +HEAPF32[$8 >> 2]) / (+HEAPF32[$9 >> 2] - +HEAPF32[$8 >> 2]);
 HEAPF32[$14 + 4 >> 2] = 0.0;
 HEAPF32[$14 + 16 + 4 >> 2] = 2.0 / (+HEAPF32[$11 >> 2] - +HEAPF32[$10 >> 2]);
 HEAPF32[$14 + 32 + 4 >> 2] = 0.0;
 HEAPF32[$14 + 48 + 4 >> 2] = -(+HEAPF32[$11 >> 2] + +HEAPF32[$10 >> 2]) / (+HEAPF32[$11 >> 2] - +HEAPF32[$10 >> 2]);
 HEAPF32[$14 + 8 >> 2] = 0.0;
 HEAPF32[$14 + 16 + 8 >> 2] = 0.0;
 HEAPF32[$14 + 32 + 8 >> 2] = -2.0 / (+HEAPF32[$13 >> 2] - +HEAPF32[$12 >> 2]);
 HEAPF32[$14 + 48 + 8 >> 2] = -(+HEAPF32[$13 >> 2] + +HEAPF32[$12 >> 2]) / (+HEAPF32[$13 >> 2] - +HEAPF32[$12 >> 2]);
 HEAPF32[$14 + 12 >> 2] = 0.0;
 HEAPF32[$14 + 16 + 12 >> 2] = 0.0;
 HEAPF32[$14 + 32 + 12 >> 2] = 0.0;
 HEAPF32[$14 + 48 + 12 >> 2] = 1.0;
 __sgl_mul(HEAP32[$7 >> 2] | 0, $14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp;
 if ((-18 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
 if ($1 >>> 0 < 2147483623) {
  $16 = $2 + $1 | 0;
  $17 = $1 << 1;
  $$sroa$speculated = $16 >>> 0 < $17 >>> 0 ? $17 : $16;
  $22 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $22 = -17;
 $23 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($22) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23, $25, $4) | 0;
 if ($6 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23 + $4 | 0, $7, $6) | 0;
 $28 = $3 - $5 | 0;
 $29 = $28 - $4 | 0;
 if ($29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23 + $4 + $6 | 0, $25 + $4 + $5 | 0, $29) | 0;
 if (($1 | 0) != 10) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($25);
 HEAP32[$0 >> 2] = $23;
 HEAP32[$0 + 8 >> 2] = $22 | -2147483648;
 $38 = $28 + $6 | 0;
 HEAP32[$0 + 4 >> 2] = $38;
 HEAP8[$8 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($23 + $38 | 0, $8);
 STACKTOP = sp;
 return;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $34 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $0 = sp + 36 | 0;
 $1 = ___cxa_get_globals_fast() | 0;
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 | 0) {
   $7 = $3 + 48 | 0;
   $9 = HEAP32[$7 >> 2] | 0;
   $12 = HEAP32[$7 + 4 >> 2] | 0;
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 47249;
    _abort_message(47199, $vararg_buffer7);
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) $22 = HEAP32[$3 + 44 >> 2] | 0; else $22 = $3 + 80 | 0;
   HEAP32[$0 >> 2] = $22;
   $23 = HEAP32[$3 >> 2] | 0;
   $25 = HEAP32[$23 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[2834] | 0) + 16 >> 2] & 15](11336, $23, $0) | 0) {
    $30 = HEAP32[$0 >> 2] | 0;
    $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 3]($30) | 0;
    HEAP32[$vararg_buffer >> 2] = 47249;
    HEAP32[$vararg_buffer + 4 >> 2] = $25;
    HEAP32[$vararg_buffer + 8 >> 2] = $34;
    _abort_message(47113, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = 47249;
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25;
    _abort_message(47158, $vararg_buffer3);
   }
  }
 }
 _abort_message(47237, $vararg_buffer10);
}

function __sfetch_validate_request($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 do if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) {
  _puts(38408) | 0;
  HEAP8[$2 >> 0] = 0;
 } else {
  if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0)) {
   _puts(38459) | 0;
   HEAP8[$2 >> 0] = 0;
   break;
  }
  if ((_strlen(HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) | 0) >>> 0 >= 1023) {
   _puts(38507) | 0;
   HEAP8[$2 >> 0] = 0;
   break;
  }
  if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0)) {
   _puts(38588) | 0;
   HEAP8[$2 >> 0] = 0;
   break;
  }
  if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0) >>> 0) {
   _puts(38639) | 0;
   HEAP8[$2 >> 0] = 0;
   break;
  }
  if (HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0)) {
   _puts(38716) | 0;
   HEAP8[$2 >> 0] = 0;
   break;
  }
  if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0)) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) >>> 0 > 0) {
   _puts(38807) | 0;
   HEAP8[$2 >> 0] = 0;
   break;
  }
  if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) >>> 0 > 128) {
   _puts(38898) | 0;
   HEAP8[$2 >> 0] = 0;
   break;
  } else {
   HEAP8[$2 >> 0] = 1;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP8[$2 >> 0] & 1 | 0;
}

function _stbi__zhuffman_decode_slowpath($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $50 = 0, $55 = 0, $6 = 0, $64 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$7 >> 2] = _stbi__bit_reverse(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0, 16) | 0;
 HEAP32[$6 >> 2] = 10;
 while (1) {
  $19 = HEAP32[$6 >> 2] | 0;
  if ((HEAP32[$7 >> 2] | 0) < (HEAP32[(HEAP32[$4 >> 2] | 0) + 1056 + (HEAP32[$6 >> 2] << 2) >> 2] | 0)) break;
  HEAP32[$6 >> 2] = $19 + 1;
 }
 if (($19 | 0) == 16) {
  HEAP32[$2 >> 2] = -1;
  $64 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 HEAP32[$5 >> 2] = (HEAP32[$7 >> 2] >> 16 - (HEAP32[$6 >> 2] | 0)) - (HEAPU16[(HEAP32[$4 >> 2] | 0) + 1024 + (HEAP32[$6 >> 2] << 1) >> 1] | 0) + (HEAPU16[(HEAP32[$4 >> 2] | 0) + 1124 + (HEAP32[$6 >> 2] << 1) >> 1] | 0);
 if ((HEAPU8[(HEAP32[$4 >> 2] | 0) + 1156 + (HEAP32[$5 >> 2] | 0) >> 0] | 0 | 0) != (HEAP32[$6 >> 2] | 0)) ___assert_fail(44763, 43392, 3991, 44779);
 $50 = (HEAP32[$3 >> 2] | 0) + 12 | 0;
 HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) >>> (HEAP32[$6 >> 2] | 0);
 $55 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) - (HEAP32[$6 >> 2] | 0);
 HEAP32[$2 >> 2] = HEAPU16[(HEAP32[$4 >> 2] | 0) + 1444 + (HEAP32[$5 >> 2] << 1) >> 1];
 $64 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $64 | 0;
}

function __sg_gl_draw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = HEAP32[539407];
 HEAP32[$7 >> 2] = HEAP32[539406];
 if (HEAP32[$6 >> 2] | 0) {
  HEAP32[$8 >> 2] = (HEAP32[$6 >> 2] | 0) == 5123 ? 2 : 4;
  HEAP32[$9 >> 2] = HEAP32[539405];
  $21 = Math_imul(HEAP32[$3 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
  HEAP32[$10 >> 2] = $21 + (HEAP32[$9 >> 2] | 0);
  if ((HEAP32[$5 >> 2] | 0) == 1) {
   _glDrawElements(HEAP32[$7 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
  if (!(HEAP8[2156600] & 1)) {
   STACKTOP = sp;
   return;
  }
  _glDrawElementsInstancedANGLE(HEAP32[$7 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$5 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  if ((HEAP32[$5 >> 2] | 0) == 1) {
   _glDrawArrays(HEAP32[$7 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
  if (!(HEAP8[2156600] & 1)) {
   STACKTOP = sp;
   return;
  }
  _glDrawArraysInstancedANGLE(HEAP32[$7 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $9 = 0;
 $2 = $1 & 255;
 L1 : do if (!$2) $$0 = $0 + (_strlen($0) | 0) | 0; else {
  if (!($0 & 3)) $$030$lcssa = $0; else {
   $9 = $1 & 255;
   $$03039 = $0;
   while (1) {
    $10 = HEAP8[$$03039 >> 0] | 0;
    if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $9 << 24 >> 24) {
     $$0 = $$03039;
     break L1;
    }
    $13 = $$03039 + 1 | 0;
    if (!($13 & 3)) {
     $$030$lcssa = $13;
     break;
    } else $$03039 = $13;
   }
  }
  $17 = Math_imul($2, 16843009) | 0;
  $18 = HEAP32[$$030$lcssa >> 2] | 0;
  L10 : do if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
   $$02936 = $$030$lcssa;
   $25 = $18;
   while (1) {
    $24 = $25 ^ $17;
    if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
     $$029$lcssa = $$02936;
     break L10;
    }
    $31 = $$02936 + 4 | 0;
    $25 = HEAP32[$31 >> 2] | 0;
    if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
     $$029$lcssa = $31;
     break;
    } else $$02936 = $31;
   }
  } else $$029$lcssa = $$030$lcssa; while (0);
  $38 = $1 & 255;
  $$1 = $$029$lcssa;
  while (1) {
   $39 = HEAP8[$$1 >> 0] | 0;
   if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
    $$0 = $$1;
    break;
   } else $$1 = $$1 + 1 | 0;
  }
 } while (0);
 return $$0 | 0;
}

function _sg_update_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 15010, 19148);
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(18980, 17628, 15011, 19148);
 if (!(HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) ___assert_fail(18980, 17628, 15011, 19148);
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(18980, 17628, 15011, 19148);
 HEAP32[$3 >> 2] = __sg_lookup_buffer(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$3 >> 2] | 0 ? (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 0 : 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 if (!(__sg_validate_update_buffer(HEAP32[$3 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) >>> 0) ___assert_fail(19165, 17628, 15015, 19148);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 20 >> 2] | 0) == (HEAP32[539113] | 0)) ___assert_fail(19201, 17628, 15017, 19148);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 24 >> 2] | 0) == (HEAP32[539113] | 0)) ___assert_fail(19248, 17628, 15019, 19148);
 __sg_update_buffer(HEAP32[$3 >> 2] | 0, HEAP32[$2 >> 2] | 0);
 HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 20 >> 2] = HEAP32[539113];
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $12 = 0, $17 = 0, $21 = 0, $23 = 0, $24 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) $12 = HEAP32[$0 + 4 >> 2] | 0; else $12 = $6 & 255;
 if ($12 >>> 0 < $1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
 if ($7) $17 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $17 = 10;
 if (($17 - $12 | 0) >>> 0 < $3 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $17, $12 + $3 - $17 | 0, $12, $1, 0, $3, $2); else if ($3 | 0) {
  if ($7) $24 = HEAP32[$0 >> 2] | 0; else $24 = $0;
  $21 = $12 - $1 | 0;
  $23 = $24 + $1 | 0;
  if (!$21) $$1 = $2; else {
   __ZNSt3__211char_traitsIcE4moveEPcPKcm($23 + $3 | 0, $23, $21) | 0;
   $$1 = $23 >>> 0 <= $2 >>> 0 & ($24 + $12 | 0) >>> 0 > $2 >>> 0 ? $2 + $3 | 0 : $2;
  }
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($23, $$1, $3) | 0;
  $30 = $12 + $3 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $30; else HEAP8[$5 >> 0] = $30;
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($24 + $30 | 0, $4);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $$0$i = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($2 | 0)) break;
  $7 = HEAP32[$5 >> 2] | 0;
  $8 = $7 + -16 | 0;
  $9 = $$0$i + -16 | 0;
  HEAP32[$8 >> 2] = 0;
  $11 = $7 + -12 | 0;
  HEAP32[$11 >> 2] = 0;
  $12 = $7 + -8 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$7 + -4 >> 2] = HEAP32[$$0$i + -4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  $16 = $$0$i + -12 | 0;
  HEAP32[$11 >> 2] = HEAP32[$16 >> 2];
  $18 = $$0$i + -8 | 0;
  HEAP32[$12 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$18 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -16;
  $$0$i = $9;
 }
 $22 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $22;
 $24 = $1 + 8 | 0;
 $25 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$24 >> 2] = $25;
 $27 = $0 + 8 | 0;
 $28 = $1 + 12 | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$28 >> 2] = $29;
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISC_EERKT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$024 = 0, $$026 = 0, $$1 = 0, $$125$in = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
 $3 = $0 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = __ZNKSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE10__root_ptrEv($0) | 0;
 do if (!$4) {
  HEAP32[$1 >> 2] = $3;
  $$026 = $3;
 } else {
  $$0 = $5;
  $$024 = $4;
  while (1) {
   $7 = $$024 + 16 | 0;
   if (__ZNK13TPPLPartition12ScanLineEdgeltERKS0_($2, $7) | 0) {
    $9 = HEAP32[$$024 >> 2] | 0;
    if (!$9) {
     label = 5;
     break;
    } else {
     $$1 = $$024;
     $$125$in = $9;
    }
   } else {
    if (!(__ZNK13TPPLPartition12ScanLineEdgeltERKS0_($7, $2) | 0)) {
     label = 9;
     break;
    }
    $12 = $$024 + 4 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    if (!$13) {
     label = 8;
     break;
    } else {
     $$1 = $12;
     $$125$in = $13;
    }
   }
   $$0 = $$1;
   $$024 = $$125$in;
  }
  if ((label | 0) == 5) {
   HEAP32[$1 >> 2] = $$024;
   $$026 = $$024;
   break;
  } else if ((label | 0) == 8) {
   HEAP32[$1 >> 2] = $$024;
   $$026 = $12;
   break;
  } else if ((label | 0) == 9) {
   HEAP32[$1 >> 2] = $$024;
   $$026 = $$0;
   break;
  }
 } while (0);
 return $$026 | 0;
}

function __sg_init_pool($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $19 = 0, $2 = 0, $3 = 0, $32 = 0, $4 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) >= 1)) ___assert_fail(25490, 17628, 12762, 25509);
 HEAP32[HEAP32[$2 >> 2] >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$4 >> 2] = HEAP32[HEAP32[$2 >> 2] >> 2] << 2;
 $19 = _malloc(HEAP32[$4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] = $19;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(25523, 17628, 12769, 25509);
 _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0, 0, HEAP32[$4 >> 2] | 0) | 0;
 $32 = _malloc(HEAP32[$3 >> 2] << 2) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] = $32;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(25538, 17628, 12773, 25509);
 HEAP32[$5 >> 2] = (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) < 1) break;
  $44 = HEAP32[$5 >> 2] | 0;
  $47 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0;
  $49 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  HEAP32[$49 >> 2] = $50 + 1;
  HEAP32[$47 + ($50 << 2) >> 2] = $44;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
 }
 STACKTOP = sp;
 return;
}

function __sgl_init_pool($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $19 = 0, $2 = 0, $3 = 0, $32 = 0, $4 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) >= 1)) ___assert_fail(25490, 19399, 2085, 37511);
 HEAP32[HEAP32[$2 >> 2] >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$4 >> 2] = HEAP32[HEAP32[$2 >> 2] >> 2] << 2;
 $19 = _malloc(HEAP32[$4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] = $19;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(25523, 19399, 2092, 37511);
 _memset(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0, 0, HEAP32[$4 >> 2] | 0) | 0;
 $32 = _malloc(HEAP32[$3 >> 2] << 2) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] = $32;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(25538, 19399, 2096, 37511);
 HEAP32[$5 >> 2] = (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) < 1) break;
  $44 = HEAP32[$5 >> 2] | 0;
  $47 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0;
  $49 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  HEAP32[$49 >> 2] = $50 + 1;
  HEAP32[$47 + ($50 << 2) >> 2] = $44;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
 }
 STACKTOP = sp;
 return;
}

function __sfetch_emsc_get_response($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $27 = 0, $3 = 0, $33 = 0, $4 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$6 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$6 >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$7 >> 2] = __sfetch_pool_item_lookup((HEAP32[$6 >> 2] | 0) + 24 | 0, HEAP32[$3 >> 2] | 0) | 0;
 if (!(HEAP32[$7 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$7 >> 2] | 0) + 32 + 4 >> 2] = HEAP32[$5 >> 2];
 $27 = (HEAP32[$7 >> 2] | 0) + 32 | 0;
 HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
 $33 = (HEAP32[$7 >> 2] | 0) + 32 + 16 | 0;
 HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
 $41 = (HEAP32[$7 >> 2] | 0) + 32 | 0;
 if (!(HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0)) HEAP8[$41 + 13 >> 0] = 1; else if ((HEAP32[$41 + 16 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$7 >> 2] | 0) + 32 + 20 >> 2] | 0) >>> 0) HEAP8[(HEAP32[$7 >> 2] | 0) + 32 + 13 >> 0] = 1;
 __sfetch_ring_enqueue((HEAP32[$6 >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) * 76 | 0) + 52 | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $$0$i = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($2 | 0)) break;
  $7 = HEAP32[$5 >> 2] | 0;
  $8 = $7 + -16 | 0;
  $9 = $$0$i + -16 | 0;
  HEAP32[$8 >> 2] = 0;
  $11 = $7 + -12 | 0;
  HEAP32[$11 >> 2] = 0;
  $12 = $7 + -8 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$7 + -4 >> 2] = HEAP32[$$0$i + -4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  $16 = $$0$i + -12 | 0;
  HEAP32[$11 >> 2] = HEAP32[$16 >> 2];
  $18 = $$0$i + -8 | 0;
  HEAP32[$12 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$18 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -16;
  $$0$i = $9;
 }
 $22 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $22;
 $24 = $1 + 8 | 0;
 $25 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$24 >> 2] = $25;
 $27 = $0 + 8 | 0;
 $28 = $1 + 12 | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$28 >> 2] = $29;
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 return;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 24 | 0;
  $19 = $16 << 1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEEC2EmmS6_($2, $16 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, ((HEAP32[$3 >> 2] | 0) - $14 | 0) / 24 | 0, $0 + 12 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($25, $1);
  HEAP32[$24 >> 2] = $25 + 24;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $2);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE21__push_back_slow_pathIS3_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 24 | 0;
  $19 = $16 << 1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEEC2EmmS6_($2, $16 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, ((HEAP32[$3 >> 2] | 0) - $14 | 0) / 24 | 0, $0 + 12 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25, $1);
  HEAP32[$24 >> 2] = $25 + 24;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $2);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __sapp_desc_defaults($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $2 = sp + 100 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 dest = $3;
 src = HEAP32[$2 >> 2] | 0;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 44 >> 2] = (HEAP32[$3 + 44 >> 2] | 0) == 0 ? 640 : HEAP32[$3 + 44 >> 2] | 0;
 HEAP32[$3 + 48 >> 2] = (HEAP32[$3 + 48 >> 2] | 0) == 0 ? 480 : HEAP32[$3 + 48 >> 2] | 0;
 HEAP32[$3 + 52 >> 2] = (HEAP32[$3 + 52 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 52 >> 2] | 0;
 HEAP32[$3 + 56 >> 2] = (HEAP32[$3 + 56 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 56 >> 2] | 0;
 HEAP32[$3 + 88 >> 2] = (HEAP32[$3 + 88 >> 2] | 0) == 0 ? 24757 : HEAP32[$3 + 88 >> 2] | 0;
 HEAP32[$3 + 72 >> 2] = (HEAP32[$3 + 72 >> 2] | 0) == 0 ? 8192 : HEAP32[$3 + 72 >> 2] | 0;
 HEAP32[$3 + 80 >> 2] = (HEAP32[$3 + 80 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 80 >> 2] | 0;
 HEAP32[$3 + 84 >> 2] = (HEAP32[$3 + 84 >> 2] | 0) == 0 ? 2048 : HEAP32[$3 + 84 >> 2] | 0;
 HEAP32[$3 + 64 >> 2] = (HEAP32[$3 + 64 >> 2] | 0) == 0 ? 24764 : HEAP32[$3 + 64 >> 2] | 0;
 dest = $0;
 src = $3;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03846 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $23 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) if (!(___towrite($2) | 0)) {
  $12 = HEAP32[$3 >> 2] | 0;
  label = 5;
 } else $$1 = 0; else {
  $12 = $4;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $9 = $2 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $14 = $10;
  if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
   $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0;
   break;
  }
  L10 : do if ((HEAP8[$2 + 75 >> 0] | 0) < 0 | ($1 | 0) == 0) {
   $$139 = 0;
   $$141 = $0;
   $$143 = $1;
   $32 = $14;
  } else {
   $$03846 = $1;
   while (1) {
    $23 = $$03846 + -1 | 0;
    if ((HEAP8[$0 + $23 >> 0] | 0) == 10) break;
    if (!$23) {
     $$139 = 0;
     $$141 = $0;
     $$143 = $1;
     $32 = $14;
     break L10;
    } else $$03846 = $23;
   }
   $29 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$03846) | 0;
   if ($29 >>> 0 < $$03846 >>> 0) {
    $$1 = $29;
    break L5;
   }
   $$139 = $$03846;
   $$141 = $0 + $$03846 | 0;
   $$143 = $1 - $$03846 | 0;
   $32 = HEAP32[$9 >> 2] | 0;
  } while (0);
  _memcpy($32 | 0, $$141 | 0, $$143 | 0) | 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143;
  $$1 = $$139 + $$143 | 0;
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 12 | 0;
  $19 = $16 << 1;
  __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEEC2EmmS9_($2, $16 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, ((HEAP32[$3 >> 2] | 0) - $14 | 0) / 12 | 0, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEC2ERKS6_(HEAP32[$24 >> 2] | 0, $1);
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 12;
  __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $2);
  __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function _stbtt__track_vertex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $54 = 0, $55 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if ((HEAP32[$4 >> 2] | 0) > (HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] | 0)) label = 3; else if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) label = 3;
 if ((label | 0) == 3) HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] = HEAP32[$4 >> 2];
 if ((HEAP32[$5 >> 2] | 0) > (HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0)) label = 6; else if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) label = 6;
 if ((label | 0) == 6) HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] = HEAP32[$5 >> 2];
 if ((HEAP32[$4 >> 2] | 0) < (HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0)) label = 9; else if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) label = 9;
 if ((label | 0) == 9) HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = HEAP32[$4 >> 2];
 if ((HEAP32[$5 >> 2] | 0) >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 32 >> 2] | 0)) if (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) {
  $54 = HEAP32[$3 >> 2] | 0;
  $55 = $54 + 4 | 0;
  HEAP32[$55 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 32 >> 2] = HEAP32[$5 >> 2];
 $54 = HEAP32[$3 >> 2] | 0;
 $55 = $54 + 4 | 0;
 HEAP32[$55 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $12 = 0, $17 = 0, $21 = 0, $23 = 0, $24 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) $12 = HEAP32[$0 + 4 >> 2] | 0; else $12 = $6 & 255;
 if ($12 >>> 0 < $1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
 if ($7) $17 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $17 = 10;
 if (($17 - $12 | 0) >>> 0 < $3 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $17, $12 + $3 - $17 | 0, $12, $1, 0, $3, $2); else if ($3 | 0) {
  if ($7) $24 = HEAP32[$0 >> 2] | 0; else $24 = $0;
  $21 = $12 - $1 | 0;
  $23 = $24 + $1 | 0;
  if (!$21) $$1 = $2; else {
   __ZNSt3__211char_traitsIcE4moveEPcPKcm($23 + $3 | 0, $23, $21) | 0;
   $$1 = $23 >>> 0 <= $2 >>> 0 & ($24 + $12 | 0) >>> 0 > $2 >>> 0 ? $2 + $3 | 0 : $2;
  }
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($23, $$1, $3) | 0;
  $30 = $12 + $3 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $30; else HEAP8[$5 >> 0] = $30;
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($24 + $30 | 0, $4);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _stm_diff($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $15 = 0, $20 = 0, $21 = 0, $26 = 0, $32 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 $7 = $5;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$7 + 4 >> 2] = $1;
 $11 = $6;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$11 + 4 >> 2] = $3;
 $15 = $5;
 $20 = HEAP32[$15 + 4 >> 2] | 0;
 $21 = $6;
 $26 = HEAP32[$21 + 4 >> 2] | 0;
 if ($20 >>> 0 > $26 >>> 0 | (($20 | 0) == ($26 | 0) ? (HEAP32[$15 >> 2] | 0) >>> 0 > (HEAP32[$21 >> 2] | 0) >>> 0 : 0)) {
  $32 = $5;
  $38 = $6;
  $44 = _i64Subtract(HEAP32[$32 >> 2] | 0, HEAP32[$32 + 4 >> 2] | 0, HEAP32[$38 >> 2] | 0, HEAP32[$38 + 4 >> 2] | 0) | 0;
  $45 = getTempRet0() | 0;
  $46 = $4;
  HEAP32[$46 >> 2] = $44;
  HEAP32[$46 + 4 >> 2] = $45;
  $54 = $4;
  $55 = $54;
  $56 = HEAP32[$55 >> 2] | 0;
  $57 = $54 + 4 | 0;
  $58 = $57;
  $59 = HEAP32[$58 >> 2] | 0;
  setTempRet0($59 | 0);
  STACKTOP = sp;
  return $56 | 0;
 } else {
  $50 = $4;
  HEAP32[$50 >> 2] = 1;
  HEAP32[$50 + 4 >> 2] = 0;
  $54 = $4;
  $55 = $54;
  $56 = HEAP32[$55 >> 2] | 0;
  $57 = $54 + 4 | 0;
  $58 = $57;
  $59 = HEAP32[$58 >> 2] | 0;
  setTempRet0($59 | 0);
  STACKTOP = sp;
  return $56 | 0;
 }
 return 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp;
 if ((-18 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
 if ($1 >>> 0 < 2147483623) {
  $16 = $2 + $1 | 0;
  $17 = $1 << 1;
  $$sroa$speculated = $16 >>> 0 < $17 >>> 0 ? $17 : $16;
  $22 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $22 = -17;
 $23 = __Znwm($22) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23, $25, $4) | 0;
 if ($6 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23 + $4 | 0, $7, $6) | 0;
 $28 = $3 - $5 | 0;
 $29 = $28 - $4 | 0;
 if ($29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23 + $4 + $6 | 0, $25 + $4 + $5 | 0, $29) | 0;
 if (($1 | 0) != 10) __ZdlPv($25);
 HEAP32[$0 >> 2] = $23;
 HEAP32[$0 + 8 >> 2] = $22 | -2147483648;
 $38 = $28 + $6 | 0;
 HEAP32[$0 + 4 >> 2] = $38;
 HEAP8[$8 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($23 + $38 | 0, $8);
 STACKTOP = sp;
 return;
}

function __sg_gl_compile_shader($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(34017, 17628, 5966, 34021);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5967, 34021);
 HEAP32[$4 >> 2] = _glCreateShader(__sg_gl_shader_stage(HEAP32[$2 >> 2] | 0) | 0) | 0;
 _glShaderSource(HEAP32[$4 >> 2] | 0, 1, $3 | 0, 0);
 _glCompileShader(HEAP32[$4 >> 2] | 0);
 HEAP32[$5 >> 2] = 0;
 _glGetShaderiv(HEAP32[$4 >> 2] | 0, 35713, $5 | 0);
 if (!(HEAP32[$5 >> 2] | 0)) {
  HEAP32[$6 >> 2] = 0;
  _glGetShaderiv(HEAP32[$4 >> 2] | 0, 35716, $6 | 0);
  do if ((HEAP32[$6 >> 2] | 0) > 0) {
   HEAP32[$7 >> 2] = _malloc(HEAP32[$6 >> 2] | 0) | 0;
   _glGetShaderInfoLog(HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0, $6 | 0, HEAP32[$7 >> 2] | 0);
   if (HEAP32[$7 >> 2] | 0) {
    _puts(HEAP32[$7 >> 2] | 0) | 0;
    _free(HEAP32[$7 >> 2] | 0);
    break;
   } else ___assert_fail(33787, 17628, 5980, 34021);
  } while (0);
  _glDeleteShader(HEAP32[$4 >> 2] | 0);
  HEAP32[$4 >> 2] = 0;
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return HEAP32[$4 >> 2] | 0;
 } else ___assert_fail(25839, 17628, 5986, 34021);
 return 0;
}

function __sapp_emsc_wheel_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $6 = sp;
 HEAP32[sp + 12 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[sp + 4 >> 2] = $2;
 if (!(__sapp_events_enabled() | 0)) {
  __sapp_emsc_update_keyboard_state();
  __sapp_emsc_update_mouse_lock_state();
  STACKTOP = sp;
  return 1;
 }
 __sapp_init_event(6);
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 2;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 1;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 4;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] | 0) HEAP32[12744] = HEAP32[12744] | 8;
 switch (HEAP32[(HEAP32[$4 >> 2] | 0) + 96 >> 2] | 0) {
 case 0:
  {
   HEAPF32[$6 >> 2] = -.03999999910593033;
   break;
  }
 case 1:
  {
   HEAPF32[$6 >> 2] = -1.3300000429153442;
   break;
  }
 case 2:
  {
   HEAPF32[$6 >> 2] = -10.0;
   break;
  }
 default:
  HEAPF32[$6 >> 2] = -.10000000149011612;
 }
 HEAPF32[12750] = +HEAPF32[$6 >> 2] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + 72 >> 3];
 HEAPF32[12751] = +HEAPF32[$6 >> 2] * +HEAPF64[(HEAP32[$4 >> 2] | 0) + 80 >> 3];
 __sapp_call_event(50952) | 0;
 __sapp_emsc_update_keyboard_state();
 __sapp_emsc_update_mouse_lock_state();
 STACKTOP = sp;
 return 1;
}

function _stbtt__csctx_rccurve_to($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 20 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 12 | 0;
 $15 = sp + 8 | 0;
 $16 = sp + 4 | 0;
 $17 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAPF32[$8 >> 2] = $1;
 HEAPF32[$9 >> 2] = $2;
 HEAPF32[$10 >> 2] = $3;
 HEAPF32[$11 >> 2] = $4;
 HEAPF32[$12 >> 2] = $5;
 HEAPF32[$13 >> 2] = $6;
 HEAPF32[$14 >> 2] = +HEAPF32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] + +HEAPF32[$8 >> 2];
 HEAPF32[$15 >> 2] = +HEAPF32[(HEAP32[$7 >> 2] | 0) + 20 >> 2] + +HEAPF32[$9 >> 2];
 HEAPF32[$16 >> 2] = +HEAPF32[$14 >> 2] + +HEAPF32[$10 >> 2];
 HEAPF32[$17 >> 2] = +HEAPF32[$15 >> 2] + +HEAPF32[$11 >> 2];
 HEAPF32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] = +HEAPF32[$16 >> 2] + +HEAPF32[$12 >> 2];
 HEAPF32[(HEAP32[$7 >> 2] | 0) + 20 >> 2] = +HEAPF32[$17 >> 2] + +HEAPF32[$13 >> 2];
 _stbtt__csctx_v(HEAP32[$7 >> 2] | 0, 4, ~~+HEAPF32[(HEAP32[$7 >> 2] | 0) + 16 >> 2], ~~+HEAPF32[(HEAP32[$7 >> 2] | 0) + 20 >> 2], ~~+HEAPF32[$14 >> 2], ~~+HEAPF32[$15 >> 2], ~~+HEAPF32[$16 >> 2], ~~+HEAPF32[$17 >> 2]);
 STACKTOP = sp;
 return;
}

function _stbtt__GetGlyphShapeT2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $18 = 0, $3 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 108 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 100 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 48 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 dest = $7;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$7 >> 2] = 1;
 dest = $8;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (_stbtt__run_charstring(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, $7) | 0) {
  $18 = _fons__tmpalloc((HEAP32[$7 + 44 >> 2] | 0) * 14 | 0, HEAP32[HEAP32[$4 >> 2] >> 2] | 0) | 0;
  HEAP32[HEAP32[$6 >> 2] >> 2] = $18;
  HEAP32[$8 + 40 >> 2] = HEAP32[HEAP32[$6 >> 2] >> 2];
  if (_stbtt__run_charstring(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, $8) | 0) {
   if ((HEAP32[$8 + 44 >> 2] | 0) != (HEAP32[$7 + 44 >> 2] | 0)) ___assert_fail(40588, 40159, 2191, 40638);
   HEAP32[$3 >> 2] = HEAP32[$8 + 44 >> 2];
   $35 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $35 | 0;
  }
 }
 HEAP32[HEAP32[$6 >> 2] >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 $35 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $35 | 0;
}

function __sg_init_pipeline($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $35 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $1;
 if (!((HEAP32[$0 >> 2] | 0) != 0 & (HEAP32[$2 >> 2] | 0) != 0)) ___assert_fail(34166, 17628, 14139, 34201);
 HEAP32[$3 >> 2] = __sg_lookup_pipeline(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(18218, 17628, 14141, 34201);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) != 1) ___assert_fail(18218, 17628, 14141, 34201);
 HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = HEAP32[539114];
 do if (__sg_validate_pipeline_desc(HEAP32[$2 >> 2] | 0) | 0) {
  HEAP32[$4 >> 2] = __sg_lookup_shader(2156476, HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) | 0;
  if (HEAP32[$4 >> 2] | 0) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) == 2) {
   $35 = __sg_create_pipeline(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = $35;
   break;
  }
  HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = 3;
 } else HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = 3; while (0);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) == 3) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(34219, 17628, 14155, 34201);
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$031 = 0, $$032 = 0, $$2 = 0, $$2$ph = 0, $$236 = 0, $$3 = 0, $17 = 0, $28 = 0;
 L1 : do if (($1 - $0 | 0) > 12) {
  $$031 = 0;
  $$032 = $0;
  while (1) {
   if ($$031 >>> 0 >= 13) break;
   if ((HEAP8[$$032 >> 0] | 0) != (HEAP8[49510 + $$031 >> 0] | 0)) {
    $$236 = $0;
    break L1;
   }
   $$031 = $$031 + 1 | 0;
   $$032 = $$032 + 1 | 0;
  }
  L8 : do if (($$032 | 0) == ($1 | 0)) $$3 = $1; else {
   if ((HEAP8[$$032 >> 0] | 0) == 95) {
    $17 = $$032 + 1 | 0;
    if (($17 | 0) == ($1 | 0)) {
     $$236 = $0;
     break L1;
    }
    if (((HEAP8[$17 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $$236 = $0;
     break L1;
    }
    $$2$ph = $$032 + 2 | 0;
   } else $$2$ph = $$032;
   $$2 = $$2$ph;
   while (1) {
    if (($$2 | 0) == ($1 | 0)) {
     $$3 = $1;
     break L8;
    }
    if (((HEAP8[$$2 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $$3 = $$2;
     break L8;
    }
    $$2 = $$2 + 1 | 0;
   }
  } while (0);
  $28 = HEAP32[$2 + 4 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) == ($28 | 0)) $$236 = $0; else {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($28 + -24 | 0, 0, 49524) | 0;
   $$236 = $$3;
  }
 } else $$236 = $0; while (0);
 return $$236 | 0;
}

function _stbtt__dict_get($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $16 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = $2;
 _stbtt__buf_seek(HEAP32[$3 >> 2] | 0, 0);
 while (1) {
  $16 = HEAP32[$3 >> 2] | 0;
  if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0)) {
   label = 11;
   break;
  }
  HEAP32[$5 >> 2] = HEAP32[$16 + 4 >> 2];
  while (1) {
   $22 = ((_stbtt__buf_peek8(HEAP32[$3 >> 2] | 0) | 0) & 255 | 0) >= 28;
   $23 = HEAP32[$3 >> 2] | 0;
   if (!$22) break;
   _stbtt__cff_skip_operand($23);
  }
  HEAP32[$6 >> 2] = HEAP32[$23 + 4 >> 2];
  HEAP32[$7 >> 2] = (_stbtt__buf_get8(HEAP32[$3 >> 2] | 0) | 0) & 255;
  if ((HEAP32[$7 >> 2] | 0) == 12) HEAP32[$7 >> 2] = (_stbtt__buf_get8(HEAP32[$3 >> 2] | 0) | 0) & 255 | 256;
  if ((HEAP32[$7 >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
   label = 9;
   break;
  }
 }
 if ((label | 0) == 9) {
  _stbtt__buf_range($0, HEAP32[$3 >> 2] | 0, HEAP32[$5 >> 2] | 0, (HEAP32[$6 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 11) {
  _stbtt__buf_range($0, $16, 0, 0);
  STACKTOP = sp;
  return;
 }
}

function __sapp_strcpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre_trunc = 0, $3 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 21 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp + 20 | 0;
 $9 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 if (!((HEAP32[$4 >> 2] | 0) != 0 & (HEAP32[$5 >> 2] | 0) != 0 & (HEAP32[$6 >> 2] | 0) > 0)) ___assert_fail(24587, 12505, 2521, 24615);
 HEAP32[$7 >> 2] = (HEAP32[$5 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) - 1);
 HEAP8[$8 >> 0] = 0;
 HEAP32[$9 >> 2] = 0;
 while (1) {
  if ((HEAP32[$9 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
  HEAP8[$8 >> 0] = HEAP8[HEAP32[$4 >> 2] >> 0] | 0;
  if (HEAP8[$8 >> 0] | 0) HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
  $30 = HEAP8[$8 >> 0] | 0;
  $31 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $31 + 1;
  HEAP8[$31 >> 0] = $30;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
 }
 if (HEAP8[$8 >> 0] | 0) {
  HEAP8[HEAP32[$7 >> 2] >> 0] = 0;
  HEAP8[$3 >> 0] = 0;
  $$pre_trunc = HEAP8[$3 >> 0] | 0;
  $39 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $39 | 0;
 } else {
  HEAP8[$3 >> 0] = 1;
  $$pre_trunc = HEAP8[$3 >> 0] | 0;
  $39 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0;
}

function _stbtt__cff_int($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $16 = 0, $2 = 0, $27 = 0, $3 = 0, $43 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = (_stbtt__buf_get8(HEAP32[$2 >> 2] | 0) | 0) & 255;
 $11 = HEAP32[$3 >> 2] | 0;
 if ((HEAP32[$3 >> 2] | 0) >= 32 & (HEAP32[$3 >> 2] | 0) <= 246) {
  HEAP32[$1 >> 2] = $11 - 139;
  $43 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 $16 = HEAP32[$3 >> 2] | 0;
 if (($11 | 0) >= 247 & (HEAP32[$3 >> 2] | 0) <= 250) {
  HEAP32[$1 >> 2] = ($16 - 247 << 8) + ((_stbtt__buf_get8(HEAP32[$2 >> 2] | 0) | 0) & 255) + 108;
  $43 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 $27 = HEAP32[$3 >> 2] | 0;
 if (($16 | 0) >= 251 & (HEAP32[$3 >> 2] | 0) <= 254) {
  HEAP32[$1 >> 2] = (0 - ($27 - 251) << 8) - ((_stbtt__buf_get8(HEAP32[$2 >> 2] | 0) | 0) & 255) - 108;
  $43 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 if (($27 | 0) == 28) {
  HEAP32[$1 >> 2] = _stbtt__buf_get(HEAP32[$2 >> 2] | 0, 2) | 0;
  $43 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 if ((HEAP32[$3 >> 2] | 0) != 29) ___assert_fail(43639, 40159, 1141, 40436);
 HEAP32[$1 >> 2] = _stbtt__buf_get(HEAP32[$2 >> 2] | 0, 4) | 0;
 $43 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $43 | 0;
}

function __sg_validate_buffer_desc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $33 = 0, $49 = 0, $62 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = sp + 4 | 0;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17623, 17628, 13283, 26939);
 __sg_validate_begin();
 __sg_validate((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 0, 1);
 __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 52 >> 2] | 0) == 0, 1);
 __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 0, 2);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] | 0) $33 = 1; else if (HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] | 0) $33 = 1; else if (HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0) $33 = 1; else $33 = 0 != (HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] | 0);
 HEAP8[$2 >> 0] = $33 & 1;
 if (!(HEAP8[$2 >> 0] & 1)) if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) == 1) {
  if (HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) $49 = (HEAP32[(HEAP32[$1 >> 2] | 0) + 16 + 4 >> 2] | 0) >>> 0 > 0; else $49 = 0;
  __sg_validate($49, 3);
  __sg_validate((HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[$1 >> 2] | 0) + 16 + 4 >> 2] | 0), 4);
  $62 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $62 | 0;
 }
 __sg_validate(0 == (HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0), 5);
 $62 = __sg_validate_end() | 0;
 STACKTOP = sp;
 return $62 | 0;
}

function __ZN2Dr24DifferenceBetween2AnglesEdd($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$022$lcssa = 0.0, $$02231 = 0.0, $$023$lcssa = 0.0, $$02336 = 0.0, $$1$lcssa = 0.0, $$124$lcssa = 0.0, $$12426 = 0.0, $$125 = 0.0, $12 = 0.0, $15 = 0.0, $19 = 0.0, $3 = 0.0, $6 = 0.0, $9 = 0.0;
 if ($0 < 0.0) {
  $$02336 = $0;
  while (1) {
   $3 = $$02336 + 360.0;
   if ($3 < 0.0) $$02336 = $3; else {
    $$023$lcssa = $3;
    break;
   }
  }
 } else $$023$lcssa = $0;
 if ($1 < 0.0) {
  $$02231 = $1;
  while (1) {
   $6 = $$02231 + 360.0;
   if ($6 < 0.0) $$02231 = $6; else {
    $$022$lcssa = $6;
    break;
   }
  }
 } else $$022$lcssa = $1;
 if (!($$023$lcssa >= 360.0)) $$124$lcssa = $$023$lcssa; else {
  $$12426 = $$023$lcssa;
  while (1) {
   $9 = $$12426 + -360.0;
   if (!($9 >= 360.0)) {
    $$124$lcssa = $9;
    break;
   } else $$12426 = $9;
  }
 }
 if (!($$022$lcssa >= 360.0)) $$1$lcssa = $$022$lcssa; else {
  $$125 = $$022$lcssa;
  while (1) {
   $12 = $$125 + -360.0;
   if (!($12 >= 360.0)) {
    $$1$lcssa = $12;
    break;
   } else $$125 = $12;
  }
 }
 if ($$124$lcssa > $$1$lcssa) {
  $15 = $$124$lcssa - $$1$lcssa;
  if ($15 > 180.0) $$0 = $$1$lcssa - ($$124$lcssa + -360.0); else $$0 = $15;
 } else {
  $19 = $$1$lcssa - $$124$lcssa;
  if ($19 > 180.0) $$0 = $$124$lcssa - ($$1$lcssa + -360.0); else $$0 = $19;
 }
 return +$$0;
}

function _stbi__mad4sizes_valid($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $16 = 0, $22 = 0, $24 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 if (!(_stbi__mul2sizes_valid(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0)) {
  $39 = 0;
  $38 = $39 & 1;
  STACKTOP = sp;
  return $38 | 0;
 }
 $16 = Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid($16, HEAP32[$7 >> 2] | 0) | 0)) {
  $39 = 0;
  $38 = $39 & 1;
  STACKTOP = sp;
  return $38 | 0;
 }
 $22 = Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
 $24 = Math_imul($22, HEAP32[$7 >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid($24, HEAP32[$8 >> 2] | 0) | 0)) {
  $39 = 0;
  $38 = $39 & 1;
  STACKTOP = sp;
  return $38 | 0;
 }
 $30 = Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
 $32 = Math_imul($30, HEAP32[$7 >> 2] | 0) | 0;
 $34 = Math_imul($32, HEAP32[$8 >> 2] | 0) | 0;
 $39 = (_stbi__addsizes_valid($34, HEAP32[$9 >> 2] | 0) | 0) != 0;
 $38 = $39 & 1;
 STACKTOP = sp;
 return $38 | 0;
}

function _stbi__gif_load($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 34944 | 0;
 $6 = sp + 34928 | 0;
 $7 = sp + 34924 | 0;
 $8 = sp + 34920 | 0;
 $9 = sp + 34916 | 0;
 $10 = sp + 34912 | 0;
 $12 = sp + 34904 | 0;
 $13 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[sp + 34908 >> 2] = $5;
 HEAP32[$12 >> 2] = 0;
 _memset($13 | 0, 0, 34904) | 0;
 $17 = _stbi__gif_load_next(HEAP32[$6 >> 2] | 0, $13, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, 0) | 0;
 HEAP32[$12 >> 2] = $17;
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) == (HEAP32[$6 >> 2] | 0) ? 0 : $17;
 if (HEAP32[$12 >> 2] | 0) {
  HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[$13 >> 2];
  HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[$13 + 4 >> 2];
  if ((HEAP32[$10 >> 2] | 0) != 0 & (HEAP32[$10 >> 2] | 0) != 4) HEAP32[$12 >> 2] = _stbi__convert_format(HEAP32[$12 >> 2] | 0, 4, HEAP32[$10 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$13 + 4 >> 2] | 0) | 0;
 } else if (HEAP32[$13 + 8 >> 2] | 0) _free(HEAP32[$13 + 8 >> 2] | 0);
 _free(HEAP32[$13 + 16 >> 2] | 0);
 _free(HEAP32[$13 + 12 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$12 >> 2] | 0;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 44 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorI6VertexNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 44 | 0;
  $19 = $16 << 1;
  __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEEC2EmmS4_($2, $16 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, ((HEAP32[$3 >> 2] | 0) - $14 | 0) / 44 | 0, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  dest = $25;
  src = $1;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$24 >> 2] = $25 + 44;
  __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
  __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function _fons__flush($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] | 0) < (HEAP32[(HEAP32[$1 >> 2] | 0) + 48 + 8 >> 2] | 0)) if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 48 + 4 >> 2] | 0) < (HEAP32[(HEAP32[$1 >> 2] | 0) + 48 + 12 >> 2] | 0)) {
  if (HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] | 0) FUNCTION_TABLE_viii[HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] & 3](HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0, (HEAP32[$1 >> 2] | 0) + 48 | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] = HEAP32[HEAP32[$1 >> 2] >> 2];
  HEAP32[(HEAP32[$1 >> 2] | 0) + 48 + 4 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2];
  HEAP32[(HEAP32[$1 >> 2] | 0) + 48 + 8 >> 2] = 0;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 48 + 12 >> 2] = 0;
 }
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 20560 >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] | 0) FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 7](HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0, (HEAP32[$1 >> 2] | 0) + 80 | 0, (HEAP32[$1 >> 2] | 0) + 8272 | 0, (HEAP32[$1 >> 2] | 0) + 16464 | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 20560 >> 2] | 0);
 HEAP32[(HEAP32[$1 >> 2] | 0) + 20560 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE8__appendEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 do if ((((HEAP32[$3 >> 2] | 0) - $6 | 0) / 44 | 0) >>> 0 < $1 >>> 0) {
  $13 = (($6 - (HEAP32[$0 >> 2] | 0) | 0) / 44 | 0) + $1 | 0;
  $14 = __ZNKSt3__26vectorI6VertexNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
  if ($14 >>> 0 < $13 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
   $18 = HEAP32[$0 >> 2] | 0;
   $20 = ((HEAP32[$3 >> 2] | 0) - $18 | 0) / 44 | 0;
   $23 = $20 << 1;
   __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEEC2EmmS4_($2, $20 >>> 0 < $14 >>> 1 >>> 0 ? ($23 >>> 0 < $13 >>> 0 ? $13 : $23) : $14, ((HEAP32[$5 >> 2] | 0) - $18 | 0) / 44 | 0, $0 + 8 | 0);
   __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEE18__construct_at_endEm($2, $1);
   __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
   __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEED2Ev($2);
   break;
  }
 } else __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE18__construct_at_endEm($0, $1); while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczElEET_T0_SD_PKNSD_10value_typeET1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$017 = 0, $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $21 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $3 = $1 + 11 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 if ($4 << 24 >> 24 < 0) $21 = HEAP32[$1 + 4 >> 2] | 0; else $21 = $4 & 255;
 $$017 = $21;
 $10 = $4;
 while (1) {
  if ($10 << 24 >> 24 < 0) $13 = HEAP32[$1 >> 2] | 0; else $13 = $1;
  HEAP32[$vararg_buffer >> 2] = $2;
  $14 = _snprintf($13, $$017 + 1 | 0, 47109, $vararg_buffer) | 0;
  if (($14 | 0) > -1) if ($14 >>> 0 > $$017 >>> 0) $$2 = $14; else break; else $$2 = $$017 << 1 | 1;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($1, $$2, 0);
  $$017 = $$2;
  $10 = HEAP8[$3 >> 0] | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($1, $14, 0);
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$017 = 0, $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $21 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $3 = $1 + 11 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 if ($4 << 24 >> 24 < 0) $21 = HEAP32[$1 + 4 >> 2] | 0; else $21 = $4 & 255;
 $$017 = $21;
 $10 = $4;
 while (1) {
  if ($10 << 24 >> 24 < 0) $13 = HEAP32[$1 >> 2] | 0; else $13 = $1;
  HEAP32[$vararg_buffer >> 2] = $2;
  $14 = _snprintf($13, $$017 + 1 | 0, 47106, $vararg_buffer) | 0;
  if (($14 | 0) > -1) if ($14 >>> 0 > $$017 >>> 0) $$2 = $14; else break; else $$2 = $$017 << 1 | 1;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($1, $$2, 0);
  $$017 = $$2;
  $10 = HEAP8[$3 >> 0] | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($1, $14, 0);
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $9 = __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 3;
  __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEEC2EmmS4_($2, $15 >> 4 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 4, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAP32[$25 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$25 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$25 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$25 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 16;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
  __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $9 = __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 3;
  __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEEC2EmmS4_($2, $15 >> 4 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 4, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAP32[$25 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$25 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$25 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$25 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 16;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
  __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 12 | 0;
  $19 = $16 << 1;
  __ZNSt3__214__split_bufferINS_6vectorI8DrPointFNS_9allocatorIS2_EEEERNS3_IS5_EEEC2EmmS7_($2, $16 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, ((HEAP32[$3 >> 2] | 0) - $14 | 0) / 12 | 0, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_(HEAP32[$24 >> 2] | 0, $1);
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 12;
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS5_EE($0, $2);
  __ZNSt3__214__split_bufferINS_6vectorI8DrPointFNS_9allocatorIS2_EEEERNS3_IS5_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function _stbi_zlib_decode_malloc_guesssize_headerflag($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 $5 = sp + 4100 | 0;
 $6 = sp + 4096 | 0;
 $7 = sp + 4092 | 0;
 $8 = sp + 4088 | 0;
 $9 = sp + 4084 | 0;
 $10 = sp + 4080 | 0;
 $11 = sp + 8 | 0;
 $12 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$12 >> 2] = _stbi__malloc(HEAP32[$8 >> 2] | 0) | 0;
 if (!(HEAP32[$12 >> 2] | 0)) {
  HEAP32[$5 >> 2] = 0;
  $41 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 }
 HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$11 + 4 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$7 >> 2] | 0);
 if (!(_stbi__do_zlib($11, HEAP32[$12 >> 2] | 0, HEAP32[$8 >> 2] | 0, 1, HEAP32[$10 >> 2] | 0) | 0)) {
  _free(HEAP32[$11 + 20 >> 2] | 0);
  HEAP32[$5 >> 2] = 0;
  $41 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 }
 if (HEAP32[$9 >> 2] | 0) HEAP32[HEAP32[$9 >> 2] >> 2] = (HEAP32[$11 + 16 >> 2] | 0) - (HEAP32[$11 + 20 >> 2] | 0);
 HEAP32[$5 >> 2] = HEAP32[$11 + 20 >> 2];
 $41 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $41 | 0;
}

function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $12 = 0, $14 = 0, $30 = 0, $8 = 0, $9 = 0, $8$looptemp = 0, $9$looptemp = 0, $$012$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  do {
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $9$looptemp = $9;
   $9 = getTempRet0() | 0;
   $12 = ___muldi3($8 | 0, $9 | 0, 10, 0) | 0;
   $14 = _i64Subtract($8$looptemp | 0, $9$looptemp | 0, $12 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $$0914 = $$0914 + -1 | 0;
   HEAP8[$$0914 >> 0] = $14 & 255 | 48;
  } while ($9$looptemp >>> 0 > 9 | ($9$looptemp | 0) == 9 & $8$looptemp >>> 0 > 4294967295);
  $$010$lcssa$off0 = $8;
  $$09$lcssa = $$0914;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 if (!$$010$lcssa$off0) $$1$lcssa = $$09$lcssa; else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $$012$looptemp = $$012;
   $$012 = ($$012 >>> 0) / 10 | 0;
   $30 = $$111 + -1 | 0;
   HEAP8[$30 >> 0] = $$012$looptemp - ($$012 * 10 | 0) | 48;
   if ($$012$looptemp >>> 0 < 10) {
    $$1$lcssa = $30;
    break;
   } else $$111 = $30;
  }
 }
 return $$1$lcssa | 0;
}

function _fons__blur($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[sp + 28 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = $5;
 if ((HEAP32[$11 >> 2] | 0) < 1) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[$13 >> 2] = +(HEAP32[$11 >> 2] | 0) * .5773500204086304;
 HEAP32[$12 >> 2] = ~~((1.0 - +Math_exp(+(-2.299999952316284 / (+HEAPF32[$13 >> 2] + 1.0)))) * 65536.0);
 _fons__blurRows(HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$12 >> 2] | 0);
 _fons__blurCols(HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$12 >> 2] | 0);
 _fons__blurRows(HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$12 >> 2] | 0);
 _fons__blurCols(HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$12 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__27__sort5IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_S5_T_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0;
 $6 = __ZNSt3__27__sort4IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_T_($0, $1, $2, $3, $5) | 0;
 $7 = HEAP32[$4 >> 2] | 0;
 $8 = HEAP32[$3 >> 2] | 0;
 if (__ZN13TPPLPartition12VertexSorterclEll($5, $7, $8) | 0) {
  HEAP32[$3 >> 2] = $7;
  HEAP32[$4 >> 2] = $8;
  $10 = $6 + 1 | 0;
  $11 = HEAP32[$3 >> 2] | 0;
  $12 = HEAP32[$2 >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($5, $11, $12) | 0) {
   HEAP32[$2 >> 2] = $11;
   HEAP32[$3 >> 2] = $12;
   $14 = $6 + 2 | 0;
   $15 = HEAP32[$2 >> 2] | 0;
   $16 = HEAP32[$1 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($5, $15, $16) | 0) {
    HEAP32[$1 >> 2] = $15;
    HEAP32[$2 >> 2] = $16;
    $19 = HEAP32[$1 >> 2] | 0;
    $20 = HEAP32[$0 >> 2] | 0;
    if (__ZN13TPPLPartition12VertexSorterclEll($5, $19, $20) | 0) {
     HEAP32[$0 >> 2] = $19;
     HEAP32[$1 >> 2] = $20;
     $$0 = $6 + 4 | 0;
    } else $$0 = $6 + 3 | 0;
   } else $$0 = $14;
  } else $$0 = $10;
 } else $$0 = $6;
 return $$0 | 0;
}

function _sfons_create($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if ((HEAP32[$3 >> 2] | 0) > 0 & (HEAP32[$4 >> 2] | 0) > 0) {
  HEAP32[$7 >> 2] = _malloc(24) | 0;
  $14 = HEAP32[$7 >> 2] | 0;
  HEAP32[$14 >> 2] = 0;
  HEAP32[$14 + 4 >> 2] = 0;
  HEAP32[$14 + 8 >> 2] = 0;
  HEAP32[$14 + 12 >> 2] = 0;
  HEAP32[$14 + 16 >> 2] = 0;
  HEAP32[$14 + 20 >> 2] = 0;
  dest = $6;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$4 >> 2];
  HEAP8[$6 + 8 >> 0] = HEAP32[$5 >> 2];
  HEAP32[$6 + 16 >> 2] = 7;
  HEAP32[$6 + 20 >> 2] = 8;
  HEAP32[$6 + 24 >> 2] = 1;
  HEAP32[$6 + 28 >> 2] = 4;
  HEAP32[$6 + 32 >> 2] = 24;
  HEAP32[$6 + 12 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$8 >> 2] = _fonsCreateInternal($6) | 0;
  STACKTOP = sp;
  return HEAP32[$8 >> 2] | 0;
 } else ___assert_fail(24414, 24442, 1744, 24517);
 return 0;
}

function __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 3) + 1 | 0;
 $9 = __ZNKSt3__26vectorI7DrPointNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 2;
  __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEEC2EmmS4_($2, $15 >> 3 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 3, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $26 = $1;
  $31 = HEAP32[$26 + 4 >> 2] | 0;
  $32 = HEAP32[$24 >> 2] | 0;
  HEAP32[$32 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$32 + 4 >> 2] = $31;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 8;
  __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
  __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 3) + 1 | 0;
 $9 = __ZNKSt3__26vectorI7DrPointNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 2;
  __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEEC2EmmS4_($2, $15 >> 3 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 3, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $26 = $1;
  $31 = HEAP32[$26 + 4 >> 2] | 0;
  $32 = HEAP32[$24 >> 2] | 0;
  HEAP32[$32 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$32 + 4 >> 2] = $31;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 8;
  __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
  __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  block_aligned_end = aligned_end - 64 | 0;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function _stbi__convert_16_to_8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $22 = 0, $29 = 0, $4 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 $14 = Math_imul(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
 HEAP32[$10 >> 2] = Math_imul($14, HEAP32[$8 >> 2] | 0) | 0;
 HEAP32[$11 >> 2] = _stbi__malloc(HEAP32[$10 >> 2] | 0) | 0;
 if (!(HEAP32[$11 >> 2] | 0)) {
  $22 = (_stbi__err(43490) | 0) != 0;
  HEAP32[$4 >> 2] = $22 ? 0 : 0;
  $43 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 HEAP32[$9 >> 2] = 0;
 while (1) {
  $29 = HEAP32[$5 >> 2] | 0;
  if ((HEAP32[$9 >> 2] | 0) >= (HEAP32[$10 >> 2] | 0)) break;
  HEAP8[(HEAP32[$11 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) >> 0] = (HEAPU16[$29 + (HEAP32[$9 >> 2] << 1) >> 1] | 0) >> 8;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
 }
 _free($29);
 HEAP32[$4 >> 2] = HEAP32[$11 >> 2];
 $43 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $43 | 0;
}

function __ZNSt3__218__insertion_sort_3IRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$lcssa = 0, $$02934 = 0, $$03033 = 0, $$03033$phi = 0, $$1 = 0, $$1$phi = 0, $10 = 0, $12 = 0, $15 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = $0 + 8 | 0;
 __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($0, $0 + 4 | 0, $3, $2) | 0;
 $5 = $0 + 12 | 0;
 if (($5 | 0) != ($1 | 0)) {
  $$02934 = $5;
  $$03033 = $3;
  while (1) {
   $7 = HEAP32[$$02934 >> 2] | 0;
   $8 = HEAP32[$$03033 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($2, $7, $8) | 0) {
    $$0 = $$03033;
    $$1 = $$02934;
    $10 = $8;
    while (1) {
     HEAP32[$$1 >> 2] = $10;
     if (($$0 | 0) == ($0 | 0)) {
      $$0$lcssa = $0;
      break;
     }
     $12 = $$0 + -4 | 0;
     $10 = HEAP32[$12 >> 2] | 0;
     if (!(__ZN13TPPLPartition12VertexSorterclEll($2, $7, $10) | 0)) {
      $$0$lcssa = $$0;
      break;
     } else {
      $$1$phi = $$0;
      $$0 = $12;
      $$1 = $$1$phi;
     }
    }
    HEAP32[$$0$lcssa >> 2] = $7;
   }
   $15 = $$02934 + 4 | 0;
   if (($15 | 0) == ($1 | 0)) break; else {
    $$03033$phi = $$02934;
    $$02934 = $15;
    $$03033 = $$03033$phi;
   }
  }
 }
 return;
}

function _stbi__paeth($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) - (HEAP32[$6 >> 2] | 0);
 HEAP32[$8 >> 2] = Math_abs((HEAP32[$7 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) | 0;
 HEAP32[$9 >> 2] = Math_abs((HEAP32[$7 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) | 0) | 0;
 HEAP32[$10 >> 2] = Math_abs((HEAP32[$7 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0) | 0;
 if ((HEAP32[$8 >> 2] | 0) <= (HEAP32[$9 >> 2] | 0)) if ((HEAP32[$8 >> 2] | 0) <= (HEAP32[$10 >> 2] | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  $40 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 if ((HEAP32[$9 >> 2] | 0) <= (HEAP32[$10 >> 2] | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
  $40 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 } else {
  HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
  $40 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 return 0;
}

function __sfetch_ring_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre_trunc = 0, $2 = 0, $26 = 0, $3 = 0, $33 = 0, $37 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!((HEAP32[$3 >> 2] | 0) != 0 & (HEAP32[$4 >> 2] | 0) >>> 0 > 0)) ___assert_fail(38285, 21538, 1259, 38307);
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) ___assert_fail(38325, 21538, 1260, 38307);
 HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 HEAP32[$5 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] << 2;
 $26 = _malloc(HEAP32[$5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = $26;
 $33 = HEAP32[$3 >> 2] | 0;
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) {
  _memset(HEAP32[$33 + 12 >> 2] | 0, 0, HEAP32[$5 >> 2] | 0) | 0;
  HEAP8[$2 >> 0] = 1;
  $$pre_trunc = HEAP8[$2 >> 0] | 0;
  $37 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $37 | 0;
 } else {
  __sfetch_ring_discard($33);
  HEAP8[$2 >> 0] = 0;
  $$pre_trunc = HEAP8[$2 >> 0] | 0;
  $37 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $37 | 0;
 }
 return 0;
}

function _stbi__grow_buffer_unsafe($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $2 = 0, $3 = 0, $40 = 0, $44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 while (1) {
  if (HEAP32[(HEAP32[$1 >> 2] | 0) + 18376 >> 2] | 0) $12 = 0; else $12 = (_stbi__get8(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0) & 255;
  HEAP32[$2 >> 2] = $12;
  if ((HEAP32[$2 >> 2] | 0) == 255) {
   HEAP32[$3 >> 2] = (_stbi__get8(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0) & 255;
   while (1) {
    if ((HEAP32[$3 >> 2] | 0) != 255) break;
    HEAP32[$3 >> 2] = (_stbi__get8(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0) & 255;
   }
   if (HEAP32[$3 >> 2] | 0) break;
  }
  $40 = (HEAP32[$1 >> 2] | 0) + 18364 | 0;
  HEAP32[$40 >> 2] = HEAP32[$40 >> 2] | HEAP32[$2 >> 2] << 24 - (HEAP32[(HEAP32[$1 >> 2] | 0) + 18368 >> 2] | 0);
  $44 = (HEAP32[$1 >> 2] | 0) + 18368 | 0;
  HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 8;
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 18368 >> 2] | 0) > 24) {
   label = 11;
   break;
  }
 }
 if ((label | 0) == 11) {
  STACKTOP = sp;
  return;
 }
 HEAP8[(HEAP32[$1 >> 2] | 0) + 18372 >> 0] = HEAP32[$3 >> 2];
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18376 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function __sapp_emsc_invoke_fetch_cb($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $8 = sp + 56 | 0;
 $9 = sp + 52 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 44 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 36 | 0;
 $14 = sp + 32 | 0;
 $15 = sp + 28 | 0;
 $16 = sp;
 HEAP32[$8 >> 2] = $0;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAP32[$13 >> 2] = $5;
 HEAP32[$14 >> 2] = $6;
 HEAP32[$15 >> 2] = $7;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$16 + 4 >> 2] = 0;
 HEAP32[$16 + 8 >> 2] = 0;
 HEAP32[$16 + 12 >> 2] = 0;
 HEAP32[$16 + 16 >> 2] = 0;
 HEAP32[$16 + 20 >> 2] = 0;
 HEAP32[$16 + 24 >> 2] = 0;
 HEAP8[$16 >> 0] = 0 != (HEAP32[$9 >> 2] | 0) & 1;
 HEAP32[$16 + 4 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 8 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$16 + 12 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$16 + 16 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$16 + 20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$16 + 24 >> 2] = HEAP32[$15 >> 2];
 FUNCTION_TABLE_vi[HEAP32[$11 >> 2] & 31]($16);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE8__appendEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 do if ((HEAP32[$3 >> 2] | 0) - $6 >> 2 >>> 0 < $1 >>> 0) {
  $13 = ($6 - (HEAP32[$0 >> 2] | 0) >> 2) + $1 | 0;
  $14 = __ZNKSt3__26vectorImNS_9allocatorImEEE8max_sizeEv($0) | 0;
  if ($14 >>> 0 < $13 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
   $18 = HEAP32[$0 >> 2] | 0;
   $19 = (HEAP32[$3 >> 2] | 0) - $18 | 0;
   $23 = $19 >> 1;
   __ZNSt3__214__split_bufferImRNS_9allocatorImEEEC2EmmS3_($2, $19 >> 2 >>> 0 < $14 >>> 1 >>> 0 ? ($23 >>> 0 < $13 >>> 0 ? $13 : $23) : $14, (HEAP32[$5 >> 2] | 0) - $18 >> 2, $0 + 8 | 0);
   __ZNSt3__214__split_bufferImRNS_9allocatorImEEE18__construct_at_endEm($2, $1);
   __ZNSt3__26vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE($0, $2);
   __ZNSt3__214__split_bufferImRNS_9allocatorImEEED2Ev($2);
   break;
  }
 } else __ZNSt3__26vectorImNS_9allocatorImEEE18__construct_at_endEm($0, $1); while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE8__appendEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 do if ((HEAP32[$3 >> 2] | 0) - $6 >> 2 >>> 0 < $1 >>> 0) {
  $13 = ($6 - (HEAP32[$0 >> 2] | 0) >> 2) + $1 | 0;
  $14 = __ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0) | 0;
  if ($14 >>> 0 < $13 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
   $18 = HEAP32[$0 >> 2] | 0;
   $19 = (HEAP32[$3 >> 2] | 0) - $18 | 0;
   $23 = $19 >> 1;
   __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EmmS3_($2, $19 >> 2 >>> 0 < $14 >>> 1 >>> 0 ? ($23 >>> 0 < $13 >>> 0 ? $13 : $23) : $14, (HEAP32[$5 >> 2] | 0) - $18 >> 2, $0 + 8 | 0);
   __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEm($2, $1);
   __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($0, $2);
   __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($2);
   break;
  }
 } else __ZNSt3__26vectorIjNS_9allocatorIjEEE18__construct_at_endEm($0, $1); while (0);
 STACKTOP = sp;
 return;
}

function __sg_slot_alloc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $30 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(26183, 17628, 12949, 26206);
 if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(26183, 17628, 12949, 26206);
 if ((HEAP32[$5 >> 2] | 0) <= 0) ___assert_fail(26221, 17628, 12950, 26206);
 if ((HEAP32[$5 >> 2] | 0) >= (HEAP32[HEAP32[$3 >> 2] >> 2] | 0)) ___assert_fail(26221, 17628, 12950, 26206);
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) ___assert_fail(26269, 17628, 12951, 26206);
 if (!(HEAP32[HEAP32[$4 >> 2] >> 2] | 0)) {
  $30 = (HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$5 >> 2] << 2) | 0;
  $32 = (HEAP32[$30 >> 2] | 0) + 1 | 0;
  HEAP32[$30 >> 2] = $32;
  HEAP32[$6 >> 2] = $32;
  HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$6 >> 2] << 16 | HEAP32[$5 >> 2] & 65535;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return HEAP32[HEAP32[$4 >> 2] >> 2] | 0;
 } else ___assert_fail(26269, 17628, 12951, 26206);
 return 0;
}

function __sgl_slot_alloc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $30 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(26183, 19399, 2177, 37604);
 if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(26183, 19399, 2177, 37604);
 if ((HEAP32[$5 >> 2] | 0) <= 0) ___assert_fail(26221, 19399, 2178, 37604);
 if ((HEAP32[$5 >> 2] | 0) >= (HEAP32[HEAP32[$3 >> 2] >> 2] | 0)) ___assert_fail(26221, 19399, 2178, 37604);
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) ___assert_fail(26269, 19399, 2179, 37604);
 if (!(HEAP32[HEAP32[$4 >> 2] >> 2] | 0)) {
  $30 = (HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$5 >> 2] << 2) | 0;
  $32 = (HEAP32[$30 >> 2] | 0) + 1 | 0;
  HEAP32[$30 >> 2] = $32;
  HEAP32[$6 >> 2] = $32;
  HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$6 >> 2] << 16 | HEAP32[$5 >> 2] & 65535;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = 1;
  STACKTOP = sp;
  return HEAP32[HEAP32[$4 >> 2] >> 2] | 0;
 } else ___assert_fail(26269, 19399, 2179, 37604);
 return 0;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$011 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 $6 = __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISC_EERKT_($1, $4, $2) | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if (!$7) {
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_($5, $1, $3);
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSC_SC_($1, HEAP32[$4 >> 2] | 0, $6, HEAP32[$5 >> 2] | 0);
  $$0 = HEAP32[$5 >> 2] | 0;
  $$011 = 1;
 } else {
  $$0 = $7;
  $$011 = 0;
 }
 HEAP32[$0 >> 2] = $$0;
 HEAP8[$0 + 4 >> 0] = $$011;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 do if (((HEAP32[$3 >> 2] | 0) - $6 | 0) >>> 0 < $1 >>> 0) {
  $11 = $6 - (HEAP32[$0 >> 2] | 0) + $1 | 0;
  $12 = __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0) | 0;
  if ($12 >>> 0 < $11 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
   $16 = HEAP32[$0 >> 2] | 0;
   $17 = (HEAP32[$3 >> 2] | 0) - $16 | 0;
   $20 = $17 << 1;
   __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_($2, $17 >>> 0 < $12 >>> 1 >>> 0 ? ($20 >>> 0 < $11 >>> 0 ? $11 : $20) : $12, (HEAP32[$5 >> 2] | 0) - $16 | 0, $0 + 8 | 0);
   __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEm($2, $1);
   __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($0, $2);
   __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($2);
   break;
  }
 } else __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEm($0, $1); while (0);
 STACKTOP = sp;
 return;
}

function _fons__vertex($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAPF32[$7 >> 2] = $1;
 HEAPF32[$8 >> 2] = $2;
 HEAPF32[$9 >> 2] = $3;
 HEAPF32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = $5;
 HEAPF32[(HEAP32[$6 >> 2] | 0) + 80 + ((HEAP32[(HEAP32[$6 >> 2] | 0) + 20560 >> 2] << 1) + 0 << 2) >> 2] = +HEAPF32[$7 >> 2];
 HEAPF32[(HEAP32[$6 >> 2] | 0) + 80 + ((HEAP32[(HEAP32[$6 >> 2] | 0) + 20560 >> 2] << 1) + 1 << 2) >> 2] = +HEAPF32[$8 >> 2];
 HEAPF32[(HEAP32[$6 >> 2] | 0) + 8272 + ((HEAP32[(HEAP32[$6 >> 2] | 0) + 20560 >> 2] << 1) + 0 << 2) >> 2] = +HEAPF32[$9 >> 2];
 HEAPF32[(HEAP32[$6 >> 2] | 0) + 8272 + ((HEAP32[(HEAP32[$6 >> 2] | 0) + 20560 >> 2] << 1) + 1 << 2) >> 2] = +HEAPF32[$10 >> 2];
 HEAP32[(HEAP32[$6 >> 2] | 0) + 16464 + (HEAP32[(HEAP32[$6 >> 2] | 0) + 20560 >> 2] << 2) >> 2] = HEAP32[$11 >> 2];
 $56 = (HEAP32[$6 >> 2] | 0) + 20560 | 0;
 HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 1 | 0;
 HEAP8[$2 >> 0] = $1;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $$018 = HEAP32[$0 + 4 >> 2] | 0;
  $$019 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $$018 = $5 & 255;
  $$019 = 10;
 }
 if (($$018 | 0) == ($$019 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEmmmmmm($0, $$019, 1, $$019, $$019, 0);
  if ((HEAP8[$4 >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($6) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$4 >> 0] = $$018 + 1;
  $$pn = $0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = $$018 + 1;
  $$pn = $19;
 }
 $$0 = $$pn + $$018 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $2);
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + 1 | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i = 0, $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + 4 | 0;
 if (($4 | 0) == ($2 | 0)) {
  $$pre$phi11Z2D = $5;
  $$pre$phiZ2D = $0;
  $15 = HEAP32[$5 >> 2] | 0;
  $16 = $2;
 } else {
  $$06$i = $4;
  $9 = HEAP32[$5 >> 2] | 0;
  do {
   $$06$i = $$06$i + -24 | 0;
   __ZN8DrBitmapC2ERKS_($9 + -24 | 0, $$06$i);
   $9 = (HEAP32[$5 >> 2] | 0) + -24 | 0;
   HEAP32[$5 >> 2] = $9;
  } while (($$06$i | 0) != ($2 | 0));
  $$pre$phi11Z2D = $5;
  $$pre$phiZ2D = $0;
  $15 = $9;
  $16 = HEAP32[$0 >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $15;
 HEAP32[$$pre$phi11Z2D >> 2] = $16;
 $17 = $1 + 8 | 0;
 $18 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$17 >> 2] = $18;
 $20 = $0 + 8 | 0;
 $21 = $1 + 12 | 0;
 $22 = HEAP32[$20 >> 2] | 0;
 HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$21 >> 2] = $22;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i = 0, $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1 + 4 | 0;
 if (($4 | 0) == ($2 | 0)) {
  $$pre$phi11Z2D = $5;
  $$pre$phiZ2D = $0;
  $15 = HEAP32[$5 >> 2] | 0;
  $16 = $2;
 } else {
  $$06$i = $4;
  $9 = HEAP32[$5 >> 2] | 0;
  do {
   $$06$i = $$06$i + -16 | 0;
   __ZN6DrRectC2ERKS_($9 + -16 | 0, $$06$i);
   $9 = (HEAP32[$5 >> 2] | 0) + -16 | 0;
   HEAP32[$5 >> 2] = $9;
  } while (($$06$i | 0) != ($2 | 0));
  $$pre$phi11Z2D = $5;
  $$pre$phiZ2D = $0;
  $15 = $9;
  $16 = HEAP32[$0 >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $15;
 HEAP32[$$pre$phi11Z2D >> 2] = $16;
 $17 = $1 + 8 | 0;
 $18 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$17 >> 2] = $18;
 $20 = $0 + 8 | 0;
 $21 = $1 + 12 | 0;
 $22 = HEAP32[$20 >> 2] | 0;
 HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$21 >> 2] = $22;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function _stbi__extend_receive($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $47 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18368 >> 2] | 0) < (HEAP32[$3 >> 2] | 0)) _stbi__grow_buffer_unsafe(HEAP32[$2 >> 2] | 0);
 HEAP32[$5 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 18364 >> 2] >> 31;
 HEAP32[$4 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 18364 >> 2] << HEAP32[$3 >> 2] | (HEAP32[(HEAP32[$2 >> 2] | 0) + 18364 >> 2] | 0) >>> (32 - (HEAP32[$3 >> 2] | 0) | 0);
 if ((HEAP32[$3 >> 2] | 0) >= 0 & (HEAP32[$3 >> 2] | 0) < 17) {
  HEAP32[(HEAP32[$2 >> 2] | 0) + 18364 >> 2] = HEAP32[$4 >> 2] & ~HEAP32[9760 + (HEAP32[$3 >> 2] << 2) >> 2];
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & HEAP32[9760 + (HEAP32[$3 >> 2] << 2) >> 2];
  $47 = (HEAP32[$2 >> 2] | 0) + 18368 | 0;
  HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) - (HEAP32[$3 >> 2] | 0);
  STACKTOP = sp;
  return (HEAP32[$4 >> 2] | 0) + (HEAP32[9840 + (HEAP32[$3 >> 2] << 2) >> 2] & ~HEAP32[$5 >> 2]) | 0;
 } else ___assert_fail(45269, 43392, 1973, 45332);
 return 0;
}

function __ZN2Dr11IsSameColorERK7DrColorS2_d($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 8 | 0;
 $11 = sp;
 HEAPF64[$3 >> 3] = $2;
 HEAPF64[$4 >> 3] = +__ZNK7DrColor4redFEv($0);
 HEAPF64[$5 >> 3] = +__ZNK7DrColor4redFEv($1);
 if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($4, $5, $3) | 0) {
  HEAPF64[$6 >> 3] = +__ZNK7DrColor6greenFEv($0);
  HEAPF64[$7 >> 3] = +__ZNK7DrColor6greenFEv($1);
  if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($6, $7, $3) | 0) {
   HEAPF64[$8 >> 3] = +__ZNK7DrColor5blueFEv($0);
   HEAPF64[$9 >> 3] = +__ZNK7DrColor5blueFEv($1);
   if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($8, $9, $3) | 0) {
    HEAPF64[$10 >> 3] = +__ZNK7DrColor6alphaFEv($0);
    HEAPF64[$11 >> 3] = +__ZNK7DrColor6alphaFEv($1);
    $26 = __ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($10, $11, $3) | 0;
   } else $26 = 0;
   $25 = $26;
  } else $25 = 0;
  $24 = $25;
 } else $24 = 0;
 STACKTOP = sp;
 return $24 | 0;
}

function __ZN7DrColorC2ERKhS1_S1_S1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp + 2 | 0;
 $6 = sp + 1 | 0;
 $7 = sp;
 HEAP8[$0 >> 0] = 0;
 $8 = $0 + 1 | 0;
 HEAP8[$8 >> 0] = 0;
 $9 = $0 + 2 | 0;
 HEAP8[$9 >> 0] = 0;
 $10 = $0 + 3 | 0;
 HEAP8[$10 >> 0] = -1;
 HEAP8[$5 >> 0] = HEAP8[$1 >> 0] | 0;
 HEAP8[$6 >> 0] = __Zli3_ucy(0, 0) | 0;
 HEAP8[$7 >> 0] = __Zli3_ucy(255, 0) | 0;
 HEAP8[$0 >> 0] = __ZN2Dr5ClampIhEET_RKS1_S3_S3_($5, $6, $7) | 0;
 HEAP8[$5 >> 0] = HEAP8[$2 >> 0] | 0;
 HEAP8[$6 >> 0] = __Zli3_ucy(0, 0) | 0;
 HEAP8[$7 >> 0] = __Zli3_ucy(255, 0) | 0;
 HEAP8[$8 >> 0] = __ZN2Dr5ClampIhEET_RKS1_S3_S3_($5, $6, $7) | 0;
 HEAP8[$5 >> 0] = HEAP8[$3 >> 0] | 0;
 HEAP8[$6 >> 0] = __Zli3_ucy(0, 0) | 0;
 HEAP8[$7 >> 0] = __Zli3_ucy(255, 0) | 0;
 HEAP8[$9 >> 0] = __ZN2Dr5ClampIhEET_RKS1_S3_S3_($5, $6, $7) | 0;
 HEAP8[$5 >> 0] = HEAP8[$4 >> 0] | 0;
 HEAP8[$6 >> 0] = __Zli3_ucy(0, 0) | 0;
 HEAP8[$7 >> 0] = __Zli3_ucy(255, 0) | 0;
 HEAP8[$10 >> 0] = __ZN2Dr5ClampIhEET_RKS1_S3_S3_($5, $6, $7) | 0;
 STACKTOP = sp;
 return;
}

function _sgl_shutdown() {
 var $$byval_copy3 = 0, $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy3 = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2771, 19727);
 _free(HEAP32[539428] | 0);
 HEAP32[539428] = 0;
 _free(HEAP32[539429] | 0);
 HEAP32[539429] = 0;
 _free(HEAP32[539430] | 0);
 HEAP32[539430] = 0;
 _sg_push_debug_group(19519);
 HEAP32[$$byval_copy3 >> 2] = HEAP32[539441];
 _sg_destroy_buffer($$byval_copy3);
 HEAP32[$$byval_copy3 >> 2] = HEAP32[539442];
 _sg_destroy_image($$byval_copy3);
 HEAP32[$$byval_copy3 >> 2] = HEAP32[539443];
 _sg_destroy_shader($$byval_copy3);
 HEAP32[$0 >> 2] = 0;
 while (1) {
  if ((HEAP32[$0 >> 2] | 0) >= (HEAP32[539489] | 0)) break;
  HEAP32[$1 >> 2] = (HEAP32[539493] | 0) + (HEAP32[$0 >> 2] << 5);
  HEAP32[$2 >> 2] = __sgl_make_pip_id(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$2 >> 2];
  __sgl_destroy_pipeline($$byval_copy3);
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 }
 _sg_pop_debug_group();
 __sgl_discard_pipeline_pool();
 HEAP32[539414] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__27__sort5IR7comparePmEEjT0_S4_S4_S4_S4_T_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $16 = 0, $18 = 0, $22 = 0, $29 = 0, $6 = 0;
 $6 = __ZNSt3__27__sort4IR7comparePmEEjT0_S4_S4_S4_T_($0, $1, $2, $3, $5) | 0;
 if (__ZN7compareclEmm($5, HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0) {
  $10 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$4 >> 2] = $10;
  $12 = $6 + 1 | 0;
  if (__ZN7compareclEmm($5, HEAP32[$3 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0) {
   $16 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $16;
   $18 = $6 + 2 | 0;
   if (__ZN7compareclEmm($5, HEAP32[$2 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) {
    $22 = HEAP32[$1 >> 2] | 0;
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $22;
    if (__ZN7compareclEmm($5, HEAP32[$1 >> 2] | 0, HEAP32[$0 >> 2] | 0) | 0) {
     $29 = HEAP32[$0 >> 2] | 0;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$1 >> 2] = $29;
     $$0 = $6 + 4 | 0;
    } else $$0 = $6 + 3 | 0;
   } else $$0 = $18;
  } else $$0 = $12;
 } else $$0 = $6;
 return $$0 | 0;
}

function _HMM_MultiplyMat4($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= 4) break;
  HEAP32[$5 >> 2] = 0;
  while (1) {
   if ((HEAP32[$5 >> 2] | 0) >= 4) break;
   HEAPF32[$6 >> 2] = 0.0;
   HEAP32[$7 >> 2] = 0;
   while (1) {
    if ((HEAP32[$7 >> 2] | 0) >= 4) break;
    HEAPF32[$6 >> 2] = +HEAPF32[$6 >> 2] + +HEAPF32[$1 + (HEAP32[$7 >> 2] << 4) + (HEAP32[$5 >> 2] << 2) >> 2] * +HEAPF32[$2 + (HEAP32[$4 >> 2] << 4) + (HEAP32[$7 >> 2] << 2) >> 2];
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
   }
   HEAPF32[$3 + (HEAP32[$4 >> 2] << 4) + (HEAP32[$5 >> 2] << 2) >> 2] = +HEAPF32[$6 >> 2];
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
  }
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 dest = $0;
 src = $3;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029 = 0, $$1 = 0, $$pn = 0, $13 = 0, $3 = 0, $5 = 0, $7 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else {
  $3 = HEAP8[$0 >> 0] | 0;
  if ($3 << 24 >> 24 != 95) {
   if ((($3 << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
    $$1 = $0;
    break;
   }
   $$pn = $0;
   while (1) {
    $$0 = $$pn + 1 | 0;
    if (($$0 | 0) == ($1 | 0)) {
     $$1 = $1;
     break L1;
    }
    if (((HEAP8[$$0 >> 0] | 0) + -48 | 0) >>> 0 < 10) $$pn = $$0; else {
     $$1 = $$0;
     break L1;
    }
   }
  }
  $5 = $0 + 1 | 0;
  if (($5 | 0) == ($1 | 0)) $$1 = $0; else {
   $7 = HEAP8[$5 >> 0] | 0;
   if ((($7 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
    $$1 = $0 + 2 | 0;
    break;
   }
   if ($7 << 24 >> 24 == 95) {
    $$029 = $0 + 2 | 0;
    while (1) {
     if (($$029 | 0) == ($1 | 0)) {
      $$1 = $0;
      break L1;
     }
     $13 = HEAP8[$$029 >> 0] | 0;
     if ((($13 << 24 >> 24) + -48 | 0) >>> 0 >= 10) break;
     $$029 = $$029 + 1 | 0;
    }
    return ($13 << 24 >> 24 == 95 ? $$029 + 1 | 0 : $0) | 0;
   } else $$1 = $0;
  }
 } while (0);
 return $$1 | 0;
}

function _fonsPushState($0) {
 $0 = $0 | 0;
 var $1 = 0, $24 = 0, $31 = 0, $33 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $6 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 21052 >> 2] | 0) >= 20) {
  if (!(HEAP32[$6 + 21056 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$1 >> 2] | 0) + 21056 >> 2] & 3](HEAP32[(HEAP32[$1 >> 2] | 0) + 21060 >> 2] | 0, 3, 0);
  STACKTOP = sp;
  return;
 } else {
  if ((HEAP32[$6 + 21052 >> 2] | 0) > 0) {
   $24 = (HEAP32[$1 >> 2] | 0) + 20572 + ((HEAP32[(HEAP32[$1 >> 2] | 0) + 21052 >> 2] | 0) * 24 | 0) | 0;
   $31 = (HEAP32[$1 >> 2] | 0) + 20572 + (((HEAP32[(HEAP32[$1 >> 2] | 0) + 21052 >> 2] | 0) - 1 | 0) * 24 | 0) | 0;
   HEAP32[$24 >> 2] = HEAP32[$31 >> 2];
   HEAP32[$24 + 4 >> 2] = HEAP32[$31 + 4 >> 2];
   HEAP32[$24 + 8 >> 2] = HEAP32[$31 + 8 >> 2];
   HEAP32[$24 + 12 >> 2] = HEAP32[$31 + 12 >> 2];
   HEAP32[$24 + 16 >> 2] = HEAP32[$31 + 16 >> 2];
   HEAP32[$24 + 20 >> 2] = HEAP32[$31 + 20 >> 2];
  }
  $33 = (HEAP32[$1 >> 2] | 0) + 21052 | 0;
  HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
  STACKTOP = sp;
  return;
 }
}

function __sfetch_pool_discard($0) {
 $0 = $0 | 0;
 var $1 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(26094, 21538, 1357, 38387);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] = 0;
 }
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] = 0;
 }
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0)) {
  $31 = HEAP32[$1 >> 2] | 0;
  HEAP32[$31 >> 2] = 0;
  $32 = HEAP32[$1 >> 2] | 0;
  $33 = $32 + 4 | 0;
  HEAP32[$33 >> 2] = 0;
  $34 = HEAP32[$1 >> 2] | 0;
  $35 = $34 + 20 | 0;
  HEAP8[$35 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 0;
 $31 = HEAP32[$1 >> 2] | 0;
 HEAP32[$31 >> 2] = 0;
 $32 = HEAP32[$1 >> 2] | 0;
 $33 = $32 + 4 | 0;
 HEAP32[$33 >> 2] = 0;
 $34 = HEAP32[$1 >> 2] | 0;
 $35 = $34 + 20 | 0;
 HEAP8[$35 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __sg_discard_pools($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 116 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 116 >> 2] = 0;
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 112 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 112 >> 2] = 0;
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 108 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 108 >> 2] = 0;
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 104 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 104 >> 2] = 0;
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 100 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 100 >> 2] = 0;
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 96 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 96 >> 2] = 0;
  __sg_discard_pool((HEAP32[$1 >> 2] | 0) + 80 | 0);
  __sg_discard_pool((HEAP32[$1 >> 2] | 0) + 64 | 0);
  __sg_discard_pool((HEAP32[$1 >> 2] | 0) + 48 | 0);
  __sg_discard_pool((HEAP32[$1 >> 2] | 0) + 32 | 0);
  __sg_discard_pool((HEAP32[$1 >> 2] | 0) + 16 | 0);
  __sg_discard_pool(HEAP32[$1 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(24943, 17628, 12922, 26076);
}

function __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = (((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $9 = __ZNKSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $16 = ((HEAP32[$0 + 8 >> 2] | 0) - $14 | 0) / 24 | 0;
  $19 = $16 << 1;
  __ZNSt3__214__split_bufferI8DrBitmapRNS_9allocatorIS1_EEEC2EmmS4_($2, $16 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, ((HEAP32[$3 >> 2] | 0) - $14 | 0) / 24 | 0, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  __ZN8DrBitmapC2ERKS_(HEAP32[$24 >> 2] | 0, $1);
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 24;
  __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
  __ZNSt3__214__split_bufferI8DrBitmapRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __sg_gl_destroy_image($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(18597, 17628, 5946, 25921);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5947, 25921);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  $14 = (HEAP32[$1 >> 2] | 0) + 88 | 0;
  if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 + 68 >> 2] | 0)) break;
  if (HEAP32[$14 + 12 + (HEAP32[$2 >> 2] << 2) >> 2] | 0) {
   __sg_gl_cache_invalidate_texture(HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 12 + (HEAP32[$2 >> 2] << 2) >> 2] | 0);
   if (!(HEAP8[(HEAP32[$1 >> 2] | 0) + 88 + 20 >> 0] & 1)) _glDeleteTextures(1, (HEAP32[$1 >> 2] | 0) + 88 + 12 + (HEAP32[$2 >> 2] << 2) | 0);
  }
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 if (HEAP32[$14 + 4 >> 2] | 0) _glDeleteRenderbuffers(1, (HEAP32[$1 >> 2] | 0) + 88 + 4 | 0);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 88 + 8 >> 2] | 0) _glDeleteRenderbuffers(1, (HEAP32[$1 >> 2] | 0) + 88 + 8 | 0);
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(25839, 17628, 5962, 25921);
}

function __sapp_emsc_size_changed($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 HEAP32[sp + 24 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[sp + 16 >> 2] = $2;
 _emscripten_get_element_css_size(51220, $6 | 0, $7 | 0) | 0;
 if (+HEAPF64[$6 >> 3] < 1.0) HEAPF64[$6 >> 3] = +(HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0); else HEAP32[12728] = ~~+HEAPF64[$6 >> 3];
 if (+HEAPF64[$7 >> 3] < 1.0) HEAPF64[$7 >> 3] = +(HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0); else HEAP32[12729] = ~~+HEAPF64[$7 >> 3];
 if (HEAP8[50860] & 1) HEAPF32[12734] = +_emscripten_get_device_pixel_ratio();
 HEAP32[12730] = ~~(+HEAPF64[$6 >> 3] * +HEAPF32[12734]);
 HEAP32[12731] = ~~(+HEAPF64[$7 >> 3] * +HEAPF32[12734]);
 if (!((HEAP32[12730] | 0) > 0 & (HEAP32[12731] | 0) > 0)) ___assert_fail(24774, 12505, 4145, 24838);
 _emscripten_set_canvas_element_size(51220, HEAP32[12730] | 0, HEAP32[12731] | 0) | 0;
 if (!(__sapp_events_enabled() | 0)) {
  STACKTOP = sp;
  return 1;
 }
 __sapp_init_event(14);
 __sapp_call_event(50952) | 0;
 STACKTOP = sp;
 return 1;
}

function _fons__tmpalloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $17 = 0, $2 = 0, $3 = 0, $4 = 0, $40 = 0, $44 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 15 & -16;
 $17 = HEAP32[$6 >> 2] | 0;
 if (((HEAP32[(HEAP32[$6 >> 2] | 0) + 20568 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) <= 64e3) {
  HEAP32[$5 >> 2] = (HEAP32[$17 + 20564 >> 2] | 0) + (HEAP32[(HEAP32[$6 >> 2] | 0) + 20568 >> 2] | 0);
  $40 = (HEAP32[$6 >> 2] | 0) + 20568 | 0;
  HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + (HEAP32[$3 >> 2] | 0);
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
  $44 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $44 | 0;
 }
 if (HEAP32[$17 + 21056 >> 2] | 0) FUNCTION_TABLE_viii[HEAP32[(HEAP32[$6 >> 2] | 0) + 21056 >> 2] & 3](HEAP32[(HEAP32[$6 >> 2] | 0) + 21060 >> 2] | 0, 2, (HEAP32[(HEAP32[$6 >> 2] | 0) + 20568 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0);
 HEAP32[$2 >> 2] = 0;
 $44 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $44 | 0;
}

function _stbi__readval($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $19 = 0, $24 = 0, $3 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = 128;
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= 4) {
   label = 8;
   break;
  }
  if (HEAP32[$5 >> 2] & HEAP32[$7 >> 2] | 0) {
   if (_stbi__at_eof(HEAP32[$4 >> 2] | 0) | 0) {
    label = 5;
    break;
   }
   $24 = _stbi__get8(HEAP32[$4 >> 2] | 0) | 0;
   HEAP8[(HEAP32[$6 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) >> 0] = $24;
  }
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] >> 1;
 }
 if ((label | 0) == 5) {
  $19 = (_stbi__err(43817) | 0) != 0;
  HEAP32[$3 >> 2] = $19 ? 0 : 0;
  $33 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 } else if ((label | 0) == 8) {
  HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
  $33 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 return 0;
}

function _sg_apply_uniforms($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14930, 18846);
 if (!((HEAP32[$3 >> 2] | 0) == 0 | (HEAP32[$3 >> 2] | 0) == 1)) ___assert_fail(18864, 17628, 14931, 18846);
 if (!((HEAP32[$4 >> 2] | 0) >= 0 & (HEAP32[$4 >> 2] | 0) < 4)) ___assert_fail(18925, 17628, 14932, 18846);
 if (!(HEAP32[$5 >> 2] | 0)) ___assert_fail(18980, 17628, 14933, 18846);
 if (!(HEAP32[HEAP32[$5 >> 2] >> 2] | 0)) ___assert_fail(18980, 17628, 14933, 18846);
 if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(18980, 17628, 14933, 18846);
 if (!(__sg_validate_apply_uniforms(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0)) {
  HEAP8[2156470] = 0;
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[2156468] & 1)) {
  STACKTOP = sp;
  return;
 }
 __sg_apply_uniforms(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_gl_teximage_type($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do switch (HEAP32[$2 >> 2] | 0) {
 case 27:
 case 25:
 case 23:
 case 13:
 case 11:
 case 4:
 case 2:
  {
   HEAP32[$1 >> 2] = 5121;
   break;
  }
 case 26:
 case 24:
 case 14:
 case 12:
 case 5:
 case 3:
  {
   HEAP32[$1 >> 2] = 5120;
   break;
  }
 case 35:
 case 33:
 case 20:
 case 18:
 case 8:
 case 6:
  {
   HEAP32[$1 >> 2] = 5123;
   break;
  }
 case 36:
 case 34:
 case 21:
 case 19:
 case 9:
 case 7:
  {
   HEAP32[$1 >> 2] = 5122;
   break;
  }
 case 37:
 case 22:
 case 10:
  {
   HEAP32[$1 >> 2] = 5131;
   break;
  }
 case 38:
 case 30:
 case 15:
  {
   HEAP32[$1 >> 2] = 5125;
   break;
  }
 case 39:
 case 31:
 case 16:
  {
   HEAP32[$1 >> 2] = 5124;
   break;
  }
 case 40:
 case 32:
 case 17:
  {
   HEAP32[$1 >> 2] = 5126;
   break;
  }
 case 41:
  {
   HEAP32[$1 >> 2] = 5123;
   break;
  }
 case 42:
  {
   HEAP32[$1 >> 2] = 34042;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4647, 33481);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function _fonsDeleteInternal($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $20 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] & 31](HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  $20 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0)) break;
  _fons__freeFont(HEAP32[(HEAP32[$20 + 64 >> 2] | 0) + (HEAP32[$2 >> 2] << 2) >> 2] | 0);
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 if (HEAP32[$20 + 68 >> 2] | 0) _fons__deleteAtlas(HEAP32[(HEAP32[$1 >> 2] | 0) + 68 >> 2] | 0);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 64 >> 2] | 0) _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 64 >> 2] | 0);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0) _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 20564 >> 2] | 0) _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 20564 >> 2] | 0);
 _free(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbi__high_bit($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $37 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = 0;
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAP32[$1 >> 2] = -1;
  $37 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) >>> 0 >= 65536) {
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 16;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) >>> 16;
 }
 if ((HEAP32[$2 >> 2] | 0) >>> 0 >= 256) {
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 8;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) >>> 8;
 }
 if ((HEAP32[$2 >> 2] | 0) >>> 0 >= 16) {
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 4;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) >>> 4;
 }
 if ((HEAP32[$2 >> 2] | 0) >>> 0 >= 4) {
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 2;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) >>> 2;
 }
 if ((HEAP32[$2 >> 2] | 0) >>> 0 >= 2) {
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) >>> 1;
 }
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 $37 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $37 | 0;
}

function __sg_vertexformat_bytesize($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 8;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 12;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 16;
   break;
  }
 case 5:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 6:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 7:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 8:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 9:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 10:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 11:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 12:
  {
   HEAP32[$1 >> 2] = 8;
   break;
  }
 case 13:
  {
   HEAP32[$1 >> 2] = 8;
   break;
  }
 case 14:
  {
   HEAP32[$1 >> 2] = 8;
   break;
  }
 case 15:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 0:
  {
   HEAP32[$1 >> 2] = 0;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 3834, 34140);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNSt3__218__insertion_sort_3IR7comparePmEEvT0_S4_T_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$lcssa = 0, $$02934 = 0, $$03033 = 0, $$03033$phi = 0, $$1 = 0, $$1$phi = 0, $10 = 0, $13 = 0, $16 = 0, $3 = 0, $5 = 0;
 $3 = $0 + 8 | 0;
 __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($0, $0 + 4 | 0, $3, $2) | 0;
 $5 = $0 + 12 | 0;
 if (($5 | 0) != ($1 | 0)) {
  $$02934 = $5;
  $$03033 = $3;
  while (1) {
   if (__ZN7compareclEmm($2, HEAP32[$$02934 >> 2] | 0, HEAP32[$$03033 >> 2] | 0) | 0) {
    $10 = HEAP32[$$02934 >> 2] | 0;
    $$0 = $$03033;
    $$1 = $$02934;
    while (1) {
     HEAP32[$$1 >> 2] = HEAP32[$$0 >> 2];
     if (($$0 | 0) == ($0 | 0)) {
      $$0$lcssa = $0;
      break;
     }
     $13 = $$0 + -4 | 0;
     if (__ZN7compareclEmm($2, $10, HEAP32[$13 >> 2] | 0) | 0) {
      $$1$phi = $$0;
      $$0 = $13;
      $$1 = $$1$phi;
     } else {
      $$0$lcssa = $$0;
      break;
     }
    }
    HEAP32[$$0$lcssa >> 2] = $10;
   }
   $16 = $$02934 + 4 | 0;
   if (($16 | 0) == ($1 | 0)) break; else {
    $$03033$phi = $$02934;
    $$02934 = $16;
    $$03033 = $$03033$phi;
   }
  }
 }
 return;
}

function _stbtt__cff_index_get($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $2;
 _stbtt__buf_seek($1, 0);
 HEAP32[$4 >> 2] = _stbtt__buf_get($1, 2) | 0;
 HEAP32[$5 >> 2] = (_stbtt__buf_get8($1) | 0) & 255;
 if ((HEAP32[$3 >> 2] | 0) < 0) ___assert_fail(40362, 40159, 1195, 40382);
 if ((HEAP32[$3 >> 2] | 0) >= (HEAP32[$4 >> 2] | 0)) ___assert_fail(40362, 40159, 1195, 40382);
 if ((HEAP32[$5 >> 2] | 0) >= 1 & (HEAP32[$5 >> 2] | 0) <= 4) {
  _stbtt__buf_skip($1, Math_imul(HEAP32[$3 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0);
  HEAP32[$6 >> 2] = _stbtt__buf_get($1, HEAP32[$5 >> 2] | 0) | 0;
  HEAP32[$7 >> 2] = _stbtt__buf_get($1, HEAP32[$5 >> 2] | 0) | 0;
  $31 = 2 + (Math_imul((HEAP32[$4 >> 2] | 0) + 1 | 0, HEAP32[$5 >> 2] | 0) | 0) | 0;
  _stbtt__buf_range($0, $1, $31 + (HEAP32[$6 >> 2] | 0) | 0, (HEAP32[$7 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(40280, 40159, 1196, 40382);
}

function __sg_gl_cache_bind_texture($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if ((HEAP32[$3 >> 2] | 0) >= 12) ___assert_fail(33332, 17628, 5495, 33406);
 if ((HEAP32[$3 >> 2] | 0) >= (HEAP32[539413] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = 2157516 + (HEAP32[$3 >> 2] << 3);
 if ((HEAP32[HEAP32[$6 >> 2] >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) if ((HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[$5 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __sg_gl_cache_active_texture(33984 + (HEAP32[$3 >> 2] | 0) | 0);
 if ((HEAP32[$4 >> 2] | 0) != (HEAP32[HEAP32[$6 >> 2] >> 2] | 0)) if (HEAP32[HEAP32[$6 >> 2] >> 2] | 0) _glBindTexture(HEAP32[HEAP32[$6 >> 2] >> 2] | 0, 0);
 if (HEAP32[$4 >> 2] | 0) _glBindTexture(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
 HEAP32[HEAP32[$6 >> 2] >> 2] = HEAP32[$4 >> 2];
 HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] = HEAP32[$5 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEmmmmmm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$sroa$speculated = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0;
 if ((-17 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $22 = HEAP32[$0 >> 2] | 0; else $22 = $0;
 if ($1 >>> 0 < 2147483623) {
  $13 = $2 + $1 | 0;
  $14 = $1 << 1;
  $$sroa$speculated = $13 >>> 0 < $14 >>> 0 ? $14 : $13;
  $19 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $19 = -17;
 $20 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($19) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($20, $22, $4) | 0;
 $23 = $3 - $4 | 0;
 if ($23 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($20 + $4 + $5 | 0, $22 + $4 | 0, $23) | 0;
 if (($1 | 0) != 10) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($22);
 HEAP32[$0 >> 2] = $20;
 HEAP32[$0 + 8 >> 2] = $19 | -2147483648;
 return;
}

function __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $9 = __ZNKSt3__26vectorI6DrRectNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 3;
  __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEEC2EmmS4_($2, $15 >> 4 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 4, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  __ZN6DrRectC2ERKS_(HEAP32[$24 >> 2] | 0, $1);
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 16;
  __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
  __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 4) + 1 | 0;
 $9 = __ZNKSt3__26vectorI6DrRectNS_9allocatorIS1_EEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 3;
  __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEEC2EmmS4_($2, $15 >> 4 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 4, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  __ZN6DrRectC2ERKS_(HEAP32[$24 >> 2] | 0, $1);
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 16;
  __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $2);
  __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $4 = 0, $5 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $4 = sp + 144 | 0;
 $5 = sp;
 _memcpy($5 | 0, 11160, 144) | 0;
 if (($1 + -1 | 0) >>> 0 > 2147483646) if (!$1) {
  $$014 = $4;
  $$015 = 1;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
 } else {
  $$014 = $0;
  $$015 = $1;
  label = 4;
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0;
  $spec$select = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015;
  HEAP32[$5 + 48 >> 2] = $spec$select;
  $14 = $5 + 20 | 0;
  HEAP32[$14 >> 2] = $$014;
  HEAP32[$5 + 44 >> 2] = $$014;
  $16 = $$014 + $spec$select | 0;
  $17 = $5 + 16 | 0;
  HEAP32[$17 >> 2] = $16;
  HEAP32[$5 + 28 >> 2] = $16;
  $19 = _vfprintf($5, $2, $3) | 0;
  if (!$spec$select) $$0 = $19; else {
   $21 = HEAP32[$14 >> 2] | 0;
   HEAP8[$21 + ((($21 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN13TPPLPartition16Triangulate_MONOEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$011$017 = 0, $$sroa$011$018 = 0, $11 = 0, $3 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $3;
 $4 = $3 + 4 | 0;
 HEAP32[$4 >> 2] = $3;
 HEAP32[$3 + 8 >> 2] = 0;
 L1 : do if (!(__ZN13TPPLPartition17MonotonePartitionEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($0, $1, $3) | 0)) $$0 = 0; else {
  $$sroa$011$017 = HEAP32[$4 >> 2] | 0;
  $8 = $$sroa$011$017;
  if (($3 | 0) == ($8 | 0)) $$0 = 1; else {
   $$sroa$011$018 = $$sroa$011$017;
   $11 = $8;
   while (1) {
    if (!(__ZN13TPPLPartition19TriangulateMonotoneEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE(0, $$sroa$011$018 + 8 | 0, $2) | 0)) {
     $$0 = 0;
     break L1;
    }
    $$sroa$011$018 = HEAP32[$11 + 4 >> 2] | 0;
    $11 = $$sroa$011$018;
    if (($3 | 0) == ($11 | 0)) {
     $$0 = 1;
     break;
    }
   }
  }
 } while (0);
 __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($3);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2INS_11__wrap_iterIPKS1_EEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISA_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueESA_E4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $7 = HEAP32[$1 >> 2] | 0;
 $8 = HEAP32[$2 >> 2] | 0;
 $9 = $8 - $7 | 0;
 $10 = $9 >> 4;
 if ($9 | 0) {
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8allocateEm($0, $10);
  HEAP32[$3 >> 2] = $7;
  HEAP32[$4 >> 2] = $8;
  HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$4 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPKS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m($0, $$byval_copy, $$byval_copy1, $10);
 }
 STACKTOP = sp;
 return;
}

function __sg_gl_blend_factor($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 0;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 1;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 768;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 769;
   break;
  }
 case 5:
  {
   HEAP32[$1 >> 2] = 770;
   break;
  }
 case 6:
  {
   HEAP32[$1 >> 2] = 771;
   break;
  }
 case 7:
  {
   HEAP32[$1 >> 2] = 774;
   break;
  }
 case 8:
  {
   HEAP32[$1 >> 2] = 775;
   break;
  }
 case 9:
  {
   HEAP32[$1 >> 2] = 772;
   break;
  }
 case 10:
  {
   HEAP32[$1 >> 2] = 773;
   break;
  }
 case 11:
  {
   HEAP32[$1 >> 2] = 776;
   break;
  }
 case 12:
  {
   HEAP32[$1 >> 2] = 32769;
   break;
  }
 case 13:
  {
   HEAP32[$1 >> 2] = 32770;
   break;
  }
 case 14:
  {
   HEAP32[$1 >> 2] = 32771;
   break;
  }
 case 15:
  {
   HEAP32[$1 >> 2] = 32772;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4550, 36184);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZN13TPPLPartition14Triangulate_ECEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$011$017 = 0, $$sroa$011$018 = 0, $11 = 0, $3 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $3;
 $4 = $3 + 4 | 0;
 HEAP32[$4 >> 2] = $3;
 HEAP32[$3 + 8 >> 2] = 0;
 L1 : do if (!(__ZN13TPPLPartition11RemoveHolesEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($0, $1, $3) | 0)) $$0 = 0; else {
  $$sroa$011$017 = HEAP32[$4 >> 2] | 0;
  $8 = $$sroa$011$017;
  if (($3 | 0) == ($8 | 0)) $$0 = 1; else {
   $$sroa$011$018 = $$sroa$011$017;
   $11 = $8;
   while (1) {
    if (!(__ZN13TPPLPartition14Triangulate_ECEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE(0, $$sroa$011$018 + 8 | 0, $2) | 0)) {
     $$0 = 0;
     break L1;
    }
    $$sroa$011$018 = HEAP32[$11 + 4 >> 2] | 0;
    $11 = $$sroa$011$018;
    if (($3 | 0) == ($11 | 0)) {
     $$0 = 1;
     break;
    }
   }
  }
 } while (0);
 __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($3);
 STACKTOP = sp;
 return $$0 | 0;
}

function _stbi__jpeg_reset($0) {
 $0 = $0 | 0;
 var $1 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18368 >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18364 >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18376 >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + 216 + 24 >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + 144 + 24 >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + 72 + 24 >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18076 + 24 >> 2] = 0;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 18372 >> 0] = -1;
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 18436 >> 2] | 0)) {
  $34 = 2147483647;
  $32 = HEAP32[$1 >> 2] | 0;
  $33 = $32 + 18440 | 0;
  HEAP32[$33 >> 2] = $34;
  $35 = HEAP32[$1 >> 2] | 0;
  $36 = $35 + 18400 | 0;
  HEAP32[$36 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $34 = HEAP32[(HEAP32[$1 >> 2] | 0) + 18436 >> 2] | 0;
 $32 = HEAP32[$1 >> 2] | 0;
 $33 = $32 + 18440 | 0;
 HEAP32[$33 >> 2] = $34;
 $35 = HEAP32[$1 >> 2] | 0;
 $36 = $35 + 18400 | 0;
 HEAP32[$36 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _stbi__zhuffman_decode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $26 = 0, $3 = 0, $31 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) < 16) _stbi__fill_bits(HEAP32[$3 >> 2] | 0);
 HEAP32[$5 >> 2] = HEAPU16[(HEAP32[$4 >> 2] | 0) + ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 511) << 1) >> 1];
 if (HEAP32[$5 >> 2] | 0) {
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2] >> 9;
  $26 = (HEAP32[$3 >> 2] | 0) + 12 | 0;
  HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) >>> (HEAP32[$6 >> 2] | 0);
  $31 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) - (HEAP32[$6 >> 2] | 0);
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2] & 511;
  $39 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 } else {
  HEAP32[$2 >> 2] = _stbi__zhuffman_decode_slowpath(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  $39 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0;
}

function _sapp_sgcontext($0) {
 $0 = $0 | 0;
 var $1 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $1 = sp;
 dest = $1;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$1 >> 2] = _sapp_color_format() | 0;
 HEAP32[$1 + 4 >> 2] = _sapp_depth_format() | 0;
 HEAP32[$1 + 8 >> 2] = _sapp_sample_count() | 0;
 HEAP8[$1 + 12 >> 0] = (_sapp_gles2() | 0) & 1;
 HEAP32[$1 + 16 >> 2] = _sapp_metal_get_device() | 0;
 HEAP32[$1 + 16 + 4 >> 2] = 1;
 HEAP32[$1 + 16 + 12 >> 2] = 2;
 HEAP32[$1 + 40 >> 2] = _sapp_d3d11_get_device() | 0;
 HEAP32[$1 + 40 + 4 >> 2] = _sapp_d3d11_get_device_context() | 0;
 HEAP32[$1 + 40 + 8 >> 2] = 3;
 HEAP32[$1 + 40 + 16 >> 2] = 4;
 HEAP32[$1 + 68 >> 2] = _sapp_wgpu_get_device() | 0;
 HEAP32[$1 + 68 + 4 >> 2] = 5;
 HEAP32[$1 + 68 + 12 >> 2] = 6;
 HEAP32[$1 + 68 + 20 >> 2] = 7;
 dest = $0;
 src = $1;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 3) + 1 | 0;
 $9 = __ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 2;
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($2, $15 >> 3 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 3, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAPF64[$25 >> 3] = +HEAPF64[$1 >> 3];
  HEAP32[$24 >> 2] = $25 + 8;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($0, $2);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZN10DrPolygonF24ensureWindingOrientationERNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE19Winding_Orientation($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = __ZN10DrPolygonF22findWindingOrientationERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE($0) | 0;
 if (($1 | 0) == 1 & ($3 | 0) == 0) label = 3; else if (($1 | 0) == 0 & ($3 | 0) == 1) label = 3;
 if ((label | 0) == 3) {
  $8 = HEAP32[$0 >> 2] | 0;
  $10 = HEAP32[$0 + 4 >> 2] | 0;
  if (($8 | 0) != ($10 | 0)) {
   $12 = $10 + -16 | 0;
   if ($8 >>> 0 < $12 >>> 0) {
    $14 = $8;
    $15 = $12;
    do {
     HEAP32[$2 >> 2] = HEAP32[$14 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$14 + 12 >> 2];
     __ZN8DrPointFaSERKS_($14, $15) | 0;
     __ZN8DrPointFaSERKS_($15, $2) | 0;
     $14 = $14 + 16 | 0;
     $15 = $15 + -16 | 0;
    } while ($14 >>> 0 < $15 >>> 0);
   }
  }
 }
 STACKTOP = sp;
 return;
}

function _fons__tt_buildGlyphBitmap($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 32 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 20 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 12 | 0;
 $17 = sp + 8 | 0;
 $18 = sp + 4 | 0;
 $19 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAPF32[sp + 28 >> 2] = $2;
 HEAPF32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAP32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = $9;
 _stbtt_GetGlyphHMetrics(HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0);
 _stbtt_GetGlyphBitmapBox(HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, +HEAPF32[$13 >> 2], +HEAPF32[$13 >> 2], HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$19 >> 2] | 0);
 STACKTOP = sp;
 return 1;
}

function __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$026 = 0, $10 = 0, $15 = 0, $17 = 0, $22 = 0, $6 = 0, $9 = 0;
 $6 = __ZN7compareclEmm($3, HEAP32[$1 >> 2] | 0, HEAP32[$0 >> 2] | 0) | 0;
 $9 = __ZN7compareclEmm($3, HEAP32[$2 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
 do if ($6) {
  $17 = HEAP32[$0 >> 2] | 0;
  if ($9) {
   HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $17;
   $$026 = 1;
   break;
  }
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = $17;
  if (__ZN7compareclEmm($3, HEAP32[$2 >> 2] | 0, $17) | 0) {
   $22 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $22;
   $$026 = 2;
  } else $$026 = 1;
 } else if ($9) {
  $10 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$2 >> 2] = $10;
  if (__ZN7compareclEmm($3, HEAP32[$1 >> 2] | 0, HEAP32[$0 >> 2] | 0) | 0) {
   $15 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$1 >> 2] = $15;
   $$026 = 2;
  } else $$026 = 1;
 } else $$026 = 0; while (0);
 return $$026 | 0;
}

function __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 3) + 1 | 0;
 $9 = __ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 2;
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($2, $15 >> 3 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 3, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAPF64[$25 >> 3] = +HEAPF64[$1 >> 3];
  HEAP32[$24 >> 2] = $25 + 8;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($0, $2);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 4 | 0;
 $8 = ((HEAP32[$3 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 2) + 1 | 0;
 $9 = __ZNKSt3__26vectorImNS_9allocatorImEEE8max_sizeEv($0) | 0;
 if ($9 >>> 0 < $8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $14 = HEAP32[$0 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] | 0) - $14 | 0;
  $19 = $15 >> 1;
  __ZNSt3__214__split_bufferImRNS_9allocatorImEEEC2EmmS3_($2, $15 >> 2 >>> 0 < $9 >>> 1 >>> 0 ? ($19 >>> 0 < $8 >>> 0 ? $8 : $19) : $9, (HEAP32[$3 >> 2] | 0) - $14 >> 2, $0 + 8 | 0);
  $24 = $2 + 8 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAP32[$25 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$24 >> 2] = $25 + 4;
  __ZNSt3__26vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE($0, $2);
  __ZNSt3__214__split_bufferImRNS_9allocatorImEEED2Ev($2);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $16 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 $3 = $1 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = HEAP32[$0 >> 2] | 0;
 $6 = $2;
 $8 = $6 - $5 | 0;
 $11 = $4 + (0 - ($8 >> 4) << 4) | 0;
 HEAP32[$3 >> 2] = $11;
 if (($8 | 0) > 0) _memcpy($11 | 0, $5 | 0, $8 | 0) | 0;
 $13 = $0 + 4 | 0;
 $15 = $1 + 8 | 0;
 $16 = (HEAP32[$13 >> 2] | 0) - $6 | 0;
 if (($16 | 0) > 0) {
  _memcpy(HEAP32[$15 >> 2] | 0, $2 | 0, $16 | 0) | 0;
  HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + ($16 >>> 4 << 4);
 }
 $22 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $22;
 $24 = HEAP32[$13 >> 2] | 0;
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$15 >> 2] = $24;
 $26 = $0 + 8 | 0;
 $27 = $1 + 12 | 0;
 $28 = HEAP32[$26 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$27 >> 2] = $28;
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 return $4 | 0;
}

function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do if (!$0) $$0 = 1; else {
  if ($1 >>> 0 < 128) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_896() | 0) + 188 >> 2] >> 2] | 0)) if (($1 & -128 | 0) == 57216) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
  if ($1 >>> 0 < 2048) {
   HEAP8[$0 >> 0] = $1 >>> 6 | 192;
   HEAP8[$0 + 1 >> 0] = $1 & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
   HEAP8[$0 >> 0] = $1 >>> 12 | 224;
   HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($1 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$0 >> 0] = $1 >>> 18 | 240;
   HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 3 >> 0] = $1 & 63 | 128;
   $$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $12 = 0, $13 = 0, $18 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $1;
 $4 = sp;
 $6 = $2 - $3 | 0;
 if ($6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($6 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $6;
  $$021 = $0;
 } else {
  $12 = $6 + 16 & -16;
  $13 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($12) | 0;
  HEAP32[$0 >> 2] = $13;
  HEAP32[$0 + 8 >> 2] = $12 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $6;
  $$021 = $13;
 }
 $18 = $2 - $3 | 0;
 $$0 = $1;
 $$1 = $$021;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1, $$0);
  $$0 = $$0 + 1 | 0;
  $$1 = $$1 + 1 | 0;
 }
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$021 + $18 | 0, $4);
 STACKTOP = sp;
 return;
}

function __sg_gl_vertexformat_size($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 1;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 2;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 3;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 5:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 6:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 7:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 8:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 9:
  {
   HEAP32[$1 >> 2] = 2;
   break;
  }
 case 10:
  {
   HEAP32[$1 >> 2] = 2;
   break;
  }
 case 11:
  {
   HEAP32[$1 >> 2] = 2;
   break;
  }
 case 12:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 13:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 14:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 15:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4438, 34720);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $15 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $14 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  $15 = HEAP32[$0 + 4 >> 2] | 0;
 } else {
  $14 = 10;
  $15 = $5 & 255;
 }
 if (($14 - $15 | 0) >>> 0 < $2 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $14, $15 + $2 - $14 | 0, $15, $15, 0, $2, $1); else if ($2 | 0) {
  if ($6) $20 = HEAP32[$0 >> 2] | 0; else $20 = $0;
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($20 + $15 | 0, $1, $2) | 0;
  $21 = $15 + $2 | 0;
  if ((HEAP8[$4 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $21; else HEAP8[$4 >> 0] = $21;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($20 + $21 | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _sg_setup_context() {
 var $0 = 0, $1 = 0, $17 = 0, $2 = 0, $25 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14371, 17859);
 HEAP32[$2 >> 2] = __sg_pool_alloc_index(2156556) | 0;
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAP32[$1 >> 2] = 0;
  HEAP32[539114] = HEAP32[$1 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  $25 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 HEAP32[$1 >> 2] = __sg_slot_alloc(2156556, (HEAP32[539148] | 0) + (HEAP32[$2 >> 2] << 4) | 0, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = __sg_context_at(2156476, HEAP32[$1 >> 2] | 0) | 0;
 $17 = __sg_create_context(HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = $17;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) != 2) ___assert_fail(17876, 17628, 14378, 17859);
 __sg_activate_context(HEAP32[$3 >> 2] | 0);
 HEAP32[539114] = HEAP32[$1 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 $25 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $25 | 0;
}

function __sg_init_shader($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $21 = 0, $23 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 if (!((HEAP32[$0 >> 2] | 0) != 0 & (HEAP32[$2 >> 2] | 0) != 0)) ___assert_fail(33557, 17628, 14125, 33592);
 HEAP32[$3 >> 2] = __sg_lookup_shader(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(18142, 17628, 14127, 33592);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) != 1) ___assert_fail(18142, 17628, 14127, 33592);
 HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = HEAP32[539114];
 $20 = __sg_validate_shader_desc(HEAP32[$2 >> 2] | 0) | 0;
 $21 = HEAP32[$3 >> 2] | 0;
 if ($20) {
  $23 = __sg_create_shader($21, HEAP32[$2 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = $23;
 } else HEAP32[$21 + 8 >> 2] = 3;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) == 3) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(33608, 17628, 14135, 33592);
}

function __sg_init_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $21 = 0, $23 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 if (!((HEAP32[$0 >> 2] | 0) != 0 & (HEAP32[$2 >> 2] | 0) != 0)) ___assert_fail(26798, 17628, 14097, 26833);
 HEAP32[$3 >> 2] = __sg_lookup_buffer(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(17990, 17628, 14099, 26833);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) != 1) ___assert_fail(17990, 17628, 14099, 26833);
 HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = HEAP32[539114];
 $20 = __sg_validate_buffer_desc(HEAP32[$2 >> 2] | 0) | 0;
 $21 = HEAP32[$3 >> 2] | 0;
 if ($20) {
  $23 = __sg_create_buffer($21, HEAP32[$2 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = $23;
 } else HEAP32[$21 + 8 >> 2] = 3;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) == 3) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(26849, 17628, 14107, 26833);
}

function __sfetch_request_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = __sfetch_pool_item_lookup((HEAP32[$2 >> 2] | 0) + 24 | 0, HEAP32[$3 >> 2] | 0) | 0;
 if (!(HEAP32[$4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 do if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) == 3) {
  if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) >>> 0 > 0) if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 32 + 20 >> 2] | 0)) {
   _sfetch_js_send_head_request(HEAP32[$3 >> 2] | 0, (HEAP32[$4 >> 2] | 0) + 208 | 0);
   break;
  }
  __sfetch_emsc_send_get_request(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0);
 } else __sfetch_ring_enqueue((HEAP32[$2 >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) * 76 | 0) + 52 | 0, HEAP32[$3 >> 2] | 0); while (0);
 if (!(HEAP8[(HEAP32[$4 >> 2] | 0) + 32 + 12 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[(HEAP32[$4 >> 2] | 0) + 32 + 13 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function _fons__allocGlyph($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $21 = 0, $29 = 0, $37 = 0, $48 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (((HEAP32[(HEAP32[$2 >> 2] | 0) + 216 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$2 >> 2] | 0) + 212 >> 2] | 0)) {
  if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 212 >> 2] | 0)) $21 = 8; else $21 = HEAP32[(HEAP32[$2 >> 2] | 0) + 212 >> 2] << 1;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 212 >> 2] = $21;
  $29 = _realloc(HEAP32[(HEAP32[$2 >> 2] | 0) + 208 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 212 >> 2] << 5) | 0;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 208 >> 2] = $29;
  if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 208 >> 2] | 0)) {
   HEAP32[$1 >> 2] = 0;
   $48 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $48 | 0;
  }
 }
 $37 = (HEAP32[$2 >> 2] | 0) + 216 | 0;
 HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1;
 HEAP32[$1 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 208 >> 2] | 0) + ((HEAP32[(HEAP32[$2 >> 2] | 0) + 216 >> 2] | 0) - 1 << 5);
 $48 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $48 | 0;
}

function __ZN8DrBitmap14loadFromMemoryEPKhRKibii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $24 = 0, $8 = 0, label = 0;
 if (!$3) {
  HEAP32[$0 + 4 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $5;
  $8 = $0 + 12 | 0;
  __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($8, HEAP32[$2 >> 2] | 0);
  _memcpy(HEAP32[$8 >> 2] | 0, $1 | 0, HEAP32[$2 >> 2] | 0) | 0;
  return;
 }
 $13 = $0 + 4 | 0;
 $14 = $0 + 8 | 0;
 $15 = _stbi_load_from_memory($1, HEAP32[$2 >> 2] | 0, $13, $14, $0, 4) | 0;
 if (!$15) label = 6; else {
  $17 = HEAP32[$13 >> 2] | 0;
  if (!$17) label = 6; else {
   $19 = HEAP32[$14 >> 2] | 0;
   if (!$19) label = 6; else {
    $21 = $0 + 12 | 0;
    __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($21, Math_imul($17 << 2, $19) | 0);
    $24 = HEAP32[$21 >> 2] | 0;
    _memcpy($24 | 0, $15 | 0, (HEAP32[$0 + 16 >> 2] | 0) - $24 | 0) | 0;
    _stbi_image_free($15);
   }
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$13 >> 2] = 0;
  HEAP32[$14 >> 2] = 0;
 }
 return;
}

function __sg_init_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $21 = 0, $23 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 if (!((HEAP32[$0 >> 2] | 0) != 0 & (HEAP32[$2 >> 2] | 0) != 0)) ___assert_fail(32622, 17628, 14111, 32657);
 HEAP32[$3 >> 2] = __sg_lookup_image(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(18066, 17628, 14113, 32657);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) != 1) ___assert_fail(18066, 17628, 14113, 32657);
 HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = HEAP32[539114];
 $20 = __sg_validate_image_desc(HEAP32[$2 >> 2] | 0) | 0;
 $21 = HEAP32[$3 >> 2] | 0;
 if ($20) {
  $23 = __sg_create_image($21, HEAP32[$2 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = $23;
 } else HEAP32[$21 + 8 >> 2] = 3;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) == 3) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(32672, 17628, 14121, 32657);
}

function __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$026 = 0, $10 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$0 >> 2] | 0;
 $6 = __ZN13TPPLPartition12VertexSorterclEll($3, $4, $5) | 0;
 $7 = HEAP32[$2 >> 2] | 0;
 $8 = __ZN13TPPLPartition12VertexSorterclEll($3, $7, $4) | 0;
 do if ($6) {
  if ($8) {
   HEAP32[$0 >> 2] = $7;
   HEAP32[$2 >> 2] = $5;
   $$026 = 1;
   break;
  }
  HEAP32[$0 >> 2] = $4;
  HEAP32[$1 >> 2] = $5;
  $12 = HEAP32[$2 >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($3, $12, $5) | 0) {
   HEAP32[$1 >> 2] = $12;
   HEAP32[$2 >> 2] = $5;
   $$026 = 2;
  } else $$026 = 1;
 } else if ($8) {
  HEAP32[$1 >> 2] = $7;
  HEAP32[$2 >> 2] = $4;
  $9 = HEAP32[$1 >> 2] | 0;
  $10 = HEAP32[$0 >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($3, $9, $10) | 0) {
   HEAP32[$0 >> 2] = $9;
   HEAP32[$1 >> 2] = $10;
   $$026 = 2;
  } else $$026 = 1;
 } else $$026 = 0; while (0);
 return $$026 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if ($1 | 0) {
  $5 = $0 + 11 | 0;
  $6 = HEAP8[$5 >> 0] | 0;
  if ($6 << 24 >> 24 < 0) {
   $15 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
   $16 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $15 = 10;
   $16 = $6 & 255;
  }
  if (($15 - $16 | 0) >>> 0 < $1 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $15, $16 + $1 - $15 | 0, $16, $16, 0, 0);
   $21 = HEAP8[$5 >> 0] | 0;
  } else $21 = $6;
  if ($21 << 24 >> 24 < 0) $24 = HEAP32[$0 >> 2] | 0; else $24 = $0;
  __ZNSt3__211char_traitsIcE6assignEPcmc($24 + $16 | 0, $1, $2) | 0;
  $25 = $16 + $1 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $25; else HEAP8[$5 >> 0] = $25;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($24 + $25 | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _stbi__bmp_test_raw($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $30 = 0, $32 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 if (((_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255 | 0) != 66) {
  HEAP32[$1 >> 2] = 0;
  $32 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $32 | 0;
 }
 if (((_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255 | 0) != 77) {
  HEAP32[$1 >> 2] = 0;
  $32 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $32 | 0;
 }
 _stbi__get32le(HEAP32[$2 >> 2] | 0) | 0;
 _stbi__get16le(HEAP32[$2 >> 2] | 0) | 0;
 _stbi__get16le(HEAP32[$2 >> 2] | 0) | 0;
 _stbi__get32le(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$4 >> 2] = _stbi__get32le(HEAP32[$2 >> 2] | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) == 12 | (HEAP32[$4 >> 2] | 0) == 40 | (HEAP32[$4 >> 2] | 0) == 56 | (HEAP32[$4 >> 2] | 0) == 108) $30 = 1; else $30 = (HEAP32[$4 >> 2] | 0) == 124;
 HEAP32[$3 >> 2] = $30 & 1;
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 $32 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $32 | 0;
}

function _stbi__hdr_gettoken($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 $5 = sp + 12 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 HEAP8[$5 >> 0] = 0;
 HEAP8[$5 >> 0] = _stbi__get8(HEAP32[$2 >> 2] | 0) | 0;
 while (1) {
  if (_stbi__at_eof(HEAP32[$2 >> 2] | 0) | 0) break;
  if ((HEAP8[$5 >> 0] | 0) == 10) break;
  $14 = HEAP8[$5 >> 0] | 0;
  $15 = HEAP32[$3 >> 2] | 0;
  $16 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $16 + 1;
  HEAP8[$15 + $16 >> 0] = $14;
  if ((HEAP32[$4 >> 2] | 0) == 1023) {
   label = 5;
   break;
  }
  HEAP8[$5 >> 0] = _stbi__get8(HEAP32[$2 >> 2] | 0) | 0;
 }
 L6 : do if ((label | 0) == 5) while (1) {
  if (_stbi__at_eof(HEAP32[$2 >> 2] | 0) | 0) break L6;
  if (((_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255 | 0) == 10) break L6;
 } while (0);
 HEAP8[(HEAP32[$3 >> 2] | 0) + (HEAP32[$4 >> 2] | 0) >> 0] = 0;
 STACKTOP = sp;
 return HEAP32[$3 >> 2] | 0;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$05$i$i = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 + 4 >> 2] | 0;
 if (!$4) {
  $8 = $2 + 8 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$9 >> 2] | 0) == ($2 | 0)) $$05$i$i = $9; else {
   $13 = $8;
   do {
    $12 = HEAP32[$13 >> 2] | 0;
    $13 = $12 + 8 | 0;
    $15 = HEAP32[$13 >> 2] | 0;
   } while ((HEAP32[$15 >> 2] | 0) != ($12 | 0));
   $$05$i$i = $15;
  }
 } else {
  $$0$i$i$i = $4;
  while (1) {
   $6 = HEAP32[$$0$i$i$i >> 2] | 0;
   if (!$6) break; else $$0$i$i$i = $6;
  }
  $$05$i$i = $$0$i$i$i;
 }
 if ((HEAP32[$0 >> 2] | 0) == ($2 | 0)) HEAP32[$0 >> 2] = $$05$i$i;
 $21 = $0 + 8 | 0;
 HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + -1;
 __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[$0 + 4 >> 2] | 0, $2);
 __ZdlPv($2);
 return $$05$i$i | 0;
}

function __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $6 = 0, $8 = 0;
 __ZN8TPPLPoly4InitEl($0, 3);
 $4 = HEAP32[$0 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$4 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
 HEAP32[$4 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
 $6 = (HEAP32[$0 >> 2] | 0) + 24 | 0;
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$6 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$6 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP32[$6 + 20 >> 2] = HEAP32[$2 + 20 >> 2];
 $8 = (HEAP32[$0 >> 2] | 0) + 48 | 0;
 HEAP32[$8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$8 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$8 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$8 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
 HEAP32[$8 + 16 >> 2] = HEAP32[$3 + 16 >> 2];
 HEAP32[$8 + 20 >> 2] = HEAP32[$3 + 20 >> 2];
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$026$off0 = 0, $$027 = 0, $$1 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0;
 if (($1 - $0 | 0) > 1) {
  if ((HEAP8[$0 >> 0] | 0) == 83) if ((HEAP8[$0 + 1 >> 0] | 0) == 116) {
   $12 = $0 + 2 | 0;
   if (($12 | 0) == ($1 | 0)) {
    $$026$off0 = 0;
    $$027 = $1;
   } else {
    $$026$off0 = 0;
    $$027 = (HEAP8[$12 >> 0] | 0) == 76 ? $0 + 3 | 0 : $12;
   }
  } else {
   $$026$off0 = 1;
   $$027 = $0;
  } else {
   $$026$off0 = 1;
   $$027 = $0;
  }
  $17 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$027, $1, $2) | 0;
  $18 = ($17 | 0) == ($$027 | 0);
  if ($$026$off0 | $18) $$1 = $18 ? $0 : $17; else {
   $21 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($21 | 0)) $$1 = $0; else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($21 + -24 | 0, 0, 48173) | 0;
    $$1 = $17;
   }
  }
 } else $$1 = $0;
 return $$1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) $11 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $11 = 10;
 do if ($11 >>> 0 < $2 >>> 0) {
  if ($6) $23 = HEAP32[$0 + 4 >> 2] | 0; else $23 = $5 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $11, $2 - $11 | 0, $23, 0, $23, $2, $1);
 } else {
  if ($6) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($13, $1, $2) | 0;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($13 + $2 | 0, $3);
  if ((HEAP8[$4 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $2;
   break;
  } else {
   HEAP8[$4 >> 0] = $2;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __sg_gl_init_limits() {
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5083, 25857);
 _glGetIntegerv(3379, $0 | 0);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5086, 25857);
 HEAP32[539153] = HEAP32[$0 >> 2];
 HEAP32[539156] = HEAP32[$0 >> 2];
 _glGetIntegerv(34076, $0 | 0);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5090, 25857);
 HEAP32[539154] = HEAP32[$0 >> 2];
 _glGetIntegerv(34921, $0 | 0);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5093, 25857);
 if ((HEAP32[$0 >> 2] | 0) > 16) HEAP32[$0 >> 2] = 16;
 HEAP32[539158] = HEAP32[$0 >> 2];
 do if (HEAP8[2157644] & 1) {
  _glGetIntegerv(34047, $0 | 0);
  if (!(_glGetError() | 0)) {
   HEAP32[539412] = HEAP32[$0 >> 2];
   break;
  } else ___assert_fail(25839, 17628, 5110, 25857);
 } else HEAP32[539412] = 1; while (0);
 _glGetIntegerv(35661, $0 | 0);
 if (!(_glGetError() | 0)) {
  HEAP32[539413] = HEAP32[$0 >> 2];
  STACKTOP = sp;
  return;
 } else ___assert_fail(25839, 17628, 5117, 25857);
}

function __sfons_render_delete($0) {
 $0 = $0 | 0;
 var $$byval_copy2 = 0, $1 = 0, $2 = 0, $27 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy2 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(41276, 24442, 1716, 41285);
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) {
  HEAP32[$$byval_copy2 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2];
  _sg_destroy_image($$byval_copy2);
  HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] = 0;
 }
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$$byval_copy2 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2];
  _sgl_destroy_pipeline($$byval_copy2);
  HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = 0;
 }
 if (!(HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) {
  $27 = HEAP32[$2 >> 2] | 0;
  _free($27);
  STACKTOP = sp;
  return;
 }
 HEAP32[$$byval_copy2 >> 2] = HEAP32[HEAP32[$2 >> 2] >> 2];
 _sg_destroy_shader($$byval_copy2);
 HEAP32[HEAP32[$2 >> 2] >> 2] = 0;
 $27 = HEAP32[$2 >> 2] | 0;
 _free($27);
 STACKTOP = sp;
 return;
}

function __sapp_emsc_webgl_init() {
 var $0 = 0, $1 = 0, $25 = 0, $26 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 _emscripten_webgl_init_context_attributes($0 | 0);
 HEAP32[$0 >> 2] = HEAP8[50862] & 1;
 HEAP32[$0 + 4 >> 2] = 1;
 HEAP32[$0 + 8 >> 2] = 1;
 HEAP32[$0 + 12 >> 2] = (HEAP32[12732] | 0) > 1 & 1;
 HEAP32[$0 + 16 >> 2] = HEAP8[50894] & 1;
 HEAP32[$0 + 20 >> 2] = HEAP8[50893] & 1;
 HEAP32[$0 + 40 >> 2] = 1;
 HEAP32[$1 >> 2] = _emscripten_webgl_create_context(51220, $0 | 0) | 0;
 if (HEAP32[$1 >> 2] | 0) {
  $25 = HEAP32[$1 >> 2] | 0;
  _emscripten_webgl_make_context_current($25 | 0) | 0;
  $26 = HEAP32[$1 >> 2] | 0;
  _emscripten_webgl_enable_extension($26 | 0, 24862) | 0;
  STACKTOP = sp;
  return;
 }
 HEAP32[$0 + 32 >> 2] = 1;
 HEAP32[$1 >> 2] = _emscripten_webgl_create_context(51220, $0 | 0) | 0;
 HEAP8[50902] = 1;
 $25 = HEAP32[$1 >> 2] | 0;
 _emscripten_webgl_make_context_current($25 | 0) | 0;
 $26 = HEAP32[$1 >> 2] | 0;
 _emscripten_webgl_enable_extension($26 | 0, 24862) | 0;
 STACKTOP = sp;
 return;
}

function __sapp_emsc_run($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 __sapp_init_state(HEAP32[$1 >> 2] | 0);
 _sapp_js_pointer_init(51221);
 __sapp_emsc_keytable_init();
 if (HEAP8[50892] & 1) {
  HEAPF64[$2 >> 3] = +(HEAP32[12711] | 0);
  HEAPF64[$3 >> 3] = +(HEAP32[12712] | 0);
 } else {
  _emscripten_get_element_css_size(51220, $2 | 0, $3 | 0) | 0;
  _emscripten_set_resize_callback_on_thread(2, 0, 0, 6, 2) | 0;
 }
 if (HEAP8[50860] & 1) HEAPF32[12734] = +_emscripten_get_device_pixel_ratio();
 HEAP32[12728] = ~~+HEAPF64[$2 >> 3];
 HEAP32[12729] = ~~+HEAPF64[$3 >> 3];
 HEAP32[12730] = ~~(+HEAPF64[$2 >> 3] * +HEAPF32[12734]);
 HEAP32[12731] = ~~(+HEAPF64[$3 >> 3] * +HEAPF32[12734]);
 _emscripten_set_canvas_element_size(51220, HEAP32[12730] | 0, HEAP32[12731] | 0) | 0;
 __sapp_emsc_webgl_init();
 HEAP8[50900] = 1;
 __sapp_emsc_register_eventhandlers();
 _emscripten_request_animation_frame_loop(1, 0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$3 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$3 = $0; else {
  switch (HEAP8[$0 >> 0] | 0) {
  case 104:
   {
    $5 = $0 + 1 | 0;
    $6 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($5, $1) | 0;
    if (($6 | 0) == ($5 | 0) | ($6 | 0) == ($1 | 0)) {
     $$3 = $0;
     break L1;
    }
    return ((HEAP8[$6 >> 0] | 0) == 95 ? $6 + 1 | 0 : $0) | 0;
   }
  case 118:
   break;
  default:
   {
    $$3 = $0;
    break L1;
   }
  }
  $12 = $0 + 1 | 0;
  $13 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($12, $1) | 0;
  if (($13 | 0) == ($12 | 0) | ($13 | 0) == ($1 | 0)) $$3 = $0; else if ((HEAP8[$13 >> 0] | 0) == 95) {
   $18 = $13 + 1 | 0;
   $19 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($18, $1) | 0;
   if (($19 | 0) == ($18 | 0) | ($19 | 0) == ($1 | 0)) $$3 = $0; else $$3 = (HEAP8[$19 >> 0] | 0) == 95 ? $19 + 1 | 0 : $0;
  } else $$3 = $0;
 } while (0);
 return $$3 | 0;
}

function _sg_apply_pipeline($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $1 = sp;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14837, 18641);
 HEAP8[2156469] = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 if (!(__sg_validate_apply_pipeline($$byval_copy) | 0)) {
  HEAP8[2156470] = 0;
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[2156468] & 1)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[539116] = HEAP32[$0 >> 2];
 HEAP32[$1 >> 2] = __sg_lookup_pipeline(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(18659, 17628, 14850, 18641);
 HEAP8[2156470] = 2 == (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) & 1;
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(18663, 17628, 14852, 18641);
 if ((HEAP32[HEAP32[(HEAP32[$1 >> 2] | 0) + 84 >> 2] >> 2] | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(18663, 17628, 14852, 18641);
 __sg_apply_pipeline(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbi__gif_parse_colortable($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $19 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) break;
  $13 = _stbi__get8(HEAP32[$4 >> 2] | 0) | 0;
  HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$8 >> 2] << 2) + 2 >> 0] = $13;
  $19 = _stbi__get8(HEAP32[$4 >> 2] | 0) | 0;
  HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$8 >> 2] << 2) + 1 >> 0] = $19;
  $25 = _stbi__get8(HEAP32[$4 >> 2] | 0) | 0;
  HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$8 >> 2] << 2) >> 0] = $25;
  HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$8 >> 2] << 2) + 3 >> 0] = (HEAP32[$7 >> 2] | 0) == (HEAP32[$8 >> 2] | 0) ? 0 : 255;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __sg_apply_bindings($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 28 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 20 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 12 | 0;
 $17 = sp + 8 | 0;
 $18 = sp + 4 | 0;
 $19 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAP32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = $9;
 __sg_gl_apply_bindings(HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$19 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrI7DrImageE11make_sharedIJRA7_KcR8DrBitmapfEEES2_DpOT_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $4 = sp + 8 | 0;
 $5 = __Znwm(88) | 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 >> 2] = 11720;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($4, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0);
 $9 = $5 + 12 | 0;
 __ZN7DrImageC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEER8DrBitmapfb($9, $4, $2, +HEAPF32[$3 >> 2], 1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 HEAP32[$0 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $5;
 HEAP32[$vararg_buffer >> 2] = $9;
 HEAP32[$vararg_buffer + 4 >> 2] = $9;
 __ZNSt3__210shared_ptrI7DrImageE18__enable_weak_thisEz($0, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function _stbtt_GetFontVMetrics($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $19 = 0, $32 = 0, $4 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 if (HEAP32[$5 >> 2] | 0) {
  $19 = (_ttSHORT((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) + 4 | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[$5 >> 2] >> 2] = $19;
 }
 if (HEAP32[$6 >> 2] | 0) {
  $32 = (_ttSHORT((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) + 6 | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[$6 >> 2] >> 2] = $32;
 }
 if (!(HEAP32[$7 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $45 = (_ttSHORT((HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) + 8 | 0) | 0) << 16 >> 16;
 HEAP32[HEAP32[$7 >> 2] >> 2] = $45;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILm4096EEERNS0_5arenaIXT_EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EEC2ERNS0_5arenaILm4096EEE($2, $1);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($2, $1);
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEC2EmRKS6_RKS7_($0 + 16 | 0, $2);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($2, $1);
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEEC2EmRKS8_RKS9_($0 + 32 | 0, $2);
 STACKTOP = sp;
 return;
}

function _HMM_NormalizeVec3($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAPF32[$3 >> 2] = +_HMM_LengthVec3($$byval_copy);
 if (!(+HEAPF32[$3 >> 2] != 0.0)) {
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  STACKTOP = sp;
  return;
 }
 HEAPF32[$2 >> 2] = +HEAPF32[$1 >> 2] * (1.0 / +HEAPF32[$3 >> 2]);
 HEAPF32[$2 + 4 >> 2] = +HEAPF32[$1 + 4 >> 2] * (1.0 / +HEAPF32[$3 >> 2]);
 HEAPF32[$2 + 8 >> 2] = +HEAPF32[$1 + 8 >> 2] * (1.0 / +HEAPF32[$3 >> 2]);
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 STACKTOP = sp;
 return;
}

function __sg_pool_alloc_index($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $30 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(26094, 17628, 12793, 26116);
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(25538, 17628, 12794, 26116);
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) <= 0) {
  HEAP32[$1 >> 2] = 0;
  $30 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $30 | 0;
 }
 $16 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0;
 $18 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
 $20 = (HEAP32[$18 >> 2] | 0) + -1 | 0;
 HEAP32[$18 >> 2] = $20;
 HEAP32[$3 >> 2] = HEAP32[$16 + ($20 << 2) >> 2];
 if ((HEAP32[$3 >> 2] | 0) <= 0) ___assert_fail(26137, 17628, 12797, 26116);
 if ((HEAP32[$3 >> 2] | 0) >= (HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) ___assert_fail(26137, 17628, 12797, 26116);
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 $30 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $30 | 0;
}

function __sgl_pool_alloc_index($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $30 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(26094, 19399, 2116, 37582);
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(25538, 19399, 2117, 37582);
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) <= 0) {
  HEAP32[$1 >> 2] = 0;
  $30 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $30 | 0;
 }
 $16 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0;
 $18 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
 $20 = (HEAP32[$18 >> 2] | 0) + -1 | 0;
 HEAP32[$18 >> 2] = $20;
 HEAP32[$3 >> 2] = HEAP32[$16 + ($20 << 2) >> 2];
 if ((HEAP32[$3 >> 2] | 0) <= 0) ___assert_fail(26137, 19399, 2120, 37582);
 if ((HEAP32[$3 >> 2] | 0) >= (HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) ___assert_fail(26137, 19399, 2120, 37582);
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 $30 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $30 | 0;
}

function _stbi__skip($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $44 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $7 = HEAP32[$2 >> 2] | 0;
 if ((HEAP32[$3 >> 2] | 0) < 0) {
  HEAP32[(HEAP32[$2 >> 2] | 0) + 168 >> 2] = HEAP32[$7 + 172 >> 2];
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$7 + 16 >> 2] | 0) {
  HEAP32[$4 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 172 >> 2] | 0) - (HEAP32[(HEAP32[$2 >> 2] | 0) + 168 >> 2] | 0);
  if ((HEAP32[$4 >> 2] | 0) < (HEAP32[$3 >> 2] | 0)) {
   HEAP32[(HEAP32[$2 >> 2] | 0) + 168 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 172 >> 2];
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$2 >> 2] | 0) + 16 + 4 >> 2] & 3](HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] | 0, (HEAP32[$3 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0);
   STACKTOP = sp;
   return;
  }
 }
 $44 = (HEAP32[$2 >> 2] | 0) + 168 | 0;
 HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + (HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbi__gif_test_raw($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $31 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (((_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255 | 0) == 71) if (((_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255 | 0) == 73) if (((_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255 | 0) == 70) if (((_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255 | 0) == 56) {
  HEAP32[$3 >> 2] = (_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255;
  if ((HEAP32[$3 >> 2] | 0) != 57 & (HEAP32[$3 >> 2] | 0) != 55) {
   HEAP32[$1 >> 2] = 0;
   $31 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $31 | 0;
  }
  if (((_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255 | 0) != 97) {
   HEAP32[$1 >> 2] = 0;
   $31 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $31 | 0;
  } else {
   HEAP32[$1 >> 2] = 1;
   $31 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $31 | 0;
  }
 }
 HEAP32[$1 >> 2] = 0;
 $31 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $31 | 0;
}

function _stbi__malloc_mad4($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 if (_stbi__mad4sizes_valid(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) {
  $20 = Math_imul(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
  $22 = Math_imul($20, HEAP32[$8 >> 2] | 0) | 0;
  $24 = Math_imul($22, HEAP32[$9 >> 2] | 0) | 0;
  HEAP32[$5 >> 2] = _stbi__malloc($24 + (HEAP32[$10 >> 2] | 0) | 0) | 0;
  $28 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 } else {
  HEAP32[$5 >> 2] = 0;
  $28 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 return 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$sroa$speculated = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0;
 if ((-17 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $23 = HEAP32[$0 >> 2] | 0; else $23 = $0;
 if ($1 >>> 0 < 2147483623) {
  $14 = $2 + $1 | 0;
  $15 = $1 << 1;
  $$sroa$speculated = $14 >>> 0 < $15 >>> 0 ? $15 : $14;
  $20 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $20 = -17;
 $21 = __Znwm($20) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($21, $23, $4) | 0;
 $25 = $3 - $5 - $4 | 0;
 if ($25 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($21 + $4 + $6 | 0, $23 + $4 + $5 | 0, $25) | 0;
 if (($1 | 0) != 10) __ZdlPv($23);
 HEAP32[$0 >> 2] = $21;
 HEAP32[$0 + 8 >> 2] = $20 | -2147483648;
 return;
}

function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $33 = 0, $7 = 0, $8 = 0, label = 0;
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($1) | 0)) label = 3; else {
  $20 = $0 & 255;
  $21 = $0 & 255;
  if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) label = 10; else {
   $26 = $1 + 20 | 0;
   $27 = HEAP32[$26 >> 2] | 0;
   if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$26 >> 2] = $27 + 1;
    HEAP8[$27 >> 0] = $20;
    $33 = $21;
   } else label = 10;
  }
  if ((label | 0) == 10) $33 = ___overflow($1, $0) | 0;
  ___unlockfile($1);
  $$0 = $33;
 }
 do if ((label | 0) == 3) {
  $7 = $0 & 255;
  $8 = $0 & 255;
  if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
   $13 = $1 + 20 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$13 >> 2] = $14 + 1;
    HEAP8[$14 >> 0] = $7;
    $$0 = $8;
    break;
   }
  }
  $$0 = ___overflow($1, $0) | 0;
 } while (0);
 return $$0 | 0;
}

function __sfetch_emsc_failed_http_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$4 >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = __sfetch_pool_item_lookup((HEAP32[$4 >> 2] | 0) + 24 | 0, HEAP32[$2 >> 2] | 0) | 0;
 if (!(HEAP32[$5 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $23 = (HEAP32[$5 >> 2] | 0) + 32 + 8 | 0;
 if ((HEAP32[$3 >> 2] | 0) == 404) HEAP32[$23 >> 2] = 1; else HEAP32[$23 >> 2] = 5;
 HEAP8[(HEAP32[$5 >> 2] | 0) + 32 + 12 >> 0] = 1;
 HEAP8[(HEAP32[$5 >> 2] | 0) + 32 + 13 >> 0] = 1;
 __sfetch_ring_enqueue((HEAP32[$4 >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) * 76 | 0) + 52 | 0, HEAP32[$2 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbtt__buf_range($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = $3;
 _stbtt__new_buf($7, 0, 0);
 if (!((HEAP32[$5 >> 2] | 0) < 0 | (HEAP32[$6 >> 2] | 0) < 0)) if ((HEAP32[$5 >> 2] | 0) <= (HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0)) if ((HEAP32[$6 >> 2] | 0) <= ((HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) | 0)) {
  HEAP32[$7 >> 2] = (HEAP32[HEAP32[$4 >> 2] >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
  HEAP32[$7 + 8 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  STACKTOP = sp;
  return;
 };
 HEAP32[$0 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) $11 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $11 = 10;
 do if ($11 >>> 0 < $2 >>> 0) {
  if ($6) $23 = HEAP32[$0 + 4 >> 2] | 0; else $23 = $5 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $11, $2 - $11 | 0, $23, 0, $23, $2, $1);
 } else {
  if ($6) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($13, $1, $2) | 0;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($13 + $2 | 0, $3);
  if ((HEAP8[$4 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $2;
   break;
  } else {
   HEAP8[$4 >> 0] = $2;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function _stbi__resample_row_generic($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $25 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[sp + 16 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if ((HEAP32[$10 >> 2] | 0) >= (HEAP32[$8 >> 2] | 0)) break;
  HEAP32[$11 >> 2] = 0;
  while (1) {
   if ((HEAP32[$11 >> 2] | 0) >= (HEAP32[$9 >> 2] | 0)) break;
   $25 = Math_imul(HEAP32[$10 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
   HEAP8[(HEAP32[$5 >> 2] | 0) + ($25 + (HEAP32[$11 >> 2] | 0)) >> 0] = HEAP8[(HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0;
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
  }
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function __ZN7meshoptL10hashLookupIjNS_12VertexHasherEEEPT_S3_mRKT0_RKS2_S8_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$03441 = 0, $$03542 = 0, $$pn = 0, $11 = 0, $12 = 0, $17 = 0, $6 = 0, label = 0;
 if (!$1) ___assert_fail(41869, 41730, 139, 41881);
 $6 = $1 + -1 | 0;
 if ($6 & $1 | 0) ___assert_fail(41892, 41730, 140, 41881);
 $$03441 = 0;
 $$pn = __ZNK7meshopt12VertexHasher4hashEj($2, HEAP32[$3 >> 2] | 0) | 0;
 while (1) {
  $$03542 = $$pn & $6;
  $11 = $0 + ($$03542 << 2) | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if (($12 | 0) == (HEAP32[$4 >> 2] | 0)) {
   label = 10;
   break;
  }
  if (__ZNK7meshopt12VertexHasher5equalEjj($2, $12, HEAP32[$3 >> 2] | 0) | 0) {
   label = 10;
   break;
  }
  $17 = $$03441 + 1 | 0;
  if ($17 >>> 0 > $6 >>> 0) {
   label = 9;
   break;
  } else {
   $$03441 = $17;
   $$pn = $17 + $$03542 | 0;
  }
 }
 if ((label | 0) == 9) ___assert_fail(41923, 41730, 159, 41881); else if ((label | 0) == 10) return $11 | 0;
 return 0;
}

function _stbtt__cff_get_index($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2];
 HEAP32[$3 >> 2] = _stbtt__buf_get(HEAP32[$2 >> 2] | 0, 2) | 0;
 do if (HEAP32[$3 >> 2] | 0) {
  HEAP32[$5 >> 2] = (_stbtt__buf_get8(HEAP32[$2 >> 2] | 0) | 0) & 255;
  if ((HEAP32[$5 >> 2] | 0) >= 1 & (HEAP32[$5 >> 2] | 0) <= 4) {
   _stbtt__buf_skip(HEAP32[$2 >> 2] | 0, Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0);
   $24 = HEAP32[$2 >> 2] | 0;
   _stbtt__buf_skip($24, (_stbtt__buf_get(HEAP32[$2 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) - 1 | 0);
   break;
  } else ___assert_fail(40280, 40159, 1126, 40309);
 } while (0);
 _stbtt__buf_range($0, HEAP32[$2 >> 2] | 0, HEAP32[$4 >> 2] | 0, (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function _stbi__pnm_skip_whitespace($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $3 = 0, $32 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 while (1) {
  while (1) {
   if (_stbi__at_eof(HEAP32[$2 >> 2] | 0) | 0) $34 = 0; else $34 = (_stbi__pnm_isspace(HEAP8[HEAP32[$3 >> 2] >> 0] | 0) | 0) != 0;
   $11 = HEAP32[$2 >> 2] | 0;
   if (!$34) break;
   $12 = _stbi__get8($11) | 0;
   HEAP8[HEAP32[$3 >> 2] >> 0] = $12;
  }
  if (_stbi__at_eof($11) | 0) {
   label = 15;
   break;
  }
  if ((HEAP8[HEAP32[$3 >> 2] >> 0] | 0) != 35) {
   label = 15;
   break;
  }
  while (1) {
   if (_stbi__at_eof(HEAP32[$2 >> 2] | 0) | 0) break;
   if ((HEAP8[HEAP32[$3 >> 2] >> 0] | 0) == 10) break;
   if ((HEAP8[HEAP32[$3 >> 2] >> 0] | 0) == 13) break;
   $32 = _stbi__get8(HEAP32[$2 >> 2] | 0) | 0;
   HEAP8[HEAP32[$3 >> 2] >> 0] = $32;
  }
 }
 if ((label | 0) == 15) {
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1;
 do if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
  HEAP8[$1 + 52 >> 0] = 1;
  $10 = $1 + 16 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if (!$11) {
   HEAP32[$10 >> 2] = $2;
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 36 >> 2] = 1;
   if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  if (($11 | 0) != ($2 | 0)) {
   $30 = $1 + 36 | 0;
   HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  $21 = $1 + 24 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  if (($22 | 0) == 2) {
   HEAP32[$21 >> 2] = $4;
   $28 = $4;
  } else $28 = $22;
  if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) HEAP8[$1 + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $10 = (HEAP32[$5 >> 2] | 0) + ((($7 | 0) / -44 | 0) * 44 | 0) | 0;
 HEAP32[$5 >> 2] = $10;
 if (($7 | 0) > 0) {
  _memcpy($10 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $14 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $14 = $10;
 }
 $13 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $14;
 HEAP32[$$pre$phiZ2D >> 2] = $13;
 $15 = $1 + 8 | 0;
 $16 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$15 >> 2] = $16;
 $18 = $0 + 8 | 0;
 $19 = $1 + 12 | 0;
 $20 = HEAP32[$18 >> 2] | 0;
 HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$19 >> 2] = $20;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function _meshopt_remapVertexBuffer($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$036 = 0, $$037 = 0, $12 = 0, $5 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $5 = sp;
 if (($3 + -1 | 0) >>> 0 >= 256) ___assert_fail(43241, 41730, 291, 41953);
 __ZN17meshopt_AllocatorC2Ev($5);
 if (($0 | 0) == ($1 | 0)) {
  $8 = Math_imul($3, $2) | 0;
  $9 = __ZN17meshopt_Allocator8allocateIhEEPT_m($5, $8) | 0;
  _memcpy($9 | 0, $0 | 0, $8 | 0) | 0;
  $$036 = $9;
 } else $$036 = $1;
 L7 : do if ($2 | 0) {
  $$037 = 0;
  while (1) {
   $12 = HEAP32[$4 + ($$037 << 2) >> 2] | 0;
   if (($12 | 0) != -1) {
    if ($12 >>> 0 >= $2 >>> 0) break;
    _memcpy($0 + (Math_imul($12, $3) | 0) | 0, $$036 + (Math_imul($$037, $3) | 0) | 0, $3 | 0) | 0;
   }
   $$037 = $$037 + 1 | 0;
   if ($$037 >>> 0 >= $2 >>> 0) break L7;
  }
  ___assert_fail(41979, 41730, 307, 41953);
 } while (0);
 __ZN17meshopt_AllocatorD2Ev($5);
 STACKTOP = sp;
 return;
}

function _fons__atlasRemoveNode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
 while (1) {
  $16 = HEAP32[$2 >> 2] | 0;
  if ((HEAP32[$4 >> 2] | 0) >= ((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) - 1 | 0)) break;
  $20 = (HEAP32[$16 + 8 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 6 | 0) | 0;
  $26 = (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$4 >> 2] | 0) + 1 | 0) * 6 | 0) | 0;
  HEAP16[$20 >> 1] = HEAP16[$26 >> 1] | 0;
  HEAP16[$20 + 2 >> 1] = HEAP16[$26 + 2 >> 1] | 0;
  HEAP16[$20 + 4 >> 1] = HEAP16[$26 + 4 >> 1] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 $29 = $16 + 12 | 0;
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + -1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 4) << 4) | 0;
 HEAP32[$5 >> 2] = $11;
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $15 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $15 = $11;
 }
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$$pre$phiZ2D >> 2] = $14;
 $16 = $1 + 8 | 0;
 $17 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 $19 = $0 + 8 | 0;
 $20 = $1 + 12 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $21;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 3) << 3) | 0;
 HEAP32[$5 >> 2] = $11;
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $15 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $15 = $11;
 }
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$$pre$phiZ2D >> 2] = $14;
 $16 = $1 + 8 | 0;
 $17 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 $19 = $0 + 8 | 0;
 $20 = $1 + 12 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $21;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $$0$i = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($2 | 0)) break;
  $9 = $$0$i + -24 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_((HEAP32[$5 >> 2] | 0) + -24 | 0, $9);
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -24;
  $$0$i = $9;
 }
 $12 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $12;
 $14 = $1 + 8 | 0;
 $15 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$14 >> 2] = $15;
 $17 = $0 + 8 | 0;
 $18 = $1 + 12 | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$18 >> 2] = $19;
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 return;
}

function __ZN7meshoptL22generateHardBoundariesEPjPKjmmjS0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa3 = 0, $$02 = 0, $$0301 = 0, $$1 = 0, $10 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 _memset($4 | 0, 0, $3 << 2 | 0) | 0;
 HEAP32[$5 >> 2] = 17;
 $7 = ($2 >>> 0) / 3 | 0;
 if ($2 >>> 0 > 2) {
  $$02 = 0;
  $$0301 = 0;
  while (1) {
   $10 = $$0301 * 3 | 0;
   if (($$0301 | 0) == 0 | (__ZN7meshoptL11updateCacheEjjjjPjRj(HEAP32[$1 + ($10 << 2) >> 2] | 0, HEAP32[$1 + ($10 + 1 << 2) >> 2] | 0, HEAP32[$1 + ($10 + 2 << 2) >> 2] | 0, $4, $5) | 0) == 3) {
    HEAP32[$0 + ($$02 << 2) >> 2] = $$0301;
    $$1 = $$02 + 1 | 0;
   } else $$1 = $$02;
   $$0301 = $$0301 + 1 | 0;
   if ($$0301 >>> 0 >= $7 >>> 0) break; else $$02 = $$1;
  }
  if ($$1 >>> 0 > $7 >>> 0) ___assert_fail(42584, 42048, 185, 42610); else $$0$lcssa3 = $$1;
 } else $$0$lcssa3 = 0;
 STACKTOP = sp;
 return $$0$lcssa3 | 0;
}

function __sfetch_emsc_head_response($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$4 >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = __sfetch_pool_item_lookup((HEAP32[$4 >> 2] | 0) + 24 | 0, HEAP32[$2 >> 2] | 0) | 0;
 if (!(HEAP32[$5 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2] | 0)) ___assert_fail(21716, 21538, 2001, 21760);
 if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 24 + 4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(21716, 21538, 2001, 21760);
 HEAP32[(HEAP32[$5 >> 2] | 0) + 32 + 20 >> 2] = HEAP32[$3 >> 2];
 __sfetch_emsc_send_get_request(HEAP32[$2 >> 2] | 0, HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__27__sort4IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_T_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0;
 $5 = __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($0, $1, $2, $4) | 0;
 $6 = HEAP32[$3 >> 2] | 0;
 $7 = HEAP32[$2 >> 2] | 0;
 if (__ZN13TPPLPartition12VertexSorterclEll($4, $6, $7) | 0) {
  HEAP32[$2 >> 2] = $6;
  HEAP32[$3 >> 2] = $7;
  $9 = $5 + 1 | 0;
  $10 = HEAP32[$2 >> 2] | 0;
  $11 = HEAP32[$1 >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($4, $10, $11) | 0) {
   HEAP32[$1 >> 2] = $10;
   HEAP32[$2 >> 2] = $11;
   $14 = HEAP32[$1 >> 2] | 0;
   $15 = HEAP32[$0 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($4, $14, $15) | 0) {
    HEAP32[$0 >> 2] = $14;
    HEAP32[$1 >> 2] = $15;
    $$0 = $5 + 3 | 0;
   } else $$0 = $5 + 2 | 0;
  } else $$0 = $9;
 } else $$0 = $5;
 return $$0 | 0;
}

function _sg_draw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14951, 19018);
 if ((HEAP32[$3 >> 2] | 0) < 0) ___assert_fail(19026, 17628, 14952, 19018);
 if ((HEAP32[$4 >> 2] | 0) < 0) ___assert_fail(19044, 17628, 14953, 19018);
 if ((HEAP32[$5 >> 2] | 0) < 0) ___assert_fail(19062, 17628, 14954, 19018);
 if (!(HEAP8[2156469] & 1)) _puts(19081) | 0;
 if (!(HEAP8[2156468] & 1)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[2156470] & 1)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[2156469] & 1)) {
  STACKTOP = sp;
  return;
 }
 if (0 == (HEAP32[$4 >> 2] | 0) | 0 == (HEAP32[$5 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __sg_draw(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _sfetch_dowork() {
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$0 >> 2] | 0)) ___assert_fail(21880, 21538, 2440, 22103);
 if (!(HEAP8[HEAP32[$0 >> 2] >> 0] & 1)) ___assert_fail(21880, 21538, 2440, 22103);
 if (!(HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[(HEAP32[$0 >> 2] | 0) + 2 >> 0] = 1;
 HEAP32[$1 >> 2] = 0;
 while (1) {
  if ((HEAP32[$1 >> 2] | 0) >= 2) break;
  HEAP32[$2 >> 2] = 0;
  while (1) {
   if ((HEAP32[$2 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) break;
   __sfetch_channel_dowork((HEAP32[$0 >> 2] | 0) + 48 + ((HEAP32[$2 >> 2] | 0) * 76 | 0) | 0, (HEAP32[$0 >> 2] | 0) + 24 | 0);
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
  }
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
 }
 HEAP8[(HEAP32[$0 >> 2] | 0) + 2 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 2) << 2) | 0;
 HEAP32[$5 >> 2] = $11;
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $15 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $15 = $11;
 }
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$$pre$phiZ2D >> 2] = $14;
 $16 = $1 + 8 | 0;
 $17 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 $19 = $0 + 8 | 0;
 $20 = $1 + 12 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $21;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 2) << 2) | 0;
 HEAP32[$5 >> 2] = $11;
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $15 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $15 = $11;
 }
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$$pre$phiZ2D >> 2] = $14;
 $16 = $1 + 8 | 0;
 $17 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 $19 = $0 + 8 | 0;
 $20 = $1 + 12 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $21;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 3) << 3) | 0;
 HEAP32[$5 >> 2] = $11;
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $15 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $15 = $11;
 }
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$$pre$phiZ2D >> 2] = $14;
 $16 = $1 + 8 | 0;
 $17 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 $19 = $0 + 8 | 0;
 $20 = $1 + 12 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $21;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $10 = (HEAP32[$5 >> 2] | 0) + (0 - $7) | 0;
 HEAP32[$5 >> 2] = $10;
 if (($7 | 0) > 0) {
  _memcpy($10 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $14 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $14 = $10;
 }
 $13 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $14;
 HEAP32[$$pre$phiZ2D >> 2] = $13;
 $15 = $1 + 8 | 0;
 $16 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$15 >> 2] = $16;
 $18 = $0 + 8 | 0;
 $19 = $1 + 12 | 0;
 $20 = HEAP32[$18 >> 2] | 0;
 HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$19 >> 2] = $20;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __sg_gl_cache_clear_texture_bindings($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP8[$1 >> 0] = $0 & 1;
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if ((HEAP32[$2 >> 2] | 0) >= 12) {
   label = 8;
   break;
  }
  if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[539413] | 0)) {
   label = 8;
   break;
  }
  if (HEAP8[$1 >> 0] & 1) label = 6; else if (HEAP32[2157516 + (HEAP32[$2 >> 2] << 3) + 4 >> 2] | 0) label = 6;
  if ((label | 0) == 6) {
   label = 0;
   HEAP32[$3 >> 2] = 33984 + (HEAP32[$2 >> 2] | 0);
   _glActiveTexture(HEAP32[$3 >> 2] | 0);
   _glBindTexture(3553, 0);
   _glBindTexture(34067, 0);
   HEAP32[2157516 + (HEAP32[$2 >> 2] << 3) >> 2] = 0;
   HEAP32[2157516 + (HEAP32[$2 >> 2] << 3) + 4 >> 2] = 0;
   HEAP32[539408] = HEAP32[$3 >> 2];
  }
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 if ((label | 0) == 8) {
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $3 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) $$2 = 1; else if (!$1) $$2 = 0; else {
  $6 = ___dynamic_cast($1, 11360, 11344, 0) | 0;
  if (!$6) $$2 = 0; else {
   dest = $3 + 4 | 0;
   stop = dest + 52 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 8 >> 2] = $0;
   HEAP32[$3 + 12 >> 2] = -1;
   HEAP32[$3 + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 3]($6, $3, HEAP32[$2 >> 2] | 0, 1);
   if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
    HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2];
    $$0 = 1;
   } else $$0 = 0;
   $$2 = $$0;
  }
 }
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    HEAP32[$13 >> 2] = $2;
    $19 = $1 + 40 | 0;
    HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
    if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) HEAP8[$1 + 54 >> 0] = 1;
    HEAP32[$1 + 44 >> 2] = 4;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _stbi__mad3sizes_valid($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 if (!(_stbi__mul2sizes_valid(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0)) {
  $27 = 0;
  $26 = $27 & 1;
  STACKTOP = sp;
  return $26 | 0;
 }
 $14 = Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid($14, HEAP32[$6 >> 2] | 0) | 0)) {
  $27 = 0;
  $26 = $27 & 1;
  STACKTOP = sp;
  return $26 | 0;
 }
 $20 = Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 $22 = Math_imul($20, HEAP32[$6 >> 2] | 0) | 0;
 $27 = (_stbi__addsizes_valid($22, HEAP32[$7 >> 2] | 0) | 0) != 0;
 $26 = $27 & 1;
 STACKTOP = sp;
 return $26 | 0;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE12__move_rangeEPS1_S5_S5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$017 = 0, $$056$i$i = 0, $$07$i$i = 0, $$in = 0, $10 = 0, $4 = 0, $5 = 0, $8 = 0;
 $4 = $0 + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $8 = $5 - $3 | 0;
 $10 = $1 + ($8 >> 4 << 4) | 0;
 if ($10 >>> 0 < $2 >>> 0) {
  $$017 = $10;
  $$in = $5;
  do {
   HEAP32[$$in >> 2] = HEAP32[$$017 >> 2];
   HEAP32[$$in + 4 >> 2] = HEAP32[$$017 + 4 >> 2];
   HEAP32[$$in + 8 >> 2] = HEAP32[$$017 + 8 >> 2];
   HEAP32[$$in + 12 >> 2] = HEAP32[$$017 + 12 >> 2];
   $$017 = $$017 + 16 | 0;
   $$in = (HEAP32[$4 >> 2] | 0) + 16 | 0;
   HEAP32[$4 >> 2] = $$in;
  } while ($$017 >>> 0 < $2 >>> 0);
 }
 if ($8 | 0) {
  $$056$i$i = $10;
  $$07$i$i = $5;
  do {
   $$056$i$i = $$056$i$i + -16 | 0;
   $$07$i$i = $$07$i$i + -16 | 0;
   __ZN8DrPointFaSERKS_($$07$i$i, $$056$i$i) | 0;
  } while (($$056$i$i | 0) != ($1 | 0));
 }
 return;
}

function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $1 = 0, $10 = 0, $19 = 0, $22 = 0, $6 = 0, label = 0;
 $1 = $0;
 L1 : do if (!($1 & 3)) {
  $$015$lcssa = $0;
  label = 5;
 } else {
  $$01518 = $0;
  $22 = $1;
  while (1) {
   if (!(HEAP8[$$01518 >> 0] | 0)) {
    $$pn = $22;
    break L1;
   }
   $6 = $$01518 + 1 | 0;
   $22 = $6;
   if (!($22 & 3)) {
    $$015$lcssa = $6;
    label = 5;
    break;
   } else $$01518 = $6;
  }
 } while (0);
 if ((label | 0) == 5) {
  $$0 = $$015$lcssa;
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0;
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) $$0 = $$0 + 4 | 0; else break;
  }
  if (!(($10 & 255) << 24 >> 24)) $$1$lcssa = $$0; else {
   $$pn29 = $$0;
   while (1) {
    $19 = $$pn29 + 1 | 0;
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19;
     break;
    } else $$pn29 = $19;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $1 | 0;
}

function _stbtt__get_subr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $2;
 HEAP32[$4 >> 2] = _stbtt__cff_index_count($1) | 0;
 HEAP32[$5 >> 2] = 107;
 if ((HEAP32[$4 >> 2] | 0) >= 33900) HEAP32[$5 >> 2] = 32768; else if ((HEAP32[$4 >> 2] | 0) >= 1240) HEAP32[$5 >> 2] = 1131;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
 if ((HEAP32[$3 >> 2] | 0) >= 0) if ((HEAP32[$3 >> 2] | 0) < (HEAP32[$4 >> 2] | 0)) {
  $19 = HEAP32[$3 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  _stbtt__cff_index_get($0, $$byval_copy, $19);
  STACKTOP = sp;
  return;
 }
 _stbtt__new_buf($0, 0, 0);
 STACKTOP = sp;
 return;
}

function __sg_gl_destroy_pass($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(25992, 17628, 6338, 25997);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6339, 25997);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0) _glDeleteFramebuffers(1, (HEAP32[$1 >> 2] | 0) + 76 | 0);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  $16 = (HEAP32[$1 >> 2] | 0) + 76 | 0;
  if ((HEAP32[$2 >> 2] | 0) >= 4) break;
  if (HEAP32[$16 + 4 + (HEAP32[$2 >> 2] << 3) + 4 >> 2] | 0) _glDeleteFramebuffers(1, (HEAP32[$1 >> 2] | 0) + 76 + 4 + (HEAP32[$2 >> 2] << 3) + 4 | 0);
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 if (HEAP32[$16 + 36 + 4 >> 2] | 0) _glDeleteFramebuffers(1, (HEAP32[$1 >> 2] | 0) + 76 + 36 + 4 | 0);
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(25839, 17628, 6351, 25997);
}

function __sg_buffer_desc_defaults($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $24 = 0, $3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 56 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 dest = $3;
 src = HEAP32[$2 >> 2] | 0;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 8 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 8 >> 2] | 0;
 HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 12 >> 2] | 0) == 0 ? 1 : HEAP32[$3 + 12 >> 2] | 0;
 $24 = HEAP32[$3 + 16 + 4 >> 2] | 0;
 if (!(HEAP32[$3 + 4 >> 2] | 0)) HEAP32[$3 + 4 >> 2] = $24; else if (!$24) HEAP32[$3 + 16 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 dest = $0;
 src = $3;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _sfons_flush($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 $$byval_copy = sp + 776 | 0;
 $1 = sp + 772 | 0;
 $2 = sp + 768 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(24548, 24442, 1769, 24575);
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(24548, 24442, 1769, 24575);
 HEAP32[$2 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2];
 if (!(HEAP8[(HEAP32[$2 >> 2] | 0) + 20 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[(HEAP32[$2 >> 2] | 0) + 20 >> 0] = 0;
 _memset($3 | 0, 0, 768) | 0;
 HEAP32[$3 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2];
 HEAP32[$3 + 4 >> 2] = Math_imul(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2];
 _sg_update_image($$byval_copy, $3);
 STACKTOP = sp;
 return;
}

function __sfetch_ring_dequeue($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $31 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(38027, 21538, 1309, 39696);
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(38027, 21538, 1309, 39696);
 if (__sfetch_ring_empty(HEAP32[$1 >> 2] | 0) | 0) ___assert_fail(39717, 21538, 1310, 39696);
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] << 2) >> 2];
  $31 = __sfetch_ring_wrap(HEAP32[$1 >> 2] | 0, (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + 1 | 0) | 0;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = $31;
  STACKTOP = sp;
  return HEAP32[$2 >> 2] | 0;
 } else ___assert_fail(39741, 21538, 1311, 39696);
 return 0;
}

function _stbtt__get_subrs($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 _stbtt__dict_get_ints($2, 18, 2, $4);
 if (HEAP32[$4 + 4 >> 2] | 0) if (HEAP32[$4 >> 2] | 0) {
  _stbtt__buf_range($6, $1, HEAP32[$4 + 4 >> 2] | 0, HEAP32[$4 >> 2] | 0);
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  _stbtt__dict_get_ints($5, 19, 1, $3);
  if (HEAP32[$3 >> 2] | 0) {
   _stbtt__buf_seek($1, (HEAP32[$4 + 4 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0);
   _stbtt__cff_get_index($0, $1);
   STACKTOP = sp;
   return;
  } else {
   _stbtt__new_buf($0, 0, 0);
   STACKTOP = sp;
   return;
  }
 }
 _stbtt__new_buf($0, 0, 0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $9 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $9 = HEAP32[$0 + 12 >> 2] | 0;
  $10 = $0 + 16 + ($9 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3);
  if (($9 | 0) > 1) {
   $13 = $1 + 54 | 0;
   $$0 = $0 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3);
    if (HEAP8[$13 >> 0] | 0) break L1;
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $10 >>> 0);
  }
 } while (0);
 return;
}

function _stbi__get8($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $10 = HEAP32[$2 >> 2] | 0;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 168 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$2 >> 2] | 0) + 172 >> 2] | 0) >>> 0) {
  $11 = $10 + 168 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  HEAP32[$11 >> 2] = $12 + 1;
  HEAP8[$1 >> 0] = HEAP8[$12 >> 0] | 0;
  $24 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $24 | 0;
 }
 if (HEAP32[$10 + 32 >> 2] | 0) {
  _stbi__refill_buffer(HEAP32[$2 >> 2] | 0);
  $20 = (HEAP32[$2 >> 2] | 0) + 168 | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  HEAP32[$20 >> 2] = $21 + 1;
  HEAP8[$1 >> 0] = HEAP8[$21 >> 0] | 0;
  $24 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $24 | 0;
 } else {
  HEAP8[$1 >> 0] = 0;
  $24 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $24 | 0;
 }
 return 0;
}

function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$018$lcssa = 0, $$01820 = 0, $$021 = 0, $$lcssa = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $40 = 0, $43 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0);
 $32 = $0 + 3 | 0;
 $33 = HEAP8[$32 >> 0] | 0;
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255;
 $36 = $33 << 24 >> 24 == 0;
 if (($35 | 0) == ($18 | 0) | $36) {
  $$018$lcssa = $32;
  $$lcssa = $36;
 } else {
  $$01820 = $32;
  $$021 = $35;
  while (1) {
   $39 = $$01820 + 1 | 0;
   $40 = HEAP8[$39 >> 0] | 0;
   $$021 = $$021 << 8 | $40 & 255;
   $43 = $40 << 24 >> 24 == 0;
   if (($$021 | 0) == ($18 | 0) | $43) {
    $$018$lcssa = $39;
    $$lcssa = $43;
    break;
   } else $$01820 = $39;
  }
 }
 return ($$lcssa ? 0 : $$018$lcssa + -3 | 0) | 0;
}

function _stbi__hdr_test_core($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $13 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = 0;
 while (1) {
  $11 = HEAP32[$3 >> 2] | 0;
  if (!(HEAP8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) >> 0] | 0)) {
   label = 6;
   break;
  }
  $13 = (_stbi__get8($11) | 0) & 255;
  if (($13 | 0) != (HEAP8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) >> 0] | 0)) {
   label = 4;
   break;
  }
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) {
  HEAP32[$2 >> 2] = 0;
  $22 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 } else if ((label | 0) == 6) {
  _stbi__rewind($11);
  HEAP32[$2 >> 2] = 1;
  $22 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 return 0;
}

function _strncmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $12 = 0, $4 = 0, $6 = 0;
 if (!$2) $$020 = 0; else {
  $4 = HEAP8[$0 >> 0] | 0;
  L3 : do if (!($4 << 24 >> 24)) {
   $$0$lcssa = $1;
   $$lcssa = 0;
  } else {
   $$01823 = $0;
   $$01925$in = $2;
   $$024 = $1;
   $10 = $4;
   while (1) {
    $$01925$in = $$01925$in + -1 | 0;
    $6 = HEAP8[$$024 >> 0] | 0;
    if (!($10 << 24 >> 24 == $6 << 24 >> 24 & (($$01925$in | 0) != 0 & $6 << 24 >> 24 != 0))) {
     $$0$lcssa = $$024;
     $$lcssa = $10;
     break L3;
    }
    $$01823 = $$01823 + 1 | 0;
    $12 = $$024 + 1 | 0;
    $10 = HEAP8[$$01823 >> 0] | 0;
    if (!($10 << 24 >> 24)) {
     $$0$lcssa = $12;
     $$lcssa = 0;
     break;
    } else $$024 = $12;
   }
  } while (0);
  $$020 = ($$lcssa & 255) - (HEAPU8[$$0$lcssa >> 0] | 0) | 0;
 }
 return $$020 | 0;
}

function _stbtt__cff_skip_operand($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$3 >> 2] = (_stbtt__buf_peek8(HEAP32[$1 >> 2] | 0) | 0) & 255;
 if ((HEAP32[$3 >> 2] | 0) < 28) ___assert_fail(40403, 40159, 1147, 40412);
 $11 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[$3 >> 2] | 0) != 30) {
  _stbtt__cff_int($11) | 0;
  STACKTOP = sp;
  return;
 }
 _stbtt__buf_skip($11, 1);
 while (1) {
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0)) {
   label = 10;
   break;
  }
  HEAP32[$2 >> 2] = (_stbtt__buf_get8(HEAP32[$1 >> 2] | 0) | 0) & 255;
  if ((HEAP32[$2 >> 2] & 15 | 0) == 15) {
   label = 10;
   break;
  }
  if ((HEAP32[$2 >> 2] >> 4 | 0) == 15) {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) {
  STACKTOP = sp;
  return;
 }
}

function __ZNK13TPPLPartition12ScanLineEdgeltERKS0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0.0, $12 = 0, $15 = 0, $2 = 0, $4 = 0.0, $5 = 0, $9 = 0;
 $2 = $1 + 8 | 0;
 $4 = +HEAPF64[$1 + 16 >> 3];
 $5 = $1 + 32 | 0;
 $9 = $0 + 8 | 0;
 $11 = +HEAPF64[$0 + 16 >> 3];
 $12 = $0 + 32 | 0;
 $15 = $11 == +HEAPF64[$0 + 40 >> 3];
 do if ($4 == +HEAPF64[$1 + 40 >> 3]) if ($15) {
  $$0 = $11 < $4;
  break;
 } else {
  $$0 = __ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_(0, $9, $12, $2) | 0;
  break;
 } else {
  if ($15) {
   $$0 = (__ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_(0, $2, $5, $9) | 0) ^ 1;
   break;
  }
  if ($11 < $4) {
   $$0 = (__ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_(0, $2, $5, $9) | 0) ^ 1;
   break;
  } else {
   $$0 = __ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_(0, $9, $12, $2) | 0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _stbi__get_marker($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $27 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 5 | 0;
 $2 = sp;
 $3 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 $9 = HEAP32[$2 >> 2] | 0;
 if ((HEAPU8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] | 0 | 0) != 255) {
  HEAP8[$3 >> 0] = HEAP8[$9 + 18372 >> 0] | 0;
  HEAP8[(HEAP32[$2 >> 2] | 0) + 18372 >> 0] = -1;
  HEAP8[$1 >> 0] = HEAP8[$3 >> 0] | 0;
  $27 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $27 | 0;
 }
 HEAP8[$3 >> 0] = _stbi__get8(HEAP32[$9 >> 2] | 0) | 0;
 if ((HEAPU8[$3 >> 0] | 0 | 0) != 255) {
  HEAP8[$1 >> 0] = -1;
  $27 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $27 | 0;
 }
 while (1) {
  if ((HEAPU8[$3 >> 0] | 0 | 0) != 255) break;
  HEAP8[$3 >> 0] = _stbi__get8(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0;
 }
 HEAP8[$1 >> 0] = HEAP8[$3 >> 0] | 0;
 $27 = HEAP8[$1 >> 0] | 0;
 STACKTOP = sp;
 return $27 | 0;
}

function __saudio_emsc_pull($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP32[544715] | 0)) ___assert_fail(22280, 22303, 1441, 22374);
 if ((HEAP32[$2 >> 2] | 0) != (HEAP32[542641] | 0)) {
  HEAP32[$1 >> 2] = 0;
  $26 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 if (__saudio_has_callback() | 0) __saudio_stream_callback(HEAP32[544715] | 0, HEAP32[$2 >> 2] | 0, HEAP32[542645] | 0); else {
  HEAP32[$3 >> 2] = Math_imul(HEAP32[$2 >> 2] | 0, HEAP32[542642] | 0) | 0;
  if (!(__saudio_fifo_read(2170616, HEAP32[544715] | 0, HEAP32[$3 >> 2] | 0) | 0)) _memset(HEAP32[544715] | 0, 0, HEAP32[$3 >> 2] | 0) | 0;
 }
 HEAP32[$4 >> 2] = HEAP32[544715];
 HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
 $26 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function __sfetch_ring_peek($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(38027, 21538, 1318, 39760);
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(38027, 21538, 1318, 39760);
 if (__sfetch_ring_empty(HEAP32[$2 >> 2] | 0) | 0) ___assert_fail(39717, 21538, 1319, 39760);
 $13 = HEAP32[$3 >> 2] | 0;
 if ($13 >>> 0 < (__sfetch_ring_count(HEAP32[$2 >> 2] | 0) | 0) >>> 0) {
  HEAP32[$4 >> 2] = __sfetch_ring_wrap(HEAP32[$2 >> 2] | 0, (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0) | 0;
  STACKTOP = sp;
  return HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$4 >> 2] << 2) >> 2] | 0;
 } else ___assert_fail(39778, 21538, 1320, 39760);
 return 0;
}

function __sg_validate_update_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $35 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) != 0)) ___assert_fail(37055, 17628, 13770, 37080);
 if (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) {
  __sg_validate_begin();
  __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 16 >> 2] | 0) != 1, 83);
  __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0), 84);
  __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 20 >> 2] | 0) != (HEAP32[539113] | 0), 85);
  __sg_validate((HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + 24 >> 2] | 0) != (HEAP32[539113] | 0), 86);
  $35 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $35 | 0;
 } else ___assert_fail(37055, 17628, 13770, 37080);
 return 0;
}

function __sg_gl_destroy_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(25895, 17628, 5741, 25899);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5742, 25899);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 + 28 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[$1 >> 2] | 0) + 48 + (HEAP32[$2 >> 2] << 2) >> 2] | 0) {
   __sg_gl_cache_invalidate_buffer(HEAP32[(HEAP32[$1 >> 2] | 0) + 48 + (HEAP32[$2 >> 2] << 2) >> 2] | 0);
   if (!(HEAP8[(HEAP32[$1 >> 2] | 0) + 48 + 8 >> 0] & 1)) _glDeleteBuffers(1, (HEAP32[$1 >> 2] | 0) + 48 + (HEAP32[$2 >> 2] << 2) | 0);
  }
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(25839, 17628, 5751, 25899);
}

function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $5 = $1 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $11 = $6 << 24 >> 24 < 0 ? HEAP32[$1 + 4 >> 2] | 0 : $6 & 255;
 $12 = __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcmm($0, (HEAP8[$5 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1, $11, $11 + $12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0, $2, $12) | 0;
 return;
}

function __sfetch_ring_enqueue($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $29 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(38027, 21538, 1301, 38041);
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(38027, 21538, 1301, 38041);
 if (__sfetch_ring_full(HEAP32[$2 >> 2] | 0) | 0) ___assert_fail(38062, 21538, 1302, 38041);
 if ((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) >>> 0) {
  HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[HEAP32[$2 >> 2] >> 2] << 2) >> 2] = HEAP32[$3 >> 2];
  $29 = __sfetch_ring_wrap(HEAP32[$2 >> 2] | 0, (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 1 | 0) | 0;
  HEAP32[HEAP32[$2 >> 2] >> 2] = $29;
  STACKTOP = sp;
  return;
 } else ___assert_fail(38085, 21538, 1303, 38041);
}

function _stbi__tga_read_rgb16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 22 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP16[$4 >> 1] = _stbi__get16le(HEAP32[$2 >> 2] | 0) | 0;
 HEAP16[$5 >> 1] = 31;
 HEAP32[$6 >> 2] = (HEAPU16[$4 >> 1] | 0) >> 10 & (HEAPU16[$5 >> 1] | 0);
 HEAP32[$7 >> 2] = (HEAPU16[$4 >> 1] | 0) >> 5 & (HEAPU16[$5 >> 1] | 0);
 HEAP32[$8 >> 2] = (HEAPU16[$4 >> 1] | 0) & (HEAPU16[$5 >> 1] | 0);
 HEAP8[HEAP32[$3 >> 2] >> 0] = ((HEAP32[$6 >> 2] | 0) * 255 | 0) / 31 | 0;
 HEAP8[(HEAP32[$3 >> 2] | 0) + 1 >> 0] = ((HEAP32[$7 >> 2] | 0) * 255 | 0) / 31 | 0;
 HEAP8[(HEAP32[$3 >> 2] | 0) + 2 >> 0] = ((HEAP32[$8 >> 2] | 0) * 255 | 0) / 31 | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $5 = __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0;
 $6 = $2 + 11 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $12 = $7 << 24 >> 24 < 0 ? HEAP32[$2 + 4 >> 2] | 0 : $7 & 255;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcmm($0, $1, $5, $12 + $5 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0, (HEAP8[$6 >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2, $12) | 0;
 return;
}

function _stbi__shiftsigned($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $8 = HEAP32[$4 >> 2] | 0;
 if ((HEAP32[$4 >> 2] | 0) < 0) HEAP32[$3 >> 2] = HEAP32[$3 >> 2] << 0 - $8; else HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) >>> $8;
 if ((HEAP32[$3 >> 2] | 0) >>> 0 >= 256) ___assert_fail(44098, 43392, 5113, 44106);
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) >>> (8 - (HEAP32[$5 >> 2] | 0) | 0);
 if ((HEAP32[$5 >> 2] | 0) >= 0 & (HEAP32[$5 >> 2] | 0) <= 8) {
  $28 = Math_imul(HEAP32[$3 >> 2] | 0, HEAP32[8560 + (HEAP32[$5 >> 2] << 2) >> 2] | 0) | 0;
  STACKTOP = sp;
  return $28 >> HEAP32[8608 + (HEAP32[$5 >> 2] << 2) >> 2] | 0;
 } else ___assert_fail(44124, 43392, 5115, 44106);
 return 0;
}

function _stbi__refill_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0, $17 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 15](HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] | 0, (HEAP32[$1 >> 2] | 0) + 40 | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] | 0) | 0;
 $17 = HEAP32[$1 >> 2] | 0;
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAP32[$17 + 32 >> 2] = 0;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 168 >> 2] = (HEAP32[$1 >> 2] | 0) + 40;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 172 >> 2] = (HEAP32[$1 >> 2] | 0) + 40 + 1;
  HEAP8[HEAP32[(HEAP32[$1 >> 2] | 0) + 168 >> 2] >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[(HEAP32[$1 >> 2] | 0) + 168 >> 2] = $17 + 40;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 172 >> 2] = (HEAP32[$1 >> 2] | 0) + 40 + (HEAP32[$2 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__27__sort4IR7comparePmEEjT0_S4_S4_S4_T_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $11 = 0, $15 = 0, $22 = 0, $5 = 0, $9 = 0;
 $5 = __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($0, $1, $2, $4) | 0;
 if (__ZN7compareclEmm($4, HEAP32[$3 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0) {
  $9 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $9;
  $11 = $5 + 1 | 0;
  if (__ZN7compareclEmm($4, HEAP32[$2 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) {
   $15 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $15;
   if (__ZN7compareclEmm($4, HEAP32[$1 >> 2] | 0, HEAP32[$0 >> 2] | 0) | 0) {
    $22 = HEAP32[$0 >> 2] | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $22;
    $$0 = $5 + 3 | 0;
   } else $$0 = $5 + 2 | 0;
  } else $$0 = $11;
 } else $$0 = $5;
 return $$0 | 0;
}

function _stbtt__dict_get_ints($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 _stbtt__dict_get($9, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >= (HEAP32[$6 >> 2] | 0)) {
   label = 5;
   break;
  }
  if ((HEAP32[$9 + 4 >> 2] | 0) >= (HEAP32[$9 + 8 >> 2] | 0)) {
   label = 5;
   break;
  }
  $20 = _stbtt__cff_int($9) | 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + (HEAP32[$8 >> 2] << 2) >> 2] = $20;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return;
 }
}

function __sg_pixelformat_bytesize($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 5:
 case 4:
 case 3:
 case 2:
  {
   HEAP32[$1 >> 2] = 1;
   break;
  }
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
 case 8:
 case 7:
 case 6:
  {
   HEAP32[$1 >> 2] = 2;
   break;
  }
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
  {
   HEAP32[$1 >> 2] = 8;
   break;
  }
 case 40:
 case 39:
 case 38:
  {
   HEAP32[$1 >> 2] = 16;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 3954, 37264);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function _sfetch_shutdown() {
 var $0 = 0, $1 = 0, $16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$0 >> 2] | 0)) ___assert_fail(21880, 21538, 2368, 21898);
 if (!(HEAP8[HEAP32[$0 >> 2] >> 0] & 1)) ___assert_fail(21880, 21538, 2368, 21898);
 HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = 0;
 HEAP32[$1 >> 2] = 0;
 while (1) {
  $16 = HEAP32[$0 >> 2] | 0;
  if ((HEAP32[$1 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$0 >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) break;
  if (HEAP8[$16 + 48 + ((HEAP32[$1 >> 2] | 0) * 76 | 0) + 72 >> 0] & 1) __sfetch_channel_discard((HEAP32[$0 >> 2] | 0) + 48 + ((HEAP32[$1 >> 2] | 0) * 76 | 0) | 0);
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1;
 }
 __sfetch_pool_discard($16 + 24 | 0);
 HEAP8[HEAP32[$0 >> 2] >> 0] = 0;
 _free(HEAP32[$0 >> 2] | 0);
 HEAP32[542635] = 0;
 STACKTOP = sp;
 return;
}

function __ZN10DrPolygonF22findWindingOrientationERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0.0, $$02325 = 0, $$026 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $spec$select = 0, $$02325$looptemp = 0;
 $3 = HEAP32[$0 >> 2] | 0;
 $4 = (HEAP32[$0 + 4 >> 2] | 0) - $3 | 0;
 $6 = $3;
 if (!$4) $$0$lcssa = 0.0; else {
  $7 = $4 >> 4;
  $$02325 = 0;
  $$026 = 0.0;
  while (1) {
   $$02325$looptemp = $$02325;
   $$02325 = $$02325 + 1 | 0;
   $spec$select = ($$02325 | 0) == ($7 | 0) ? 0 : $$02325;
   $21 = $$026 + (+HEAPF64[$6 + ($$02325$looptemp << 4) >> 3] * +HEAPF64[$6 + ($spec$select << 4) + 8 >> 3] - +HEAPF64[$6 + ($$02325$looptemp << 4) + 8 >> 3] * +HEAPF64[$6 + ($spec$select << 4) >> 3]);
   if ($$02325 >>> 0 >= $7 >>> 0) {
    $$0$lcssa = $21;
    break;
   } else $$026 = $21;
  }
 }
 return ($$0$lcssa > 0.0 ? 1 : $$0$lcssa < 0.0 ? 0 : 2) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$1 = $0; else switch (HEAP8[$0 >> 0] | 0) {
 case 68:
 case 67:
  {
   $$1 = __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 case 85:
  {
   $$1 = __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
  {
   $$1 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
   break L1;
   break;
  }
 default:
  return __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
 } while (0);
 return $$1 | 0;
}

function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $35 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8;
 $23 = $0 + 2 | 0;
 $24 = HEAP8[$23 >> 0] | 0;
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8;
 $28 = $24 << 24 >> 24 == 0;
 if (($27 | 0) == ($14 | 0) | $28) {
  $$016$lcssa = $23;
  $$lcssa = $28;
 } else {
  $$01618 = $23;
  $$019 = $27;
  while (1) {
   $30 = $$01618 + 1 | 0;
   $31 = HEAP8[$30 >> 0] | 0;
   $$019 = ($$019 | $31 & 255) << 8;
   $35 = $31 << 24 >> 24 == 0;
   if (($$019 | 0) == ($14 | 0) | $35) {
    $$016$lcssa = $30;
    $$lcssa = $35;
    break;
   } else $$01618 = $30;
  }
 }
 return ($$lcssa ? 0 : $$016$lcssa + -2 | 0) | 0;
}

function _stbi__jpeg_get_bits($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $38 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 18368 >> 2] | 0) < (HEAP32[$3 >> 2] | 0)) _stbi__grow_buffer_unsafe(HEAP32[$2 >> 2] | 0);
 HEAP32[$4 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 18364 >> 2] << HEAP32[$3 >> 2] | (HEAP32[(HEAP32[$2 >> 2] | 0) + 18364 >> 2] | 0) >>> (32 - (HEAP32[$3 >> 2] | 0) | 0);
 HEAP32[(HEAP32[$2 >> 2] | 0) + 18364 >> 2] = HEAP32[$4 >> 2] & ~HEAP32[9760 + (HEAP32[$3 >> 2] << 2) >> 2];
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & HEAP32[9760 + (HEAP32[$3 >> 2] << 2) >> 2];
 $38 = (HEAP32[$2 >> 2] | 0) + 18368 | 0;
 HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) - (HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$4 >> 2] | 0;
}

function _sg_make_pipeline($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 $$byval_copy = sp + 568 | 0;
 $1 = sp + 564 | 0;
 $2 = sp + 560 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14697, 18379);
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(17623, 17628, 14698, 18379);
 __sg_pipeline_desc_defaults($3, HEAP32[$2 >> 2] | 0);
 HEAP32[$4 >> 2] = __sg_alloc_pipeline() | 0;
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
  __sg_init_pipeline($$byval_copy, $3);
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $13 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 } else {
  _puts(18396) | 0;
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $13 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0;
}

function _sg_make_shader($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2128 | 0;
 $$byval_copy = sp + 2112 | 0;
 $1 = sp + 2108 | 0;
 $2 = sp + 2104 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14681, 18341);
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(17623, 17628, 14682, 18341);
 __sg_shader_desc_defaults($3, HEAP32[$2 >> 2] | 0);
 HEAP32[$4 >> 2] = __sg_alloc_shader() | 0;
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
  __sg_init_shader($$byval_copy, $3);
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $13 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 } else {
  _puts(18356) | 0;
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $13 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0;
}

function _stbi__jpeg_load($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 28 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[sp + 8 >> 2] = $5;
 HEAP32[$13 >> 2] = _stbi__malloc(18456) | 0;
 HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[$6 >> 2];
 _stbi__setup_jpeg(HEAP32[$13 >> 2] | 0);
 HEAP32[$12 >> 2] = _load_jpeg_image(HEAP32[$13 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0;
 _free(HEAP32[$13 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$12 >> 2] | 0;
}

function __sfetch_ring_count($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $17 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(38027, 21538, 1288, 39661);
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(38027, 21538, 1288, 39661);
 $16 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
 $17 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) >>> 0) HEAP32[$2 >> 2] = $16 - (HEAP32[$17 + 4 >> 2] | 0); else HEAP32[$2 >> 2] = $16 + (HEAP32[$17 + 8 >> 2] | 0) - (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0);
 if ((HEAP32[$2 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) >>> 0) {
  STACKTOP = sp;
  return HEAP32[$2 >> 2] | 0;
 } else ___assert_fail(39680, 21538, 1296, 39661);
 return 0;
}

function _stbi__malloc_mad3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $17 = 0, $19 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if (_stbi__mad3sizes_valid(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0) {
  $17 = Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
  $19 = Math_imul($17, HEAP32[$7 >> 2] | 0) | 0;
  HEAP32[$4 >> 2] = _stbi__malloc($19 + (HEAP32[$8 >> 2] | 0) | 0) | 0;
  $23 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $23 | 0;
 } else {
  HEAP32[$4 >> 2] = 0;
  $23 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $23 | 0;
 }
 return 0;
}

function _stbtt_GetGlyphBitmapBox($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$8 >> 2] = $0;
 HEAP32[$9 >> 2] = $1;
 HEAPF32[$10 >> 2] = $2;
 HEAPF32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAP32[$13 >> 2] = $5;
 HEAP32[$14 >> 2] = $6;
 HEAP32[$15 >> 2] = $7;
 _stbtt_GetGlyphBitmapBoxSubpixel(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, +HEAPF32[$10 >> 2], +HEAPF32[$11 >> 2], 0.0, 0.0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbi__tga_get_comp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 if (HEAP32[$6 >> 2] | 0) HEAP32[HEAP32[$6 >> 2] >> 2] = 0;
 switch (HEAP32[$4 >> 2] | 0) {
 case 8:
  {
   HEAP32[$3 >> 2] = 1;
   break;
  }
 case 16:
  {
   if (HEAP32[$5 >> 2] | 0) HEAP32[$3 >> 2] = 2; else label = 7;
   break;
  }
 case 15:
  {
   label = 7;
   break;
  }
 case 32:
 case 24:
  {
   HEAP32[$3 >> 2] = (HEAP32[$4 >> 2] | 0) / 8 | 0;
   break;
  }
 default:
  HEAP32[$3 >> 2] = 0;
 }
 if ((label | 0) == 7) {
  if (HEAP32[$6 >> 2] | 0) HEAP32[HEAP32[$6 >> 2] >> 2] = 1;
  HEAP32[$3 >> 2] = 3;
 }
 STACKTOP = sp;
 return HEAP32[$3 >> 2] | 0;
}

function _sg_make_image($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 912 | 0;
 $$byval_copy = sp + 896 | 0;
 $1 = sp + 892 | 0;
 $2 = sp + 888 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14665, 18305);
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(17623, 17628, 14666, 18305);
 __sg_image_desc_defaults($3, HEAP32[$2 >> 2] | 0);
 HEAP32[$4 >> 2] = __sg_alloc_image() | 0;
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
  __sg_init_image($$byval_copy, $3);
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $13 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 } else {
  _puts(18319) | 0;
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $13 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0;
}

function _sg_make_buffer($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy = sp + 72 | 0;
 $1 = sp + 68 | 0;
 $2 = sp + 64 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14649, 18267);
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(17623, 17628, 14650, 18267);
 __sg_buffer_desc_defaults($3, HEAP32[$2 >> 2] | 0);
 HEAP32[$4 >> 2] = __sg_alloc_buffer() | 0;
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
  __sg_init_buffer($$byval_copy, $3);
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $13 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 } else {
  _puts(18282) | 0;
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  $13 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0;
}

function __sfetch_emsc_failed_buffer_too_small($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$2 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$2 >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$3 >> 2] = __sfetch_pool_item_lookup((HEAP32[$2 >> 2] | 0) + 24 | 0, HEAP32[$1 >> 2] | 0) | 0;
 if (!(HEAP32[$3 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 32 + 8 >> 2] = 3;
 HEAP8[(HEAP32[$3 >> 2] | 0) + 32 + 12 >> 0] = 1;
 HEAP8[(HEAP32[$3 >> 2] | 0) + 32 + 13 >> 0] = 1;
 __sfetch_ring_enqueue((HEAP32[$2 >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) * 76 | 0) + 52 | 0, HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbtt_MakeGlyphBitmap($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 $6 = +$6;
 $7 = $7 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$8 >> 2] = $0;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAPF32[$13 >> 2] = $5;
 HEAPF32[$14 >> 2] = $6;
 HEAP32[$15 >> 2] = $7;
 _stbtt_MakeGlyphBitmapSubpixel(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, +HEAPF32[$13 >> 2], +HEAPF32[$14 >> 2], 0.0, 0.0, HEAP32[$15 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _sg_update_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 15071, 19295);
 HEAP32[$3 >> 2] = __sg_lookup_image(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$3 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 if (!(__sg_validate_update_image(HEAP32[$3 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 64 >> 2] | 0) == (HEAP32[539113] | 0)) ___assert_fail(19311, 17628, 15075, 19295);
 __sg_update_image(HEAP32[$3 >> 2] | 0, HEAP32[$2 >> 2] | 0);
 HEAP32[(HEAP32[$3 >> 2] | 0) + 12 + 64 >> 2] = HEAP32[539113];
 STACKTOP = sp;
 return;
}

function __ZN7meshoptL11updateCacheEjjjjPjRj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $11 = 0, $14 = 0, $18 = 0, $21 = 0, $5 = 0, $6 = 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $3 + ($0 << 2) | 0;
 if (($5 - (HEAP32[$6 >> 2] | 0) | 0) >>> 0 > 16) {
  HEAP32[$4 >> 2] = $5 + 1;
  HEAP32[$6 >> 2] = $5;
  $$0 = 1;
  $14 = HEAP32[$4 >> 2] | 0;
 } else {
  $$0 = 0;
  $14 = $5;
 }
 $11 = $3 + ($1 << 2) | 0;
 if (($14 - (HEAP32[$11 >> 2] | 0) | 0) >>> 0 > 16) {
  HEAP32[$4 >> 2] = $14 + 1;
  HEAP32[$11 >> 2] = $14;
  $$1 = $$0 + 1 | 0;
  $21 = HEAP32[$4 >> 2] | 0;
 } else {
  $$1 = $$0;
  $21 = $14;
 }
 $18 = $3 + ($2 << 2) | 0;
 if (($21 - (HEAP32[$18 >> 2] | 0) | 0) >>> 0 > 16) {
  HEAP32[$4 >> 2] = $21 + 1;
  HEAP32[$18 >> 2] = $21;
  $$2 = $$1 + 1 | 0;
 } else $$2 = $$1;
 return $$2 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEmm($0) {
 $0 = $0 | 0;
 var $$sroa$speculated = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = $0 + 11 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 if ($3 << 24 >> 24 < 0) {
  $10 = HEAP32[$0 + 4 >> 2] | 0;
  $14 = HEAP32[$0 >> 2] | 0;
 } else {
  $10 = $3 & 255;
  $14 = $0;
 }
 $$sroa$speculated = ($10 | 0) != 0 & 1;
 $11 = $10 - $$sroa$speculated | 0;
 if (!$11) $16 = $3; else {
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($14, $14 + $$sroa$speculated | 0, $11) | 0;
  $16 = HEAP8[$2 >> 0] | 0;
 }
 if ($16 << 24 >> 24 < 0) HEAP32[$0 + 4 >> 2] = $11; else HEAP8[$2 >> 0] = $11;
 HEAP8[$1 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14 + $11 | 0, $1);
 STACKTOP = sp;
 return;
}

function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $1 & 255;
 HEAP8[$2 >> 0] = $3;
 $4 = $0 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!$5) if (!(___towrite($0) | 0)) {
  $12 = HEAP32[$4 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $12 = $5;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $9 = $0 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) {
   $13 = $1 & 255;
   if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
    HEAP32[$9 >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $3;
    $$0 = $13;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, $2, 1) | 0) == 1) $$0 = HEAPU8[$2 >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 getTempRet0() | 0;
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709551616.0, $1);
    $$016 = $9;
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   HEAP32[$1 >> 2] = $storemerge;
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $2;
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function _fons__tt_renderGlyphBitmap($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 $6 = +$6;
 $7 = $7 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$8 >> 2] = $0;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAPF32[$13 >> 2] = $5;
 HEAPF32[$14 >> 2] = $6;
 HEAP32[$15 >> 2] = $7;
 _stbtt_MakeGlyphBitmap(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, +HEAPF32[$13 >> 2], +HEAPF32[$14 >> 2], HEAP32[$15 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8988465674311579538646525.0e283;
  $5 = ($1 | 0) > 2046;
  $7 = $1 + -2046 | 0;
  $$0 = $5 ? $3 * 8988465674311579538646525.0e283 : $3;
  $$020 = $5 ? (($7 | 0) < 1023 ? $7 : 1023) : $1 + -1023 | 0;
 } else if (($1 | 0) < -1022) {
  $10 = $0 * 2.2250738585072014e-308;
  $12 = ($1 | 0) < -2044;
  $14 = $1 + 2044 | 0;
  $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10;
  $$020 = $12 ? (($14 | 0) > -1022 ? $14 : -1022) : $1 + 1022 | 0;
 } else {
  $$0 = $0;
  $$020 = $1;
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0;
 $18 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = $17;
 HEAP32[tempDoublePtr + 4 >> 2] = $18;
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function _stbi__pic_is4($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = 0;
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) >= 4) {
   label = 6;
   break;
  }
  $10 = (_stbi__get8(HEAP32[$3 >> 2] | 0) | 0) & 255;
  if (($10 | 0) != (HEAPU8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) >> 0] | 0 | 0)) {
   label = 4;
   break;
  }
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) {
  HEAP32[$2 >> 2] = 0;
  $19 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $19 | 0;
 } else if ((label | 0) == 6) {
  HEAP32[$2 >> 2] = 1;
  $19 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $19 | 0;
 }
 return 0;
}

function __sg_gl_cache_invalidate_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[$1 >> 2] | 0) == (HEAP32[539374] | 0)) {
  HEAP32[539374] = 0;
  _glBindBuffer(34962, 0);
 }
 if ((HEAP32[$1 >> 2] | 0) == (HEAP32[539375] | 0)) {
  HEAP32[539375] = 0;
  _glBindBuffer(34963, 0);
 }
 if ((HEAP32[$1 >> 2] | 0) == (HEAP32[539376] | 0)) HEAP32[539376] = 0;
 if ((HEAP32[$1 >> 2] | 0) == (HEAP32[539377] | 0)) HEAP32[539377] = 0;
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if ((HEAP32[$2 >> 2] | 0) >= 16) break;
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[2157176 + ((HEAP32[$2 >> 2] | 0) * 20 | 0) + 16 >> 2] | 0)) HEAP32[2157176 + ((HEAP32[$2 >> 2] | 0) * 20 | 0) + 16 >> 2] = 0;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __sfetch_channel_send($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre_trunc = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(39106, 21538, 2146, 39124);
 if (!(HEAP8[(HEAP32[$3 >> 2] | 0) + 72 >> 0] & 1)) ___assert_fail(39106, 21538, 2146, 39124);
 if (__sfetch_ring_full((HEAP32[$3 >> 2] | 0) + 20 | 0) | 0) {
  _puts(39145) | 0;
  HEAP8[$2 >> 0] = 0;
  $$pre_trunc = HEAP8[$2 >> 0] | 0;
  $17 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  __sfetch_ring_enqueue((HEAP32[$3 >> 2] | 0) + 20 | 0, HEAP32[$4 >> 2] | 0);
  HEAP8[$2 >> 0] = 1;
  $$pre_trunc = HEAP8[$2 >> 0] | 0;
  $17 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}

function _stbtt__csctx_rmove_to($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 var $11 = 0.0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAPF32[$4 >> 2] = $1;
 HEAPF32[$5 >> 2] = $2;
 _stbtt__csctx_close_shape(HEAP32[$3 >> 2] | 0);
 $11 = +HEAPF32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] + +HEAPF32[$4 >> 2];
 HEAPF32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = $11;
 HEAPF32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = $11;
 $20 = +HEAPF32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] + +HEAPF32[$5 >> 2];
 HEAPF32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] = $20;
 HEAPF32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = $20;
 _stbtt__csctx_v(HEAP32[$3 >> 2] | 0, 1, ~~+HEAPF32[(HEAP32[$3 >> 2] | 0) + 16 >> 2], ~~+HEAPF32[(HEAP32[$3 >> 2] | 0) + 20 >> 2], 0, 0, 0, 0);
 STACKTOP = sp;
 return;
}

function _sg_begin_default_pass($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $3 = sp + 112 | 0;
 $4 = sp + 108 | 0;
 $5 = sp + 104 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14770, 18494);
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(18516, 17628, 14771, 18494);
 if (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) ___assert_fail(18528, 17628, 14772, 18494);
 if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 100 >> 2] | 0)) {
  __sg_resolve_default_pass_action(HEAP32[$3 >> 2] | 0, $6);
  HEAP32[539115] = 0;
  HEAP8[2156468] = 1;
  __sg_begin_pass(0, $6, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(18528, 17628, 14772, 18494);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) $11 = HEAP32[$0 + 4 >> 2] | 0; else $11 = $5 & 255;
 do if ($11 >>> 0 < $1 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0, $1 - $11 | 0, $2) | 0; else if ($6) {
  $14 = (HEAP32[$0 >> 2] | 0) + $1 | 0;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($14, $3);
  HEAP32[$0 + 4 >> 2] = $1;
  break;
 } else {
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($0 + $1 | 0, $3);
  HEAP8[$4 >> 0] = $1;
  break;
 } while (0);
 STACKTOP = sp;
 return;
}

function _stbi__parse_zlib_header($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = (_stbi__zget8(HEAP32[$2 >> 2] | 0) | 0) & 255;
 HEAP32[$4 >> 2] = HEAP32[$3 >> 2] & 15;
 HEAP32[$5 >> 2] = (_stbi__zget8(HEAP32[$2 >> 2] | 0) | 0) & 255;
 do if (((HEAP32[$3 >> 2] << 8) + (HEAP32[$5 >> 2] | 0) | 0) % 31 | 0 | 0) HEAP32[$1 >> 2] = _stbi__err(45032) | 0; else {
  if (HEAP32[$5 >> 2] & 32 | 0) {
   HEAP32[$1 >> 2] = _stbi__err(45048) | 0;
   break;
  }
  if ((HEAP32[$4 >> 2] | 0) != 8) {
   HEAP32[$1 >> 2] = _stbi__err(43919) | 0;
   break;
  } else {
   HEAP32[$1 >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $7 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) != ($4 | 0)) {
  $7 = $0 + 8 | 0;
  $11 = (($4 + -16 - $3 | 0) >>> 4) + 1 | 0;
  $12 = HEAP32[$7 >> 2] | 0;
  $13 = $3;
  do {
   HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$12 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
   HEAP32[$12 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
   HEAP32[$12 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
   $12 = (HEAP32[$7 >> 2] | 0) + 16 | 0;
   HEAP32[$7 >> 2] = $12;
   $13 = $13 + 16 | 0;
  } while (($13 | 0) != ($4 | 0));
  HEAP32[$1 >> 2] = $3 + ($11 << 4);
 }
 return;
}

function _stbi__resample_row_v_2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $10 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[sp + 4 >> 2] = $4;
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if ((HEAP32[$10 >> 2] | 0) >= (HEAP32[$8 >> 2] | 0)) break;
  HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] = ((HEAPU8[(HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0) * 3 | 0) + (HEAPU8[(HEAP32[$7 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0) + 2 >> 2;
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEENS5_IS9_Lm4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $3 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $$0$i$i = HEAP32[$3 >> 2] | 0;
  while (1) {
   if (($$0$i$i | 0) == ($1 | 0)) break;
   $6 = $$0$i$i + -16 | 0;
   __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($6);
   $$0$i$i = $6;
  }
  HEAP32[$3 >> 2] = $1;
  $8 = HEAP32[$0 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE10deallocateEPS8_m($0 + 12 | 0, $8, (HEAP32[$0 + 8 >> 2] | 0) - $8 >> 4);
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcmm($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 if ($3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($3 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $10 = $3 + 16 & -16;
  $11 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($10) | 0;
  HEAP32[$0 >> 2] = $11;
  HEAP32[$0 + 8 >> 2] = $10 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $11;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($$0, $1, $2) | 0;
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $4);
 STACKTOP = sp;
 return;
}

function __sg_gl_cache_invalidate_texture($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if ((HEAP32[$2 >> 2] | 0) >= 12) break;
  HEAP32[$3 >> 2] = 2157516 + (HEAP32[$2 >> 2] << 3);
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) {
   __sg_gl_cache_active_texture(33984 + (HEAP32[$2 >> 2] | 0) | 0);
   _glBindTexture(HEAP32[HEAP32[$3 >> 2] >> 2] | 0, 0);
   HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 0;
  }
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 if ((HEAP32[$1 >> 2] | 0) != (HEAP32[539404] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[539403] = 0;
 HEAP32[539404] = 0;
 STACKTOP = sp;
 return;
}

function __sfetch_pool_item_lookup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(37961, 21538, 1448, 37981);
 if (!(HEAP8[(HEAP32[$3 >> 2] | 0) + 20 >> 0] & 1)) ___assert_fail(37961, 21538, 1448, 37981);
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$5 >> 2] = __sfetch_pool_item_at(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
   $22 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $22 | 0;
  }
 }
 HEAP32[$2 >> 2] = 0;
 $22 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $22 | 0;
}

function _stm_now() {
 var $0 = 0, $1 = 0, $10 = 0.0, $12 = 0, $13 = 0, $17 = 0, $19 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 if ((HEAP32[13510] | 0) != -1412584499) ___assert_fail(22157, 22188, 234, 22258);
 $4 = +_stm_js_perfnow();
 HEAPF64[$1 >> 3] = $4 - +HEAPF64[6756];
 if (+HEAPF64[$1 >> 3] >= 0.0) {
  $10 = +HEAPF64[$1 >> 3] * 1.0e6;
  $12 = +Math_abs($10) >= 1.0 ? ($10 > 0.0 ? ~~+Math_min(+Math_floor($10 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil(($10 - +(~~$10 >>> 0)) / 4294967296.0) >>> 0) : 0;
  $13 = $0;
  HEAP32[$13 >> 2] = ~~$10 >>> 0;
  HEAP32[$13 + 4 >> 2] = $12;
  $17 = $0;
  $19 = HEAP32[$17 >> 2] | 0;
  setTempRet0(HEAP32[$17 + 4 >> 2] | 0);
  STACKTOP = sp;
  return $19 | 0;
 } else ___assert_fail(22266, 22188, 245, 22258);
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0;
 HEAP32[$2 >> 2] = 0;
 if (($0 | 0) == ($1 | 0)) $$2 = $0; else {
  $4 = HEAP8[$0 >> 0] | 0;
  if ($4 << 24 >> 24 == 114) {
   HEAP32[$2 >> 2] = 4;
   $6 = $0 + 1 | 0;
   $$0 = $6;
   $10 = 4;
   $8 = HEAP8[$6 >> 0] | 0;
  } else {
   $$0 = $0;
   $10 = 0;
   $8 = $4;
  }
  if ($8 << 24 >> 24 == 86) {
   $9 = $10 | 2;
   HEAP32[$2 >> 2] = $9;
   $11 = $$0 + 1 | 0;
   $$1 = $11;
   $13 = HEAP8[$11 >> 0] | 0;
   $15 = $9;
  } else {
   $$1 = $$0;
   $13 = $8;
   $15 = $10;
  }
  if ($13 << 24 >> 24 == 75) {
   HEAP32[$2 >> 2] = $15 | 1;
   $$2 = $$1 + 1 | 0;
  } else $$2 = $$1;
 }
 return $$2 | 0;
}

function _stbi__fill_bits($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $18 = 0, $22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 while (1) {
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) >>> 0 >= 1 << HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] >>> 0) {
   label = 3;
   break;
  }
  $12 = (_stbi__zget8(HEAP32[$1 >> 2] | 0) | 0) & 255;
  $18 = (HEAP32[$1 >> 2] | 0) + 12 | 0;
  HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | $12 << HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2];
  $22 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
  HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 8;
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) > 24) {
   label = 5;
   break;
  }
 }
 if ((label | 0) == 3) ___assert_fail(44839, 43392, 3963, 44876); else if ((label | 0) == 5) {
  STACKTOP = sp;
  return;
 }
}

function __sg_reset_image($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $5 = 0, $7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  $5 = HEAP32[$1 >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  dest = HEAP32[$1 >> 2] | 0;
  stop = dest + 112 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $7 = HEAP32[$1 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(18597, 17628, 12835, 34934);
}

function __sg_reset_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $5 = 0, $7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  $5 = HEAP32[$1 >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  dest = HEAP32[$1 >> 2] | 0;
  stop = dest + 60 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $7 = HEAP32[$1 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(25895, 17628, 12827, 34844);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($2 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $3);
 STACKTOP = sp;
 return;
}

function __sg_buffer_common_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = 0;
 HEAP8[(HEAP32[$2 >> 2] | 0) + 8 >> 0] = 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0) == 1 ? 1 : 2;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __sfetch_pool_item_at($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(37961, 21538, 1440, 38006);
 if (!(HEAP8[(HEAP32[$2 >> 2] | 0) + 20 >> 0] & 1)) ___assert_fail(37961, 21538, 1440, 38006);
 HEAP32[$4 >> 2] = __sfetch_slot_index(HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(26137, 21538, 1442, 38006);
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 1232 | 0) | 0;
 } else ___assert_fail(26137, 21538, 1442, 38006);
 return 0;
}

function __sg_gl_cache_bind_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(34962 == (HEAP32[$2 >> 2] | 0) | 34963 == (HEAP32[$2 >> 2] | 0))) ___assert_fail(32556, 17628, 5399, 32597);
 if ((HEAP32[$2 >> 2] | 0) == 34962) {
  if ((HEAP32[539374] | 0) == (HEAP32[$3 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[539374] = HEAP32[$3 >> 2];
  _glBindBuffer(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  if ((HEAP32[539375] | 0) == (HEAP32[$3 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[539375] = HEAP32[$3 >> 2];
  _glBindBuffer(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 while (1) {
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -16 | 0;
  HEAP32[$3 >> 2] = $6;
  __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE10deallocateEPS8_m(HEAP32[$0 + 16 >> 2] | 0, $7, (HEAP32[$0 + 12 >> 2] | 0) - $7 >> 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$pn = 0, $$017 = 0, $$2 = 0, $7 = 0, $spec$select = 0;
 L1 : do if (($0 | 0) == ($1 | 0)) $$2 = $0; else {
  $spec$select = (HEAP8[$0 >> 0] | 0) == 110 ? $0 + 1 | 0 : $0;
  if (($spec$select | 0) == ($1 | 0)) $$2 = $0; else {
   $7 = HEAP8[$spec$select >> 0] | 0;
   if ($7 << 24 >> 24 == 48) {
    $$2 = $spec$select + 1 | 0;
    break;
   }
   if (($7 + -49 & 255) < 9) {
    $$0$pn = $spec$select;
    while (1) {
     $$017 = $$0$pn + 1 | 0;
     if (($$017 | 0) == ($1 | 0)) {
      $$2 = $1;
      break L1;
     }
     if (((HEAP8[$$017 >> 0] | 0) + -48 | 0) >>> 0 < 10) $$0$pn = $$017; else {
      $$2 = $$017;
      break;
     }
    }
   } else $$2 = $0;
  }
 } while (0);
 return $$2 | 0;
}

function _stbtt_setvertex($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP8[$7 >> 0] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = $5;
 HEAP8[(HEAP32[$6 >> 2] | 0) + 12 >> 0] = HEAP8[$7 >> 0] | 0;
 HEAP16[HEAP32[$6 >> 2] >> 1] = HEAP32[$8 >> 2];
 HEAP16[(HEAP32[$6 >> 2] | 0) + 2 >> 1] = HEAP32[$9 >> 2];
 HEAP16[(HEAP32[$6 >> 2] | 0) + 4 >> 1] = HEAP32[$10 >> 2];
 HEAP16[(HEAP32[$6 >> 2] | 0) + 6 >> 1] = HEAP32[$11 >> 2];
 STACKTOP = sp;
 return;
}

function _stbi__check_png_header($0) {
 $0 = $0 | 0;
 var $1 = 0, $17 = 0, $2 = 0, $3 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = 0;
 while (1) {
  if ((HEAP32[$3 >> 2] | 0) >= 8) {
   label = 6;
   break;
  }
  $8 = (_stbi__get8(HEAP32[$2 >> 2] | 0) | 0) & 255;
  if (($8 | 0) != (HEAPU8[45063 + (HEAP32[$3 >> 2] | 0) >> 0] | 0 | 0)) {
   label = 4;
   break;
  }
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) {
  HEAP32[$1 >> 2] = _stbi__err(45071) | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else if ((label | 0) == 6) {
  HEAP32[$1 >> 2] = 1;
  $17 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}

function __sgl_alloc_pipeline() {
 var $0 = 0, $1 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = __sgl_pool_alloc_index(2157956) | 0;
 if (HEAP32[$2 >> 2] | 0) {
  HEAP32[$3 >> 2] = __sgl_make_pip_id(__sgl_slot_alloc(2157956, (HEAP32[539493] | 0) + (HEAP32[$2 >> 2] << 5) | 0, HEAP32[$2 >> 2] | 0) | 0) | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  $15 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $15 | 0;
 } else {
  HEAP32[$4 >> 2] = __sgl_make_pip_id(0) | 0;
  HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  $15 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 return 0;
}

function _stbi__at_eof($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $28 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0) {
  if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 16 + 8 >> 2] & 3](HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] | 0) | 0)) {
   HEAP32[$1 >> 2] = 0;
   $28 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $28 | 0;
  }
  if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
   HEAP32[$1 >> 2] = 1;
   $28 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $28 | 0;
  }
 }
 HEAP32[$1 >> 2] = (HEAP32[(HEAP32[$2 >> 2] | 0) + 168 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 172 >> 2] | 0) >>> 0 & 1;
 $28 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function _stbtt__buf_seek($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if ((HEAP32[$3 >> 2] | 0) < 0 ? 1 : (HEAP32[$3 >> 2] | 0) > (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(40240, 40159, 1078, 40264);
 if ((HEAP32[$3 >> 2] | 0) < 0 ? 1 : (HEAP32[$3 >> 2] | 0) > (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0)) {
  $24 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0;
  $22 = HEAP32[$2 >> 2] | 0;
  $23 = $22 + 4 | 0;
  HEAP32[$23 >> 2] = $24;
  STACKTOP = sp;
  return;
 } else {
  $24 = HEAP32[$3 >> 2] | 0;
  $22 = HEAP32[$2 >> 2] | 0;
  $23 = $22 + 4 | 0;
  HEAP32[$23 >> 2] = $24;
  STACKTOP = sp;
  return;
 }
}

function _stbi__do_zlib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $26 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] = HEAP32[$6 >> 2];
 HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] = HEAP32[$6 >> 2];
 HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$7 >> 2] | 0);
 HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = HEAP32[$8 >> 2];
 $26 = _stbi__parse_zlib(HEAP32[$5 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function __sapp_emsc_drop($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $18 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (HEAP8[51192] & 1 ^ 1 | 0 == (HEAP32[$3 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[12801] | 0) > (HEAP32[12799] | 0)) ___assert_fail(12460, 12505, 3806, 12574);
 if ((HEAP32[$2 >> 2] | 0) < 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[12801] | 0)) {
  STACKTOP = sp;
  return;
 }
 $16 = HEAP32[$3 >> 2] | 0;
 $18 = __sapp_dropped_file_path_ptr(HEAP32[$2 >> 2] | 0) | 0;
 if (__sapp_strcpy($16, $18, HEAP32[12800] | 0) | 0) {
  STACKTOP = sp;
  return;
 }
 _puts(12590) | 0;
 HEAP32[12801] = 0;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$019 = 0, $$1 = 0, $10 = 0, $4 = 0;
 if (($0 | 0) == ($1 | 0)) $$1 = $0; else {
  $4 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
  if (($4 | 0) == ($0 | 0)) $$019 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0; else $$019 = $4;
  if (($$019 | 0) == ($0 | 0)) $$1 = $0; else {
   $10 = HEAP32[$2 + 4 >> 2] | 0;
   if ((HEAP32[$2 >> 2] | 0) == ($10 | 0)) $$1 = $0; else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($10 + -24 | 0, 0, 47949) | 0;
    $$1 = $$019;
   }
  }
 }
 return $$1 | 0;
}

function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0;
 do if (!($2 << 24 >> 24)) $$0 = $0; else {
  $5 = _strchr($0, $2 << 24 >> 24) | 0;
  if (!$5) $$0 = 0; else if (!(HEAP8[$1 + 1 >> 0] | 0)) $$0 = $5; else if (!(HEAP8[$5 + 1 >> 0] | 0)) $$0 = 0; else {
   if (!(HEAP8[$1 + 2 >> 0] | 0)) {
    $$0 = _twobyte_strstr($5, $1) | 0;
    break;
   }
   if (!(HEAP8[$5 + 2 >> 0] | 0)) $$0 = 0; else {
    if (!(HEAP8[$1 + 3 >> 0] | 0)) {
     $$0 = _threebyte_strstr($5, $1) | 0;
     break;
    }
    if (!(HEAP8[$5 + 3 >> 0] | 0)) $$0 = 0; else if (!(HEAP8[$1 + 4 >> 0] | 0)) {
     $$0 = _fourbyte_strstr($5, $1) | 0;
     break;
    } else {
     $$0 = _twoway_strstr($5, $1) | 0;
     break;
    }
   }
  }
 } while (0);
 return $$0 | 0;
}

function __sg_gl_apply_scissor_rect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = sp + 16 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP8[$9 >> 0] = $4 & 1;
 if (!(HEAP8[2157010] & 1)) ___assert_fail(35918, 17628, 6558, 35955);
 if (HEAP8[$9 >> 0] & 1) $21 = (HEAP32[539254] | 0) - ((HEAP32[$6 >> 2] | 0) + (HEAP32[$8 >> 2] | 0)) | 0; else $21 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $21;
 _glScissor(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_gl_apply_viewport($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = sp + 16 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP8[$9 >> 0] = $4 & 1;
 if (!(HEAP8[2157010] & 1)) ___assert_fail(35918, 17628, 6552, 35933);
 if (HEAP8[$9 >> 0] & 1) $21 = (HEAP32[539254] | 0) - ((HEAP32[$6 >> 2] | 0) + (HEAP32[$8 >> 2] | 0)) | 0; else $21 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $21;
 _glViewport(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _sgl_ortho($0, $1, $2, $3, $4, $5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0, $11 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAPF32[$6 >> 2] = $0;
 HEAPF32[$7 >> 2] = $1;
 HEAPF32[$8 >> 2] = $2;
 HEAPF32[$9 >> 2] = $3;
 HEAPF32[$10 >> 2] = $4;
 HEAPF32[$11 >> 2] = $5;
 if (-1412584499 == (HEAP32[539414] | 0)) {
  HEAP8[2157761] = 1;
  $14 = __sgl_matrix() | 0;
  __sgl_ortho($14, +HEAPF32[$6 >> 2], +HEAPF32[$7 >> 2], +HEAPF32[$8 >> 2], +HEAPF32[$9 >> 2], +HEAPF32[$10 >> 2], +HEAPF32[$11 >> 2]);
  STACKTOP = sp;
  return;
 } else ___assert_fail(19694, 19399, 3195, 20103);
}

function __Z21PerpendicularDistanceRK8DrPointFS1_S1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$048 = 0.0, $10 = 0.0, $12 = 0.0, $17 = 0.0, $20 = 0.0, $23 = 0.0, $26 = 0.0, $27 = 0.0, $4 = 0.0, $5 = 0.0, $9 = 0.0, $sqrt = 0.0;
 $4 = +HEAPF64[$1 >> 3];
 $5 = +HEAPF64[$2 >> 3] - $4;
 $9 = +HEAPF64[$1 + 8 >> 3];
 $10 = +HEAPF64[$2 + 8 >> 3] - $9;
 $sqrt = +Math_sqrt(+($5 * $5 + $10 * $10));
 $12 = +Math_abs(+$sqrt);
 if ($sqrt != $sqrt | 0.0 != 0.0 | $sqrt == 0.0) {
  $$0 = $5;
  $$048 = $10;
 } else {
  $$0 = $5 / $12;
  $$048 = $10 / $12;
 }
 $17 = +HEAPF64[$0 >> 3] - $4;
 $20 = +HEAPF64[$0 + 8 >> 3] - $9;
 $23 = $$0 * $17 + $$048 * $20;
 $26 = $17 - $$0 * $23;
 $27 = $20 - $$048 * $23;
 return +(+Math_abs(+(+Math_sqrt(+($26 * $26 + $27 * $27)))));
}

function ___stdio_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $17 = 0, $21 = 0, $22 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 8 | 0;
 $4 = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $2;
 HEAP32[$vararg_buffer + 8 >> 2] = $1;
 HEAP32[$vararg_buffer + 12 >> 2] = $4;
 HEAP32[$vararg_buffer + 16 >> 2] = $3;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  $17 = $4;
  HEAP32[$17 >> 2] = -1;
  HEAP32[$17 + 4 >> 2] = -1;
  $21 = -1;
  $22 = -1;
 } else {
  $11 = $4;
  $21 = HEAP32[$11 + 4 >> 2] | 0;
  $22 = HEAP32[$11 >> 2] | 0;
 }
 setTempRet0($21 | 0);
 STACKTOP = sp;
 return $22 | 0;
}

function __sgl_setup_pipeline_pool($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17623, 19399, 2150, 37394);
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) <= 0) ___assert_fail(37419, 19399, 2152, 37394);
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) >= 65536) ___assert_fail(37419, 19399, 2152, 37394);
 __sgl_init_pool(2157956, HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[$2 >> 2] = HEAP32[539489] << 5;
 HEAP32[539493] = _malloc(HEAP32[$2 >> 2] | 0) | 0;
 if (HEAP32[539493] | 0) {
  _memset(HEAP32[539493] | 0, 0, HEAP32[$2 >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(37492, 19399, 2156, 37394);
}

function __sg_uniform_size($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 switch (HEAP32[$3 >> 2] | 0) {
 case 0:
  {
   HEAP32[$2 >> 2] = 0;
   break;
  }
 case 1:
  {
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2] << 2;
   break;
  }
 case 2:
  {
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2] << 3;
   break;
  }
 case 3:
  {
   HEAP32[$2 >> 2] = (HEAP32[$4 >> 2] | 0) * 12;
   break;
  }
 case 4:
  {
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2] << 4;
   break;
  }
 case 5:
  {
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2] << 6;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 3849, 33723);
 }
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _stbi_load_from_memory($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $6 = sp + 204 | 0;
 $7 = sp + 200 | 0;
 $8 = sp + 196 | 0;
 $9 = sp + 192 | 0;
 $10 = sp + 188 | 0;
 $11 = sp + 184 | 0;
 $12 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = $5;
 _stbi__start_mem($12, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0);
 $19 = _stbi__load_and_postprocess_8bit($12, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $19 | 0;
}

function __ZN13TPPLPartition9NormalizeERK9TPPLPoint($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0.0, $3 = 0, $4 = 0.0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp;
 $4 = +HEAPF64[$2 >> 3];
 $7 = +HEAPF64[$2 + 8 >> 3];
 $10 = +Math_sqrt(+($4 * $4 + $7 * $7));
 if ($10 != 0.0) {
  __ZNK9TPPLPointdvEd($3, $2, $10);
  HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 16 >> 2];
  HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 20 >> 2];
 } else {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
 }
 STACKTOP = sp;
 return;
}

function __sgl_destroy_pipeline($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = __sgl_lookup_pipeline(HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if ((HEAP32[$2 >> 2] | 0) >= 6) break;
  if ((HEAP32[$2 >> 2] | 0) != 5) {
   HEAP32[$$byval_copy >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 8 + (HEAP32[$2 >> 2] << 2) >> 2];
   _sg_destroy_pipeline($$byval_copy);
  }
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 __sgl_reset_pipeline(HEAP32[$1 >> 2] | 0);
 __sgl_pool_free_index(2157956, __sgl_slot_index(HEAP32[$0 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __sgl_make_pipeline($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(17623, 19399, 2304, 37526);
 HEAP32[$3 >> 2] = __sgl_alloc_pipeline() | 0;
 if (HEAP32[$3 >> 2] | 0) {
  $9 = HEAP32[$2 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
  __sgl_init_pipeline($$byval_copy, $9);
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  $10 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $10 | 0;
 } else {
  _puts(37545) | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  $10 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 return 0;
}

function _stbtt_GetGlyphShape($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 $12 = HEAP32[$4 >> 2] | 0;
 $13 = HEAP32[$5 >> 2] | 0;
 $14 = HEAP32[$6 >> 2] | 0;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 48 + 8 >> 2] | 0) {
  HEAP32[$3 >> 2] = _stbtt__GetGlyphShapeT2($12, $13, $14) | 0;
  $17 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  HEAP32[$3 >> 2] = _stbtt__GetGlyphShapeTT($12, $13, $14) | 0;
  $17 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}

function __sapp_call_event($0) {
 $0 = $0 | 0;
 var $$pre_trunc = 0, $1 = 0, $16 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (!(HEAP8[50905] & 1)) {
  if (HEAP32[12703] | 0) {
   FUNCTION_TABLE_vi[HEAP32[50812 >> 2] & 31](HEAP32[$2 >> 2] | 0);
   break;
  }
  if (HEAP32[12709] | 0) FUNCTION_TABLE_vii[HEAP32[50836 >> 2] & 3](HEAP32[$2 >> 2] | 0, HEAP32[12705] | 0);
 } while (0);
 if (HEAP8[50908] & 1) {
  HEAP8[50908] = 0;
  HEAP8[$1 >> 0] = 1;
  $$pre_trunc = HEAP8[$1 >> 0] | 0;
  $16 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $16 | 0;
 } else {
  HEAP8[$1 >> 0] = 0;
  $$pre_trunc = HEAP8[$1 >> 0] | 0;
  $16 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $16 | 0;
 }
 return 0;
}

function __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $3 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $$0$i$i = HEAP32[$3 >> 2] | 0;
  while (1) {
   if (($$0$i$i | 0) == ($1 | 0)) break;
   $6 = $$0$i$i + -16 | 0;
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($6);
   $$0$i$i = $6;
  }
  HEAP32[$3 >> 2] = $1;
  $8 = HEAP32[$0 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE10deallocateEPS6_m($0 + 12 | 0, $8, (HEAP32[$0 + 8 >> 2] | 0) - $8 >> 4);
 }
 return;
}

function __sg_gl_init_pixelformats_float($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 2 | 0;
 $4 = sp + 1 | 0;
 $5 = sp;
 HEAP8[$3 >> 0] = $0 & 1;
 HEAP8[$4 >> 0] = $1 & 1;
 HEAP8[$5 >> 0] = $2 & 1;
 $12 = HEAP8[$3 >> 0] & 1;
 if (!(HEAP8[$4 >> 0] & 1)) {
  if ($12) __sg_pixelformat_sbrm(2156876); else __sg_pixelformat_s(2156876);
  __sg_pixelformat_s(2156738);
  STACKTOP = sp;
  return;
 }
 do if ($12) if (HEAP8[$5 >> 0] & 1) {
  __sg_pixelformat_all(2156876);
  break;
 } else {
  __sg_pixelformat_sfrm(2156876);
  break;
 } else __sg_pixelformat_sf(2156876); while (0);
 __sg_pixelformat_sf(2156738);
 STACKTOP = sp;
 return;
}

function __ZN8DrBitmap8setPixelEii7DrColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $21 = 0, $26 = 0, $6 = 0, $9 = 0;
 $6 = Math_imul(HEAP32[$0 + 4 >> 2] | 0, $2) | 0;
 $9 = Math_imul($6 + $1 | 0, HEAP32[$0 >> 2] | 0) | 0;
 $11 = HEAP8[(__ZNK7DrColor4blueEv($3) | 0) >> 0] | 0;
 $12 = $0 + 12 | 0;
 HEAP8[(HEAP32[$12 >> 2] | 0) + $9 >> 0] = $11;
 $16 = HEAP8[(__ZNK7DrColor5greenEv($3) | 0) >> 0] | 0;
 HEAP8[(HEAP32[$12 >> 2] | 0) + ($9 + 1) >> 0] = $16;
 $21 = HEAP8[(__ZNK7DrColor3redEv($3) | 0) >> 0] | 0;
 HEAP8[(HEAP32[$12 >> 2] | 0) + ($9 + 2) >> 0] = $21;
 $26 = HEAP8[(__ZNK7DrColor5alphaEv($3) | 0) >> 0] | 0;
 HEAP8[(HEAP32[$12 >> 2] | 0) + ($9 + 3) >> 0] = $26;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPKS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $6 = $0 + 4 | 0;
 if (($5 | 0) != ($4 | 0)) {
  $8 = HEAP32[$6 >> 2] | 0;
  $9 = $4;
  do {
   HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$8 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
   $9 = $9 + 16 | 0;
   $8 = (HEAP32[$6 >> 2] | 0) + 16 | 0;
   HEAP32[$6 >> 2] = $8;
  } while (($9 | 0) != ($5 | 0));
 }
 return;
}

function _fons__decutf8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = HEAPU8[624 + (HEAP32[$5 >> 2] | 0) >> 0];
 if (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) $25 = HEAP32[$5 >> 2] & 63 | HEAP32[HEAP32[$4 >> 2] >> 2] << 6; else $25 = 255 >> HEAP32[$6 >> 2] & HEAP32[$5 >> 2];
 HEAP32[HEAP32[$4 >> 2] >> 2] = $25;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAPU8[624 + (256 + (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) + (HEAP32[$6 >> 2] | 0)) >> 0];
 STACKTOP = sp;
 return HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $6 = $0 + 4 | 0;
 if (($5 | 0) != ($4 | 0)) {
  $8 = HEAP32[$6 >> 2] | 0;
  $9 = $4;
  do {
   HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$8 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
   $9 = $9 + 16 | 0;
   $8 = (HEAP32[$6 >> 2] | 0) + 16 | 0;
   HEAP32[$6 >> 2] = $8;
  } while (($9 | 0) != ($5 | 0));
 }
 return;
}

function __sg_pipeline_at($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & 0 != (HEAP32[$3 >> 2] | 0))) ___assert_fail(35478, 17628, 12988, 35509);
 HEAP32[$4 >> 2] = __sg_slot_index(HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) <= 0) ___assert_fail(35525, 17628, 12990, 35509);
 if ((HEAP32[$4 >> 2] | 0) < (HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$2 >> 2] | 0) + 108 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 472 | 0) | 0;
 } else ___assert_fail(35525, 17628, 12990, 35509);
 return 0;
}

function __sg_shader_at($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & 0 != (HEAP32[$3 >> 2] | 0))) ___assert_fail(35356, 17628, 12981, 35387);
 HEAP32[$4 >> 2] = __sg_slot_index(HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) <= 0) ___assert_fail(35401, 17628, 12983, 35387);
 if ((HEAP32[$4 >> 2] | 0) < (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$2 >> 2] | 0) + 104 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 2176 | 0) | 0;
 } else ___assert_fail(35401, 17628, 12983, 35387);
 return 0;
}

function __sg_gl_stencil_op($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 7680;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 0;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 7681;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 7682;
   break;
  }
 case 5:
  {
   HEAP32[$1 >> 2] = 7683;
   break;
  }
 case 6:
  {
   HEAP32[$1 >> 2] = 5386;
   break;
  }
 case 7:
  {
   HEAP32[$1 >> 2] = 34055;
   break;
  }
 case 8:
  {
   HEAP32[$1 >> 2] = 34056;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4529, 36166);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __sg_image_at($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & 0 != (HEAP32[$3 >> 2] | 0))) ___assert_fail(35238, 17628, 12974, 35269);
 HEAP32[$4 >> 2] = __sg_slot_index(HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) <= 0) ___assert_fail(35282, 17628, 12976, 35269);
 if ((HEAP32[$4 >> 2] | 0) < (HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$2 >> 2] | 0) + 100 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 112 | 0) | 0;
 } else ___assert_fail(35282, 17628, 12976, 35269);
 return 0;
}

function _stbi__png_load($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 32 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 24 | 0;
 $11 = sp + 20 | 0;
 $12 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = $5;
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
 $19 = _stbi__do_png($12, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $19 | 0;
}

function _stbi__malloc_mad2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 if (_stbi__mad2sizes_valid(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0) {
  $14 = Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = _stbi__malloc($14 + (HEAP32[$6 >> 2] | 0) | 0) | 0;
  $18 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  HEAP32[$3 >> 2] = 0;
  $18 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function __sg_pass_at($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & 0 != (HEAP32[$3 >> 2] | 0))) ___assert_fail(35600, 17628, 12995, 35632);
 HEAP32[$4 >> 2] = __sg_slot_index(HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) <= 0) ___assert_fail(35644, 17628, 12997, 35632);
 if ((HEAP32[$4 >> 2] | 0) < (HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$2 >> 2] | 0) + 112 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 120 | 0) | 0;
 } else ___assert_fail(35644, 17628, 12997, 35632);
 return 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($2 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwm($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $3);
 STACKTOP = sp;
 return;
}

function __sg_gl_compare_func($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 512;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 513;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 514;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 515;
   break;
  }
 case 5:
  {
   HEAP32[$1 >> 2] = 516;
   break;
  }
 case 6:
  {
   HEAP32[$1 >> 2] = 517;
   break;
  }
 case 7:
  {
   HEAP32[$1 >> 2] = 518;
   break;
  }
 case 8:
  {
   HEAP32[$1 >> 2] = 519;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4515, 36146);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __sg_uninit_pipeline($0) {
 $0 = $0 | 0;
 var $$pre_trunc = 0, $1 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = __sg_lookup_pipeline(2156476, HEAP32[$0 >> 2] | 0) | 0;
 do if (HEAP32[$2 >> 2] | 0) {
  if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[539114] | 0)) {
   _puts(35041) | 0;
   break;
  }
  __sg_destroy_pipeline(HEAP32[$2 >> 2] | 0);
  __sg_reset_pipeline(HEAP32[$2 >> 2] | 0);
  HEAP8[$1 >> 0] = 1;
  $$pre_trunc = HEAP8[$1 >> 0] | 0;
  $14 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $14 | 0;
 } while (0);
 HEAP8[$1 >> 0] = 0;
 $$pre_trunc = HEAP8[$1 >> 0] | 0;
 $14 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 while (1) {
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -16 | 0;
  HEAP32[$3 >> 2] = $6;
  __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE10deallocateEPS6_m(HEAP32[$0 + 16 >> 2] | 0, $7, (HEAP32[$0 + 12 >> 2] | 0) - $7 >> 4);
 return;
}

function __sg_context_at($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & 0 != (HEAP32[$3 >> 2] | 0))) ___assert_fail(26342, 17628, 13002, 26377);
 HEAP32[$4 >> 2] = __sg_slot_index(HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) <= 0) ___assert_fail(26392, 17628, 13004, 26377);
 if ((HEAP32[$4 >> 2] | 0) < (HEAP32[(HEAP32[$2 >> 2] | 0) + 80 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0) + (HEAP32[$4 >> 2] << 4) | 0;
 } else ___assert_fail(26392, 17628, 13004, 26377);
 return 0;
}

function __sg_lookup_pipeline($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(24943, 17628, 13041, 35458);
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$5 >> 2] = __sg_pipeline_at(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
   $18 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $18 | 0;
  }
 }
 HEAP32[$2 >> 2] = 0;
 $18 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $18 | 0;
}

function __sg_gl_vertexformat_type($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 4:
 case 3:
 case 2:
 case 1:
  {
   HEAP32[$1 >> 2] = 5126;
   break;
  }
 case 6:
 case 5:
  {
   HEAP32[$1 >> 2] = 5120;
   break;
  }
 case 8:
 case 7:
  {
   HEAP32[$1 >> 2] = 5121;
   break;
  }
 case 13:
 case 12:
 case 10:
 case 9:
  {
   HEAP32[$1 >> 2] = 5122;
   break;
  }
 case 14:
 case 11:
  {
   HEAP32[$1 >> 2] = 5123;
   break;
  }
 case 15:
  {
   HEAP32[$1 >> 2] = 33640;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4466, 34745);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __sg_discard_pool($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(26094, 17628, 12781, 26099);
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(25538, 17628, 12782, 26099);
 _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] = 0;
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[HEAP32[$1 >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(25523, 17628, 12785, 26099);
}

function __sg_lookup_context($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(24943, 17628, 13063, 25876);
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$5 >> 2] = __sg_context_at(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
   $18 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $18 | 0;
  }
 }
 HEAP32[$2 >> 2] = 0;
 $18 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $18 | 0;
}

function __sg_buffer_at($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!((HEAP32[$2 >> 2] | 0) != 0 & 0 != (HEAP32[$3 >> 2] | 0))) ___assert_fail(35136, 17628, 12967, 35167);
 HEAP32[$4 >> 2] = __sg_slot_index(HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[$4 >> 2] | 0) <= 0) ___assert_fail(35181, 17628, 12969, 35167);
 if ((HEAP32[$4 >> 2] | 0) < (HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$2 >> 2] | 0) + 96 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) * 60 | 0) | 0;
 } else ___assert_fail(35181, 17628, 12969, 35167);
 return 0;
}

function __sgl_discard_pool($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(26094, 19399, 2104, 37934);
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(25538, 19399, 2105, 37934);
 _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] = 0;
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[HEAP32[$1 >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(25523, 19399, 2108, 37934);
}

function __sg_uninit_shader($0) {
 $0 = $0 | 0;
 var $$pre_trunc = 0, $1 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = __sg_lookup_shader(2156476, HEAP32[$0 >> 2] | 0) | 0;
 do if (HEAP32[$2 >> 2] | 0) {
  if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[539114] | 0)) {
   _puts(34950) | 0;
   break;
  }
  __sg_destroy_shader(HEAP32[$2 >> 2] | 0);
  __sg_reset_shader(HEAP32[$2 >> 2] | 0);
  HEAP8[$1 >> 0] = 1;
  $$pre_trunc = HEAP8[$1 >> 0] | 0;
  $14 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $14 | 0;
 } while (0);
 HEAP8[$1 >> 0] = 0;
 $$pre_trunc = HEAP8[$1 >> 0] | 0;
 $14 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $14 | 0;
}

function __sg_uninit_buffer($0) {
 $0 = $0 | 0;
 var $$pre_trunc = 0, $1 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = __sg_lookup_buffer(2156476, HEAP32[$0 >> 2] | 0) | 0;
 do if (HEAP32[$2 >> 2] | 0) {
  if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[539114] | 0)) {
   _puts(34770) | 0;
   break;
  }
  __sg_destroy_buffer(HEAP32[$2 >> 2] | 0);
  __sg_reset_buffer(HEAP32[$2 >> 2] | 0);
  HEAP8[$1 >> 0] = 1;
  $$pre_trunc = HEAP8[$1 >> 0] | 0;
  $14 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $14 | 0;
 } while (0);
 HEAP8[$1 >> 0] = 0;
 $$pre_trunc = HEAP8[$1 >> 0] | 0;
 $14 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $14 | 0;
}

function __sg_lookup_shader($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(24943, 17628, 13030, 35338);
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$5 >> 2] = __sg_shader_at(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
   $18 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $18 | 0;
  }
 }
 HEAP32[$2 >> 2] = 0;
 $18 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $18 | 0;
}

function __sg_uninit_image($0) {
 $0 = $0 | 0;
 var $$pre_trunc = 0, $1 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = __sg_lookup_image(2156476, HEAP32[$0 >> 2] | 0) | 0;
 do if (HEAP32[$2 >> 2] | 0) {
  if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[539114] | 0)) {
   _puts(34861) | 0;
   break;
  }
  __sg_destroy_image(HEAP32[$2 >> 2] | 0);
  __sg_reset_image(HEAP32[$2 >> 2] | 0);
  HEAP8[$1 >> 0] = 1;
  $$pre_trunc = HEAP8[$1 >> 0] | 0;
  $14 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $14 | 0;
 } while (0);
 HEAP8[$1 >> 0] = 0;
 $$pre_trunc = HEAP8[$1 >> 0] | 0;
 $14 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEEC2EmmS9_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 357913941) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 * 12 | 0) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 * 12 | 0) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 * 12 | 0);
 return;
}

function __sg_lookup_pass($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[$3 >> 2] | 0)) ___assert_fail(24943, 17628, 13052, 35584);
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$5 >> 2] = __sg_pass_at(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
   $18 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $18 | 0;
  }
 }
 HEAP32[$2 >> 2] = 0;
 $18 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $18 | 0;
}

function _stbi__zreceive($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $25 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) < (HEAP32[$3 >> 2] | 0)) _stbi__fill_bits(HEAP32[$2 >> 2] | 0);
 HEAP32[$4 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] & (1 << HEAP32[$3 >> 2]) - 1;
 $20 = (HEAP32[$2 >> 2] | 0) + 12 | 0;
 HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) >>> (HEAP32[$3 >> 2] | 0);
 $25 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) - (HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$4 >> 2] | 0;
}

function _stbi__copyval($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = 128;
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >= 4) break;
  if (HEAP32[$3 >> 2] & HEAP32[$6 >> 2] | 0) HEAP8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$5 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) >> 0] | 0;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] >> 1;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEES7_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) != ($4 | 0)) {
  $7 = (HEAP32[$4 >> 2] | 0) + 4 | 0;
  $9 = HEAP32[$3 >> 2] | 0;
  HEAP32[$9 + 4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[HEAP32[$7 >> 2] >> 2] = $9;
  $13 = $0 + 8 | 0;
  $15 = $3;
  do {
   $16 = HEAP32[$15 + 4 >> 2] | 0;
   HEAP32[$1 >> 2] = $16;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
   __ZN8TPPLPolyD2Ev($15 + 8 | 0);
   __ZdlPv($15);
   $15 = $16;
  } while (($4 | 0) != ($15 | 0));
 }
 return $4 | 0;
}

function _sg_apply_scissor_rect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = sp + 16 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP8[$9 >> 0] = $4 & 1;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14823, 18619);
 if (!(HEAP8[2156468] & 1)) {
  STACKTOP = sp;
  return;
 }
 __sg_apply_scissor_rect(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP8[$9 >> 0] & 1);
 STACKTOP = sp;
 return;
}

function _sapp_html5_get_dropped_file_size($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP8[51192] & 1)) ___assert_fail(17083, 12505, 10387, 17167);
 if ((HEAP32[$2 >> 2] | 0) < 0) ___assert_fail(17102, 12505, 10388, 17167);
 if ((HEAP32[$2 >> 2] | 0) >= (HEAP32[12801] | 0)) ___assert_fail(17102, 12505, 10388, 17167);
 if (HEAP8[51192] & 1) {
  HEAP32[$1 >> 2] = _sapp_js_dropped_file_size(HEAP32[$2 >> 2] | 0) | 0;
  $14 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 } else {
  HEAP32[$1 >> 2] = 0;
  $14 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i3 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $4 = $0 + 12 | 0;
 $5 = $1 + 12 | 0;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
 $$0$i$i3 = 0;
 while (1) {
  if (($$0$i$i3 | 0) == 3) break;
  HEAP32[$5 + ($$0$i$i3 << 2) >> 2] = 0;
  $$0$i$i3 = $$0$i$i3 + 1 | 0;
 }
 return;
}

function __ZN8DrBitmapC2ERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0;
 HEAP32[$0 >> 2] = 4;
 $2 = $0 + 4 | 0;
 $4 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 $7 = HEAP32[$1 + 4 >> 2] | 0;
 HEAP32[$2 >> 2] = $7;
 $9 = HEAP32[$1 + 8 >> 2] | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 $10 = Math_imul($9, $7) | 0;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($4, Math_imul($10, HEAP32[$1 >> 2] | 0) | 0);
 $14 = HEAP32[$4 >> 2] | 0;
 _memcpy($14 | 0, HEAP32[$1 + 12 >> 2] | 0, (HEAP32[$0 + 16 >> 2] | 0) - $14 | 0) | 0;
 return;
}

function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$in16 = 0, $$01415 = 0, $10 = 0, $17 = 0, $20 = 0, $21 = 0, $26 = 0, $8 = 0, $9 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0);
 $9 = $0 + 1 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 L1 : do if (!($10 << 24 >> 24)) $26 = 0; else {
  $$0$in16 = (HEAPU8[$0 >> 0] | 0) << 8 | $10 & 255;
  $$01415 = $9;
  while (1) {
   $17 = $$0$in16 & 65535;
   if (($17 | 0) == ($8 | 0)) break;
   $20 = $$01415 + 1 | 0;
   $21 = HEAP8[$20 >> 0] | 0;
   if (!($21 << 24 >> 24)) {
    $26 = 0;
    break L1;
   } else {
    $$0$in16 = $17 << 8 | $21 & 255;
    $$01415 = $20;
   }
  }
  $26 = $$01415 + -1 | 0;
 } while (0);
 return $26 | 0;
}

function _sg_apply_viewport($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = sp + 16 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP8[$9 >> 0] = $4 & 1;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14809, 18601);
 if (!(HEAP8[2156468] & 1)) {
  STACKTOP = sp;
  return;
 }
 __sg_apply_viewport(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP8[$9 >> 0] & 1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferINS_6vectorI8DrPointFNS_9allocatorIS2_EEEERNS3_IS5_EEEC2EmmS7_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 357913941) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 * 12 | 0) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 * 12 | 0) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 * 12 | 0);
 return;
}

function __sg_gl_cache_restore_texture_binding($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[$1 >> 2] | 0) >= 12) ___assert_fail(33332, 17628, 5521, 33502);
 HEAP32[$2 >> 2] = 2157612;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[HEAP32[$2 >> 2] >> 2] | 0)) ___assert_fail(33539, 17628, 5525, 33502);
 __sg_gl_cache_bind_texture(HEAP32[$1 >> 2] | 0, HEAP32[HEAP32[$2 >> 2] >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[HEAP32[$2 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __sg_reset_pipeline($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  $5 = HEAP32[$1 >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  _memset(HEAP32[$1 >> 2] | 0, 0, 472) | 0;
  $7 = HEAP32[$1 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(18659, 17628, 12851, 35117);
}

function __sg_reset_shader($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  $5 = HEAP32[$1 >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  _memset(HEAP32[$1 >> 2] | 0, 0, 2176) | 0;
  $7 = HEAP32[$1 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(25942, 17628, 12843, 35024);
}

function _stbi__start_mem($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 32 >> 2] = 0;
 $10 = HEAP32[$4 >> 2] | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 176 >> 2] = $10;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 168 >> 2] = $10;
 $17 = (HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 180 >> 2] = $17;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 172 >> 2] = $17;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEERKT_SD_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISB_EEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$lcssa = 0, $$010 = 0, $$079 = 0, $$1 = 0, $6 = 0;
 if (!$2) $$0$lcssa = $3; else {
  $$010 = $3;
  $$079 = $2;
  while (1) {
   $6 = __ZNK13TPPLPartition12ScanLineEdgeltERKS0_($$079 + 16 | 0, $1) | 0;
   $$1 = $6 ? $$010 : $$079;
   $$079 = HEAP32[($6 ? $$079 + 4 | 0 : $$079) >> 2] | 0;
   if (!$$079) {
    $$0$lcssa = $$1;
    break;
   } else $$010 = $$1;
  }
 }
 return $$0$lcssa | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $4 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i1 = 0;
 while (1) {
  if (($$0$i$i1 | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i1 << 2) >> 2] = 0;
  $$0$i$i1 = $$0$i$i1 + 1 | 0;
 }
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function _stbtt__buf_get($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 if (!((HEAP32[$3 >> 2] | 0) >= 1 & (HEAP32[$3 >> 2] | 0) <= 4)) ___assert_fail(40330, 40159, 1091, 40347);
 HEAP32[$5 >> 2] = 0;
 while (1) {
  $13 = HEAP32[$4 >> 2] | 0;
  if ((HEAP32[$5 >> 2] | 0) >= (HEAP32[$3 >> 2] | 0)) break;
  HEAP32[$4 >> 2] = $13 << 8 | (_stbtt__buf_get8(HEAP32[$2 >> 2] | 0) | 0) & 255;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return $13 | 0;
}

function __saudio_ring_count($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 $10 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
 $11 = HEAP32[$1 >> 2] | 0;
 if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) >= (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[$2 >> 2] = $10 - (HEAP32[$11 + 4 >> 2] | 0); else HEAP32[$2 >> 2] = $10 + (HEAP32[$11 + 8 >> 2] | 0) - (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0);
 if ((HEAP32[$2 >> 2] | 0) < (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return HEAP32[$2 >> 2] | 0;
 } else ___assert_fail(39966, 22303, 819, 39984);
 return 0;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEmmPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0;
 $4 = HEAP8[$0 + 11 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 if ($5) $12 = HEAP32[$0 + 4 >> 2] | 0; else $12 = $4 & 255;
 if (($2 | 0) == -1) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
 if ($5) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
 $11 = $12 >>> 0 > $2 >>> 0;
 $14 = __ZNSt3__211char_traitsIcE7compareEPKcS3_m($13, $1, $11 ? $2 : $12) | 0;
 if (!$14) return ($12 >>> 0 < $2 >>> 0 ? -1 : $11 & 1) | 0; else return $14 | 0;
 return 0;
}

function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = $0 + 20 | 0;
 $9 = $0 + 28 | 0;
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 $15 = HEAP32[$0 >> 2] | 0;
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0;
  HEAP32[$0 + 8 >> 2] = $23;
  HEAP32[$0 + 4 >> 2] = $23;
  $$0 = $15 << 27 >> 31;
 } else {
  HEAP32[$0 >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __sapp_dropped_file_path_ptr($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[12803] | 0)) ___assert_fail(17149, 12505, 2504, 24652);
 if ((HEAP32[$1 >> 2] | 0) < 0) ___assert_fail(24680, 12505, 2505, 24652);
 if ((HEAP32[$1 >> 2] | 0) > (HEAP32[12799] | 0)) ___assert_fail(24680, 12505, 2505, 24652);
 HEAP32[$2 >> 2] = Math_imul(HEAP32[$1 >> 2] | 0, HEAP32[12800] | 0) | 0;
 if ((HEAP32[$2 >> 2] | 0) < (HEAP32[12802] | 0)) {
  STACKTOP = sp;
  return (HEAP32[12803] | 0) + (HEAP32[$2 >> 2] | 0) | 0;
 } else ___assert_fail(24728, 12505, 2507, 24652);
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $2 = 0, $4 = 0, $5 = 0;
 $2 = $1 + 12 | 0;
 $4 = HEAP8[$2 + 11 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($1, $5 ? HEAP32[$2 >> 2] | 0 : $2, $5 ? HEAP32[$1 + 16 >> 2] | 0 : $4 & 255) | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $$0$i$i$i = 0;
 while (1) {
  if (($$0$i$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i$i << 2) >> 2] = 0;
  $$0$i$i$i = $$0$i$i$i + 1 | 0;
 }
 return;
}

function _strtox($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $5 = sp;
 HEAP32[$5 >> 2] = 0;
 $6 = $5 + 4 | 0;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$5 + 44 >> 2] = $0;
 $10 = $5 + 8 | 0;
 HEAP32[$10 >> 2] = ($0 | 0) < 0 ? -1 : $0 + 2147483647 | 0;
 HEAP32[$5 + 76 >> 2] = -1;
 ___shlim($5, 0, 0);
 $12 = ___intscan($5, $2, 1, $3, $4) | 0;
 $13 = getTempRet0() | 0;
 if ($1 | 0) HEAP32[$1 >> 2] = $0 + ((HEAP32[$6 >> 2] | 0) + (HEAP32[$5 + 120 >> 2] | 0) - (HEAP32[$10 >> 2] | 0));
 setTempRet0($13 | 0);
 STACKTOP = sp;
 return $12 | 0;
}

function _stbi__pnm_getinteger($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $20 = 0, $22 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if (_stbi__at_eof(HEAP32[$2 >> 2] | 0) | 0) $22 = 0; else $22 = (_stbi__pnm_isdigit(HEAP8[HEAP32[$3 >> 2] >> 0] | 0) | 0) != 0;
  $12 = HEAP32[$4 >> 2] | 0;
  if (!$22) break;
  HEAP32[$4 >> 2] = ($12 * 10 | 0) + ((HEAP8[HEAP32[$3 >> 2] >> 0] | 0) - 48);
  $20 = _stbi__get8(HEAP32[$2 >> 2] | 0) | 0;
  HEAP8[HEAP32[$3 >> 2] >> 0] = $20;
 }
 STACKTOP = sp;
 return $12 | 0;
}

function __ZNSt3__214__split_bufferI8DrBitmapRNS_9allocatorIS1_EEEC2EmmS4_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 178956970) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 * 24 | 0) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 * 24 | 0) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 * 24 | 0);
 return;
}

function __sapp_emsc_end_drop($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP8[51192] & 1)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[12801] | 0)) {
  __sapp_clear_drop_buffer();
  STACKTOP = sp;
  return;
 }
 if (!(__sapp_events_enabled() | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[12790] = +(HEAP32[$2 >> 2] | 0) * +HEAPF32[12734];
 HEAPF32[12791] = +(HEAP32[$3 >> 2] | 0) * +HEAPF32[12734];
 HEAPF32[12792] = 0.0;
 HEAPF32[12793] = 0.0;
 __sapp_init_event(22);
 __sapp_call_event(50952) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSC_SC_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $7 = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = $3;
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
 if (!$7) $12 = $3; else {
  HEAP32[$0 >> 2] = $7;
  $12 = HEAP32[$2 >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[$0 + 4 >> 2] | 0, $12);
 $13 = $0 + 8 | 0;
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEEC2EmmS4_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 97612893) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 * 44 | 0) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 * 44 | 0) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 * 44 | 0);
 return;
}

function _stbi__pnm_test($0) {
 $0 = $0 | 0;
 var $1 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = sp + 9 | 0;
 $4 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP8[$3 >> 0] = _stbi__get8(HEAP32[$2 >> 2] | 0) | 0;
 HEAP8[$4 >> 0] = _stbi__get8(HEAP32[$2 >> 2] | 0) | 0;
 do if ((HEAP8[$3 >> 0] | 0) == 80) {
  if ((HEAP8[$4 >> 0] | 0) != 53) if ((HEAP8[$4 >> 0] | 0) != 54) break;
  HEAP32[$1 >> 2] = 1;
  $19 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $19 | 0;
 } while (0);
 _stbi__rewind(HEAP32[$2 >> 2] | 0);
 HEAP32[$1 >> 2] = 0;
 $19 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $19 | 0;
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0;
  return $$1 | 0;
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $$1 = 0;
  return $$1 | 0;
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0;
 if ($11 | 0) {
  $$1 = $11 + 8 | 0;
  return $$1 | 0;
 }
 $14 = _malloc($1) | 0;
 if (!$14) {
  $$1 = 0;
  return $$1 | 0;
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0;
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0;
 _free($0);
 $$1 = $14;
 return $$1 | 0;
}

function __saudio_stream_callback($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (HEAP32[542637] | 0) {
  FUNCTION_TABLE_viii[HEAP32[2170548 >> 2] & 3](HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[542638] | 0)) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_viiii[HEAP32[2170552 >> 2] & 3](HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[542639] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEERNS5_IS9_Lm4096EEEEC2EmmSB_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0, $9 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE8allocateEm($3, $1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + ($2 << 4) | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$4 >> 2] = $8 + ($1 << 4);
 return;
}

function __sapp_init_event($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 _memset(50952, 0, 208) | 0;
 HEAP32[12740] = HEAP32[$1 >> 2];
 $3 = 50944;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 50952;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 HEAP32[12745] = 256;
 HEAP32[12785] = HEAP32[12728];
 HEAP32[12786] = HEAP32[12729];
 HEAP32[12787] = HEAP32[12730];
 HEAP32[12788] = HEAP32[12731];
 HEAPF32[12746] = +HEAPF32[12790];
 HEAPF32[12747] = +HEAPF32[12791];
 HEAPF32[12748] = +HEAPF32[12792];
 HEAPF32[12749] = +HEAPF32[12793];
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEEC2EmmS4_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 268435455) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 << 4) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 << 4) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 << 4);
 return;
}

function _stbtt__buf_get8($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP8[$1 >> 0] = 0;
  $18 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  $11 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0;
  $13 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  HEAP32[$13 >> 2] = $14 + 1;
  HEAP8[$1 >> 0] = HEAP8[$11 + $14 >> 0] | 0;
  $18 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function __sapp_emsc_frame($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $11 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 HEAPF64[sp >> 3] = $0;
 HEAP32[sp + 8 >> 2] = $1;
 __sapp_frame();
 if (HEAP8[50906] & 1) {
  __sapp_init_event(20);
  __sapp_call_event(50952) | 0;
  if (HEAP8[50906] & 1) HEAP8[50907] = 1;
 }
 if (HEAP8[50907] & 1) {
  __sapp_emsc_unregister_eventhandlers();
  __sapp_call_cleanup();
  __sapp_discard_state();
  HEAP32[$2 >> 2] = 0;
  $11 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $11 | 0;
 } else {
  HEAP32[$2 >> 2] = 1;
  $11 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $11 | 0;
 }
 return 0;
}

function __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEEC2EmmS4_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 536870911) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 << 3) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 << 3) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 << 3);
 return;
}

function __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEEC2EmmS4_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 268435455) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 << 4) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 << 4) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 << 4);
 return;
}

function __sapp_emsc_webgl_context_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[sp + 8 >> 2] = $1;
 HEAP32[sp + 4 >> 2] = $2;
 switch (HEAP32[$3 >> 2] | 0) {
 case 31:
  {
   HEAP32[$6 >> 2] = 17;
   break;
  }
 case 32:
  {
   HEAP32[$6 >> 2] = 18;
   break;
  }
 default:
  HEAP32[$6 >> 2] = 0;
 }
 $8 = __sapp_events_enabled() | 0;
 if (!($8 & 0 != (HEAP32[$6 >> 2] | 0))) {
  STACKTOP = sp;
  return 1;
 }
 __sapp_init_event(HEAP32[$6 >> 2] | 0);
 __sapp_call_event(50952) | 0;
 STACKTOP = sp;
 return 1;
}

function _stbtt__csctx_rline_to($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 var $13 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAPF32[$4 >> 2] = $1;
 HEAPF32[$5 >> 2] = $2;
 $8 = (HEAP32[$3 >> 2] | 0) + 16 | 0;
 HEAPF32[$8 >> 2] = +HEAPF32[$8 >> 2] + +HEAPF32[$4 >> 2];
 $13 = (HEAP32[$3 >> 2] | 0) + 20 | 0;
 HEAPF32[$13 >> 2] = +HEAPF32[$13 >> 2] + +HEAPF32[$5 >> 2];
 _stbtt__csctx_v(HEAP32[$3 >> 2] | 0, 2, ~~+HEAPF32[(HEAP32[$3 >> 2] | 0) + 16 >> 2], ~~+HEAPF32[(HEAP32[$3 >> 2] | 0) + 20 >> 2], 0, 0, 0, 0);
 STACKTOP = sp;
 return;
}

function _stbi__pic_test_core($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (_stbi__pic_is4(HEAP32[$2 >> 2] | 0, 43826) | 0) {
  HEAP32[$3 >> 2] = 0;
  while (1) {
   $9 = HEAP32[$2 >> 2] | 0;
   if ((HEAP32[$3 >> 2] | 0) >= 84) break;
   _stbi__get8($9) | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
  }
  if (_stbi__pic_is4($9, 43831) | 0) {
   HEAP32[$1 >> 2] = 1;
   break;
  } else {
   HEAP32[$1 >> 2] = 0;
   break;
  }
 } else HEAP32[$1 >> 2] = 0; while (0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0, totalMemory = 0;
 totalMemory = _emscripten_get_heap_size() | 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory(newDynamicTop | 0) | 0;
  ___setErrNo(12);
  return -1;
 }
 if ((newDynamicTop | 0) > (totalMemory | 0)) if (_emscripten_resize_heap(newDynamicTop | 0) | 0) {} else {
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 return oldDynamicTop | 0;
}

function __ZNSt3__214__split_bufferImRNS_9allocatorImEEEC2EmmS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 1073741823) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 << 2) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 << 2) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 << 2);
 return;
}

function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EmmS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 1073741823) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 << 2) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 << 2) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 << 2);
 return;
}

function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $11 = 0; else if ($1 >>> 0 > 536870911) {
  $8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($8, 45630);
  HEAP32[$8 >> 2] = 12368;
  ___cxa_throw($8 | 0, 11448, 16);
 } else {
  $11 = __Znwm($1 << 3) | 0;
  break;
 } while (0);
 HEAP32[$0 >> 2] = $11;
 $12 = $11 + ($2 << 3) | 0;
 HEAP32[$0 + 8 >> 2] = $12;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$4 >> 2] = $11 + ($1 << 3);
 return;
}

function __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $3 = 0, $6 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $$0$i$i = HEAP32[$3 >> 2] | 0;
  while (1) {
   if (($$0$i$i | 0) == ($1 | 0)) break;
   $6 = $$0$i$i + -24 | 0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
   $$0$i$i = $6;
  }
  HEAP32[$3 >> 2] = $1;
  $8 = HEAP32[$0 >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE10deallocateEPS2_m($0 + 12 | 0, $8, ((HEAP32[$0 + 8 >> 2] | 0) - $8 | 0) / 24 | 0);
 }
 return;
}

function __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEE5clearEv($0) {
 $0 = $0 | 0;
 var $$023 = 0, $1 = 0, $5 = 0, $7 = 0, $9 = 0, $$023$looptemp = 0;
 $1 = $0 + 8 | 0;
 if (HEAP32[$1 >> 2] | 0) {
  $5 = HEAP32[$0 + 4 >> 2] | 0;
  $7 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
  $9 = HEAP32[$5 >> 2] | 0;
  HEAP32[$9 + 4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[HEAP32[$7 >> 2] >> 2] = $9;
  HEAP32[$1 >> 2] = 0;
  if (($5 | 0) != ($0 | 0)) {
   $$023 = $5;
   do {
    $$023$looptemp = $$023;
    $$023 = HEAP32[$$023 + 4 >> 2] | 0;
    __ZN8TPPLPolyD2Ev($$023$looptemp + 8 | 0);
    __ZdlPv($$023$looptemp);
   } while (($$023 | 0) != ($0 | 0));
  }
 }
 return;
}

function __sg_strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(34002, 17628, 3800, 34006);
 $8 = HEAP32[$2 >> 2] | 0;
 if (HEAP32[$3 >> 2] | 0) {
  _strncpy($8, HEAP32[$3 >> 2] | 0, 16) | 0;
  HEAP8[(HEAP32[$2 >> 2] | 0) + 15 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  dest = $8;
  stop = dest + 16 | 0;
  do {
   HEAP8[dest >> 0] = 0;
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
}

function __sg_lookup_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$5 >> 2] = __sg_buffer_at(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
   $16 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $16 | 0;
  }
 }
 HEAP32[$2 >> 2] = 0;
 $16 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $16 | 0;
}

function __sg_lookup_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$5 >> 2] = __sg_image_at(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
   $16 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $16 | 0;
  }
 }
 HEAP32[$2 >> 2] = 0;
 $16 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $16 | 0;
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEC2ERKS6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $7 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $4 = $1 + 4 | 0;
 $7 = (HEAP32[$4 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0;
 $8 = ($7 | 0) / 12 | 0;
 if ($7 | 0) {
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE8allocateEm($0, $8);
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($0, HEAP32[$1 >> 2] | 0, HEAP32[$4 >> 2] | 0, $8);
 }
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sroa_idx13 = 0, $4 = 0, dest = 0, src = 0, stop = 0;
 $4 = __Znwm(72) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1 + 4;
 $$sroa_idx13 = $0 + 8 | 0;
 dest = $4 + 16 | 0;
 src = $2;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$$sroa_idx13 >> 0] = 1;
 return;
}

function _pad_659($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $5 = sp;
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0;
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0;
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0;
   $$011 = $9;
   do {
    _out_653($0, $5, 256);
    $$011 = $$011 + -256 | 0;
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255;
  } else $$0$lcssa = $9;
  _out_653($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function __ZN8DrBitmapC2Eii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $3 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 4 | 0;
 $5 = $0 + 12 | 0;
 $6 = $3 + 8 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 4;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $2;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($5, Math_imul($1 << 2, $2) | 0);
 $10 = HEAP32[$5 >> 2] | 0;
 $11 = HEAP32[$0 + 16 >> 2] | 0;
 $12 = $10;
 if (($11 - $12 | 0) > 0) {
  $16 = $12 + -1 - $11 | 0;
  _memset($10 | 0, 0, $11 + (($16 | 0) > -2 ? $16 : -2) + 2 - $12 | 0) | 0;
 }
 return;
}

function __sgl_get_pipeline($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = __sgl_lookup_pipeline(HEAP32[$0 >> 2] | 0) | 0;
 if (HEAP32[$4 >> 2] | 0) {
  HEAP32[$2 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 + (HEAP32[$3 >> 2] << 2) >> 2];
  $14 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 } else {
  HEAP32[$5 >> 2] = 0;
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
  $14 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 return 0;
}

function __sg_surface_pitch($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 HEAP32[$8 >> 2] = __sg_num_rows(HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
 $12 = HEAP32[$8 >> 2] | 0;
 $17 = Math_imul($12, __sg_row_pitch(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $17 | 0;
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $7 = 0;
 if ((__ZNKSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE8max_sizeEv($0) | 0) >>> 0 < $1 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 if ($1 >>> 0 > 357913941) {
  $5 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($5, 45630);
  HEAP32[$5 >> 2] = 12368;
  ___cxa_throw($5 | 0, 11448, 16);
 } else {
  $7 = __Znwm($1 * 12 | 0) | 0;
  HEAP32[$0 + 4 >> 2] = $7;
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 8 >> 2] = $7 + ($1 * 12 | 0);
  return;
 }
}

function _HMM_LengthSquaredVec3($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $1 = sp;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAPF32[$1 >> 2] = +_HMM_DotVec3($$byval_copy, $$byval_copy1);
 STACKTOP = sp;
 return +(+HEAPF32[$1 >> 2]);
}

function __sg_gl_cubeface_target($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 0:
  {
   HEAP32[$1 >> 2] = 34069;
   break;
  }
 case 1:
  {
   HEAP32[$1 >> 2] = 34070;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 34071;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 34072;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 34073;
   break;
  }
 case 5:
  {
   HEAP32[$1 >> 2] = 34074;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4846, 33458);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 do if (!$5) {
  HEAP32[$4 >> 2] = $2;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 36 >> 2] = 1;
 } else {
  if (($5 | 0) != ($2 | 0)) {
   $13 = $1 + 36 | 0;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
   HEAP32[$1 + 24 >> 2] = 2;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  $10 = $1 + 24 | 0;
  if ((HEAP32[$10 >> 2] | 0) == 2) HEAP32[$10 >> 2] = $3;
 } while (0);
 return;
}

function _stbi__mad2sizes_valid($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(_stbi__mul2sizes_valid(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0)) {
  $17 = 0;
  $16 = $17 & 1;
  STACKTOP = sp;
  return $16 | 0;
 }
 $12 = Math_imul(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
 $17 = (_stbi__addsizes_valid($12, HEAP32[$5 >> 2] | 0) | 0) != 0;
 $16 = $17 & 1;
 STACKTOP = sp;
 return $16 | 0;
}

function _HMM_Cross($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAPF32[$3 >> 2] = +HEAPF32[$1 + 4 >> 2] * +HEAPF32[$2 + 8 >> 2] - +HEAPF32[$1 + 8 >> 2] * +HEAPF32[$2 + 4 >> 2];
 HEAPF32[$3 + 4 >> 2] = +HEAPF32[$1 + 8 >> 2] * +HEAPF32[$2 >> 2] - +HEAPF32[$1 >> 2] * +HEAPF32[$2 + 8 >> 2];
 HEAPF32[$3 + 8 >> 2] = +HEAPF32[$1 >> 2] * +HEAPF32[$2 + 4 >> 2] - +HEAPF32[$1 + 4 >> 2] * +HEAPF32[$2 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 STACKTOP = sp;
 return;
}

function __sgl_identity($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if ((HEAP32[$2 >> 2] | 0) >= 4) break;
  HEAP32[$3 >> 2] = 0;
  while (1) {
   if ((HEAP32[$3 >> 2] | 0) >= 4) break;
   HEAPF32[(HEAP32[$1 >> 2] | 0) + (HEAP32[$2 >> 2] << 4) + (HEAP32[$3 >> 2] << 2) >> 2] = (HEAP32[$3 >> 2] | 0) == (HEAP32[$2 >> 2] | 0) ? 1.0 : 0.0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
  }
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __sg_gl_filter($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 9728;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 9729;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 9984;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 9986;
   break;
  }
 case 5:
  {
   HEAP32[$1 >> 2] = 9985;
   break;
  }
 case 6:
  {
   HEAP32[$1 >> 2] = 9987;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4571, 33432);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEERNS5_IS7_Lm4096EEEEC2EmmS9_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0, $9 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE8allocateEm($3, $1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + ($2 << 4) | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$4 >> 2] = $8 + ($1 << 4);
 return;
}

function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 while (1) {
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -24 | 0;
  HEAP32[$3 >> 2] = $6;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
 }
 $7 = HEAP32[$0 >> 2] | 0;
 if ($7 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE10deallocateEPS2_m(HEAP32[$0 + 16 >> 2] | 0, $7, ((HEAP32[$0 + 12 >> 2] | 0) - $7 | 0) / 24 | 0);
 return;
}

function __ZNSt3__210__list_impIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE5clearEv($0) {
 $0 = $0 | 0;
 var $$023 = 0, $1 = 0, $5 = 0, $7 = 0, $9 = 0, $$023$looptemp = 0;
 $1 = $0 + 8 | 0;
 if (HEAP32[$1 >> 2] | 0) {
  $5 = HEAP32[$0 + 4 >> 2] | 0;
  $7 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
  $9 = HEAP32[$5 >> 2] | 0;
  HEAP32[$9 + 4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[HEAP32[$7 >> 2] >> 2] = $9;
  HEAP32[$1 >> 2] = 0;
  if (($5 | 0) != ($0 | 0)) {
   $$023 = $5;
   do {
    $$023$looptemp = $$023;
    $$023 = HEAP32[$$023 + 4 >> 2] | 0;
    __ZdlPv($$023$looptemp);
   } while (($$023 | 0) != ($0 | 0));
  }
 }
 return;
}

function _stbtt_ScaleForPixelHeight($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $14 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAPF32[$3 >> 2] = $1;
 $14 = (_ttSHORT((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] | 0) + 4 | 0) | 0) << 16 >> 16;
 HEAP32[$4 >> 2] = $14 - ((_ttSHORT((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] | 0) + 6 | 0) | 0) << 16 >> 16);
 STACKTOP = sp;
 return +(+HEAPF32[$3 >> 2] / +(HEAP32[$4 >> 2] | 0));
}

function _stbi__bitcount($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] & 1431655765) + ((HEAP32[$1 >> 2] | 0) >>> 1 & 1431655765);
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] & 858993459) + ((HEAP32[$1 >> 2] | 0) >>> 2 & 858993459);
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + ((HEAP32[$1 >> 2] | 0) >>> 4) & 252645135;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + ((HEAP32[$1 >> 2] | 0) >>> 8);
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + ((HEAP32[$1 >> 2] | 0) >>> 16);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] & 255 | 0;
}

function _meshopt_remapIndexBuffer($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (($2 >>> 0) % 3 | 0 | 0) ___assert_fail(43058, 41730, 316, 42003);
 L4 : do if ($2 | 0) {
  $7 = ($1 | 0) == 0;
  $$016 = 0;
  while (1) {
   if ($7) $11 = $$016; else $11 = HEAP32[$1 + ($$016 << 2) >> 2] | 0;
   $12 = HEAP32[$3 + ($11 << 2) >> 2] | 0;
   if (($12 | 0) == -1) break;
   HEAP32[$0 + ($$016 << 2) >> 2] = $12;
   $$016 = $$016 + 1 | 0;
   if ($$016 >>> 0 >= $2 >>> 0) break L4;
  }
  ___assert_fail(42028, 41730, 321, 42003);
 } while (0);
 return;
}

function _stbtt__new_buf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = $2;
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < 1073741824) {
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  STACKTOP = sp;
  return;
 } else ___assert_fail(40141, 40159, 1100, 40225);
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  do {
   $$0710 = $$0710 + 1 | 0;
   $$011 = $$011 + 1 | 0;
   $8 = HEAP8[$$0710 >> 0] | 0;
   $9 = HEAP8[$$011 >> 0] | 0;
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9;
  $$lcssa8 = $8;
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0;
}

function __ZN7meshoptL11hashUpdate4EjPKhm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$01619 = 0, $$01718 = 0, $$020 = 0, $10 = 0, $5 = 0;
 if ($2 >>> 0 > 3) {
  $$01619 = $1;
  $$01718 = $2;
  $$020 = $0;
  while (1) {
   $5 = Math_imul(HEAP32[$$01619 >> 2] | 0, 1540483477) | 0;
   $10 = (Math_imul($5 >>> 24 ^ $5, 1540483477) | 0) ^ (Math_imul($$020, 1540483477) | 0);
   $$01718 = $$01718 + -4 | 0;
   if ($$01718 >>> 0 <= 3) {
    $$0$lcssa = $10;
    break;
   } else {
    $$01619 = $$01619 + 4 | 0;
    $$020 = $10;
   }
  }
 } else $$0$lcssa = $0;
 return $$0$lcssa | 0;
}

function __saudio_ring_dequeue($0) {
 $0 = $0 | 0;
 var $1 = 0, $17 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (__saudio_ring_empty(HEAP32[$1 >> 2] | 0) | 0) ___assert_fail(40003, 22303, 830, 40029); else {
  HEAP32[$2 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 12 + (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] << 2) >> 2];
  $17 = __saudio_ring_idx(HEAP32[$1 >> 2] | 0, (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + 1 | 0) | 0;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = $17;
  STACKTOP = sp;
  return HEAP32[$2 >> 2] | 0;
 }
 return 0;
}

function _HMM_Mat4d($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 64 | 0;
 $3 = sp;
 HEAPF32[$2 >> 2] = $1;
 _HMM_Mat4($3);
 HEAPF32[$3 >> 2] = +HEAPF32[$2 >> 2];
 HEAPF32[$3 + 16 + 4 >> 2] = +HEAPF32[$2 >> 2];
 HEAPF32[$3 + 32 + 8 >> 2] = +HEAPF32[$2 >> 2];
 HEAPF32[$3 + 48 + 12 >> 2] = +HEAPF32[$2 >> 2];
 dest = $0;
 src = $3;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $7 = 0;
 if ((__ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($0) | 0) >>> 0 < $1 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 if ($1 >>> 0 > 268435455) {
  $5 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($5, 45630);
  HEAP32[$5 >> 2] = 12368;
  ___cxa_throw($5 | 0, 11448, 16);
 } else {
  $7 = __Znwm($1 << 4) | 0;
  HEAP32[$0 + 4 >> 2] = $7;
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 8 >> 2] = $7 + ($1 << 4);
  return;
 }
}

function __sg_gl_destroy_shader($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(25942, 17628, 6097, 25946);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6098, 25946);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 252 >> 2] | 0) {
  __sg_gl_cache_invalidate_program(HEAP32[(HEAP32[$1 >> 2] | 0) + 252 >> 2] | 0);
  _glDeleteProgram(HEAP32[(HEAP32[$1 >> 2] | 0) + 252 >> 2] | 0);
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(25839, 17628, 6103, 25946);
}

function _stbtt__add_point($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAPF32[$6 >> 2] = $2;
 HEAPF32[$7 >> 2] = $3;
 if (!(HEAP32[$4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[(HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] << 3) >> 2] = +HEAPF32[$6 >> 2];
 HEAPF32[(HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] << 3) + 4 >> 2] = +HEAPF32[$7 >> 2];
 STACKTOP = sp;
 return;
}

function __sg_dealloc_pipeline($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (!(HEAP32[$0 >> 2] | 0)) ___assert_fail(18191, 17628, 14081, 26777);
 HEAP32[$1 >> 2] = __sg_lookup_pipeline(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(18218, 17628, 14083, 26777);
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) == 1) {
  __sg_reset_slot(HEAP32[$1 >> 2] | 0);
  __sg_pool_free_index(2156524, __sg_slot_index(HEAP32[$0 >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(18218, 17628, 14083, 26777);
}

function _stbi__jpeg_get_bit($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $16 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 18368 >> 2] | 0) < 1) _stbi__grow_buffer_unsafe(HEAP32[$1 >> 2] | 0);
 HEAP32[$2 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 18364 >> 2];
 $12 = (HEAP32[$1 >> 2] | 0) + 18364 | 0;
 HEAP32[$12 >> 2] = HEAP32[$12 >> 2] << 1;
 $16 = (HEAP32[$1 >> 2] | 0) + 18368 | 0;
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + -1;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] & -2147483648 | 0;
}

function __sg_dealloc_shader($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (!(HEAP32[$0 >> 2] | 0)) ___assert_fail(18115, 17628, 14073, 26758);
 HEAP32[$1 >> 2] = __sg_lookup_shader(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(18142, 17628, 14075, 26758);
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) == 1) {
  __sg_reset_slot(HEAP32[$1 >> 2] | 0);
  __sg_pool_free_index(2156508, __sg_slot_index(HEAP32[$0 >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(18142, 17628, 14075, 26758);
}

function __sg_dealloc_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (!(HEAP32[$0 >> 2] | 0)) ___assert_fail(17963, 17628, 14057, 26721);
 HEAP32[$1 >> 2] = __sg_lookup_buffer(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(17990, 17628, 14059, 26721);
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) == 1) {
  __sg_reset_slot(HEAP32[$1 >> 2] | 0);
  __sg_pool_free_index(2156476, __sg_slot_index(HEAP32[$0 >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(17990, 17628, 14059, 26721);
}

function __ZNSt3__213__vector_baseINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEENS3_IS7_EEED2Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i = 0, $1 = 0, $3 = 0, $4 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($1 | 0)) $8 = $1; else {
   $$08$i$i = $4;
   do {
    $$08$i$i = $$08$i$i + -12 | 0;
    __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($$08$i$i);
   } while (($$08$i$i | 0) != ($1 | 0));
   $8 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$3 >> 2] = $1;
  __ZdlPv($8);
 }
 return;
}

function _stbi__zget8($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $13 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if ((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  HEAP8[$1 >> 0] = 0;
  $13 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $13 | 0;
 } else {
  $9 = HEAP32[$2 >> 2] | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  HEAP32[$9 >> 2] = $10 + 1;
  HEAP8[$1 >> 0] = HEAP8[$10 >> 0] | 0;
  $13 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0;
}

function __sg_dealloc_image($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (!(HEAP32[$0 >> 2] | 0)) ___assert_fail(18039, 17628, 14065, 26740);
 HEAP32[$1 >> 2] = __sg_lookup_image(2156476, HEAP32[$0 >> 2] | 0) | 0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(18066, 17628, 14067, 26740);
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) == 1) {
  __sg_reset_slot(HEAP32[$1 >> 2] | 0);
  __sg_pool_free_index(2156492, __sg_slot_index(HEAP32[$0 >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(18066, 17628, 14067, 26740);
}

function _fons__hashint($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + ~(HEAP32[$1 >> 2] << 15);
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] ^ (HEAP32[$1 >> 2] | 0) >>> 10;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + (HEAP32[$1 >> 2] << 3);
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] ^ (HEAP32[$1 >> 2] | 0) >>> 6;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + ~(HEAP32[$1 >> 2] << 11);
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] ^ (HEAP32[$1 >> 2] | 0) >>> 16;
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function _stbi__jpeg_dequantize($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >= 64) break;
  $14 = (HEAP32[$2 >> 2] | 0) + (HEAP32[$4 >> 2] << 1) | 0;
  HEAP16[$14 >> 1] = Math_imul(HEAP16[$14 >> 1] | 0, HEAPU16[(HEAP32[$3 >> 2] | 0) + (HEAP32[$4 >> 2] << 1) >> 1] | 0) | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN7compareclEmm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0.0, $4 = 0, $9 = 0.0;
 $4 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
 $9 = +HEAPF64[$4 + ($1 << 3) >> 3] - +HEAPF64[$4 + ($2 << 3) >> 3];
 $12 = $1 << 1;
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0;
 $16 = $2 << 1;
 $19 = +HEAPF64[$13 + ($12 << 3) >> 3] - +HEAPF64[$13 + ($16 << 3) >> 3];
 return ($9 != $9 | 0.0 != 0.0 | $9 == 0.0 ? ($19 != $19 | 0.0 != 0.0 | $19 == 0.0 ? +HEAPF64[$13 + (($12 | 1) << 3) >> 3] - +HEAPF64[$13 + (($16 | 1) << 3) >> 3] : $19) : $9) < 0.0 | 0;
}

function __sfetch_channel_discard($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  __sfetch_ring_discard((HEAP32[$1 >> 2] | 0) + 4 | 0);
  __sfetch_ring_discard((HEAP32[$1 >> 2] | 0) + 20 | 0);
  __sfetch_ring_discard((HEAP32[$1 >> 2] | 0) + 36 | 0);
  __sfetch_ring_discard((HEAP32[$1 >> 2] | 0) + 52 | 0);
  __sfetch_ring_discard((HEAP32[$1 >> 2] | 0) + 4 | 0);
  HEAP8[(HEAP32[$1 >> 2] | 0) + 72 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(38359, 21538, 2096, 38363);
}

function __saudio_ring_enqueue($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (__saudio_ring_full(HEAP32[$2 >> 2] | 0) | 0) ___assert_fail(40050, 22303, 824, 40075); else {
  HEAP32[(HEAP32[$2 >> 2] | 0) + 12 + (HEAP32[HEAP32[$2 >> 2] >> 2] << 2) >> 2] = HEAP32[$3 >> 2];
  $16 = __saudio_ring_idx(HEAP32[$2 >> 2] | 0, (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 1 | 0) | 0;
  HEAP32[HEAP32[$2 >> 2] >> 2] = $16;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE18__construct_at_endIPKS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$07$i = 0, $4 = 0, $6 = 0;
 $4 = $0 + 4 | 0;
 if (($1 | 0) != ($2 | 0)) {
  $$07$i = $1;
  $6 = HEAP32[$4 >> 2] | 0;
  do {
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($6, $$07$i);
   $$07$i = $$07$i + 12 | 0;
   $6 = (HEAP32[$4 >> 2] | 0) + 12 | 0;
   HEAP32[$4 >> 2] = $6;
  } while (($$07$i | 0) != ($2 | 0));
 }
 return;
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$07$i = 0, $4 = 0, $6 = 0;
 $4 = $0 + 4 | 0;
 if (($1 | 0) != ($2 | 0)) {
  $$07$i = $1;
  $6 = HEAP32[$4 >> 2] | 0;
  do {
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($6, $$07$i);
   $$07$i = $$07$i + 12 | 0;
   $6 = (HEAP32[$4 >> 2] | 0) + 12 | 0;
   HEAP32[$4 >> 2] = $6;
  } while (($$07$i | 0) != ($2 | 0));
 }
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $7 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $4 = $1 + 4 | 0;
 $7 = (HEAP32[$4 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0;
 $8 = $7 >> 4;
 if ($7 | 0) {
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8allocateEm($0, $8);
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m($0, HEAP32[$1 >> 2] | 0, HEAP32[$4 >> 2] | 0, $8);
 }
 return;
}

function __sg_gl_cache_restore_buffer_binding($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[$1 >> 2] | 0) == 34962) {
  if (!(HEAP32[539376] | 0)) {
   STACKTOP = sp;
   return;
  }
  __sg_gl_cache_bind_buffer(HEAP32[$1 >> 2] | 0, HEAP32[539376] | 0);
  HEAP32[539376] = 0;
  STACKTOP = sp;
  return;
 } else {
  if (!(HEAP32[539377] | 0)) {
   STACKTOP = sp;
   return;
  }
  __sg_gl_cache_bind_buffer(HEAP32[$1 >> 2] | 0, HEAP32[539377] | 0);
  HEAP32[539377] = 0;
  STACKTOP = sp;
  return;
 }
}

function __sg_apply_scissor_rect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = sp + 16 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP8[$9 >> 0] = $4 & 1;
 __sg_gl_apply_scissor_rect(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP8[$9 >> 0] & 1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $7 = 0;
 if ((__ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0) | 0) >>> 0 < $1 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 if ($1 >>> 0 > 1073741823) {
  $5 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($5, 45630);
  HEAP32[$5 >> 2] = 12368;
  ___cxa_throw($5 | 0, 11448, 16);
 } else {
  $7 = __Znwm($1 << 2) | 0;
  HEAP32[$0 + 4 >> 2] = $7;
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 8 >> 2] = $7 + ($1 << 2);
  return;
 }
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $10 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 7]($10, $1, $2, $3, $4, $5);
 }
 return;
}

function __sg_num_rows($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = HEAP32[$3 >> 2] | 0;
 if (((HEAP32[$2 >> 2] | 0) + -43 | 0) >>> 0 < 19) HEAP32[$4 >> 2] = ($6 + 3 | 0) / 4 | 0; else HEAP32[$4 >> 2] = $6;
 if ((HEAP32[$4 >> 2] | 0) >= 1) {
  $11 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $11 | 0;
 }
 HEAP32[$4 >> 2] = 1;
 $11 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function __Z12circumradiusdddddd($0, $1, $2, $3, $4, $5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $12 = 0.0, $15 = 0.0, $18 = 0.0, $23 = 0.0, $28 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 $6 = $2 - $0;
 $7 = $3 - $1;
 $8 = $4 - $0;
 $9 = $5 - $1;
 $12 = $6 * $6 + $7 * $7;
 $15 = $8 * $8 + $9 * $9;
 $18 = $6 * $9 - $7 * $8;
 $23 = ($9 * $12 - $7 * $15) * .5 / $18;
 $28 = ($6 * $15 - $8 * $12) * .5 / $18;
 return +($18 != $18 | 0.0 != 0.0 | $18 == 0.0 | (!($12 > 0.0) | !($15 > 0.0)) ? 1797693134862315708145274.0e284 : $23 * $23 + $28 * $28);
}

function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0;
 $1 = HEAP32[2992] | 0;
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) $19 = ___lockfile($1) | 0; else $19 = 0;
 do if ((_fputs($0, $1) | 0) < 0) $20 = -1; else {
  if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
   $11 = $1 + 20 | 0;
   $12 = HEAP32[$11 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$11 >> 2] = $12 + 1;
    HEAP8[$12 >> 0] = 10;
    $20 = 0;
    break;
   }
  }
  $20 = (___overflow($1, 10) | 0) >> 31;
 } while (0);
 if ($19 | 0) ___unlockfile($1);
 return $20 | 0;
}

function ___shlim($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $12 = 0, $14 = 0, $16 = 0, $4 = 0, $9 = 0;
 $4 = $0 + 112 | 0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 $9 = HEAP32[$0 + 8 >> 2] | 0;
 $11 = HEAP32[$0 + 4 >> 2] | 0;
 $12 = $9 - $11 | 0;
 $14 = (($12 | 0) < 0) << 31 >> 31;
 $16 = $0 + 120 | 0;
 HEAP32[$16 >> 2] = $12;
 HEAP32[$16 + 4 >> 2] = $14;
 if ((($1 | 0) != 0 | ($2 | 0) != 0) & (($14 | 0) > ($2 | 0) | ($14 | 0) == ($2 | 0) & $12 >>> 0 > $1 >>> 0)) HEAP32[$0 + 104 >> 2] = $11 + $1; else HEAP32[$0 + 104 >> 2] = $9;
 return;
}

function __sfetch_path_copy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$2 >> 2] | 0)) ___assert_fail(34002, 21538, 1208, 39088);
 if (HEAP32[$3 >> 2] | 0) if ((_strlen(HEAP32[$3 >> 2] | 0) | 0) >>> 0 < 1024) {
  _strncpy(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, 1024) | 0;
  HEAP8[(HEAP32[$2 >> 2] | 0) + 1023 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 _memset(HEAP32[$2 >> 2] | 0, 0, 1024) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE7reserveEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $5 = HEAP32[$0 >> 2] | 0;
 if ((HEAP32[$0 + 8 >> 2] | 0) - $5 >> 2 >>> 0 < $1 >>> 0) {
  __ZNSt3__214__split_bufferImRNS_9allocatorImEEEC2EmmS3_($2, $1, (HEAP32[$0 + 4 >> 2] | 0) - $5 >> 2, $0 + 8 | 0);
  __ZNSt3__26vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE($0, $2);
  __ZNSt3__214__split_bufferImRNS_9allocatorImEEED2Ev($2);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $5 = HEAP32[$0 >> 2] | 0;
 if ((HEAP32[$0 + 8 >> 2] | 0) - $5 >> 3 >>> 0 < $1 >>> 0) {
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($2, $1, (HEAP32[$0 + 4 >> 2] | 0) - $5 >> 3, $0 + 8 | 0);
  __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($0, $2);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
 }
 STACKTOP = sp;
 return;
}

function __sg_apply_viewport($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $9 = sp + 16 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP8[$9 >> 0] = $4 & 1;
 __sg_gl_apply_viewport(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP8[$9 >> 0] & 1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEED2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) {
  $7 = $4;
  do {
   $6 = $7 + -12 | 0;
   HEAP32[$3 >> 2] = $6;
   __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($6);
   $7 = HEAP32[$3 >> 2] | 0;
  } while (($7 | 0) != ($2 | 0));
 }
 $10 = HEAP32[$0 >> 2] | 0;
 if ($10 | 0) __ZdlPv($10);
 return;
}

function __sgl_pipeline_at($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(37775, 19399, 2195, 37799);
 HEAP32[$2 >> 2] = __sgl_slot_index(HEAP32[$1 >> 2] | 0) | 0;
 if ((HEAP32[$2 >> 2] | 0) <= 0) ___assert_fail(37816, 19399, 2197, 37799);
 if ((HEAP32[$2 >> 2] | 0) < (HEAP32[539489] | 0)) {
  STACKTOP = sp;
  return (HEAP32[539493] | 0) + (HEAP32[$2 >> 2] << 5) | 0;
 } else ___assert_fail(37816, 19399, 2197, 37799);
 return 0;
}

function _stbtt__buf_peek8($0) {
 $0 = $0 | 0;
 var $1 = 0, $17 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP8[$1 >> 0] = 0;
  $17 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  HEAP8[$1 >> 0] = HEAP8[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >> 0] | 0;
  $17 = HEAP8[$1 >> 0] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}

function __sg_is_valid_rendertarget_depth_format($0) {
 $0 = $0 | 0;
 var $1 = 0, $18 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 if (!((HEAP32[$2 >> 2] | 0) >= 0 & (HEAP32[$2 >> 2] | 0) < 62)) ___assert_fail(32838, 17628, 3892, 32892);
 if (!(HEAP8[2156636 + ((HEAP32[$2 >> 2] | 0) * 6 | 0) + 2 >> 0] & 1)) {
  $18 = 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 $18 = HEAP8[2156636 + ((HEAP32[$2 >> 2] | 0) * 6 | 0) + 5 >> 0] & 1;
 STACKTOP = sp;
 return $18 | 0;
}

function __ZNSt3__210shared_ptrI6DrMeshE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = __Znwm(44) | 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = 11672;
 $4 = $1 + 12 | 0;
 __ZN6DrMeshC2Ev($4);
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$vararg_buffer >> 2] = $4;
 HEAP32[$vararg_buffer + 4 >> 2] = $4;
 __ZNSt3__210shared_ptrI6DrMeshE18__enable_weak_thisEz($0, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function _stbi__mul2sizes_valid($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 do if ((HEAP32[$3 >> 2] | 0) < 0 | (HEAP32[$4 >> 2] | 0) < 0) HEAP32[$2 >> 2] = 0; else if (!(HEAP32[$4 >> 2] | 0)) {
  HEAP32[$2 >> 2] = 1;
  break;
 } else {
  HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) <= (2147483647 / (HEAP32[$4 >> 2] | 0) | 0 | 0) & 1;
  break;
 } while (0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do if (!$2) $14 = 0; else {
  $$01318 = $0;
  $$01417 = $2;
  $$019 = $1;
  while (1) {
   $4 = HEAP8[$$01318 >> 0] | 0;
   $5 = HEAP8[$$019 >> 0] | 0;
   if ($4 << 24 >> 24 != $5 << 24 >> 24) break;
   $$01417 = $$01417 + -1 | 0;
   if (!$$01417) {
    $14 = 0;
    break L1;
   } else {
    $$01318 = $$01318 + 1 | 0;
    $$019 = $$019 + 1 | 0;
   }
  }
  $14 = ($4 & 255) - ($5 & 255) | 0;
 } while (0);
 return $14 | 0;
}

function __sgl_lookup_pipeline($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (HEAP32[$2 >> 2] | 0) {
  HEAP32[$3 >> 2] = __sgl_pipeline_at(HEAP32[$2 >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$3 >> 2] >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
   HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
   $13 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $13 | 0;
  }
 }
 HEAP32[$1 >> 2] = 0;
 $13 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function __sg_gl_primitive_type($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 0;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 1;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 3;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 4;
   break;
  }
 case 5:
  {
   HEAP32[$1 >> 2] = 5;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4492, 36106);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEElLb0EEclEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $9 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $9 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $9 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($0, $9, 0);
 return;
}

function __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $9 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $9 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $9 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($0, $9, 0);
 return;
}

function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0, $spec$select = 0;
 $4 = Math_imul($2, $1) | 0;
 $spec$select = ($1 | 0) == 0 ? 0 : $2;
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0;
  $11 = ___fwritex($0, $4, $3) | 0;
  if ($phitmp) $13 = $11; else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else $13 = ___fwritex($0, $4, $3) | 0;
 if (($13 | 0) == ($4 | 0)) $15 = $spec$select; else $15 = ($13 >>> 0) / ($1 >>> 0) | 0;
 return $15 | 0;
}

function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lm4096EEEEC2EmmS6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0, $9 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE8allocateEm($3, $1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + ($2 * 24 | 0) | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$4 >> 2] = $8 + ($1 * 24 | 0);
 return;
}

function __sfons_render_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if ((HEAP32[$3 >> 2] | 0) != 0 & (HEAP32[$4 >> 2] | 0) != 0 & (HEAP32[$5 >> 2] | 0) != 0) {
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP8[(HEAP32[$6 >> 2] | 0) + 20 >> 0] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(41156, 24442, 1692, 41181);
}

function __ZN2Dr14IdentityMatrixEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $5 = 0;
 HEAPF32[$0 >> 2] = 1.0;
 $1 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAPF32[$0 + 20 >> 2] = 1.0;
 $3 = $0 + 24 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = 1.0;
 $5 = $0 + 44 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAPF32[$0 + 60 >> 2] = 1.0;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_mmRKS6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $4 = HEAP8[$1 + 11 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 $10 = $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $10 >>> 0 < $2 >>> 0 ? $10 : $2);
 return;
}

function __ZN2Dr19EqualizeAngle0to360IfEET_RKS1_($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0.0, $$07 = 0.0, $$1$lcssa = 0.0, $$16 = 0.0, $1 = 0.0, $3 = 0.0, $6 = 0.0;
 $1 = +HEAPF32[$0 >> 2];
 if ($1 < 0.0) {
  $$07 = $1;
  while (1) {
   $3 = $$07 + 360.0;
   if ($3 < 0.0) $$07 = $3; else {
    $$0$lcssa = $3;
    break;
   }
  }
 } else $$0$lcssa = $1;
 if ($$0$lcssa > 360.0) {
  $$16 = $$0$lcssa;
  while (1) {
   $6 = $$16 + -360.0;
   if ($6 > 360.0) $$16 = $6; else {
    $$1$lcssa = $6;
    break;
   }
  }
 } else $$1$lcssa = $$0$lcssa;
 return +$$1$lcssa;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $3 = $0 + 12 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $$0$i$i1 = 0;
 while (1) {
  if (($$0$i$i1 | 0) == 3) break;
  HEAP32[$3 + ($$0$i$i1 << 2) >> 2] = 0;
  $$0$i$i1 = $$0$i$i1 + 1 | 0;
 }
 return;
}

function __sg_gl_create_context($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(24530, 17628, 5680, 26450);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) ___assert_fail(26472, 17628, 5681, 26450);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 5682, 26450);
 _glGetIntegerv(36006, (HEAP32[$1 >> 2] | 0) + 12 | 0);
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return 2;
 } else ___assert_fail(25839, 17628, 5684, 26450);
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm18EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 17);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm15EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 14);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm14EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 13);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm13EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 12);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm12EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 11);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm11EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 10);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0); else {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm10EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 9);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm9EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 8);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm6EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 5);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm5EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 4);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm4EEERAT__Kc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $2 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, $1, 3);
 $2 = $0 + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function _stbi__hdr_test($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = _stbi__hdr_test_core(HEAP32[$1 >> 2] | 0, 43781) | 0;
 _stbi__rewind(HEAP32[$1 >> 2] | 0);
 if (HEAP32[$2 >> 2] | 0) {
  $11 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $11 | 0;
 }
 HEAP32[$2 >> 2] = _stbi__hdr_test_core(HEAP32[$1 >> 2] | 0, 43793) | 0;
 _stbi__rewind(HEAP32[$1 >> 2] | 0);
 $11 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i = 0, $1 = 0, $3 = 0, $4 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($1 | 0)) $8 = $1; else {
   $$08$i$i = $4;
   do {
    $$08$i$i = $$08$i$i + -12 | 0;
    __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($$08$i$i);
   } while (($$08$i$i | 0) != ($1 | 0));
   $8 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$3 >> 2] = $1;
  __ZdlPv($8);
 }
 return;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEC2EmRKS3_RKS5_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP32[$0 >> 2] = 0;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8allocateEm($0);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_(HEAP32[$3 >> 2] | 0, $1);
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 24;
 return;
}

function _stbi__addsizes_valid($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if ((HEAP32[$4 >> 2] | 0) < 0) {
  HEAP32[$2 >> 2] = 0;
  $12 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $12 | 0;
 } else {
  HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) <= (2147483647 - (HEAP32[$4 >> 2] | 0) | 0) & 1;
  $12 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 return 0;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$05$lcssa = $2; else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $14 = $$056 + -1 | 0;
   HEAP8[$14 >> 0] = HEAPU8[10640 + ($8 & 15) >> 0] | 0 | $3;
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $15 = getTempRet0() | 0;
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14;
    break;
   } else $$056 = $14;
  }
 }
 return $$05$lcssa | 0;
}

function _sgl_v2f_t2f_c1i($0, $1, $2, $3, $4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAPF32[$5 >> 2] = $0;
 HEAPF32[$6 >> 2] = $1;
 HEAPF32[$7 >> 2] = $2;
 HEAPF32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 __sgl_vtx(+HEAPF32[$5 >> 2], +HEAPF32[$6 >> 2], 0.0, +HEAPF32[$7 >> 2], +HEAPF32[$8 >> 2], HEAP32[$9 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8allocateEm($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!(__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0) | 0)) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $4 = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE8allocateEm($0 + 12 | 0, 1) | 0;
  HEAP32[$0 + 4 >> 2] = $4;
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $4 + 24;
  return;
 }
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $7 = 0, $8 = 0;
 $7 = HEAP32[$0 + 4 >> 2] | 0;
 $8 = $7 >> 8;
 if (!($7 & 1)) $$0 = $8; else $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0;
 $14 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 7]($14, $1, $2, $3 + $$0 | 0, ($7 & 2 | 0) == 0 ? 2 : $4, $5);
 return;
}

function _stbtt__hheap_cleanup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[HEAP32[$2 >> 2] >> 2];
 while (1) {
  if (!(HEAP32[$4 >> 2] | 0)) break;
  HEAP32[$5 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
  _fons__tmpfree(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0);
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 }
 STACKTOP = sp;
 return;
}

function _stbtt__csctx_close_shape($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(+HEAPF32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] != +HEAPF32[(HEAP32[$1 >> 2] | 0) + 16 >> 2])) if (!(+HEAPF32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] != +HEAPF32[(HEAP32[$1 >> 2] | 0) + 20 >> 2])) {
  STACKTOP = sp;
  return;
 }
 _stbtt__csctx_v(HEAP32[$1 >> 2] | 0, 2, ~~+HEAPF32[(HEAP32[$1 >> 2] | 0) + 8 >> 2], ~~+HEAPF32[(HEAP32[$1 >> 2] | 0) + 12 >> 2], 0, 0, 0, 0);
 STACKTOP = sp;
 return;
}

function __ZN13TPPLPartition6InConeER9TPPLPointS1_S1_S1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 $5 = __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $1, $2, $3) | 0;
 $6 = __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $1, $2, $4) | 0;
 if ($5) if ($6) $$0 = __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $2, $3, $4) | 0; else $$0 = 0; else if ($6) $$0 = 1; else $$0 = __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $2, $3, $4) | 0;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm22EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 49270, 21);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm19EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 49491, 18);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm16EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 48664, 15);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function _sgl_defaults() {
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2844, 19898);
 if (HEAP8[2157736] & 1) ___assert_fail(19911, 19399, 2845, 19898); else {
  HEAPF32[539435] = 0.0;
  HEAPF32[539436] = 0.0;
  HEAP32[539437] = -1;
  HEAP8[2157760] = 0;
  HEAP32[539439] = HEAP32[539442];
  _sgl_default_pipeline();
  __sgl_identity(__sgl_matrix_texture() | 0);
  __sgl_identity(__sgl_matrix_modelview() | 0);
  __sgl_identity(__sgl_matrix_projection() | 0);
  HEAP32[539559] = 0;
  HEAP8[2157761] = 1;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm8EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 49071, 7);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm7EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 49484, 6);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILm3EEERAT__Kc($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcm($0, 49295, 2);
 $1 = $0 + 12 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$1 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0 | 0), $1$0 | 0 | 0) | 0;
}

function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 HEAP32[$0 + 36 >> 2] = 1;
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21523;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$0 + 75 >> 0] = -1;
 }
 $14 = ___stdio_write($0, $1, $2) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorI8DrPointFNS_9allocatorIS2_EEEERNS3_IS5_EEED2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) {
  $7 = $4;
  do {
   $6 = $7 + -12 | 0;
   HEAP32[$3 >> 2] = $6;
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($6);
   $7 = HEAP32[$3 >> 2] | 0;
  } while (($7 | 0) != ($2 | 0));
 }
 $10 = HEAP32[$0 >> 2] | 0;
 if ($10 | 0) __ZdlPv($10);
 return;
}

function _fons__tt_loadFont($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[sp + 4 >> 2] = $3;
 HEAP32[HEAP32[$5 >> 2] >> 2] = HEAP32[$4 >> 2];
 HEAP32[$8 >> 2] = _stbtt_InitFont(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return HEAP32[$8 >> 2] | 0;
}

function __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9push_backERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $15 = 0, $17 = 0, $2 = 0, $4 = 0, $9 = 0;
 $2 = __Znwm(16) | 0;
 $4 = $1;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $2 + 8 | 0;
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$10 + 4 >> 2] = $9;
 HEAP32[$2 + 4 >> 2] = $0;
 $15 = HEAP32[$0 >> 2] | 0;
 HEAP32[$2 >> 2] = $15;
 HEAP32[$15 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $2;
 $17 = $0 + 8 | 0;
 HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
 return;
}

function _fonsClearState($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = _fons__getState(HEAP32[$1 >> 2] | 0) | 0;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] = 12.0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] = -1;
 HEAP32[HEAP32[$2 >> 2] >> 2] = 0;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] = 0.0;
 HEAPF32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = 0.0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = 65;
 STACKTOP = sp;
 return;
}

function __sfetch_ring_full($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(38027, 21538, 1278, 38104);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) {
  $12 = __sfetch_ring_wrap(HEAP32[$1 >> 2] | 0, (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 1 | 0) | 0;
  STACKTOP = sp;
  return ($12 | 0) == (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0;
 } else ___assert_fail(38027, 21538, 1278, 38104);
 return 0;
}

function __sfetch_ring_discard($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(24411, 21538, 1248, 38338);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0);
  HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] = 0;
 }
 HEAP32[HEAP32[$1 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _stbi__bitreverse16($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] & 43690) >> 1 | (HEAP32[$1 >> 2] & 21845) << 1;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] & 52428) >> 2 | (HEAP32[$1 >> 2] & 13107) << 2;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] & 61680) >> 4 | (HEAP32[$1 >> 2] & 3855) << 4;
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] & 65280) >> 8 | (HEAP32[$1 >> 2] & 255) << 8;
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $8 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 3]($8, $1, $2, $3);
 }
 return;
}

function __Z9in_circledddddddd($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $19 = 0.0, $22 = 0.0, $8 = 0.0, $9 = 0.0;
 $8 = $0 - $6;
 $9 = $1 - $7;
 $10 = $2 - $6;
 $11 = $3 - $7;
 $12 = $4 - $6;
 $13 = $5 - $7;
 $19 = $10 * $10 + $11 * $11;
 $22 = $12 * $12 + $13 * $13;
 return ($8 * $8 + $9 * $9) * ($10 * $13 - $12 * $11) + ($8 * ($11 * $22 - $13 * $19) - $9 * ($10 * $22 - $12 * $19)) < 0.0 | 0;
}

function __ZN10DrPolygonF8addPointE8DrPointF($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) == (HEAP32[$0 + 8 >> 2] | 0)) __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1); else {
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 16;
 }
 return;
}

function __sg_gl_wrap($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 2:
  {
   HEAP32[$1 >> 2] = 33071;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 33071;
   break;
  }
 case 1:
  {
   HEAP32[$1 >> 2] = 10497;
   break;
  }
 case 4:
  {
   HEAP32[$1 >> 2] = 33648;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4585, 33446);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function _fons__freeFont($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 208 >> 2] | 0) _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 208 >> 2] | 0);
 if (HEAPU8[(HEAP32[$1 >> 2] | 0) + 192 >> 0] | 0 | 0) if (HEAP32[(HEAP32[$1 >> 2] | 0) + 184 >> 2] | 0) _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 184 >> 2] | 0);
 _free(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = $6 >> 8;
 if (!($6 & 1)) $$0 = $7; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0;
 $13 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 7]($13, $1, $2 + $$0 | 0, ($6 & 2 | 0) == 0 ? 2 : $3, $4);
 return;
}

function _stbi__jpeg_test($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$3 >> 2] = _stbi__malloc(18456) | 0;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$1 >> 2];
 _stbi__setup_jpeg(HEAP32[$3 >> 2] | 0);
 HEAP32[$2 >> 2] = _stbi__decode_jpeg_header(HEAP32[$3 >> 2] | 0, 1) | 0;
 _stbi__rewind(HEAP32[$1 >> 2] | 0);
 _free(HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZNSt3__29to_stringEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEElLb0EEclEv($2);
 __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczElEET_T0_SD_PKNSD_10value_typeET1_($0, $2, $1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29to_stringEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($2);
 __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_($0, $2, $1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (!$1) return; else {
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0, HEAP32[$1 >> 2] | 0);
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0, HEAP32[$1 + 4 >> 2] | 0);
  __ZdlPv($1);
  return;
 }
}

function __ZN10DelaunatorD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($0 + 100 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($0 + 68 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($0 + 52 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($0 + 40 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($0 + 28 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($0 + 16 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($0 + 4 | 0);
 return;
}

function _HMM_SubtractVec3($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAPF32[$3 >> 2] = +HEAPF32[$1 >> 2] - +HEAPF32[$2 >> 2];
 HEAPF32[$3 + 4 >> 2] = +HEAPF32[$1 + 4 >> 2] - +HEAPF32[$2 + 4 >> 2];
 HEAPF32[$3 + 8 >> 2] = +HEAPF32[$1 + 8 >> 2] - +HEAPF32[$2 + 8 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 STACKTOP = sp;
 return;
}

function __sgl_reset_pipeline($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  $4 = HEAP32[$1 >> 2] | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = 0;
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(18659, 19399, 2145, 37893);
}

function __ZNSt3__211__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i = 0, $$05 = 0, $2 = 0, $4 = 0, $$0$looptemp = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 if (!$2) {
  $$0 = $0;
  do {
   $$0$looptemp = $$0;
   $$0 = HEAP32[$$0 + 8 >> 2] | 0;
  } while ((HEAP32[$$0 >> 2] | 0) != ($$0$looptemp | 0));
  $$05 = $$0;
 } else {
  $$0$i = $2;
  while (1) {
   $4 = HEAP32[$$0$i >> 2] | 0;
   if (!$4) {
    $$05 = $$0$i;
    break;
   } else $$0$i = $4;
  }
 }
 return $$05 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $5 = 0, $6 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $5 >> 8;
 if (!($5 & 1)) $$0 = $6; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0;
 $12 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 3]($12, $1, $2 + $$0 | 0, ($5 & 2 | 0) == 0 ? 2 : $3);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEEENS5_IS9_Lm4096EEEED2Ev($0 + 32 | 0);
 __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lm4096EEEEENS5_IS7_Lm4096EEEED2Ev($0 + 16 | 0);
 __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEED2Ev($0);
 return;
}

function __ZN6DrVec314triangleNormalERKS_S1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = sp + 12 | 0;
 __ZNK6DrVec3miERKS_($5, $1, $2);
 __ZNK6DrVec3miERKS_($6, $2, $3);
 __ZNK6DrVec3rmERKS_($4, $5, $6);
 +__ZN6DrVec39normalizeEv($4);
 __ZN6DrVec3C2Efff($0, +HEAPF32[$4 >> 2], +HEAPF32[$4 + 4 >> 2], +HEAPF32[$4 + 8 >> 2]);
 STACKTOP = sp;
 return;
}

function __sgl_next_command() {
 var $0 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 if ((HEAP32[539427] | 0) < (HEAP32[539424] | 0)) {
  $4 = HEAP32[539430] | 0;
  $5 = HEAP32[539427] | 0;
  HEAP32[539427] = $5 + 1;
  HEAP32[$0 >> 2] = $4 + ($5 * 24 | 0);
  $8 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 } else {
  HEAP32[539433] = 3;
  HEAP32[$0 >> 2] = 0;
  $8 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0;
}
function _stbi__clamp($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 do if ((HEAP32[$2 >> 2] | 0) >>> 0 > 255) {
  if ((HEAP32[$2 >> 2] | 0) < 0) {
   HEAP8[$1 >> 0] = 0;
   break;
  }
  if ((HEAP32[$2 >> 2] | 0) > 255) HEAP8[$1 >> 0] = -1; else label = 6;
 } else label = 6; while (0);
 if ((label | 0) == 6) HEAP8[$1 >> 0] = HEAP32[$2 >> 2];
 STACKTOP = sp;
 return HEAP8[$1 >> 0] | 0;
}

function __sgl_next_vertex() {
 var $0 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 if ((HEAP32[539425] | 0) < (HEAP32[539422] | 0)) {
  $4 = HEAP32[539428] | 0;
  $5 = HEAP32[539425] | 0;
  HEAP32[539425] = $5 + 1;
  HEAP32[$0 >> 2] = $4 + ($5 * 24 | 0);
  $8 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 } else {
  HEAP32[539433] = 1;
  HEAP32[$0 >> 2] = 0;
  $8 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0;
}

function __sg_gl_end_pass() {
 if (!(HEAP8[2157010] & 1)) ___assert_fail(35918, 17628, 6508, 37025);
 if (_glGetError() | 0) ___assert_fail(25839, 17628, 6509, 37025);
 HEAP32[539256] = 0;
 HEAP32[539257] = 0;
 HEAP32[539253] = 0;
 HEAP32[539254] = 0;
 if (!(HEAP32[539255] | 0)) ___assert_fail(35795, 17628, 6545, 37025);
 _glBindFramebuffer(36160, HEAP32[(HEAP32[539255] | 0) + 12 >> 2] | 0);
 HEAP8[2157010] = 0;
 if (!(_glGetError() | 0)) return; else ___assert_fail(25839, 17628, 6548, 37025);
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $14 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 28 >> 2] = $14;
  HEAP32[$0 + 20 >> 2] = $14;
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$0 >> 2] = $7 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$0$lcssa = $2; else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $10 = $$06 + -1 | 0;
   HEAP8[$10 >> 0] = $7 & 7 | 48;
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $11 = getTempRet0() | 0;
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10;
    break;
   } else $$06 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function __sgl_next_uniform() {
 var $0 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 if ((HEAP32[539426] | 0) < (HEAP32[539423] | 0)) {
  $4 = HEAP32[539429] | 0;
  $5 = HEAP32[539426] | 0;
  HEAP32[539426] = $5 + 1;
  HEAP32[$0 >> 2] = $4 + ($5 << 7);
  $8 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 } else {
  HEAP32[539433] = 2;
  HEAP32[$0 >> 2] = 0;
  $8 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0;
}

function __Z12circumcenterdddddd($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $13 = 0.0, $16 = 0.0, $19 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 $7 = $3 - $1;
 $8 = $4 - $2;
 $9 = $5 - $1;
 $10 = $6 - $2;
 $13 = $7 * $7 + $8 * $8;
 $16 = $9 * $9 + $10 * $10;
 $19 = $7 * $10 - $8 * $9;
 HEAPF64[$0 >> 3] = ($10 * $13 - $8 * $16) * .5 / $19 + $1;
 HEAPF64[$0 + 8 >> 3] = ($7 * $16 - $9 * $13) * .5 / $19 + $2;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $12 = 0, $13 = 0;
 if (($1 - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == 115) if ((HEAP8[$0 + 1 >> 0] | 0) == 112) {
  $12 = $0 + 2 | 0;
  $13 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12, $1, $2) | 0;
  $$1 = ($13 | 0) == ($12 | 0) ? $0 : $13;
 } else $$1 = $0; else $$1 = $0; else $$1 = $0;
 return $$1 | 0;
}

function _fons__tt_getFontVMetrics($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 _stbtt_GetFontVMetrics(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213__vector_baseI8DrBitmapNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $$08$i$i = 0, $1 = 0, $3 = 0, $4 = 0, $8 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $3 = $0 + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == ($1 | 0)) $8 = $1; else {
   $$08$i$i = $4;
   do {
    $$08$i$i = $$08$i$i + -24 | 0;
    __ZN8DrBitmapD2Ev($$08$i$i);
   } while (($$08$i$i | 0) != ($1 | 0));
   $8 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$3 >> 2] = $1;
  __ZdlPv($8);
 }
 return;
}

function __sapp_translate_key($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if ((HEAP32[$2 >> 2] | 0) >= 0 & (HEAP32[$2 >> 2] | 0) < 512) {
  HEAP32[$1 >> 2] = HEAP32[51988 + (HEAP32[$2 >> 2] << 2) >> 2];
  $10 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $10 | 0;
 } else {
  HEAP32[$1 >> 2] = 0;
  $10 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 return 0;
}

function __sg_validate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP8[$2 >> 0] = $0 & 1;
 HEAP32[$3 >> 2] = $1;
 if (HEAP8[$2 >> 0] & 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[539118] = HEAP32[$3 >> 2];
 if (!(__sg_validate_string(HEAP32[$3 >> 2] | 0) | 0)) ___assert_fail(26964, 17628, 13260, 26989);
 _puts(__sg_validate_string(HEAP32[$3 >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0, dest = 0, stop = 0;
 $2 = $0 + 8 | 0;
 $$0 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 do {
  dest = $3;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $3 = (HEAP32[$2 >> 2] | 0) + 44 | 0;
  HEAP32[$2 >> 2] = $3;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$0 >> 2] = $3;
 if ($3 | 0) HEAP32[$3 + 8 >> 2] = $0;
 $6 = $0 + 8 | 0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$6 >> 2];
 $9 = HEAP32[$6 >> 2] | 0;
 HEAP32[((HEAP32[$9 >> 2] | 0) == ($0 | 0) ? $9 : $9 + 4 | 0) >> 2] = $1;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 return;
}

function __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0;
 $1 = $0 + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 if ($3 | 0) HEAP32[$3 + 8 >> 2] = $0;
 $6 = $0 + 8 | 0;
 HEAP32[$2 + 8 >> 2] = HEAP32[$6 >> 2];
 $9 = HEAP32[$6 >> 2] | 0;
 HEAP32[((HEAP32[$9 >> 2] | 0) == ($0 | 0) ? $9 : $9 + 4 | 0) >> 2] = $2;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$6 >> 2] = $2;
 return;
}

function __ZN8DrBitmapaSERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 if (($0 | 0) != ($1 | 0)) __ZNSt3__26vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($0 + 12 | 0, HEAP32[$1 + 12 >> 2] | 0, HEAP32[$1 + 16 >> 2] | 0);
 return $0 | 0;
}

function _sg_init_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896 | 0;
 $$byval_copy = sp + 888 | 0;
 $2 = sp + 884 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 if (HEAP8[2156304] & 1) {
  __sg_image_desc_defaults($3, HEAP32[$2 >> 2] | 0);
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  __sg_init_image($$byval_copy, $3);
  STACKTOP = sp;
  return;
 } else ___assert_fail(17761, 17628, 14498, 17933);
}

function __sg_alloc_pipeline() {
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = __sg_pool_alloc_index(2156524) | 0;
 if (HEAP32[$2 >> 2] | 0) HEAP32[$1 >> 2] = __sg_slot_alloc(2156524, (HEAP32[539146] | 0) + ((HEAP32[$2 >> 2] | 0) * 472 | 0) | 0, HEAP32[$2 >> 2] | 0) | 0; else HEAP32[$1 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function __sg_alloc_shader() {
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = __sg_pool_alloc_index(2156508) | 0;
 if (HEAP32[$2 >> 2] | 0) HEAP32[$1 >> 2] = __sg_slot_alloc(2156508, (HEAP32[539145] | 0) + ((HEAP32[$2 >> 2] | 0) * 2176 | 0) | 0, HEAP32[$2 >> 2] | 0) | 0; else HEAP32[$1 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function __sg_alloc_image() {
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = __sg_pool_alloc_index(2156492) | 0;
 if (HEAP32[$2 >> 2] | 0) HEAP32[$1 >> 2] = __sg_slot_alloc(2156492, (HEAP32[539144] | 0) + ((HEAP32[$2 >> 2] | 0) * 112 | 0) | 0, HEAP32[$2 >> 2] | 0) | 0; else HEAP32[$1 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function __sg_alloc_buffer() {
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = __sg_pool_alloc_index(2156476) | 0;
 if (HEAP32[$2 >> 2] | 0) HEAP32[$1 >> 2] = __sg_slot_alloc(2156476, (HEAP32[539143] | 0) + ((HEAP32[$2 >> 2] | 0) * 60 | 0) | 0, HEAP32[$2 >> 2] | 0) | 0; else HEAP32[$1 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $7 = 0;
 __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE10deallocateEv($0);
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 $4 = $1 + 4 | 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$4 >> 2];
 $7 = $1 + 8 | 0;
 HEAP32[$0 + 8 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$7 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 return;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0, dest = 0, stop = 0;
 $2 = $0 + 4 | 0;
 $$0 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 do {
  dest = $3;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $3 = (HEAP32[$2 >> 2] | 0) + 44 | 0;
  HEAP32[$2 >> 2] = $3;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __sg_begin_pass($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 __sg_gl_begin_pass(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _sfons_rgba($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 3 | 0;
 $5 = sp + 2 | 0;
 $6 = sp + 1 | 0;
 $7 = sp;
 HEAP8[$4 >> 0] = $0;
 HEAP8[$5 >> 0] = $1;
 HEAP8[$6 >> 0] = $2;
 HEAP8[$7 >> 0] = $3;
 STACKTOP = sp;
 return HEAPU8[$4 >> 0] | 0 | (HEAPU8[$5 >> 0] | 0) << 8 | (HEAPU8[$6 >> 0] | 0) << 16 | (HEAPU8[$7 >> 0] | 0) << 24 | 0;
}

function __sg_gl_pass_color_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if ((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$3 >> 2] | 0) >= 0 & (HEAP32[$3 >> 2] | 0) < 4) {
  STACKTOP = sp;
  return HEAP32[(HEAP32[$2 >> 2] | 0) + 76 + 4 + (HEAP32[$3 >> 2] << 3) >> 2] | 0;
 } else ___assert_fail(35835, 17628, 6355, 35894);
 return 0;
}

function __sg_gl_blend_op($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 32774;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 32778;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 32779;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4559, 36204);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNSt3__214__split_bufferI8DrBitmapRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) {
  $7 = $4;
  do {
   $6 = $7 + -24 | 0;
   HEAP32[$3 >> 2] = $6;
   __ZN8DrBitmapD2Ev($6);
   $7 = HEAP32[$3 >> 2] | 0;
  } while (($7 | 0) != ($2 | 0));
 }
 $10 = HEAP32[$0 >> 2] | 0;
 if ($10 | 0) __ZdlPv($10);
 return;
}

function __ZN6DrRect6adjustEiiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $7 = 0, $9 = 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $1;
 $7 = $0 + 8 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) - $1 | 0;
 $10 = $0 + 4 | 0;
 HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + $2;
 $13 = $0 + 12 | 0;
 $15 = (HEAP32[$13 >> 2] | 0) - $2 | 0;
 HEAP32[$7 >> 2] = $9 + $3;
 HEAP32[$13 >> 2] = $15 + $4;
 return;
}

function __sg_gl_usage($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 35044;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 35048;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 35040;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4409, 32543);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __sg_gl_index_type($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 0;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 5123;
   break;
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 5125;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4501, 36128);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 HEAP32[$5 + 4 >> 2] = $4;
 HEAP32[HEAP32[$3 >> 2] >> 2] = $5;
 $9 = $0 + 8 | 0;
 HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
 __ZN8TPPLPolyD2Ev($2 + 8 | 0);
 __ZdlPv($2);
 return $4 | 0;
}

function _HMM_Mat4($0) {
 $0 = $0 | 0;
 var $1 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp;
 dest = $1;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $0;
 src = $1;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _getint_654($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) $$0$lcssa = 0; else {
  $$04 = 0;
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0;
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0;
   $12 = $7 + 1 | 0;
   HEAP32[$0 >> 2] = $12;
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11;
    break;
   } else $$04 = $11;
  }
 }
 return $$0$lcssa | 0;
}

function _sg_destroy_pipeline($0) {
 $0 = $0 | 0;
 var $$byval_copy1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14754, 18474);
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 if (!(__sg_uninit_pipeline($$byval_copy1) | 0)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 __sg_dealloc_pipeline($$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZN7DrImageD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 64 | 0);
 __ZNSt3__213__vector_baseINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEENS3_IS7_EEED2Ev($0 + 48 | 0);
 __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($0 + 36 | 0);
 __ZN8DrBitmapD2Ev($0 + 12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}

function _stbi__pnm_isspace($0) {
 $0 = $0 | 0;
 var $1 = 0, $21 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP8[$1 >> 0] = $0;
 if ((HEAP8[$1 >> 0] | 0) == 32) $21 = 1; else if ((HEAP8[$1 >> 0] | 0) == 9) $21 = 1; else if ((HEAP8[$1 >> 0] | 0) == 10) $21 = 1; else if ((HEAP8[$1 >> 0] | 0) == 11) $21 = 1; else if ((HEAP8[$1 >> 0] | 0) == 12) $21 = 1; else $21 = (HEAP8[$1 >> 0] | 0) == 13;
 STACKTOP = sp;
 return $21 & 1 | 0;
}

function _sg_destroy_shader($0) {
 $0 = $0 | 0;
 var $$byval_copy1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14746, 18456);
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 if (!(__sg_uninit_shader($$byval_copy1) | 0)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 __sg_dealloc_shader($$byval_copy1);
 STACKTOP = sp;
 return;
}

function _sg_destroy_buffer($0) {
 $0 = $0 | 0;
 var $$byval_copy1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14730, 18421);
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 if (!(__sg_uninit_buffer($$byval_copy1) | 0)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 __sg_dealloc_buffer($$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZN7meshoptL22getNextTriangleDeadEndERjPKhm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $6 = 0;
 $3 = HEAP32[$0 >> 2] | 0;
 L1 : do if ($3 >>> 0 < $2 >>> 0) {
  $6 = $3;
  while (1) {
   if (!(HEAP8[$1 + $6 >> 0] | 0)) {
    $$0 = $6;
    break L1;
   }
   $6 = $6 + 1 | 0;
   HEAP32[$0 >> 2] = $6;
   if ($6 >>> 0 >= $2 >>> 0) {
    $$0 = -1;
    break;
   }
  }
 } else $$0 = -1; while (0);
 return $$0 | 0;
}

function _sg_destroy_image($0) {
 $0 = $0 | 0;
 var $$byval_copy1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14738, 18439);
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 if (!(__sg_uninit_image($$byval_copy1) | 0)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 __sg_dealloc_image($$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0;
 if (($0 | 0) != ($1 | 0)) {
  $4 = HEAP8[$1 + 11 >> 0] | 0;
  $5 = $4 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcm($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255);
 }
 return;
}

function __sfetch_ring_empty($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) ___assert_fail(38027, 21538, 1283, 39809);
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) {
  STACKTOP = sp;
  return (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0;
 } else ___assert_fail(38027, 21538, 1283, 39809);
 return 0;
}

function _sg_shutdown() {
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 if (HEAP32[539114] | 0) {
  HEAP32[$0 >> 2] = __sg_lookup_context(2156476, HEAP32[539114] | 0) | 0;
  if (HEAP32[$0 >> 2] | 0) {
   __sg_destroy_all_resources(2156476, HEAP32[539114] | 0);
   __sg_destroy_context(HEAP32[$0 >> 2] | 0);
  }
 }
 __sg_discard_backend();
 __sg_discard_pools(2156476);
 HEAP8[2156304] = 0;
 STACKTOP = sp;
 return;
}

function _HMM_LengthVec3($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $1 = sp;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAPF32[$1 >> 2] = +_HMM_SquareRootF(+_HMM_LengthSquaredVec3($$byval_copy));
 STACKTOP = sp;
 return +(+HEAPF32[$1 >> 2]);
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0(($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0), $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function __ZN13TPPLPartition12VertexSorterclEll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0.0, $7 = 0.0;
 $3 = HEAP32[$0 >> 2] | 0;
 $5 = +HEAPF64[$3 + ($1 << 5) + 8 >> 3];
 $7 = +HEAPF64[$3 + ($2 << 5) + 8 >> 3];
 do if ($5 > $7) $$0 = 1; else {
  if ($5 == $7) if (+HEAPF64[$3 + ($1 << 5) >> 3] > +HEAPF64[$3 + ($2 << 5) >> 3]) {
   $$0 = 1;
   break;
  }
  $$0 = 0;
 } while (0);
 return $$0 | 0;
}

function __ZN8TPPLPolyaSERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$arith = 0, $10 = 0, $6 = 0;
 __ZN8TPPLPoly5ClearEv($0);
 HEAP8[$0 + 8 >> 0] = HEAP8[$1 + 8 >> 0] | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 HEAP32[$0 + 4 >> 2] = $6;
 if (($6 | 0) > 0) {
  $$arith = $6 * 24 | 0;
  $10 = __Znam($6 >>> 0 > 178956970 ? -1 : $$arith) | 0;
  HEAP32[$0 >> 2] = $10;
  _memcpy($10 | 0, HEAP32[$1 >> 2] | 0, $$arith | 0) | 0;
 }
 return $0 | 0;
}

function _stbi__bit_reverse($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if ((HEAP32[$3 >> 2] | 0) <= 16) {
  $7 = _stbi__bitreverse16(HEAP32[$2 >> 2] | 0) | 0;
  STACKTOP = sp;
  return $7 >> 16 - (HEAP32[$3 >> 2] | 0) | 0;
 } else ___assert_fail(44810, 43392, 3881, 44821);
 return 0;
}

function __sg_gl_supported_texture_format($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 if ((HEAP32[$2 >> 2] | 0) > 1 & (HEAP32[$2 >> 2] | 0) < 62) {
  STACKTOP = sp;
  return HEAP8[2156636 + ((HEAP32[$2 >> 2] | 0) * 6 | 0) >> 0] & 1 | 0;
 } else ___assert_fail(17788, 17628, 5756, 33224);
 return 0;
}

function _stm_since($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $15 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $2;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 $7 = _stm_now() | 0;
 $8 = getTempRet0() | 0;
 $9 = $2;
 $15 = _stm_diff($7, $8, HEAP32[$9 >> 2] | 0, HEAP32[$9 + 4 >> 2] | 0) | 0;
 setTempRet0(getTempRet0() | 0);
 STACKTOP = sp;
 return $15 | 0;
}

function __sg_gl_cache_clear_buffer_bindings($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP8[$1 >> 0] = $0 & 1;
 if (HEAP8[$1 >> 0] & 1 | (HEAP32[539374] | 0) != 0) {
  _glBindBuffer(34962, 0);
  HEAP32[539374] = 0;
 }
 if (!(HEAP8[$1 >> 0] & 1 | (HEAP32[539375] | 0) != 0)) {
  STACKTOP = sp;
  return;
 }
 _glBindBuffer(34963, 0);
 HEAP32[539375] = 0;
 STACKTOP = sp;
 return;
}

function __sapp_emsc_onpaste($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP8[51180] & 1)) {
  STACKTOP = sp;
  return;
 }
 __sapp_strcpy(HEAP32[$1 >> 2] | 0, HEAP32[12797] | 0, HEAP32[12796] | 0) | 0;
 if (!(__sapp_events_enabled() | 0)) {
  STACKTOP = sp;
  return;
 }
 __sapp_init_event(21);
 __sapp_call_event(50952) | 0;
 STACKTOP = sp;
 return;
}

function _fons__tt_getGlyphKernAdvance($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _stbtt_GetGlyphKernAdvance(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __sg_gl_depth_attachment_format($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 41:
  {
   HEAP32[$1 >> 2] = 33189;
   break;
  }
 case 42:
  {
   HEAP32[$1 >> 2] = 35056;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4854, 33256);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __sapp_emsc_begin_drop($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP8[51192] & 1)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) < 0) HEAP32[$1 >> 2] = 0;
 if ((HEAP32[$1 >> 2] | 0) > (HEAP32[12799] | 0)) HEAP32[$1 >> 2] = HEAP32[12799];
 HEAP32[12801] = HEAP32[$1 >> 2];
 __sapp_clear_drop_buffer();
 STACKTOP = sp;
 return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE10deallocateEPcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $6 = 0;
 if (__ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE17pointer_in_bufferEPc($0, $1) | 0) {
  $5 = $1 + (__ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8align_upEm($2) | 0) | 0;
  $6 = $0 + 4096 | 0;
  if (($5 | 0) == (HEAP32[$6 >> 2] | 0)) HEAP32[$6 >> 2] = $1;
 } else _free($1);
 return;
}

function __ZN13TPPLPartition8IsInsideER9TPPLPointS1_S1_S1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0;
 if (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $1, $4, $2) | 0) $$0 = 0; else if (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $2, $4, $3) | 0) $$0 = 0; else $$0 = (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $3, $4, $1) | 0) ^ 1;
 return $$0 | 0;
}

function _stbi__compute_y_16($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 STACKTOP = sp;
 return ((HEAP32[$3 >> 2] | 0) * 77 | 0) + ((HEAP32[$4 >> 2] | 0) * 150 | 0) + ((HEAP32[$5 >> 2] | 0) * 29 | 0) >> 8 & 65535 | 0;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $7 = 0;
 $4 = $0 + 4 | 0;
 $7 = $2 - $1 | 0;
 if (($7 | 0) > 0) {
  _memcpy(HEAP32[$4 >> 2] | 0, $1 | 0, $7 | 0) | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + ($7 >>> 4 << 4);
 }
 return;
}

function __ZN8TPPLPolyC2ERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$arith = 0, $10 = 0, $6 = 0;
 __ZN8TPPLPolyC2Ev($0);
 HEAP8[$0 + 8 >> 0] = HEAP8[$1 + 8 >> 0] | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 HEAP32[$0 + 4 >> 2] = $6;
 if (($6 | 0) > 0) {
  $$arith = $6 * 24 | 0;
  $10 = __Znam($6 >>> 0 > 178956970 ? -1 : $$arith) | 0;
  HEAP32[$0 >> 2] = $10;
  _memcpy($10 | 0, HEAP32[$1 >> 2] | 0, $$arith | 0) | 0;
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
 return;
}

function _stbi__get_chunk_header($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $1;
 HEAP32[$3 >> 2] = _stbi__get32be(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 + 4 >> 2] = _stbi__get32be(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 STACKTOP = sp;
 return;
}

function _stbi__compute_y($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 STACKTOP = sp;
 return ((HEAP32[$3 >> 2] | 0) * 77 | 0) + ((HEAP32[$4 >> 2] | 0) * 150 | 0) + ((HEAP32[$5 >> 2] | 0) * 29 | 0) >> 8 & 255 | 0;
}

function __ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0.0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAPF64[$2 >> 3] = +Math_atan2(+(+HEAPF64[$1 + 8 >> 3] - +HEAPF64[$0 + 8 >> 3]), +(+HEAPF64[$1 >> 3] - +HEAPF64[$0 >> 3]));
 $13 = +__ZN2Dr16RadiansToDegreesIdEET_RKS1_($2) + 90.0;
 STACKTOP = sp;
 return +($13 < 0.0 ? $13 + 360.0 : $13);
}

function _stbi__blinn_8x8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 5 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP8[$2 >> 0] = $0;
 HEAP8[$3 >> 0] = $1;
 HEAP32[$4 >> 2] = (Math_imul(HEAPU8[$2 >> 0] | 0, HEAPU8[$3 >> 0] | 0) | 0) + 128;
 STACKTOP = sp;
 return ((HEAP32[$4 >> 2] | 0) + ((HEAP32[$4 >> 2] | 0) >>> 8) | 0) >>> 8 & 255 | 0;
}

function __sg_gl_texture_target($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 3553;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 34067;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4400, 33287);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __sg_gl_buffer_target($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   HEAP32[$1 >> 2] = 34962;
   break;
  }
 case 2:
  {
   HEAP32[$1 >> 2] = 34963;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4388, 32522);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __sg_create_pipeline($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = __sg_gl_create_pipeline(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __sg_gl_shader_stage($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 0:
  {
   HEAP32[$1 >> 2] = 35633;
   break;
  }
 case 1:
  {
   HEAP32[$1 >> 2] = 35632;
   break;
  }
 default:
  ___assert_fail(43639, 17628, 4417, 34043);
 }
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __sfons_render_resize($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = __sfons_render_create(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE6resizeEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = ((HEAP32[$2 >> 2] | 0) - $4 | 0) / 44 | 0;
 $8 = $4;
 if ($6 >>> 0 < $1 >>> 0) __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE8__appendEm($0, $1 - $6 | 0); else if ($6 >>> 0 > $1 >>> 0) HEAP32[$2 >> 2] = $8 + ($1 * 44 | 0);
 return;
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $5 = 0, $7 = 0;
 $2 = __Znwm(20) | 0;
 HEAP32[$2 >> 2] = 0;
 __ZN8TPPLPolyC2ERKS_($2 + 8 | 0, $1);
 HEAP32[$2 + 4 >> 2] = $0;
 $5 = HEAP32[$0 >> 2] | 0;
 HEAP32[$2 >> 2] = $5;
 HEAP32[$5 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $2;
 $7 = $0 + 8 | 0;
 HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 return;
}

function _stbtt_InitFont($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _stbtt_InitFont_internal(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _sg_uninit_image($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp;
 $1 = sp + 4 | 0;
 if (HEAP8[2156304] & 1) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  HEAP8[$1 >> 0] = (__sg_uninit_image($$byval_copy) | 0) & 1;
  STACKTOP = sp;
  return HEAP8[$1 >> 0] & 1 | 0;
 } else ___assert_fail(17761, 17628, 14533, 17947);
 return 0;
}

function __ZNK6DrVec3rmERKS_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0.0, $14 = 0.0, $16 = 0.0, $4 = 0.0, $6 = 0.0, $9 = 0.0;
 $4 = +HEAPF32[$1 + 4 >> 2];
 $6 = +HEAPF32[$2 + 8 >> 2];
 $9 = +HEAPF32[$1 + 8 >> 2];
 $11 = +HEAPF32[$2 + 4 >> 2];
 $14 = +HEAPF32[$2 >> 2];
 $16 = +HEAPF32[$1 >> 2];
 __ZN6DrVec3C2Efff($0, $4 * $6 - $9 * $11, $9 * $14 - $6 * $16, $11 * $16 - $4 * $14);
 return;
}

function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0, $9 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 if (!$1) $8 = 0; else $8 = __Znwm($1) | 0;
 HEAP32[$0 >> 2] = $8;
 $9 = $8 + $2 | 0;
 HEAP32[$0 + 8 >> 2] = $9;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$4 >> 2] = $8 + $1;
 return;
}

function __sg_gl_vertexformat_normalized($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 switch (HEAP32[$2 >> 2] | 0) {
 case 15:
 case 14:
 case 13:
 case 11:
 case 10:
 case 8:
 case 6:
  {
   HEAP8[$1 >> 0] = 1;
   break;
  }
 default:
  HEAP8[$1 >> 0] = 0;
 }
 STACKTOP = sp;
 return HEAP8[$1 >> 0] | 0;
}

function __sg_gl_cache_store_texture_binding($0) {
 $0 = $0 | 0;
 var $1 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[$1 >> 2] | 0) < 12) {
  $5 = 2157516 + (HEAP32[$1 >> 2] << 3) | 0;
  HEAP32[539403] = HEAP32[$5 >> 2];
  HEAP32[539404] = HEAP32[$5 + 4 >> 2];
  STACKTOP = sp;
  return;
 } else ___assert_fail(33332, 17628, 5516, 33371);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0;
 if (($0 | 0) != ($1 | 0)) {
  $4 = HEAP8[$1 + 11 >> 0] | 0;
  $5 = $4 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255) | 0;
 }
 return $0 | 0;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = _strlen($1) | 0;
 $4 = __Znwm($2 + 13 | 0) | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 + 8 >> 2] = 0;
 $7 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4) | 0;
 _memcpy($7 | 0, $1 | 0, $2 + 1 | 0) | 0;
 HEAP32[$0 >> 2] = $7;
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $7 = 0;
 $4 = $0 + 4 | 0;
 $7 = $2 - $1 | 0;
 if (($7 | 0) > 0) {
  _memcpy(HEAP32[$4 >> 2] | 0, $1 | 0, $7 | 0) | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $7;
 }
 return;
}

function __ZN17meshopt_Allocator8allocateIjEEPT_m($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 96 | 0;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 < 24) {
  $8 = __Znwm($1 >>> 0 > 1073741823 ? -1 : $1 << 2) | 0;
  $9 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $9 + 1;
  HEAP32[$0 + ($9 << 2) >> 2] = $8;
  return $8 | 0;
 } else ___assert_fail(42374, 42417, 698, 42498);
 return 0;
}

function __ZN17meshopt_Allocator8allocateIfEEPT_m($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 96 | 0;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 < 24) {
  $8 = __Znwm($1 >>> 0 > 1073741823 ? -1 : $1 << 2) | 0;
  $9 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $9 + 1;
  HEAP32[$0 + ($9 << 2) >> 2] = $8;
  return $8 | 0;
 } else ___assert_fail(42374, 42417, 698, 42498);
 return 0;
}

function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) $$0 = 0; else {
  $3 = Math_imul($1, $0) | 0;
  if (($1 | $0) >>> 0 > 65535) $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; else $$0 = $3;
 }
 $8 = _malloc($$0) | 0;
 if (!$8) return $8 | 0;
 if (!(HEAP32[$8 + -4 >> 2] & 3)) return $8 | 0;
 _memset($8 | 0, 0, $$0 | 0) | 0;
 return $8 | 0;
}

function __ZN8DrBitmapC2EPKhRKibii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 HEAP32[$0 >> 2] = 4;
 $6 = $0 + 4 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAP32[$6 + 16 >> 2] = 0;
 __ZN8DrBitmap14loadFromMemoryEPKhRKibii($0, $1, $2, $3, $4, $5);
 return;
}

function __sg_apply_uniforms($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 __sg_gl_apply_uniforms(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $5 = 0;
 $2 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8align_upEm($1) | 0;
 $4 = $0 + 4096 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($0 + 4096 - $5 | 0) >>> 0 < $2 >>> 0) $$0 = _malloc($2) | 0; else {
  HEAP32[$4 >> 2] = $5 + $2;
  $$0 = $5;
 }
 return $$0 | 0;
}

function __ZNK8DrBitmap8getPixelEii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $6 = 0, $9 = 0;
 $6 = Math_imul(HEAP32[$1 + 4 >> 2] | 0, $3) | 0;
 $9 = Math_imul($6 + $2 | 0, HEAP32[$1 >> 2] | 0) | 0;
 $12 = HEAP32[$1 + 12 >> 2] | 0;
 __ZN7DrColorC2ERKhS1_S1_S1_($0, $12 + ($9 + 2) | 0, $12 + ($9 + 1) | 0, $12 + $9 | 0, $12 + ($9 + 3) | 0);
 return;
}

function __ZN17meshopt_Allocator8allocateItEEPT_m($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 96 | 0;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 < 24) {
  $8 = __Znwm(($1 | 0) < 0 ? -1 : $1 << 1) | 0;
  $9 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $9 + 1;
  HEAP32[$0 + ($9 << 2) >> 2] = $8;
  return $8 | 0;
 } else ___assert_fail(42374, 42417, 698, 42498);
 return 0;
}

function _sgl_make_pipeline($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (-1412584499 == (HEAP32[539414] | 0)) {
  HEAP32[$1 >> 2] = __sgl_make_pipeline(HEAP32[$2 >> 2] | 0) | 0;
  STACKTOP = sp;
  return HEAP32[$1 >> 2] | 0;
 } else ___assert_fail(19694, 19399, 2801, 19740);
 return 0;
}

function __sapp_discard_state() {
 do if (HEAP8[51180] & 1) if (HEAP32[12797] | 0) {
  _free(HEAP32[12797] | 0);
  break;
 } else ___assert_fail(24900, 12505, 2590, 24923); while (0);
 if (!(HEAP8[51192] & 1)) {
  _memset(50800, 0, 3240) | 0;
  return;
 }
 if (!(HEAP32[12803] | 0)) ___assert_fail(17149, 12505, 2594, 24923);
 _free(HEAP32[12803] | 0);
 _memset(50800, 0, 3240) | 0;
 return;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = (HEAP32[$2 >> 2] | 0) - $4 >> 2;
 $8 = $4;
 if ($6 >>> 0 < $1 >>> 0) __ZNSt3__26vectorImNS_9allocatorImEEE8__appendEm($0, $1 - $6 | 0); else if ($6 >>> 0 > $1 >>> 0) HEAP32[$2 >> 2] = $8 + ($1 << 2);
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = (HEAP32[$2 >> 2] | 0) - $4 >> 2;
 $8 = $4;
 if ($6 >>> 0 < $1 >>> 0) __ZNSt3__26vectorIjNS_9allocatorIjEEE8__appendEm($0, $1 - $6 | 0); else if ($6 >>> 0 > $1 >>> 0) HEAP32[$2 >> 2] = $8 + ($1 << 2);
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 if ((__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0) | 0) >>> 0 < $1 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); else {
  $4 = __Znwm($1) | 0;
  HEAP32[$0 + 4 >> 2] = $4;
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $4 + $1;
  return;
 }
}

function _stbtt__sort_edges($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 _stbtt__sort_edges_quicksort(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 _stbtt__sort_edges_ins_sort(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_pixelformat_all($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP8[HEAP32[$1 >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 1 >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 3 >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 2 >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 4 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZSt9terminatev() {
 var $0 = 0, $2 = 0, $5 = 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 | 0) {
   $5 = $2 + 48 | 0;
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$2 + 12 >> 2] | 0);
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) | 0) {
  $3 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1811(HEAP32[$0 >> 2] | 0) | 0;
  $4 = $3 + 8 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + -1;
  if (($5 + -1 | 0) < 0) __ZdlPv($3);
 }
 return;
}

function _stbi__get16le($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = (_stbi__get8(HEAP32[$1 >> 2] | 0) | 0) & 255;
 $6 = HEAP32[$2 >> 2] | 0;
 $11 = $6 + (((_stbi__get8(HEAP32[$1 >> 2] | 0) | 0) & 255) << 8) | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = (HEAP32[$2 >> 2] | 0) - $4 | 0;
 $7 = $4;
 if ($5 >>> 0 < $1 >>> 0) __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEm($0, $1 - $5 | 0); else if ($5 >>> 0 > $1 >>> 0) HEAP32[$2 >> 2] = $7 + $1;
 return;
}

function __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9pop_frontEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $5 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $2 + 4 | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 HEAP32[$5 + 4 >> 2] = HEAP32[$3 >> 2];
 HEAP32[HEAP32[$3 >> 2] >> 2] = $5;
 $9 = $0 + 8 | 0;
 HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
 __ZdlPv($2);
 return;
}

function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $spec$select = 0;
 $5 = $0 + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0;
 $spec$select = $7 >>> 0 > $2 >>> 0 ? $2 : $7;
 _memcpy($6 | 0, $1 | 0, $spec$select | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $spec$select;
 return $2 | 0;
}

function _stbi__get16be($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $2 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = (_stbi__get8(HEAP32[$1 >> 2] | 0) | 0) & 255;
 $7 = HEAP32[$2 >> 2] << 8;
 $11 = $7 + ((_stbi__get8(HEAP32[$1 >> 2] | 0) | 0) & 255) | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function _resample_row_1($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 12 | 0;
 HEAP32[sp + 16 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[sp + 8 >> 2] = $2;
 HEAP32[sp + 4 >> 2] = $3;
 HEAP32[sp >> 2] = $4;
 STACKTOP = sp;
 return HEAP32[$6 >> 2] | 0;
}

function __sg_draw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 __sg_gl_draw(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sapp_emsc_update_keyboard_state() {
 if (HEAP8[51217] & 1) {
  if (!(HEAP8[51216] & 1)) {
   HEAP8[51216] = 1;
   _sapp_js_create_textfield();
  }
  HEAP8[50910] = 1;
  HEAP8[51217] = 0;
  _sapp_js_focus_textfield();
 }
 if (!(HEAP8[51218] & 1)) return;
 if (!(HEAP8[51216] & 1)) return;
 HEAP8[50910] = 0;
 HEAP8[51218] = 0;
 _sapp_js_unfocus_textfield();
 return;
}

function __Znwm($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $4 = 0, $spec$store$select = 0;
 $spec$store$select = ($0 | 0) == 0 ? 1 : $0;
 while (1) {
  $2 = _malloc($spec$store$select) | 0;
  if ($2 | 0) {
   $$lcssa = $2;
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0;
  if (!$4) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 7]();
 }
 return $$lcssa | 0;
}

function __ZNSt3__210shared_ptrI7DrImageED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 if ($2 | 0) {
  $4 = $2 + 4 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + -1;
  if (!$5) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] & 31]($2);
   __ZNSt3__219__shared_weak_count14__release_weakEv($2);
  }
 }
 return;
}

function __ZNSt3__210shared_ptrI6DrMeshED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 if ($2 | 0) {
  $4 = $2 + 4 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + -1;
  if (!$5) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] & 31]($2);
   __ZNSt3__219__shared_weak_count14__release_weakEv($2);
  }
 }
 return;
}

function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 $8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 15]($0, $1, $3) | 0;
 if ($8) HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return $8 & 1 | 0;
}

function _stbtt__hheap_free($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function _stbi__get32le($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = _stbi__get16le(HEAP32[$1 >> 2] | 0) | 0;
 $5 = HEAP32[$2 >> 2] | 0;
 $9 = $5 + ((_stbi__get16le(HEAP32[$1 >> 2] | 0) | 0) << 16) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt3__219__shared_weak_count14__release_weakEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $7 = 0;
 $1 = $0 + 8 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 31]($0); else {
  $7 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = $7 + -1;
  if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 31]($0);
 }
 return;
}

function _main($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 104 | 0;
 $4 = sp + 100 | 0;
 $5 = sp;
 HEAP32[sp + 108 >> 2] = 0;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 _sokol_main($5, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0);
 __sapp_emsc_run($5);
 STACKTOP = sp;
 return 0;
}

function __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) HEAP32[$3 >> 2] = $4 + (~((($4 + -44 - $2 | 0) >>> 0) / 44 | 0) * 44 | 0);
 $11 = HEAP32[$0 >> 2] | 0;
 if ($11 | 0) __ZdlPv($11);
 return;
}

function __ZN17meshopt_Allocator8allocateIhEEPT_m($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $5 = 0, $6 = 0;
 $2 = $0 + 96 | 0;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 < 24) {
  $5 = __Znwm($1) | 0;
  $6 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $6 + 1;
  HEAP32[$0 + ($6 << 2) >> 2] = $5;
  return $5 | 0;
 } else ___assert_fail(42374, 42417, 698, 42498);
 return 0;
}

function __sg_gl_init_pixelformats($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP8[$1 >> 0] = $0 & 1;
 __sg_pixelformat_sf(2156648);
 __sg_pixelformat_all(2156774);
 if (HEAP8[$1 >> 0] & 1) __sg_pixelformat_all(2156798);
 __sg_pixelformat_srmd(2156882);
 __sg_pixelformat_srmd(2156888);
 STACKTOP = sp;
 return;
}

function __ZNK7DrColorneERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $20 = 0;
 if ((HEAP8[$0 >> 0] | 0) == (HEAP8[$1 >> 0] | 0)) if ((HEAP8[$0 + 1 >> 0] | 0) == (HEAP8[$1 + 1 >> 0] | 0)) if ((HEAP8[$0 + 2 >> 0] | 0) == (HEAP8[$1 + 2 >> 0] | 0)) $20 = (HEAP8[$0 + 3 >> 0] | 0) != (HEAP8[$1 + 3 >> 0] | 0); else $20 = 1; else $20 = 1; else $20 = 1;
 return $20 | 0;
}

function __ZNK7DrColoreqERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $20 = 0;
 if ((HEAP8[$0 >> 0] | 0) == (HEAP8[$1 >> 0] | 0)) if ((HEAP8[$0 + 1 >> 0] | 0) == (HEAP8[$1 + 1 >> 0] | 0)) if ((HEAP8[$0 + 2 >> 0] | 0) == (HEAP8[$1 + 2 >> 0] | 0)) $20 = (HEAP8[$0 + 3 >> 0] | 0) == (HEAP8[$1 + 3 >> 0] | 0); else $20 = 0; else $20 = 0; else $20 = 0;
 return $20 | 0;
}

function __ZN2Dr4SwapI7DrColorEEvRT_S3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = HEAPU8[$0 >> 0] | HEAPU8[$0 + 1 >> 0] << 8 | HEAPU8[$0 + 2 >> 0] << 16 | HEAPU8[$0 + 3 >> 0] << 24;
 __ZN7DrColoraSERKS_($0, $1) | 0;
 __ZN7DrColoraSERKS_($1, $2) | 0;
 STACKTOP = sp;
 return;
}

function _ttULONG($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return ((HEAPU8[HEAP32[$1 >> 2] >> 0] | 0) << 24) + ((HEAPU8[(HEAP32[$1 >> 2] | 0) + 1 >> 0] | 0) << 16) + ((HEAPU8[(HEAP32[$1 >> 2] | 0) + 2 >> 0] | 0) << 8) + (HEAPU8[(HEAP32[$1 >> 2] | 0) + 3 >> 0] | 0) | 0;
}

function _stbi__get32be($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = _stbi__get16be(HEAP32[$1 >> 2] | 0) | 0;
 $6 = HEAP32[$2 >> 2] << 16;
 $9 = $6 + (_stbi__get16be(HEAP32[$1 >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __sg_reset_slot($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  $4 = HEAP32[$1 >> 2] | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(26551, 17628, 12822, 26556);
}

function __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $9 = 0;
 $2 = HEAP8[$0 + 11 >> 0] | 0;
 if ($2 << 24 >> 24 < 0) $16 = HEAP32[$0 + 4 >> 2] | 0; else $16 = $2 & 255;
 $9 = HEAP8[$0 + 12 + 11 >> 0] | 0;
 if ($9 << 24 >> 24 < 0) $15 = HEAP32[$0 + 16 >> 2] | 0; else $15 = $9 & 255;
 return $15 + $16 | 0;
}

function _fons__deleteAtlas($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) _free(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0);
 _free(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0.0, $7 = 0.0;
 $7 = +HEAPF64[$1 + 8 >> 3];
 $10 = +HEAPF64[$1 >> 3];
 return (+HEAPF64[$3 + 8 >> 3] - $7) * (+HEAPF64[$2 >> 3] - $10) - (+HEAPF64[$3 >> 3] - $10) * (+HEAPF64[$2 + 8 >> 3] - $7) > 0.0 | 0;
}

function __ZN13TPPLPartition5BelowER9TPPLPointS1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0.0, $6 = 0.0;
 $4 = +HEAPF64[$1 + 8 >> 3];
 $6 = +HEAPF64[$2 + 8 >> 3];
 do if ($4 < $6) $$0 = 1; else {
  if ($4 == $6) if (+HEAPF64[$1 >> 3] < +HEAPF64[$2 >> 3]) {
   $$0 = 1;
   break;
  }
  $$0 = 0;
 } while (0);
 return $$0 | 0;
}

function _sgl_destroy_pipeline($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp;
 if (-1412584499 == (HEAP32[539414] | 0)) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  __sgl_destroy_pipeline($$byval_copy);
  STACKTOP = sp;
  return;
 } else ___assert_fail(19694, 19399, 2806, 19758);
}

function __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) HEAP32[$3 >> 2] = $4 + (~(($4 + -16 - $2 | 0) >>> 4) << 4);
 $11 = HEAP32[$0 >> 2] | 0;
 if ($11 | 0) __ZdlPv($11);
 return;
}

function _sgl_push_pipeline() {
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2823, 19863);
 if ((HEAP32[539494] | 0) < 63) {
  HEAP32[539494] = (HEAP32[539494] | 0) + 1;
  HEAP32[2157980 + (HEAP32[539494] << 2) >> 2] = HEAP32[2157980 + ((HEAP32[539494] | 0) - 1 << 2) >> 2];
  return;
 } else {
  HEAP32[539433] = 4;
  return;
 }
}

function __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) HEAP32[$3 >> 2] = $4 + (~(($4 + -8 - $2 | 0) >>> 3) << 3);
 $11 = HEAP32[$0 >> 2] | 0;
 if ($11 | 0) __ZdlPv($11);
 return;
}

function __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) HEAP32[$3 >> 2] = $4 + (~(($4 + -16 - $2 | 0) >>> 4) << 4);
 $11 = HEAP32[$0 >> 2] | 0;
 if ($11 | 0) __ZdlPv($11);
 return;
}

function __ZNK10Delaunator8hash_keyEdd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 var $11 = 0, $15 = 0, $9 = 0.0;
 $9 = +__Z12pseudo_angledd($1 - +HEAPF64[$0 + 80 >> 3], $2 - +HEAPF64[$0 + 88 >> 3]);
 $11 = HEAP32[$0 + 96 >> 2] | 0;
 $15 = _llround(+Math_floor(+($9 * +($11 >>> 0)))) | 0;
 getTempRet0() | 0;
 return __Z8fast_modmm($15, $11) | 0;
}

function __sgl_slot_index($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2] & 65535;
 if (HEAP32[$2 >> 2] | 0) {
  STACKTOP = sp;
  return HEAP32[$2 >> 2] | 0;
 } else ___assert_fail(26688, 19399, 2189, 37877);
 return 0;
}

function __sg_slot_index($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2] & 65535;
 if (HEAP32[$2 >> 2] | 0) {
  STACKTOP = sp;
  return HEAP32[$2 >> 2] | 0;
 } else ___assert_fail(26688, 17628, 12961, 26706);
 return 0;
}

function __ZL18emsc_load_callbackPK25sapp_html5_fetch_response($0) {
 $0 = $0 | 0;
 do if (!(HEAP8[$0 >> 0] | 0)) if ((HEAP32[$0 + 4 >> 2] | 0) == 1) {
  HEAP32[275731] = 3;
  break;
 } else {
  HEAP32[275731] = 2;
  break;
 } else {
  HEAP32[275731] = 1;
  __ZL10load_imagePhi(HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0);
 } while (0);
 return;
}

function _stbtt__buf_skip($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 _stbtt__buf_seek(HEAP32[$2 >> 2] | 0, (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function _sg_alloc_image() {
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 if (HEAP8[2156304] & 1) {
  HEAP32[$1 >> 2] = __sg_alloc_image() | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  STACKTOP = sp;
  return HEAP32[$0 >> 2] | 0;
 } else ___assert_fail(17761, 17628, 14433, 17918);
 return 0;
}

function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 8 | 0;
 $$0 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 do {
  HEAP8[$3 >> 0] = 0;
  $3 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
  HEAP32[$2 >> 2] = $3;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEmPKcm($0, $1, $2, __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0, $1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0 + 12 | 0, $1 + 12 | 0);
 return;
}

function __ZNSt3__214__split_bufferImRNS_9allocatorImEEED2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) HEAP32[$3 >> 2] = $4 + (~(($4 + -4 - $2 | 0) >>> 2) << 2);
 $11 = HEAP32[$0 >> 2] | 0;
 if ($11 | 0) __ZdlPv($11);
 return;
}

function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) HEAP32[$3 >> 2] = $4 + (~(($4 + -4 - $2 | 0) >>> 2) << 2);
 $11 = HEAP32[$0 >> 2] | 0;
 if ($11 | 0) __ZdlPv($11);
 return;
}

function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) != ($2 | 0)) HEAP32[$3 >> 2] = $4 + (~(($4 + -8 - $2 | 0) >>> 3) << 3);
 $11 = HEAP32[$0 >> 2] | 0;
 if ($11 | 0) __ZdlPv($11);
 return;
}

function __ZN6DrVec39normalizeEv($0) {
 $0 = $0 | 0;
 var $2 = 0.0, $3 = 0.0, $6 = 0, $9 = 0;
 $2 = +Math_sqrt(+(+__ZNK6DrVec311normSquaredEv($0)));
 $3 = 1.0 / $2;
 HEAPF32[$0 >> 2] = +HEAPF32[$0 >> 2] * $3;
 $6 = $0 + 4 | 0;
 HEAPF32[$6 >> 2] = $3 * +HEAPF32[$6 >> 2];
 $9 = $0 + 8 | 0;
 HEAPF32[$9 >> 2] = $3 * +HEAPF32[$9 >> 2];
 return +$2;
}

function __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0.0, $7 = 0.0;
 $7 = +HEAPF64[$1 + 8 >> 3];
 $10 = +HEAPF64[$1 >> 3];
 return (+HEAPF64[$3 + 8 >> 3] - $7) * (+HEAPF64[$2 >> 3] - $10) - (+HEAPF64[$3 >> 3] - $10) * (+HEAPF64[$2 + 8 >> 3] - $7) > 0.0 | 0;
}

function __sapp_emsc_pointerlockchange_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 4 | 0;
 HEAP32[sp + 8 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[sp >> 2] = $2;
 HEAP8[51177] = (HEAP32[HEAP32[$4 >> 2] >> 2] | 0) != 0 & 1;
 STACKTOP = sp;
 return 1;
}

function __ZN7meshoptL11vertexScoreEPKNS_16VertexScoreTableEij($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$off = 0;
 $$off = $1 + 1 | 0;
 if ($$off >>> 0 < 17) return +(+HEAPF32[$0 + ($$off << 2) >> 2] + +HEAPF32[$0 + 68 + (($2 >>> 0 < 8 ? $2 : 8) << 2) >> 2]); else ___assert_fail(42871, 42633, 146, 42931);
 return +(0.0);
}

function __sg_pixelformat_srmd($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP8[HEAP32[$1 >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 2 >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 4 >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 5 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __sg_pixelformat_sfrm($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP8[HEAP32[$1 >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 1 >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 2 >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 4 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __sg_pixelformat_sbrm($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP8[HEAP32[$1 >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 3 >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 2 >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 4 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __sg_gl_cache_active_texture($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[539408] | 0) == (HEAP32[$1 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[539408] = HEAP32[$1 >> 2];
 _glActiveTexture(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK7meshopt12VertexHasher5equalEjj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $5 = 0, $7 = 0, $9 = 0;
 $3 = HEAP32[$0 >> 2] | 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 $7 = $3 + (Math_imul($5, $1) | 0) | 0;
 $9 = $3 + (Math_imul($5, $2) | 0) | 0;
 return (_memcmp($7, $9, HEAP32[$0 + 4 >> 2] | 0) | 0) == 0 | 0;
}

function _stm_sec($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $2;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 $7 = $2;
 STACKTOP = sp;
 return +((+((HEAP32[$7 >> 2] | 0) >>> 0) + 4294967296.0 * +((HEAP32[$7 + 4 >> 2] | 0) >>> 0)) / 1.0e9);
}

function _stbi__rewind($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 168 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 176 >> 2];
 HEAP32[(HEAP32[$1 >> 2] | 0) + 172 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 180 >> 2];
 STACKTOP = sp;
 return;
}

function __sg_gl_cache_store_buffer_binding($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[$1 >> 2] | 0) == 34962) {
  HEAP32[539376] = HEAP32[539374];
  STACKTOP = sp;
  return;
 } else {
  HEAP32[539377] = HEAP32[539375];
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 4 | 0;
 $$0 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 do {
  HEAP8[$3 >> 0] = 0;
  $3 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
  HEAP32[$2 >> 2] = $3;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __ZL15HMM_Perspectiveffff($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 __ZL8HMM_Mat4v($0);
 HEAPF32[$0 >> 2] = 2.027799367904663 / $1;
 HEAPF32[$0 + 20 >> 2] = 2.027799367904663;
 HEAPF32[$0 + 44 >> 2] = -1.0;
 HEAPF32[$0 + 40 >> 2] = -1.0050125122070312;
 HEAPF32[$0 + 56 >> 2] = -100.25062561035156;
 HEAPF32[$0 + 60 >> 2] = 0.0;
 return;
}

function _fonsSetSpacing($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAPF32[$3 >> 2] = $1;
 $4 = +HEAPF32[$3 >> 2];
 HEAPF32[(_fons__getState(HEAP32[$2 >> 2] | 0) | 0) + 20 >> 2] = $4;
 STACKTOP = sp;
 return;
}

function __sapp_frame() {
 var $10 = 0, $2 = 0, $8 = 0, $9 = 0;
 if (HEAP8[50903] & 1) {
  HEAP8[50903] = 0;
  __sapp_call_init();
 }
 __sapp_call_frame();
 $2 = 50944;
 $8 = _i64Add(HEAP32[$2 >> 2] | 0, HEAP32[$2 + 4 >> 2] | 0, 1, 0) | 0;
 $9 = getTempRet0() | 0;
 $10 = 50944;
 HEAP32[$10 >> 2] = $8;
 HEAP32[$10 + 4 >> 2] = $9;
 return;
}

function _fons__tt_getPixelHeightScale($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $6 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAPF32[$3 >> 2] = $1;
 $6 = +_stbtt_ScaleForPixelHeight(HEAP32[$2 >> 2] | 0, +HEAPF32[$3 >> 2]);
 STACKTOP = sp;
 return +$6;
}

function _fonsSetColor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[(_fons__getState(HEAP32[$2 >> 2] | 0) | 0) + 12 >> 2] = $4;
 STACKTOP = sp;
 return;
}

function _HMM_DotVec3($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAPF32[$2 >> 2] = +HEAPF32[$0 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$0 + 4 >> 2] * +HEAPF32[$1 + 4 >> 2] + +HEAPF32[$0 + 8 >> 2] * +HEAPF32[$1 + 8 >> 2];
 STACKTOP = sp;
 return +(+HEAPF32[$2 >> 2]);
}

function _fonsSetAlign($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[(_fons__getState(HEAP32[$2 >> 2] | 0) | 0) + 4 >> 2] = $4;
 STACKTOP = sp;
 return;
}

function __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0, $5 = 0, $7 = 0;
 $5 = HEAP32[$0 >> 2] | 0;
 $7 = (HEAP32[$0 + 4 >> 2] | 0) - $5 >> 4;
 if (($1 | 0) < 0) $$sink = $7 + $1 | 0; else $$sink = $1 - (($7 | 0) > ($1 | 0) ? 0 : $7) | 0;
 return $5 + ($$sink << 4) | 0;
}

function _fonsSetBlur($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAPF32[$3 >> 2] = $1;
 $4 = +HEAPF32[$3 >> 2];
 HEAPF32[(_fons__getState(HEAP32[$2 >> 2] | 0) | 0) + 16 >> 2] = $4;
 STACKTOP = sp;
 return;
}

function __sg_pass_color_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = __sg_gl_pass_color_image(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __sfetch_item_discard($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) if (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) {
  _memset(HEAP32[$1 >> 2] | 0, 0, 1232) | 0;
  STACKTOP = sp;
  return;
 }
 ___assert_fail(39320, 21538, 1352, 39351);
}

function __saudio_ring_full($0) {
 $0 = $0 | 0;
 var $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $6 = __saudio_ring_idx(HEAP32[$1 >> 2] | 0, (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 1 | 0) | 0;
 STACKTOP = sp;
 return ($6 | 0) == (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0;
}

function _fons__tt_getGlyphIndex($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = _stbtt_FindGlyphIndex(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _fonsSetSize($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAPF32[$3 >> 2] = $1;
 $4 = +HEAPF32[$3 >> 2];
 HEAPF32[(_fons__getState(HEAP32[$2 >> 2] | 0) | 0) + 8 >> 2] = $4;
 STACKTOP = sp;
 return;
}

function __sg_gl_setup_backend($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP8[2157008] = 1;
 HEAP8[2157009] = HEAP8[(HEAP32[$1 >> 2] | 0) + 40 + 12 >> 0] & 1;
 do {} while ((_glGetError() | 0) != 0);
 __sg_gl_init_caps_gles2();
 STACKTOP = sp;
 return;
}

function __sfetch_ring_wrap($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return ((HEAP32[$3 >> 2] | 0) >>> 0) % ((HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0 | 0;
}

function _stbi__psd_test($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = (_stbi__get32be(HEAP32[$1 >> 2] | 0) | 0) == 943870035 & 1;
 _stbi__rewind(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _fonsSetFont($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[(_fons__getState(HEAP32[$2 >> 2] | 0) | 0) >> 2] = $4;
 STACKTOP = sp;
 return;
}

function __sg_is_compressed_pixel_format($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if (((HEAP32[$2 >> 2] | 0) + -43 | 0) >>> 0 < 19) HEAP8[$1 >> 0] = 1; else HEAP8[$1 >> 0] = 0;
 STACKTOP = sp;
 return HEAP8[$1 >> 0] & 1 | 0;
}

function __sg_create_shader($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = __sg_gl_create_shader(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __sg_create_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = __sg_gl_create_buffer(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _sg_push_debug_group($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 15084, 19355);
 if (HEAP32[$1 >> 2] | 0) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(19375, 17628, 15085, 19355);
}

function _fons__mini($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return ((HEAP32[$2 >> 2] | 0) < (HEAP32[$3 >> 2] | 0) ? HEAP32[$2 >> 2] | 0 : HEAP32[$3 >> 2] | 0) | 0;
}

function _fons__maxi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return ((HEAP32[$2 >> 2] | 0) > (HEAP32[$3 >> 2] | 0) ? HEAP32[$2 >> 2] | 0 : HEAP32[$3 >> 2] | 0) | 0;
}

function __sg_create_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = __sg_gl_create_image(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0;
  if ((HEAP32[$7 >> 2] | 0) != 1) HEAP32[$7 >> 2] = $3;
 }
 return;
}

function _sgl_texture($0) {
 $0 = $0 | 0;
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2907, 19965);
 if (HEAP8[2157736] & 1) ___assert_fail(19911, 19399, 2908, 19965);
 if (HEAP32[$0 >> 2] | 0) {
  HEAP32[539439] = HEAP32[$0 >> 2];
  return;
 } else {
  HEAP32[539439] = HEAP32[539442];
  return;
 }
}

function __sg_gl_activate_context($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP8[2157008] & 1) {
  HEAP32[539255] = HEAP32[$1 >> 2];
  __sg_gl_reset_state_cache();
  STACKTOP = sp;
  return;
 } else ___assert_fail(26040, 17628, 5672, 26502);
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEEC2EmRKS8_RKS9_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$1 >> 2];
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcm($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}

function _stbi__png_test($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = _stbi__check_png_header(HEAP32[$1 >> 2] | 0) | 0;
 _stbi__rewind(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZN2Dr5ClampIhEET_RKS1_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0;
 $3 = HEAP8[$0 >> 0] | 0;
 $4 = HEAP8[$1 >> 0] | 0;
 if (($3 & 255) < ($4 & 255)) $$0 = $4; else {
  $6 = HEAP8[$2 >> 0] | 0;
  $$0 = ($3 & 255) > ($6 & 255) ? $6 : $3;
 }
 return $$0 | 0;
}

function _sgl_load_pipeline($0) {
 $0 = $0 | 0;
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2811, 19779);
 if ((HEAP32[539494] | 0) >= 0 & (HEAP32[539494] | 0) < 64) {
  HEAP32[2157980 + (HEAP32[539494] << 2) >> 2] = HEAP32[$0 >> 2];
  return;
 } else ___assert_fail(19797, 19399, 2812, 19779);
}

function __sg_roundup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return (HEAP32[$2 >> 2] | 0) + ((HEAP32[$3 >> 2] | 0) - 1) & ~((HEAP32[$3 >> 2] | 0) - 1) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcm($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0);
 return;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0;
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 if ($1 | 0) {
  __ZNSt3__26vectorIjNS_9allocatorIjEEE8allocateEm($0, $1);
  __ZNSt3__26vectorIjNS_9allocatorIjEEE18__construct_at_endEm($0, $1);
 }
 return;
}

function _stbi__setup_jpeg($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18444 >> 2] = 2;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18448 >> 2] = 4;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 18452 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function _stbi__pic_test($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = _stbi__pic_test_core(HEAP32[$1 >> 2] | 0) | 0;
 _stbi__rewind(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __sfetch_make_handle($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function _stbi__gif_test($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = _stbi__gif_test_raw(HEAP32[$1 >> 2] | 0) | 0;
 _stbi__rewind(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _stbi__bmp_test($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = _stbi__bmp_test_raw(HEAP32[$1 >> 2] | 0) | 0;
 _stbi__rewind(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE10deallocateEPS8_m($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE10deallocateEPcm(HEAP32[$0 >> 2] | 0, $1, $2 << 4);
 return;
}

function __sg_gl_pass_ds_image($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  STACKTOP = sp;
  return HEAP32[(HEAP32[$1 >> 2] | 0) + 76 + 36 >> 2] | 0;
 } else ___assert_fail(25992, 17628, 6362, 35814);
 return 0;
}

function __ZN2Dr5ClampIiEET_RKS1_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0;
 $3 = HEAP32[$0 >> 2] | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 if (($3 | 0) < ($4 | 0)) $$0 = $4; else {
  $6 = HEAP32[$2 >> 2] | 0;
  $$0 = ($3 | 0) > ($6 | 0) ? $6 : $3;
 }
 return $$0 | 0;
}

function __sgl_make_pip_id($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __saudio_ring_idx($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return (HEAP32[$3 >> 2] | 0) % (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) | 0 | 0;
}

function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (!(___toread($0) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 15]($0, $1, 1) | 0) == 1) $$0 = HEAPU8[$1 >> 0] | 0; else $$0 = -1; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __sg_gl_cache_invalidate_program($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[$1 >> 2] | 0) != (HEAP32[539378] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[539378] = 0;
 _glUseProgram(0);
 STACKTOP = sp;
 return;
}

function __sgl_mul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 __sgl_matmul4(HEAP32[$2 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEmmPKc($0) {
 $0 = $0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEmmPKcm($0, __ZNSt3__211char_traitsIcE6lengthEPKc(49298) | 0);
 return;
}

function _sgl_default_pipeline() {
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2817, 19842);
 if ((HEAP32[539494] | 0) >= 0 & (HEAP32[539494] | 0) < 64) {
  HEAP32[2157980 + (HEAP32[539494] << 2) >> 2] = HEAP32[539488];
  return;
 } else ___assert_fail(19797, 19399, 2818, 19842);
}

function __sg_update_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 __sg_gl_update_buffer(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_update_image($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 __sg_gl_update_image(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sfetch_path_make($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $1;
 __sfetch_path_copy($3, HEAP32[$2 >> 2] | 0);
 _memcpy($0 | 0, $3 | 0, 1024) | 0;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0 + 12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 return;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEC2EmRKS6_RKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$1 >> 2];
 return;
}

function __sapp_emsc_pointerlockerror_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp + 8 >> 2] = $0;
 HEAP32[sp + 4 >> 2] = $1;
 HEAP32[sp >> 2] = $2;
 HEAP8[51177] = 0;
 HEAP8[51219] = 0;
 STACKTOP = sp;
 return 1;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE10deallocateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $4 = $0 + 4 | 0;
  HEAP32[$4 >> 2] = $1;
  __ZdlPv($1);
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
 }
 return;
}

function __ZNSt3__214__split_bufferImRNS_9allocatorImEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$promoted = 0, $2 = 0;
 $2 = $0 + 8 | 0;
 $$promoted = HEAP32[$2 >> 2] | 0;
 _memset($$promoted | 0, 0, $1 << 2 | 0) | 0;
 HEAP32[$2 >> 2] = $$promoted + ($1 << 2);
 return;
}

function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$promoted = 0, $2 = 0;
 $2 = $0 + 8 | 0;
 $$promoted = HEAP32[$2 >> 2] | 0;
 _memset($$promoted | 0, 0, $1 << 2 | 0) | 0;
 HEAP32[$2 >> 2] = $$promoted + ($1 << 2);
 return;
}

function _sokol_main($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var dest = 0, src = 0, stop = 0;
 dest = $0;
 src = 11740;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = _vsnprintf($0, $1, $2, $3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __sgl_prev_command() {
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 if ((HEAP32[539427] | 0) > 0) HEAP32[$0 >> 2] = (HEAP32[539430] | 0) + (((HEAP32[539427] | 0) - 1 | 0) * 24 | 0); else HEAP32[$0 >> 2] = 0;
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function _sfons_destroy($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  _fonsDeleteInternal(HEAP32[$1 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(24530, 24442, 1764, 24534);
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE10deallocateEPS6_m($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE10deallocateEPcm(HEAP32[$0 >> 2] | 0, $1, $2 << 4);
 return;
}

function __ZN2Dr5ClampIfEET_RKS1_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $3 = 0.0, $4 = 0.0, $6 = 0.0;
 $3 = +HEAPF32[$0 >> 2];
 $4 = +HEAPF32[$1 >> 2];
 if ($3 < $4) $$0 = $4; else {
  $6 = +HEAPF32[$2 >> 2];
  $$0 = $3 > $6 ? $6 : $3;
 }
 return +$$0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm($0, $1, $2, __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0) | 0;
}

function __sfetch_make_id($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return HEAP32[$3 >> 2] << 16 | HEAP32[$2 >> 2] & 65535 | 0;
}

function _stbi__cleanup_jpeg($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 _stbi__free_jpeg_components(HEAP32[$1 >> 2] | 0, HEAP32[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 8 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return;
}

function __sapp_call_frame() {
 if (!(HEAP8[50904] & 1)) return;
 if (HEAP8[50905] & 1) return;
 if (HEAP32[12701] | 0) {
  FUNCTION_TABLE_v[HEAP32[50804 >> 2] & 7]();
  return;
 }
 if (!(HEAP32[12707] | 0)) return;
 FUNCTION_TABLE_vi[HEAP32[50828 >> 2] & 31](HEAP32[12705] | 0);
 return;
}

function _stbtt__cff_index_count($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 _stbtt__buf_seek(HEAP32[$1 >> 2] | 0, 0);
 $4 = _stbtt__buf_get(HEAP32[$1 >> 2] | 0, 2) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$promoted = 0, $2 = 0;
 $2 = $0 + 4 | 0;
 $$promoted = HEAP32[$2 >> 2] | 0;
 _memset($$promoted | 0, 0, $1 << 2 | 0) | 0;
 HEAP32[$2 >> 2] = $$promoted + ($1 << 2);
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$promoted = 0, $2 = 0;
 $2 = $0 + 4 | 0;
 $$promoted = HEAP32[$2 >> 2] | 0;
 _memset($$promoted | 0, 0, $1 << 2 | 0) | 0;
 HEAP32[$2 >> 2] = $$promoted + ($1 << 2);
 return;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE10deallocateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  $4 = $0 + 4 | 0;
  HEAP32[$4 >> 2] = $1;
  __ZdlPv($1);
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8allocateEm(HEAP32[$0 >> 2] | 0, $1 << 4) | 0;
}

function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 if ((HEAP32[$3 >> 2] | 0) != ($2 | 0)) HEAP32[$3 >> 2] = $2;
 $6 = HEAP32[$0 >> 2] | 0;
 if ($6 | 0) __ZdlPv($6);
 return;
}

function __ZN13TPPLPartition8DistanceERK9TPPLPointS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0.0, $5 = 0.0;
 $5 = +HEAPF64[$2 >> 3] - +HEAPF64[$1 >> 3];
 $10 = +HEAPF64[$2 + 8 >> 3] - +HEAPF64[$1 + 8 >> 3];
 return +(+Math_sqrt(+($5 * $5 + $10 * $10)));
}

function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $varargs;
 $2 = HEAP32[2991] | 0;
 _vfprintf($2, $0, $1) | 0;
 _fputc(10, $2) | 0;
 _abort();
}

function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(2185844, 5) | 0)) {
  $3 = _pthread_getspecific(HEAP32[546462] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else _abort_message(47388, sp);
 return 0;
}

function __sgl_begin($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP8[2157736] = 1;
 HEAP32[539431] = HEAP32[539425];
 HEAP32[539432] = 0;
 HEAP32[539438] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}

function _llround($0) {
 $0 = +$0;
 var $1 = 0.0;
 $1 = +_round(+$0);
 setTempRet0((+Math_abs($1) >= 1.0 ? ($1 > 0.0 ? ~~+Math_min(+Math_floor($1 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil(($1 - +(~~$1 >>> 0)) / 4294967296.0) >>> 0) : 0) | 0);
 return ~~$1 >>> 0 | 0;
}

function _fons__getState($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return (HEAP32[$1 >> 2] | 0) + 20572 + (((HEAP32[(HEAP32[$1 >> 2] | 0) + 21052 >> 2] | 0) - 1 | 0) * 24 | 0) | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0, HEAP32[$0 + 4 >> 2] | 0);
 return;
}

function _HMM_ToRadians($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAPF32[$1 >> 2] = $0;
 HEAPF32[$2 >> 2] = +HEAPF32[$1 >> 2] * .01745329238474369;
 STACKTOP = sp;
 return +(+HEAPF32[$2 >> 2]);
}

function _stbi__pnm_isdigit($0) {
 $0 = $0 | 0;
 var $1 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP8[$1 >> 0] = $0;
 if ((HEAP8[$1 >> 0] | 0) >= 48) $9 = (HEAP8[$1 >> 0] | 0) <= 57; else $9 = 0;
 STACKTOP = sp;
 return $9 & 1 | 0;
}

function _HMM_SquareRootF($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAPF32[$1 >> 2] = $0;
 HEAPF32[$2 >> 2] = +Math_sqrt(+(+HEAPF32[$1 >> 2]));
 STACKTOP = sp;
 return +(+HEAPF32[$2 >> 2]);
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(0);
 return high >>> bits - 32 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}

function _ttUSHORT($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return ((HEAPU8[HEAP32[$1 >> 2] >> 0] | 0) << 8) + (HEAPU8[(HEAP32[$1 >> 2] | 0) + 1 >> 0] | 0) & 65535 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free($0);
 if (!(_pthread_setspecific(HEAP32[546462] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(47487, sp);
}

function _ttSHORT($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return ((HEAPU8[HEAP32[$1 >> 2] >> 0] | 0) << 8) + (HEAPU8[(HEAP32[$1 >> 2] | 0) + 1 >> 0] | 0) & 65535 | 0;
}

function __ZN6DrMeshC2Ev($0) {
 $0 = $0 | 0;
 HEAPF32[$0 + 28 >> 2] = 0.0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP8[$0 + 24 >> 0] = 0;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE10deallocateEPS2_m($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE10deallocateEPcm(HEAP32[$0 >> 2] | 0, $1, $2 * 24 | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8allocateEm(HEAP32[$0 >> 2] | 0, $1 << 4) | 0;
}

function _HMM_SinF($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAPF32[$1 >> 2] = $0;
 HEAPF32[$2 >> 2] = +Math_sin(+(+HEAPF32[$1 >> 2]));
 STACKTOP = sp;
 return +(+HEAPF32[$2 >> 2]);
}

function _HMM_CosF($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAPF32[$1 >> 2] = $0;
 HEAPF32[$2 >> 2] = +Math_cos(+(+HEAPF32[$1 >> 2]));
 STACKTOP = sp;
 return +(+HEAPF32[$2 >> 2]);
}

function __saudio_ring_empty($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0;
}

function _pthread_key_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0;
 if (!$0) {
  $$0 = 22;
  return $$0 | 0;
 }
 $3 = _malloc(8) | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 38177486;
 HEAP32[$0 >> 2] = $3;
 $$0 = 0;
 return $$0 | 0;
}

function __sg_gl_destroy_pipeline($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(18659, 17628, 6171, 25968);
}

function __sg_gl_destroy_context($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (HEAP32[$1 >> 2] | 0) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(24530, 17628, 5697, 26017);
}

function __ZN17meshopt_AllocatorD2Ev($0) {
 $0 = $0 | 0;
 var $$06 = 0, $2 = 0;
 $2 = HEAP32[$0 + 96 >> 2] | 0;
 if ($2 | 0) {
  $$06 = $2;
  do {
   $$06 = $$06 + -1 | 0;
   __ZdlPv(HEAP32[$0 + ($$06 << 2) >> 2] | 0);
  } while (($$06 | 0) != 0);
 }
 return;
}

function __sg_gl_teximage_internal_format($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = __sg_gl_teximage_format(HEAP32[$1 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN7DrColoraSERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0;
 HEAP8[$0 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
 HEAP8[$0 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
 HEAP8[$0 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
 return $0 | 0;
}

function __ZN2Dr13RoundPowerOf2IfEEiT_($0) {
 $0 = +$0;
 var $$011 = 0, $$0910 = 0;
 $$011 = 0;
 $$0910 = (~~$0 >>> 0) + -1 | 0;
 do {
  $$0910 = $$0910 >>> (1 << $$011) | $$0910;
  $$011 = $$011 + 1 | 0;
 } while (($$011 | 0) != 5);
 return $$0910 + 1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm(HEAP32[$0 >> 2] | 0);
 return;
}

function __sg_pixelformat_sf($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP8[HEAP32[$1 >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 1 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZNK7meshopt12VertexHasher4hashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0;
 $6 = (HEAP32[$0 >> 2] | 0) + (Math_imul(HEAP32[$0 + 8 >> 2] | 0, $1) | 0) | 0;
 return __ZN7meshoptL11hashUpdate4EjPKhm(0, $6, HEAP32[$0 + 4 >> 2] | 0) | 0;
}

function dynCall_iidiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iidiiii[index & 1](a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function __sapp_call_cleanup() {
 if (HEAP8[50905] & 1) return;
 if (HEAP32[12702] | 0) FUNCTION_TABLE_v[HEAP32[50808 >> 2] & 7](); else if (HEAP32[12708] | 0) FUNCTION_TABLE_vi[HEAP32[50832 >> 2] & 31](HEAP32[12705] | 0);
 HEAP8[50905] = 1;
 return;
}

function __ZNK6DrVec3miERKS_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN6DrVec3C2Efff($0, +HEAPF32[$1 >> 2] - +HEAPF32[$2 >> 2], +HEAPF32[$1 + 4 >> 2] - +HEAPF32[$2 + 4 >> 2], +HEAPF32[$1 + 8 >> 2] - +HEAPF32[$2 + 8 >> 2]);
 return;
}

function __ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0;
 $3 = +HEAPF64[$1 >> 3];
 $4 = +HEAPF64[$0 >> 3];
 $5 = +HEAPF64[$2 >> 3];
 return $3 >= $4 - $5 & $3 <= $4 + $5 | 0;
}

function _sgl_pop_pipeline() {
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2834, 19881);
 if ((HEAP32[539494] | 0) > 0) {
  HEAP32[539494] = (HEAP32[539494] | 0) + -1;
  return;
 } else {
  HEAP32[539433] = 5;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0, $1, $2) | 0;
}

function __GLOBAL__sub_I_main_cpp() {
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_2();
 ___cxx_global_var_init_3();
 ___cxx_global_var_init_4();
 ___cxx_global_var_init_5();
 ___cxx_global_var_init_6();
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __sg_create_context($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = __sg_gl_create_context(HEAP32[$1 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN6DrRectC2ERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
 return;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0;
}

function __sg_pass_ds_image($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = __sg_gl_pass_ds_image(HEAP32[$1 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN6item_tC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 20 >> 0] = 0;
 _memset($0 + 24 | 0, 0, 180) | 0;
 return;
}

function __ZNK8DrPointF15distanceSquaredERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0.0, $4 = 0.0;
 $4 = +HEAPF64[$1 >> 3] - +HEAPF64[$0 >> 3];
 $10 = +HEAPF64[$1 + 8 >> 3] - +HEAPF64[$0 + 8 >> 3];
 return +($4 * $4 + $10 * $10);
}

function __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 11720;
 __ZNSt3__222__compressed_pair_elemI7DrImageLi1ELb0EED2Ev($0 + 12 | 0);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}

function __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 11672;
 __ZNSt3__222__compressed_pair_elemI6DrMeshLi1ELb0EED2Ev($0 + 12 | 0);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}

function __ZN8DrBitmapC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 4;
 $1 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 return;
}

function __ZN6DrRectC2Eiiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8allocateEm(HEAP32[$0 >> 2] | 0, $1 * 24 | 0) | 0;
}

function __ZL18font_normal_loadedPK17sfetch_response_t($0) {
 $0 = $0 | 0;
 if (HEAP8[$0 + 5 >> 0] | 0) HEAP32[276930] = _fonsAddFontMem(HEAP32[276928] | 0, 41454, HEAP32[$0 + 40 >> 2] | 0, HEAP32[$0 + 36 >> 2] | 0, 0) | 0;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lm4096EEEEENS1_IS6_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function _sgl_disable_texture() {
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2901, 19945);
 if (HEAP8[2157736] & 1) ___assert_fail(19911, 19399, 2902, 19945); else {
  HEAP8[2157760] = 0;
  return;
 }
}

function _pthread_setspecific($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0;
 $2 = $0;
 if ((HEAP32[$2 + 4 >> 2] | 0) != 38177486) {
  $$0 = 22;
  return $$0 | 0;
 }
 HEAP32[$2 >> 2] = $1;
 $$0 = 0;
 return $$0 | 0;
}

function _sgl_enable_texture() {
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2895, 19926);
 if (HEAP8[2157736] & 1) ___assert_fail(19911, 19399, 2896, 19926); else {
  HEAP8[2157760] = 1;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(2185848, 27) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(47437, sp);
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = $0 + 4;
 return;
}

function __ZNK9TPPLPointmiERKS_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] - +HEAPF64[$2 >> 3];
 HEAPF64[$0 + 8 >> 3] = +HEAPF64[$1 + 8 >> 3] - +HEAPF64[$2 + 8 >> 3];
 return;
}

function _pop_arg_long_double($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $7 = 0, $8 = 0.0;
 $7 = (HEAP32[$1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
 $8 = +HEAPF64[$7 >> 3];
 HEAP32[$1 >> 2] = $7 + 8;
 HEAPF64[$0 >> 3] = $8;
 return;
}

function _sgl_begin_triangles() {
 if (-1412584499 != (HEAP32[539414] | 0)) ___assert_fail(19694, 19399, 2936, 19977);
 if (HEAP8[2157736] & 1) ___assert_fail(19911, 19399, 2937, 19977); else {
  __sgl_begin(3);
  return;
 }
}

function __sg_destroy_pipeline($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __sg_gl_destroy_pipeline(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_activate_context($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __sg_gl_activate_context(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211char_traitsIcE6assignEPcmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($1 | 0) _memset($0 | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc($2) | 0) & 255 | 0, $1 | 0) | 0;
 return $0 | 0;
}

function _stbi__malloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = _malloc(HEAP32[$1 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _sg_end_pass() {
 if (!(HEAP8[2156304] & 1)) ___assert_fail(17761, 17628, 14984, 19126);
 if (!(HEAP8[2156468] & 1)) return;
 __sg_end_pass();
 HEAP32[539115] = 0;
 HEAP32[539116] = 0;
 HEAP8[2156468] = 0;
 return;
}

function __sg_destroy_context($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __sg_gl_destroy_context(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2IS4_EERKNS1_IT_Lm4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 return;
}

function _meshopt_optimizeVertexCache($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 __Z32meshopt_optimizeVertexCacheTablePjPKjmmPKN7meshopt16VertexScoreTableE($0, $1, $2, $3, 11860);
 return;
}

function __sg_destroy_shader($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __sg_gl_destroy_shader(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_destroy_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __sg_gl_destroy_buffer(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_apply_pipeline($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __sg_gl_apply_pipeline(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_setup_backend($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __sg_gl_setup_backend(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_destroy_image($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __sg_gl_destroy_image(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __sg_destroy_pass($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __sg_gl_destroy_pass(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__23setIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($0);
 return;
}

function __ZN17meshopt_AllocatorC2Ev($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZNK6DrVec33dotERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+HEAPF32[$0 >> 2] * +HEAPF32[$1 >> 2] + +HEAPF32[$0 + 4 >> 2] * +HEAPF32[$1 + 4 >> 2] + +HEAPF32[$0 + 8 >> 2] * +HEAPF32[$1 + 8 >> 2]);
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0;
}

function __sg_strempty($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return 0 == (HEAP8[HEAP32[$1 >> 2] >> 0] | 0) | 0;
}

function __sapp_call_init() {
 if (HEAP32[12700] | 0) FUNCTION_TABLE_v[HEAP32[12700] & 7](); else if (HEAP32[12706] | 0) FUNCTION_TABLE_vi[HEAP32[50824 >> 2] & 31](HEAP32[12705] | 0);
 HEAP8[50904] = 1;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() | 0, 3, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() | 0, 2, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() | 0, 5, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() | 0, 4, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() | 0, 1, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() | 0, 0, $name | 0);
 return;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), a - c >>> 0 | 0) | 0;
}

function ___strdup($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = (_strlen($0) | 0) + 1 | 0;
 $3 = _malloc($2) | 0;
 if (!$3) $$0 = 0; else $$0 = _memcpy($3 | 0, $0 | 0, $2 | 0) | 0;
 return $$0 | 0;
}

function __sg_pixelformat_s($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP8[HEAP32[$1 >> 2] >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __sg_gl_init_pixelformats_etc2() {
 __sg_pixelformat_sf(2156978);
 __sg_pixelformat_sf(2156984);
 __sg_pixelformat_sf(2156990);
 __sg_pixelformat_sf(2156996);
 __sg_pixelformat_sf(2157002);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lm4096EEEEELm4096EEC2ERNS0_5arenaILm4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}

function _glDrawElementsInstancedANGLE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 _glDrawElementsInstanced($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0);
 return;
}

function __ZNK8DrPointFplERKS_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZN8DrPointFC2Edd($0, +HEAPF64[$1 >> 3] + +HEAPF64[$2 >> 3], +HEAPF64[$1 + 8 >> 3] + +HEAPF64[$2 + 8 >> 3]);
 return;
}

function __ZN7state_tC2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0;
 $2 = $0 + 1053648 | 0;
 $3 = $0 + 1048864 | 0;
 do {
  __ZN6item_tC2Ev($3);
  $3 = $3 + 208 | 0;
 } while (($3 | 0) != ($2 | 0));
 return;
}

function __sapp_clear_drop_buffer() {
 if (!(HEAP8[51192] & 1)) return;
 if (!(HEAP32[12803] | 0)) ___assert_fail(17149, 12505, 2631, 24628);
 _memset(HEAP32[12803] | 0, 0, HEAP32[12802] | 0) | 0;
 return;
}

function __Z15check_pts_equaldddd($0, $1, $2, $3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 return +Math_abs(+($0 - $2)) <= 2.220446049250313e-16 & +Math_abs(+($1 - $3)) <= 2.220446049250313e-16 | 0;
}

function __ZN8TPPLPoly4InitEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN8TPPLPoly5ClearEv($0);
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = __Znam($1 >>> 0 > 178956970 ? -1 : $1 * 24 | 0) | 0;
 return;
}

function _stbi__err($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[546319] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return 0;
}

function __sfetch_slot_index($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return HEAP32[$1 >> 2] & 65535 | 0;
}

function __ZL8HMM_Mat4v($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _stbi_image_free($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 _free(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_gl_commit() {
 if (HEAP8[2157010] & 1) ___assert_fail(35767, 17628, 6938, 37041); else {
  __sg_gl_cache_clear_buffer_bindings(0);
  __sg_gl_cache_clear_texture_bindings(0);
  return;
 }
}

function __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  __ZdlPv($1);
 }
 return;
}

function __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEEENS4_IS8_Lm4096EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 268435455;
}

function __ZN8TPPLPoly5ClearEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) __ZdaPv($1);
 HEAP8[$0 + 8 >> 0] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 return;
}

function __ZN7meshoptL11hashBucketsEm($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = ($0 >>> 2) + $0 | 0;
 $$0 = 1;
 while (1) if ($$0 >>> 0 < $2 >>> 0) $$0 = $$0 << 1; else break;
 return $$0 | 0;
}

function __ZNSt3__213__vector_baseI7DrPointNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  __ZdlPv($1);
 }
 return;
}

function _fons__tmpfree($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp + 4 >> 2] = $0;
 HEAP32[sp >> 2] = $1;
 STACKTOP = sp;
 return;
}

function ___DOUBLE_BITS_662($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $1 | 0;
}

function __ZNSt3__213__vector_baseI6VertexNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  __ZdlPv($1);
 }
 return;
}

function __ZNSt3__213__vector_baseI6DrRectNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  __ZdlPv($1);
 }
 return;
}

function __ZNSt3__210__list_impIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__list_impIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE5clearEv($0);
 return;
}

function __ZNSt3__211char_traitsIcE7compareEPKcS3_m($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 if (!$2) $$0 = 0; else $$0 = _memcmp($0, $1, $2) | 0;
 return $$0 | 0;
}

function __ZN7DrColorC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 3 >> 0] = $1 >>> 24;
 HEAP8[$0 >> 0] = $1 >>> 16;
 HEAP8[$0 + 1 >> 0] = $1 >>> 8;
 HEAP8[$0 + 2 >> 0] = $1;
 return;
}

function __ZN2Dr3MinIiEET_RKS1_S3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$1 >> 2] | 0;
 return (($2 | 0) < ($3 | 0) ? $2 : $3) | 0;
}

function __ZN2Dr3MaxIiEET_RKS1_S3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$1 >> 2] | 0;
 return (($2 | 0) > ($3 | 0) ? $2 : $3) | 0;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  __ZdlPv($1);
 }
 return;
}

function __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  __ZdlPv($1);
 }
 return;
}

function __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  __ZdlPv($1);
 }
 return;
}

function __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  __ZdlPv($1);
 }
 return;
}

function __ZN6DrRect11bottomRightEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN6DrRect5rightEv($1) | 0;
 __ZN7DrPointC2Eii($0, $2, __ZN6DrRect6bottomEv($1) | 0);
 return;
}

function __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}

function _pthread_getspecific($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[$0 + 4 >> 2] | 0) != 38177486) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = HEAP32[$0 >> 2] | 0;
 return $$0 | 0;
}

function __sg_strptr($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNK9TPPLPointdvEd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3] / $2;
 HEAPF64[$0 + 8 >> 3] = +HEAPF64[$1 + 8 >> 3] / $2;
 return;
}

function __ZN6DrRect10bottomLeftEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN6DrRect4leftEv($1) | 0;
 __ZN7DrPointC2Eii($0, $2, __ZN6DrRect6bottomEv($1) | 0);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (setTempRet0(b + d + (l >>> 0 < a >>> 0 | 0) >>> 0 | 0), l | 0) | 0;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0;
  $$0 = -1;
 } else $$0 = $0;
 return $$0 | 0;
}

function __ZN8DrBitmapD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 12 | 0;
 HEAP32[$0 + 16 >> 2] = HEAP32[$1 >> 2];
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($1);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE17pointer_in_bufferEPc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 + 4096 | 0) >>> 0 >= $1 >>> 0 & $0 >>> 0 <= $1 >>> 0 | 0;
}

function __Z21meshopt_quantizeUnormfi($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $6 = 0.0;
 $6 = $0 >= 0.0 ? $0 : 0.0;
 return ~~(($6 <= 1.0 ? $6 : 1.0) * +((1 << $1) + -1 | 0) + .5) | 0;
}

function __ZNK8DrBitmap4sizeEv($0) {
 $0 = $0 | 0;
 var $5 = 0;
 $5 = Math_imul(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0) | 0;
 return Math_imul($5, HEAP32[$0 >> 2] | 0) | 0;
}

function __ZN6DrMeshD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213__vector_baseI6VertexNS_9allocatorIS1_EEED2Ev($0 + 12 | 0);
 __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($0);
 return;
}

function __Z6orientdddddd($0, $1, $2, $3, $4, $5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 return ($3 - $1) * ($4 - $2) - ($2 - $0) * ($5 - $3) < 0.0 | 0;
}

function _pthread_once($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ((HEAP32[$0 >> 2] | 0) == 324508639) return 0;
 FUNCTION_TABLE_v[$1 & 7]();
 HEAP32[$0 >> 2] = 324508639;
 return 0;
}

function __ZN6DrRect8topRightEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN6DrRect5rightEv($1) | 0;
 __ZN7DrPointC2Eii($0, $2, __ZN6DrRect3topEv($1) | 0);
 return;
}

function __sapp_events_enabled() {
 var $6 = 0;
 if (!((HEAP32[12703] | 0) != 0 | (HEAP32[12709] | 0) != 0)) {
  $6 = 0;
  return $6 | 0;
 }
 $6 = HEAP8[50904] & 1;
 return $6 | 0;
}

function __ZN6DrVec3C2Efff($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 HEAPF32[$0 >> 2] = $1;
 HEAPF32[$0 + 4 >> 2] = $2;
 HEAPF32[$0 + 8 >> 2] = $3;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() | 0, 5, 46366);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() | 0, 4, 46436);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() | 0, 6, 46304);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() | 0, 7, 46173);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() | 0, 7, 46241);
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() | 0, 0, 46683);
 return;
}

function _stm_setup() {
 HEAP32[13510] = 0;
 HEAP32[13511] = 0;
 HEAP32[13512] = 0;
 HEAP32[13513] = 0;
 HEAP32[13510] = -1412584499;
 HEAPF64[6756] = +_stm_js_perfnow();
 return;
}

function __ZN6DrRect7topLeftEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __ZN6DrRect4leftEv($1) | 0;
 __ZN7DrPointC2Eii($0, $2, __ZN6DrRect3topEv($1) | 0);
 return;
}

function __ZL8HMM_Vec3fff($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 HEAPF32[$0 >> 2] = $1;
 HEAPF32[$0 + 4 >> 2] = $2;
 HEAPF32[$0 + 8 >> 2] = $3;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIlEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIlE3getEv() | 0, 49343, 4, -2147483648, 2147483647);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIiEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIiE3getEv() | 0, 49326, 4, -2147483648, 2147483647);
 return;
}

function __sg_gl_init_pixelformats_pvrtc() {
 __sg_pixelformat_sf(2156954);
 __sg_pixelformat_sf(2156960);
 __sg_pixelformat_sf(2156966);
 __sg_pixelformat_sf(2156972);
 return;
}

function _glDrawArraysInstancedANGLE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 _glDrawArraysInstanced($0 | 0, $1 | 0, $2 | 0, $3 | 0);
 return;
}

function __sg_gl_init_pixelformats_rgtc() {
 __sg_pixelformat_sf(2156912);
 __sg_pixelformat_sf(2156918);
 __sg_pixelformat_sf(2156924);
 __sg_pixelformat_sf(2156930);
 return;
}

function __ZN8DrPointFC2E7DrPoint($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAPF64[$0 >> 3] = +(HEAP32[$1 >> 2] | 0);
 HEAPF64[$0 + 8 >> 3] = +(HEAP32[$1 + 4 >> 2] | 0);
 return;
}

function _sg_commit() {
 if (HEAP8[2156304] & 1) {
  __sg_commit();
  HEAP32[539113] = (HEAP32[539113] | 0) + 1;
  return;
 } else ___assert_fail(17761, 17628, 14997, 19138);
}

function __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEEENS4_IS6_Lm4096EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 268435455;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELm4096EEC2ERNS0_5arenaILm4096EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
 return;
}

function __Z12pseudo_angledd($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $5 = 0.0;
 $5 = $0 / (+Math_abs(+$0) + +Math_abs(+$1));
 return +(($1 > 0.0 ? 3.0 - $5 : $5 + 1.0) * .25);
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP8[$0 + 4 >> 0] = HEAP8[$1 >> 0] | 0;
 return;
}

function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0;
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memmove($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[$0 & 7]();
 _abort_message(47540, sp);
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memcpy($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function __ZN8DrPointFaSERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3];
 HEAPF64[$0 + 8 >> 3] = +HEAPF64[$1 + 8 >> 3];
 return $0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 return;
}

function _strtol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _strtox($0, $1, $2, -2147483648, 0) | 0;
 getTempRet0() | 0;
 return $3 | 0;
}

function __ZN6DrRect6bottomEv($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 12 >> 2] | 0;
 return (HEAP32[$0 + 4 >> 2] | 0) + (($2 | 0) > 0 ? $2 + -1 | 0 : 0) | 0;
}

function __ZN12_GLOBAL__N_116register_integerIsEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIsE3getEv() | 0, 49121, 2, -32768, 32767);
 return;
}

function __Z4distdddd($0, $1, $2, $3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0.0, $5 = 0.0;
 $4 = $0 - $2;
 $5 = $1 - $3;
 return +($4 * $4 + $5 * $5);
}

function _sgl_matrix_mode_projection() {
 if (-1412584499 == (HEAP32[539414] | 0)) {
  HEAP32[539559] = 1;
  return;
 } else ___assert_fail(19694, 19399, 3128, 20076);
}

function __ZNK8DrPointFdvEd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 __ZN8DrPointFC2Edd($0, +HEAPF64[$1 >> 3] / $2, +HEAPF64[$1 + 8 >> 3] / $2);
 return;
}

function __ZNSt13runtime_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 12328;
 __ZNSt3__218__libcpp_refstringC2EPKc($0 + 4 | 0, $1);
 return;
}

function __ZN6DrRect3topEv($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 12 >> 2] | 0;
 return (HEAP32[$0 + 4 >> 2] | 0) + (($2 | 0) > 0 ? 0 : $2 + 1 | 0) | 0;
}

function __ZN12_GLOBAL__N_116register_integerIcEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIcE3getEv() | 0, 49090, 1, -128, 127);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIaEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIaE3getEv() | 0, 49095, 1, -128, 127);
 return;
}

function __Z8fast_modmm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 if ($0 >>> 0 < $1 >>> 0) $4 = $0; else $4 = ($0 >>> 0) % ($1 >>> 0) | 0;
 return $4 | 0;
}

function __ZN12_GLOBAL__N_116register_integerItEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDItE3getEv() | 0, 49127, 2, 0, 65535);
 return;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $1 >>> 0 <= $0 >>> 0 & $0 >>> 0 < $2 >>> 0 | 0;
}

function __ZNSt11logic_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 12308;
 __ZNSt3__218__libcpp_refstringC2EPKc($0 + 4 | 0, $1);
 return;
}

function __ZN7DrPointaSERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 return $0 | 0;
}

function __ZN6DrRect5rightEv($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 return (HEAP32[$0 >> 2] | 0) + (($2 | 0) > 0 ? $2 + -1 | 0 : 0) | 0;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 3](a1 | 0, a2 | 0, a3 | 0);
}

function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $3 = 0;
 if (!$0) $3 = 0; else $3 = (___dynamic_cast($0, 11360, 11480, 0) | 0) != 0 & 1;
 return $3 | 0;
}

function __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEE5clearEv($0);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIhEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIhE3getEv() | 0, 49107, 1, 0, 255);
 return;
}

function __sgl_rewind() {
 HEAP32[539431] = 0;
 HEAP32[539425] = 0;
 HEAP32[539426] = 0;
 HEAP32[539427] = 0;
 HEAP32[539433] = 0;
 HEAP8[2157761] = 1;
 return;
}

function __ZN6DrRect4leftEv($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 return (HEAP32[$0 >> 2] | 0) + (($2 | 0) > 0 ? 0 : $2 + 1 | 0) | 0;
}

function __ZN12_GLOBAL__N_116register_integerImEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDImE3getEv() | 0, 49348, 4, 0, -1);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIjEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIjE3getEv() | 0, 49330, 4, 0, -1);
 return;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function __saudio_mutex_unlock($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __ZNK8DrBitmap4rectEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN6DrRectC2Eiiii($0, 0, 0, HEAP32[$1 + 4 >> 2] | 0, HEAP32[$1 + 8 >> 2] | 0);
 return;
}

function __Z17sg_apply_uniforms15sg_shader_stageiRK8sg_range($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _sg_apply_uniforms($0, $1, $2);
 return;
}

function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0;
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0;
}

function __saudio_mutex_lock($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __ZN7DrPoint8toPointFEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN8DrPointFC2Edd($0, +(HEAP32[$1 >> 2] | 0), +(HEAP32[$1 + 4 >> 2] | 0));
 return;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() | 0;
}

function __ZN6DrRectC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 return;
}

function _fons__tt_init($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return 1;
}

function __sg_validate_end() {
 if (HEAP32[539118] | 0) {
  _puts(32392) | 0;
  ___assert_fail(43639, 17628, 13268, 32434);
 } else return 1;
 return 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 __ZN7DrImageD2Ev($0 + 12 | 0);
 return;
}

function __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lm4096EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 178956970;
}

function __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 __ZN6DrMeshD2Ev($0 + 12 | 0);
 return;
}

function __ZN12_GLOBAL__N_114register_floatIfEEvPKc() {
 __embind_register_float(__ZN10emscripten8internal6TypeIDIfE3getEv() | 0, 49372, 4);
 return;
}

function __ZN12_GLOBAL__N_114register_floatIdEEvPKc() {
 __embind_register_float(__ZN10emscripten8internal6TypeIDIdE3getEv() | 0, 49484, 8);
 return;
}

function __ZNK8DrPointF8distanceERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+Math_sqrt(+(+__ZNK8DrPointF15distanceSquaredERKS_($0, $1))));
}

function __ZNKSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE10__root_ptrEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0;
}

function __sg_gl_discard_backend() {
 if (HEAP8[2157008] & 1) {
  HEAP8[2157008] = 0;
  return;
 } else ___assert_fail(26040, 17628, 5667, 26053);
}

function __sg_gl_init_pixelformats_s3tc() {
 __sg_pixelformat_sf(2156894);
 __sg_pixelformat_sf(2156900);
 __sg_pixelformat_sf(2156906);
 return;
}

function __sg_gl_init_pixelformats_bptc() {
 __sg_pixelformat_sf(2156936);
 __sg_pixelformat_sf(2156942);
 __sg_pixelformat_sf(2156948);
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 1](a1 | 0, a2 | 0) | 0;
}

function _sapp_metal_get_renderpass_descriptor() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10453, 17335);
 return 0;
}

function __sapp_emsc_update_mouse_lock_state() {
 if (!(HEAP8[51219] & 1)) return;
 HEAP8[51219] = 0;
 _sapp_js_request_pointerlock();
 return;
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0;
}

function _sg_query_backend() {
 if (HEAP8[2156304] & 1) return HEAP32[539149] | 0; else ___assert_fail(17761, 17628, 14349, 17771);
 return 0;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0;
 return;
}

function __ZNKSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 357913941;
}

function __ZN7DrPointC2Eii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 return;
}

function b3(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(3);
 return 0;
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = 0; else $$0 = _wcrtomb($0, $1, 0) | 0;
 return $$0 | 0;
}

function _sapp_d3d11_get_render_target_view() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10521, 17448);
 return 0;
}

function _sapp_d3d11_get_depth_stencil_view() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10535, 17482);
 return 0;
}

function _out_653($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) ___fwritex($1, $2, $0) | 0;
 return;
}

function __ZNK6DrMesh11vertexCountEv($0) {
 $0 = $0 | 0;
 return ((HEAP32[$0 + 16 >> 2] | 0) - (HEAP32[$0 + 12 >> 2] | 0) | 0) / 44 | 0 | 0;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$0 + 4 >> 2];
 return;
}

function _sapp_wgpu_get_depth_stencil_view() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10590, 17590);
 return 0;
}

function __ZN7DrPointC2Edd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 HEAP32[$0 >> 2] = ~~$1;
 HEAP32[$0 + 4 >> 2] = ~~$2;
 return;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function dynCall_idi(index, a1, a2) {
 index = index | 0;
 a1 = +a1;
 a2 = a2 | 0;
 return FUNCTION_TABLE_idi[index & 1](+a1, a2 | 0) | 0;
}

function __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 12328;
 __ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0);
 return;
}

function __ZN8DrPointFC2Edd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 HEAPF64[$0 >> 3] = $1;
 HEAPF64[$0 + 8 >> 3] = $2;
 return;
}

function __ZN6DrVec23setEff($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 HEAPF32[$0 >> 2] = $1;
 HEAPF32[$0 + 4 >> 2] = $2;
 return;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return 10792;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return 10824;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return 10848;
}

function __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function _sapp_d3d11_get_device_context() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10512, 17418);
 return 0;
}

function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 12308;
 __ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0);
 return;
}

function __ZN6DrVec3C2Ev($0) {
 $0 = $0 | 0;
 HEAPF32[$0 >> 2] = 0.0;
 HEAPF32[$0 + 4 >> 2] = 0.0;
 HEAPF32[$0 + 8 >> 2] = 0.0;
 return;
}

function __ZN6DrVec2C2Eff($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 HEAPF32[$0 >> 2] = $1;
 HEAPF32[$0 + 4 >> 2] = $2;
 return;
}

function __ZN13TPPLPartition12VertexSorterC2EPNS_14MonotoneVertexE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1;
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function b14(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(14);
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 3](a1 | 0, a2 | 0);
}

function _sapp_wgpu_get_resolve_view() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10576, 17563);
 return 0;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0;
 return;
}

function _sapp_wgpu_get_render_view() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10562, 17537);
 return 0;
}

function __ZN13TPPLPartition15PartitionVertexC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 return;
}

function __ZN10DrPolygonFC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return;
}

function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() | 0;
}

function _sapp_metal_get_drawable() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10468, 17372);
 return 0;
}

function _sapp_metal_get_device() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10438, 17313);
 return 0;
}

function _sapp_d3d11_get_device() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10503, 17396);
 return 0;
}

function __sgl_discard_pipeline_pool() {
 _free(HEAP32[539493] | 0);
 HEAP32[539493] = 0;
 __sgl_discard_pool(2157956);
 return;
}

function __ZNSt3__210shared_ptrI7DrImageE18__enable_weak_thisEz($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 return;
}

function __ZN8TPPLPolyC2Ev($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 8 >> 0] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 return;
}

function _sapp_wgpu_get_device() {
 if (HEAP8[50900] & 1) return 0; else ___assert_fail(17301, 12505, 10553, 17516);
 return 0;
}

function __ZNSt3__210shared_ptrI6DrMeshE18__enable_weak_thisEz($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 return;
}

function __Z7cleanupv() {
 _sfetch_shutdown();
 _sfons_destroy(HEAP32[276928] | 0);
 _sgl_shutdown();
 _sg_shutdown();
 return;
}

function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___vfprintf_internal($0, $1, $2, 1, 2) | 0;
}

function b7(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(7);
 return 0;
}

function __sgl_matrix() {
 return 2158252 + (HEAP32[539559] << 12) + (HEAP32[2158240 + (HEAP32[539559] << 2) >> 2] << 6) | 0;
}

function _glVertexAttribDivisorANGLE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _glVertexAttribDivisor($0 | 0, $1 | 0);
 return;
}

function __ZNKSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 357913941;
}

function __ZN10DrPolygonFD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($0);
 return;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0 | 0;
 return $0 + 12 | 0;
}

function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0;
}

function __ZNK6DrMesh10indexCountEv($0) {
 $0 = $0 | 0;
 return (HEAP32[$0 + 4 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) >> 2 | 0;
}

function __ZN8TPPLPoly8GetPointEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (HEAP32[$0 >> 2] | 0) + ($1 * 24 | 0) | 0;
}

function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0;
}

function __ZN8TPPLPolyD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) __ZdaPv($1);
 return;
}

function __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}

function _strncpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 ___stpncpy($0, $1, $2) | 0;
 return $0 | 0;
}

function ___cxx_global_var_init_1047() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[546463] | 0;
 HEAP32[546463] = $0 + 0;
 return $0 | 0;
}

function __ZNSt3__222__compressed_pair_elemI7DrImageLi1ELb0EED2Ev($0) {
 $0 = $0 | 0;
 __ZN7DrImageD2Ev($0);
 return;
}

function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIvE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDItE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDItE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIsE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDImE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDImE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIlE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIjE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIhE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIfE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIdE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIcE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIbE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIaE3getEv() | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EEC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4096 >> 2] = $0;
 return;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 3](a1 | 0) | 0;
}

function b13(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(13);
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1811($0) {
 $0 = $0 | 0;
 return $0 + -12 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 4096 >> 2] = 0;
 return;
}

function _isxdigit($0) {
 $0 = $0 | 0;
 return ((($0 | 32) + -97 | 0) >>> 0 < 6 | (_isdigit($0) | 0) != 0) & 1 | 0;
}

function ___cxx_global_var_init_1() {
 __ZNSt3__210shared_ptrI6DrMeshE11make_sharedIJEEES2_DpOT_(2178864);
 return;
}

function __ZNSt3__222__compressed_pair_elemI6DrMeshLi1ELb0EED2Ev($0) {
 $0 = $0 | 0;
 __ZN6DrMeshD2Ev($0);
 return;
}

function __ZN8TPPLPolyixEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (HEAP32[$0 >> 2] | 0) + ($1 * 24 | 0) | 0;
}

function __ZN2Dr16RadiansToDegreesIdEET_RKS1_($0) {
 $0 = $0 | 0;
 return +(+HEAPF64[$0 >> 3] * 57.29577951308232);
}

function _sg_pop_debug_group() {
 if (HEAP8[2156304] & 1) return; else ___assert_fail(17761, 17628, 15091, 19380);
}

function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcm($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILm4096EE8align_upEm($0) {
 $0 = $0 | 0;
 return $0 + 15 & -16 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEm($0) {
 $0 = $0 | 0;
 return _malloc($0) | 0;
}

function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[3054] | 0;
 HEAP32[3054] = $0 + 0;
 return $0 | 0;
}

function __ZNSt16invalid_argumentD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZN8TPPLPoly7SetHoleEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 8 >> 0] = $1 & 1;
 return;
}

function b6(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(6);
 return 0;
}

function __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 268435455;
}

function __ZNKSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 178956970;
}

function __ZN8DrBitmap4copyEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN8DrBitmapC2ERKS_($0, $1);
 return;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 31](a1 | 0);
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt12length_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__26vectorI7DrPointNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 536870911;
}

function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__26vectorI6DrRectNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 268435455;
}

function __ZNKSt3__26vectorI6VertexNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 97612893;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0 | 0;
 _abort();
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 _abort();
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 _abort();
}

function __ZN7DrPointC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 return;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function __saudio_has_callback() {
 return (HEAP32[542637] | 0 ? 1 : (HEAP32[542638] | 0) != 0) | 0;
}

function _llvm_round_f64(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function __ZNK6DrVec311normSquaredEv($0) {
 $0 = $0 | 0;
 return +(+__ZNK6DrVec33dotERKS_($0, $0));
}

function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(12);
}

function __ZNKSt3__26vectorImNS_9allocatorImEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 1073741823;
}

function __ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 1073741823;
}

function __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 2147483647;
}

function __ZNK7DrColor6greenFEv($0) {
 $0 = $0 | 0;
 return +(+(HEAPU8[$0 + 1 >> 0] | 0) / 255.0);
}

function __ZNK7DrColor6alphaFEv($0) {
 $0 = $0 | 0;
 return +(+(HEAPU8[$0 + 3 >> 0] | 0) / 255.0);
}

function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 536870911;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 >> 2] | 0;
}

function __ZNK7DrColor5blueFEv($0) {
 $0 = $0 | 0;
 return +(+(HEAPU8[$0 + 2 >> 0] | 0) / 255.0);
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 return ___strdup(HEAP32[$ti + 4 >> 2] | 0) | 0;
}

function __ZNK8TPPLPoly6IsHoleEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 8 >> 0] | 0) != 0 | 0;
}

function __ZNK8TPPLPoly5ValidEv($0) {
 $0 = $0 | 0;
 return (HEAP32[$0 + 4 >> 2] | 0) > 2 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 return 10744;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 return 10752;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 return 10712;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 return 10720;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 return 10728;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 return 10736;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 return 10760;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 return 10704;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 return 10688;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 return 10696;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 return 10776;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 return 10768;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0 | 0;
 return $0 & 255 | 0;
}

function __ZNK8TPPLPoly12GetNumPointsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 4 >> 2] | 0;
}

function __ZNK7DrColor4redFEv($0) {
 $0 = $0 | 0;
 return +(+(HEAPU8[$0 >> 0] | 0) / 255.0);
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0 | 0;
 return _strlen($0) | 0;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0;
}

function _round(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0 | 0;
 return 1;
}

function b5(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(5);
 return 0;
}

function _sapp_height() {
 return ((HEAP32[12731] | 0) > 0 ? HEAP32[12731] | 0 : 1) | 0;
}

function ___cxx_global_var_init_2() {
 HEAP32[544718] = 0;
 HEAP32[544719] = 0;
 return;
}

function _sapp_width() {
 return ((HEAP32[12730] | 0) > 0 ? HEAP32[12730] | 0 : 1) | 0;
}

function ___cxx_global_var_init_4() {
 __ZN6DrVec2C2Eff(2178896, 25.0, 25.0);
 return;
}

function __sapp_html5_get_ask_leave_site() {
 return (HEAP8[50909] & 1 ? 1 : 0) | 0;
}

function ___cxx_global_var_init_6() {
 __ZN6DrVec2C2Eff(2178968, 0.0, 0.0);
 return;
}

function ___cxx_global_var_init_3() {
 __ZN6DrVec2C2Eff(2178888, 0.0, 0.0);
 return;
}

function ___cxx_global_var_init_5() {
 __ZN2Dr14IdentityMatrixEv(2178904);
 return;
}

function __ZN8TPPLPoly9GetPointsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 >> 2] | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 return 10784;
}
function globalCtors() {
 __GLOBAL__sub_I_main_cpp();
 __GLOBAL__sub_I_bind_cpp();
}

function __sgl_matrix_projection() {
 return 2162348 + (HEAP32[539561] << 6) | 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(11);
}

function __sgl_matrix_modelview() {
 return 2158252 + (HEAP32[539560] << 6) | 0;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7]();
}

function _ldexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}

function __Zli3_ucy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $0 & 255 | 0;
}

function __sgl_matrix_texture() {
 return 2166444 + (HEAP32[539562] << 6) | 0;
}

function __GLOBAL__sub_I_bind_cpp() {
 ___cxx_global_var_init_1047();
 return;
}

function _isupper($0) {
 $0 = $0 | 0;
 return ($0 + -65 | 0) >>> 0 < 26 | 0;
}

function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __sapp_emsc_notify_keyboard_hidden() {
 HEAP8[50910] = 0;
 return;
}

function __ZNK7DrImage9getBitmapEv($0) {
 $0 = $0 | 0;
 return $0 + 12 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 return 11512;
}

function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 return 11560;
}

function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 return 11552;
}

function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 return 11592;
}

function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 return 11584;
}

function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 return 11576;
}

function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 return 11568;
}

function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 return 11536;
}

function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 return 11600;
}

function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 return 11608;
}

function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 return 11528;
}

function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 return 11520;
}

function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 return 11544;
}

function ___em_js__sapp_js_remove_beforeunload_listener() {
 return 13312;
}

function ___em_js__sapp_js_remove_dragndrop_listeners() {
 return 16103;
}

function b4(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(4);
 return 0;
}

function ___em_js__sapp_js_remove_clipboard_listener() {
 return 13624;
}

function ___em_js__sapp_js_add_beforeunload_listener() {
 return 13084;
}

function __sg_discard_backend() {
 __sg_gl_discard_backend();
 return;
}

function ___cxx_global_var_init() {
 __ZN7state_tC2Ev(54064);
 return;
}

function __ZNK7DrColor5greenEv($0) {
 $0 = $0 | 0;
 return $0 + 1 | 0;
}

function __ZNK7DrColor5alphaEv($0) {
 $0 = $0 | 0;
 return $0 + 3 | 0;
}

function __ZN10DrPolygonF6pointsEv($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function ___em_js__sapp_js_add_dragndrop_listeners() {
 return 14178;
}

function __ZNK7DrColor4blueEv($0) {
 $0 = $0 | 0;
 return $0 + 2 | 0;
}

function b1(p0, p1) {
 p0 = +p0;
 p1 = p1 | 0;
 abort(1);
 return 0;
}

function ___em_js__sapp_js_add_clipboard_listener() {
 return 13397;
}

function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function ___em_js__sfetch_js_send_head_request() {
 return 20122;
}

function ___em_js__sapp_js_request_pointerlock() {
 return 16862;
}

function ___em_js__sfetch_js_send_get_request() {
 return 20572;
}

function ___em_js__sapp_js_fetch_dropped_file() {
 return 15425;
}

function __ZNK7DrColor3redEv($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function ___em_js__sapp_js_unfocus_textfield() {
 return 13010;
}

function ___em_js__sapp_js_dropped_file_size() {
 return 15271;
}

function b10(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(10);
}

function __sg_validate_begin() {
 HEAP32[539118] = 0;
 return;
}

function ___em_js__sapp_js_exit_pointerlock() {
 return 17007;
}

function ___em_js__sapp_js_create_textfield() {
 return 12632;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function ___pthread_self_896() {
 return _pthread_self() | 0;
}

function ___em_js__saudio_js_buffer_frames() {
 return 24310;
}

function ___em_js__sapp_js_write_clipboard() {
 return 13695;
}

function ___em_js__sapp_js_focus_textfield() {
 return 12935;
}

function _sapp_heightf() {
 return +(+(_sapp_height() | 0));
}

function ___em_js__saudio_js_sample_rate() {
 return 24203;
}

function __Znam($0) {
 $0 = $0 | 0;
 return __Znwm($0) | 0;
}

function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function _sapp_widthf() {
 return +(+(_sapp_width() | 0));
}

function _sapp_sample_count() {
 return HEAP32[12732] | 0;
}

function ___em_js__sapp_js_pointer_init() {
 return 16490;
}

function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt9exceptionD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function _sapp_dpi_scale() {
 return +(+HEAPF32[12734]);
}

function __sg_end_pass() {
 __sg_gl_end_pass();
 return;
}

function ___em_js__saudio_js_shutdown() {
 return 23994;
}

function _sapp_gles2() {
 return HEAP8[50902] & 1 | 0;
}

function b2(p0) {
 p0 = p0 | 0;
 abort(2);
 return 0;
}

function __sfetch_ctx() {
 return HEAP32[542635] | 0;
}

function __sg_commit() {
 __sg_gl_commit();
 return;
}

function ___em_js__stm_js_perfnow() {
 return 22117;
}

function ___em_js__saudio_js_init() {
 return 22392;
}

function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}

function ___lockfile($0) {
 $0 = $0 | 0;
 return 1;
}

function ___errno_location() {
 return 2185344;
}

function stackSave() {
 return STACKTOP | 0;
}

function _sapp_depth_format() {
 return 42;
}

function _sapp_color_format() {
 return 23;
}

function b9(p0) {
 p0 = p0 | 0;
 abort(9);
}

function _pthread_self() {
 return 11972;
}

function b0() {
 abort(0);
 return 0;
}

function b8() {
 abort(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,_sapp_metal_get_renderpass_descriptor,_sapp_metal_get_drawable,_sapp_d3d11_get_render_target_view,_sapp_d3d11_get_depth_stencil_view,_sapp_wgpu_get_render_view,_sapp_wgpu_get_resolve_view,_sapp_wgpu_get_depth_stencil_view];
var FUNCTION_TABLE_idi = [b1,__sapp_emsc_frame];
var FUNCTION_TABLE_ii = [b2,___stdio_close,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv];
var FUNCTION_TABLE_iidiiii = [b3,_fmt_fp];
var FUNCTION_TABLE_iii = [b4,__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info];
var FUNCTION_TABLE_iiii = [b5,___stdio_write,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__sapp_emsc_size_changed,__sfons_render_create,__sfons_render_resize,__sapp_emsc_mouse_cb,__sapp_emsc_wheel_cb,__sapp_emsc_key_cb,__sapp_emsc_touch_cb,__sapp_emsc_pointerlockchange_cb,__sapp_emsc_pointerlockerror_cb,__sapp_emsc_webgl_context_cb];
var FUNCTION_TABLE_iiiii = [b6,___stdio_seek];
var FUNCTION_TABLE_iiiiii = [b7,_stbi__resample_row_hv_2,_resample_row_1,_stbi__resample_row_v_2,_stbi__resample_row_h_2,_stbi__resample_row_generic,b7,b7];
var FUNCTION_TABLE_v = [b8,__Z4initv,__ZL5framev,__Z7cleanupv,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b8,b8];
var FUNCTION_TABLE_vi = [b9,__ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZL5inputPK10sapp_event,__ZL18emsc_load_callbackPK25sapp_html5_fetch_response,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt16invalid_argumentD0Ev,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__sfons_render_delete,__ZL12image_loadedPK17sfetch_response_t,__ZL18font_normal_loadedPK17sfetch_response_t,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b9
,b9,b9,b9];
var FUNCTION_TABLE_vii = [b10,__sfetch_request_handler,_pop_arg_long_double,b10];
var FUNCTION_TABLE_viii = [b11,__sfons_render_update,_stbi__idct_block,b11];
var FUNCTION_TABLE_viiii = [b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi];
var FUNCTION_TABLE_viiiii = [b13,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__sfons_render_draw,b13,b13,b13];
var FUNCTION_TABLE_viiiiii = [b14,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,_stbi__YCbCr_to_RGB_row,b14,b14,b14];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_demangle: ___cxa_demangle, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___em_js__sapp_js_add_beforeunload_listener: ___em_js__sapp_js_add_beforeunload_listener, ___em_js__sapp_js_add_clipboard_listener: ___em_js__sapp_js_add_clipboard_listener, ___em_js__sapp_js_add_dragndrop_listeners: ___em_js__sapp_js_add_dragndrop_listeners, ___em_js__sapp_js_create_textfield: ___em_js__sapp_js_create_textfield, ___em_js__sapp_js_dropped_file_size: ___em_js__sapp_js_dropped_file_size, ___em_js__sapp_js_exit_pointerlock: ___em_js__sapp_js_exit_pointerlock, ___em_js__sapp_js_fetch_dropped_file: ___em_js__sapp_js_fetch_dropped_file, ___em_js__sapp_js_focus_textfield: ___em_js__sapp_js_focus_textfield, ___em_js__sapp_js_pointer_init: ___em_js__sapp_js_pointer_init, ___em_js__sapp_js_remove_beforeunload_listener: ___em_js__sapp_js_remove_beforeunload_listener, ___em_js__sapp_js_remove_clipboard_listener: ___em_js__sapp_js_remove_clipboard_listener, ___em_js__sapp_js_remove_dragndrop_listeners: ___em_js__sapp_js_remove_dragndrop_listeners, ___em_js__sapp_js_request_pointerlock: ___em_js__sapp_js_request_pointerlock, ___em_js__sapp_js_unfocus_textfield: ___em_js__sapp_js_unfocus_textfield, ___em_js__sapp_js_write_clipboard: ___em_js__sapp_js_write_clipboard, ___em_js__saudio_js_buffer_frames: ___em_js__saudio_js_buffer_frames, ___em_js__saudio_js_init: ___em_js__saudio_js_init, ___em_js__saudio_js_sample_rate: ___em_js__saudio_js_sample_rate, ___em_js__saudio_js_shutdown: ___em_js__saudio_js_shutdown, ___em_js__sfetch_js_send_get_request: ___em_js__sfetch_js_send_get_request, ___em_js__sfetch_js_send_head_request: ___em_js__sfetch_js_send_head_request, ___em_js__stm_js_perfnow: ___em_js__stm_js_perfnow, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __sapp_emsc_begin_drop: __sapp_emsc_begin_drop, __sapp_emsc_drop: __sapp_emsc_drop, __sapp_emsc_end_drop: __sapp_emsc_end_drop, __sapp_emsc_invoke_fetch_cb: __sapp_emsc_invoke_fetch_cb, __sapp_emsc_notify_keyboard_hidden: __sapp_emsc_notify_keyboard_hidden, __sapp_emsc_onpaste: __sapp_emsc_onpaste, __sapp_html5_get_ask_leave_site: __sapp_html5_get_ask_leave_site, __saudio_emsc_pull: __saudio_emsc_pull, __sfetch_emsc_failed_buffer_too_small: __sfetch_emsc_failed_buffer_too_small, __sfetch_emsc_failed_http_status: __sfetch_emsc_failed_http_status, __sfetch_emsc_get_response: __sfetch_emsc_get_response, __sfetch_emsc_head_response: __sfetch_emsc_head_response, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_round_f64: _llvm_round_f64, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _round: _round, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_idi: dynCall_idi, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___em_js__sapp_js_add_beforeunload_listener = Module["___em_js__sapp_js_add_beforeunload_listener"] = asm["___em_js__sapp_js_add_beforeunload_listener"];
var ___em_js__sapp_js_add_clipboard_listener = Module["___em_js__sapp_js_add_clipboard_listener"] = asm["___em_js__sapp_js_add_clipboard_listener"];
var ___em_js__sapp_js_add_dragndrop_listeners = Module["___em_js__sapp_js_add_dragndrop_listeners"] = asm["___em_js__sapp_js_add_dragndrop_listeners"];
var ___em_js__sapp_js_create_textfield = Module["___em_js__sapp_js_create_textfield"] = asm["___em_js__sapp_js_create_textfield"];
var ___em_js__sapp_js_dropped_file_size = Module["___em_js__sapp_js_dropped_file_size"] = asm["___em_js__sapp_js_dropped_file_size"];
var ___em_js__sapp_js_exit_pointerlock = Module["___em_js__sapp_js_exit_pointerlock"] = asm["___em_js__sapp_js_exit_pointerlock"];
var ___em_js__sapp_js_fetch_dropped_file = Module["___em_js__sapp_js_fetch_dropped_file"] = asm["___em_js__sapp_js_fetch_dropped_file"];
var ___em_js__sapp_js_focus_textfield = Module["___em_js__sapp_js_focus_textfield"] = asm["___em_js__sapp_js_focus_textfield"];
var ___em_js__sapp_js_pointer_init = Module["___em_js__sapp_js_pointer_init"] = asm["___em_js__sapp_js_pointer_init"];
var ___em_js__sapp_js_remove_beforeunload_listener = Module["___em_js__sapp_js_remove_beforeunload_listener"] = asm["___em_js__sapp_js_remove_beforeunload_listener"];
var ___em_js__sapp_js_remove_clipboard_listener = Module["___em_js__sapp_js_remove_clipboard_listener"] = asm["___em_js__sapp_js_remove_clipboard_listener"];
var ___em_js__sapp_js_remove_dragndrop_listeners = Module["___em_js__sapp_js_remove_dragndrop_listeners"] = asm["___em_js__sapp_js_remove_dragndrop_listeners"];
var ___em_js__sapp_js_request_pointerlock = Module["___em_js__sapp_js_request_pointerlock"] = asm["___em_js__sapp_js_request_pointerlock"];
var ___em_js__sapp_js_unfocus_textfield = Module["___em_js__sapp_js_unfocus_textfield"] = asm["___em_js__sapp_js_unfocus_textfield"];
var ___em_js__sapp_js_write_clipboard = Module["___em_js__sapp_js_write_clipboard"] = asm["___em_js__sapp_js_write_clipboard"];
var ___em_js__saudio_js_buffer_frames = Module["___em_js__saudio_js_buffer_frames"] = asm["___em_js__saudio_js_buffer_frames"];
var ___em_js__saudio_js_init = Module["___em_js__saudio_js_init"] = asm["___em_js__saudio_js_init"];
var ___em_js__saudio_js_sample_rate = Module["___em_js__saudio_js_sample_rate"] = asm["___em_js__saudio_js_sample_rate"];
var ___em_js__saudio_js_shutdown = Module["___em_js__saudio_js_shutdown"] = asm["___em_js__saudio_js_shutdown"];
var ___em_js__sfetch_js_send_get_request = Module["___em_js__sfetch_js_send_get_request"] = asm["___em_js__sfetch_js_send_get_request"];
var ___em_js__sfetch_js_send_head_request = Module["___em_js__sfetch_js_send_head_request"] = asm["___em_js__sfetch_js_send_head_request"];
var ___em_js__stm_js_perfnow = Module["___em_js__stm_js_perfnow"] = asm["___em_js__stm_js_perfnow"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __sapp_emsc_begin_drop = Module["__sapp_emsc_begin_drop"] = asm["__sapp_emsc_begin_drop"];
var __sapp_emsc_drop = Module["__sapp_emsc_drop"] = asm["__sapp_emsc_drop"];
var __sapp_emsc_end_drop = Module["__sapp_emsc_end_drop"] = asm["__sapp_emsc_end_drop"];
var __sapp_emsc_invoke_fetch_cb = Module["__sapp_emsc_invoke_fetch_cb"] = asm["__sapp_emsc_invoke_fetch_cb"];
var __sapp_emsc_notify_keyboard_hidden = Module["__sapp_emsc_notify_keyboard_hidden"] = asm["__sapp_emsc_notify_keyboard_hidden"];
var __sapp_emsc_onpaste = Module["__sapp_emsc_onpaste"] = asm["__sapp_emsc_onpaste"];
var __sapp_html5_get_ask_leave_site = Module["__sapp_html5_get_ask_leave_site"] = asm["__sapp_html5_get_ask_leave_site"];
var __saudio_emsc_pull = Module["__saudio_emsc_pull"] = asm["__saudio_emsc_pull"];
var __sfetch_emsc_failed_buffer_too_small = Module["__sfetch_emsc_failed_buffer_too_small"] = asm["__sfetch_emsc_failed_buffer_too_small"];
var __sfetch_emsc_failed_http_status = Module["__sfetch_emsc_failed_http_status"] = asm["__sfetch_emsc_failed_http_status"];
var __sfetch_emsc_get_response = Module["__sfetch_emsc_get_response"] = asm["__sfetch_emsc_get_response"];
var __sfetch_emsc_head_response = Module["__sfetch_emsc_head_response"] = asm["__sfetch_emsc_head_response"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _round = Module["_round"] = asm["_round"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_idi = Module["dynCall_idi"] = asm["dynCall_idi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;









































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}







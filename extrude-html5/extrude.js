// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;



// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  read_ = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  setWindowTitle = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];
if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message

// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort();
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};


var Runtime = {
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}


var STATIC_BASE = 8,
    STACK_BASE = 2193984,
    STACKTOP = STACK_BASE,
    STACK_MAX = 7436864,
    DYNAMIC_BASE = 7436864,
    DYNAMICTOP_PTR = 2193952;




var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;








  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;









function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;
  
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}



var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];

function _get_canvas_height(){ return canvas.height; }
function _get_canvas_width(){ return canvas.width; }
function _sapp_js_add_beforeunload_listener(){ Module.sokol_beforeunload = function(event) { if (__sapp_html5_get_ask_leave_site() != 0) { event.preventDefault(); event.returnValue = ' '; } }; window.addEventListener('beforeunload', Module.sokol_beforeunload); }
function _sapp_js_add_clipboard_listener(){ Module.sokol_paste = function(event) { var pasted_str = event.clipboardData.getData('text'); ccall('_sapp_emsc_onpaste', 'void', ['string'], [pasted_str]); }; window.addEventListener('paste', Module.sokol_paste); }
function _sapp_js_add_dragndrop_listeners(canvas_name_cstr){ Module.sokol_drop_files = []; var canvas_name = UTF8ToString(canvas_name_cstr); var canvas = document.getElementById(canvas_name); Module.sokol_dragenter = function(event) { event.stopPropagation(); event.preventDefault(); }; Module.sokol_dragleave = function(event) { event.stopPropagation(); event.preventDefault(); }; Module.sokol_dragover = function(event) { event.stopPropagation(); event.preventDefault(); }; Module.sokol_drop = function(event) { event.stopPropagation(); event.preventDefault(); var files = event.dataTransfer.files; Module.sokol_dropped_files = files; __sapp_emsc_begin_drop(files.length); var i; for (i = 0; i < files.length; i++) { ccall('_sapp_emsc_drop', 'void', ['number', 'string'], [i, files[i].name]); } __sapp_emsc_end_drop(event.clientX, event.clientY); }; canvas.addEventListener('dragenter', Module.sokol_dragenter, false); canvas.addEventListener('dragleave', Module.sokol_dragleave, false); canvas.addEventListener('dragover', Module.sokol_dragover, false); canvas.addEventListener('drop', Module.sokol_drop, false); }
function _sapp_js_create_textfield(){ var _sapp_inp = document.createElement("input"); _sapp_inp.type = "text"; _sapp_inp.id = "_sokol_app_input_element"; _sapp_inp.autocapitalize = "none"; _sapp_inp.addEventListener("focusout", function(_sapp_event) { __sapp_emsc_notify_keyboard_hidden() }); document.body.append(_sapp_inp); }
function _sapp_js_dropped_file_size(index){ if ((index < 0) || (index >= Module.sokol_dropped_files.length)) { return 0; } else { return Module.sokol_dropped_files[index].size; } }
function _sapp_js_exit_pointerlock(){ if (document.exitPointerLock) { document.exitPointerLock(); } }
function _sapp_js_fetch_dropped_file(index,callback,buf_ptr,buf_size,user_data){ var reader = new FileReader(); reader.onload = function(loadEvent) { var content = loadEvent.target.result; if (content.byteLength > buf_size) { __sapp_emsc_invoke_fetch_cb(index, 0, 1, callback, 0, buf_ptr, buf_size, user_data); } else { HEAPU8.set(new Uint8Array(content), buf_ptr); __sapp_emsc_invoke_fetch_cb(index, 1, 0, callback, content.byteLength, buf_ptr, buf_size, user_data); } }; reader.onerror = function() { __sapp_emsc_invoke_fetch_cb(index, 0, 2, callback, 0, buf_ptr, buf_size, user_data); }; reader.readAsArrayBuffer(Module.sokol_dropped_files[index]); }
function _sapp_js_focus_textfield(){ document.getElementById("_sokol_app_input_element").focus(); }
function _sapp_js_pointer_init(c_str_target){ var target_str = UTF8ToString(c_str_target); Module.sapp_emsc_target = document.getElementById(target_str); if (!Module.sapp_emsc_target) { console.log("sokol_app.h: invalid target:" + target_str); } if (!Module.sapp_emsc_target.requestPointerLock) { console.log("sokol_app.h: target doesn't support requestPointerLock:" + target_str); } }
function _sapp_js_remove_beforeunload_listener(){ window.removeEventListener('beforeunload', Module.sokol_beforeunload); }
function _sapp_js_remove_clipboard_listener(){ window.removeEventListener('paste', Module.sokol_paste); }
function _sapp_js_remove_dragndrop_listeners(canvas_name_cstr){ var canvas_name = UTF8ToString(canvas_name_cstr); var canvas = document.getElementById(canvas_name); canvas.removeEventListener('dragenter', Module.sokol_dragenter); canvas.removeEventListener('dragleave', Module.sokol_dragleave); canvas.removeEventListener('dragover', Module.sokol_dragover); canvas.removeEventListener('drop', Module.sokol_drop); }
function _sapp_js_request_pointerlock(){ if (Module.sapp_emsc_target) { if (Module.sapp_emsc_target.requestPointerLock) { Module.sapp_emsc_target.requestPointerLock(); } } }
function _sapp_js_unfocus_textfield(){ document.getElementById("_sokol_app_input_element").blur(); }
function _sapp_js_write_clipboard(c_str){ var str = UTF8ToString(c_str); var ta = document.createElement('textarea'); ta.setAttribute('autocomplete', 'off'); ta.setAttribute('autocorrect', 'off'); ta.setAttribute('autocapitalize', 'off'); ta.setAttribute('spellcheck', 'false'); ta.style.left = -100 + 'px'; ta.style.top = -100 + 'px'; ta.style.height = 1; ta.style.width = 1; ta.value = str; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); document.body.removeChild(ta); }
function _saudio_js_buffer_frames(){ if (Module._saudio_node) { return Module._saudio_node.bufferSize; } else { return 0; } }
function _saudio_js_init(sample_rate,num_channels,buffer_size){ Module._saudio_context = null; Module._saudio_node = null; if (typeof AudioContext !== 'undefined') { Module._saudio_context = new AudioContext({ sampleRate: sample_rate, latencyHint: 'interactive', }); } else if (typeof webkitAudioContext !== 'undefined') { Module._saudio_context = new webkitAudioContext({ sampleRate: sample_rate, latencyHint: 'interactive', }); } else { Module._saudio_context = null; console.log('sokol_audio.h: no WebAudio support'); } if (Module._saudio_context) { console.log('sokol_audio.h: sample rate ', Module._saudio_context.sampleRate); Module._saudio_node = Module._saudio_context.createScriptProcessor(buffer_size, 0, num_channels); Module._saudio_node.onaudioprocess = function pump_audio(event) { var num_frames = event.outputBuffer.length; var ptr = __saudio_emsc_pull(num_frames); if (ptr) { var num_channels = event.outputBuffer.numberOfChannels; for (var chn = 0; chn < num_channels; chn++) { var chan = event.outputBuffer.getChannelData(chn); for (var i = 0; i < num_frames; i++) { chan[i] = HEAPF32[(ptr>>2) + ((num_channels*i)+chn)] } } } }; Module._saudio_node.connect(Module._saudio_context.destination); var resume_webaudio = function() { if (Module._saudio_context) { if (Module._saudio_context.state === 'suspended') { Module._saudio_context.resume(); } } }; document.addEventListener('click', resume_webaudio, {once:true}); document.addEventListener('touchstart', resume_webaudio, {once:true}); document.addEventListener('keydown', resume_webaudio, {once:true}); return 1; } else { return 0; } }
function _saudio_js_sample_rate(){ if (Module._saudio_context) { return Module._saudio_context.sampleRate; } else { return 0; } }
function _saudio_js_shutdown(){ if (Module._saudio_context !== null) { if (Module._saudio_node) { Module._saudio_node.disconnect(); } Module._saudio_context.close(); Module._saudio_context = null; Module._saudio_node = null; } }
function _sfetch_js_send_get_request(slot_id,path_cstr,offset,bytes_to_read,buf_ptr,buf_size){ var path_str = UTF8ToString(path_cstr); var req = new XMLHttpRequest(); req.open('GET', path_str); req.responseType = 'arraybuffer'; var need_range_request = (bytes_to_read > 0); if (need_range_request) { req.setRequestHeader('Range', 'bytes='+offset+'-'+(offset+bytes_to_read-1)); } req.onreadystatechange = function() { if (this.readyState == this.DONE) { if ((this.status == 206) || ((this.status == 200) && !need_range_request)) { var u8_array = new Uint8Array(req.response); var content_fetched_size = u8_array.length; if (content_fetched_size <= buf_size) { HEAPU8.set(u8_array, buf_ptr); __sfetch_emsc_get_response(slot_id, bytes_to_read, content_fetched_size); } else { __sfetch_emsc_failed_buffer_too_small(slot_id); } } else { __sfetch_emsc_failed_http_status(slot_id, this.status); } } }; req.send(); }
function _sfetch_js_send_head_request(slot_id,path_cstr){ var path_str = UTF8ToString(path_cstr); var req = new XMLHttpRequest(); req.open('HEAD', path_str); req.onreadystatechange = function() { if (this.readyState == this.DONE) { if (this.status == 200) { var content_length = this.getResponseHeader('Content-Length'); __sfetch_emsc_head_response(slot_id, content_length); } else { __sfetch_emsc_failed_http_status(slot_id, this.status); } } }; req.send(); }
function _stm_js_perfnow(){ return performance.now(); }



// STATICTOP = STATIC_BASE + 2193976;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


memoryInitializer = "extrude.html.mem";





/* no memory initializer */
var tempDoublePtr = 2193968

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
      assert(__cxa_demangle_func);
      try {
        var s = func;
        if (s.startsWith('__Z'))
          s = s.substr(1);
        var len = lengthBytesUTF8(s)+1;
        var buf = _malloc(len);
        stringToUTF8(s, buf, len);
        var status = _malloc(4);
        var ret = __cxa_demangle_func(buf, 0, 0, status);
        if (HEAP32[((status)>>2)] === 0 && ret) {
          return UTF8ToString(ret);
        }
        // otherwise, libcxxabi failed
      } catch(e) {
        // ignore problems here
      } finally {
        if (buf) _free(buf);
        if (status) _free(status);
        if (ret) _free(ret);
      }
      // failure when using libcxxabi, don't demangle
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var ___exception_infos={};
  
  var ___exception_caught= [];
  
  function ___exception_addRef(ptr) {
      if (!ptr) return;
      var info = ___exception_infos[ptr];
      info.refcount++;
    }
  
  function ___exception_deAdjust(adjusted) {
      if (!adjusted || ___exception_infos[adjusted]) return adjusted;
      for (var key in ___exception_infos) {
        var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
        var adj = ___exception_infos[ptr].adjusted;
        var len = adj.length;
        for (var i = 0; i < len; i++) {
          if (adj[i] === adjusted) {
            return ptr;
          }
        }
      }
      return adjusted;
    }function ___cxa_begin_catch(ptr) {
      var info = ___exception_infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exceptions--;
      }
      if (info) info.rethrown = false;
      ___exception_caught.push(ptr);
      ___exception_addRef(___exception_deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
  
      throw 'Pure virtual function called!';
    }

  
  var ___exception_last=0;function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr;
    }

  function ___cxa_uncaught_exceptions() {
      return __ZSt18uncaught_exceptionv.uncaught_exceptions;
    }

  function ___gxx_personality_v0() {
    }

  
    

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};var SYSCALLS={buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
      },getZero:function() {
        SYSCALLS.get();
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      Module['abort']();
    }

   

   

  function _emscripten_get_device_pixel_ratio() {
      return devicePixelRatio || 1.0;
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function() {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function() { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function(target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getBoundingClientRectOrZeros:function(target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },pageScrollPos:function() {
        if (pageXOffset > 0 || pageYOffset > 0) {
          return [pageXOffset, pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },tick:function() {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      }};
  
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      try {
        // The sensible "default" target varies between events, but use window as the default
        // since DOM events mostly can default to that. Specific callback registrations
        // override their own defaults.
        if (!target) return window;
        if (typeof target === "number") target = __specialEventTargets[target] || UTF8ToString(target);
        if (target === '#window') return window;
        else if (target === '#document') return document;
        else if (target === '#screen') return screen;
        else if (target === '#canvas') return Module['canvas'];
        return (typeof target === 'string') ? document.getElementById(target) : target;
      } catch(e) {
        // In Web Workers, some objects above, such as '#document' do not exist. Gracefully
        // return null for them.
        return null;
      }
    }function _emscripten_get_element_css_size(target, width, height) {
      target = target ? __findEventTarget(target) : Module['canvas'];
      if (!target) return -4;
  
      if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[((width)>>3)]=rect.right - rect.left;
        HEAPF64[((height)>>3)]=rect.bottom - rect.top;
      } else {
        HEAPF64[((width)>>3)]=target.clientWidth;
        HEAPF64[((height)>>3)]=target.clientHeight;
      }
  
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_request_animation_frame_loop(cb, userData) {
      function tick(timeStamp) {
        if (dynCall_idi(cb, timeStamp, userData)) {
          requestAnimationFrame(tick);
        }
      }
      return requestAnimationFrame(tick);
    }

  
  function __findCanvasEventTarget(target) {
      if (typeof target === 'number') target = UTF8ToString(target);
      if (!target || target === '#canvas') {
        if (typeof GL !== 'undefined' && GL.offscreenCanvases['canvas']) return GL.offscreenCanvases['canvas']; // TODO: Remove this line, target '#canvas' should refer only to Module['canvas'], not to GL.offscreenCanvases['canvas'] - but need stricter tests to be able to remove this line.
        return Module['canvas'];
      }
      if (typeof GL !== 'undefined' && GL.offscreenCanvases[target]) return GL.offscreenCanvases[target];
      return __findEventTarget(target);
    }function _emscripten_set_canvas_element_size(target, width, height) {
      var canvas = __findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    }

  
  function __registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc( 164 );
  
      var keyEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var keyEventData = JSEvents.keyEvent;
        stringToUTF8(e.key ? e.key : "", keyEventData + 0, 32);
        stringToUTF8(e.code ? e.code : "", keyEventData + 32, 32);
        HEAP32[(((keyEventData)+(64))>>2)]=e.location;
        HEAP32[(((keyEventData)+(68))>>2)]=e.ctrlKey;
        HEAP32[(((keyEventData)+(72))>>2)]=e.shiftKey;
        HEAP32[(((keyEventData)+(76))>>2)]=e.altKey;
        HEAP32[(((keyEventData)+(80))>>2)]=e.metaKey;
        HEAP32[(((keyEventData)+(84))>>2)]=e.repeat;
        stringToUTF8(e.locale ? e.locale : "", keyEventData + 88, 32);
        stringToUTF8(e.char ? e.char : "", keyEventData + 120, 32);
        HEAP32[(((keyEventData)+(152))>>2)]=e.charCode;
        HEAP32[(((keyEventData)+(156))>>2)]=e.keyCode;
        HEAP32[(((keyEventData)+(160))>>2)]=e.which;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_keydown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);
      return 0;
    }

  function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
      return 0;
    }

  function _emscripten_set_keyup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);
      return 0;
    }

  
  
  function __fillMouseEventData(eventStruct, e, target) {
      HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
      HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
      HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
      HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
      HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
      HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
      HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
      HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
      HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
      HEAP16[(((eventStruct)+(40))>>1)]=e.button;
      HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
      HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
      HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
      if (Module['canvas']) {
        var rect = Module['canvas'].getBoundingClientRect();
        HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
      } else { // Canvas is not initialized, return 0.
        HEAP32[(((eventStruct)+(60))>>2)]=0;
        HEAP32[(((eventStruct)+(64))>>2)]=0;
      }
      if (target) {
        var rect = JSEvents.getBoundingClientRectOrZeros(target);
        HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;
      } else { // No specific target passed, return 0.
        HEAP32[(((eventStruct)+(52))>>2)]=0;
        HEAP32[(((eventStruct)+(56))>>2)]=0;
      }
      // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/emscripten-core/emscripten/pull/4997
      // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
      if (e.type !== 'wheel' && e.type !== 'mousewheel') {
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      }
    }function __registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 72 );
      target = __findEventTarget(target);
  
      var mouseEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        __fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture
      };
      // In IE, mousedown events don't either allow deferred calls to be run!
      if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_mousedown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);
      return 0;
    }

  function _emscripten_set_mouseenter_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter", targetThread);
      return 0;
    }

  function _emscripten_set_mouseleave_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave", targetThread);
      return 0;
    }

  function _emscripten_set_mousemove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);
      return 0;
    }

  function _emscripten_set_mouseup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);
      return 0;
    }

  
  
  function __fillPointerlockChangeEventData(eventStruct, e) {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      HEAP32[((eventStruct)>>2)]=isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
      stringToUTF8(nodeName, eventStruct + 4, 128);
      stringToUTF8(id, eventStruct + 132, 128);
    }function __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.pointerlockChangeEvent) JSEvents.pointerlockChangeEvent = _malloc( 260 );
  
      var pointerlockChangeEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var pointerlockChangeEvent = JSEvents.pointerlockChangeEvent;
        __fillPointerlockChangeEventData(pointerlockChangeEvent, e);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, pointerlockChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: pointerlockChangeEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_pointerlockchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
  
      target = target ? __findEventTarget(target) : __specialEventTargets[1]; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
      if (!target) return -4;
      __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange", targetThread);
      __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange", targetThread);
      __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange", targetThread);
      __registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange", targetThread);
      return 0;
    }

  
  function __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
      var pointerlockErrorEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, 0, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: pointerlockErrorEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_pointerlockerror_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
        return -1;
      }
  
      target = target ? __findEventTarget(target) : __specialEventTargets[1]; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
  
      if (!target) return -4;
      __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "pointerlockerror", targetThread);
      __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "mozpointerlockerror", targetThread);
      __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "webkitpointerlockerror", targetThread);
      __registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "mspointerlockerror", targetThread);
      return 0;
    }

  
  function __registerUiEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.uiEvent) JSEvents.uiEvent = _malloc( 36 );
  
      if (eventTypeString == "scroll" && !target) {
        target = document; // By default read scroll events on document rather than window.
      } else {
        target = __findEventTarget(target);
      }
  
      var uiEventHandlerFunc = function(ev) {
        var e = ev || event;
        if (e.target != target) {
          // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
          // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
          // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
          // causing a new scroll, etc..
          return;
        }
        var scrollPos = JSEvents.pageScrollPos();
  
        var uiEvent = JSEvents.uiEvent;
        HEAP32[((uiEvent)>>2)]=e.detail;
        HEAP32[(((uiEvent)+(4))>>2)]=document.body.clientWidth;
        HEAP32[(((uiEvent)+(8))>>2)]=document.body.clientHeight;
        HEAP32[(((uiEvent)+(12))>>2)]=innerWidth;
        HEAP32[(((uiEvent)+(16))>>2)]=innerHeight;
        HEAP32[(((uiEvent)+(20))>>2)]=outerWidth;
        HEAP32[(((uiEvent)+(24))>>2)]=outerHeight;
        HEAP32[(((uiEvent)+(28))>>2)]=scrollPos[0];
        HEAP32[(((uiEvent)+(32))>>2)]=scrollPos[1];
        if (dynCall_iiii(callbackfunc, eventTypeId, uiEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: uiEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_resize_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);
      return 0;
    }

  
  function __registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1684 );
  
      target = __findEventTarget(target);
  
      var touchEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var touches = {};
        for(var i = 0; i < e.touches.length; ++i) {
          var touch = e.touches[i];
          touch.changed = false;
          touches[touch.identifier] = touch;
        }
        for(var i = 0; i < e.changedTouches.length; ++i) {
          var touch = e.changedTouches[i];
          touches[touch.identifier] = touch;
          touch.changed = true;
        }
        for(var i = 0; i < e.targetTouches.length; ++i) {
          var touch = e.targetTouches[i];
          touches[touch.identifier].onTarget = true;
        }
  
        var touchEvent = JSEvents.touchEvent;
        var ptr = touchEvent;
        HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
        HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
        HEAP32[(((ptr)+(12))>>2)]=e.altKey;
        HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
        ptr += 20; // Advance to the start of the touch array.
        var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
        var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
        var numTouches = 0;
        for(var i in touches) {
          var t = touches[i];
          HEAP32[((ptr)>>2)]=t.identifier;
          HEAP32[(((ptr)+(4))>>2)]=t.screenX;
          HEAP32[(((ptr)+(8))>>2)]=t.screenY;
          HEAP32[(((ptr)+(12))>>2)]=t.clientX;
          HEAP32[(((ptr)+(16))>>2)]=t.clientY;
          HEAP32[(((ptr)+(20))>>2)]=t.pageX;
          HEAP32[(((ptr)+(24))>>2)]=t.pageY;
          HEAP32[(((ptr)+(28))>>2)]=t.changed;
          HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
          if (canvasRect) {
            HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
            HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
          } else {
            HEAP32[(((ptr)+(44))>>2)]=0;
            HEAP32[(((ptr)+(48))>>2)]=0;            
          }
          HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
          HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
  
          ptr += 52;
  
          if (++numTouches >= 32) {
            break;
          }
        }
        HEAP32[((touchEvent)>>2)]=numTouches;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }

  
  function __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
  
      if (!target) target = Module['canvas'];
  
      var webGlEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, 0, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: webGlEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_webglcontextlost_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 31, "webglcontextlost", targetThread);
      return 0;
    }

  function _emscripten_set_webglcontextrestored_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 32, "webglcontextrestored", targetThread);
      return 0;
    }

  
  function __registerWheelEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.wheelEvent) JSEvents.wheelEvent = _malloc( 104 );
  
      // The DOM Level 3 events spec event 'wheel'
      var wheelHandlerFunc = function(ev) {
        var e = ev || event;
        var wheelEvent = JSEvents.wheelEvent;
        __fillMouseEventData(wheelEvent, e, target);
        HEAPF64[(((wheelEvent)+(72))>>3)]=e["deltaX"];
        HEAPF64[(((wheelEvent)+(80))>>3)]=e["deltaY"];
        HEAPF64[(((wheelEvent)+(88))>>3)]=e["deltaZ"];
        HEAP32[(((wheelEvent)+(96))>>2)]=e["deltaMode"];
        if (dynCall_iiii(callbackfunc, eventTypeId, wheelEvent, userData)) e.preventDefault();
      };
      // The 'mousewheel' event as implemented in Safari 6.0.5
      var mouseWheelHandlerFunc = function(ev) {
        var e = ev || event;
        __fillMouseEventData(JSEvents.wheelEvent, e, target);
        HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
        HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] || e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
        HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
        HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
        var shouldCancel = dynCall_iiii(callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
        if (shouldCancel) {
          e.preventDefault();
        }
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_wheel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      target = __findEventTarget(target);
      if (typeof target.onwheel !== 'undefined') {
        __registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
        return 0;
      } else if (typeof target.onmousewheel !== 'undefined') {
        __registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel", targetThread);
        return 0;
      } else {
        return -1;
      }
    }

  
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,init:function() {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(canvas, webGLContextAttributes) {
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes));
  
  
  
  
        return ctx ? GL.registerContext(ctx, webGLContextAttributes) : 0;
      },registerContext:function(ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },acquireInstancedArraysExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('ANGLE_instanced_arrays');
        if (ext) {
          ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
          ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
          ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        }
      },acquireVertexArrayObjectExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('OES_vertex_array_object');
        if (ext) {
          ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
          ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
          ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
          ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        }
      },acquireDrawBuffersExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('WEBGL_draw_buffers');
        if (ext) {
          ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        }
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          GL.acquireInstancedArraysExtension(GLctx);
          GL.acquireVertexArrayObjectExtension(GLctx);
          GL.acquireDrawBuffersExtension(GLctx);
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        exts.forEach(function(ext) {
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};
  
  var __emscripten_webgl_power_preferences=['default', 'low-power', 'high-performance'];function _emscripten_webgl_do_create_context(target, attributes) {
      var contextAttributes = {};
      var a = attributes >> 2;
      contextAttributes['alpha'] = !!HEAP32[a + (0>>2)];
      contextAttributes['depth'] = !!HEAP32[a + (4>>2)];
      contextAttributes['stencil'] = !!HEAP32[a + (8>>2)];
      contextAttributes['antialias'] = !!HEAP32[a + (12>>2)];
      contextAttributes['premultipliedAlpha'] = !!HEAP32[a + (16>>2)];
      contextAttributes['preserveDrawingBuffer'] = !!HEAP32[a + (20>>2)];
      var powerPreference = HEAP32[a + (24>>2)];
      contextAttributes['powerPreference'] = __emscripten_webgl_power_preferences[powerPreference];
      contextAttributes['failIfMajorPerformanceCaveat'] = !!HEAP32[a + (28>>2)];
      contextAttributes.majorVersion = HEAP32[a + (32>>2)];
      contextAttributes.minorVersion = HEAP32[a + (36>>2)];
      contextAttributes.enableExtensionsByDefault = HEAP32[a + (40>>2)];
      contextAttributes.explicitSwapControl = HEAP32[a + (44>>2)];
      contextAttributes.proxyContextToMainThread = HEAP32[a + (48>>2)];
      contextAttributes.renderViaOffscreenBackBuffer = HEAP32[a + (52>>2)];
  
      var canvas = __findCanvasEventTarget(target);
  
  
  
      if (!canvas) {
        return 0;
      }
  
      if (contextAttributes.explicitSwapControl) {
        return 0;
      }
  
  
      var contextHandle = GL.createContext(canvas, contextAttributes);
      return contextHandle;
    }function _emscripten_webgl_create_context(a0,a1
  ) {
  return _emscripten_webgl_do_create_context(a0,a1);
  }

  
  function _emscripten_webgl_enable_extension_calling_thread(contextHandle, extension) {
      var context = GL.getContext(contextHandle);
      var extString = UTF8ToString(extension);
      if (extString.indexOf('GL_') == 0) extString = extString.substr(3); // Allow enabling extensions both with "GL_" prefix and without.
  
      // Obtain function entry points to extension related functions.
      if (extString == 'ANGLE_instanced_arrays') GL.acquireInstancedArraysExtension(GLctx);
      else if (extString == 'OES_vertex_array_object') GL.acquireVertexArrayObjectExtension(GLctx);
      else if (extString == 'WEBGL_draw_buffers') GL.acquireDrawBuffersExtension(GLctx);
  
      var ext = context.GLctx.getExtension(extString);
      return !!ext;
    }function _emscripten_webgl_enable_extension(a0,a1
  ) {
  return _emscripten_webgl_enable_extension_calling_thread(a0,a1);
  }

  function _emscripten_webgl_init_context_attributes(attributes) {
      var a = attributes >> 2;
      for(var i = 0; i < (56>>2); ++i) {
        HEAP32[a+i] = 0;
      }
  
      HEAP32[a + (0>>2)] =
      HEAP32[a + (4>>2)] = 
      HEAP32[a + (12>>2)] = 
      HEAP32[a + (16>>2)] = 
      HEAP32[a + (32>>2)] = 
      HEAP32[a + (40>>2)] = 1;
  
    }

  function _emscripten_webgl_make_context_current(contextHandle) {
      var success = GL.makeContextCurrent(contextHandle);
      return success ? 0 : -5;
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 4: HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            err('GL_INVALID_ENUM in glGet' + type + 'v: Native code calling glGet' + type + 'v(' + name_ + ') and it returns ' + result + ' of type ' + typeof(result) + '!');
            return;
        }
      }
  
      switch (type) {
        case 1: (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 0: HEAP32[((p)>>2)]=ret;    break;
        case 2:   HEAPF32[((p)>>2)]=ret;  break;
        case 4: HEAP8[((p)>>0)]=ret ? 1 : 0; break;
      }
    }function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  var __colorChannelsInGlTextureFormat={6402:1,6406:1,6407:3,6408:4,6409:1,6410:2,35904:3,35906:4};
  
  var __sizeOfGlTextureElementType={5121:1,5123:2,5125:4,5126:4,32819:2,32820:2,33635:2,34042:4,36193:2};function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
      if (!sizePerPixel) {
        GL.recordError(0x0500); // GL_INVALID_ENUM
        return;
      }
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      var end = pixels + bytes;
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray(pixels, end);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray(pixels>>2, end>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray(pixels>>2, end>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray(pixels>>1, end>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _glUniform1fv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform2fv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _glUniform3fv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _glUniform4fv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }



  
   

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

   

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    } 
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
var GLctx; GL.init();
var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Math_floor,Math_ceil,Int8Array,Int32Array


var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN };

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "___assert_fail": ___assert_fail,
  "___cxa_allocate_exception": ___cxa_allocate_exception,
  "___cxa_begin_catch": ___cxa_begin_catch,
  "___cxa_pure_virtual": ___cxa_pure_virtual,
  "___cxa_throw": ___cxa_throw,
  "___cxa_uncaught_exceptions": ___cxa_uncaught_exceptions,
  "___exception_addRef": ___exception_addRef,
  "___exception_deAdjust": ___exception_deAdjust,
  "___gxx_personality_v0": ___gxx_personality_v0,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall146": ___syscall146,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize,
  "__embind_register_bool": __embind_register_bool,
  "__embind_register_emval": __embind_register_emval,
  "__embind_register_float": __embind_register_float,
  "__embind_register_integer": __embind_register_integer,
  "__embind_register_memory_view": __embind_register_memory_view,
  "__embind_register_std_string": __embind_register_std_string,
  "__embind_register_std_wstring": __embind_register_std_wstring,
  "__embind_register_void": __embind_register_void,
  "__emval_decref": __emval_decref,
  "__emval_register": __emval_register,
  "__fillMouseEventData": __fillMouseEventData,
  "__fillPointerlockChangeEventData": __fillPointerlockChangeEventData,
  "__findCanvasEventTarget": __findCanvasEventTarget,
  "__findEventTarget": __findEventTarget,
  "__glGenObject": __glGenObject,
  "__registerKeyEventCallback": __registerKeyEventCallback,
  "__registerMouseEventCallback": __registerMouseEventCallback,
  "__registerPointerlockChangeEventCallback": __registerPointerlockChangeEventCallback,
  "__registerPointerlockErrorEventCallback": __registerPointerlockErrorEventCallback,
  "__registerTouchEventCallback": __registerTouchEventCallback,
  "__registerUiEventCallback": __registerUiEventCallback,
  "__registerWebGlEventCallback": __registerWebGlEventCallback,
  "__registerWheelEventCallback": __registerWheelEventCallback,
  "_abort": _abort,
  "_embind_repr": _embind_repr,
  "_emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio,
  "_emscripten_get_element_css_size": _emscripten_get_element_css_size,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_request_animation_frame_loop": _emscripten_request_animation_frame_loop,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "_emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size,
  "_emscripten_set_keydown_callback_on_thread": _emscripten_set_keydown_callback_on_thread,
  "_emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread,
  "_emscripten_set_keyup_callback_on_thread": _emscripten_set_keyup_callback_on_thread,
  "_emscripten_set_mousedown_callback_on_thread": _emscripten_set_mousedown_callback_on_thread,
  "_emscripten_set_mouseenter_callback_on_thread": _emscripten_set_mouseenter_callback_on_thread,
  "_emscripten_set_mouseleave_callback_on_thread": _emscripten_set_mouseleave_callback_on_thread,
  "_emscripten_set_mousemove_callback_on_thread": _emscripten_set_mousemove_callback_on_thread,
  "_emscripten_set_mouseup_callback_on_thread": _emscripten_set_mouseup_callback_on_thread,
  "_emscripten_set_pointerlockchange_callback_on_thread": _emscripten_set_pointerlockchange_callback_on_thread,
  "_emscripten_set_pointerlockerror_callback_on_thread": _emscripten_set_pointerlockerror_callback_on_thread,
  "_emscripten_set_resize_callback_on_thread": _emscripten_set_resize_callback_on_thread,
  "_emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread,
  "_emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread,
  "_emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread,
  "_emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread,
  "_emscripten_set_webglcontextlost_callback_on_thread": _emscripten_set_webglcontextlost_callback_on_thread,
  "_emscripten_set_webglcontextrestored_callback_on_thread": _emscripten_set_webglcontextrestored_callback_on_thread,
  "_emscripten_set_wheel_callback_on_thread": _emscripten_set_wheel_callback_on_thread,
  "_emscripten_webgl_create_context": _emscripten_webgl_create_context,
  "_emscripten_webgl_do_create_context": _emscripten_webgl_do_create_context,
  "_emscripten_webgl_enable_extension": _emscripten_webgl_enable_extension,
  "_emscripten_webgl_enable_extension_calling_thread": _emscripten_webgl_enable_extension_calling_thread,
  "_emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes,
  "_emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current,
  "_get_canvas_height": _get_canvas_height,
  "_get_canvas_width": _get_canvas_width,
  "_glActiveTexture": _glActiveTexture,
  "_glAttachShader": _glAttachShader,
  "_glBindBuffer": _glBindBuffer,
  "_glBindFramebuffer": _glBindFramebuffer,
  "_glBindRenderbuffer": _glBindRenderbuffer,
  "_glBindTexture": _glBindTexture,
  "_glBlendColor": _glBlendColor,
  "_glBlendEquationSeparate": _glBlendEquationSeparate,
  "_glBlendFuncSeparate": _glBlendFuncSeparate,
  "_glBufferData": _glBufferData,
  "_glBufferSubData": _glBufferSubData,
  "_glClear": _glClear,
  "_glClearColor": _glClearColor,
  "_glClearDepthf": _glClearDepthf,
  "_glClearStencil": _glClearStencil,
  "_glColorMask": _glColorMask,
  "_glCompileShader": _glCompileShader,
  "_glCompressedTexImage2D": _glCompressedTexImage2D,
  "_glCreateProgram": _glCreateProgram,
  "_glCreateShader": _glCreateShader,
  "_glCullFace": _glCullFace,
  "_glDeleteBuffers": _glDeleteBuffers,
  "_glDeleteFramebuffers": _glDeleteFramebuffers,
  "_glDeleteProgram": _glDeleteProgram,
  "_glDeleteRenderbuffers": _glDeleteRenderbuffers,
  "_glDeleteShader": _glDeleteShader,
  "_glDeleteTextures": _glDeleteTextures,
  "_glDepthFunc": _glDepthFunc,
  "_glDepthMask": _glDepthMask,
  "_glDisable": _glDisable,
  "_glDisableVertexAttribArray": _glDisableVertexAttribArray,
  "_glDrawArrays": _glDrawArrays,
  "_glDrawArraysInstanced": _glDrawArraysInstanced,
  "_glDrawElements": _glDrawElements,
  "_glDrawElementsInstanced": _glDrawElementsInstanced,
  "_glEnable": _glEnable,
  "_glEnableVertexAttribArray": _glEnableVertexAttribArray,
  "_glFrontFace": _glFrontFace,
  "_glGenBuffers": _glGenBuffers,
  "_glGenRenderbuffers": _glGenRenderbuffers,
  "_glGenTextures": _glGenTextures,
  "_glGetAttribLocation": _glGetAttribLocation,
  "_glGetError": _glGetError,
  "_glGetIntegerv": _glGetIntegerv,
  "_glGetProgramInfoLog": _glGetProgramInfoLog,
  "_glGetProgramiv": _glGetProgramiv,
  "_glGetShaderInfoLog": _glGetShaderInfoLog,
  "_glGetShaderiv": _glGetShaderiv,
  "_glGetString": _glGetString,
  "_glGetUniformLocation": _glGetUniformLocation,
  "_glLinkProgram": _glLinkProgram,
  "_glPolygonOffset": _glPolygonOffset,
  "_glRenderbufferStorage": _glRenderbufferStorage,
  "_glScissor": _glScissor,
  "_glShaderSource": _glShaderSource,
  "_glStencilFunc": _glStencilFunc,
  "_glStencilFuncSeparate": _glStencilFuncSeparate,
  "_glStencilMask": _glStencilMask,
  "_glStencilOp": _glStencilOp,
  "_glStencilOpSeparate": _glStencilOpSeparate,
  "_glTexImage2D": _glTexImage2D,
  "_glTexParameteri": _glTexParameteri,
  "_glTexSubImage2D": _glTexSubImage2D,
  "_glUniform1fv": _glUniform1fv,
  "_glUniform1i": _glUniform1i,
  "_glUniform2fv": _glUniform2fv,
  "_glUniform3fv": _glUniform3fv,
  "_glUniform4fv": _glUniform4fv,
  "_glUniformMatrix4fv": _glUniformMatrix4fv,
  "_glUseProgram": _glUseProgram,
  "_glVertexAttribDivisor": _glVertexAttribDivisor,
  "_glVertexAttribPointer": _glVertexAttribPointer,
  "_glViewport": _glViewport,
  "_llvm_stackrestore": _llvm_stackrestore,
  "_llvm_stacksave": _llvm_stacksave,
  "_llvm_trap": _llvm_trap,
  "_sapp_js_add_beforeunload_listener": _sapp_js_add_beforeunload_listener,
  "_sapp_js_add_clipboard_listener": _sapp_js_add_clipboard_listener,
  "_sapp_js_add_dragndrop_listeners": _sapp_js_add_dragndrop_listeners,
  "_sapp_js_create_textfield": _sapp_js_create_textfield,
  "_sapp_js_dropped_file_size": _sapp_js_dropped_file_size,
  "_sapp_js_exit_pointerlock": _sapp_js_exit_pointerlock,
  "_sapp_js_fetch_dropped_file": _sapp_js_fetch_dropped_file,
  "_sapp_js_focus_textfield": _sapp_js_focus_textfield,
  "_sapp_js_pointer_init": _sapp_js_pointer_init,
  "_sapp_js_remove_beforeunload_listener": _sapp_js_remove_beforeunload_listener,
  "_sapp_js_remove_clipboard_listener": _sapp_js_remove_clipboard_listener,
  "_sapp_js_remove_dragndrop_listeners": _sapp_js_remove_dragndrop_listeners,
  "_sapp_js_request_pointerlock": _sapp_js_request_pointerlock,
  "_sapp_js_unfocus_textfield": _sapp_js_unfocus_textfield,
  "_sapp_js_write_clipboard": _sapp_js_write_clipboard,
  "_saudio_js_buffer_frames": _saudio_js_buffer_frames,
  "_saudio_js_init": _saudio_js_init,
  "_saudio_js_sample_rate": _saudio_js_sample_rate,
  "_saudio_js_shutdown": _saudio_js_shutdown,
  "_sfetch_js_send_get_request": _sfetch_js_send_get_request,
  "_sfetch_js_send_head_request": _sfetch_js_send_head_request,
  "_stm_js_perfnow": _stm_js_perfnow,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "count_emval_handles": count_emval_handles,
  "createNamedFunction": createNamedFunction,
  "demangle": demangle,
  "demangleAll": demangleAll,
  "embind_init_charCodes": embind_init_charCodes,
  "emscriptenWebGLGet": emscriptenWebGLGet,
  "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData,
  "extendError": extendError,
  "floatReadValueFromPointer": floatReadValueFromPointer,
  "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM,
  "getShiftFromSize": getShiftFromSize,
  "get_first_emval": get_first_emval,
  "init_emval": init_emval,
  "integerReadValueFromPointer": integerReadValueFromPointer,
  "jsStackTrace": jsStackTrace,
  "makeLegalFunctionName": makeLegalFunctionName,
  "readLatin1String": readLatin1String,
  "registerType": registerType,
  "simpleReadValueFromPointer": simpleReadValueFromPointer,
  "stackTrace": stackTrace,
  "stringToNewUTF8": stringToNewUTF8,
  "throwBindingError": throwBindingError,
  "throwInternalError": throwInternalError,
  "whenDependentTypesAreResolved": whenDependentTypesAreResolved,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
};
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_pow=global.Math.pow,
  Math_cos=global.Math.cos,
  Math_sin=global.Math.sin,
  Math_atan2=global.Math.atan2,
  Math_exp=global.Math.exp,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_min=global.Math.min,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  ___assert_fail=env.___assert_fail,
  ___cxa_allocate_exception=env.___cxa_allocate_exception,
  ___cxa_begin_catch=env.___cxa_begin_catch,
  ___cxa_pure_virtual=env.___cxa_pure_virtual,
  ___cxa_throw=env.___cxa_throw,
  ___cxa_uncaught_exceptions=env.___cxa_uncaught_exceptions,
  ___exception_addRef=env.___exception_addRef,
  ___exception_deAdjust=env.___exception_deAdjust,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall146=env.___syscall146,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize,
  __embind_register_bool=env.__embind_register_bool,
  __embind_register_emval=env.__embind_register_emval,
  __embind_register_float=env.__embind_register_float,
  __embind_register_integer=env.__embind_register_integer,
  __embind_register_memory_view=env.__embind_register_memory_view,
  __embind_register_std_string=env.__embind_register_std_string,
  __embind_register_std_wstring=env.__embind_register_std_wstring,
  __embind_register_void=env.__embind_register_void,
  __emval_decref=env.__emval_decref,
  __emval_register=env.__emval_register,
  __fillMouseEventData=env.__fillMouseEventData,
  __fillPointerlockChangeEventData=env.__fillPointerlockChangeEventData,
  __findCanvasEventTarget=env.__findCanvasEventTarget,
  __findEventTarget=env.__findEventTarget,
  __glGenObject=env.__glGenObject,
  __registerKeyEventCallback=env.__registerKeyEventCallback,
  __registerMouseEventCallback=env.__registerMouseEventCallback,
  __registerPointerlockChangeEventCallback=env.__registerPointerlockChangeEventCallback,
  __registerPointerlockErrorEventCallback=env.__registerPointerlockErrorEventCallback,
  __registerTouchEventCallback=env.__registerTouchEventCallback,
  __registerUiEventCallback=env.__registerUiEventCallback,
  __registerWebGlEventCallback=env.__registerWebGlEventCallback,
  __registerWheelEventCallback=env.__registerWheelEventCallback,
  _abort=env._abort,
  _embind_repr=env._embind_repr,
  _emscripten_get_device_pixel_ratio=env._emscripten_get_device_pixel_ratio,
  _emscripten_get_element_css_size=env._emscripten_get_element_css_size,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_request_animation_frame_loop=env._emscripten_request_animation_frame_loop,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _emscripten_set_canvas_element_size=env._emscripten_set_canvas_element_size,
  _emscripten_set_keydown_callback_on_thread=env._emscripten_set_keydown_callback_on_thread,
  _emscripten_set_keypress_callback_on_thread=env._emscripten_set_keypress_callback_on_thread,
  _emscripten_set_keyup_callback_on_thread=env._emscripten_set_keyup_callback_on_thread,
  _emscripten_set_mousedown_callback_on_thread=env._emscripten_set_mousedown_callback_on_thread,
  _emscripten_set_mouseenter_callback_on_thread=env._emscripten_set_mouseenter_callback_on_thread,
  _emscripten_set_mouseleave_callback_on_thread=env._emscripten_set_mouseleave_callback_on_thread,
  _emscripten_set_mousemove_callback_on_thread=env._emscripten_set_mousemove_callback_on_thread,
  _emscripten_set_mouseup_callback_on_thread=env._emscripten_set_mouseup_callback_on_thread,
  _emscripten_set_pointerlockchange_callback_on_thread=env._emscripten_set_pointerlockchange_callback_on_thread,
  _emscripten_set_pointerlockerror_callback_on_thread=env._emscripten_set_pointerlockerror_callback_on_thread,
  _emscripten_set_resize_callback_on_thread=env._emscripten_set_resize_callback_on_thread,
  _emscripten_set_touchcancel_callback_on_thread=env._emscripten_set_touchcancel_callback_on_thread,
  _emscripten_set_touchend_callback_on_thread=env._emscripten_set_touchend_callback_on_thread,
  _emscripten_set_touchmove_callback_on_thread=env._emscripten_set_touchmove_callback_on_thread,
  _emscripten_set_touchstart_callback_on_thread=env._emscripten_set_touchstart_callback_on_thread,
  _emscripten_set_webglcontextlost_callback_on_thread=env._emscripten_set_webglcontextlost_callback_on_thread,
  _emscripten_set_webglcontextrestored_callback_on_thread=env._emscripten_set_webglcontextrestored_callback_on_thread,
  _emscripten_set_wheel_callback_on_thread=env._emscripten_set_wheel_callback_on_thread,
  _emscripten_webgl_create_context=env._emscripten_webgl_create_context,
  _emscripten_webgl_do_create_context=env._emscripten_webgl_do_create_context,
  _emscripten_webgl_enable_extension=env._emscripten_webgl_enable_extension,
  _emscripten_webgl_enable_extension_calling_thread=env._emscripten_webgl_enable_extension_calling_thread,
  _emscripten_webgl_init_context_attributes=env._emscripten_webgl_init_context_attributes,
  _emscripten_webgl_make_context_current=env._emscripten_webgl_make_context_current,
  _get_canvas_height=env._get_canvas_height,
  _get_canvas_width=env._get_canvas_width,
  _glActiveTexture=env._glActiveTexture,
  _glAttachShader=env._glAttachShader,
  _glBindBuffer=env._glBindBuffer,
  _glBindFramebuffer=env._glBindFramebuffer,
  _glBindRenderbuffer=env._glBindRenderbuffer,
  _glBindTexture=env._glBindTexture,
  _glBlendColor=env._glBlendColor,
  _glBlendEquationSeparate=env._glBlendEquationSeparate,
  _glBlendFuncSeparate=env._glBlendFuncSeparate,
  _glBufferData=env._glBufferData,
  _glBufferSubData=env._glBufferSubData,
  _glClear=env._glClear,
  _glClearColor=env._glClearColor,
  _glClearDepthf=env._glClearDepthf,
  _glClearStencil=env._glClearStencil,
  _glColorMask=env._glColorMask,
  _glCompileShader=env._glCompileShader,
  _glCompressedTexImage2D=env._glCompressedTexImage2D,
  _glCreateProgram=env._glCreateProgram,
  _glCreateShader=env._glCreateShader,
  _glCullFace=env._glCullFace,
  _glDeleteBuffers=env._glDeleteBuffers,
  _glDeleteFramebuffers=env._glDeleteFramebuffers,
  _glDeleteProgram=env._glDeleteProgram,
  _glDeleteRenderbuffers=env._glDeleteRenderbuffers,
  _glDeleteShader=env._glDeleteShader,
  _glDeleteTextures=env._glDeleteTextures,
  _glDepthFunc=env._glDepthFunc,
  _glDepthMask=env._glDepthMask,
  _glDisable=env._glDisable,
  _glDisableVertexAttribArray=env._glDisableVertexAttribArray,
  _glDrawArrays=env._glDrawArrays,
  _glDrawArraysInstanced=env._glDrawArraysInstanced,
  _glDrawElements=env._glDrawElements,
  _glDrawElementsInstanced=env._glDrawElementsInstanced,
  _glEnable=env._glEnable,
  _glEnableVertexAttribArray=env._glEnableVertexAttribArray,
  _glFrontFace=env._glFrontFace,
  _glGenBuffers=env._glGenBuffers,
  _glGenRenderbuffers=env._glGenRenderbuffers,
  _glGenTextures=env._glGenTextures,
  _glGetAttribLocation=env._glGetAttribLocation,
  _glGetError=env._glGetError,
  _glGetIntegerv=env._glGetIntegerv,
  _glGetProgramInfoLog=env._glGetProgramInfoLog,
  _glGetProgramiv=env._glGetProgramiv,
  _glGetShaderInfoLog=env._glGetShaderInfoLog,
  _glGetShaderiv=env._glGetShaderiv,
  _glGetString=env._glGetString,
  _glGetUniformLocation=env._glGetUniformLocation,
  _glLinkProgram=env._glLinkProgram,
  _glPolygonOffset=env._glPolygonOffset,
  _glRenderbufferStorage=env._glRenderbufferStorage,
  _glScissor=env._glScissor,
  _glShaderSource=env._glShaderSource,
  _glStencilFunc=env._glStencilFunc,
  _glStencilFuncSeparate=env._glStencilFuncSeparate,
  _glStencilMask=env._glStencilMask,
  _glStencilOp=env._glStencilOp,
  _glStencilOpSeparate=env._glStencilOpSeparate,
  _glTexImage2D=env._glTexImage2D,
  _glTexParameteri=env._glTexParameteri,
  _glTexSubImage2D=env._glTexSubImage2D,
  _glUniform1fv=env._glUniform1fv,
  _glUniform1i=env._glUniform1i,
  _glUniform2fv=env._glUniform2fv,
  _glUniform3fv=env._glUniform3fv,
  _glUniform4fv=env._glUniform4fv,
  _glUniformMatrix4fv=env._glUniformMatrix4fv,
  _glUseProgram=env._glUseProgram,
  _glVertexAttribDivisor=env._glVertexAttribDivisor,
  _glVertexAttribPointer=env._glVertexAttribPointer,
  _glViewport=env._glViewport,
  _llvm_stackrestore=env._llvm_stackrestore,
  _llvm_stacksave=env._llvm_stacksave,
  _llvm_trap=env._llvm_trap,
  _sapp_js_add_beforeunload_listener=env._sapp_js_add_beforeunload_listener,
  _sapp_js_add_clipboard_listener=env._sapp_js_add_clipboard_listener,
  _sapp_js_add_dragndrop_listeners=env._sapp_js_add_dragndrop_listeners,
  _sapp_js_create_textfield=env._sapp_js_create_textfield,
  _sapp_js_dropped_file_size=env._sapp_js_dropped_file_size,
  _sapp_js_exit_pointerlock=env._sapp_js_exit_pointerlock,
  _sapp_js_fetch_dropped_file=env._sapp_js_fetch_dropped_file,
  _sapp_js_focus_textfield=env._sapp_js_focus_textfield,
  _sapp_js_pointer_init=env._sapp_js_pointer_init,
  _sapp_js_remove_beforeunload_listener=env._sapp_js_remove_beforeunload_listener,
  _sapp_js_remove_clipboard_listener=env._sapp_js_remove_clipboard_listener,
  _sapp_js_remove_dragndrop_listeners=env._sapp_js_remove_dragndrop_listeners,
  _sapp_js_request_pointerlock=env._sapp_js_request_pointerlock,
  _sapp_js_unfocus_textfield=env._sapp_js_unfocus_textfield,
  _sapp_js_write_clipboard=env._sapp_js_write_clipboard,
  _saudio_js_buffer_frames=env._saudio_js_buffer_frames,
  _saudio_js_init=env._saudio_js_init,
  _saudio_js_sample_rate=env._saudio_js_sample_rate,
  _saudio_js_shutdown=env._saudio_js_shutdown,
  _sfetch_js_send_get_request=env._sfetch_js_send_get_request,
  _sfetch_js_send_head_request=env._sfetch_js_send_head_request,
  _stm_js_perfnow=env._stm_js_perfnow,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  count_emval_handles=env.count_emval_handles,
  createNamedFunction=env.createNamedFunction,
  demangle=env.demangle,
  demangleAll=env.demangleAll,
  embind_init_charCodes=env.embind_init_charCodes,
  emscriptenWebGLGet=env.emscriptenWebGLGet,
  emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData,
  extendError=env.extendError,
  floatReadValueFromPointer=env.floatReadValueFromPointer,
  flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM,
  getShiftFromSize=env.getShiftFromSize,
  get_first_emval=env.get_first_emval,
  init_emval=env.init_emval,
  integerReadValueFromPointer=env.integerReadValueFromPointer,
  jsStackTrace=env.jsStackTrace,
  makeLegalFunctionName=env.makeLegalFunctionName,
  readLatin1String=env.readLatin1String,
  registerType=env.registerType,
  simpleReadValueFromPointer=env.simpleReadValueFromPointer,
  stackTrace=env.stackTrace,
  stringToNewUTF8=env.stringToNewUTF8,
  throwBindingError=env.throwBindingError,
  throwInternalError=env.throwInternalError,
  whenDependentTypesAreResolved=env.whenDependentTypesAreResolved,
  STACKTOP = 2193984,
  STACK_MAX = 7436864,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($this) {
 $this = $this | 0;
 var $0 = 0, $Ex = 0, $Global = 0, $Names = 0, $Names297 = 0, $Names684 = 0, $Names745 = 0, $RHS538 = 0, $agg$tmp = 0, $agg$tmp121 = 0, $agg$tmp127 = 0, $agg$tmp170 = 0, $agg$tmp225 = 0, $agg$tmp231 = 0, $agg$tmp242 = 0, $agg$tmp248 = 0, $agg$tmp254 = 0, $agg$tmp265 = 0, $agg$tmp271 = 0, $agg$tmp30 = 0, $agg$tmp327 = 0, $agg$tmp333 = 0, $agg$tmp339 = 0, $agg$tmp345 = 0, $agg$tmp356 = 0, $agg$tmp36 = 0, $agg$tmp362 = 0, $agg$tmp368 = 0, $agg$tmp374 = 0, $agg$tmp382 = 0, $agg$tmp405 = 0, $agg$tmp411 = 0, $agg$tmp417 = 0, $agg$tmp42 = 0, $agg$tmp442 = 0, $agg$tmp448 = 0, $agg$tmp454 = 0, $agg$tmp465 = 0, $agg$tmp471 = 0, $agg$tmp477 = 0, $agg$tmp48 = 0, $agg$tmp485 = 0, $agg$tmp500 = 0, $agg$tmp54 = 0, $agg$tmp575 = 0, $agg$tmp581 = 0, $agg$tmp587 = 0, $agg$tmp593 = 0, $agg$tmp593$byval_copy = 0, $call100 = 0, $call101 = 0, $call105 = 0, $call108 = 0, $call120 = 0, $call126 = 0, $call142 = 0, $call152 = 0, $call153 = 0, $call159 = 0, $call169 = 0, $call177 = 0, $call190 = 0, $call191 = 0, $call196 = 0, $call207 = 0, $call208 = 0, $call214 = 0, $call224 = 0, $call230 = 0, $call241 = 0, $call247 = 0, $call253 = 0, $call264 = 0, $call270 = 0, $call281 = 0, $call282 = 0, $call287 = 0, $call29 = 0, $call298 = 0, $call305 = 0, $call326 = 0, $call332 = 0, $call338 = 0, $call344 = 0, $call35 = 0, $call355 = 0, $call361 = 0, $call367 = 0, $call373 = 0, $call381 = 0, $call387 = 0, $call404 = 0, $call41 = 0, $call410 = 0, $call416 = 0, $call424 = 0, $call441 = 0, $call447 = 0, $call453 = 0, $call464 = 0, $call47 = 0, $call470 = 0, $call476 = 0, $call484 = 0, $call490 = 0, $call499 = 0, $call505 = 0, $call506 = 0, $call511 = 0, $call527 = 0, $call528 = 0, $call53 = 0, $call534 = 0, $call540 = 0, $call557 = 0, $call558 = 0, $call564 = 0, $call574 = 0, $call580 = 0, $call586 = 0, $call592 = 0, $call60 = 0, $call604 = 0, $call605 = 0, $call611 = 0, $call622 = 0, $call636 = 0, $call647 = 0, $call662 = 0, $call673 = 0, $call685 = 0, $call691 = 0, $call70 = 0, $call718 = 0, $call729 = 0, $call739 = 0, $call740 = 0, $call746 = 0, $call753 = 0, $call775 = 0, $call84 = 0, $call85 = 0, $call90 = 0, $retval$0 = 0, $retval$1 = 0, $retval$10 = 0, $retval$11 = 0, $retval$12 = 0, $retval$13 = 0, $retval$14 = 0, $retval$15 = 0, $retval$16 = 0, $retval$17 = 0, $retval$2 = 0, $retval$21 = 0, $retval$22 = 0, $retval$23 = 0, $retval$24 = 0, $retval$25 = 0, $retval$26 = 0, $retval$27 = 0, $retval$28 = 0, $retval$29 = 0, $retval$3 = 0, $retval$30 = 0, $retval$31 = 0, $retval$32 = 0, $retval$33 = 0, $retval$34 = 0, $retval$35 = 0, $retval$36 = 0, $retval$37 = 0, $retval$42 = 0, $retval$43 = 0, $retval$47 = 0, $retval$48 = 0, $retval$49 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $agg$tmp593$byval_copy = sp + 336 | 0;
 $Global = sp + 344 | 0;
 $agg$tmp = sp + 328 | 0;
 $agg$tmp30 = sp + 320 | 0;
 $agg$tmp36 = sp + 312 | 0;
 $agg$tmp42 = sp + 304 | 0;
 $agg$tmp48 = sp + 296 | 0;
 $agg$tmp54 = sp + 288 | 0;
 $Ex = sp + 8 | 0;
 $agg$tmp121 = sp + 280 | 0;
 $agg$tmp127 = sp + 272 | 0;
 $agg$tmp170 = sp + 264 | 0;
 $agg$tmp225 = sp + 256 | 0;
 $agg$tmp231 = sp + 248 | 0;
 $agg$tmp242 = sp + 240 | 0;
 $agg$tmp248 = sp + 232 | 0;
 $agg$tmp254 = sp + 224 | 0;
 $agg$tmp265 = sp + 216 | 0;
 $agg$tmp271 = sp + 208 | 0;
 $agg$tmp327 = sp + 200 | 0;
 $agg$tmp333 = sp + 192 | 0;
 $agg$tmp339 = sp + 184 | 0;
 $agg$tmp345 = sp + 176 | 0;
 $agg$tmp356 = sp + 168 | 0;
 $agg$tmp362 = sp + 160 | 0;
 $agg$tmp368 = sp + 152 | 0;
 $agg$tmp374 = sp + 144 | 0;
 $agg$tmp382 = sp + 136 | 0;
 $agg$tmp405 = sp + 128 | 0;
 $agg$tmp411 = sp + 120 | 0;
 $agg$tmp417 = sp + 112 | 0;
 $agg$tmp442 = sp + 104 | 0;
 $agg$tmp448 = sp + 96 | 0;
 $agg$tmp454 = sp + 88 | 0;
 $agg$tmp465 = sp + 80 | 0;
 $agg$tmp471 = sp + 72 | 0;
 $agg$tmp477 = sp + 64 | 0;
 $agg$tmp485 = sp + 56 | 0;
 $agg$tmp500 = sp + 48 | 0;
 $RHS538 = sp;
 $agg$tmp575 = sp + 40 | 0;
 $agg$tmp581 = sp + 32 | 0;
 $agg$tmp587 = sp + 24 | 0;
 $agg$tmp593 = sp + 16 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52872);
 HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP8[$Global >> 0] = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp593$byval_copy) | 0) & 1;
 L1 : do if ((__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) >>> 0 < 2) $retval$49 = 0; else {
  $0 = HEAP32[$this >> 2] | 0;
  do switch (HEAP8[$0 >> 0] | 0) {
  case 76:
   {
    $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    break L1;
    break;
   }
  case 84:
   {
    $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    break L1;
    break;
   }
  case 102:
   {
    switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) {
    case 112:
     {
      label = 7;
      break;
     }
    case 76:
     {
      if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 2) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10) label = 7; else label = 8;
      break;
     }
    default:
     label = 8;
    }
    if ((label | 0) == 7) {
     $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     break L1;
    } else if ((label | 0) == 8) {
     $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     break L1;
    }
    break;
   }
  case 97:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 97:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call29 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp30, 52163);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp30 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp30 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call29, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 100:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call35 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp36, 52161);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp36 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp36 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call35, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 110:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call41 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42, 52161);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp42 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp42 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call41, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 78:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call47 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp48, 52875);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp48 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp48 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call47, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call53 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp54, 52878);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp54 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp54 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call53, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call60 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call60;
      if (!$call60) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 52880, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$0;
      break L1;
      break;
     }
    case 122:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call70 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call70;
      if (!$call70) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 52880, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$1;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 99:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call84 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call85 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call84) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call85;
      if (!$call85) $retval$3 = 0; else {
       $call90 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call84) | 0;
       HEAP32[$Ex >> 2] = $call90;
       if (!$call90) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$3 = $retval$2;
      }
      $retval$49 = $retval$3;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call100 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call101 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call100) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call101;
      do if (!$call101) $retval$7 = 0; else {
       $Names = $this + 8 | 0;
       $call105 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
       while (1) {
        if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
         label = 33;
         break;
        }
        $call108 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call100) | 0;
        HEAP32[$Ex >> 2] = $call108;
        if (!$call108) {
         label = 31;
         break;
        }
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $Ex);
       }
       if ((label | 0) == 31) {
        $retval$7 = 0;
        break;
       } else if ((label | 0) == 33) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Ex, $this, $call105);
        $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
        break;
       }
      } while (0);
      $retval$49 = $retval$7;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call120 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp121, 52890);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp121 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp121 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call120, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 111:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call126 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127, 52892);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp127 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp127 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call126, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 118:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 100:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 97:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call142 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call142;
      if (!$call142) $retval$8 = 0; else {
       HEAP8[$Ex >> 0] = 1;
       $retval$8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Global, $Ex) | 0;
      }
      $retval$49 = $retval$8;
      break L1;
      break;
     }
    case 99:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call152 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call153 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call152) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call153;
      if (!$call153) $retval$10 = 0; else {
       $call159 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call152) | 0;
       HEAP32[$Ex >> 2] = $call159;
       if (!$call159) $retval$9 = 0; else $retval$9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$10 = $retval$9;
      }
      $retval$49 = $retval$10;
      break L1;
      break;
     }
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call169 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp170, 52228);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp170 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp170 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call169, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call177 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call177;
      if (!$call177) $retval$11 = 0; else {
       HEAP8[$Ex >> 0] = 0;
       $retval$11 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Global, $Ex) | 0;
      }
      $retval$49 = $retval$11;
      break L1;
      break;
     }
    case 110:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call190 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call191 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call190) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call191;
      if (!$call191) $retval$13 = 0; else {
       $call196 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call190) | 0;
       HEAP32[$Ex >> 2] = $call196;
       if (!$call196) $retval$12 = 0; else $retval$12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, 52894, $Ex) | 0;
       $retval$13 = $retval$12;
      }
      $retval$49 = $retval$13;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call207 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call208 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call207) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call208;
      if (!$call208) $retval$15 = 0; else {
       $call214 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call207) | 0;
       HEAP32[$Ex >> 2] = $call214;
       if (!$call214) $retval$14 = 0; else $retval$14 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$15 = $retval$14;
      }
      $retval$49 = $retval$15;
      break L1;
      break;
     }
    case 118:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call224 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp225, 52897);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp225 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp225 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call224, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 86:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call230 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp231, 52899);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp231 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp231 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call230, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 101:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 111:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call241 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp242, 52902);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp242 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp242 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call241, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 79:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call247 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp248, 52904);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp248 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp248 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call247, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 113:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call253 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp254, 52907);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp254 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp254 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call253, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 103:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call264 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp265, 52910);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp265 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp265 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call264, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call270 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp271, 52234);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp271 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp271 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call270, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 105:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 120:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call281 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call282 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call281) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call282;
      if (!$call282) $retval$17 = 0; else {
       $call287 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call281) | 0;
       HEAP32[$Ex >> 2] = $call287;
       if (!$call287) $retval$16 = 0; else $retval$16 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$17 = $retval$16;
      }
      $retval$49 = $retval$17;
      break L1;
      break;
     }
    case 108:
     break;
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    HEAP32[$this >> 2] = $0 + 2;
    $Names297 = $this + 8 | 0;
    $call298 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names297) | 0;
    while (1) {
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
      label = 82;
      break;
     }
     $call305 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$agg$tmp593$byval_copy >> 2] = $call305;
     if (!$call305) {
      label = 81;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names297, $agg$tmp593$byval_copy);
    }
    if ((label | 0) == 81) {
     $retval$49 = 0;
     break L1;
    } else if ((label | 0) == 82) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Ex, $this, $call298);
     $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
     break L1;
    }
    break;
   }
  case 108:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call326 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp327, 52913);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp327 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp327 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call326, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call332 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp333, 52916);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp333 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp333 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call332, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call338 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp339, 52919);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp339 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp339 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call338, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call344 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp345, 52341);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp345 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp345 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call344, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 109:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 105:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call355 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp356, 52762);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp356 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp356 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call355, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 73:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call361 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp362, 52923);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp362 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp362 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call361, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call367 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp368, 52228);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp368 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp368 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call367, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 76:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call373 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp374, 52926);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp374 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp374 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call373, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$this >> 2] = $0 + 2;
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
       $call381 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
       __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp382, 52929);
       HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp382 >> 2];
       HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp382 + 4 >> 2];
       $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call381, $agg$tmp593$byval_copy) | 0;
       break L1;
      }
      $call387 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call387;
      if (!$call387) $retval$21 = 0; else $retval$21 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this, $agg$tmp593$byval_copy, 52929) | 0;
      $retval$49 = $retval$21;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 110:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 119:
    case 97:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call404 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp405, 52932);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp405 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp405 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call404, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 103:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call410 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp411, 52762);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp411 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp411 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call410, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call416 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp417, 52935);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp417 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp417 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call416, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 120:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call424 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call424;
      if (!$call424) $retval$22 = 0; else $retval$22 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$22;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 111:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 110:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    case 111:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call441 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp442, 52937);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp442 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp442 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call441, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 114:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call447 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp448, 52940);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp448 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp448 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call447, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 82:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call453 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp454, 52942);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp454 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp454 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call453, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 112:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 109:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call464 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp465, 52945);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp465 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp465 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call464, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call470 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp471, 52949);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp471 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp471 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call470, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 76:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call476 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp477, 52951);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp477 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp477 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call476, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 112:
     {
      HEAP32[$this >> 2] = $0 + 2;
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
       $call484 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
       __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp485, 52954);
       HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp485 >> 2];
       HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp485 + 4 >> 2];
       $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call484, $agg$tmp593$byval_copy) | 0;
       break L1;
      }
      $call490 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call490;
      if (!$call490) $retval$23 = 0; else $retval$23 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this, $agg$tmp593$byval_copy, 52954) | 0;
      $retval$49 = $retval$23;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call499 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp500, 52949);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp500 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp500 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call499, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call505 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call506 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call505) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call506;
      if (!$call506) $retval$25 = 0; else {
       $call511 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call505) | 0;
       HEAP32[$Ex >> 2] = $call511;
       if (!$call511) $retval$24 = 0; else $retval$24 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, 52957, $Ex) | 0;
       $retval$25 = $retval$24;
      }
      $retval$49 = $retval$25;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 113:
   {
    if ((HEAP8[$0 + 1 >> 0] | 0) != 117) {
     $retval$49 = 0;
     break L1;
    }
    HEAP32[$this >> 2] = $0 + 2;
    $call527 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    $call528 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527) | 0;
    HEAP32[$agg$tmp593$byval_copy >> 2] = $call528;
    if (!$call528) $retval$28 = 0; else {
     $call534 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527) | 0;
     HEAP32[$Ex >> 2] = $call534;
     if (!$call534) $retval$27 = 0; else {
      $call540 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527) | 0;
      HEAP32[$RHS538 >> 2] = $call540;
      if (!$call540) $retval$26 = 0; else $retval$26 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex, $RHS538) | 0;
      $retval$27 = $retval$26;
     }
     $retval$28 = $retval$27;
    }
    $retval$49 = $retval$28;
    break L1;
    break;
   }
  case 114:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 99:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call557 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call558 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call557) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call558;
      if (!$call558) $retval$30 = 0; else {
       $call564 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call557) | 0;
       HEAP32[$Ex >> 2] = $call564;
       if (!$call564) $retval$29 = 0; else $retval$29 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$30 = $retval$29;
      }
      $retval$49 = $retval$30;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call574 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp575, 52960);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp575 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp575 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call574, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 77:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call580 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp581, 52962);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp581 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp581 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call580, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call586 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp587, 52965);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp587 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp587 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call586, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call592 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp593, 52968);
      HEAP32[$agg$tmp593$byval_copy >> 2] = HEAP32[$agg$tmp593 >> 2];
      HEAP32[$agg$tmp593$byval_copy + 4 >> 2] = HEAP32[$agg$tmp593 + 4 >> 2];
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call592, $agg$tmp593$byval_copy) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 115:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 99:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call604 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call605 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call604) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call605;
      if (!$call605) $retval$32 = 0; else {
       $call611 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call604) | 0;
       HEAP32[$Ex >> 2] = $call611;
       if (!$call611) $retval$31 = 0; else $retval$31 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
       $retval$32 = $retval$31;
      }
      $retval$49 = $retval$32;
      break L1;
      break;
     }
    case 112:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call622 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call622;
      if (!$call622) $retval$33 = 0; else $retval$33 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$33;
      break L1;
      break;
     }
    case 114:
     {
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call636 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call636;
      if (!$call636) $retval$34 = 0; else $retval$34 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 52972, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$34;
      break L1;
      break;
     }
    case 122:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call647 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call647;
      if (!$call647) $retval$35 = 0; else $retval$35 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 52972, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$35;
      break L1;
      break;
     }
    case 90:
     {
      HEAP32[$this >> 2] = $0 + 2;
      switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
      case 84:
       {
        $call662 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
        HEAP32[$agg$tmp593$byval_copy >> 2] = $call662;
        if (!$call662) $retval$36 = 0; else $retval$36 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
        $retval$49 = $retval$36;
        break L1;
        break;
       }
      case 102:
       {
        $call673 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
        HEAP32[$agg$tmp593$byval_copy >> 2] = $call673;
        if (!$call673) $retval$37 = 0; else $retval$37 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
        $retval$49 = $retval$37;
        break L1;
        break;
       }
      default:
       {
        $retval$49 = 0;
        break L1;
       }
      }
      break;
     }
    case 80:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $Names684 = $this + 8 | 0;
      $call685 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names684) | 0;
      while (1) {
       if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
        label = 172;
        break;
       }
       $call691 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
       HEAP32[$agg$tmp593$byval_copy >> 2] = $call691;
       if (!$call691) {
        label = 171;
        break;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names684, $agg$tmp593$byval_copy);
      }
      if ((label | 0) == 171) {
       $retval$49 = 0;
       break L1;
      } else if ((label | 0) == 172) {
       __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Ex, $this, $call685);
       HEAP32[$agg$tmp593$byval_copy >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $Ex) | 0;
       $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
       break L1;
      }
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 116:
   {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 101:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call718 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call718;
      if (!$call718) $retval$42 = 0; else $retval$42 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 52981, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$42;
      break L1;
      break;
     }
    case 105:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call729 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call729;
      if (!$call729) $retval$43 = 0; else $retval$43 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 52981, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$43;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call739 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
      $call740 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call739) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call740;
      do if (!$call740) $retval$47 = 0; else {
       $Names745 = $this + 8 | 0;
       $call746 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names745) | 0;
       while (1) {
        if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
         label = 186;
         break;
        }
        $call753 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call739) | 0;
        HEAP32[$Ex >> 2] = $call753;
        if (!$call753) {
         label = 185;
         break;
        }
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names745, $Ex);
       }
       if ((label | 0) == 185) {
        $retval$47 = 0;
        break;
       } else if ((label | 0) == 186) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Ex, $this, $call746);
        $retval$47 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $agg$tmp593$byval_copy, $Ex) | 0;
        break;
       }
      } while (0);
      $retval$49 = $retval$47;
      break L1;
      break;
     }
    case 114:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this, 52990) | 0;
      break L1;
      break;
     }
    case 119:
     {
      HEAP32[$this >> 2] = $0 + 2;
      $call775 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
      HEAP32[$agg$tmp593$byval_copy >> 2] = $call775;
      if (!$call775) $retval$48 = 0; else $retval$48 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp593$byval_copy) | 0;
      $retval$49 = $retval$48;
      break L1;
      break;
     }
    default:
     {
      $retval$49 = 0;
      break L1;
     }
    }
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
   {
    $retval$49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    break L1;
    break;
   }
  default:
   {
    $retval$49 = 0;
    break L1;
   }
  } while (0);
 } while (0);
 STACKTOP = sp;
 return $retval$49 | 0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i185Z2D = 0, $$pre$phi$i48$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $110 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $169 = 0, $172 = 0, $173 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $19 = 0, $190 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$011$i$i = 0, $K305$010$i$i = 0, $K373$017$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i173 = 0, $R$1$i173$be = 0, $R$1$i173$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i177 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0, $RP$1$i172 = 0, $RP$1$i172$be = 0, $RP$1$i172$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i50$i = 0, $T$010$i$i = 0, $T$016$i = 0, $T$09$i$i = 0, $add$i$i = 0, $add$i188 = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i164 = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr17$i$i = 0, $add$ptr193 = 0, $add$ptr2$i$i = 0, $add$ptr227$i = 0, $add$ptr262$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i28$i = 0, $add$ptr4$i57$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0, $add$ptr95 = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i191 = 0, $add177$i = 0, $add215$i = 0, $add26$i$i = 0, $add268$i = 0, $add278$i$i = 0, $add346$i = 0, $add54$i = 0, $add64 = 0, $add8 = 0, $add83$i$i = 0, $add9$i = 0, $and$i145 = 0, $and104$i = 0, $and11$i = 0, $and12$i = 0, $and13$i = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and3$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and37$i$i = 0, $and41 = 0, $and46 = 0, $and49 = 0, $and53 = 0, $and57 = 0, $and6$i = 0, $and61 = 0, $and64$i = 0, $and69$i$i = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and89$i = 0, $and9$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i39$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx143$i$i = 0, $arrayidx151$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i174 = 0, $arrayidx184$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx223$i$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx394$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk136$i = 0, $bk47$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$2$ph$i = 0, $call131$i = 0, $call132$i = 0, $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp102$i = 0, $cmp141$i = 0, $cmp32$i = 0, $cond = 0, $cond$i$i$i = 0, $cond$i20$i = 0, $cond$i56$i = 0, $cond115$i = 0, $cond13$i$i = 0, $cond5$i = 0, $fd139$i = 0, $fd148$i$i = 0, $fd344$i$i = 0, $fd416$i = 0, $fd50$i = 0, $fd59$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd85$i$i = 0, $fd9 = 0, $head$i$i = 0, $head179 = 0, $head182$i = 0, $head208$i$i = 0, $head25 = 0, $head274$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg$i190 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i154 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$420$i = 0, $rsize$420$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $shl$i146 = 0, $shl105 = 0, $shl198$i = 0, $shl22 = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl362$i = 0, $shl37 = 0, $shl39$i$i = 0, $shl60$i = 0, $shl70$i$i = 0, $shl75$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i$i = 0, $shr$i141 = 0, $shr$i36$i = 0, $shr101 = 0, $shr11$i = 0, $shr15$i = 0, $shr194$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr318$i = 0, $shr4$i = 0, $shr47 = 0, $shr51 = 0, $shr55 = 0, $shr58$i$i = 0, $shr59 = 0, $shr7$i = 0, $shr75$i = 0, $shr79$i = 0, $shr83$i = 0, $shr87$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0116$i = 0, $sp$1115$i = 0, $spec$select$i159 = 0, $spec$select100$i = 0, $spec$select3$i = 0, $ssize$2$ph$i = 0, $sub$i140 = 0, $sub$i189 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub101$i = 0, $sub112$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub260$i = 0, $sub31$i = 0, $sub33$i = 0, $sub41$i = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i58$i = 0, $sub70$i = 0, $sub91 = 0, $t$0$i = 0, $t$0$i153 = 0, $t$2$i = 0, $t$4$i = 0, $t$519$i = 0, $t$519$i$ph = 0, $tbase$799$i = 0, $tsize$2687886$i = 0, $tsize$4$i = 0, $tsize$798$i = 0, $v$0$i = 0, $v$0$i155 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i222 = 0, $v$4$lcssa$i = 0, $v$421$i = 0, $v$421$i$ph = 0, label = 0, sp = 0, $181$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $magic$i$i = sp;
 do if ($bytes >>> 0 < 245) {
  $cond = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $shr = $cond >>> 3;
  $0 = HEAP32[548307] | 0;
  $shr3 = $0 >>> $shr;
  if ($shr3 & 3 | 0) {
   $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
   $arrayidx = 2193268 + ($add8 << 1 << 2) | 0;
   $1 = $arrayidx + 8 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $fd9 = $2 + 8 | 0;
   $3 = HEAP32[$fd9 >> 2] | 0;
   do if (($3 | 0) == ($arrayidx | 0)) HEAP32[548307] = $0 & ~(1 << $add8); else {
    if ((HEAP32[548311] | 0) >>> 0 > $3 >>> 0) _abort();
    $bk = $3 + 12 | 0;
    if ((HEAP32[$bk >> 2] | 0) == ($2 | 0)) {
     HEAP32[$bk >> 2] = $arrayidx;
     HEAP32[$1 >> 2] = $3;
     break;
    } else _abort();
   } while (0);
   $shl22 = $add8 << 3;
   HEAP32[$2 + 4 >> 2] = $shl22 | 3;
   $head25 = $2 + $shl22 + 4 | 0;
   HEAP32[$head25 >> 2] = HEAP32[$head25 >> 2] | 1;
   $retval$0 = $fd9;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $7 = HEAP32[548309] | 0;
  if ($cond >>> 0 > $7 >>> 0) {
   if ($shr3 | 0) {
    $shl37 = 2 << $shr;
    $and41 = $shr3 << $shr & ($shl37 | 0 - $shl37);
    $sub44 = ($and41 & 0 - $and41) + -1 | 0;
    $and46 = $sub44 >>> 12 & 16;
    $shr47 = $sub44 >>> $and46;
    $and49 = $shr47 >>> 5 & 8;
    $shr51 = $shr47 >>> $and49;
    $and53 = $shr51 >>> 2 & 4;
    $shr55 = $shr51 >>> $and53;
    $and57 = $shr55 >>> 1 & 2;
    $shr59 = $shr55 >>> $and57;
    $and61 = $shr59 >>> 1 & 1;
    $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> $and61) | 0;
    $arrayidx66 = 2193268 + ($add64 << 1 << 2) | 0;
    $8 = $arrayidx66 + 8 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $fd69 = $9 + 8 | 0;
    $10 = HEAP32[$fd69 >> 2] | 0;
    do if (($10 | 0) == ($arrayidx66 | 0)) {
     $and74 = $0 & ~(1 << $add64);
     HEAP32[548307] = $and74;
     $14 = $and74;
    } else {
     if ((HEAP32[548311] | 0) >>> 0 > $10 >>> 0) _abort();
     $bk78 = $10 + 12 | 0;
     if ((HEAP32[$bk78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$bk78 >> 2] = $arrayidx66;
      HEAP32[$8 >> 2] = $10;
      $14 = $0;
      break;
     } else _abort();
    } while (0);
    $shl90 = $add64 << 3;
    $sub91 = $shl90 - $cond | 0;
    HEAP32[$9 + 4 >> 2] = $cond | 3;
    $add$ptr95 = $9 + $cond | 0;
    HEAP32[$add$ptr95 + 4 >> 2] = $sub91 | 1;
    HEAP32[$9 + $shl90 >> 2] = $sub91;
    if ($7 | 0) {
     $13 = HEAP32[548312] | 0;
     $shr101 = $7 >>> 3;
     $arrayidx103 = 2193268 + ($shr101 << 1 << 2) | 0;
     $shl105 = 1 << $shr101;
     if (!($14 & $shl105)) {
      HEAP32[548307] = $14 | $shl105;
      $$pre$phiZ2D = $arrayidx103 + 8 | 0;
      $F104$0 = $arrayidx103;
     } else {
      $15 = $arrayidx103 + 8 | 0;
      $16 = HEAP32[$15 >> 2] | 0;
      if ((HEAP32[548311] | 0) >>> 0 > $16 >>> 0) _abort(); else {
       $$pre$phiZ2D = $15;
       $F104$0 = $16;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $13;
     HEAP32[$F104$0 + 12 >> 2] = $13;
     HEAP32[$13 + 8 >> 2] = $F104$0;
     HEAP32[$13 + 12 >> 2] = $arrayidx103;
    }
    HEAP32[548309] = $sub91;
    HEAP32[548312] = $add$ptr95;
    $retval$0 = $fd69;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $18 = HEAP32[548308] | 0;
   if (!$18) $nb$0 = $cond; else {
    $sub2$i = ($18 & 0 - $18) + -1 | 0;
    $and3$i = $sub2$i >>> 12 & 16;
    $shr4$i = $sub2$i >>> $and3$i;
    $and6$i = $shr4$i >>> 5 & 8;
    $shr7$i = $shr4$i >>> $and6$i;
    $and9$i = $shr7$i >>> 2 & 4;
    $shr11$i = $shr7$i >>> $and9$i;
    $and13$i = $shr11$i >>> 1 & 2;
    $shr15$i = $shr11$i >>> $and13$i;
    $and17$i = $shr15$i >>> 1 & 1;
    $19 = HEAP32[2193532 + (($and6$i | $and3$i | $and9$i | $and13$i | $and17$i) + ($shr15$i >>> $and17$i) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$19 + 4 >> 2] & -8) - $cond | 0;
    $t$0$i = $19;
    $v$0$i = $19;
    while (1) {
     $21 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$21) {
      $22 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$22) break; else $cond5$i = $22;
     } else $cond5$i = $21;
     $sub31$i = (HEAP32[$cond5$i + 4 >> 2] & -8) - $cond | 0;
     $cmp32$i = $sub31$i >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
     $t$0$i = $cond5$i;
     $v$0$i = $cmp32$i ? $cond5$i : $v$0$i;
    }
    $24 = HEAP32[548311] | 0;
    if ($24 >>> 0 > $v$0$i >>> 0) _abort();
    $add$ptr$i = $v$0$i + $cond | 0;
    if ($add$ptr$i >>> 0 <= $v$0$i >>> 0) _abort();
    $25 = HEAP32[$v$0$i + 24 >> 2] | 0;
    $26 = HEAP32[$v$0$i + 12 >> 2] | 0;
    do if (($26 | 0) == ($v$0$i | 0)) {
     $arrayidx61$i = $v$0$i + 20 | 0;
     $30 = HEAP32[$arrayidx61$i >> 2] | 0;
     if (!$30) {
      $arrayidx65$i = $v$0$i + 16 | 0;
      $31 = HEAP32[$arrayidx65$i >> 2] | 0;
      if (!$31) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i$ph = $31;
       $RP$1$i$ph = $arrayidx65$i;
      }
     } else {
      $R$1$i$ph = $30;
      $RP$1$i$ph = $arrayidx61$i;
     }
     $R$1$i = $R$1$i$ph;
     $RP$1$i = $RP$1$i$ph;
     while (1) {
      $arrayidx71$i = $R$1$i + 20 | 0;
      $32 = HEAP32[$arrayidx71$i >> 2] | 0;
      if (!$32) {
       $arrayidx75$i = $R$1$i + 16 | 0;
       $33 = HEAP32[$arrayidx75$i >> 2] | 0;
       if (!$33) break; else {
        $R$1$i$be = $33;
        $RP$1$i$be = $arrayidx75$i;
       }
      } else {
       $R$1$i$be = $32;
       $RP$1$i$be = $arrayidx71$i;
      }
      $R$1$i = $R$1$i$be;
      $RP$1$i = $RP$1$i$be;
     }
     if ($24 >>> 0 > $RP$1$i >>> 0) _abort(); else {
      HEAP32[$RP$1$i >> 2] = 0;
      $R$3$i = $R$1$i;
      break;
     }
    } else {
     $27 = HEAP32[$v$0$i + 8 >> 2] | 0;
     if ($24 >>> 0 > $27 >>> 0) _abort();
     $bk47$i = $27 + 12 | 0;
     if ((HEAP32[$bk47$i >> 2] | 0) != ($v$0$i | 0)) _abort();
     $fd50$i = $26 + 8 | 0;
     if ((HEAP32[$fd50$i >> 2] | 0) == ($v$0$i | 0)) {
      HEAP32[$bk47$i >> 2] = $26;
      HEAP32[$fd50$i >> 2] = $27;
      $R$3$i = $26;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($25 | 0) {
     $34 = HEAP32[$v$0$i + 28 >> 2] | 0;
     $arrayidx94$i = 2193532 + ($34 << 2) | 0;
     do if (($v$0$i | 0) == (HEAP32[$arrayidx94$i >> 2] | 0)) {
      HEAP32[$arrayidx94$i >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[548308] = $18 & ~(1 << $34);
       break L78;
      }
     } else if ((HEAP32[548311] | 0) >>> 0 > $25 >>> 0) _abort(); else {
      $arrayidx113$i = $25 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx113$i >> 2] | 0) == ($v$0$i | 0) ? $arrayidx113$i : $25 + 20 | 0) >> 2] = $R$3$i;
      if (!$R$3$i) break L78; else break;
     } while (0);
     $38 = HEAP32[548311] | 0;
     if ($38 >>> 0 > $R$3$i >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $25;
     $39 = HEAP32[$v$0$i + 16 >> 2] | 0;
     do if ($39 | 0) if ($38 >>> 0 > $39 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $39;
      HEAP32[$39 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $40 = HEAP32[$v$0$i + 20 >> 2] | 0;
     if ($40 | 0) if ((HEAP32[548311] | 0) >>> 0 > $40 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $40;
      HEAP32[$40 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i >>> 0 < 16) {
     $add177$i = $rsize$0$i + $cond | 0;
     HEAP32[$v$0$i + 4 >> 2] = $add177$i | 3;
     $head182$i = $v$0$i + $add177$i + 4 | 0;
     HEAP32[$head182$i >> 2] = HEAP32[$head182$i >> 2] | 1;
    } else {
     HEAP32[$v$0$i + 4 >> 2] = $cond | 3;
     HEAP32[$add$ptr$i + 4 >> 2] = $rsize$0$i | 1;
     HEAP32[$add$ptr$i + $rsize$0$i >> 2] = $rsize$0$i;
     if ($7 | 0) {
      $43 = HEAP32[548312] | 0;
      $shr194$i = $7 >>> 3;
      $arrayidx196$i = 2193268 + ($shr194$i << 1 << 2) | 0;
      $shl198$i = 1 << $shr194$i;
      if (!($shl198$i & $0)) {
       HEAP32[548307] = $shl198$i | $0;
       $$pre$phi$iZ2D = $arrayidx196$i + 8 | 0;
       $F197$0$i = $arrayidx196$i;
      } else {
       $44 = $arrayidx196$i + 8 | 0;
       $45 = HEAP32[$44 >> 2] | 0;
       if ((HEAP32[548311] | 0) >>> 0 > $45 >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $44;
        $F197$0$i = $45;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $43;
      HEAP32[$F197$0$i + 12 >> 2] = $43;
      HEAP32[$43 + 8 >> 2] = $F197$0$i;
      HEAP32[$43 + 12 >> 2] = $arrayidx196$i;
     }
     HEAP32[548309] = $rsize$0$i;
     HEAP32[548312] = $add$ptr$i;
    }
    $retval$0 = $v$0$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  } else $nb$0 = $cond;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $add144 = $bytes + 11 | 0;
  $and145 = $add144 & -8;
  $47 = HEAP32[548308] | 0;
  if (!$47) $nb$0 = $and145; else {
   $sub$i140 = 0 - $and145 | 0;
   $shr$i141 = $add144 >>> 8;
   if (!$shr$i141) $idx$0$i = 0; else if ($and145 >>> 0 > 16777215) $idx$0$i = 31; else {
    $and$i145 = ($shr$i141 + 1048320 | 0) >>> 16 & 8;
    $shl$i146 = $shr$i141 << $and$i145;
    $and8$i = ($shl$i146 + 520192 | 0) >>> 16 & 4;
    $shl9$i = $shl$i146 << $and8$i;
    $and12$i = ($shl9$i + 245760 | 0) >>> 16 & 2;
    $add17$i = 14 - ($and8$i | $and$i145 | $and12$i) + ($shl9$i << $and12$i >>> 15) | 0;
    $idx$0$i = $and145 >>> ($add17$i + 7 | 0) & 1 | $add17$i << 1;
   }
   $48 = HEAP32[2193532 + ($idx$0$i << 2) >> 2] | 0;
   L122 : do if (!$48) {
    $rsize$3$i = $sub$i140;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 85;
   } else {
    $rsize$0$i154 = $sub$i140;
    $rst$0$i = 0;
    $sizebits$0$i = $and145 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i153 = $48;
    $v$0$i155 = 0;
    while (1) {
     $sub33$i = (HEAP32[$t$0$i153 + 4 >> 2] & -8) - $and145 | 0;
     if ($sub33$i >>> 0 < $rsize$0$i154 >>> 0) if (!$sub33$i) {
      $rsize$420$i$ph = 0;
      $t$519$i$ph = $t$0$i153;
      $v$421$i$ph = $t$0$i153;
      label = 89;
      break L122;
     } else {
      $rsize$1$i = $sub33$i;
      $v$1$i = $t$0$i153;
     } else {
      $rsize$1$i = $rsize$0$i154;
      $v$1$i = $v$0$i155;
     }
     $50 = HEAP32[$t$0$i153 + 20 >> 2] | 0;
     $t$0$i153 = HEAP32[$t$0$i153 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($50 | 0) == 0 | ($50 | 0) == ($t$0$i153 | 0) ? $rst$0$i : $50;
     if (!$t$0$i153) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 85;
      break;
     } else {
      $rsize$0$i154 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i155 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $shl60$i = 2 << $idx$0$i;
     $and64$i = ($shl60$i | 0 - $shl60$i) & $47;
     if (!$and64$i) {
      $nb$0 = $and145;
      break;
     }
     $sub70$i = ($and64$i & 0 - $and64$i) + -1 | 0;
     $and73$i = $sub70$i >>> 12 & 16;
     $shr75$i = $sub70$i >>> $and73$i;
     $and77$i = $shr75$i >>> 5 & 8;
     $shr79$i = $shr75$i >>> $and77$i;
     $and81$i = $shr79$i >>> 2 & 4;
     $shr83$i = $shr79$i >>> $and81$i;
     $and85$i = $shr83$i >>> 1 & 2;
     $shr87$i = $shr83$i >>> $and85$i;
     $and89$i = $shr87$i >>> 1 & 1;
     $t$4$i = HEAP32[2193532 + (($and77$i | $and73$i | $and81$i | $and85$i | $and89$i) + ($shr87$i >>> $and89$i) << 2) >> 2] | 0;
     $v$3$i222 = 0;
    } else {
     $t$4$i = $t$2$i;
     $v$3$i222 = $v$3$i;
    }
    if (!$t$4$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i222;
    } else {
     $rsize$420$i$ph = $rsize$3$i;
     $t$519$i$ph = $t$4$i;
     $v$421$i$ph = $v$3$i222;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $rsize$420$i = $rsize$420$i$ph;
    $t$519$i = $t$519$i$ph;
    $v$421$i = $v$421$i$ph;
    while (1) {
     $sub101$i = (HEAP32[$t$519$i + 4 >> 2] & -8) - $and145 | 0;
     $cmp102$i = $sub101$i >>> 0 < $rsize$420$i >>> 0;
     $spec$select$i159 = $cmp102$i ? $sub101$i : $rsize$420$i;
     $spec$select3$i = $cmp102$i ? $t$519$i : $v$421$i;
     $54 = HEAP32[$t$519$i + 16 >> 2] | 0;
     if (!$54) $cond115$i = HEAP32[$t$519$i + 20 >> 2] | 0; else $cond115$i = $54;
     if (!$cond115$i) {
      $rsize$4$lcssa$i = $spec$select$i159;
      $v$4$lcssa$i = $spec$select3$i;
      break;
     } else {
      $rsize$420$i = $spec$select$i159;
      $t$519$i = $cond115$i;
      $v$421$i = $spec$select3$i;
     }
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $and145; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[548309] | 0) - $and145 | 0) >>> 0) {
    $57 = HEAP32[548311] | 0;
    if ($57 >>> 0 > $v$4$lcssa$i >>> 0) _abort();
    $add$ptr$i164 = $v$4$lcssa$i + $and145 | 0;
    if ($add$ptr$i164 >>> 0 <= $v$4$lcssa$i >>> 0) _abort();
    $58 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $59 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($59 | 0) == ($v$4$lcssa$i | 0)) {
     $arrayidx151$i = $v$4$lcssa$i + 20 | 0;
     $63 = HEAP32[$arrayidx151$i >> 2] | 0;
     if (!$63) {
      $arrayidx155$i = $v$4$lcssa$i + 16 | 0;
      $64 = HEAP32[$arrayidx155$i >> 2] | 0;
      if (!$64) {
       $R$3$i177 = 0;
       break;
      } else {
       $R$1$i173$ph = $64;
       $RP$1$i172$ph = $arrayidx155$i;
      }
     } else {
      $R$1$i173$ph = $63;
      $RP$1$i172$ph = $arrayidx151$i;
     }
     $R$1$i173 = $R$1$i173$ph;
     $RP$1$i172 = $RP$1$i172$ph;
     while (1) {
      $arrayidx161$i = $R$1$i173 + 20 | 0;
      $65 = HEAP32[$arrayidx161$i >> 2] | 0;
      if (!$65) {
       $arrayidx165$i174 = $R$1$i173 + 16 | 0;
       $66 = HEAP32[$arrayidx165$i174 >> 2] | 0;
       if (!$66) break; else {
        $R$1$i173$be = $66;
        $RP$1$i172$be = $arrayidx165$i174;
       }
      } else {
       $R$1$i173$be = $65;
       $RP$1$i172$be = $arrayidx161$i;
      }
      $R$1$i173 = $R$1$i173$be;
      $RP$1$i172 = $RP$1$i172$be;
     }
     if ($57 >>> 0 > $RP$1$i172 >>> 0) _abort(); else {
      HEAP32[$RP$1$i172 >> 2] = 0;
      $R$3$i177 = $R$1$i173;
      break;
     }
    } else {
     $60 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($57 >>> 0 > $60 >>> 0) _abort();
     $bk136$i = $60 + 12 | 0;
     if ((HEAP32[$bk136$i >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $fd139$i = $59 + 8 | 0;
     if ((HEAP32[$fd139$i >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$bk136$i >> 2] = $59;
      HEAP32[$fd139$i >> 2] = $60;
      $R$3$i177 = $59;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$58) $80 = $47; else {
     $67 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $arrayidx184$i = 2193532 + ($67 << 2) | 0;
     do if (($v$4$lcssa$i | 0) == (HEAP32[$arrayidx184$i >> 2] | 0)) {
      HEAP32[$arrayidx184$i >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $and194$i = $47 & ~(1 << $67);
       HEAP32[548308] = $and194$i;
       $80 = $and194$i;
       break L176;
      }
     } else if ((HEAP32[548311] | 0) >>> 0 > $58 >>> 0) _abort(); else {
      $arrayidx204$i = $58 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx204$i >> 2] | 0) == ($v$4$lcssa$i | 0) ? $arrayidx204$i : $58 + 20 | 0) >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $80 = $47;
       break L176;
      } else break;
     } while (0);
     $71 = HEAP32[548311] | 0;
     if ($71 >>> 0 > $R$3$i177 >>> 0) _abort();
     HEAP32[$R$3$i177 + 24 >> 2] = $58;
     $72 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($72 | 0) if ($71 >>> 0 > $72 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 16 >> 2] = $72;
      HEAP32[$72 + 24 >> 2] = $R$3$i177;
      break;
     } while (0);
     $73 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if (!$73) $80 = $47; else if ((HEAP32[548311] | 0) >>> 0 > $73 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 20 >> 2] = $73;
      HEAP32[$73 + 24 >> 2] = $R$3$i177;
      $80 = $47;
      break;
     }
    } while (0);
    L200 : do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $add268$i = $rsize$4$lcssa$i + $and145 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $add268$i | 3;
     $head274$i = $v$4$lcssa$i + $add268$i + 4 | 0;
     HEAP32[$head274$i >> 2] = HEAP32[$head274$i >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $and145 | 3;
     HEAP32[$add$ptr$i164 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$add$ptr$i164 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $shr283$i = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $arrayidx289$i = 2193268 + ($shr283$i << 1 << 2) | 0;
      $76 = HEAP32[548307] | 0;
      $shl291$i = 1 << $shr283$i;
      if (!($76 & $shl291$i)) {
       HEAP32[548307] = $76 | $shl291$i;
       $$pre$phi$i185Z2D = $arrayidx289$i + 8 | 0;
       $F290$0$i = $arrayidx289$i;
      } else {
       $77 = $arrayidx289$i + 8 | 0;
       $78 = HEAP32[$77 >> 2] | 0;
       if ((HEAP32[548311] | 0) >>> 0 > $78 >>> 0) _abort(); else {
        $$pre$phi$i185Z2D = $77;
        $F290$0$i = $78;
       }
      }
      HEAP32[$$pre$phi$i185Z2D >> 2] = $add$ptr$i164;
      HEAP32[$F290$0$i + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $F290$0$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $arrayidx289$i;
      break;
     }
     $shr318$i = $rsize$4$lcssa$i >>> 8;
     if (!$shr318$i) $I316$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I316$0$i = 31; else {
      $and331$i = ($shr318$i + 1048320 | 0) >>> 16 & 8;
      $shl333$i = $shr318$i << $and331$i;
      $and336$i = ($shl333$i + 520192 | 0) >>> 16 & 4;
      $shl338$i = $shl333$i << $and336$i;
      $and341$i = ($shl338$i + 245760 | 0) >>> 16 & 2;
      $add346$i = 14 - ($and336$i | $and331$i | $and341$i) + ($shl338$i << $and341$i >>> 15) | 0;
      $I316$0$i = $rsize$4$lcssa$i >>> ($add346$i + 7 | 0) & 1 | $add346$i << 1;
     }
     $arrayidx355$i = 2193532 + ($I316$0$i << 2) | 0;
     HEAP32[$add$ptr$i164 + 28 >> 2] = $I316$0$i;
     $child357$i = $add$ptr$i164 + 16 | 0;
     HEAP32[$child357$i + 4 >> 2] = 0;
     HEAP32[$child357$i >> 2] = 0;
     $shl362$i = 1 << $I316$0$i;
     if (!($80 & $shl362$i)) {
      HEAP32[548308] = $80 | $shl362$i;
      HEAP32[$arrayidx355$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 24 >> 2] = $arrayidx355$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
      break;
     }
     $81 = HEAP32[$arrayidx355$i >> 2] | 0;
     L218 : do if ((HEAP32[$81 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) $T$0$lcssa$i = $81; else {
      $K373$017$i = $rsize$4$lcssa$i << (($I316$0$i | 0) == 31 ? 0 : 25 - ($I316$0$i >>> 1) | 0);
      $T$016$i = $81;
      while (1) {
       $arrayidx394$i = $T$016$i + 16 + ($K373$017$i >>> 31 << 2) | 0;
       $83 = HEAP32[$arrayidx394$i >> 2] | 0;
       if (!$83) break;
       if ((HEAP32[$83 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
        $T$0$lcssa$i = $83;
        break L218;
       } else {
        $K373$017$i = $K373$017$i << 1;
        $T$016$i = $83;
       }
      }
      if ((HEAP32[548311] | 0) >>> 0 > $arrayidx394$i >>> 0) _abort(); else {
       HEAP32[$arrayidx394$i >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 24 >> 2] = $T$016$i;
       HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
       break L200;
      }
     } while (0);
     $fd416$i = $T$0$lcssa$i + 8 | 0;
     $86 = HEAP32[$fd416$i >> 2] | 0;
     $87 = HEAP32[548311] | 0;
     if ($87 >>> 0 <= $86 >>> 0 & $87 >>> 0 <= $T$0$lcssa$i >>> 0) {
      HEAP32[$86 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$fd416$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $86;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $T$0$lcssa$i;
      HEAP32[$add$ptr$i164 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $retval$0 = $v$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else $nb$0 = $and145;
  }
 } while (0);
 $89 = HEAP32[548309] | 0;
 if ($89 >>> 0 >= $nb$0 >>> 0) {
  $sub160 = $89 - $nb$0 | 0;
  $90 = HEAP32[548312] | 0;
  if ($sub160 >>> 0 > 15) {
   $add$ptr166 = $90 + $nb$0 | 0;
   HEAP32[548312] = $add$ptr166;
   HEAP32[548309] = $sub160;
   HEAP32[$add$ptr166 + 4 >> 2] = $sub160 | 1;
   HEAP32[$90 + $89 >> 2] = $sub160;
   HEAP32[$90 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[548309] = 0;
   HEAP32[548312] = 0;
   HEAP32[$90 + 4 >> 2] = $89 | 3;
   $head179 = $90 + $89 + 4 | 0;
   HEAP32[$head179 >> 2] = HEAP32[$head179 >> 2] | 1;
  }
  $retval$0 = $90 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $92 = HEAP32[548310] | 0;
 if ($92 >>> 0 > $nb$0 >>> 0) {
  $sub190 = $92 - $nb$0 | 0;
  HEAP32[548310] = $sub190;
  $93 = HEAP32[548313] | 0;
  $add$ptr193 = $93 + $nb$0 | 0;
  HEAP32[548313] = $add$ptr193;
  HEAP32[$add$ptr193 + 4 >> 2] = $sub190 | 1;
  HEAP32[$93 + 4 >> 2] = $nb$0 | 3;
  $retval$0 = $93 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(HEAP32[548425] | 0)) {
  HEAP32[548427] = 4096;
  HEAP32[548426] = 4096;
  HEAP32[548428] = -1;
  HEAP32[548429] = -1;
  HEAP32[548430] = 0;
  HEAP32[548418] = 0;
  HEAP32[548425] = $magic$i$i & -16 ^ 1431655768;
  $96 = 4096;
 } else $96 = HEAP32[548427] | 0;
 $add$i188 = $nb$0 + 48 | 0;
 $sub$i189 = $nb$0 + 47 | 0;
 $add9$i = $96 + $sub$i189 | 0;
 $neg$i190 = 0 - $96 | 0;
 $and11$i = $add9$i & $neg$i190;
 if ($and11$i >>> 0 <= $nb$0 >>> 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $97 = HEAP32[548417] | 0;
 if ($97 | 0) {
  $98 = HEAP32[548415] | 0;
  $add17$i191 = $98 + $and11$i | 0;
  if ($add17$i191 >>> 0 <= $98 >>> 0 | $add17$i191 >>> 0 > $97 >>> 0) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[548418] & 4)) {
  $100 = HEAP32[548313] | 0;
  L259 : do if (!$100) label = 173; else {
   $sp$0$i$i = 2193676;
   while (1) {
    $101 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($101 >>> 0 <= $100 >>> 0) if (($101 + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $100 >>> 0) break;
    $103 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$103) {
     label = 173;
     break L259;
    } else $sp$0$i$i = $103;
   }
   $and80$i = $add9$i - $92 & $neg$i190;
   if ($and80$i >>> 0 < 2147483647) {
    $call83$i = _sbrk($and80$i | 0) | 0;
    if (($call83$i | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0)) if (($call83$i | 0) == (-1 | 0)) $tsize$2687886$i = $and80$i; else {
     $tbase$799$i = $call83$i;
     $tsize$798$i = $and80$i;
     label = 190;
     break L257;
    } else {
     $br$2$ph$i = $call83$i;
     $ssize$2$ph$i = $and80$i;
     label = 181;
    }
   } else $tsize$2687886$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $call37$i = _sbrk(0) | 0;
   if (($call37$i | 0) == (-1 | 0)) $tsize$2687886$i = 0; else {
    $104 = $call37$i;
    $105 = HEAP32[548426] | 0;
    $sub41$i = $105 + -1 | 0;
    $spec$select100$i = (($sub41$i & $104 | 0) == 0 ? 0 : ($sub41$i + $104 & 0 - $105) - $104 | 0) + $and11$i | 0;
    $106 = HEAP32[548415] | 0;
    $add54$i = $spec$select100$i + $106 | 0;
    if ($spec$select100$i >>> 0 > $nb$0 >>> 0 & $spec$select100$i >>> 0 < 2147483647) {
     $107 = HEAP32[548417] | 0;
     if ($107 | 0) if ($add54$i >>> 0 <= $106 >>> 0 | $add54$i >>> 0 > $107 >>> 0) {
      $tsize$2687886$i = 0;
      break;
     }
     $call68$i = _sbrk($spec$select100$i | 0) | 0;
     if (($call68$i | 0) == ($call37$i | 0)) {
      $tbase$799$i = $call37$i;
      $tsize$798$i = $spec$select100$i;
      label = 190;
      break L257;
     } else {
      $br$2$ph$i = $call68$i;
      $ssize$2$ph$i = $spec$select100$i;
      label = 181;
     }
    } else $tsize$2687886$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $sub112$i = 0 - $ssize$2$ph$i | 0;
   if (!($add$i188 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0)))) if (($br$2$ph$i | 0) == (-1 | 0)) {
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   $110 = HEAP32[548427] | 0;
   $and104$i = $sub$i189 - $ssize$2$ph$i + $110 & 0 - $110;
   if ($and104$i >>> 0 >= 2147483647) {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($and104$i | 0) | 0) == (-1 | 0)) {
    _sbrk($sub112$i | 0) | 0;
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $and104$i + $ssize$2$ph$i | 0;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[548418] = HEAP32[548418] | 4;
  $tsize$4$i = $tsize$2687886$i;
  label = 188;
 } else {
  $tsize$4$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($and11$i >>> 0 < 2147483647) {
  $call131$i = _sbrk($and11$i | 0) | 0;
  $call132$i = _sbrk(0) | 0;
  $sub$ptr$sub$i = $call132$i - $call131$i | 0;
  $cmp141$i = $sub$ptr$sub$i >>> 0 > ($nb$0 + 40 | 0) >>> 0;
  if (!(($call131$i | 0) == (-1 | 0) | $cmp141$i ^ 1 | $call131$i >>> 0 < $call132$i >>> 0 & (($call131$i | 0) != (-1 | 0) & ($call132$i | 0) != (-1 | 0)) ^ 1)) {
   $tbase$799$i = $call131$i;
   $tsize$798$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $add150$i = (HEAP32[548415] | 0) + $tsize$798$i | 0;
  HEAP32[548415] = $add150$i;
  if ($add150$i >>> 0 > (HEAP32[548416] | 0) >>> 0) HEAP32[548416] = $add150$i;
  $114 = HEAP32[548313] | 0;
  L294 : do if (!$114) {
   $115 = HEAP32[548311] | 0;
   if (($115 | 0) == 0 | $tbase$799$i >>> 0 < $115 >>> 0) HEAP32[548311] = $tbase$799$i;
   HEAP32[548419] = $tbase$799$i;
   HEAP32[548420] = $tsize$798$i;
   HEAP32[548422] = 0;
   HEAP32[548316] = HEAP32[548425];
   HEAP32[548315] = -1;
   HEAP32[548320] = 2193268;
   HEAP32[548319] = 2193268;
   HEAP32[548322] = 2193276;
   HEAP32[548321] = 2193276;
   HEAP32[548324] = 2193284;
   HEAP32[548323] = 2193284;
   HEAP32[548326] = 2193292;
   HEAP32[548325] = 2193292;
   HEAP32[548328] = 2193300;
   HEAP32[548327] = 2193300;
   HEAP32[548330] = 2193308;
   HEAP32[548329] = 2193308;
   HEAP32[548332] = 2193316;
   HEAP32[548331] = 2193316;
   HEAP32[548334] = 2193324;
   HEAP32[548333] = 2193324;
   HEAP32[548336] = 2193332;
   HEAP32[548335] = 2193332;
   HEAP32[548338] = 2193340;
   HEAP32[548337] = 2193340;
   HEAP32[548340] = 2193348;
   HEAP32[548339] = 2193348;
   HEAP32[548342] = 2193356;
   HEAP32[548341] = 2193356;
   HEAP32[548344] = 2193364;
   HEAP32[548343] = 2193364;
   HEAP32[548346] = 2193372;
   HEAP32[548345] = 2193372;
   HEAP32[548348] = 2193380;
   HEAP32[548347] = 2193380;
   HEAP32[548350] = 2193388;
   HEAP32[548349] = 2193388;
   HEAP32[548352] = 2193396;
   HEAP32[548351] = 2193396;
   HEAP32[548354] = 2193404;
   HEAP32[548353] = 2193404;
   HEAP32[548356] = 2193412;
   HEAP32[548355] = 2193412;
   HEAP32[548358] = 2193420;
   HEAP32[548357] = 2193420;
   HEAP32[548360] = 2193428;
   HEAP32[548359] = 2193428;
   HEAP32[548362] = 2193436;
   HEAP32[548361] = 2193436;
   HEAP32[548364] = 2193444;
   HEAP32[548363] = 2193444;
   HEAP32[548366] = 2193452;
   HEAP32[548365] = 2193452;
   HEAP32[548368] = 2193460;
   HEAP32[548367] = 2193460;
   HEAP32[548370] = 2193468;
   HEAP32[548369] = 2193468;
   HEAP32[548372] = 2193476;
   HEAP32[548371] = 2193476;
   HEAP32[548374] = 2193484;
   HEAP32[548373] = 2193484;
   HEAP32[548376] = 2193492;
   HEAP32[548375] = 2193492;
   HEAP32[548378] = 2193500;
   HEAP32[548377] = 2193500;
   HEAP32[548380] = 2193508;
   HEAP32[548379] = 2193508;
   HEAP32[548382] = 2193516;
   HEAP32[548381] = 2193516;
   $sub172$i = $tsize$798$i + -40 | 0;
   $117 = $tbase$799$i + 8 | 0;
   $cond$i20$i = ($117 & 7 | 0) == 0 ? 0 : 0 - $117 & 7;
   $add$ptr4$i$i = $tbase$799$i + $cond$i20$i | 0;
   $sub5$i$i = $sub172$i - $cond$i20$i | 0;
   HEAP32[548313] = $add$ptr4$i$i;
   HEAP32[548310] = $sub5$i$i;
   HEAP32[$add$ptr4$i$i + 4 >> 2] = $sub5$i$i | 1;
   HEAP32[$tbase$799$i + $sub172$i + 4 >> 2] = 40;
   HEAP32[548314] = HEAP32[548429];
  } else {
   $sp$0116$i = 2193676;
   while (1) {
    $119 = HEAP32[$sp$0116$i >> 2] | 0;
    $120 = HEAP32[$sp$0116$i + 4 >> 2] | 0;
    if (($tbase$799$i | 0) == ($119 + $120 | 0)) {
     label = 199;
     break;
    }
    $121 = HEAP32[$sp$0116$i + 8 >> 2] | 0;
    if (!$121) break; else $sp$0116$i = $121;
   }
   if ((label | 0) == 199) {
    $size188$i$le = $sp$0116$i + 4 | 0;
    if (!(HEAP32[$sp$0116$i + 12 >> 2] & 8)) if ($tbase$799$i >>> 0 > $114 >>> 0 & $119 >>> 0 <= $114 >>> 0) {
     HEAP32[$size188$i$le >> 2] = $120 + $tsize$798$i;
     $add215$i = (HEAP32[548310] | 0) + $tsize$798$i | 0;
     $124 = $114 + 8 | 0;
     $cond$i56$i = ($124 & 7 | 0) == 0 ? 0 : 0 - $124 & 7;
     $add$ptr4$i57$i = $114 + $cond$i56$i | 0;
     $sub5$i58$i = $add215$i - $cond$i56$i | 0;
     HEAP32[548313] = $add$ptr4$i57$i;
     HEAP32[548310] = $sub5$i58$i;
     HEAP32[$add$ptr4$i57$i + 4 >> 2] = $sub5$i58$i | 1;
     HEAP32[$114 + $add215$i + 4 >> 2] = 40;
     HEAP32[548314] = HEAP32[548429];
     break;
    }
   }
   $126 = HEAP32[548311] | 0;
   if ($tbase$799$i >>> 0 < $126 >>> 0) {
    HEAP32[548311] = $tbase$799$i;
    $139 = $tbase$799$i;
   } else $139 = $126;
   $add$ptr227$i = $tbase$799$i + $tsize$798$i | 0;
   $sp$1115$i = 2193676;
   while (1) {
    if ((HEAP32[$sp$1115$i >> 2] | 0) == ($add$ptr227$i | 0)) {
     label = 207;
     break;
    }
    $128 = HEAP32[$sp$1115$i + 8 >> 2] | 0;
    if (!$128) break; else $sp$1115$i = $128;
   }
   if ((label | 0) == 207) if (!(HEAP32[$sp$1115$i + 12 >> 2] & 8)) {
    HEAP32[$sp$1115$i >> 2] = $tbase$799$i;
    $size245$i = $sp$1115$i + 4 | 0;
    HEAP32[$size245$i >> 2] = (HEAP32[$size245$i >> 2] | 0) + $tsize$798$i;
    $131 = $tbase$799$i + 8 | 0;
    $add$ptr4$i28$i = $tbase$799$i + (($131 & 7 | 0) == 0 ? 0 : 0 - $131 & 7) | 0;
    $132 = $add$ptr227$i + 8 | 0;
    $add$ptr16$i$i = $add$ptr227$i + (($132 & 7 | 0) == 0 ? 0 : 0 - $132 & 7) | 0;
    $add$ptr17$i$i = $add$ptr4$i28$i + $nb$0 | 0;
    $sub18$i$i = $add$ptr16$i$i - $add$ptr4$i28$i - $nb$0 | 0;
    HEAP32[$add$ptr4$i28$i + 4 >> 2] = $nb$0 | 3;
    L317 : do if (($114 | 0) == ($add$ptr16$i$i | 0)) {
     $add$i$i = (HEAP32[548310] | 0) + $sub18$i$i | 0;
     HEAP32[548310] = $add$i$i;
     HEAP32[548313] = $add$ptr17$i$i;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $add$i$i | 1;
    } else {
     if ((HEAP32[548312] | 0) == ($add$ptr16$i$i | 0)) {
      $add26$i$i = (HEAP32[548309] | 0) + $sub18$i$i | 0;
      HEAP32[548309] = $add26$i$i;
      HEAP32[548312] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 4 >> 2] = $add26$i$i | 1;
      HEAP32[$add$ptr17$i$i + $add26$i$i >> 2] = $add26$i$i;
      break;
     }
     $136 = HEAP32[$add$ptr16$i$i + 4 >> 2] | 0;
     if (($136 & 3 | 0) == 1) {
      $and37$i$i = $136 & -8;
      $shr$i36$i = $136 >>> 3;
      L325 : do if ($136 >>> 0 < 256) {
       $137 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
       $138 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       $arrayidx$i39$i = 2193268 + ($shr$i36$i << 1 << 2) | 0;
       do if (($137 | 0) != ($arrayidx$i39$i | 0)) {
        if ($139 >>> 0 > $137 >>> 0) _abort();
        if ((HEAP32[$137 + 12 >> 2] | 0) == ($add$ptr16$i$i | 0)) break;
        _abort();
       } while (0);
       if (($138 | 0) == ($137 | 0)) {
        HEAP32[548307] = HEAP32[548307] & ~(1 << $shr$i36$i);
        break;
       }
       do if (($138 | 0) == ($arrayidx$i39$i | 0)) $fd68$pre$phi$i$iZ2D = $138 + 8 | 0; else {
        if ($139 >>> 0 > $138 >>> 0) _abort();
        $fd59$i$i = $138 + 8 | 0;
        if ((HEAP32[$fd59$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         $fd68$pre$phi$i$iZ2D = $fd59$i$i;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$137 + 12 >> 2] = $138;
       HEAP32[$fd68$pre$phi$i$iZ2D >> 2] = $137;
      } else {
       $143 = HEAP32[$add$ptr16$i$i + 24 >> 2] | 0;
       $144 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       do if (($144 | 0) == ($add$ptr16$i$i | 0)) {
        $child$i$i = $add$ptr16$i$i + 16 | 0;
        $arrayidx96$i$i = $child$i$i + 4 | 0;
        $148 = HEAP32[$arrayidx96$i$i >> 2] | 0;
        if (!$148) {
         $149 = HEAP32[$child$i$i >> 2] | 0;
         if (!$149) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i$ph = $149;
          $RP$1$i$i$ph = $child$i$i;
         }
        } else {
         $R$1$i$i$ph = $148;
         $RP$1$i$i$ph = $arrayidx96$i$i;
        }
        $R$1$i$i = $R$1$i$i$ph;
        $RP$1$i$i = $RP$1$i$i$ph;
        while (1) {
         $arrayidx103$i$i = $R$1$i$i + 20 | 0;
         $150 = HEAP32[$arrayidx103$i$i >> 2] | 0;
         if (!$150) {
          $arrayidx107$i$i = $R$1$i$i + 16 | 0;
          $151 = HEAP32[$arrayidx107$i$i >> 2] | 0;
          if (!$151) break; else {
           $R$1$i$i$be = $151;
           $RP$1$i$i$be = $arrayidx107$i$i;
          }
         } else {
          $R$1$i$i$be = $150;
          $RP$1$i$i$be = $arrayidx103$i$i;
         }
         $R$1$i$i = $R$1$i$i$be;
         $RP$1$i$i = $RP$1$i$i$be;
        }
        if ($139 >>> 0 > $RP$1$i$i >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i >> 2] = 0;
         $R$3$i$i = $R$1$i$i;
         break;
        }
       } else {
        $145 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
        if ($139 >>> 0 > $145 >>> 0) _abort();
        $bk82$i$i = $145 + 12 | 0;
        if ((HEAP32[$bk82$i$i >> 2] | 0) != ($add$ptr16$i$i | 0)) _abort();
        $fd85$i$i = $144 + 8 | 0;
        if ((HEAP32[$fd85$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         HEAP32[$bk82$i$i >> 2] = $144;
         HEAP32[$fd85$i$i >> 2] = $145;
         $R$3$i$i = $144;
         break;
        } else _abort();
       } while (0);
       if (!$143) break;
       $152 = HEAP32[$add$ptr16$i$i + 28 >> 2] | 0;
       $arrayidx123$i$i = 2193532 + ($152 << 2) | 0;
       do if ((HEAP32[$arrayidx123$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
        HEAP32[$arrayidx123$i$i >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[548308] = HEAP32[548308] & ~(1 << $152);
        break L325;
       } else if ((HEAP32[548311] | 0) >>> 0 > $143 >>> 0) _abort(); else {
        $arrayidx143$i$i = $143 + 16 | 0;
        HEAP32[((HEAP32[$arrayidx143$i$i >> 2] | 0) == ($add$ptr16$i$i | 0) ? $arrayidx143$i$i : $143 + 20 | 0) >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L325; else break;
       } while (0);
       $157 = HEAP32[548311] | 0;
       if ($157 >>> 0 > $R$3$i$i >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $143;
       $child166$i$i = $add$ptr16$i$i + 16 | 0;
       $158 = HEAP32[$child166$i$i >> 2] | 0;
       do if ($158 | 0) if ($157 >>> 0 > $158 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $158;
        HEAP32[$158 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $159 = HEAP32[$child166$i$i + 4 >> 2] | 0;
       if (!$159) break;
       if ((HEAP32[548311] | 0) >>> 0 > $159 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $159;
        HEAP32[$159 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $add$ptr16$i$i + $and37$i$i | 0;
      $qsize$0$i$i = $and37$i$i + $sub18$i$i | 0;
     } else {
      $oldfirst$0$i$i = $add$ptr16$i$i;
      $qsize$0$i$i = $sub18$i$i;
     }
     $head208$i$i = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$head208$i$i >> 2] = HEAP32[$head208$i$i >> 2] & -2;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$add$ptr17$i$i + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $shr214$i$i = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $arrayidx223$i$i = 2193268 + ($shr214$i$i << 1 << 2) | 0;
      $162 = HEAP32[548307] | 0;
      $shl226$i$i = 1 << $shr214$i$i;
      do if (!($162 & $shl226$i$i)) {
       HEAP32[548307] = $162 | $shl226$i$i;
       $$pre$phi$i48$iZ2D = $arrayidx223$i$i + 8 | 0;
       $F224$0$i$i = $arrayidx223$i$i;
      } else {
       $163 = $arrayidx223$i$i + 8 | 0;
       $164 = HEAP32[$163 >> 2] | 0;
       if ((HEAP32[548311] | 0) >>> 0 <= $164 >>> 0) {
        $$pre$phi$i48$iZ2D = $163;
        $F224$0$i$i = $164;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i48$iZ2D >> 2] = $add$ptr17$i$i;
      HEAP32[$F224$0$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $F224$0$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $arrayidx223$i$i;
      break;
     }
     $shr253$i$i = $qsize$0$i$i >>> 8;
     do if (!$shr253$i$i) $I252$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I252$0$i$i = 31;
       break;
      }
      $and264$i$i = ($shr253$i$i + 1048320 | 0) >>> 16 & 8;
      $shl265$i$i = $shr253$i$i << $and264$i$i;
      $and268$i$i = ($shl265$i$i + 520192 | 0) >>> 16 & 4;
      $shl270$i$i = $shl265$i$i << $and268$i$i;
      $and273$i$i = ($shl270$i$i + 245760 | 0) >>> 16 & 2;
      $add278$i$i = 14 - ($and268$i$i | $and264$i$i | $and273$i$i) + ($shl270$i$i << $and273$i$i >>> 15) | 0;
      $I252$0$i$i = $qsize$0$i$i >>> ($add278$i$i + 7 | 0) & 1 | $add278$i$i << 1;
     } while (0);
     $arrayidx287$i$i = 2193532 + ($I252$0$i$i << 2) | 0;
     HEAP32[$add$ptr17$i$i + 28 >> 2] = $I252$0$i$i;
     $child289$i$i = $add$ptr17$i$i + 16 | 0;
     HEAP32[$child289$i$i + 4 >> 2] = 0;
     HEAP32[$child289$i$i >> 2] = 0;
     $166 = HEAP32[548308] | 0;
     $shl294$i$i = 1 << $I252$0$i$i;
     if (!($166 & $shl294$i$i)) {
      HEAP32[548308] = $166 | $shl294$i$i;
      HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = $arrayidx287$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
      break;
     }
     $167 = HEAP32[$arrayidx287$i$i >> 2] | 0;
     L410 : do if ((HEAP32[$167 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i50$i = $167; else {
      $K305$010$i$i = $qsize$0$i$i << (($I252$0$i$i | 0) == 31 ? 0 : 25 - ($I252$0$i$i >>> 1) | 0);
      $T$09$i$i = $167;
      while (1) {
       $arrayidx325$i$i = $T$09$i$i + 16 + ($K305$010$i$i >>> 31 << 2) | 0;
       $169 = HEAP32[$arrayidx325$i$i >> 2] | 0;
       if (!$169) break;
       if ((HEAP32[$169 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i50$i = $169;
        break L410;
       } else {
        $K305$010$i$i = $K305$010$i$i << 1;
        $T$09$i$i = $169;
       }
      }
      if ((HEAP32[548311] | 0) >>> 0 > $arrayidx325$i$i >>> 0) _abort(); else {
       HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 24 >> 2] = $T$09$i$i;
       HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
       break L317;
      }
     } while (0);
     $fd344$i$i = $T$0$lcssa$i50$i + 8 | 0;
     $172 = HEAP32[$fd344$i$i >> 2] | 0;
     $173 = HEAP32[548311] | 0;
     if ($173 >>> 0 <= $172 >>> 0 & $173 >>> 0 <= $T$0$lcssa$i50$i >>> 0) {
      HEAP32[$172 + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $172;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $T$0$lcssa$i50$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $retval$0 = $add$ptr4$i28$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $sp$0$i$i$i = 2193676;
   while (1) {
    $175 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($175 >>> 0 <= $114 >>> 0) {
     $add$ptr$i$i$i = $175 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($add$ptr$i$i$i >>> 0 > $114 >>> 0) break;
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $add$ptr2$i$i = $add$ptr$i$i$i + -47 | 0;
   $178 = $add$ptr2$i$i + 8 | 0;
   $add$ptr7$i$i = $add$ptr2$i$i + (($178 & 7 | 0) == 0 ? 0 : 0 - $178 & 7) | 0;
   $add$ptr81$i$i = $114 + 16 | 0;
   $cond13$i$i = $add$ptr7$i$i >>> 0 < $add$ptr81$i$i >>> 0 ? $114 : $add$ptr7$i$i;
   $add$ptr14$i$i = $cond13$i$i + 8 | 0;
   $sub16$i$i = $tsize$798$i + -40 | 0;
   $179 = $tbase$799$i + 8 | 0;
   $cond$i$i$i = ($179 & 7 | 0) == 0 ? 0 : 0 - $179 & 7;
   $add$ptr4$i$i$i = $tbase$799$i + $cond$i$i$i | 0;
   $sub5$i$i$i = $sub16$i$i - $cond$i$i$i | 0;
   HEAP32[548313] = $add$ptr4$i$i$i;
   HEAP32[548310] = $sub5$i$i$i;
   HEAP32[$add$ptr4$i$i$i + 4 >> 2] = $sub5$i$i$i | 1;
   HEAP32[$tbase$799$i + $sub16$i$i + 4 >> 2] = 40;
   HEAP32[548314] = HEAP32[548429];
   $head$i$i = $cond13$i$i + 4 | 0;
   HEAP32[$head$i$i >> 2] = 27;
   HEAP32[$add$ptr14$i$i >> 2] = HEAP32[548419];
   HEAP32[$add$ptr14$i$i + 4 >> 2] = HEAP32[548420];
   HEAP32[$add$ptr14$i$i + 8 >> 2] = HEAP32[548421];
   HEAP32[$add$ptr14$i$i + 12 >> 2] = HEAP32[548422];
   HEAP32[548419] = $tbase$799$i;
   HEAP32[548420] = $tsize$798$i;
   HEAP32[548422] = 0;
   HEAP32[548421] = $add$ptr14$i$i;
   $181 = $cond13$i$i + 24 | 0;
   do {
    $181$looptemp = $181;
    $181 = $181 + 4 | 0;
    HEAP32[$181 >> 2] = 7;
   } while (($181$looptemp + 8 | 0) >>> 0 < $add$ptr$i$i$i >>> 0);
   if (($cond13$i$i | 0) != ($114 | 0)) {
    $sub$ptr$sub$i$i = $cond13$i$i - $114 | 0;
    HEAP32[$head$i$i >> 2] = HEAP32[$head$i$i >> 2] & -2;
    HEAP32[$114 + 4 >> 2] = $sub$ptr$sub$i$i | 1;
    HEAP32[$cond13$i$i >> 2] = $sub$ptr$sub$i$i;
    $shr$i$i = $sub$ptr$sub$i$i >>> 3;
    if ($sub$ptr$sub$i$i >>> 0 < 256) {
     $arrayidx$i$i = 2193268 + ($shr$i$i << 1 << 2) | 0;
     $183 = HEAP32[548307] | 0;
     $shl39$i$i = 1 << $shr$i$i;
     if (!($183 & $shl39$i$i)) {
      HEAP32[548307] = $183 | $shl39$i$i;
      $$pre$phi$i$iZ2D = $arrayidx$i$i + 8 | 0;
      $F$0$i$i = $arrayidx$i$i;
     } else {
      $184 = $arrayidx$i$i + 8 | 0;
      $185 = HEAP32[$184 >> 2] | 0;
      if ((HEAP32[548311] | 0) >>> 0 > $185 >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $184;
       $F$0$i$i = $185;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $114;
     HEAP32[$F$0$i$i + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $F$0$i$i;
     HEAP32[$114 + 12 >> 2] = $arrayidx$i$i;
     break;
    }
    $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
    if (!$shr58$i$i) $I57$0$i$i = 0; else if ($sub$ptr$sub$i$i >>> 0 > 16777215) $I57$0$i$i = 31; else {
     $and69$i$i = ($shr58$i$i + 1048320 | 0) >>> 16 & 8;
     $shl70$i$i = $shr58$i$i << $and69$i$i;
     $and73$i$i = ($shl70$i$i + 520192 | 0) >>> 16 & 4;
     $shl75$i$i = $shl70$i$i << $and73$i$i;
     $and78$i$i = ($shl75$i$i + 245760 | 0) >>> 16 & 2;
     $add83$i$i = 14 - ($and73$i$i | $and69$i$i | $and78$i$i) + ($shl75$i$i << $and78$i$i >>> 15) | 0;
     $I57$0$i$i = $sub$ptr$sub$i$i >>> ($add83$i$i + 7 | 0) & 1 | $add83$i$i << 1;
    }
    $arrayidx91$i$i = 2193532 + ($I57$0$i$i << 2) | 0;
    HEAP32[$114 + 28 >> 2] = $I57$0$i$i;
    HEAP32[$114 + 20 >> 2] = 0;
    HEAP32[$add$ptr81$i$i >> 2] = 0;
    $187 = HEAP32[548308] | 0;
    $shl95$i$i = 1 << $I57$0$i$i;
    if (!($187 & $shl95$i$i)) {
     HEAP32[548308] = $187 | $shl95$i$i;
     HEAP32[$arrayidx91$i$i >> 2] = $114;
     HEAP32[$114 + 24 >> 2] = $arrayidx91$i$i;
     HEAP32[$114 + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $114;
     break;
    }
    $188 = HEAP32[$arrayidx91$i$i >> 2] | 0;
    L451 : do if ((HEAP32[$188 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) $T$0$lcssa$i$i = $188; else {
     $K105$011$i$i = $sub$ptr$sub$i$i << (($I57$0$i$i | 0) == 31 ? 0 : 25 - ($I57$0$i$i >>> 1) | 0);
     $T$010$i$i = $188;
     while (1) {
      $arrayidx126$i$i = $T$010$i$i + 16 + ($K105$011$i$i >>> 31 << 2) | 0;
      $190 = HEAP32[$arrayidx126$i$i >> 2] | 0;
      if (!$190) break;
      if ((HEAP32[$190 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) {
       $T$0$lcssa$i$i = $190;
       break L451;
      } else {
       $K105$011$i$i = $K105$011$i$i << 1;
       $T$010$i$i = $190;
      }
     }
     if ((HEAP32[548311] | 0) >>> 0 > $arrayidx126$i$i >>> 0) _abort(); else {
      HEAP32[$arrayidx126$i$i >> 2] = $114;
      HEAP32[$114 + 24 >> 2] = $T$010$i$i;
      HEAP32[$114 + 12 >> 2] = $114;
      HEAP32[$114 + 8 >> 2] = $114;
      break L294;
     }
    } while (0);
    $fd148$i$i = $T$0$lcssa$i$i + 8 | 0;
    $193 = HEAP32[$fd148$i$i >> 2] | 0;
    $194 = HEAP32[548311] | 0;
    if ($194 >>> 0 <= $193 >>> 0 & $194 >>> 0 <= $T$0$lcssa$i$i >>> 0) {
     HEAP32[$193 + 12 >> 2] = $114;
     HEAP32[$fd148$i$i >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $193;
     HEAP32[$114 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$114 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $196 = HEAP32[548310] | 0;
  if ($196 >>> 0 > $nb$0 >>> 0) {
   $sub260$i = $196 - $nb$0 | 0;
   HEAP32[548310] = $sub260$i;
   $197 = HEAP32[548313] | 0;
   $add$ptr262$i = $197 + $nb$0 | 0;
   HEAP32[548313] = $add$ptr262$i;
   HEAP32[$add$ptr262$i + 4 >> 2] = $sub260$i | 1;
   HEAP32[$197 + 4 >> 2] = $nb$0 | 3;
   $retval$0 = $197 + 8 | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbi__create_png_image_raw($a, $raw, $raw_len, $out_n, $x, $y, $depth, $color) {
 $a = $a | 0;
 $raw = $raw | 0;
 $raw_len = $raw_len | 0;
 $out_n = $out_n | 0;
 $x = $x | 0;
 $y = $y | 0;
 $depth = $depth | 0;
 $color = $color | 0;
 var $41 = 0, $430 = 0, $434 = 0, $441 = 0, $449 = 0, $453 = 0, $457 = 0, $461 = 0, $468 = 0, $473 = 0, $478 = 0, $486 = 0, $490 = 0, $494 = 0, $498 = 0, $502 = 0, $506 = 0, $510 = 0, $514 = 0, $521 = 0, $526 = 0, $531 = 0, $536 = 0, $541 = 0, $546 = 0, $551 = 0, $607 = 0, $a$addr = 0, $add$ptr496 = 0, $add$ptr498 = 0, $bytes = 0, $call = 0, $color$addr = 0, $cond505 = 0, $conv193 = 0, $conv205 = 0, $conv234 = 0, $conv241 = 0, $conv377 = 0, $conv389 = 0, $conv442 = 0, $conv449 = 0, $conv519 = 0, $conv525 = 0, $conv538 = 0, $conv554 = 0, $conv561 = 0, $conv568 = 0, $conv574 = 0, $conv587 = 0, $conv598 = 0, $conv609 = 0, $conv625 = 0, $conv632 = 0, $conv639 = 0, $conv646 = 0, $conv653 = 0, $conv660 = 0, $conv667 = 0, $conv673 = 0, $conv686 = 0, $conv697 = 0, $conv708 = 0, $conv719 = 0, $conv730 = 0, $conv741 = 0, $conv752 = 0, $conv86 = 0, $cur = 0, $cur16 = 0, $cur490 = 0, $cur826 = 0, $depth$addr = 0, $filter = 0, $filter_bytes = 0, $i = 0, $img_len = 0, $img_n = 0, $img_width_bytes = 0, $in = 0, $j = 0, $k = 0, $mul = 0, $mul17 = 0, $mul42 = 0, $mul829 = 0, $nk = 0, $out_n$addr = 0, $output_bytes = 0, $prior = 0, $q = 0, $raw$addr = 0, $raw_len$addr = 0, $retval = 0, $s = 0, $scale = 0, $stride = 0, $width = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $retval = sp + 116 | 0;
 $a$addr = sp + 112 | 0;
 $raw$addr = sp + 108 | 0;
 $raw_len$addr = sp + 104 | 0;
 $out_n$addr = sp + 100 | 0;
 $x$addr = sp + 96 | 0;
 $y$addr = sp + 92 | 0;
 $depth$addr = sp + 88 | 0;
 $color$addr = sp + 84 | 0;
 $bytes = sp + 80 | 0;
 $s = sp + 76 | 0;
 $i = sp + 72 | 0;
 $j = sp + 68 | 0;
 $stride = sp + 64 | 0;
 $img_len = sp + 60 | 0;
 $img_width_bytes = sp + 56 | 0;
 $k = sp + 52 | 0;
 $img_n = sp + 48 | 0;
 $output_bytes = sp + 44 | 0;
 $filter_bytes = sp + 40 | 0;
 $width = sp + 36 | 0;
 $cur = sp + 32 | 0;
 $prior = sp + 28 | 0;
 $filter = sp + 24 | 0;
 $nk = sp + 20 | 0;
 $cur490 = sp + 16 | 0;
 $in = sp + 12 | 0;
 $scale = sp + 120 | 0;
 $q = sp + 8 | 0;
 $cur826 = sp + 4 | 0;
 $cur16 = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$raw$addr >> 2] = $raw;
 HEAP32[$raw_len$addr >> 2] = $raw_len;
 HEAP32[$out_n$addr >> 2] = $out_n;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$depth$addr >> 2] = $depth;
 HEAP32[$color$addr >> 2] = $color;
 HEAP32[$bytes >> 2] = (HEAP32[$depth$addr >> 2] | 0) == 16 ? 2 : 1;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$a$addr >> 2] >> 2];
 $mul = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0) | 0;
 HEAP32[$stride >> 2] = Math_imul($mul, HEAP32[$bytes >> 2] | 0) | 0;
 HEAP32[$img_n >> 2] = HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2];
 HEAP32[$output_bytes >> 2] = Math_imul(HEAP32[$out_n$addr >> 2] | 0, HEAP32[$bytes >> 2] | 0) | 0;
 HEAP32[$filter_bytes >> 2] = Math_imul(HEAP32[$img_n >> 2] | 0, HEAP32[$bytes >> 2] | 0) | 0;
 HEAP32[$width >> 2] = HEAP32[$x$addr >> 2];
 if ((HEAP32[$out_n$addr >> 2] | 0) != (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0)) if ((HEAP32[$out_n$addr >> 2] | 0) != ((HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) + 1 | 0)) ___assert_fail(48603, 47433, 4409, 48644);
 $call = _stbi__malloc_mad3(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$output_bytes >> 2] | 0, 0) | 0;
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] = $call;
 if (!(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(47531) | 0;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 }
 if (!(_stbi__mad3sizes_valid(HEAP32[$img_n >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$depth$addr >> 2] | 0, 7) | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(47570) | 0;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 }
 $mul17 = Math_imul(HEAP32[$img_n >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
 HEAP32[$img_width_bytes >> 2] = ((Math_imul($mul17, HEAP32[$depth$addr >> 2] | 0) | 0) + 7 | 0) >>> 3;
 HEAP32[$img_len >> 2] = Math_imul((HEAP32[$img_width_bytes >> 2] | 0) + 1 | 0, HEAP32[$y$addr >> 2] | 0) | 0;
 if ((HEAP32[$raw_len$addr >> 2] | 0) >>> 0 < (HEAP32[$img_len >> 2] | 0) >>> 0) {
  HEAP32[$retval >> 2] = _stbi__err(48671) | 0;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 }
 HEAP32[$j >> 2] = 0;
 L17 : while (1) {
  if ((HEAP32[$j >> 2] | 0) >>> 0 >= (HEAP32[$y$addr >> 2] | 0) >>> 0) {
   label = 113;
   break;
  }
  HEAP32[$cur >> 2] = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0);
  $41 = HEAP32[$raw$addr >> 2] | 0;
  HEAP32[$raw$addr >> 2] = $41 + 1;
  HEAP32[$filter >> 2] = HEAPU8[$41 >> 0];
  if ((HEAP32[$filter >> 2] | 0) > 4) {
   label = 13;
   break;
  }
  if ((HEAP32[$depth$addr >> 2] | 0) < 8) {
   if ((HEAP32[$img_width_bytes >> 2] | 0) >>> 0 > (HEAP32[$x$addr >> 2] | 0) >>> 0) {
    label = 16;
    break;
   }
   $mul42 = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0) | 0;
   HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + ($mul42 - (HEAP32[$img_width_bytes >> 2] | 0));
   HEAP32[$filter_bytes >> 2] = 1;
   HEAP32[$width >> 2] = HEAP32[$img_width_bytes >> 2];
  }
  HEAP32[$prior >> 2] = (HEAP32[$cur >> 2] | 0) + (0 - (HEAP32[$stride >> 2] | 0));
  if (!(HEAP32[$j >> 2] | 0)) HEAP32[$filter >> 2] = HEAPU8[48725 + (HEAP32[$filter >> 2] | 0) >> 0];
  HEAP32[$k >> 2] = 0;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
   switch (HEAP32[$filter >> 2] | 0) {
   case 0:
    {
     HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
     break;
    }
   case 1:
    {
     HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
     break;
    }
   case 2:
    {
     HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$prior >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$prior >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) >> 1);
     break;
    }
   case 4:
    {
     $conv86 = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + (_stbi__paeth(0, HEAPU8[(HEAP32[$prior >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0, 0) | 0) & 255;
     HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv86;
     break;
    }
   case 5:
    {
     HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
     break;
    }
   case 6:
    {
     HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
     break;
    }
   default:
    {}
   }
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  do if ((HEAP32[$depth$addr >> 2] | 0) == 8) {
   if ((HEAP32[$img_n >> 2] | 0) != (HEAP32[$out_n$addr >> 2] | 0)) HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$img_n >> 2] | 0) >> 0] = -1;
   HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$img_n >> 2] | 0);
   HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$out_n$addr >> 2] | 0);
   HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$out_n$addr >> 2] | 0);
  } else {
   if ((HEAP32[$depth$addr >> 2] | 0) != 16) {
    HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + 1;
    HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + 1;
    HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + 1;
    break;
   }
   if ((HEAP32[$img_n >> 2] | 0) != (HEAP32[$out_n$addr >> 2] | 0)) {
    HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
    HEAP8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$filter_bytes >> 2] | 0) + 1) >> 0] = -1;
   }
   HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
   HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
   HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
  } while (0);
  L54 : do if ((HEAP32[$depth$addr >> 2] | 0) < 8) label = 42; else if ((HEAP32[$img_n >> 2] | 0) == (HEAP32[$out_n$addr >> 2] | 0)) label = 42; else {
   if (((HEAP32[$img_n >> 2] | 0) + 1 | 0) != (HEAP32[$out_n$addr >> 2] | 0)) {
    label = 64;
    break L17;
   }
   L58 : do switch (HEAP32[$filter >> 2] | 0) {
   case 0:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 1:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$output_bytes >> 2] | 0)) >> 0] | 0);
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 2:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$prior >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0);
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 3:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$prior >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$output_bytes >> 2] | 0)) >> 0] | 0) >> 1);
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 4:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       $conv377 = HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
       $conv389 = $conv377 + (_stbi__paeth(HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$output_bytes >> 2] | 0)) >> 0] | 0, HEAPU8[(HEAP32[$prior >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$prior >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$output_bytes >> 2] | 0)) >> 0] | 0) | 0) & 255;
       HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv389;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 5:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$output_bytes >> 2] | 0)) >> 0] | 0) >> 1);
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 6:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       $conv442 = HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
       $conv449 = $conv442 + (_stbi__paeth(HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$output_bytes >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255;
       HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv449;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   default:
    {}
   } while (0);
   if ((HEAP32[$depth$addr >> 2] | 0) == 16) {
    HEAP32[$cur >> 2] = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0);
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$x$addr >> 2] | 0) >>> 0) break L54;
     HEAP8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$filter_bytes >> 2] | 0) + 1) >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
     HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
    }
   }
  } while (0);
  if ((label | 0) == 42) {
   label = 0;
   HEAP32[$nk >> 2] = Math_imul((HEAP32[$width >> 2] | 0) - 1 | 0, HEAP32[$filter_bytes >> 2] | 0) | 0;
   L122 : do switch (HEAP32[$filter >> 2] | 0) {
   case 0:
    {
     _memcpy(HEAP32[$cur >> 2] | 0, HEAP32[$raw$addr >> 2] | 0, HEAP32[$nk >> 2] | 0) | 0;
     break;
    }
   case 1:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] | 0);
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 2:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$prior >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0);
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 3:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$prior >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + (HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] | 0) >> 1);
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 4:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      $conv193 = HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      $conv205 = $conv193 + (_stbi__paeth(HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] | 0, HEAPU8[(HEAP32[$prior >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$prior >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] | 0) | 0) & 255;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv205;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 5:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) + ((HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] | 0) >> 1);
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 6:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      $conv234 = HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      $conv241 = $conv234 + (_stbi__paeth(HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv241;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   default:
    {}
   } while (0);
   HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$nk >> 2] | 0);
  }
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) {
  HEAP32[$retval >> 2] = _stbi__err(48689) | 0;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 } else if ((label | 0) == 16) ___assert_fail(48704, 47433, 4431, 48644); else if ((label | 0) == 64) ___assert_fail(48730, 47433, 4493, 48644); else if ((label | 0) == 113) {
  L152 : do if ((HEAP32[$depth$addr >> 2] | 0) < 8) {
   HEAP32[$j >> 2] = 0;
   L154 : while (1) {
    if ((HEAP32[$j >> 2] | 0) >>> 0 >= (HEAP32[$y$addr >> 2] | 0) >>> 0) break L152;
    HEAP32[$cur490 >> 2] = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0);
    $add$ptr496 = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0) | 0;
    $add$ptr498 = $add$ptr496 + (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0) | 0) | 0;
    HEAP32[$in >> 2] = $add$ptr498 + (0 - (HEAP32[$img_width_bytes >> 2] | 0));
    if (!(HEAP32[$color$addr >> 2] | 0)) $cond505 = HEAPU8[48453 + (HEAP32[$depth$addr >> 2] | 0) >> 0] | 0; else $cond505 = 1;
    HEAP8[$scale >> 0] = $cond505;
    do if ((HEAP32[$depth$addr >> 2] | 0) == 4) {
     HEAP32[$k >> 2] = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$img_n >> 2] | 0) | 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) < 2) break;
      $conv519 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 4) | 0) & 255;
      $430 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $430 + 1;
      HEAP8[$430 >> 0] = $conv519;
      $conv525 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) & 15) | 0) & 255;
      $434 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $434 + 1;
      HEAP8[$434 >> 0] = $conv525;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) - 2;
      HEAP32[$in >> 2] = (HEAP32[$in >> 2] | 0) + 1;
     }
     if ((HEAP32[$k >> 2] | 0) > 0) {
      $conv538 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 4) | 0) & 255;
      $441 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $441 + 1;
      HEAP8[$441 >> 0] = $conv538;
     }
    } else {
     if ((HEAP32[$depth$addr >> 2] | 0) == 2) {
      HEAP32[$k >> 2] = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$img_n >> 2] | 0) | 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) < 4) break;
       $conv554 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 6) | 0) & 255;
       $449 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $449 + 1;
       HEAP8[$449 >> 0] = $conv554;
       $conv561 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 4 & 3) | 0) & 255;
       $453 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $453 + 1;
       HEAP8[$453 >> 0] = $conv561;
       $conv568 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 2 & 3) | 0) & 255;
       $457 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $457 + 1;
       HEAP8[$457 >> 0] = $conv568;
       $conv574 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) & 3) | 0) & 255;
       $461 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $461 + 1;
       HEAP8[$461 >> 0] = $conv574;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) - 4;
       HEAP32[$in >> 2] = (HEAP32[$in >> 2] | 0) + 1;
      }
      if ((HEAP32[$k >> 2] | 0) > 0) {
       $conv587 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 6) | 0) & 255;
       $468 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $468 + 1;
       HEAP8[$468 >> 0] = $conv587;
      }
      if ((HEAP32[$k >> 2] | 0) > 1) {
       $conv598 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 4 & 3) | 0) & 255;
       $473 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $473 + 1;
       HEAP8[$473 >> 0] = $conv598;
      }
      if ((HEAP32[$k >> 2] | 0) <= 2) break;
      $conv609 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 2 & 3) | 0) & 255;
      $478 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $478 + 1;
      HEAP8[$478 >> 0] = $conv609;
      break;
     }
     if ((HEAP32[$depth$addr >> 2] | 0) == 1) {
      HEAP32[$k >> 2] = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$img_n >> 2] | 0) | 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) < 8) break;
       $conv625 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 7) | 0) & 255;
       $486 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $486 + 1;
       HEAP8[$486 >> 0] = $conv625;
       $conv632 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 6 & 1) | 0) & 255;
       $490 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $490 + 1;
       HEAP8[$490 >> 0] = $conv632;
       $conv639 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 5 & 1) | 0) & 255;
       $494 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $494 + 1;
       HEAP8[$494 >> 0] = $conv639;
       $conv646 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 4 & 1) | 0) & 255;
       $498 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $498 + 1;
       HEAP8[$498 >> 0] = $conv646;
       $conv653 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 3 & 1) | 0) & 255;
       $502 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $502 + 1;
       HEAP8[$502 >> 0] = $conv653;
       $conv660 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 2 & 1) | 0) & 255;
       $506 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $506 + 1;
       HEAP8[$506 >> 0] = $conv660;
       $conv667 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 1 & 1) | 0) & 255;
       $510 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $510 + 1;
       HEAP8[$510 >> 0] = $conv667;
       $conv673 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) & 1) | 0) & 255;
       $514 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $514 + 1;
       HEAP8[$514 >> 0] = $conv673;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) - 8;
       HEAP32[$in >> 2] = (HEAP32[$in >> 2] | 0) + 1;
      }
      if ((HEAP32[$k >> 2] | 0) > 0) {
       $conv686 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 7) | 0) & 255;
       $521 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $521 + 1;
       HEAP8[$521 >> 0] = $conv686;
      }
      if ((HEAP32[$k >> 2] | 0) > 1) {
       $conv697 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 6 & 1) | 0) & 255;
       $526 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $526 + 1;
       HEAP8[$526 >> 0] = $conv697;
      }
      if ((HEAP32[$k >> 2] | 0) > 2) {
       $conv708 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 5 & 1) | 0) & 255;
       $531 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $531 + 1;
       HEAP8[$531 >> 0] = $conv708;
      }
      if ((HEAP32[$k >> 2] | 0) > 3) {
       $conv719 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 4 & 1) | 0) & 255;
       $536 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $536 + 1;
       HEAP8[$536 >> 0] = $conv719;
      }
      if ((HEAP32[$k >> 2] | 0) > 4) {
       $conv730 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 3 & 1) | 0) & 255;
       $541 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $541 + 1;
       HEAP8[$541 >> 0] = $conv730;
      }
      if ((HEAP32[$k >> 2] | 0) > 5) {
       $conv741 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 2 & 1) | 0) & 255;
       $546 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $546 + 1;
       HEAP8[$546 >> 0] = $conv741;
      }
      if ((HEAP32[$k >> 2] | 0) <= 6) break;
      $conv752 = (Math_imul(HEAPU8[$scale >> 0] | 0, (HEAPU8[HEAP32[$in >> 2] >> 0] | 0) >> 1 & 1) | 0) & 255;
      $551 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $551 + 1;
      HEAP8[$551 >> 0] = $conv752;
     }
    } while (0);
    L207 : do if ((HEAP32[$img_n >> 2] | 0) != (HEAP32[$out_n$addr >> 2] | 0)) {
     HEAP32[$cur490 >> 2] = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0);
     if ((HEAP32[$img_n >> 2] | 0) == 1) {
      HEAP32[$q >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
      while (1) {
       if ((HEAP32[$q >> 2] | 0) < 0) break L207;
       HEAP8[(HEAP32[$cur490 >> 2] | 0) + ((HEAP32[$q >> 2] << 1) + 1) >> 0] = -1;
       HEAP8[(HEAP32[$cur490 >> 2] | 0) + ((HEAP32[$q >> 2] << 1) + 0) >> 0] = HEAP8[(HEAP32[$cur490 >> 2] | 0) + (HEAP32[$q >> 2] | 0) >> 0] | 0;
       HEAP32[$q >> 2] = (HEAP32[$q >> 2] | 0) + -1;
      }
     }
     if ((HEAP32[$img_n >> 2] | 0) != 3) break L154;
     HEAP32[$q >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$q >> 2] | 0) < 0) break L207;
      HEAP8[(HEAP32[$cur490 >> 2] | 0) + ((HEAP32[$q >> 2] << 2) + 3) >> 0] = -1;
      HEAP8[(HEAP32[$cur490 >> 2] | 0) + ((HEAP32[$q >> 2] << 2) + 2) >> 0] = HEAP8[(HEAP32[$cur490 >> 2] | 0) + (((HEAP32[$q >> 2] | 0) * 3 | 0) + 2) >> 0] | 0;
      HEAP8[(HEAP32[$cur490 >> 2] | 0) + ((HEAP32[$q >> 2] << 2) + 1) >> 0] = HEAP8[(HEAP32[$cur490 >> 2] | 0) + (((HEAP32[$q >> 2] | 0) * 3 | 0) + 1) >> 0] | 0;
      HEAP8[(HEAP32[$cur490 >> 2] | 0) + ((HEAP32[$q >> 2] << 2) + 0) >> 0] = HEAP8[(HEAP32[$cur490 >> 2] | 0) + (((HEAP32[$q >> 2] | 0) * 3 | 0) + 0) >> 0] | 0;
      HEAP32[$q >> 2] = (HEAP32[$q >> 2] | 0) + -1;
     }
    } while (0);
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   ___assert_fail(48747, 47433, 4582, 48644);
  } else if ((HEAP32[$depth$addr >> 2] | 0) == 16) {
   HEAP32[$cur826 >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2];
   HEAP32[$cur16 >> 2] = HEAP32[$cur826 >> 2];
   HEAP32[$i >> 2] = 0;
   while (1) {
    $mul829 = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0) | 0;
    if ((HEAP32[$i >> 2] | 0) >>> 0 >= (Math_imul($mul829, HEAP32[$out_n$addr >> 2] | 0) | 0) >>> 0) break L152;
    HEAP16[HEAP32[$cur16 >> 2] >> 1] = (HEAPU8[HEAP32[$cur826 >> 2] >> 0] | 0) << 8 | (HEAPU8[(HEAP32[$cur826 >> 2] | 0) + 1 >> 0] | 0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    HEAP32[$cur16 >> 2] = (HEAP32[$cur16 >> 2] | 0) + 2;
    HEAP32[$cur826 >> 2] = (HEAP32[$cur826 >> 2] | 0) + 2;
   }
  } while (0);
  HEAP32[$retval >> 2] = 1;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv($this) {
 $this = $this | 0;
 var $1 = 0, $101 = 0, $106 = 0, $107 = 0, $11 = 0, $111 = 0, $116 = 0, $117 = 0, $121 = 0, $126 = 0, $127 = 0, $131 = 0, $136 = 0, $137 = 0, $141 = 0, $146 = 0, $147 = 0, $151 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $166 = 0, $167 = 0, $17 = 0, $171 = 0, $176 = 0, $177 = 0, $181 = 0, $186 = 0, $187 = 0, $191 = 0, $196 = 0, $197 = 0, $201 = 0, $206 = 0, $207 = 0, $21 = 0, $211 = 0, $216 = 0, $217 = 0, $221 = 0, $226 = 0, $227 = 0, $231 = 0, $236 = 0, $237 = 0, $241 = 0, $246 = 0, $247 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $261 = 0, $266 = 0, $267 = 0, $27 = 0, $271 = 0, $276 = 0, $277 = 0, $281 = 0, $286 = 0, $287 = 0, $291 = 0, $296 = 0, $297 = 0, $301 = 0, $306 = 0, $307 = 0, $31 = 0, $311 = 0, $36 = 0, $37 = 0, $41 = 0, $46 = 0, $47 = 0, $51 = 0, $56 = 0, $57 = 0, $6 = 0, $61 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $76 = 0, $77 = 0, $81 = 0, $86 = 0, $87 = 0, $91 = 0, $96 = 0, $97 = 0, $Init = 0, $IsLeftFold = 0, $OperatorName = 0, $agg$tmp = 0, $agg$tmp102 = 0, $agg$tmp107 = 0, $agg$tmp112 = 0, $agg$tmp117 = 0, $agg$tmp122 = 0, $agg$tmp127 = 0, $agg$tmp132 = 0, $agg$tmp137 = 0, $agg$tmp142 = 0, $agg$tmp147 = 0, $agg$tmp152 = 0, $agg$tmp157 = 0, $agg$tmp162 = 0, $agg$tmp167 = 0, $agg$tmp167$byval_copy = 0, $agg$tmp22 = 0, $agg$tmp27 = 0, $agg$tmp32 = 0, $agg$tmp37 = 0, $agg$tmp42 = 0, $agg$tmp47 = 0, $agg$tmp52 = 0, $agg$tmp57 = 0, $agg$tmp62 = 0, $agg$tmp67 = 0, $agg$tmp72 = 0, $agg$tmp77 = 0, $agg$tmp82 = 0, $agg$tmp87 = 0, $agg$tmp92 = 0, $agg$tmp97 = 0, $call2 = 0, $call203 = 0, $call204 = 0, $call210 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $agg$tmp167$byval_copy = sp + 8 | 0;
 $IsLeftFold = sp + 272 | 0;
 $OperatorName = sp;
 $agg$tmp = sp + 264 | 0;
 $agg$tmp22 = sp + 256 | 0;
 $agg$tmp27 = sp + 248 | 0;
 $agg$tmp32 = sp + 240 | 0;
 $agg$tmp37 = sp + 232 | 0;
 $agg$tmp42 = sp + 224 | 0;
 $agg$tmp47 = sp + 216 | 0;
 $agg$tmp52 = sp + 208 | 0;
 $agg$tmp57 = sp + 200 | 0;
 $agg$tmp62 = sp + 192 | 0;
 $agg$tmp67 = sp + 184 | 0;
 $agg$tmp72 = sp + 176 | 0;
 $agg$tmp77 = sp + 168 | 0;
 $agg$tmp82 = sp + 160 | 0;
 $agg$tmp87 = sp + 152 | 0;
 $agg$tmp92 = sp + 144 | 0;
 $agg$tmp97 = sp + 136 | 0;
 $agg$tmp102 = sp + 128 | 0;
 $agg$tmp107 = sp + 120 | 0;
 $agg$tmp112 = sp + 112 | 0;
 $agg$tmp117 = sp + 104 | 0;
 $agg$tmp122 = sp + 96 | 0;
 $agg$tmp127 = sp + 88 | 0;
 $agg$tmp132 = sp + 80 | 0;
 $agg$tmp137 = sp + 72 | 0;
 $agg$tmp142 = sp + 64 | 0;
 $agg$tmp147 = sp + 56 | 0;
 $agg$tmp152 = sp + 48 | 0;
 $agg$tmp157 = sp + 40 | 0;
 $agg$tmp162 = sp + 32 | 0;
 $agg$tmp167 = sp + 24 | 0;
 $Init = sp + 16 | 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 102) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
  switch ($call2 << 24 >> 24) {
  case 76:
  case 108:
   {
    $storemerge = 1;
    label = 4;
    break;
   }
  case 82:
  case 114:
   {
    $storemerge = 0;
    label = 4;
    break;
   }
  default:
   $retval$2 = 0;
  }
  if ((label | 0) == 4) {
   HEAP8[$IsLeftFold >> 0] = $storemerge;
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   __ZN12_GLOBAL__N_110StringViewC2Ev($OperatorName);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 54971);
   HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52163);
    $1 = $agg$tmp167$byval_copy;
    $6 = HEAP32[$1 + 4 >> 2] | 0;
    $7 = $OperatorName;
    HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    label = 66;
   } else {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22, 54974);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp22 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp22 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52161);
     $11 = $agg$tmp167$byval_copy;
     $16 = HEAP32[$11 + 4 >> 2] | 0;
     $17 = $OperatorName;
     HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$17 + 4 >> 2] = $16;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27, 54977);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp27 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp27 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52875);
     $21 = $agg$tmp167$byval_copy;
     $26 = HEAP32[$21 + 4 >> 2] | 0;
     $27 = $OperatorName;
     HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
     HEAP32[$27 + 4 >> 2] = $26;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp32, 54980);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp32 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp32 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52878);
     $31 = $agg$tmp167$byval_copy;
     $36 = HEAP32[$31 + 4 >> 2] | 0;
     $37 = $OperatorName;
     HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
     HEAP32[$37 + 4 >> 2] = $36;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp37, 54983);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp37 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp37 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52890);
     $41 = $agg$tmp167$byval_copy;
     $46 = HEAP32[$41 + 4 >> 2] | 0;
     $47 = $OperatorName;
     HEAP32[$47 >> 2] = HEAP32[$41 >> 2];
     HEAP32[$47 + 4 >> 2] = $46;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42, 54986);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp42 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp42 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52894);
     $51 = $agg$tmp167$byval_copy;
     $56 = HEAP32[$51 + 4 >> 2] | 0;
     $57 = $OperatorName;
     HEAP32[$57 >> 2] = HEAP32[$51 >> 2];
     HEAP32[$57 + 4 >> 2] = $56;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp47, 54989);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp47 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp47 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52897);
     $61 = $agg$tmp167$byval_copy;
     $66 = HEAP32[$61 + 4 >> 2] | 0;
     $67 = $OperatorName;
     HEAP32[$67 >> 2] = HEAP32[$61 >> 2];
     HEAP32[$67 + 4 >> 2] = $66;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp52, 54992);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp52 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp52 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52899);
     $71 = $agg$tmp167$byval_copy;
     $76 = HEAP32[$71 + 4 >> 2] | 0;
     $77 = $OperatorName;
     HEAP32[$77 >> 2] = HEAP32[$71 >> 2];
     HEAP32[$77 + 4 >> 2] = $76;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57, 54995);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp57 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp57 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52902);
     $81 = $agg$tmp167$byval_copy;
     $86 = HEAP32[$81 + 4 >> 2] | 0;
     $87 = $OperatorName;
     HEAP32[$87 >> 2] = HEAP32[$81 >> 2];
     HEAP32[$87 + 4 >> 2] = $86;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp62, 54998);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp62 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp62 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52904);
     $91 = $agg$tmp167$byval_copy;
     $96 = HEAP32[$91 + 4 >> 2] | 0;
     $97 = $OperatorName;
     HEAP32[$97 >> 2] = HEAP32[$91 >> 2];
     HEAP32[$97 + 4 >> 2] = $96;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67, 55001);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp67 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52907);
     $101 = $agg$tmp167$byval_copy;
     $106 = HEAP32[$101 + 4 >> 2] | 0;
     $107 = $OperatorName;
     HEAP32[$107 >> 2] = HEAP32[$101 >> 2];
     HEAP32[$107 + 4 >> 2] = $106;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp72, 55004);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp72 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp72 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52910);
     $111 = $agg$tmp167$byval_copy;
     $116 = HEAP32[$111 + 4 >> 2] | 0;
     $117 = $OperatorName;
     HEAP32[$117 >> 2] = HEAP32[$111 >> 2];
     HEAP32[$117 + 4 >> 2] = $116;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp77, 55007);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp77 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp77 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52234);
     $121 = $agg$tmp167$byval_copy;
     $126 = HEAP32[$121 + 4 >> 2] | 0;
     $127 = $OperatorName;
     HEAP32[$127 >> 2] = HEAP32[$121 >> 2];
     HEAP32[$127 + 4 >> 2] = $126;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp82, 55010);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp82 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp82 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52913);
     $131 = $agg$tmp167$byval_copy;
     $136 = HEAP32[$131 + 4 >> 2] | 0;
     $137 = $OperatorName;
     HEAP32[$137 >> 2] = HEAP32[$131 >> 2];
     HEAP32[$137 + 4 >> 2] = $136;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87, 55013);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp87 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp87 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52916);
     $141 = $agg$tmp167$byval_copy;
     $146 = HEAP32[$141 + 4 >> 2] | 0;
     $147 = $OperatorName;
     HEAP32[$147 >> 2] = HEAP32[$141 >> 2];
     HEAP32[$147 + 4 >> 2] = $146;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp92, 55016);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp92 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp92 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52919);
     $151 = $agg$tmp167$byval_copy;
     $156 = HEAP32[$151 + 4 >> 2] | 0;
     $157 = $OperatorName;
     HEAP32[$157 >> 2] = HEAP32[$151 >> 2];
     HEAP32[$157 + 4 >> 2] = $156;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp97, 55019);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp97 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp97 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52341);
     $161 = $agg$tmp167$byval_copy;
     $166 = HEAP32[$161 + 4 >> 2] | 0;
     $167 = $OperatorName;
     HEAP32[$167 >> 2] = HEAP32[$161 >> 2];
     HEAP32[$167 + 4 >> 2] = $166;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp102, 55022);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp102 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp102 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52762);
     $171 = $agg$tmp167$byval_copy;
     $176 = HEAP32[$171 + 4 >> 2] | 0;
     $177 = $OperatorName;
     HEAP32[$177 >> 2] = HEAP32[$171 >> 2];
     HEAP32[$177 + 4 >> 2] = $176;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp107, 55025);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp107 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp107 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52923);
     $181 = $agg$tmp167$byval_copy;
     $186 = HEAP32[$181 + 4 >> 2] | 0;
     $187 = $OperatorName;
     HEAP32[$187 >> 2] = HEAP32[$181 >> 2];
     HEAP32[$187 + 4 >> 2] = $186;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp112, 55028);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp112 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp112 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52228);
     $191 = $agg$tmp167$byval_copy;
     $196 = HEAP32[$191 + 4 >> 2] | 0;
     $197 = $OperatorName;
     HEAP32[$197 >> 2] = HEAP32[$191 >> 2];
     HEAP32[$197 + 4 >> 2] = $196;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp117, 55031);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp117 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp117 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52926);
     $201 = $agg$tmp167$byval_copy;
     $206 = HEAP32[$201 + 4 >> 2] | 0;
     $207 = $OperatorName;
     HEAP32[$207 >> 2] = HEAP32[$201 >> 2];
     HEAP32[$207 + 4 >> 2] = $206;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp122, 55034);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp122 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp122 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52932);
     $211 = $agg$tmp167$byval_copy;
     $216 = HEAP32[$211 + 4 >> 2] | 0;
     $217 = $OperatorName;
     HEAP32[$217 >> 2] = HEAP32[$211 >> 2];
     HEAP32[$217 + 4 >> 2] = $216;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127, 55037);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp127 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp127 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52937);
     $221 = $agg$tmp167$byval_copy;
     $226 = HEAP32[$221 + 4 >> 2] | 0;
     $227 = $OperatorName;
     HEAP32[$227 >> 2] = HEAP32[$221 >> 2];
     HEAP32[$227 + 4 >> 2] = $226;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp132, 55040);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp132 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp132 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52940);
     $231 = $agg$tmp167$byval_copy;
     $236 = HEAP32[$231 + 4 >> 2] | 0;
     $237 = $OperatorName;
     HEAP32[$237 >> 2] = HEAP32[$231 >> 2];
     HEAP32[$237 + 4 >> 2] = $236;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp137, 55043);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp137 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp137 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52942);
     $241 = $agg$tmp167$byval_copy;
     $246 = HEAP32[$241 + 4 >> 2] | 0;
     $247 = $OperatorName;
     HEAP32[$247 >> 2] = HEAP32[$241 >> 2];
     HEAP32[$247 + 4 >> 2] = $246;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp142, 55046);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp142 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp142 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52949);
     $251 = $agg$tmp167$byval_copy;
     $256 = HEAP32[$251 + 4 >> 2] | 0;
     $257 = $OperatorName;
     HEAP32[$257 >> 2] = HEAP32[$251 >> 2];
     HEAP32[$257 + 4 >> 2] = $256;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp147, 55049);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp147 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp147 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52951);
     $261 = $agg$tmp167$byval_copy;
     $266 = HEAP32[$261 + 4 >> 2] | 0;
     $267 = $OperatorName;
     HEAP32[$267 >> 2] = HEAP32[$261 >> 2];
     HEAP32[$267 + 4 >> 2] = $266;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp152, 55052);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp152 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp152 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52960);
     $271 = $agg$tmp167$byval_copy;
     $276 = HEAP32[$271 + 4 >> 2] | 0;
     $277 = $OperatorName;
     HEAP32[$277 >> 2] = HEAP32[$271 >> 2];
     HEAP32[$277 + 4 >> 2] = $276;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp157, 55055);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp157 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp157 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52962);
     $281 = $agg$tmp167$byval_copy;
     $286 = HEAP32[$281 + 4 >> 2] | 0;
     $287 = $OperatorName;
     HEAP32[$287 >> 2] = HEAP32[$281 >> 2];
     HEAP32[$287 + 4 >> 2] = $286;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp162, 55058);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp162 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp162 + 4 >> 2];
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52965);
     $291 = $agg$tmp167$byval_copy;
     $296 = HEAP32[$291 + 4 >> 2] | 0;
     $297 = $OperatorName;
     HEAP32[$297 >> 2] = HEAP32[$291 >> 2];
     HEAP32[$297 + 4 >> 2] = $296;
     label = 66;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167, 55061);
    HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp167 >> 2];
    HEAP32[$agg$tmp167$byval_copy + 4 >> 2] = HEAP32[$agg$tmp167 + 4 >> 2];
    if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp167$byval_copy) | 0)) {
     $retval$1 = 0;
     break;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167$byval_copy, 52968);
    $301 = $agg$tmp167$byval_copy;
    $306 = HEAP32[$301 + 4 >> 2] | 0;
    $307 = $OperatorName;
    HEAP32[$307 >> 2] = HEAP32[$301 >> 2];
    HEAP32[$307 + 4 >> 2] = $306;
    label = 66;
   } while (0);
   if ((label | 0) == 66) {
    $call203 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    $call204 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call203) | 0;
    HEAP32[$agg$tmp167$byval_copy >> 2] = $call204;
    HEAP32[$Init >> 2] = 0;
    $311 = $call204;
    L100 : do if (!$call204) $retval$0 = 0; else {
     switch ($call2 << 24 >> 24) {
     case 76:
     case 82:
      {
       $call210 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call203) | 0;
       HEAP32[$Init >> 2] = $call210;
       if (!$call210) {
        $retval$0 = 0;
        break L100;
       }
       if ($storemerge << 24 >> 24) {
        HEAP32[$agg$tmp167$byval_copy >> 2] = $call210;
        HEAP32[$Init >> 2] = $311;
       }
       break;
      }
     default:
      {}
     }
     $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_($this, $IsLeftFold, $OperatorName, $agg$tmp167$byval_copy, $Init) | 0;
    } while (0);
    $retval$1 = $retval$0;
   }
   $retval$2 = $retval$1;
  }
  $retval$3 = $retval$2;
 } else $retval$3 = 0;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN13TPPLPartition17MonotonePartitionEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($this, $inpolys, $monotonePolys) {
 $this = $this | 0;
 $inpolys = $inpolys | 0;
 $monotonePolys = $monotonePolys | 0;
 var $$pn = 0, $$pn$in = 0, $$pn289 = 0, $0 = 0, $13 = 0, $14 = 0, $18 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $3 = 0, $36 = 0, $38 = 0, $41 = 0, $45 = 0, $46 = 0, $50 = 0, $52 = 0, $54 = 0, $57 = 0, $63 = 0, $64 = 0, $68 = 0, $70 = 0, $74 = 0, $75 = 0, $__next_$i$i = 0, $__value_$i = 0, $__value_$i$i$i$i$i318 = 0, $__value_$i298 = 0, $__value_$i300 = 0, $__value_$i328 = 0, $__value_$i409 = 0, $__x$addr$0$i$i$i$i = 0, $__x$addr$0$i$i$i$i334 = 0, $__x$addr$0$i$i$i$i394 = 0, $__xx$0$in$i$i$i = 0, $__xx$0$in$i$i$i339 = 0, $__xx$0$in$i$i$i399 = 0, $add24 = 0, $add29 = 0, $agg$tmp = 0, $agg$tmp2$i$byval_copy = 0, $agg$tmp2$i366 = 0, $arrayidx = 0, $arrayidx109 = 0, $arrayidx136 = 0, $arrayidx205 = 0, $arrayidx278 = 0, $arrayidx292$pre$phiZ2D = 0, $arrayidx369 = 0, $arrayidx383$pre$phiZ2D = 0, $arrayidx401 = 0, $arrayidx405 = 0, $arrayidx78 = 0, $arrayidx91 = 0, $call12 = 0, $call120 = 0, $call121 = 0, $call28 = 0, $call3$i$i = 0, $call3$i$i355 = 0, $call3$i$i372 = 0, $call392 = 0, $call417 = 0, $call428 = 0, $call61 = 0, $call70 = 0, $cmp42 = 0, $edgeTree = 0, $error$2$off0 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$0$in$in = 0, $iter$sroa$0$1 = 0, $iter$sroa$0$1$in$in = 0, $mul = 0, $newedge = 0, $newnumvertices = 0, $next406 = 0, $numvertices$0 = 0, $p1 = 0, $p141 = 0, $p2 = 0, $p214 = 0, $p334 = 0, $p79 = 0, $p80 = 0, $polystartindex$0 = 0, $previous149 = 0, $previous225 = 0, $previous295 = 0, $retval$0$i$i$i = 0, $retval$0$i$i$i347 = 0, $retval$0$i$i$i407 = 0, $retval$1 = 0, $size$0 = 0, $size$1 = 0, $sub204 = 0, $sub320 = 0, $v2$0 = 0, $vindex2$0 = 0, $vindex2$1 = 0, $vnext$1 = 0, label = 0, sp = 0, $__xx$0$in$i$i$i399$looptemp = 0, $__xx$0$in$i$i$i339$looptemp = 0, $__xx$0$in$i$i$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $agg$tmp2$i$byval_copy = sp + 56 | 0;
 $agg$tmp2$i366 = sp + 84 | 0;
 $newnumvertices = sp + 80 | 0;
 $newedge = sp;
 $agg$tmp = sp + 88 | 0;
 $edgeTree = sp + 68 | 0;
 $__next_$i$i = $inpolys + 4 | 0;
 $iter$sroa$0$0$in$in = $__next_$i$i;
 $numvertices$0 = 0;
 while (1) {
  $iter$sroa$0$0 = HEAP32[$iter$sroa$0$0$in$in >> 2] | 0;
  $0 = $iter$sroa$0$0;
  if (($inpolys | 0) == ($0 | 0)) {
   label = 5;
   break;
  }
  $__value_$i = $iter$sroa$0$0 + 8 | 0;
  if (!(__ZNK8TPPLPoly5ValidEv($__value_$i) | 0)) {
   $retval$1 = 0;
   break;
  }
  $iter$sroa$0$0$in$in = $0 + 4 | 0;
  $numvertices$0 = (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i) | 0) + $numvertices$0 | 0;
 }
 if ((label | 0) == 5) {
  $mul = $numvertices$0 * 3 | 0;
  $call12 = __Znam($mul >>> 0 > 134217727 ? -1 : $mul << 5) | 0;
  HEAP32[$newnumvertices >> 2] = $numvertices$0;
  $iter$sroa$0$1$in$in = $__next_$i$i;
  $polystartindex$0 = 0;
  while (1) {
   $iter$sroa$0$1 = HEAP32[$iter$sroa$0$1$in$in >> 2] | 0;
   $3 = $iter$sroa$0$1;
   if (($inpolys | 0) == ($3 | 0)) break;
   $__value_$i298 = $iter$sroa$0$1 + 8 | 0;
   $add24 = (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i298) | 0) + $polystartindex$0 | 0;
   $i$0 = 0;
   while (1) {
    if (($i$0 | 0) >= (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i298) | 0)) break;
    $call28 = __ZN8TPPLPoly8GetPointEl($__value_$i298, $i$0) | 0;
    $add29 = $i$0 + $polystartindex$0 | 0;
    $arrayidx = $call12 + ($add29 << 5) | 0;
    HEAP32[$arrayidx >> 2] = HEAP32[$call28 >> 2];
    HEAP32[$arrayidx + 4 >> 2] = HEAP32[$call28 + 4 >> 2];
    HEAP32[$arrayidx + 8 >> 2] = HEAP32[$call28 + 8 >> 2];
    HEAP32[$arrayidx + 12 >> 2] = HEAP32[$call28 + 12 >> 2];
    HEAP32[$arrayidx + 16 >> 2] = HEAP32[$call28 + 16 >> 2];
    HEAP32[$arrayidx + 20 >> 2] = HEAP32[$call28 + 20 >> 2];
    HEAP32[$call12 + ($add29 << 5) + 24 >> 2] = (($i$0 | 0) == 0 ? $add24 : $add29) + -1;
    $cmp42 = ($i$0 | 0) == ((__ZNK8TPPLPoly12GetNumPointsEv($__value_$i298) | 0) + -1 | 0);
    HEAP32[$call12 + ($add29 << 5) + 28 >> 2] = $cmp42 ? $polystartindex$0 : $add29 + 1 | 0;
    $i$0 = $i$0 + 1 | 0;
   }
   $iter$sroa$0$1$in$in = $3 + 4 | 0;
   $polystartindex$0 = $add24;
  }
  $call61 = __Znam($numvertices$0 >>> 0 > 1073741823 ? -1 : $numvertices$0 << 2) | 0;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) >= ($numvertices$0 | 0)) break;
   HEAP32[$call61 + ($i$1 << 2) >> 2] = $i$1;
   $i$1 = $i$1 + 1 | 0;
  }
  __ZN13TPPLPartition12VertexSorterC2EPNS_14MonotoneVertexE($agg$tmp, $call12);
  HEAP32[$agg$tmp2$i$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  __ZNSt3__26__sortIRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($call61, $call61 + ($numvertices$0 << 2) | 0, $agg$tmp2$i$byval_copy);
  $call70 = __Znam(($numvertices$0 | 0) < 0 ? -1 : $mul) | 0;
  $i$2 = 0;
  while (1) {
   if (($i$2 | 0) >= ($numvertices$0 | 0)) break;
   $arrayidx78 = $call12 + (HEAP32[$call12 + ($i$2 << 5) + 28 >> 2] << 5) | 0;
   $p79 = $call12 + (HEAP32[$call12 + ($i$2 << 5) + 24 >> 2] << 5) | 0;
   $p80 = $call12 + ($i$2 << 5) | 0;
   do if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $p79, $p80) | 0) if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $arrayidx78, $p80) | 0) {
    $arrayidx91 = $call70 + $i$2 | 0;
    if (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $arrayidx78, $p79, $p80) | 0) {
     HEAP8[$arrayidx91 >> 0] = 1;
     break;
    } else {
     HEAP8[$arrayidx91 >> 0] = 3;
     break;
    }
   } else label = 21; else label = 21; while (0);
   do if ((label | 0) == 21) {
    label = 0;
    if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $p80, $p79) | 0) if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $p80, $arrayidx78) | 0) {
     $arrayidx109 = $call70 + $i$2 | 0;
     if (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $arrayidx78, $p79, $p80) | 0) {
      HEAP8[$arrayidx109 >> 0] = 2;
      break;
     } else {
      HEAP8[$arrayidx109 >> 0] = 4;
      break;
     }
    }
    HEAP8[$call70 + $i$2 >> 0] = 0;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
  }
  $13 = $mul >>> 0 > 1073741823 ? -1 : $mul << 2;
  $call120 = __Znam($13) | 0;
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($edgeTree, $agg$tmp2$i$byval_copy);
  $call121 = __Znam($13) | 0;
  $__value_$i$i$i$i$i318 = $edgeTree + 4 | 0;
  $i$3 = 0;
  while (1) {
   if (($i$3 | 0) >= ($numvertices$0 | 0)) break;
   HEAP32[$call121 + ($i$3 << 2) >> 2] = $__value_$i$i$i$i$i318;
   $i$3 = $i$3 + 1 | 0;
  }
  $p1 = $newedge + 8 | 0;
  $p2 = $newedge + 32 | 0;
  $i$4 = 0;
  L43 : while (1) {
   if (($i$4 | 0) >= ($numvertices$0 | 0)) {
    $error$2$off0 = 0;
    break;
   }
   $14 = HEAP32[$call61 + ($i$4 << 2) >> 2] | 0;
   $arrayidx136 = $call12 + ($14 << 5) | 0;
   L46 : do switch (HEAP8[$call70 + $14 >> 0] | 0) {
   case 1:
    {
     HEAP32[$p1 >> 2] = HEAP32[$arrayidx136 >> 2];
     HEAP32[$p1 + 4 >> 2] = HEAP32[$arrayidx136 + 4 >> 2];
     HEAP32[$p1 + 8 >> 2] = HEAP32[$arrayidx136 + 8 >> 2];
     HEAP32[$p1 + 12 >> 2] = HEAP32[$arrayidx136 + 12 >> 2];
     HEAP32[$p1 + 16 >> 2] = HEAP32[$arrayidx136 + 16 >> 2];
     HEAP32[$p1 + 20 >> 2] = HEAP32[$arrayidx136 + 20 >> 2];
     $p141 = $call12 + (HEAP32[$call12 + ($14 << 5) + 28 >> 2] << 5) | 0;
     HEAP32[$p2 >> 2] = HEAP32[$p141 >> 2];
     HEAP32[$p2 + 4 >> 2] = HEAP32[$p141 + 4 >> 2];
     HEAP32[$p2 + 8 >> 2] = HEAP32[$p141 + 8 >> 2];
     HEAP32[$p2 + 12 >> 2] = HEAP32[$p141 + 12 >> 2];
     HEAP32[$p2 + 16 >> 2] = HEAP32[$p141 + 16 >> 2];
     HEAP32[$p2 + 20 >> 2] = HEAP32[$p141 + 20 >> 2];
     HEAP32[$newedge >> 2] = $14;
     __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_($agg$tmp2$i$byval_copy, $edgeTree, $newedge, $newedge);
     HEAP32[$call121 + ($14 << 2) >> 2] = HEAP32[$agg$tmp2$i$byval_copy >> 2];
     HEAP32[$call120 + ($14 << 2) >> 2] = $14;
     break;
    }
   case 2:
    {
     $previous149 = $call12 + ($14 << 5) + 24 | 0;
     $18 = HEAP32[$previous149 >> 2] | 0;
     if ((HEAP32[$call121 + ($18 << 2) >> 2] | 0) == ($__value_$i$i$i$i$i318 | 0)) {
      $error$2$off0 = 1;
      break L43;
     }
     $20 = HEAP32[$call120 + ($18 << 2) >> 2] | 0;
     if ((HEAP8[$call70 + $20 >> 0] | 0) == 4) {
      __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $call12, $newnumvertices, $14, $20, $call70, $call121, $edgeTree, $call120);
      $22 = HEAP32[$previous149 >> 2] | 0;
     } else $22 = $18;
     HEAP32[$agg$tmp2$i366 >> 2] = HEAP32[$call121 + ($22 << 2) >> 2];
     HEAP32[$agg$tmp2$i$byval_copy >> 2] = HEAP32[$agg$tmp2$i366 >> 2];
     __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEE($edgeTree, $agg$tmp2$i$byval_copy) | 0;
     break;
    }
   case 3:
    {
     HEAP32[$p1 >> 2] = HEAP32[$arrayidx136 >> 2];
     HEAP32[$p1 + 4 >> 2] = HEAP32[$arrayidx136 + 4 >> 2];
     HEAP32[$p1 + 8 >> 2] = HEAP32[$arrayidx136 + 8 >> 2];
     HEAP32[$p1 + 12 >> 2] = HEAP32[$arrayidx136 + 12 >> 2];
     HEAP32[$p1 + 16 >> 2] = HEAP32[$arrayidx136 + 16 >> 2];
     HEAP32[$p1 + 20 >> 2] = HEAP32[$arrayidx136 + 20 >> 2];
     HEAP32[$p2 >> 2] = HEAP32[$arrayidx136 >> 2];
     HEAP32[$p2 + 4 >> 2] = HEAP32[$arrayidx136 + 4 >> 2];
     HEAP32[$p2 + 8 >> 2] = HEAP32[$arrayidx136 + 8 >> 2];
     HEAP32[$p2 + 12 >> 2] = HEAP32[$arrayidx136 + 12 >> 2];
     HEAP32[$p2 + 16 >> 2] = HEAP32[$arrayidx136 + 16 >> 2];
     HEAP32[$p2 + 20 >> 2] = HEAP32[$arrayidx136 + 20 >> 2];
     $call3$i$i372 = __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEERKT_SD_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISB_EEEE($edgeTree, $newedge, HEAP32[$__value_$i$i$i$i$i318 >> 2] | 0, $__value_$i$i$i$i$i318) | 0;
     if (($call3$i$i372 | 0) == (HEAP32[$edgeTree >> 2] | 0)) {
      $error$2$off0 = 1;
      break L43;
     }
     $26 = HEAP32[$call3$i$i372 >> 2] | 0;
     if (!$26) {
      $__xx$0$in$i$i$i399 = $call3$i$i372;
      do {
       $__xx$0$in$i$i$i399$looptemp = $__xx$0$in$i$i$i399;
       $__xx$0$in$i$i$i399 = HEAP32[$__xx$0$in$i$i$i399 + 8 >> 2] | 0;
      } while ((HEAP32[$__xx$0$in$i$i$i399 >> 2] | 0) == ($__xx$0$in$i$i$i399$looptemp | 0));
      $retval$0$i$i$i407 = $__xx$0$in$i$i$i399;
     } else {
      $__x$addr$0$i$i$i$i394 = $26;
      while (1) {
       $27 = HEAP32[$__x$addr$0$i$i$i$i394 + 4 >> 2] | 0;
       if (!$27) {
        $retval$0$i$i$i407 = $__x$addr$0$i$i$i$i394;
        break;
       } else $__x$addr$0$i$i$i$i394 = $27;
      }
     }
     $__value_$i409 = $retval$0$i$i$i407 + 16 | 0;
     __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $call12, $newnumvertices, $14, HEAP32[$call120 + (HEAP32[$__value_$i409 >> 2] << 2) >> 2] | 0, $call70, $call121, $edgeTree, $call120);
     $sub204 = (HEAP32[$newnumvertices >> 2] | 0) + -2 | 0;
     $arrayidx205 = $call12 + ($sub204 << 5) | 0;
     HEAP32[$call120 + (HEAP32[$__value_$i409 >> 2] << 2) >> 2] = $14;
     HEAP32[$p1 >> 2] = HEAP32[$arrayidx205 >> 2];
     HEAP32[$p1 + 4 >> 2] = HEAP32[$arrayidx205 + 4 >> 2];
     HEAP32[$p1 + 8 >> 2] = HEAP32[$arrayidx205 + 8 >> 2];
     HEAP32[$p1 + 12 >> 2] = HEAP32[$arrayidx205 + 12 >> 2];
     HEAP32[$p1 + 16 >> 2] = HEAP32[$arrayidx205 + 16 >> 2];
     HEAP32[$p1 + 20 >> 2] = HEAP32[$arrayidx205 + 20 >> 2];
     $p214 = $call12 + (HEAP32[$call12 + ($sub204 << 5) + 28 >> 2] << 5) | 0;
     HEAP32[$p2 >> 2] = HEAP32[$p214 >> 2];
     HEAP32[$p2 + 4 >> 2] = HEAP32[$p214 + 4 >> 2];
     HEAP32[$p2 + 8 >> 2] = HEAP32[$p214 + 8 >> 2];
     HEAP32[$p2 + 12 >> 2] = HEAP32[$p214 + 12 >> 2];
     HEAP32[$p2 + 16 >> 2] = HEAP32[$p214 + 16 >> 2];
     HEAP32[$p2 + 20 >> 2] = HEAP32[$p214 + 20 >> 2];
     HEAP32[$newedge >> 2] = $sub204;
     __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_($agg$tmp2$i$byval_copy, $edgeTree, $newedge, $newedge);
     HEAP32[$call121 + ($sub204 << 2) >> 2] = HEAP32[$agg$tmp2$i$byval_copy >> 2];
     HEAP32[$call120 + ($sub204 << 2) >> 2] = $sub204;
     break;
    }
   case 4:
    {
     $previous225 = $call12 + ($14 << 5) + 24 | 0;
     $36 = HEAP32[$previous225 >> 2] | 0;
     if ((HEAP32[$call121 + ($36 << 2) >> 2] | 0) == ($__value_$i$i$i$i$i318 | 0)) {
      $error$2$off0 = 1;
      break L43;
     }
     $38 = HEAP32[$call120 + ($36 << 2) >> 2] | 0;
     if ((HEAP8[$call70 + $38 >> 0] | 0) == 4) {
      __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $call12, $newnumvertices, $14, $38, $call70, $call121, $edgeTree, $call120);
      $41 = HEAP32[$previous225 >> 2] | 0;
      $vindex2$0 = (HEAP32[$newnumvertices >> 2] | 0) + -2 | 0;
     } else {
      $41 = $36;
      $vindex2$0 = $14;
     }
     HEAP32[$agg$tmp2$i366 >> 2] = HEAP32[$call121 + ($41 << 2) >> 2];
     HEAP32[$agg$tmp2$i$byval_copy >> 2] = HEAP32[$agg$tmp2$i366 >> 2];
     __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEE($edgeTree, $agg$tmp2$i$byval_copy) | 0;
     HEAP32[$p1 >> 2] = HEAP32[$arrayidx136 >> 2];
     HEAP32[$p1 + 4 >> 2] = HEAP32[$arrayidx136 + 4 >> 2];
     HEAP32[$p1 + 8 >> 2] = HEAP32[$arrayidx136 + 8 >> 2];
     HEAP32[$p1 + 12 >> 2] = HEAP32[$arrayidx136 + 12 >> 2];
     HEAP32[$p1 + 16 >> 2] = HEAP32[$arrayidx136 + 16 >> 2];
     HEAP32[$p1 + 20 >> 2] = HEAP32[$arrayidx136 + 20 >> 2];
     HEAP32[$p2 >> 2] = HEAP32[$arrayidx136 >> 2];
     HEAP32[$p2 + 4 >> 2] = HEAP32[$arrayidx136 + 4 >> 2];
     HEAP32[$p2 + 8 >> 2] = HEAP32[$arrayidx136 + 8 >> 2];
     HEAP32[$p2 + 12 >> 2] = HEAP32[$arrayidx136 + 12 >> 2];
     HEAP32[$p2 + 16 >> 2] = HEAP32[$arrayidx136 + 16 >> 2];
     HEAP32[$p2 + 20 >> 2] = HEAP32[$arrayidx136 + 20 >> 2];
     $call3$i$i355 = __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEERKT_SD_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISB_EEEE($edgeTree, $newedge, HEAP32[$__value_$i$i$i$i$i318 >> 2] | 0, $__value_$i$i$i$i$i318) | 0;
     if (($call3$i$i355 | 0) == (HEAP32[$edgeTree >> 2] | 0)) {
      $error$2$off0 = 1;
      break L43;
     }
     $45 = HEAP32[$call3$i$i355 >> 2] | 0;
     if (!$45) {
      $__xx$0$in$i$i$i339 = $call3$i$i355;
      do {
       $__xx$0$in$i$i$i339$looptemp = $__xx$0$in$i$i$i339;
       $__xx$0$in$i$i$i339 = HEAP32[$__xx$0$in$i$i$i339 + 8 >> 2] | 0;
      } while ((HEAP32[$__xx$0$in$i$i$i339 >> 2] | 0) == ($__xx$0$in$i$i$i339$looptemp | 0));
      $retval$0$i$i$i347 = $__xx$0$in$i$i$i339;
     } else {
      $__x$addr$0$i$i$i$i334 = $45;
      while (1) {
       $46 = HEAP32[$__x$addr$0$i$i$i$i334 + 4 >> 2] | 0;
       if (!$46) {
        $retval$0$i$i$i347 = $__x$addr$0$i$i$i$i334;
        break;
       } else $__x$addr$0$i$i$i$i334 = $46;
      }
     }
     $__value_$i328 = $retval$0$i$i$i347 + 16 | 0;
     $arrayidx278 = $call120 + (HEAP32[$__value_$i328 >> 2] << 2) | 0;
     $50 = HEAP32[$arrayidx278 >> 2] | 0;
     if ((HEAP8[$call70 + $50 >> 0] | 0) == 4) {
      __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $call12, $newnumvertices, $vindex2$0, $50, $call70, $call121, $edgeTree, $call120);
      $arrayidx292$pre$phiZ2D = $call120 + (HEAP32[$__value_$i328 >> 2] << 2) | 0;
     } else $arrayidx292$pre$phiZ2D = $arrayidx278;
     HEAP32[$arrayidx292$pre$phiZ2D >> 2] = $vindex2$0;
     break;
    }
   case 0:
    {
     $previous295 = $call12 + ($14 << 5) + 24 | 0;
     $52 = HEAP32[$previous295 >> 2] | 0;
     if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $arrayidx136, $call12 + ($52 << 5) | 0) | 0) {
      if ((HEAP32[$call121 + ($52 << 2) >> 2] | 0) == ($__value_$i$i$i$i$i318 | 0)) {
       $error$2$off0 = 1;
       break L43;
      }
      $54 = HEAP32[$call120 + ($52 << 2) >> 2] | 0;
      if ((HEAP8[$call70 + $54 >> 0] | 0) == 4) {
       __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $call12, $newnumvertices, $14, $54, $call70, $call121, $edgeTree, $call120);
       $sub320 = (HEAP32[$newnumvertices >> 2] | 0) + -2 | 0;
       $57 = HEAP32[$previous295 >> 2] | 0;
       $v2$0 = $call12 + ($sub320 << 5) | 0;
       $vindex2$1 = $sub320;
      } else {
       $57 = $52;
       $v2$0 = $arrayidx136;
       $vindex2$1 = $14;
      }
      HEAP32[$agg$tmp2$i366 >> 2] = HEAP32[$call121 + ($57 << 2) >> 2];
      HEAP32[$agg$tmp2$i$byval_copy >> 2] = HEAP32[$agg$tmp2$i366 >> 2];
      __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEE($edgeTree, $agg$tmp2$i$byval_copy) | 0;
      HEAP32[$p1 >> 2] = HEAP32[$v2$0 >> 2];
      HEAP32[$p1 + 4 >> 2] = HEAP32[$v2$0 + 4 >> 2];
      HEAP32[$p1 + 8 >> 2] = HEAP32[$v2$0 + 8 >> 2];
      HEAP32[$p1 + 12 >> 2] = HEAP32[$v2$0 + 12 >> 2];
      HEAP32[$p1 + 16 >> 2] = HEAP32[$v2$0 + 16 >> 2];
      HEAP32[$p1 + 20 >> 2] = HEAP32[$v2$0 + 20 >> 2];
      $p334 = $call12 + (HEAP32[$v2$0 + 28 >> 2] << 5) | 0;
      HEAP32[$p2 >> 2] = HEAP32[$p334 >> 2];
      HEAP32[$p2 + 4 >> 2] = HEAP32[$p334 + 4 >> 2];
      HEAP32[$p2 + 8 >> 2] = HEAP32[$p334 + 8 >> 2];
      HEAP32[$p2 + 12 >> 2] = HEAP32[$p334 + 12 >> 2];
      HEAP32[$p2 + 16 >> 2] = HEAP32[$p334 + 16 >> 2];
      HEAP32[$p2 + 20 >> 2] = HEAP32[$p334 + 20 >> 2];
      HEAP32[$newedge >> 2] = $vindex2$1;
      __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_($agg$tmp2$i$byval_copy, $edgeTree, $newedge, $newedge);
      HEAP32[$call121 + ($vindex2$1 << 2) >> 2] = HEAP32[$agg$tmp2$i$byval_copy >> 2];
      HEAP32[$call120 + ($vindex2$1 << 2) >> 2] = $14;
      break L46;
     };
     HEAP32[$p1 >> 2] = HEAP32[$arrayidx136 >> 2];
     HEAP32[$p1 + 4 >> 2] = HEAP32[$arrayidx136 + 4 >> 2];
     HEAP32[$p1 + 8 >> 2] = HEAP32[$arrayidx136 + 8 >> 2];
     HEAP32[$p1 + 12 >> 2] = HEAP32[$arrayidx136 + 12 >> 2];
     HEAP32[$p1 + 16 >> 2] = HEAP32[$arrayidx136 + 16 >> 2];
     HEAP32[$p1 + 20 >> 2] = HEAP32[$arrayidx136 + 20 >> 2];
     HEAP32[$p2 >> 2] = HEAP32[$arrayidx136 >> 2];
     HEAP32[$p2 + 4 >> 2] = HEAP32[$arrayidx136 + 4 >> 2];
     HEAP32[$p2 + 8 >> 2] = HEAP32[$arrayidx136 + 8 >> 2];
     HEAP32[$p2 + 12 >> 2] = HEAP32[$arrayidx136 + 12 >> 2];
     HEAP32[$p2 + 16 >> 2] = HEAP32[$arrayidx136 + 16 >> 2];
     HEAP32[$p2 + 20 >> 2] = HEAP32[$arrayidx136 + 20 >> 2];
     $call3$i$i = __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEERKT_SD_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISB_EEEE($edgeTree, $newedge, HEAP32[$__value_$i$i$i$i$i318 >> 2] | 0, $__value_$i$i$i$i$i318) | 0;
     if (($call3$i$i | 0) == (HEAP32[$edgeTree >> 2] | 0)) {
      $error$2$off0 = 1;
      break L43;
     }
     $63 = HEAP32[$call3$i$i >> 2] | 0;
     if (!$63) {
      $__xx$0$in$i$i$i = $call3$i$i;
      do {
       $__xx$0$in$i$i$i$looptemp = $__xx$0$in$i$i$i;
       $__xx$0$in$i$i$i = HEAP32[$__xx$0$in$i$i$i + 8 >> 2] | 0;
      } while ((HEAP32[$__xx$0$in$i$i$i >> 2] | 0) == ($__xx$0$in$i$i$i$looptemp | 0));
      $retval$0$i$i$i = $__xx$0$in$i$i$i;
     } else {
      $__x$addr$0$i$i$i$i = $63;
      while (1) {
       $64 = HEAP32[$__x$addr$0$i$i$i$i + 4 >> 2] | 0;
       if (!$64) {
        $retval$0$i$i$i = $__x$addr$0$i$i$i$i;
        break;
       } else $__x$addr$0$i$i$i$i = $64;
      }
     }
     $__value_$i300 = $retval$0$i$i$i + 16 | 0;
     $arrayidx369 = $call120 + (HEAP32[$__value_$i300 >> 2] << 2) | 0;
     $68 = HEAP32[$arrayidx369 >> 2] | 0;
     if ((HEAP8[$call70 + $68 >> 0] | 0) == 4) {
      __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_(0, $call12, $newnumvertices, $14, $68, $call70, $call121, $edgeTree, $call120);
      $arrayidx383$pre$phiZ2D = $call120 + (HEAP32[$__value_$i300 >> 2] << 2) | 0;
     } else $arrayidx383$pre$phiZ2D = $arrayidx369;
     HEAP32[$arrayidx383$pre$phiZ2D >> 2] = $14;
     break;
    }
   default:
    {}
   } while (0);
   $i$4 = $i$4 + 1 | 0;
  }
  $70 = HEAP32[$newnumvertices >> 2] | 0;
  $call392 = __Znam(($70 | 0) > -1 ? $70 : -1) | 0;
  _memset($call392 | 0, 0, $70 | 0) | 0;
  if (!$error$2$off0) {
   __ZN8TPPLPolyC2Ev($agg$tmp2$i$byval_copy);
   $i$5 = 0;
   while (1) {
    if (($i$5 | 0) >= ($70 | 0)) break;
    $arrayidx401 = $call392 + $i$5 | 0;
    if (!(HEAP8[$arrayidx401 >> 0] | 0)) {
     $next406 = $call12 + ($i$5 << 5) + 28 | 0;
     $$pn$in = $next406;
     $size$0 = 1;
     while (1) {
      $$pn = HEAP32[$$pn$in >> 2] | 0;
      if (($$pn | 0) == ($i$5 | 0)) break;
      $$pn$in = $call12 + ($$pn << 5) + 28 | 0;
      $size$0 = $size$0 + 1 | 0;
     }
     __ZN8TPPLPoly4InitEl($agg$tmp2$i$byval_copy, $size$0);
     $arrayidx405 = $call12 + ($i$5 << 5) | 0;
     $call417 = __ZN8TPPLPolyixEi($agg$tmp2$i$byval_copy, 0) | 0;
     HEAP32[$call417 >> 2] = HEAP32[$arrayidx405 >> 2];
     HEAP32[$call417 + 4 >> 2] = HEAP32[$arrayidx405 + 4 >> 2];
     HEAP32[$call417 + 8 >> 2] = HEAP32[$arrayidx405 + 8 >> 2];
     HEAP32[$call417 + 12 >> 2] = HEAP32[$arrayidx405 + 12 >> 2];
     HEAP32[$call417 + 16 >> 2] = HEAP32[$arrayidx405 + 16 >> 2];
     HEAP32[$call417 + 20 >> 2] = HEAP32[$arrayidx405 + 20 >> 2];
     $74 = HEAP32[$next406 >> 2] | 0;
     HEAP8[$arrayidx401 >> 0] = 1;
     HEAP8[$call392 + $74 >> 0] = 1;
     $$pn289 = $74;
     $size$1 = 1;
     while (1) {
      if (($$pn289 | 0) == ($i$5 | 0)) break;
      $vnext$1 = $call12 + ($$pn289 << 5) | 0;
      $call428 = __ZN8TPPLPolyixEi($agg$tmp2$i$byval_copy, $size$1) | 0;
      HEAP32[$call428 >> 2] = HEAP32[$vnext$1 >> 2];
      HEAP32[$call428 + 4 >> 2] = HEAP32[$vnext$1 + 4 >> 2];
      HEAP32[$call428 + 8 >> 2] = HEAP32[$vnext$1 + 8 >> 2];
      HEAP32[$call428 + 12 >> 2] = HEAP32[$vnext$1 + 12 >> 2];
      HEAP32[$call428 + 16 >> 2] = HEAP32[$vnext$1 + 16 >> 2];
      HEAP32[$call428 + 20 >> 2] = HEAP32[$vnext$1 + 20 >> 2];
      $75 = HEAP32[$call12 + ($$pn289 << 5) + 28 >> 2] | 0;
      HEAP8[$call392 + $75 >> 0] = 1;
      $$pn289 = $75;
      $size$1 = $size$1 + 1 | 0;
     }
     __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($monotonePolys, $agg$tmp2$i$byval_copy);
    }
    $i$5 = $i$5 + 1 | 0;
   }
   __ZN8TPPLPolyD2Ev($agg$tmp2$i$byval_copy);
  }
  __ZdaPv($call12);
  __ZdaPv($call61);
  __ZdaPv($call70);
  __ZdaPv($call121);
  __ZdaPv($call120);
  __ZdaPv($call392);
  __ZNSt3__23setIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($edgeTree);
  $retval$1 = ($error$2$off0 ^ 1) & 1;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($this) {
 $this = $this | 0;
 var $39 = 0, $AfterQuals$1 = 0, $Res = 0, $Result = 0, $call = 0, $call177 = 0, $call180 = 0, $call185 = 0, $call193 = 0, $call196 = 0, $call199 = 0, $call202 = 0, $call217 = 0, $call219 = 0, $call220 = 0, $call231 = 0, $call244 = 0, $call255 = 0, $call267 = 0, $call279 = 0, $call291 = 0, $call306 = 0, $call307 = 0, $call320 = 0, $call331 = 0, $call42 = 0, $call46 = 0, $cmp = 0, $cmp6 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$10 = 0, $retval$9$ph = 0, $spec$select = 0, $spec$select28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $Result = sp + 16 | 0;
 $Res = sp + 8 | 0;
 $ref$tmp = sp;
 HEAP32[$Result >> 2] = 0;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
 L1 : do switch ($call << 24 >> 24 | 0) {
 case 75:
 case 86:
 case 114:
  {
   $cmp = $call << 24 >> 24 == 114;
   $spec$select = $cmp & 1;
   $cmp6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $spec$select) | 0) << 24 >> 24 == 86;
   $AfterQuals$1 = $cmp6 ? ($cmp ? 2 : 1) : $spec$select;
   $spec$select28 = $AfterQuals$1 + ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $AfterQuals$1) | 0) << 24 >> 24 == 75 & 1) | 0;
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $spec$select28) | 0) << 24 >> 24) {
   case 70:
    break;
   case 68:
    {
     switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $spec$select28 + 1 | 0) | 0) << 24 >> 24) {
     case 120:
     case 119:
     case 79:
     case 111:
      break;
     default:
      {
       label = 5;
       break L1;
      }
     }
     break;
    }
   default:
    {
     label = 5;
     break L1;
    }
   }
   $call42 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Result >> 2] = $call42;
   $39 = $call42;
   label = 81;
   break;
  }
 case 85:
  {
   label = 5;
   break;
  }
 case 118:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 51525) | 0;
   break;
  }
 case 119:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_($this) | 0;
   break;
  }
 case 98:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 51530) | 0;
   break;
  }
 case 99:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 51535) | 0;
   break;
  }
 case 97:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 51540) | 0;
   break;
  }
 case 104:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this, 51552) | 0;
   break;
  }
 case 115:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this, 51566) | 0;
   break;
  }
 case 116:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 51572) | 0;
   break;
  }
 case 105:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this, 51587) | 0;
   break;
  }
 case 106:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this, 51591) | 0;
   break;
  }
 case 108:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 51604) | 0;
   break;
  }
 case 109:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this, 51609) | 0;
   break;
  }
 case 120:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 51623) | 0;
   break;
  }
 case 121:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_($this) | 0;
   break;
  }
 case 110:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, 51633) | 0;
   break;
  }
 case 111:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this, 51642) | 0;
   break;
  }
 case 102:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this, 51660) | 0;
   break;
  }
 case 100:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_($this) | 0;
   break;
  }
 case 101:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 51666) | 0;
   break;
  }
 case 103:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 51678) | 0;
   break;
  }
 case 122:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this, 51689) | 0;
   break;
  }
 case 117:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Res, $this);
   if (__ZNK12_GLOBAL__N_110StringView5emptyEv($Res) | 0) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Res) | 0;
   $retval$10 = $retval$0;
   break;
  }
 case 68:
  {
   do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 100:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 51693) | 0;
     break L1;
     break;
    }
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 51703) | 0;
     break L1;
     break;
    }
   case 102:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 51714) | 0;
     break L1;
     break;
    }
   case 104:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 51724) | 0;
     break L1;
     break;
    }
   case 105:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, 51734) | 0;
     break L1;
     break;
    }
   case 115:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, 51743) | 0;
     break L1;
     break;
    }
   case 97:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 51752) | 0;
     break L1;
     break;
    }
   case 99:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 51757) | 0;
     break L1;
     break;
    }
   case 110:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 51772) | 0;
     break L1;
     break;
    }
   case 84:
   case 116:
    {
     $call177 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Result >> 2] = $call177;
     $39 = $call177;
     label = 81;
     break L1;
     break;
    }
   case 118:
    {
     $call180 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Result >> 2] = $call180;
     $39 = $call180;
     label = 81;
     break L1;
     break;
    }
   case 112:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call185 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Res >> 2] = $call185;
     if (!$call185) {
      $retval$10 = 0;
      break L1;
     } else {
      HEAP32[$Result >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this, $Res) | 0;
      label = 82;
      break L1;
     }
     break;
    }
   case 120:
   case 119:
   case 79:
   case 111:
    {
     $call193 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Result >> 2] = $call193;
     $39 = $call193;
     label = 81;
     break L1;
     break;
    }
   default:
    {
     $retval$10 = 0;
     break L1;
    }
   } while (0);
   break;
  }
 case 70:
  {
   $call196 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Result >> 2] = $call196;
   $39 = $call196;
   label = 81;
   break;
  }
 case 65:
  {
   $call199 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Result >> 2] = $call199;
   $39 = $call199;
   label = 81;
   break;
  }
 case 77:
  {
   $call202 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Result >> 2] = $call202;
   $39 = $call202;
   label = 81;
   break;
  }
 case 84:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) {
   case 101:
   case 117:
   case 115:
    {
     $call217 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Result >> 2] = $call217;
     $39 = $call217;
     label = 81;
     break L1;
     break;
    }
   default:
    {}
   }
   $call219 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call220 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call219) | 0;
   HEAP32[$Result >> 2] = $call220;
   if (!$call220) $retval$10 = 0; else if (!(HEAP8[$this + 360 >> 0] | 0)) label = 82; else if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
    $call231 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call219, 0) | 0;
    HEAP32[$Res >> 2] = $call231;
    if (!$call231) {
     $retval$10 = 0;
     break L1;
    } else {
     HEAP32[$Result >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Result, $Res) | 0;
     label = 82;
     break L1;
    }
   } else label = 82;
   break;
  }
 case 80:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call244 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call244;
   if (!$call244) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$Result >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $Res) | 0;
    label = 82;
    break L1;
   }
   break;
  }
 case 82:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call255 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call255;
   if (!$call255) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$Result >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this, $Res, $ref$tmp) | 0;
    label = 82;
    break L1;
   }
   break;
  }
 case 79:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call267 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call267;
   if (!$call267) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$ref$tmp >> 2] = 1;
    HEAP32[$Result >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this, $Res, $ref$tmp) | 0;
    label = 82;
    break L1;
   }
   break;
  }
 case 67:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call279 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call279;
   if (!$call279) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$Result >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_($this, $Res) | 0;
    label = 82;
    break L1;
   }
   break;
  }
 case 71:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call291 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$Res >> 2] = $call291;
   if (!$call291) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$Result >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_($this, $Res) | 0;
    label = 82;
    break L1;
   }
   break;
  }
 case 83:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) {
   case 116:
   case 0:
    {
     label = 80;
     break L1;
     break;
    }
   default:
    {}
   }
   $call306 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call307 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call306) | 0;
   HEAP32[$Res >> 2] = $call307;
   if (!$call307) $retval$9$ph = 0; else if (!(HEAP8[$this + 360 >> 0] | 0)) $retval$9$ph = $call307; else if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
    $call320 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call306, 0) | 0;
    HEAP32[$ref$tmp >> 2] = $call320;
    if (!$call320) {
     $retval$10 = 0;
     break L1;
    } else {
     HEAP32[$Result >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Res, $ref$tmp) | 0;
     label = 82;
     break L1;
    }
   } else $retval$9$ph = $call307;
   $retval$10 = $retval$9$ph;
   break;
  }
 default:
  label = 80;
 } while (0);
 if ((label | 0) == 5) {
  $call46 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$Result >> 2] = $call46;
  $39 = $call46;
  label = 81;
 } else if ((label | 0) == 80) {
  $call331 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$Result >> 2] = $call331;
  $39 = $call331;
  label = 81;
 }
 if ((label | 0) == 81) if (!$39) $retval$10 = 0; else label = 82;
 if ((label | 0) == 82) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $Result);
  $retval$10 = HEAP32[$Result >> 2] | 0;
 }
 STACKTOP = sp;
 return $retval$10 | 0;
}

function __ZN6DrMesh15triangulateFaceERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEERKNS1_IS5_NS3_IS5_EEEERK8DrBitmapb14Trianglulationd($this, $outline_points, $hole_list, $image, $wireframe, $type, $alpha_tolerance) {
 $this = $this | 0;
 $outline_points = $outline_points | 0;
 $hole_list = $hole_list | 0;
 $image = $image | 0;
 $wireframe = $wireframe | 0;
 $type = $type | 0;
 $alpha_tolerance = +$alpha_tolerance;
 var $$cast = 0, $$in = 0, $0 = 0, $1 = 0, $100 = 0, $105 = 0, $106 = 0, $11 = 0.0, $110 = 0, $115 = 0, $116 = 0, $120 = 0, $125 = 0, $126 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0.0, $25 = 0.0, $28 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $81 = 0, $82 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $92 = 0.0, $93 = 0.0, $__begin$sroa$0$0 = 0, $__begin116$sroa$0$0 = 0, $__begin116$sroa$0$0$in$in = 0, $__begin240$sroa$0$0 = 0, $__begin240$sroa$0$0$in$in = 0, $__begin287$sroa$0$0 = 0, $__begin302$sroa$0$0 = 0, $__end_$i = 0, $__end_$i$i314 = 0, $__end_$i$i349 = 0, $__end_$i258 = 0, $__end_$i264 = 0, $__end_$i308 = 0, $__end_$i416 = 0, $__next_$i$i$i = 0, $__next_$i$i$i247 = 0, $__next_$i$i$i261 = 0, $__value_$i$i$i$i315 = 0, $__value_$i$i$i$i350 = 0, $add393 = 0, $add408 = 0, $add520 = 0.0, $add522 = 0.0, $add616 = 0.0, $add624 = 0.0, $agg$tmp$i = 0, $agg$tmp$i$byval_copy = 0, $agg$tmp2$i = 0, $agg$tmp611 = 0, $agg$tmp619 = 0, $agg$tmp627 = 0, $alpha_tolerance$addr = 0, $arrayidx$i317 = 0, $arrayidx$i338 = 0, $call266 = 0, $call599 = 0.0, $centroid = 0, $cmp557 = 0, $cmp574 = 0, $conv = 0.0, $conv137 = 0.0, $conv145 = 0.0, $conv151 = 0.0, $conv159 = 0.0, $conv165 = 0.0, $conv173 = 0.0, $conv180 = 0.0, $conv187 = 0.0, $conv194 = 0.0, $conv201 = 0.0, $conv208 = 0.0, $conv366 = 0.0, $conv371 = 0.0, $conv4 = 0.0, $div = 0.0, $div353 = 0, $div5 = 0.0, $hole_count$0 = 0, $hole_count$1 = 0, $i$0 = 0, $i257$0 = 0, $i347$0 = 0, $i386$0 = 0, $i452$0 = 0, $i52$0 = 0, $incdec$ptr$i321 = 0, $incdec$ptr$i362 = 0, $incdec$ptr$i4$i$i = 0, $incdec$ptr$i403 = 0, $j$0 = 0, $j392$0 = 0, $mid12 = 0, $mid13 = 0, $mid23 = 0, $mul = 0, $mul485 = 0, $mul506 = 0, $outpolys = 0, $poly = 0, $pp = 0, $ref$tmp547 = 0, $result = 0, $spec$select = 0, $testpolys = 0, $tmpcast243$byval_copy = 0, $transparent_count$2 = 0, $triangles = 0, $x_add$0 = 0, $y271 = 0, $y316 = 0, $y550 = 0, $y567 = 0, $y584 = 0, $y_add$0 = 0, $y_add$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $tmpcast243$byval_copy = sp + 216 | 0;
 $agg$tmp$i$byval_copy = sp + 280 | 0;
 $agg$tmp$i = sp + 192 | 0;
 $agg$tmp2$i = sp + 80 | 0;
 $alpha_tolerance$addr = sp + 208 | 0;
 $testpolys = sp + 268 | 0;
 $result = sp + 256 | 0;
 $poly = sp + 244 | 0;
 $pp = sp + 292 | 0;
 $outpolys = sp + 232 | 0;
 $mid12 = sp + 48 | 0;
 $mid23 = sp + 40 | 0;
 $mid13 = sp + 32 | 0;
 $centroid = sp + 16 | 0;
 $ref$tmp547 = sp;
 $agg$tmp611 = sp + 72 | 0;
 $agg$tmp619 = sp + 64 | 0;
 $agg$tmp627 = sp + 56 | 0;
 HEAPF64[$alpha_tolerance$addr >> 3] = $alpha_tolerance;
 $0 = HEAP32[$image + 8 >> 2] | 0;
 $1 = HEAP32[$image + 12 >> 2] | 0;
 $conv = +($0 | 0);
 $div = $conv * .5;
 $conv4 = +($1 | 0);
 $div5 = $conv4 * .5;
 $__end_$i = $outline_points + 4 | 0;
 if ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$outline_points >> 2] | 0) >> 4 >>> 0 >= 3) {
  HEAP32[$testpolys >> 2] = $testpolys;
  $__next_$i$i$i = $testpolys + 4 | 0;
  HEAP32[$__next_$i$i$i >> 2] = $testpolys;
  HEAP32[$testpolys + 8 >> 2] = 0;
  HEAP32[$result >> 2] = $result;
  $__next_$i$i$i247 = $result + 4 | 0;
  HEAP32[$__next_$i$i$i247 >> 2] = $result;
  HEAP32[$result + 8 >> 2] = 0;
  __ZN8TPPLPolyC2Ev($poly);
  __ZN8TPPLPoly4InitEl($poly, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$outline_points >> 2] | 0) >> 4);
  $i$0 = 0;
  while (1) {
   $7 = HEAP32[$outline_points >> 2] | 0;
   if (($i$0 | 0) >= ((HEAP32[$__end_$i >> 2] | 0) - $7 >> 4 | 0)) break;
   $11 = +HEAPF64[$7 + ($i$0 << 4) >> 3];
   HEAPF64[(__ZN8TPPLPolyixEi($poly, $i$0) | 0) >> 3] = $11;
   $13 = +HEAPF64[(HEAP32[$outline_points >> 2] | 0) + ($i$0 << 4) + 8 >> 3];
   HEAPF64[(__ZN8TPPLPolyixEi($poly, $i$0) | 0) + 8 >> 3] = $13;
   $i$0 = $i$0 + 1 | 0;
  }
  __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($testpolys, $poly);
  $__end_$i258 = $hole_list + 4 | 0;
  $9 = HEAP32[$__end_$i258 >> 2] | 0;
  $__end_$i264 = $agg$tmp$i$byval_copy + 4 | 0;
  $__begin$sroa$0$0 = HEAP32[$hole_list >> 2] | 0;
  $hole_count$0 = 0;
  while (1) {
   if (($__begin$sroa$0$0 | 0) == ($9 | 0)) break;
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($agg$tmp$i$byval_copy, $__begin$sroa$0$0);
   L10 : do if ((__ZN10DrPolygonF22findWindingOrientationERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE($agg$tmp$i$byval_copy) | 0) == 1) {
    $14 = HEAP32[$agg$tmp$i$byval_copy >> 2] | 0;
    $15 = HEAP32[$__end_$i264 >> 2] | 0;
    if (($14 | 0) != ($15 | 0)) {
     $16 = $15;
     $17 = $14;
     while (1) {
      $incdec$ptr$i4$i$i = $16 + -16 | 0;
      if ($17 >>> 0 >= $incdec$ptr$i4$i$i >>> 0) break L10;
      HEAP32[$tmpcast243$byval_copy >> 2] = HEAP32[$17 >> 2];
      HEAP32[$tmpcast243$byval_copy + 4 >> 2] = HEAP32[$17 + 4 >> 2];
      HEAP32[$tmpcast243$byval_copy + 8 >> 2] = HEAP32[$17 + 8 >> 2];
      HEAP32[$tmpcast243$byval_copy + 12 >> 2] = HEAP32[$17 + 12 >> 2];
      __ZN8DrPointFaSERKS_($17, $incdec$ptr$i4$i$i) | 0;
      __ZN8DrPointFaSERKS_($incdec$ptr$i4$i$i, $tmpcast243$byval_copy) | 0;
      $16 = $incdec$ptr$i4$i$i;
      $17 = $17 + 16 | 0;
     }
    }
   } while (0);
   __ZN8TPPLPolyC2Ev($tmpcast243$byval_copy);
   __ZN8TPPLPoly4InitEl($tmpcast243$byval_copy, (HEAP32[$__end_$i264 >> 2] | 0) - (HEAP32[$agg$tmp$i$byval_copy >> 2] | 0) >> 4);
   __ZN8TPPLPoly7SetHoleEb($tmpcast243$byval_copy, 1);
   $i52$0 = 0;
   while (1) {
    $21 = HEAP32[$agg$tmp$i$byval_copy >> 2] | 0;
    if (($i52$0 | 0) >= ((HEAP32[$__end_$i264 >> 2] | 0) - $21 >> 4 | 0)) break;
    $23 = +HEAPF64[$21 + ($i52$0 << 4) >> 3];
    HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, $i52$0) | 0) >> 3] = $23;
    $25 = +HEAPF64[(HEAP32[$agg$tmp$i$byval_copy >> 2] | 0) + ($i52$0 << 4) + 8 >> 3];
    HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, $i52$0) | 0) + 8 >> 3] = $25;
    $i52$0 = $i52$0 + 1 | 0;
   }
   if ($i52$0 >>> 0 > 2) {
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($testpolys, $tmpcast243$byval_copy);
    $hole_count$1 = $hole_count$0 + 1 | 0;
   } else $hole_count$1 = $hole_count$0;
   __ZN8TPPLPolyD2Ev($tmpcast243$byval_copy);
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($agg$tmp$i$byval_copy);
   $__begin$sroa$0$0 = $__begin$sroa$0$0 + 12 | 0;
   $hole_count$0 = $hole_count$1;
  }
  HEAP32[$outpolys >> 2] = $outpolys;
  $__next_$i$i$i261 = $outpolys + 4 | 0;
  HEAP32[$__next_$i$i$i261 >> 2] = $outpolys;
  HEAP32[$outpolys + 8 >> 2] = 0;
  if (($hole_count$0 | 0) > 0) __ZN13TPPLPartition11RemoveHolesEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($pp, $testpolys, $outpolys) | 0; else {
   HEAP32[$agg$tmp$i >> 2] = HEAP32[$__next_$i$i$i >> 2];
   HEAP32[$agg$tmp2$i >> 2] = $testpolys;
   HEAP32[$agg$tmp$i$byval_copy >> 2] = HEAP32[$agg$tmp$i >> 2];
   HEAP32[$tmpcast243$byval_copy >> 2] = HEAP32[$agg$tmp2$i >> 2];
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE6assignINS_21__list_const_iteratorIS1_PvEEEEvT_S9_PNS_9enable_ifIXsr19__is_input_iteratorIS9_EE5valueEvE4typeE($outpolys, $agg$tmp$i$byval_copy, $tmpcast243$byval_copy, 0);
  }
  L29 : do switch ($type | 0) {
  case 0:
   {
    __ZN13TPPLPartition14Triangulate_ECEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($pp, $outpolys, $result) | 0;
    label = 26;
    break;
   }
  case 1:
   {
    __ZN13TPPLPartition15Triangulate_OPTEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE($pp, (HEAP32[$__next_$i$i$i261 >> 2] | 0) + 8 | 0, $result) | 0;
    label = 26;
    break;
   }
  case 2:
   {
    __ZN13TPPLPartition16Triangulate_MONOEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($pp, $outpolys, $result) | 0;
    label = 26;
    break;
   }
  case 3:
   {
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($result, $poly);
    HEAP32[$agg$tmp$i$byval_copy >> 2] = 0;
    $__end_$i$i314 = $agg$tmp$i$byval_copy + 4 | 0;
    HEAP32[$__end_$i$i314 >> 2] = 0;
    $__value_$i$i$i$i315 = $agg$tmp$i$byval_copy + 8 | 0;
    HEAP32[$__value_$i$i$i$i315 >> 2] = 0;
    $__begin240$sroa$0$0$in$in = $__next_$i$i$i247;
    while (1) {
     $__begin240$sroa$0$0 = HEAP32[$__begin240$sroa$0$0$in$in >> 2] | 0;
     $42 = $__begin240$sroa$0$0;
     if (($result | 0) == ($42 | 0)) break;
     __ZN8TPPLPolyC2ERKS_($tmpcast243$byval_copy, $__begin240$sroa$0$0 + 8 | 0);
     $i257$0 = 0;
     while (1) {
      if (($i257$0 | 0) >= (__ZNK8TPPLPoly12GetNumPointsEv($tmpcast243$byval_copy) | 0)) break;
      $call266 = __ZN8TPPLPolyixEi($tmpcast243$byval_copy, $i257$0) | 0;
      $46 = HEAP32[$__end_$i$i314 >> 2] | 0;
      if (($46 | 0) == (HEAP32[$__value_$i$i$i$i315 >> 2] | 0)) __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($agg$tmp$i$byval_copy, $call266); else {
       HEAPF64[$46 >> 3] = +HEAPF64[$call266 >> 3];
       HEAP32[$__end_$i$i314 >> 2] = $46 + 8;
      }
      $y271 = (__ZN8TPPLPolyixEi($tmpcast243$byval_copy, $i257$0) | 0) + 8 | 0;
      $49 = HEAP32[$__end_$i$i314 >> 2] | 0;
      if (($49 | 0) == (HEAP32[$__value_$i$i$i$i315 >> 2] | 0)) __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($agg$tmp$i$byval_copy, $y271); else {
       HEAPF64[$49 >> 3] = +HEAPF64[$y271 >> 3];
       HEAP32[$__end_$i$i314 >> 2] = $49 + 8;
      }
      $i257$0 = $i257$0 + 1 | 0;
     }
     __ZN8TPPLPolyD2Ev($tmpcast243$byval_copy);
     $__begin240$sroa$0$0$in$in = $42 + 4 | 0;
    }
    $44 = HEAP32[$__end_$i258 >> 2] | 0;
    $__end_$i416 = $tmpcast243$byval_copy + 4 | 0;
    $y316 = $agg$tmp$i + 8 | 0;
    $__begin287$sroa$0$0 = HEAP32[$hole_list >> 2] | 0;
    while (1) {
     if (($__begin287$sroa$0$0 | 0) == ($44 | 0)) break;
     __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($tmpcast243$byval_copy, $__begin287$sroa$0$0);
     $53 = HEAP32[$__end_$i416 >> 2] | 0;
     $__begin302$sroa$0$0 = HEAP32[$tmpcast243$byval_copy >> 2] | 0;
     while (1) {
      if (($__begin302$sroa$0$0 | 0) == ($53 | 0)) break;
      HEAP32[$agg$tmp$i >> 2] = HEAP32[$__begin302$sroa$0$0 >> 2];
      HEAP32[$agg$tmp$i + 4 >> 2] = HEAP32[$__begin302$sroa$0$0 + 4 >> 2];
      HEAP32[$agg$tmp$i + 8 >> 2] = HEAP32[$__begin302$sroa$0$0 + 8 >> 2];
      HEAP32[$agg$tmp$i + 12 >> 2] = HEAP32[$__begin302$sroa$0$0 + 12 >> 2];
      $54 = HEAP32[$__end_$i$i314 >> 2] | 0;
      $55 = HEAP32[$__value_$i$i$i$i315 >> 2] | 0;
      if (($54 | 0) == ($55 | 0)) {
       __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($agg$tmp$i$byval_copy, $agg$tmp$i);
       $57 = HEAP32[$__end_$i$i314 >> 2] | 0;
       $58 = HEAP32[$__value_$i$i$i$i315 >> 2] | 0;
      } else {
       HEAPF64[$54 >> 3] = +HEAPF64[$agg$tmp$i >> 3];
       $incdec$ptr$i403 = $54 + 8 | 0;
       HEAP32[$__end_$i$i314 >> 2] = $incdec$ptr$i403;
       $57 = $incdec$ptr$i403;
       $58 = $55;
      }
      if (($57 | 0) == ($58 | 0)) __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($agg$tmp$i$byval_copy, $y316); else {
       HEAPF64[$57 >> 3] = +HEAPF64[$y316 >> 3];
       HEAP32[$__end_$i$i314 >> 2] = $57 + 8;
      }
      $__begin302$sroa$0$0 = $__begin302$sroa$0$0 + 16 | 0;
     }
     __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($tmpcast243$byval_copy);
     $__begin287$sroa$0$0 = $__begin287$sroa$0$0 + 12 | 0;
    }
    L66 : do if ($wireframe) {
     $x_add$0 = 8;
     while (1) if (!(($0 | 0) % ($x_add$0 | 0) | 0)) break; else $x_add$0 = $x_add$0 + -1 | 0;
     $y_add$0 = 8;
     while (1) if (!(($1 | 0) % ($y_add$0 | 0) | 0)) break; else $y_add$0 = $y_add$0 + -1 | 0;
     $spec$select = ($x_add$0 | 0) > 1 ? $x_add$0 : 1;
     $y_add$1 = ($y_add$0 | 0) > 1 ? $y_add$0 : 1;
     $div353 = $y_add$1 >>> 1;
     $i347$0 = $spec$select >>> 1;
     while (1) {
      if (($i347$0 | 0) >= ($0 | 0)) break L66;
      $conv366 = +($i347$0 | 0);
      $j$0 = $div353;
      while (1) {
       if (($j$0 | 0) >= ($1 | 0)) break;
       __ZNK8DrBitmap8getPixelEii($tmpcast243$byval_copy, $image, $i347$0, $j$0);
       if (+__ZNK7DrColor6alphaFEv($tmpcast243$byval_copy) >= $alpha_tolerance) {
        HEAPF64[$tmpcast243$byval_copy >> 3] = $conv366;
        $62 = HEAP32[$__end_$i$i314 >> 2] | 0;
        $63 = HEAP32[$__value_$i$i$i$i315 >> 2] | 0;
        if ($62 >>> 0 < $63 >>> 0) {
         HEAPF64[$62 >> 3] = $conv366;
         $incdec$ptr$i362 = $62 + 8 | 0;
         HEAP32[$__end_$i$i314 >> 2] = $incdec$ptr$i362;
         $64 = $incdec$ptr$i362;
         $65 = $63;
        } else {
         __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_($agg$tmp$i$byval_copy, $tmpcast243$byval_copy);
         $64 = HEAP32[$__end_$i$i314 >> 2] | 0;
         $65 = HEAP32[$__value_$i$i$i$i315 >> 2] | 0;
        }
        $conv371 = +($j$0 | 0);
        HEAPF64[$tmpcast243$byval_copy >> 3] = $conv371;
        if ($64 >>> 0 < $65 >>> 0) {
         HEAPF64[$64 >> 3] = $conv371;
         HEAP32[$__end_$i$i314 >> 2] = $64 + 8;
        } else __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_($agg$tmp$i$byval_copy, $tmpcast243$byval_copy);
       }
       $j$0 = $j$0 + $y_add$1 | 0;
      }
      $i347$0 = $i347$0 + $spec$select | 0;
     }
    } while (0);
    HEAP32[$agg$tmp$i >> 2] = 0;
    $__end_$i$i349 = $agg$tmp$i + 4 | 0;
    HEAP32[$__end_$i$i349 >> 2] = 0;
    $__value_$i$i$i$i350 = $agg$tmp$i + 8 | 0;
    HEAP32[$__value_$i$i$i$i350 >> 2] = 0;
    $i386$0 = 0;
    while (1) {
     $66 = HEAP32[$__end_$i$i314 >> 2] | 0;
     $67 = HEAP32[$agg$tmp$i$byval_copy >> 2] | 0;
     if ($i386$0 >>> 0 >= $66 - $67 >> 3 >>> 0) break;
     $add393 = $i386$0 + 2 | 0;
     $add408 = $i386$0 | 1;
     $$in = $67;
     $70 = $66;
     $j392$0 = $add393;
     while (1) {
      $$cast = $$in;
      $arrayidx$i338 = $$cast + ($i386$0 << 3) | 0;
      if ($j392$0 >>> 0 >= $70 - $$in >> 3 >>> 0) {
       label = 80;
       break;
      }
      HEAPF64[$tmpcast243$byval_copy >> 3] = .05;
      if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($arrayidx$i338, $$cast + ($j392$0 << 3) | 0, $tmpcast243$byval_copy) | 0) {
       $71 = HEAP32[$agg$tmp$i$byval_copy >> 2] | 0;
       HEAPF64[$agg$tmp2$i >> 3] = .05;
       if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($71 + ($add408 << 3) | 0, $71 + ($j392$0 + 1 << 3) | 0, $agg$tmp2$i) | 0) break;
      } else {}
      $$in = HEAP32[$agg$tmp$i$byval_copy >> 2] | 0;
      $70 = HEAP32[$__end_$i$i314 >> 2] | 0;
      $j392$0 = $j392$0 + 2 | 0;
     }
     do if ((label | 0) == 80) {
      label = 0;
      $72 = HEAP32[$__end_$i$i349 >> 2] | 0;
      $73 = HEAP32[$__value_$i$i$i$i350 >> 2] | 0;
      if (($72 | 0) == ($73 | 0)) {
       __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($agg$tmp$i, $arrayidx$i338);
       $76 = HEAP32[$agg$tmp$i$byval_copy >> 2] | 0;
       $77 = HEAP32[$__end_$i$i349 >> 2] | 0;
       $78 = HEAP32[$__value_$i$i$i$i350 >> 2] | 0;
      } else {
       HEAPF64[$72 >> 3] = +HEAPF64[$arrayidx$i338 >> 3];
       $incdec$ptr$i321 = $72 + 8 | 0;
       HEAP32[$__end_$i$i349 >> 2] = $incdec$ptr$i321;
       $76 = $$in;
       $77 = $incdec$ptr$i321;
       $78 = $73;
      }
      $arrayidx$i317 = $76 + ($add408 << 3) | 0;
      if (($77 | 0) == ($78 | 0)) {
       __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($agg$tmp$i, $arrayidx$i317);
       break;
      } else {
       HEAPF64[$77 >> 3] = +HEAPF64[$arrayidx$i317 >> 3];
       HEAP32[$__end_$i$i349 >> 2] = $77 + 8;
       break;
      }
     } while (0);
     $i386$0 = $add393;
    }
    if ((HEAP32[$__end_$i$i349 >> 2] | 0) - (HEAP32[$agg$tmp$i >> 2] | 0) >> 3 >>> 0 < 6) {
     __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($agg$tmp$i);
     __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($agg$tmp$i$byval_copy);
     break L29;
    }
    __ZN10DelaunatorC2ERKNSt3__26vectorIdNS0_9allocatorIdEEEE($agg$tmp2$i, $agg$tmp$i);
    $triangles = $agg$tmp2$i + 4 | 0;
    $__end_$i308 = $agg$tmp2$i + 8 | 0;
    $y550 = $mid12 + 4 | 0;
    $y567 = $mid23 + 4 | 0;
    $y584 = $mid13 + 4 | 0;
    $i452$0 = 0;
    while (1) {
     $81 = HEAP32[$triangles >> 2] | 0;
     $82 = $81;
     if ($i452$0 >>> 0 >= (HEAP32[$__end_$i308 >> 2] | 0) - $81 >> 2 >>> 0) break;
     $mul = HEAP32[$82 + ($i452$0 << 2) >> 2] << 1;
     $85 = HEAP32[HEAP32[$agg$tmp2$i >> 2] >> 2] | 0;
     $86 = +HEAPF64[$85 + ($mul << 3) >> 3];
     $87 = +HEAPF64[$85 + (($mul | 1) << 3) >> 3];
     $mul485 = HEAP32[$82 + ($i452$0 + 1 << 2) >> 2] << 1;
     $89 = +HEAPF64[$85 + ($mul485 << 3) >> 3];
     $90 = +HEAPF64[$85 + (($mul485 | 1) << 3) >> 3];
     $mul506 = HEAP32[$82 + ($i452$0 + 2 << 2) >> 2] << 1;
     $92 = +HEAPF64[$85 + ($mul506 << 3) >> 3];
     $93 = +HEAPF64[$85 + (($mul506 | 1) << 3) >> 3];
     $add520 = $86 + $89;
     $add522 = $87 + $90;
     __ZN7DrPointC2Edd($mid12, $add520 * .5, $add522 * .5);
     __ZN7DrPointC2Edd($mid23, ($89 + $92) * .5, ($90 + $93) * .5);
     __ZN7DrPointC2Edd($mid13, ($86 + $92) * .5, ($87 + $93) * .5);
     __ZN8DrPointFC2Edd($centroid, ($add520 + $92) / 3.0, ($add522 + $93) / 3.0);
     __ZN8DrPointFC2Edd($ref$tmp547, +(HEAP32[$mid12 >> 2] | 0), +(HEAP32[$y550 >> 2] | 0));
     __Z15getRoundedPixelRK8DrBitmapRK8DrPointF($tmpcast243$byval_copy, $image, $ref$tmp547);
     $cmp557 = +__ZNK7DrColor6alphaFEv($tmpcast243$byval_copy) < $alpha_tolerance;
     __ZN8DrPointFC2Edd($ref$tmp547, +(HEAP32[$mid23 >> 2] | 0), +(HEAP32[$y567 >> 2] | 0));
     __Z15getRoundedPixelRK8DrBitmapRK8DrPointF($tmpcast243$byval_copy, $image, $ref$tmp547);
     $cmp574 = +__ZNK7DrColor6alphaFEv($tmpcast243$byval_copy) < $alpha_tolerance;
     __ZN8DrPointFC2Edd($ref$tmp547, +(HEAP32[$mid13 >> 2] | 0), +(HEAP32[$y584 >> 2] | 0));
     __Z15getRoundedPixelRK8DrBitmapRK8DrPointF($tmpcast243$byval_copy, $image, $ref$tmp547);
     $transparent_count$2 = ($cmp574 ? ($cmp557 ? 2 : 1) : $cmp557 & 1) + (+__ZNK7DrColor6alphaFEv($tmpcast243$byval_copy) < $alpha_tolerance & 1) | 0;
     $call599 = +__Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($image, $centroid, $alpha_tolerance$addr);
     if (!($call599 > .9999)) if (($transparent_count$2 + ($call599 > .6666 & 1) | 0) >>> 0 <= 1) {
      $100 = $mid12;
      $105 = HEAP32[$100 + 4 >> 2] | 0;
      $106 = $agg$tmp611;
      HEAP32[$106 >> 2] = HEAP32[$100 >> 2];
      HEAP32[$106 + 4 >> 2] = $105;
      HEAP32[$tmpcast243$byval_copy >> 2] = HEAP32[$agg$tmp611 >> 2];
      HEAP32[$tmpcast243$byval_copy + 4 >> 2] = HEAP32[$agg$tmp611 + 4 >> 2];
      __ZN8DrPointFC2E7DrPoint($ref$tmp547, $tmpcast243$byval_copy);
      $add616 = +__Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($image, $ref$tmp547, $alpha_tolerance$addr) + 0.0;
      $110 = $mid23;
      $115 = HEAP32[$110 + 4 >> 2] | 0;
      $116 = $agg$tmp619;
      HEAP32[$116 >> 2] = HEAP32[$110 >> 2];
      HEAP32[$116 + 4 >> 2] = $115;
      HEAP32[$tmpcast243$byval_copy >> 2] = HEAP32[$agg$tmp619 >> 2];
      HEAP32[$tmpcast243$byval_copy + 4 >> 2] = HEAP32[$agg$tmp619 + 4 >> 2];
      __ZN8DrPointFC2E7DrPoint($ref$tmp547, $tmpcast243$byval_copy);
      $add624 = $add616 + +__Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($image, $ref$tmp547, $alpha_tolerance$addr);
      $120 = $mid13;
      $125 = HEAP32[$120 + 4 >> 2] | 0;
      $126 = $agg$tmp627;
      HEAP32[$126 >> 2] = HEAP32[$120 >> 2];
      HEAP32[$126 + 4 >> 2] = $125;
      HEAP32[$tmpcast243$byval_copy >> 2] = HEAP32[$agg$tmp627 >> 2];
      HEAP32[$tmpcast243$byval_copy + 4 >> 2] = HEAP32[$agg$tmp627 + 4 >> 2];
      __ZN8DrPointFC2E7DrPoint($ref$tmp547, $tmpcast243$byval_copy);
      if (!($call599 + ($add624 + +__Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($image, $ref$tmp547, $alpha_tolerance$addr)) > 2.49)) __ZN6DrMesh8triangleEffffffffffff($this, $86 - $div, $conv4 - $87 - $div5, $86 / $conv, $87 / $conv4, $89 - $div, $conv4 - $90 - $div5, $89 / $conv, $90 / $conv4, $92 - $div, $conv4 - $93 - $div5, $92 / $conv, $93 / $conv4);
     }
     $i452$0 = $i452$0 + 3 | 0;
    }
    __ZN10DelaunatorD2Ev($agg$tmp2$i);
    __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($agg$tmp$i);
    __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($agg$tmp$i$byval_copy);
    break;
   }
  default:
   label = 26;
  } while (0);
  L126 : do if ((label | 0) == 26) {
   $__begin116$sroa$0$0$in$in = $__next_$i$i$i247;
   while (1) {
    $__begin116$sroa$0$0 = HEAP32[$__begin116$sroa$0$0$in$in >> 2] | 0;
    $28 = $__begin116$sroa$0$0;
    if (($result | 0) == ($28 | 0)) break L126;
    __ZN8TPPLPolyC2ERKS_($tmpcast243$byval_copy, $__begin116$sroa$0$0 + 8 | 0);
    $conv137 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 0) | 0) >> 3] - $div;
    $conv145 = $conv4 - +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 0) | 0) + 8 >> 3] - $div5;
    $conv151 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 1) | 0) >> 3] - $div;
    $conv159 = $conv4 - +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 1) | 0) + 8 >> 3] - $div5;
    $conv165 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 2) | 0) >> 3] - $div;
    $conv173 = $conv4 - +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 2) | 0) + 8 >> 3] - $div5;
    $conv180 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 0) | 0) >> 3] / $conv;
    $conv187 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 0) | 0) + 8 >> 3] / $conv4;
    $conv194 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 1) | 0) >> 3] / $conv;
    $conv201 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 1) | 0) + 8 >> 3] / $conv4;
    $conv208 = +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 2) | 0) >> 3] / $conv;
    __ZN6DrMesh8triangleEffffffffffff($this, $conv137, $conv145, $conv180, $conv187, $conv165, $conv173, $conv208, +HEAPF64[(__ZN8TPPLPolyixEi($tmpcast243$byval_copy, 2) | 0) + 8 >> 3] / $conv4, $conv151, $conv159, $conv194, $conv201);
    __ZN8TPPLPolyD2Ev($tmpcast243$byval_copy);
    $__begin116$sroa$0$0$in$in = $28 + 4 | 0;
   }
  } while (0);
  __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($outpolys);
  __ZN8TPPLPolyD2Ev($poly);
  __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($result);
  __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($testpolys);
 }
 STACKTOP = sp;
 return;
}

function _stbtt__run_charstring($info, $glyph_index, $c) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $c = $c | 0;
 var $156 = 0, $185 = 0, $188 = 0, $2 = 0, $274 = 0.0, $311 = 0.0, $312 = 0, $314 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx262 = 0, $arrayidx281 = 0, $b = 0, $b0 = 0, $b1 = 0, $c$addr = 0, $charstrings = 0, $clear_stack = 0, $cond = 0.0, $cond110 = 0.0, $dec = 0, $dec280 = 0, $dx = 0, $dx1 = 0, $dx2 = 0, $dx3 = 0, $dx4 = 0, $dx5 = 0, $dx6 = 0, $dy = 0, $dy1 = 0, $dy2 = 0, $dy3 = 0, $dy4 = 0, $dy5 = 0, $dy6 = 0, $f = 0, $glyph_index$addr = 0, $gsubrs = 0, $has_subrs = 0, $i = 0, $in_header = 0, $info$addr = 0, $maskbits = 0, $retval = 0, $s = 0, $sp = 0, $subr_stack = 0, $subr_stack_height = 0, $subrs = 0, $subrs1 = 0, $tmp = 0, $tmp247 = 0, $tmp268 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $agg$tmp$byval_copy = sp + 508 | 0;
 $retval = sp + 504 | 0;
 $info$addr = sp + 500 | 0;
 $glyph_index$addr = sp + 496 | 0;
 $c$addr = sp + 492 | 0;
 $in_header = sp + 488 | 0;
 $maskbits = sp + 484 | 0;
 $subr_stack_height = sp + 480 | 0;
 $sp = sp + 476 | 0;
 $v = sp + 472 | 0;
 $i = sp + 468 | 0;
 $b0 = sp + 464 | 0;
 $has_subrs = sp + 460 | 0;
 $clear_stack = sp + 456 | 0;
 $s = sp + 128 | 0;
 $subr_stack = sp;
 $subrs = sp + 444 | 0;
 $b = sp + 432 | 0;
 $f = sp + 428 | 0;
 $tmp = sp + 416 | 0;
 $tmp247 = sp + 404 | 0;
 $agg$tmp = sp + 392 | 0;
 $tmp268 = sp + 380 | 0;
 $dx1 = sp + 376 | 0;
 $dx2 = sp + 372 | 0;
 $dx3 = sp + 368 | 0;
 $dx4 = sp + 364 | 0;
 $dx5 = sp + 360 | 0;
 $dx6 = sp + 356 | 0;
 $dy1 = sp + 352 | 0;
 $dy2 = sp + 348 | 0;
 $dy3 = sp + 344 | 0;
 $dy4 = sp + 340 | 0;
 $dy5 = sp + 336 | 0;
 $dy6 = sp + 332 | 0;
 $dx = sp + 328 | 0;
 $dy = sp + 324 | 0;
 $b1 = sp + 320 | 0;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph_index$addr >> 2] = $glyph_index;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$in_header >> 2] = 1;
 HEAP32[$maskbits >> 2] = 0;
 HEAP32[$subr_stack_height >> 2] = 0;
 HEAP32[$sp >> 2] = 0;
 HEAP32[$has_subrs >> 2] = 0;
 $subrs1 = (HEAP32[$info$addr >> 2] | 0) + 84 | 0;
 HEAP32[$subrs >> 2] = HEAP32[$subrs1 >> 2];
 HEAP32[$subrs + 4 >> 2] = HEAP32[$subrs1 + 4 >> 2];
 HEAP32[$subrs + 8 >> 2] = HEAP32[$subrs1 + 8 >> 2];
 $charstrings = (HEAP32[$info$addr >> 2] | 0) + 60 | 0;
 $2 = HEAP32[$glyph_index$addr >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$charstrings >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$charstrings + 4 >> 2];
 HEAP32[$agg$tmp$byval_copy + 8 >> 2] = HEAP32[$charstrings + 8 >> 2];
 _stbtt__cff_index_get($tmp, $agg$tmp$byval_copy, $2);
 HEAP32[$b >> 2] = HEAP32[$tmp >> 2];
 HEAP32[$b + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
 HEAP32[$b + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
 L1 : while (1) {
  if ((HEAP32[$b + 4 >> 2] | 0) >= (HEAP32[$b + 8 >> 2] | 0)) {
   label = 122;
   break;
  }
  HEAP32[$i >> 2] = 0;
  HEAP32[$clear_stack >> 2] = 1;
  HEAP32[$b0 >> 2] = (_stbtt__buf_get8($b) | 0) & 255;
  L4 : do switch (HEAP32[$b0 >> 2] | 0) {
  case 14:
   {
    label = 92;
    break L1;
    break;
   }
  case 20:
  case 19:
   {
    if (HEAP32[$in_header >> 2] | 0) HEAP32[$maskbits >> 2] = (HEAP32[$maskbits >> 2] | 0) + ((HEAP32[$sp >> 2] | 0) / 2 | 0);
    HEAP32[$in_header >> 2] = 0;
    _stbtt__buf_skip($b, ((HEAP32[$maskbits >> 2] | 0) + 7 | 0) / 8 | 0);
    label = 119;
    break;
   }
  case 23:
  case 18:
  case 3:
  case 1:
   {
    HEAP32[$maskbits >> 2] = (HEAP32[$maskbits >> 2] | 0) + ((HEAP32[$sp >> 2] | 0) / 2 | 0);
    label = 119;
    break;
   }
  case 21:
   {
    HEAP32[$in_header >> 2] = 0;
    if ((HEAP32[$sp >> 2] | 0) < 2) {
     label = 9;
     break L1;
    }
    _stbtt__csctx_rmove_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + ((HEAP32[$sp >> 2] | 0) - 2 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$sp >> 2] | 0) - 1 << 2) >> 2]);
    label = 119;
    break;
   }
  case 4:
   {
    HEAP32[$in_header >> 2] = 0;
    if ((HEAP32[$sp >> 2] | 0) < 1) {
     label = 12;
     break L1;
    }
    _stbtt__csctx_rmove_to(HEAP32[$c$addr >> 2] | 0, 0.0, +HEAPF32[$s + ((HEAP32[$sp >> 2] | 0) - 1 << 2) >> 2]);
    label = 119;
    break;
   }
  case 22:
   {
    HEAP32[$in_header >> 2] = 0;
    if ((HEAP32[$sp >> 2] | 0) < 1) {
     label = 15;
     break L1;
    }
    _stbtt__csctx_rmove_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + ((HEAP32[$sp >> 2] | 0) - 1 << 2) >> 2], 0.0);
    label = 119;
    break;
   }
  case 5:
   {
    if ((HEAP32[$sp >> 2] | 0) < 2) {
     label = 18;
     break L1;
    }
    while (1) {
     if (((HEAP32[$i >> 2] | 0) + 1 | 0) >= (HEAP32[$sp >> 2] | 0)) {
      label = 119;
      break L4;
     }
     _stbtt__csctx_rline_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2]);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 2;
    }
    break;
   }
  case 7:
   {
    if ((HEAP32[$sp >> 2] | 0) < 1) {
     label = 23;
     break L1;
    }
    label = 29;
    break;
   }
  case 6:
   {
    if ((HEAP32[$sp >> 2] | 0) < 1) {
     label = 26;
     break L1;
    } else label = 27;
    break;
   }
  case 31:
   {
    if ((HEAP32[$sp >> 2] | 0) < 4) {
     label = 32;
     break L1;
    }
    label = 40;
    break;
   }
  case 30:
   {
    if ((HEAP32[$sp >> 2] | 0) < 4) {
     label = 35;
     break L1;
    } else label = 36;
    break;
   }
  case 8:
   {
    if ((HEAP32[$sp >> 2] | 0) < 6) {
     label = 45;
     break L1;
    }
    while (1) {
     if (((HEAP32[$i >> 2] | 0) + 5 | 0) >= (HEAP32[$sp >> 2] | 0)) {
      label = 119;
      break L4;
     }
     _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 3 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 4 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 5 << 2) >> 2]);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 6;
    }
    break;
   }
  case 24:
   {
    if ((HEAP32[$sp >> 2] | 0) < 8) {
     label = 50;
     break L1;
    }
    while (1) {
     if (((HEAP32[$i >> 2] | 0) + 5 | 0) >= ((HEAP32[$sp >> 2] | 0) - 2 | 0)) break;
     _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 3 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 4 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 5 << 2) >> 2]);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 6;
    }
    if (((HEAP32[$i >> 2] | 0) + 1 | 0) >= (HEAP32[$sp >> 2] | 0)) {
     label = 55;
     break L1;
    }
    _stbtt__csctx_rline_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2]);
    label = 119;
    break;
   }
  case 25:
   {
    if ((HEAP32[$sp >> 2] | 0) < 8) {
     label = 58;
     break L1;
    }
    while (1) {
     if (((HEAP32[$i >> 2] | 0) + 1 | 0) >= ((HEAP32[$sp >> 2] | 0) - 6 | 0)) break;
     _stbtt__csctx_rline_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2]);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 2;
    }
    if (((HEAP32[$i >> 2] | 0) + 5 | 0) >= (HEAP32[$sp >> 2] | 0)) {
     label = 63;
     break L1;
    }
    _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 3 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 4 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 5 << 2) >> 2]);
    label = 119;
    break;
   }
  case 27:
  case 26:
   {
    if ((HEAP32[$sp >> 2] | 0) < 4) {
     label = 66;
     break L1;
    }
    HEAPF32[$f >> 2] = 0.0;
    if (HEAP32[$sp >> 2] & 1 | 0) {
     HEAPF32[$f >> 2] = +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2];
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    while (1) {
     if (((HEAP32[$i >> 2] | 0) + 3 | 0) >= (HEAP32[$sp >> 2] | 0)) {
      label = 119;
      break L4;
     }
     $156 = HEAP32[$c$addr >> 2] | 0;
     if ((HEAP32[$b0 >> 2] | 0) == 27) _stbtt__csctx_rccurve_to($156, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], +HEAPF32[$f >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 3 << 2) >> 2], 0.0); else _stbtt__csctx_rccurve_to($156, +HEAPF32[$f >> 2], +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 2 << 2) >> 2], 0.0, +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 3 << 2) >> 2]);
     HEAPF32[$f >> 2] = 0.0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 4;
    }
    break;
   }
  case 10:
   {
    if (HEAP32[$has_subrs >> 2] | 0) label = 79; else {
     if (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 108 + 8 >> 2] | 0) {
      _stbtt__cid_get_glyph_subrs($tmp247, HEAP32[$info$addr >> 2] | 0, HEAP32[$glyph_index$addr >> 2] | 0);
      HEAP32[$subrs >> 2] = HEAP32[$tmp247 >> 2];
      HEAP32[$subrs + 4 >> 2] = HEAP32[$tmp247 + 4 >> 2];
      HEAP32[$subrs + 8 >> 2] = HEAP32[$tmp247 + 8 >> 2];
     }
     HEAP32[$has_subrs >> 2] = 1;
     label = 79;
    }
    break;
   }
  case 29:
   {
    label = 79;
    break;
   }
  case 11:
   {
    if ((HEAP32[$subr_stack_height >> 2] | 0) <= 0) {
     label = 90;
     break L1;
    }
    $dec280 = (HEAP32[$subr_stack_height >> 2] | 0) + -1 | 0;
    HEAP32[$subr_stack_height >> 2] = $dec280;
    $arrayidx281 = $subr_stack + ($dec280 * 12 | 0) | 0;
    HEAP32[$b >> 2] = HEAP32[$arrayidx281 >> 2];
    HEAP32[$b + 4 >> 2] = HEAP32[$arrayidx281 + 4 >> 2];
    HEAP32[$b + 8 >> 2] = HEAP32[$arrayidx281 + 8 >> 2];
    HEAP32[$clear_stack >> 2] = 0;
    label = 119;
    break;
   }
  case 12:
   {
    HEAP32[$b1 >> 2] = (_stbtt__buf_get8($b) | 0) & 255;
    switch (HEAP32[$b1 >> 2] | 0) {
    case 34:
     {
      if ((HEAP32[$sp >> 2] | 0) < 7) {
       label = 95;
       break L1;
      }
      HEAPF32[$dx1 >> 2] = +HEAPF32[$s >> 2];
      HEAPF32[$dx2 >> 2] = +HEAPF32[$s + 4 >> 2];
      HEAPF32[$dy2 >> 2] = +HEAPF32[$s + 8 >> 2];
      HEAPF32[$dx3 >> 2] = +HEAPF32[$s + 12 >> 2];
      HEAPF32[$dx4 >> 2] = +HEAPF32[$s + 16 >> 2];
      HEAPF32[$dx5 >> 2] = +HEAPF32[$s + 20 >> 2];
      HEAPF32[$dx6 >> 2] = +HEAPF32[$s + 24 >> 2];
      _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$dx1 >> 2], 0.0, +HEAPF32[$dx2 >> 2], +HEAPF32[$dy2 >> 2], +HEAPF32[$dx3 >> 2], 0.0);
      _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$dx4 >> 2], 0.0, +HEAPF32[$dx5 >> 2], -+HEAPF32[$dy2 >> 2], +HEAPF32[$dx6 >> 2], 0.0);
      label = 119;
      break L4;
      break;
     }
    case 35:
     {
      if ((HEAP32[$sp >> 2] | 0) < 13) {
       label = 98;
       break L1;
      }
      HEAPF32[$dx1 >> 2] = +HEAPF32[$s >> 2];
      HEAPF32[$dy1 >> 2] = +HEAPF32[$s + 4 >> 2];
      HEAPF32[$dx2 >> 2] = +HEAPF32[$s + 8 >> 2];
      HEAPF32[$dy2 >> 2] = +HEAPF32[$s + 12 >> 2];
      HEAPF32[$dx3 >> 2] = +HEAPF32[$s + 16 >> 2];
      HEAPF32[$dy3 >> 2] = +HEAPF32[$s + 20 >> 2];
      HEAPF32[$dx4 >> 2] = +HEAPF32[$s + 24 >> 2];
      HEAPF32[$dy4 >> 2] = +HEAPF32[$s + 28 >> 2];
      HEAPF32[$dx5 >> 2] = +HEAPF32[$s + 32 >> 2];
      HEAPF32[$dy5 >> 2] = +HEAPF32[$s + 36 >> 2];
      HEAPF32[$dx6 >> 2] = +HEAPF32[$s + 40 >> 2];
      HEAPF32[$dy6 >> 2] = +HEAPF32[$s + 44 >> 2];
      _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$dx1 >> 2], +HEAPF32[$dy1 >> 2], +HEAPF32[$dx2 >> 2], +HEAPF32[$dy2 >> 2], +HEAPF32[$dx3 >> 2], +HEAPF32[$dy3 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$dx4 >> 2], +HEAPF32[$dy4 >> 2], +HEAPF32[$dx5 >> 2], +HEAPF32[$dy5 >> 2], +HEAPF32[$dx6 >> 2], +HEAPF32[$dy6 >> 2]);
      label = 119;
      break L4;
      break;
     }
    case 36:
     {
      if ((HEAP32[$sp >> 2] | 0) < 9) {
       label = 101;
       break L1;
      }
      HEAPF32[$dx1 >> 2] = +HEAPF32[$s >> 2];
      HEAPF32[$dy1 >> 2] = +HEAPF32[$s + 4 >> 2];
      HEAPF32[$dx2 >> 2] = +HEAPF32[$s + 8 >> 2];
      HEAPF32[$dy2 >> 2] = +HEAPF32[$s + 12 >> 2];
      HEAPF32[$dx3 >> 2] = +HEAPF32[$s + 16 >> 2];
      HEAPF32[$dx4 >> 2] = +HEAPF32[$s + 20 >> 2];
      HEAPF32[$dx5 >> 2] = +HEAPF32[$s + 24 >> 2];
      HEAPF32[$dy5 >> 2] = +HEAPF32[$s + 28 >> 2];
      HEAPF32[$dx6 >> 2] = +HEAPF32[$s + 32 >> 2];
      _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$dx1 >> 2], +HEAPF32[$dy1 >> 2], +HEAPF32[$dx2 >> 2], +HEAPF32[$dy2 >> 2], +HEAPF32[$dx3 >> 2], 0.0);
      _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$dx4 >> 2], 0.0, +HEAPF32[$dx5 >> 2], +HEAPF32[$dy5 >> 2], +HEAPF32[$dx6 >> 2], -(+HEAPF32[$dy1 >> 2] + +HEAPF32[$dy2 >> 2] + +HEAPF32[$dy5 >> 2]));
      label = 119;
      break L4;
      break;
     }
    case 37:
     {
      if ((HEAP32[$sp >> 2] | 0) < 11) {
       label = 104;
       break L1;
      }
      HEAPF32[$dx1 >> 2] = +HEAPF32[$s >> 2];
      HEAPF32[$dy1 >> 2] = +HEAPF32[$s + 4 >> 2];
      HEAPF32[$dx2 >> 2] = +HEAPF32[$s + 8 >> 2];
      HEAPF32[$dy2 >> 2] = +HEAPF32[$s + 12 >> 2];
      HEAPF32[$dx3 >> 2] = +HEAPF32[$s + 16 >> 2];
      HEAPF32[$dy3 >> 2] = +HEAPF32[$s + 20 >> 2];
      HEAPF32[$dx4 >> 2] = +HEAPF32[$s + 24 >> 2];
      HEAPF32[$dy4 >> 2] = +HEAPF32[$s + 28 >> 2];
      HEAPF32[$dx5 >> 2] = +HEAPF32[$s + 32 >> 2];
      HEAPF32[$dy5 >> 2] = +HEAPF32[$s + 36 >> 2];
      $274 = +HEAPF32[$s + 40 >> 2];
      HEAPF32[$dy6 >> 2] = $274;
      HEAPF32[$dx6 >> 2] = $274;
      HEAPF32[$dx >> 2] = +HEAPF32[$dx1 >> 2] + +HEAPF32[$dx2 >> 2] + +HEAPF32[$dx3 >> 2] + +HEAPF32[$dx4 >> 2] + +HEAPF32[$dx5 >> 2];
      HEAPF32[$dy >> 2] = +HEAPF32[$dy1 >> 2] + +HEAPF32[$dy2 >> 2] + +HEAPF32[$dy3 >> 2] + +HEAPF32[$dy4 >> 2] + +HEAPF32[$dy5 >> 2];
      if (+Math_abs(+(+HEAPF32[$dx >> 2])) > +Math_abs(+(+HEAPF32[$dy >> 2]))) HEAPF32[$dy6 >> 2] = -+HEAPF32[$dy >> 2]; else HEAPF32[$dx6 >> 2] = -+HEAPF32[$dx >> 2];
      _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$dx1 >> 2], +HEAPF32[$dy1 >> 2], +HEAPF32[$dx2 >> 2], +HEAPF32[$dy2 >> 2], +HEAPF32[$dx3 >> 2], +HEAPF32[$dy3 >> 2]);
      _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$dx4 >> 2], +HEAPF32[$dy4 >> 2], +HEAPF32[$dx5 >> 2], +HEAPF32[$dy5 >> 2], +HEAPF32[$dx6 >> 2], +HEAPF32[$dy6 >> 2]);
      label = 119;
      break L4;
      break;
     }
    default:
     {
      label = 109;
      break L1;
     }
    }
    break;
   }
  default:
   {
    if ((HEAP32[$b0 >> 2] | 0) != 255 & (HEAP32[$b0 >> 2] | 0) != 28) if ((HEAP32[$b0 >> 2] | 0) < 32 | (HEAP32[$b0 >> 2] | 0) > 254) {
     label = 112;
     break L1;
    }
    if ((HEAP32[$b0 >> 2] | 0) == 255) HEAPF32[$f >> 2] = +((_stbtt__buf_get($b, 4) | 0) >>> 0) / 65536.0; else {
     _stbtt__buf_skip($b, -1);
     HEAPF32[$f >> 2] = +(((_stbtt__cff_int($b) | 0) & 65535) << 16 >> 16);
    }
    if ((HEAP32[$sp >> 2] | 0) >= 48) {
     label = 117;
     break L1;
    }
    $311 = +HEAPF32[$f >> 2];
    $312 = HEAP32[$sp >> 2] | 0;
    HEAP32[$sp >> 2] = $312 + 1;
    HEAPF32[$s + ($312 << 2) >> 2] = $311;
    HEAP32[$clear_stack >> 2] = 0;
    label = 119;
   }
  } while (0);
  if ((label | 0) == 79) {
   label = 0;
   if ((HEAP32[$sp >> 2] | 0) < 1) {
    label = 80;
    break;
   }
   $dec = (HEAP32[$sp >> 2] | 0) + -1 | 0;
   HEAP32[$sp >> 2] = $dec;
   HEAP32[$v >> 2] = ~~+HEAPF32[$s + ($dec << 2) >> 2];
   if ((HEAP32[$subr_stack_height >> 2] | 0) >= 10) {
    label = 82;
    break;
   }
   $185 = HEAP32[$subr_stack_height >> 2] | 0;
   HEAP32[$subr_stack_height >> 2] = $185 + 1;
   $arrayidx262 = $subr_stack + ($185 * 12 | 0) | 0;
   HEAP32[$arrayidx262 >> 2] = HEAP32[$b >> 2];
   HEAP32[$arrayidx262 + 4 >> 2] = HEAP32[$b + 4 >> 2];
   HEAP32[$arrayidx262 + 8 >> 2] = HEAP32[$b + 8 >> 2];
   if ((HEAP32[$b0 >> 2] | 0) == 10) {
    HEAP32[$agg$tmp >> 2] = HEAP32[$subrs >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$subrs + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$subrs + 8 >> 2];
   } else {
    $gsubrs = (HEAP32[$info$addr >> 2] | 0) + 72 | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$gsubrs >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$gsubrs + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$gsubrs + 8 >> 2];
   }
   $188 = HEAP32[$v >> 2] | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   HEAP32[$agg$tmp$byval_copy + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
   _stbtt__get_subr($tmp268, $agg$tmp$byval_copy, $188);
   HEAP32[$b >> 2] = HEAP32[$tmp268 >> 2];
   HEAP32[$b + 4 >> 2] = HEAP32[$tmp268 + 4 >> 2];
   HEAP32[$b + 8 >> 2] = HEAP32[$tmp268 + 8 >> 2];
   if (!(HEAP32[$b + 8 >> 2] | 0)) {
    label = 87;
    break;
   }
   HEAP32[$b + 4 >> 2] = 0;
   HEAP32[$clear_stack >> 2] = 0;
   label = 119;
  }
  while (1) if ((label | 0) == 27) {
   label = 0;
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$sp >> 2] | 0)) {
    label = 119;
    continue;
   }
   _stbtt__csctx_rline_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], 0.0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   label = 29;
   continue;
  } else if ((label | 0) == 29) {
   label = 0;
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$sp >> 2] | 0)) {
    label = 119;
    continue;
   }
   _stbtt__csctx_rline_to(HEAP32[$c$addr >> 2] | 0, 0.0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2]);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   label = 27;
   continue;
  } else if ((label | 0) == 36) {
   label = 0;
   if (((HEAP32[$i >> 2] | 0) + 3 | 0) >= (HEAP32[$sp >> 2] | 0)) {
    label = 119;
    continue;
   }
   if (((HEAP32[$sp >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0) == 5) $cond = +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 4 << 2) >> 2]; else $cond = 0.0;
   _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, 0.0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 2 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 3 << 2) >> 2], $cond);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 4;
   label = 40;
   continue;
  } else if ((label | 0) == 40) {
   label = 0;
   if (((HEAP32[$i >> 2] | 0) + 3 | 0) >= (HEAP32[$sp >> 2] | 0)) {
    label = 119;
    continue;
   }
   if (((HEAP32[$sp >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0) == 5) $cond110 = +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 4 << 2) >> 2]; else $cond110 = 0.0;
   _stbtt__csctx_rccurve_to(HEAP32[$c$addr >> 2] | 0, +HEAPF32[$s + (HEAP32[$i >> 2] << 2) >> 2], 0.0, +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 1 << 2) >> 2], +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 2 << 2) >> 2], $cond110, +HEAPF32[$s + ((HEAP32[$i >> 2] | 0) + 3 << 2) >> 2]);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 4;
   label = 36;
   continue;
  } else if ((label | 0) == 119) {
   label = 0;
   if (HEAP32[$clear_stack >> 2] | 0) {
    label = 120;
    break;
   } else break;
  }
  if ((label | 0) == 120) {
   label = 0;
   HEAP32[$sp >> 2] = 0;
  }
 }
 switch (label | 0) {
 case 9:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 12:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 15:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 18:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 23:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 26:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 32:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 35:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 45:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 50:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 55:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 58:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 63:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 66:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 80:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 82:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 87:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 90:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 92:
  {
   _stbtt__csctx_close_shape(HEAP32[$c$addr >> 2] | 0);
   HEAP32[$retval >> 2] = 1;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 95:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 98:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 101:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 104:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 109:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 112:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 117:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 case 122:
  {
   HEAP32[$retval >> 2] = 0;
   $314 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $314 | 0;
  }
 }
 return 0;
}

function _fmt_fp($f, $y, $w, $p, $fl, $t) {
 $f = $f | 0;
 $y = +$y;
 $w = $w | 0;
 $p = $p | 0;
 $fl = $fl | 0;
 $t = $t | 0;
 var $$pr = 0, $$pr415 = 0, $$pre517 = 0, $0 = 0, $1 = 0, $15 = 0, $18 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $43 = 0, $46 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $62 = 0, $65 = 0, $70 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0, $a$9 = 0, $add = 0, $add$ptr358 = 0, $add$ptr442 = 0, $add$ptr671 = 0, $add$ptr756 = 0, $add165 = 0, $add275 = 0, $add355 = 0, $add414 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $and62 = 0, $arrayidx = 0, $arrayidx251 = 0, $arrayidx453 = 0, $big = 0, $buf = 0, $carry$0493 = 0, $carry262$0484 = 0, $cmp131 = 0, $cmp299 = 0, $cmp338 = 0, $cmp374 = 0, $cmp403 = 0, $cmp450$lcssa = 0, $cmp614 = 0, $cond100 = 0, $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond629 = 0, $conv116 = 0, $conv216 = 0, $d$0491 = 0, $d$0494 = 0, $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0, $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0, $incdec$ptr246 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr725 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $mul = 0.0, $mul322 = 0, $mul367 = 0, $mul431 = 0, $mul513 = 0, $or = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0, $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select418 = 0.0, $sub = 0.0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub789 = 0, $sub203 = 0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub343 = 0, $sub409 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool135 = 0, $tobool341 = 0, $tobool37 = 0, $tobool56 = 0, $tobool609 = 0, $tobool781 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $big = sp + 32 | 0;
 $e2 = sp + 536 | 0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540 | 0;
 HEAP32[$e2 >> 2] = 0;
 $arrayidx = $ebuf0 + 12 | 0;
 $0 = ___DOUBLE_BITS_670($y) | 0;
 $1 = getTempRet0() | 0;
 if (($1 | 0) < 0) {
  $sub = -$y;
  $3 = ___DOUBLE_BITS_670($sub) | 0;
  $8 = getTempRet0() | 0;
  $85 = $3;
  $pl$0 = 1;
  $prefix$0 = 49765;
  $y$addr$0 = $sub;
 } else {
  $8 = $1;
  $85 = $0;
  $pl$0 = ($fl & 2049 | 0) != 0 & 1;
  $prefix$0 = ($fl & 2048 | 0) == 0 ? (($fl & 1 | 0) == 0 ? 49766 : 49771) : 49768;
  $y$addr$0 = $y;
 }
 do if (0 == 0 & ($8 & 2146435072 | 0) == 2146435072) {
  $tobool37 = ($t & 32 | 0) != 0;
  $add = $pl$0 + 3 | 0;
  _pad_667($f, 32, $w, $add, $fl & -65537);
  _out($f, $prefix$0, $pl$0);
  _out($f, $y$addr$0 != $y$addr$0 | 0.0 != 0.0 ? ($tobool37 ? 49792 : 49796) : $tobool37 ? 49784 : 49788, 3);
  _pad_667($f, 32, $w, $add, $fl ^ 8192);
  $add653$sink524 = $add;
 } else {
  $mul = +_frexp($y$addr$0, $e2) * 2.0;
  $tobool56 = $mul != 0.0;
  if ($tobool56) HEAP32[$e2 >> 2] = (HEAP32[$e2 >> 2] | 0) + -1;
  $or = $t | 32;
  if (($or | 0) == 97) {
   $and62 = $t & 32;
   $spec$select = ($and62 | 0) == 0 ? $prefix$0 : $prefix$0 + 9 | 0;
   $add67 = $pl$0 | 2;
   $sub74 = 12 - $p | 0;
   do if ($p >>> 0 > 11 | ($sub74 | 0) == 0) $y$addr$1 = $mul; else {
    $re$1426 = $sub74;
    $round$0425 = 8.0;
    do {
     $re$1426 = $re$1426 + -1 | 0;
     $round$0425 = $round$0425 * 16.0;
    } while (($re$1426 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $y$addr$1 = -($round$0425 + (-$mul - $round$0425));
     break;
    } else {
     $y$addr$1 = $mul + $round$0425 - $round$0425;
     break;
    }
   } while (0);
   $15 = HEAP32[$e2 >> 2] | 0;
   $cond100 = ($15 | 0) < 0 ? 0 - $15 | 0 : $15;
   $18 = _fmt_u($cond100, (($cond100 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   if (($18 | 0) == ($arrayidx | 0)) {
    $incdec$ptr106 = $ebuf0 + 11 | 0;
    HEAP8[$incdec$ptr106 >> 0] = 48;
    $estr$0 = $incdec$ptr106;
   } else $estr$0 = $18;
   HEAP8[$estr$0 + -1 >> 0] = ($15 >> 31 & 2) + 43;
   $incdec$ptr115 = $estr$0 + -2 | 0;
   HEAP8[$incdec$ptr115 >> 0] = $t + 15;
   $cmp131 = ($p | 0) < 1;
   $tobool135 = ($fl & 8 | 0) == 0;
   $s$0 = $buf;
   $y$addr$2 = $y$addr$1;
   while (1) {
    $conv116 = ~~$y$addr$2;
    $incdec$ptr122 = $s$0 + 1 | 0;
    HEAP8[$s$0 >> 0] = $and62 | HEAPU8[10640 + $conv116 >> 0];
    $y$addr$2 = ($y$addr$2 - +($conv116 | 0)) * 16.0;
    if (($incdec$ptr122 - $sub$ptr$rhs$cast$le | 0) == 1) if ($tobool135 & ($cmp131 & $y$addr$2 == 0.0)) $s$1 = $incdec$ptr122; else {
     HEAP8[$incdec$ptr122 >> 0] = 46;
     $s$1 = $s$0 + 2 | 0;
    } else $s$1 = $incdec$ptr122;
    if (!($y$addr$2 != 0.0)) break; else $s$0 = $s$1;
   }
   $$pre517 = $s$1;
   if (!$p) label = 25; else if ((-2 - $sub$ptr$rhs$cast$le + $$pre517 | 0) < ($p | 0)) {
    $sub$ptr$lhs$cast151 = $arrayidx;
    $sub$ptr$rhs$cast152 = $incdec$ptr115;
    $l$0 = $p + 2 + $sub$ptr$lhs$cast151 - $sub$ptr$rhs$cast152 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
   } else label = 25;
   if ((label | 0) == 25) {
    $sub$ptr$lhs$cast160 = $arrayidx;
    $sub$ptr$rhs$cast161 = $incdec$ptr115;
    $l$0 = $sub$ptr$lhs$cast160 - $sub$ptr$rhs$cast$le - $sub$ptr$rhs$cast161 + $$pre517 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
   }
   $add165 = $l$0 + $add67 | 0;
   _pad_667($f, 32, $w, $add165, $fl);
   _out($f, $spec$select, $add67);
   _pad_667($f, 48, $w, $add165, $fl ^ 65536);
   $sub$ptr$sub172 = $$pre517 - $sub$ptr$rhs$cast$le | 0;
   _out($f, $buf, $sub$ptr$sub172);
   $sub$ptr$sub175 = $sub$ptr$lhs$cast173$pre$phiZZZZ2D - $sub$ptr$rhs$cast174$pre$phiZZZZ2D | 0;
   _pad_667($f, 48, $l$0 - ($sub$ptr$sub172 + $sub$ptr$sub175) | 0, 0, 0);
   _out($f, $incdec$ptr115, $sub$ptr$sub175);
   _pad_667($f, 32, $w, $add165, $fl ^ 8192);
   $add653$sink524 = $add165;
   break;
  }
  $spec$select395 = ($p | 0) < 0 ? 6 : $p;
  if ($tobool56) {
   $sub203 = (HEAP32[$e2 >> 2] | 0) + -28 | 0;
   HEAP32[$e2 >> 2] = $sub203;
   $$pr = $sub203;
   $y$addr$3 = $mul * 268435456.0;
  } else {
   $$pr = HEAP32[$e2 >> 2] | 0;
   $y$addr$3 = $mul;
  }
  $z$0 = ($$pr | 0) < 0 ? $big : $big + 288 | 0;
  $y$addr$4 = $y$addr$3;
  $z$1 = $z$0;
  do {
   $conv216 = ~~$y$addr$4 >>> 0;
   HEAP32[$z$1 >> 2] = $conv216;
   $z$1 = $z$1 + 4 | 0;
   $y$addr$4 = ($y$addr$4 - +($conv216 >>> 0)) * 1.0e9;
  } while ($y$addr$4 != 0.0);
  $sub$ptr$rhs$cast345 = $z$0;
  if (($$pr | 0) > 0) {
   $26 = $$pr;
   $a$1502 = $z$0;
   $z$2501 = $z$1;
   while (1) {
    $cond233 = ($26 | 0) < 29 ? $26 : 29;
    $d$0491 = $z$2501 + -4 | 0;
    if ($d$0491 >>> 0 < $a$1502 >>> 0) $a$2 = $a$1502; else {
     $carry$0493 = 0;
     $d$0494 = $d$0491;
     do {
      $28 = _bitshift64Shl(HEAP32[$d$0494 >> 2] | 0, 0, $cond233 | 0) | 0;
      $30 = _i64Add($28 | 0, getTempRet0() | 0, $carry$0493 | 0, 0) | 0;
      $31 = getTempRet0() | 0;
      $carry$0493 = ___udivdi3($30 | 0, $31 | 0, 1e9, 0) | 0;
      $34 = ___muldi3($carry$0493 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $36 = _i64Subtract($30 | 0, $31 | 0, $34 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[$d$0494 >> 2] = $36;
      $d$0494 = $d$0494 + -4 | 0;
     } while ($d$0494 >>> 0 >= $a$1502 >>> 0);
     if (!$carry$0493) $a$2 = $a$1502; else {
      $incdec$ptr246 = $a$1502 + -4 | 0;
      HEAP32[$incdec$ptr246 >> 2] = $carry$0493;
      $a$2 = $incdec$ptr246;
     }
    }
    L57 : do if ($z$2501 >>> 0 > $a$2 >>> 0) {
     $z$3497 = $z$2501;
     while (1) {
      $arrayidx251 = $z$3497 + -4 | 0;
      if (HEAP32[$arrayidx251 >> 2] | 0) {
       $z$3$lcssa = $z$3497;
       break L57;
      }
      if ($arrayidx251 >>> 0 > $a$2 >>> 0) $z$3497 = $arrayidx251; else {
       $z$3$lcssa = $arrayidx251;
       break;
      }
     }
    } else $z$3$lcssa = $z$2501; while (0);
    $sub256 = (HEAP32[$e2 >> 2] | 0) - $cond233 | 0;
    HEAP32[$e2 >> 2] = $sub256;
    if (($sub256 | 0) > 0) {
     $26 = $sub256;
     $a$1502 = $a$2;
     $z$2501 = $z$3$lcssa;
    } else {
     $$pr415 = $sub256;
     $a$1$lcssa = $a$2;
     $z$2$lcssa = $z$3$lcssa;
     break;
    }
   }
  } else {
   $$pr415 = $$pr;
   $a$1$lcssa = $z$0;
   $z$2$lcssa = $z$1;
  }
  if (($$pr415 | 0) < 0) {
   $add275 = (($spec$select395 + 25 | 0) / 9 | 0) + 1 | 0;
   $cmp299 = ($or | 0) == 102;
   $40 = $$pr415;
   $a$3488 = $a$1$lcssa;
   $z$4487 = $z$2$lcssa;
   while (1) {
    $sub264 = 0 - $40 | 0;
    $cond271 = ($sub264 | 0) < 9 ? $sub264 : 9;
    if ($a$3488 >>> 0 < $z$4487 >>> 0) {
     $sub281 = (1 << $cond271) + -1 | 0;
     $shr285 = 1e9 >>> $cond271;
     $carry262$0484 = 0;
     $d$1483 = $a$3488;
     do {
      $43 = HEAP32[$d$1483 >> 2] | 0;
      HEAP32[$d$1483 >> 2] = ($43 >>> $cond271) + $carry262$0484;
      $carry262$0484 = Math_imul($43 & $sub281, $shr285) | 0;
      $d$1483 = $d$1483 + 4 | 0;
     } while ($d$1483 >>> 0 < $z$4487 >>> 0);
     $spec$select396 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     if (!$carry262$0484) {
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487;
     } else {
      HEAP32[$z$4487 >> 2] = $carry262$0484;
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487 + 4 | 0;
     }
    } else {
     $spec$select396523 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     $z$5 = $z$4487;
    }
    $cond304 = $cmp299 ? $z$0 : $spec$select396523;
    $spec$select397 = ($z$5 - $cond304 >> 2 | 0) > ($add275 | 0) ? $cond304 + ($add275 << 2) | 0 : $z$5;
    $40 = (HEAP32[$e2 >> 2] | 0) + $cond271 | 0;
    HEAP32[$e2 >> 2] = $40;
    if (($40 | 0) >= 0) {
     $a$3$lcssa = $spec$select396523;
     $z$4$lcssa = $spec$select397;
     break;
    } else {
     $a$3488 = $spec$select396523;
     $z$4487 = $spec$select397;
    }
   }
  } else {
   $a$3$lcssa = $a$1$lcssa;
   $z$4$lcssa = $z$2$lcssa;
  }
  if ($a$3$lcssa >>> 0 < $z$4$lcssa >>> 0) {
   $mul322 = ($sub$ptr$rhs$cast345 - $a$3$lcssa >> 2) * 9 | 0;
   $46 = HEAP32[$a$3$lcssa >> 2] | 0;
   if ($46 >>> 0 < 10) $e$1 = $mul322; else {
    $e$0480 = $mul322;
    $i$0479 = 10;
    while (1) {
     $i$0479 = $i$0479 * 10 | 0;
     $inc = $e$0480 + 1 | 0;
     if ($46 >>> 0 < $i$0479 >>> 0) {
      $e$1 = $inc;
      break;
     } else $e$0480 = $inc;
    }
   }
  } else $e$1 = 0;
  $cmp338 = ($or | 0) == 103;
  $tobool341 = ($spec$select395 | 0) != 0;
  $sub343 = $spec$select395 - (($or | 0) == 102 ? 0 : $e$1) + (($tobool341 & $cmp338) << 31 >> 31) | 0;
  if (($sub343 | 0) < ((($z$4$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0)) {
   $add355 = $sub343 + 9216 | 0;
   $div356 = ($add355 | 0) / 9 | 0;
   $add$ptr358 = $z$0 + 4 + ($div356 + -1024 << 2) | 0;
   $50 = $add355 - ($div356 * 9 | 0) | 0;
   if (($50 | 0) < 8) {
    $i$1475 = 10;
    $j$0$in476 = $50;
    while (1) {
     $mul367 = $i$1475 * 10 | 0;
     if (($j$0$in476 | 0) < 7) {
      $i$1475 = $mul367;
      $j$0$in476 = $j$0$in476 + 1 | 0;
     } else {
      $i$1$lcssa = $mul367;
      break;
     }
    }
   } else $i$1$lcssa = 10;
   $51 = HEAP32[$add$ptr358 >> 2] | 0;
   $div378 = ($51 >>> 0) / ($i$1$lcssa >>> 0) | 0;
   $53 = $51 - (Math_imul($div378, $i$1$lcssa) | 0) | 0;
   $cmp374 = ($add$ptr358 + 4 | 0) == ($z$4$lcssa | 0);
   if ($cmp374 & ($53 | 0) == 0) {
    $a$8 = $a$3$lcssa;
    $d$4 = $add$ptr358;
    $e$4 = $e$1;
   } else {
    $spec$select399 = ($div378 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $div384 = $i$1$lcssa >>> 1;
    $spec$select418 = $53 >>> 0 < $div384 >>> 0 ? .5 : $cmp374 & ($53 | 0) == ($div384 | 0) ? 1.0 : 1.5;
    if (!$pl$0) {
     $round377$1 = $spec$select399;
     $small$1 = $spec$select418;
    } else {
     $cmp403 = (HEAP8[$prefix$0 >> 0] | 0) == 45;
     $round377$1 = $cmp403 ? -$spec$select399 : $spec$select399;
     $small$1 = $cmp403 ? -$spec$select418 : $spec$select418;
    }
    $sub409 = $51 - $53 | 0;
    HEAP32[$add$ptr358 >> 2] = $sub409;
    if ($round377$1 + $small$1 != $round377$1) {
     $add414 = $sub409 + $i$1$lcssa | 0;
     HEAP32[$add$ptr358 >> 2] = $add414;
     if ($add414 >>> 0 > 999999999) {
      $a$5471 = $a$3$lcssa;
      $d$2470 = $add$ptr358;
      while (1) {
       $incdec$ptr419 = $d$2470 + -4 | 0;
       HEAP32[$d$2470 >> 2] = 0;
       if ($incdec$ptr419 >>> 0 < $a$5471 >>> 0) {
        $incdec$ptr423 = $a$5471 + -4 | 0;
        HEAP32[$incdec$ptr423 >> 2] = 0;
        $a$6 = $incdec$ptr423;
       } else $a$6 = $a$5471;
       $inc425 = (HEAP32[$incdec$ptr419 >> 2] | 0) + 1 | 0;
       HEAP32[$incdec$ptr419 >> 2] = $inc425;
       if ($inc425 >>> 0 > 999999999) {
        $a$5471 = $a$6;
        $d$2470 = $incdec$ptr419;
       } else {
        $a$5$lcssa = $a$6;
        $d$2$lcssa = $incdec$ptr419;
        break;
       }
      }
     } else {
      $a$5$lcssa = $a$3$lcssa;
      $d$2$lcssa = $add$ptr358;
     }
     $mul431 = ($sub$ptr$rhs$cast345 - $a$5$lcssa >> 2) * 9 | 0;
     $56 = HEAP32[$a$5$lcssa >> 2] | 0;
     if ($56 >>> 0 < 10) {
      $a$8 = $a$5$lcssa;
      $d$4 = $d$2$lcssa;
      $e$4 = $mul431;
     } else {
      $e$2467 = $mul431;
      $i$2466 = 10;
      while (1) {
       $i$2466 = $i$2466 * 10 | 0;
       $inc438 = $e$2467 + 1 | 0;
       if ($56 >>> 0 < $i$2466 >>> 0) {
        $a$8 = $a$5$lcssa;
        $d$4 = $d$2$lcssa;
        $e$4 = $inc438;
        break;
       } else $e$2467 = $inc438;
      }
     }
    } else {
     $a$8 = $a$3$lcssa;
     $d$4 = $add$ptr358;
     $e$4 = $e$1;
    }
   }
   $add$ptr442 = $d$4 + 4 | 0;
   $a$9 = $a$8;
   $e$5 = $e$4;
   $z$8 = $z$4$lcssa >>> 0 > $add$ptr442 >>> 0 ? $add$ptr442 : $z$4$lcssa;
  } else {
   $a$9 = $a$3$lcssa;
   $e$5 = $e$1;
   $z$8 = $z$4$lcssa;
  }
  $sub626 = 0 - $e$5 | 0;
  L109 : do if ($z$8 >>> 0 > $a$9 >>> 0) {
   $z$9459 = $z$8;
   while (1) {
    $arrayidx453 = $z$9459 + -4 | 0;
    if (HEAP32[$arrayidx453 >> 2] | 0) {
     $cmp450$lcssa = 1;
     $z$9$lcssa = $z$9459;
     break L109;
    }
    if ($arrayidx453 >>> 0 > $a$9 >>> 0) $z$9459 = $arrayidx453; else {
     $cmp450$lcssa = 0;
     $z$9$lcssa = $arrayidx453;
     break;
    }
   }
  } else {
   $cmp450$lcssa = 0;
   $z$9$lcssa = $z$8;
  } while (0);
  do if ($cmp338) {
   $spec$select402 = $spec$select395 + (($tobool341 ^ 1) & 1) | 0;
   if (($spec$select402 | 0) > ($e$5 | 0) & ($e$5 | 0) > -5) {
    $p$addr$2 = $spec$select402 + -1 - $e$5 | 0;
    $t$addr$0 = $t + -1 | 0;
   } else {
    $p$addr$2 = $spec$select402 + -1 | 0;
    $t$addr$0 = $t + -2 | 0;
   }
   if (!($fl & 8)) {
    if ($cmp450$lcssa) {
     $58 = HEAP32[$z$9$lcssa + -4 >> 2] | 0;
     if (!$58) $j$2 = 9; else if (!(($58 >>> 0) % 10 | 0)) {
      $i$3455 = 10;
      $j$1456 = 0;
      while (1) {
       $i$3455 = $i$3455 * 10 | 0;
       $inc500 = $j$1456 + 1 | 0;
       if (($58 >>> 0) % ($i$3455 >>> 0) | 0 | 0) {
        $j$2 = $inc500;
        break;
       } else $j$1456 = $inc500;
      }
     } else $j$2 = 0;
    } else $j$2 = 9;
    $mul513 = (($z$9$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0;
    if (($t$addr$0 | 32 | 0) == 102) {
     $sub514 = $mul513 - $j$2 | 0;
     $spec$select403 = ($sub514 | 0) > 0 ? $sub514 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select403 | 0) ? $p$addr$2 : $spec$select403;
     $t$addr$1 = $t$addr$0;
     break;
    } else {
     $sub562 = $mul513 + $e$5 - $j$2 | 0;
     $spec$select405 = ($sub562 | 0) > 0 ? $sub562 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select405 | 0) ? $p$addr$2 : $spec$select405;
     $t$addr$1 = $t$addr$0;
     break;
    }
   } else {
    $p$addr$3 = $p$addr$2;
    $t$addr$1 = $t$addr$0;
   }
  } else {
   $p$addr$3 = $spec$select395;
   $t$addr$1 = $t;
  } while (0);
  $tobool609 = ($p$addr$3 | 0) != 0;
  $62 = $tobool609 ? 1 : $fl >>> 3 & 1;
  $cmp614 = ($t$addr$1 | 32 | 0) == 102;
  if ($cmp614) {
   $estr$2 = 0;
   $sub$ptr$sub650$pn = ($e$5 | 0) > 0 ? $e$5 : 0;
  } else {
   $cond629 = ($e$5 | 0) < 0 ? $sub626 : $e$5;
   $65 = _fmt_u($cond629, (($cond629 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   $sub$ptr$lhs$cast633 = $arrayidx;
   if (($sub$ptr$lhs$cast633 - $65 | 0) < 2) {
    $estr$1450 = $65;
    while (1) {
     $incdec$ptr639 = $estr$1450 + -1 | 0;
     HEAP8[$incdec$ptr639 >> 0] = 48;
     if (($sub$ptr$lhs$cast633 - $incdec$ptr639 | 0) < 2) $estr$1450 = $incdec$ptr639; else {
      $estr$1$lcssa = $incdec$ptr639;
      break;
     }
    }
   } else $estr$1$lcssa = $65;
   HEAP8[$estr$1$lcssa + -1 >> 0] = ($e$5 >> 31 & 2) + 43;
   $incdec$ptr647 = $estr$1$lcssa + -2 | 0;
   HEAP8[$incdec$ptr647 >> 0] = $t$addr$1;
   $estr$2 = $incdec$ptr647;
   $sub$ptr$sub650$pn = $sub$ptr$lhs$cast633 - $incdec$ptr647 | 0;
  }
  $add653 = $pl$0 + 1 + $p$addr$3 + $62 + $sub$ptr$sub650$pn | 0;
  _pad_667($f, 32, $w, $add653, $fl);
  _out($f, $prefix$0, $pl$0);
  _pad_667($f, 48, $w, $add653, $fl ^ 65536);
  if ($cmp614) {
   $spec$select408 = $a$9 >>> 0 > $z$0 >>> 0 ? $z$0 : $a$9;
   $add$ptr671 = $buf + 9 | 0;
   $sub$ptr$lhs$cast694 = $add$ptr671;
   $incdec$ptr689 = $buf + 8 | 0;
   $d$5438 = $spec$select408;
   do {
    $70 = _fmt_u(HEAP32[$d$5438 >> 2] | 0, 0, $add$ptr671) | 0;
    if (($d$5438 | 0) == ($spec$select408 | 0)) if (($70 | 0) == ($add$ptr671 | 0)) {
     HEAP8[$incdec$ptr689 >> 0] = 48;
     $s668$1 = $incdec$ptr689;
    } else $s668$1 = $70; else if ($70 >>> 0 > $buf >>> 0) {
     _memset($buf | 0, 48, $70 - $sub$ptr$rhs$cast$le | 0) | 0;
     $s668$0436 = $70;
     while (1) {
      $incdec$ptr681 = $s668$0436 + -1 | 0;
      if ($incdec$ptr681 >>> 0 > $buf >>> 0) $s668$0436 = $incdec$ptr681; else {
       $s668$1 = $incdec$ptr681;
       break;
      }
     }
    } else $s668$1 = $70;
    _out($f, $s668$1, $sub$ptr$lhs$cast694 - $s668$1 | 0);
    $d$5438 = $d$5438 + 4 | 0;
   } while ($d$5438 >>> 0 <= $z$0 >>> 0);
   if (!(($fl & 8 | 0) == 0 & ($tobool609 ^ 1))) _out($f, 53849, 1);
   if ($d$5438 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$3 | 0) > 0) {
    $d$6432 = $d$5438;
    $p$addr$4433 = $p$addr$3;
    while (1) {
     $75 = _fmt_u(HEAP32[$d$6432 >> 2] | 0, 0, $add$ptr671) | 0;
     if ($75 >>> 0 > $buf >>> 0) {
      _memset($buf | 0, 48, $75 - $sub$ptr$rhs$cast$le | 0) | 0;
      $s715$0428 = $75;
      while (1) {
       $incdec$ptr725 = $s715$0428 + -1 | 0;
       if ($incdec$ptr725 >>> 0 > $buf >>> 0) $s715$0428 = $incdec$ptr725; else {
        $s715$0$lcssa = $incdec$ptr725;
        break;
       }
      }
     } else $s715$0$lcssa = $75;
     _out($f, $s715$0$lcssa, ($p$addr$4433 | 0) < 9 ? $p$addr$4433 : 9);
     $d$6432 = $d$6432 + 4 | 0;
     $sub735 = $p$addr$4433 + -9 | 0;
     if (!($d$6432 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$4433 | 0) > 9)) {
      $p$addr$4$lcssa = $sub735;
      break;
     } else $p$addr$4433 = $sub735;
    }
   } else $p$addr$4$lcssa = $p$addr$3;
   _pad_667($f, 48, $p$addr$4$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $a$9 + 4 | 0;
   if ($a$9 >>> 0 < $spec$select410 >>> 0 & ($p$addr$3 | 0) > -1) {
    $add$ptr756 = $buf + 9 | 0;
    $tobool781 = ($fl & 8 | 0) == 0;
    $sub$ptr$lhs$cast787 = $add$ptr756;
    $81 = 0 - $sub$ptr$rhs$cast$le | 0;
    $incdec$ptr763 = $buf + 8 | 0;
    $d$7444 = $a$9;
    $p$addr$5445 = $p$addr$3;
    while (1) {
     $83 = _fmt_u(HEAP32[$d$7444 >> 2] | 0, 0, $add$ptr756) | 0;
     if (($83 | 0) == ($add$ptr756 | 0)) {
      HEAP8[$incdec$ptr763 >> 0] = 48;
      $s753$0 = $incdec$ptr763;
     } else $s753$0 = $83;
     do if (($d$7444 | 0) == ($a$9 | 0)) {
      $incdec$ptr776 = $s753$0 + 1 | 0;
      _out($f, $s753$0, 1);
      if ($tobool781 & ($p$addr$5445 | 0) < 1) {
       $s753$2 = $incdec$ptr776;
       break;
      }
      _out($f, 53849, 1);
      $s753$2 = $incdec$ptr776;
     } else {
      if ($s753$0 >>> 0 <= $buf >>> 0) {
       $s753$2 = $s753$0;
       break;
      }
      _memset($buf | 0, 48, $s753$0 + $81 | 0) | 0;
      $s753$1440 = $s753$0;
      while (1) {
       $incdec$ptr773 = $s753$1440 + -1 | 0;
       if ($incdec$ptr773 >>> 0 > $buf >>> 0) $s753$1440 = $incdec$ptr773; else {
        $s753$2 = $incdec$ptr773;
        break;
       }
      }
     } while (0);
     $sub$ptr$sub789 = $sub$ptr$lhs$cast787 - $s753$2 | 0;
     _out($f, $s753$2, ($p$addr$5445 | 0) > ($sub$ptr$sub789 | 0) ? $sub$ptr$sub789 : $p$addr$5445);
     $sub806 = $p$addr$5445 - $sub$ptr$sub789 | 0;
     $d$7444 = $d$7444 + 4 | 0;
     if (!($d$7444 >>> 0 < $spec$select410 >>> 0 & ($sub806 | 0) > -1)) {
      $p$addr$5$lcssa = $sub806;
      break;
     } else $p$addr$5445 = $sub806;
    }
   } else $p$addr$5$lcssa = $p$addr$3;
   _pad_667($f, 48, $p$addr$5$lcssa + 18 | 0, 18, 0);
   _out($f, $estr$2, $arrayidx - $estr$2 | 0);
  }
  _pad_667($f, 32, $w, $add653, $fl ^ 8192);
  $add653$sink524 = $add653;
 } while (0);
 STACKTOP = sp;
 return (($add653$sink524 | 0) < ($w | 0) ? $w : $add653$sink524) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $PermitForwardTemplateReferences = 0, $SavePermit = 0, $SaveTemplate = 0, $Ty = 0, $call127 = 0, $call286 = 0, $call41 = 0, $cmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $SaveTemplate = sp + 16 | 0;
 $SavePermit = sp + 8 | 0;
 $Ty = sp;
 L1 : do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 | 0) {
 case 97:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 97:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 53970) | 0;
     break L1;
     break;
    }
   case 110:
   case 100:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 53981) | 0;
     break L1;
     break;
    }
   case 78:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 53991) | 0;
     break L1;
     break;
    }
   case 83:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54002) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 99:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 108:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54012) | 0;
     break L1;
     break;
    }
   case 109:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54023) | 0;
     break L1;
     break;
    }
   case 111:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54033) | 0;
     break L1;
     break;
    }
   case 118:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SaveTemplate, $this + 360 | 0, 0);
     $PermitForwardTemplateReferences = $this + 361 | 0;
     $cmp = ($State | 0) != 0;
     __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePermit, $PermitForwardTemplateReferences, $cmp | (HEAP8[$PermitForwardTemplateReferences >> 0] | 0) != 0);
     $call41 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call41;
     if (!$call41) $retval$0 = 0; else {
      if ($cmp) HEAP8[$State >> 0] = 1;
      $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $Ty) | 0;
     }
     __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePermit);
     __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemplate);
     $retval$3 = $retval$0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 100:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 97:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this, 54043) | 0;
     break L1;
     break;
    }
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54061) | 0;
     break L1;
     break;
    }
   case 108:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_($this) | 0;
     break L1;
     break;
    }
   case 118:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54071) | 0;
     break L1;
     break;
    }
   case 86:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54081) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 101:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 111:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54092) | 0;
     break L1;
     break;
    }
   case 79:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54102) | 0;
     break L1;
     break;
    }
   case 113:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54113) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 103:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54124) | 0;
     break L1;
     break;
    }
   case 116:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54135) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 105:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 120) {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54145) | 0;
   } else $retval$3 = 0;
   break;
  }
 case 108:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54156) | 0;
     break L1;
     break;
    }
   case 105:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call127 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$SaveTemplate >> 2] = $call127;
     if (!$call127) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_($this, $SaveTemplate) | 0;
     $retval$3 = $retval$1;
     break L1;
     break;
    }
   case 115:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54167) | 0;
     break L1;
     break;
    }
   case 83:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 54178) | 0;
     break L1;
     break;
    }
   case 116:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54190) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 109:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 105:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54200) | 0;
     break L1;
     break;
    }
   case 73:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54210) | 0;
     break L1;
     break;
    }
   case 108:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54061) | 0;
     break L1;
     break;
    }
   case 76:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54221) | 0;
     break L1;
     break;
    }
   case 109:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54232) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 110:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 97:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 54243) | 0;
     break L1;
     break;
    }
   case 101:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54258) | 0;
     break L1;
     break;
    }
   case 103:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54200) | 0;
     break L1;
     break;
    }
   case 116:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54269) | 0;
     break L1;
     break;
    }
   case 119:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this, 54279) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 111:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 111:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54292) | 0;
     break L1;
     break;
    }
   case 114:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54303) | 0;
     break L1;
     break;
    }
   case 82:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54313) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 112:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 109:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 54324) | 0;
     break L1;
     break;
    }
   case 108:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54336) | 0;
     break L1;
     break;
    }
   case 76:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54346) | 0;
     break L1;
     break;
    }
   case 112:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54357) | 0;
     break L1;
     break;
    }
   case 115:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54336) | 0;
     break L1;
     break;
    }
   case 116:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54368) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 113:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 117) {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54379) | 0;
   } else $retval$3 = 0;
   break;
  }
 case 114:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 109:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, 54389) | 0;
     break L1;
     break;
    }
   case 77:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54399) | 0;
     break L1;
     break;
    }
   case 115:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, 54410) | 0;
     break L1;
     break;
    }
   case 83:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 54421) | 0;
     break L1;
     break;
    }
   default:
    {
     $retval$3 = 0;
     break L1;
    }
   }
   break;
  }
 case 115:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 115) {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, 54433) | 0;
   } else $retval$3 = 0;
   break;
  }
 case 118:
  {
   if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10) {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
    $call286 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$SaveTemplate >> 2] = $call286;
    if (!$call286) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $SaveTemplate) | 0;
    $retval$3 = $retval$2;
   } else $retval$3 = 0;
   break;
  }
 default:
  $retval$3 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function _stbi__parse_png_file($z, $scan, $req_comp) {
 $z = $z | 0;
 $scan = $scan | 0;
 $req_comp = $req_comp | 0;
 var $201 = 0, $237 = 0, $8 = 0, $bpl = 0, $c = 0, $call14 = 0, $call152 = 0, $call155 = 0, $call159 = 0, $call199 = 0, $call20 = 0, $call346 = 0, $cmp222 = 0, $color = 0, $comp = 0, $conv = 0, $conv231 = 0, $conv245 = 0, $conv250 = 0, $filter = 0, $first = 0, $has_trans = 0, $i = 0, $idata_limit = 0, $idata_limit_old = 0, $img_n430 = 0, $interlace = 0, $ioff = 0, $is_iphone = 0, $k = 0, $p = 0, $pal_img_n = 0, $pal_len = 0, $palette = 0, $raw_len = 0, $req_comp$addr = 0, $retval = 0, $s = 0, $scan$addr = 0, $tc = 0, $tc16 = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136 | 0;
 $retval = sp + 1108 | 0;
 $z$addr = sp + 1104 | 0;
 $scan$addr = sp + 1100 | 0;
 $req_comp$addr = sp + 1096 | 0;
 $palette = sp;
 $pal_img_n = sp + 1122 | 0;
 $has_trans = sp + 1121 | 0;
 $tc = sp + 1118 | 0;
 $tc16 = sp + 1112 | 0;
 $ioff = sp + 1092 | 0;
 $idata_limit = sp + 1088 | 0;
 $i = sp + 1084 | 0;
 $pal_len = sp + 1080 | 0;
 $first = sp + 1076 | 0;
 $k = sp + 1072 | 0;
 $interlace = sp + 1068 | 0;
 $color = sp + 1064 | 0;
 $is_iphone = sp + 1060 | 0;
 $s = sp + 1056 | 0;
 $c = sp + 1048 | 0;
 $comp = sp + 1044 | 0;
 $filter = sp + 1040 | 0;
 $idata_limit_old = sp + 1036 | 0;
 $p = sp + 1032 | 0;
 $raw_len = sp + 1028 | 0;
 $bpl = sp + 1024 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$scan$addr >> 2] = $scan;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP8[$pal_img_n >> 0] = 0;
 HEAP8[$has_trans >> 0] = 0;
 HEAP8[$tc >> 0] = 0;
 HEAP8[$tc + 1 >> 0] = 0;
 HEAP8[$tc + 2 >> 0] = 0;
 HEAP32[$ioff >> 2] = 0;
 HEAP32[$idata_limit >> 2] = 0;
 HEAP32[$pal_len >> 2] = 0;
 HEAP32[$first >> 2] = 1;
 HEAP32[$interlace >> 2] = 0;
 HEAP32[$color >> 2] = 0;
 HEAP32[$is_iphone >> 2] = 0;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$z$addr >> 2] >> 2];
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2] = 0;
 if (!(_stbi__check_png_header(HEAP32[$s >> 2] | 0) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $237 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $237 | 0;
 }
 if ((HEAP32[$scan$addr >> 2] | 0) == 1) {
  HEAP32[$retval >> 2] = 1;
  $237 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $237 | 0;
 }
 L9 : while (1) {
  _stbi__get_chunk_header($c, HEAP32[$s >> 2] | 0);
  $8 = HEAP32[$c + 4 >> 2] | 0;
  L11 : do if (($8 | 0) < 1229472850) {
   if (($8 | 0) < 1229209940) {
    switch ($8 | 0) {
    case 1130840649:
     break;
    default:
     {
      label = 132;
      break L11;
     }
    }
    HEAP32[$is_iphone >> 2] = 1;
    _stbi__skip(HEAP32[$s >> 2] | 0, HEAP32[$c >> 2] | 0);
    break;
   }
   if (($8 | 0) >= 1229278788) switch ($8 | 0) {
   case 1229278788:
    {
     label = 101;
     break L9;
     break;
    }
   default:
    {
     label = 132;
     break L11;
    }
   }
   switch ($8 | 0) {
   case 1229209940:
    break;
   default:
    {
     label = 132;
     break L11;
    }
   }
   if (HEAP32[$first >> 2] | 0) {
    label = 82;
    break L9;
   }
   if (!((HEAPU8[$pal_img_n >> 0] | 0) == 0 | (HEAP32[$pal_len >> 2] | 0) != 0)) {
    label = 84;
    break L9;
   }
   if ((HEAP32[$scan$addr >> 2] | 0) == 2) {
    label = 86;
    break L9;
   }
   if (((HEAP32[$ioff >> 2] | 0) + (HEAP32[$c >> 2] | 0) | 0) < (HEAP32[$ioff >> 2] | 0)) {
    label = 88;
    break L9;
   }
   if (((HEAP32[$ioff >> 2] | 0) + (HEAP32[$c >> 2] | 0) | 0) >>> 0 > (HEAP32[$idata_limit >> 2] | 0) >>> 0) {
    HEAP32[$idata_limit_old >> 2] = HEAP32[$idata_limit >> 2];
    if (!(HEAP32[$idata_limit >> 2] | 0)) HEAP32[$idata_limit >> 2] = (HEAP32[$c >> 2] | 0) >>> 0 > 4096 ? HEAP32[$c >> 2] | 0 : 4096;
    while (1) {
     if (((HEAP32[$ioff >> 2] | 0) + (HEAP32[$c >> 2] | 0) | 0) >>> 0 <= (HEAP32[$idata_limit >> 2] | 0) >>> 0) break;
     HEAP32[$idata_limit >> 2] = HEAP32[$idata_limit >> 2] << 1;
    }
    HEAP32[$p >> 2] = _realloc(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[$idata_limit >> 2] | 0) | 0;
    if (!(HEAP32[$p >> 2] | 0)) {
     label = 96;
     break L9;
    }
    HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] = HEAP32[$p >> 2];
   }
   if (!(_stbi__getn(HEAP32[$s >> 2] | 0, (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$ioff >> 2] | 0) | 0, HEAP32[$c >> 2] | 0) | 0)) {
    label = 99;
    break L9;
   }
   HEAP32[$ioff >> 2] = (HEAP32[$ioff >> 2] | 0) + (HEAP32[$c >> 2] | 0);
  } else {
   if (($8 | 0) < 1347179589) {
    switch ($8 | 0) {
    case 1229472850:
     break;
    default:
     {
      label = 132;
      break L11;
     }
    }
    if (!(HEAP32[$first >> 2] | 0)) {
     label = 9;
     break L9;
    }
    HEAP32[$first >> 2] = 0;
    if ((HEAP32[$c >> 2] | 0) != 13) {
     label = 11;
     break L9;
    }
    $call14 = _stbi__get32be(HEAP32[$s >> 2] | 0) | 0;
    HEAP32[HEAP32[$s >> 2] >> 2] = $call14;
    if ((HEAP32[HEAP32[$s >> 2] >> 2] | 0) >>> 0 > 16777216) {
     label = 13;
     break L9;
    }
    $call20 = _stbi__get32be(HEAP32[$s >> 2] | 0) | 0;
    HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] = $call20;
    if ((HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 16777216) {
     label = 15;
     break L9;
    }
    $conv = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] = $conv;
    if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 1) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 2) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 4) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 8) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 16) {
     label = 21;
     break L9;
    }
    HEAP32[$color >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    if ((HEAP32[$color >> 2] | 0) > 6) {
     label = 23;
     break L9;
    }
    if ((HEAP32[$color >> 2] | 0) == 3) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) == 16) {
     label = 26;
     break L9;
    }
    if ((HEAP32[$color >> 2] | 0) == 3) HEAP8[$pal_img_n >> 0] = 3; else if (HEAP32[$color >> 2] & 1 | 0) {
     label = 30;
     break L9;
    }
    HEAP32[$comp >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    if (HEAP32[$comp >> 2] | 0) {
     label = 32;
     break L9;
    }
    HEAP32[$filter >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    if (HEAP32[$filter >> 2] | 0) {
     label = 34;
     break L9;
    }
    HEAP32[$interlace >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    if ((HEAP32[$interlace >> 2] | 0) > 1) {
     label = 36;
     break L9;
    }
    if (!(HEAP32[HEAP32[$s >> 2] >> 2] | 0)) {
     label = 39;
     break L9;
    }
    if (!(HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0)) {
     label = 39;
     break L9;
    }
    if (HEAP8[$pal_img_n >> 0] | 0) {
     HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = 1;
     if ((((1073741824 / ((HEAP32[HEAP32[$s >> 2] >> 2] | 0) >>> 0) | 0) >>> 0) / 4 | 0) >>> 0 < (HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
      label = 46;
      break L9;
     } else break;
    }
    HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = (HEAP32[$color >> 2] & 2 | 0 ? 3 : 1) + (HEAP32[$color >> 2] & 4 | 0 ? 1 : 0);
    if ((((1073741824 / ((HEAP32[HEAP32[$s >> 2] >> 2] | 0) >>> 0) | 0) >>> 0) / ((HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0) >>> 0 < (HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
     label = 42;
     break L9;
    }
    if ((HEAP32[$scan$addr >> 2] | 0) == 2) {
     label = 44;
     break L9;
    } else break;
   }
   if (($8 | 0) < 1951551059) {
    switch ($8 | 0) {
    case 1347179589:
     break;
    default:
     {
      label = 132;
      break L11;
     }
    }
    if (HEAP32[$first >> 2] | 0) {
     label = 48;
     break L9;
    }
    if ((HEAP32[$c >> 2] | 0) >>> 0 > 768) {
     label = 50;
     break L9;
    }
    HEAP32[$pal_len >> 2] = ((HEAP32[$c >> 2] | 0) >>> 0) / 3 | 0;
    if (((HEAP32[$pal_len >> 2] | 0) * 3 | 0) != (HEAP32[$c >> 2] | 0)) {
     label = 52;
     break L9;
    }
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pal_len >> 2] | 0) >>> 0) break L11;
     $call152 = _stbi__get8(HEAP32[$s >> 2] | 0) | 0;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 0) >> 0] = $call152;
     $call155 = _stbi__get8(HEAP32[$s >> 2] | 0) | 0;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 1) >> 0] = $call155;
     $call159 = _stbi__get8(HEAP32[$s >> 2] | 0) | 0;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 2) >> 0] = $call159;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 3) >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
   switch ($8 | 0) {
   case 1951551059:
    break;
   default:
    {
     label = 132;
     break L11;
    }
   }
   if (HEAP32[$first >> 2] | 0) {
    label = 57;
    break L9;
   }
   if (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0) {
    label = 59;
    break L9;
   }
   if (HEAP8[$pal_img_n >> 0] | 0) {
    if ((HEAP32[$scan$addr >> 2] | 0) == 2) {
     label = 62;
     break L9;
    }
    if (!(HEAP32[$pal_len >> 2] | 0)) {
     label = 64;
     break L9;
    }
    if ((HEAP32[$c >> 2] | 0) >>> 0 > (HEAP32[$pal_len >> 2] | 0) >>> 0) {
     label = 66;
     break L9;
    }
    HEAP8[$pal_img_n >> 0] = 4;
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$c >> 2] | 0) >>> 0) break L11;
     $call199 = _stbi__get8(HEAP32[$s >> 2] | 0) | 0;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 3) >> 0] = $call199;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
   if (!(HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] & 1)) {
    label = 71;
    break L9;
   }
   if ((HEAP32[$c >> 2] | 0) != (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] << 1 | 0)) {
    label = 73;
    break L9;
   }
   HEAP8[$has_trans >> 0] = 1;
   $cmp222 = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) == 16;
   HEAP32[$k >> 2] = 0;
   if ($cmp222) while (1) {
    if ((HEAP32[$k >> 2] | 0) >= (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0)) break L11;
    $conv231 = (_stbi__get16be(HEAP32[$s >> 2] | 0) | 0) & 65535;
    HEAP16[$tc16 + (HEAP32[$k >> 2] << 1) >> 1] = $conv231;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   } else while (1) {
    if ((HEAP32[$k >> 2] | 0) >= (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0)) break L11;
    $conv245 = (_stbi__get16be(HEAP32[$s >> 2] | 0) | 0) & 255;
    $conv250 = (Math_imul($conv245, HEAPU8[48453 + (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) >> 0] | 0) | 0) & 255;
    HEAP8[$tc + (HEAP32[$k >> 2] | 0) >> 0] = $conv250;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
  } while (0);
  if ((label | 0) == 132) {
   label = 0;
   if (HEAP32[$first >> 2] | 0) {
    label = 133;
    break;
   }
   if (!(HEAP32[$c + 4 >> 2] & 536870912)) {
    label = 135;
    break;
   }
   _stbi__skip(HEAP32[$s >> 2] | 0, HEAP32[$c >> 2] | 0);
  }
  _stbi__get32be(HEAP32[$s >> 2] | 0) | 0;
 }
 switch (label | 0) {
 case 9:
  {
   HEAP32[$retval >> 2] = _stbi__err(48237) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 11:
  {
   HEAP32[$retval >> 2] = _stbi__err(48251) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 13:
  {
   HEAP32[$retval >> 2] = _stbi__err(47570) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 15:
  {
   HEAP32[$retval >> 2] = _stbi__err(47570) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 21:
  {
   HEAP32[$retval >> 2] = _stbi__err(48264) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 23:
  {
   HEAP32[$retval >> 2] = _stbi__err(48284) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 26:
  {
   HEAP32[$retval >> 2] = _stbi__err(48284) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 30:
  {
   HEAP32[$retval >> 2] = _stbi__err(48284) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 32:
  {
   HEAP32[$retval >> 2] = _stbi__err(48294) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 34:
  {
   HEAP32[$retval >> 2] = _stbi__err(48310) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 36:
  {
   HEAP32[$retval >> 2] = _stbi__err(48328) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 39:
  {
   HEAP32[$retval >> 2] = _stbi__err(48349) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 42:
  {
   HEAP32[$retval >> 2] = _stbi__err(47570) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 44:
  {
   HEAP32[$retval >> 2] = 1;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 46:
  {
   HEAP32[$retval >> 2] = _stbi__err(47570) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 48:
  {
   HEAP32[$retval >> 2] = _stbi__err(48363) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 50:
  {
   HEAP32[$retval >> 2] = _stbi__err(48378) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 52:
  {
   HEAP32[$retval >> 2] = _stbi__err(48378) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 57:
  {
   HEAP32[$retval >> 2] = _stbi__err(48363) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 59:
  {
   HEAP32[$retval >> 2] = _stbi__err(48391) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 62:
  {
   HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = 4;
   HEAP32[$retval >> 2] = 1;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 64:
  {
   HEAP32[$retval >> 2] = _stbi__err(48407) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 66:
  {
   HEAP32[$retval >> 2] = _stbi__err(48424) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 71:
  {
   HEAP32[$retval >> 2] = _stbi__err(48437) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 73:
  {
   HEAP32[$retval >> 2] = _stbi__err(48424) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 82:
  {
   HEAP32[$retval >> 2] = _stbi__err(48363) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 84:
  {
   HEAP32[$retval >> 2] = _stbi__err(48462) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 86:
  {
   HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = HEAPU8[$pal_img_n >> 0];
   HEAP32[$retval >> 2] = 1;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 88:
  {
   HEAP32[$retval >> 2] = 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 96:
  {
   HEAP32[$retval >> 2] = _stbi__err(47531) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 99:
  {
   HEAP32[$retval >> 2] = _stbi__err(48470) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 101:
  {
   if (HEAP32[$first >> 2] | 0) {
    HEAP32[$retval >> 2] = _stbi__err(48363) | 0;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   if (HEAP32[$scan$addr >> 2] | 0) {
    HEAP32[$retval >> 2] = 1;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0)) {
    HEAP32[$retval >> 2] = _stbi__err(48480) | 0;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   HEAP32[$bpl >> 2] = (((Math_imul(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) | 0) + 7 | 0) >>> 0) / 8 | 0;
   HEAP32[$raw_len >> 2] = (Math_imul(Math_imul(HEAP32[$bpl >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) | 0) + (HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0);
   $call346 = _stbi_zlib_decode_malloc_guesssize_headerflag(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[$ioff >> 2] | 0, HEAP32[$raw_len >> 2] | 0, $raw_len, ((HEAP32[$is_iphone >> 2] | 0) != 0 ^ 1) & 1) | 0;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] = $call346;
   if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$retval >> 2] = 0;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   _free(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0);
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] = 0;
   if (((HEAP32[$req_comp$addr >> 2] | 0) != 3 ? (HEAP32[$req_comp$addr >> 2] | 0) == ((HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) + 1 | 0) : 0) ^ 1 | (HEAP8[$pal_img_n >> 0] | 0) != 0) if (HEAPU8[$has_trans >> 0] | 0) label = 111; else HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2]; else label = 111;
   if ((label | 0) == 111) HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] = (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) + 1;
   if (!(_stbi__create_png_image(HEAP32[$z$addr >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0, HEAP32[$raw_len >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0, HEAP32[$color >> 2] | 0, HEAP32[$interlace >> 2] | 0) | 0)) {
    HEAP32[$retval >> 2] = 0;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   do if (HEAP8[$has_trans >> 0] | 0) {
    $201 = HEAP32[$z$addr >> 2] | 0;
    if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) == 16) {
     if (_stbi__compute_transparency16($201, $tc16, HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) | 0) break;
     HEAP32[$retval >> 2] = 0;
     $237 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $237 | 0;
    } else {
     if (_stbi__compute_transparency($201, $tc, HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) | 0) break;
     HEAP32[$retval >> 2] = 0;
     $237 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $237 | 0;
    }
   } while (0);
   if ((HEAP32[$is_iphone >> 2] | 0) != 0 & 0 != 0) if ((HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) > 2) _stbi__de_iphone(HEAP32[$z$addr >> 2] | 0);
   if (HEAP8[$pal_img_n >> 0] | 0) {
    HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = HEAPU8[$pal_img_n >> 0];
    HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] = HEAPU8[$pal_img_n >> 0];
    if ((HEAP32[$req_comp$addr >> 2] | 0) >= 3) HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] = HEAP32[$req_comp$addr >> 2];
    if (!(_stbi__expand_png_palette(HEAP32[$z$addr >> 2] | 0, $palette, HEAP32[$pal_len >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) | 0)) {
     HEAP32[$retval >> 2] = 0;
     $237 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $237 | 0;
    }
   } else if (HEAP8[$has_trans >> 0] | 0) {
    $img_n430 = (HEAP32[$s >> 2] | 0) + 8 | 0;
    HEAP32[$img_n430 >> 2] = (HEAP32[$img_n430 >> 2] | 0) + 1;
   }
   _free(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0);
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] = 0;
   HEAP32[$retval >> 2] = 1;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 133:
  {
   HEAP32[$retval >> 2] = _stbi__err(48363) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 135:
  {
   HEAP8[8656] = (HEAP32[$c + 4 >> 2] | 0) >>> 24;
   HEAP8[8657] = (HEAP32[$c + 4 >> 2] | 0) >>> 16;
   HEAP8[8658] = (HEAP32[$c + 4 >> 2] | 0) >>> 8;
   HEAP8[8659] = (HEAP32[$c + 4 >> 2] | 0) >>> 0;
   HEAP32[$retval >> 2] = _stbi__err(8656) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 }
 return 0;
}

function _stbi__bmp_load($s, $x, $y, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $139 = 0, $140 = 0, $141 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $210 = 0, $211 = 0, $212 = 0, $219 = 0, $224 = 0, $225 = 0, $230 = 0, $231 = 0, $236 = 0, $237 = 0, $247 = 0, $248 = 0, $319 = 0, $46 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $a = 0, $a382 = 0, $acount = 0, $all_a = 0, $ashift = 0, $bcount = 0, $bit_offset = 0, $bpp366 = 0, $bshift = 0, $call336 = 0, $call339 = 0, $call342 = 0, $call4 = 0, $call68 = 0, $call70 = 0, $call73 = 0, $cmp122 = 0, $color = 0, $comp$addr = 0, $cond225 = 0, $cond353 = 0, $cond381 = 0, $cond407 = 0, $conv386 = 0, $conv392 = 0, $conv398 = 0, $conv413 = 0, $dec = 0, $easy = 0, $flip_vertically = 0, $gcount = 0, $gshift = 0, $i = 0, $info = 0, $j = 0, $ma = 0, $mb = 0, $mg = 0, $mr = 0, $mul454 = 0, $mul460 = 0, $out = 0, $p1 = 0, $p2 = 0, $pad = 0, $pal = 0, $psize = 0, $rcount = 0, $req_comp$addr = 0, $retval = 0, $rshift = 0, $s$addr = 0, $t = 0, $target = 0, $tobool115 = 0, $tobool308 = 0, $tobool41 = 0, $tobool50 = 0, $tobool63 = 0, $v = 0, $v186 = 0, $v2 = 0, $v373 = 0, $width = 0, $x$addr = 0, $y$addr = 0, $z = 0, $z252 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1232 | 0;
 $retval = sp + 1220 | 0;
 $s$addr = sp + 1216 | 0;
 $x$addr = sp + 1212 | 0;
 $y$addr = sp + 1208 | 0;
 $comp$addr = sp + 1204 | 0;
 $req_comp$addr = sp + 1200 | 0;
 $out = sp + 1192 | 0;
 $mr = sp + 1188 | 0;
 $mg = sp + 1184 | 0;
 $mb = sp + 1180 | 0;
 $ma = sp + 1176 | 0;
 $all_a = sp + 1172 | 0;
 $pal = sp;
 $psize = sp + 1168 | 0;
 $i = sp + 1164 | 0;
 $j = sp + 1160 | 0;
 $width = sp + 1156 | 0;
 $flip_vertically = sp + 1152 | 0;
 $pad = sp + 1148 | 0;
 $target = sp + 1144 | 0;
 $info = sp + 1112 | 0;
 $z = sp + 1104 | 0;
 $bit_offset = sp + 1100 | 0;
 $v = sp + 1096 | 0;
 $color = sp + 1092 | 0;
 $v186 = sp + 1088 | 0;
 $v2 = sp + 1084 | 0;
 $rshift = sp + 1080 | 0;
 $gshift = sp + 1076 | 0;
 $bshift = sp + 1072 | 0;
 $ashift = sp + 1068 | 0;
 $rcount = sp + 1064 | 0;
 $gcount = sp + 1060 | 0;
 $bcount = sp + 1056 | 0;
 $acount = sp + 1052 | 0;
 $z252 = sp + 1048 | 0;
 $easy = sp + 1044 | 0;
 $a = sp + 1225 | 0;
 $bpp366 = sp + 1040 | 0;
 $v373 = sp + 1036 | 0;
 $a382 = sp + 1032 | 0;
 $t = sp + 1224 | 0;
 $p1 = sp + 1028 | 0;
 $p2 = sp + 1024 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[sp + 1196 >> 2] = $ri;
 HEAP32[$mr >> 2] = 0;
 HEAP32[$mg >> 2] = 0;
 HEAP32[$mb >> 2] = 0;
 HEAP32[$ma >> 2] = 0;
 HEAP32[$psize >> 2] = 0;
 HEAP32[$info + 28 >> 2] = 255;
 if (!(_stbi__bmp_parse_header(HEAP32[$s$addr >> 2] | 0, $info) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $319 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $319 | 0;
 }
 HEAP32[$flip_vertically >> 2] = (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0) > 0 & 1;
 $call4 = Math_abs(HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] = $call4;
 HEAP32[$mr >> 2] = HEAP32[$info + 12 >> 2];
 HEAP32[$mg >> 2] = HEAP32[$info + 16 >> 2];
 HEAP32[$mb >> 2] = HEAP32[$info + 20 >> 2];
 HEAP32[$ma >> 2] = HEAP32[$info + 24 >> 2];
 HEAP32[$all_a >> 2] = HEAP32[$info + 28 >> 2];
 $12 = HEAP32[$info >> 2] | 0;
 if ((HEAP32[$info + 8 >> 2] | 0) == 12) {
  if (($12 | 0) < 24) HEAP32[$psize >> 2] = ((HEAP32[$info + 4 >> 2] | 0) - 14 - 24 | 0) / 3 | 0;
 } else if (($12 | 0) < 16) HEAP32[$psize >> 2] = (HEAP32[$info + 4 >> 2] | 0) - 14 - (HEAP32[$info + 8 >> 2] | 0) >> 2;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 8 >> 2] = HEAP32[$ma >> 2] | 0 ? 4 : 3;
 if ((HEAP32[$req_comp$addr >> 2] | 0) != 0 & (HEAP32[$req_comp$addr >> 2] | 0) >= 3) HEAP32[$target >> 2] = HEAP32[$req_comp$addr >> 2]; else HEAP32[$target >> 2] = HEAP32[(HEAP32[$s$addr >> 2] | 0) + 8 >> 2];
 if (!(_stbi__mad3sizes_valid(HEAP32[$target >> 2] | 0, HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0, 0) | 0)) {
  $tobool41 = (_stbi__err(47570) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool41 ? 0 : 0;
  $319 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $319 | 0;
 }
 HEAP32[$out >> 2] = _stbi__malloc_mad3(HEAP32[$target >> 2] | 0, HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0, 0) | 0;
 if (!(HEAP32[$out >> 2] | 0)) {
  $tobool50 = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool50 ? 0 : 0;
  $319 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $319 | 0;
 }
 L23 : do if ((HEAP32[$info >> 2] | 0) < 16) {
  HEAP32[$z >> 2] = 0;
  if ((HEAP32[$psize >> 2] | 0) == 0 | (HEAP32[$psize >> 2] | 0) > 256) {
   _free(HEAP32[$out >> 2] | 0);
   $tobool63 = (_stbi__err(48113) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool63 ? 0 : 0;
   $319 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $319 | 0;
  }
  HEAP32[$i >> 2] = 0;
  while (1) {
   $46 = HEAP32[$s$addr >> 2] | 0;
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$psize >> 2] | 0)) break;
   $call68 = _stbi__get8($46) | 0;
   HEAP8[$pal + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $call68;
   $call70 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP8[$pal + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $call70;
   $call73 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP8[$pal + (HEAP32[$i >> 2] << 2) >> 0] = $call73;
   if ((HEAP32[$info + 8 >> 2] | 0) != 12) _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP8[$pal + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  _stbi__skip($46, (HEAP32[$info + 4 >> 2] | 0) - 14 - (HEAP32[$info + 8 >> 2] | 0) - (Math_imul(HEAP32[$psize >> 2] | 0, (HEAP32[$info + 8 >> 2] | 0) == 12 ? 3 : 4) | 0) | 0);
  do if ((HEAP32[$info >> 2] | 0) == 1) HEAP32[$width >> 2] = ((HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0) + 7 | 0) >>> 3; else {
   if ((HEAP32[$info >> 2] | 0) == 4) {
    HEAP32[$width >> 2] = ((HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0) + 1 | 0) >>> 1;
    break;
   }
   if ((HEAP32[$info >> 2] | 0) == 8) {
    HEAP32[$width >> 2] = HEAP32[HEAP32[$s$addr >> 2] >> 2];
    break;
   }
   _free(HEAP32[$out >> 2] | 0);
   $tobool115 = (_stbi__err(48121) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool115 ? 0 : 0;
   $319 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $319 | 0;
  } while (0);
  HEAP32[$pad >> 2] = 0 - (HEAP32[$width >> 2] | 0) & 3;
  $cmp122 = (HEAP32[$info >> 2] | 0) == 1;
  HEAP32[$j >> 2] = 0;
  if ($cmp122) while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0)) break L23;
   HEAP32[$bit_offset >> 2] = 7;
   HEAP32[$v >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0)) break;
    HEAP32[$color >> 2] = HEAP32[$v >> 2] >> HEAP32[$bit_offset >> 2] & 1;
    $84 = HEAP8[$pal + (HEAP32[$color >> 2] << 2) >> 0] | 0;
    $85 = HEAP32[$out >> 2] | 0;
    $86 = HEAP32[$z >> 2] | 0;
    HEAP32[$z >> 2] = $86 + 1;
    HEAP8[$85 + $86 >> 0] = $84;
    $88 = HEAP8[$pal + (HEAP32[$color >> 2] << 2) + 1 >> 0] | 0;
    $89 = HEAP32[$out >> 2] | 0;
    $90 = HEAP32[$z >> 2] | 0;
    HEAP32[$z >> 2] = $90 + 1;
    HEAP8[$89 + $90 >> 0] = $88;
    $92 = HEAP8[$pal + (HEAP32[$color >> 2] << 2) + 2 >> 0] | 0;
    $93 = HEAP32[$out >> 2] | 0;
    $94 = HEAP32[$z >> 2] | 0;
    HEAP32[$z >> 2] = $94 + 1;
    HEAP8[$93 + $94 >> 0] = $92;
    if ((HEAP32[$target >> 2] | 0) == 4) {
     $96 = HEAP32[$out >> 2] | 0;
     $97 = HEAP32[$z >> 2] | 0;
     HEAP32[$z >> 2] = $97 + 1;
     HEAP8[$96 + $97 >> 0] = -1;
    }
    if (((HEAP32[$i >> 2] | 0) + 1 | 0) == (HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0)) break;
    $dec = (HEAP32[$bit_offset >> 2] | 0) + -1 | 0;
    HEAP32[$bit_offset >> 2] = $dec;
    if (($dec | 0) < 0) {
     HEAP32[$bit_offset >> 2] = 7;
     HEAP32[$v >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
    }
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   _stbi__skip(HEAP32[$s$addr >> 2] | 0, HEAP32[$pad >> 2] | 0);
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0)) break L23;
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0)) break;
    HEAP32[$v186 >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
    HEAP32[$v2 >> 2] = 0;
    if ((HEAP32[$info >> 2] | 0) == 4) {
     HEAP32[$v2 >> 2] = HEAP32[$v186 >> 2] & 15;
     HEAP32[$v186 >> 2] = HEAP32[$v186 >> 2] >> 4;
    }
    $118 = HEAP8[$pal + (HEAP32[$v186 >> 2] << 2) >> 0] | 0;
    $119 = HEAP32[$out >> 2] | 0;
    $120 = HEAP32[$z >> 2] | 0;
    HEAP32[$z >> 2] = $120 + 1;
    HEAP8[$119 + $120 >> 0] = $118;
    $122 = HEAP8[$pal + (HEAP32[$v186 >> 2] << 2) + 1 >> 0] | 0;
    $123 = HEAP32[$out >> 2] | 0;
    $124 = HEAP32[$z >> 2] | 0;
    HEAP32[$z >> 2] = $124 + 1;
    HEAP8[$123 + $124 >> 0] = $122;
    $126 = HEAP8[$pal + (HEAP32[$v186 >> 2] << 2) + 2 >> 0] | 0;
    $127 = HEAP32[$out >> 2] | 0;
    $128 = HEAP32[$z >> 2] | 0;
    HEAP32[$z >> 2] = $128 + 1;
    HEAP8[$127 + $128 >> 0] = $126;
    if ((HEAP32[$target >> 2] | 0) == 4) {
     $130 = HEAP32[$out >> 2] | 0;
     $131 = HEAP32[$z >> 2] | 0;
     HEAP32[$z >> 2] = $131 + 1;
     HEAP8[$130 + $131 >> 0] = -1;
    }
    if (((HEAP32[$i >> 2] | 0) + 1 | 0) == (HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0)) break;
    if ((HEAP32[$info >> 2] | 0) == 8) $cond225 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255; else $cond225 = HEAP32[$v2 >> 2] | 0;
    HEAP32[$v186 >> 2] = $cond225;
    $139 = HEAP8[$pal + (HEAP32[$v186 >> 2] << 2) >> 0] | 0;
    $140 = HEAP32[$out >> 2] | 0;
    $141 = HEAP32[$z >> 2] | 0;
    HEAP32[$z >> 2] = $141 + 1;
    HEAP8[$140 + $141 >> 0] = $139;
    $143 = HEAP8[$pal + (HEAP32[$v186 >> 2] << 2) + 1 >> 0] | 0;
    $144 = HEAP32[$out >> 2] | 0;
    $145 = HEAP32[$z >> 2] | 0;
    HEAP32[$z >> 2] = $145 + 1;
    HEAP8[$144 + $145 >> 0] = $143;
    $147 = HEAP8[$pal + (HEAP32[$v186 >> 2] << 2) + 2 >> 0] | 0;
    $148 = HEAP32[$out >> 2] | 0;
    $149 = HEAP32[$z >> 2] | 0;
    HEAP32[$z >> 2] = $149 + 1;
    HEAP8[$148 + $149 >> 0] = $147;
    if ((HEAP32[$target >> 2] | 0) == 4) {
     $151 = HEAP32[$out >> 2] | 0;
     $152 = HEAP32[$z >> 2] | 0;
     HEAP32[$z >> 2] = $152 + 1;
     HEAP8[$151 + $152 >> 0] = -1;
    }
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 2;
   }
   _stbi__skip(HEAP32[$s$addr >> 2] | 0, HEAP32[$pad >> 2] | 0);
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
 } else {
  HEAP32[$rshift >> 2] = 0;
  HEAP32[$gshift >> 2] = 0;
  HEAP32[$bshift >> 2] = 0;
  HEAP32[$ashift >> 2] = 0;
  HEAP32[$rcount >> 2] = 0;
  HEAP32[$gcount >> 2] = 0;
  HEAP32[$bcount >> 2] = 0;
  HEAP32[$acount >> 2] = 0;
  HEAP32[$z252 >> 2] = 0;
  HEAP32[$easy >> 2] = 0;
  _stbi__skip(HEAP32[$s$addr >> 2] | 0, (HEAP32[$info + 4 >> 2] | 0) - 14 - (HEAP32[$info + 8 >> 2] | 0) | 0);
  do if ((HEAP32[$info >> 2] | 0) == 24) HEAP32[$width >> 2] = (HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0) * 3; else if ((HEAP32[$info >> 2] | 0) == 16) {
   HEAP32[$width >> 2] = HEAP32[HEAP32[$s$addr >> 2] >> 2] << 1;
   break;
  } else {
   HEAP32[$width >> 2] = 0;
   break;
  } while (0);
  HEAP32[$pad >> 2] = 0 - (HEAP32[$width >> 2] | 0) & 3;
  if ((HEAP32[$info >> 2] | 0) == 24) HEAP32[$easy >> 2] = 1; else if ((HEAP32[$info >> 2] | 0) == 32) if ((HEAP32[$mb >> 2] | 0) == 255 & (HEAP32[$mg >> 2] | 0) == 65280 & (HEAP32[$mr >> 2] | 0) == 16711680 & (HEAP32[$ma >> 2] | 0) == -16777216) HEAP32[$easy >> 2] = 2;
  do if (!(HEAP32[$easy >> 2] | 0)) {
   if ((HEAP32[$mr >> 2] | 0) != 0 & (HEAP32[$mg >> 2] | 0) != 0 & (HEAP32[$mb >> 2] | 0) != 0) {
    HEAP32[$rshift >> 2] = (_stbi__high_bit(HEAP32[$mr >> 2] | 0) | 0) - 7;
    HEAP32[$rcount >> 2] = _stbi__bitcount(HEAP32[$mr >> 2] | 0) | 0;
    HEAP32[$gshift >> 2] = (_stbi__high_bit(HEAP32[$mg >> 2] | 0) | 0) - 7;
    HEAP32[$gcount >> 2] = _stbi__bitcount(HEAP32[$mg >> 2] | 0) | 0;
    HEAP32[$bshift >> 2] = (_stbi__high_bit(HEAP32[$mb >> 2] | 0) | 0) - 7;
    HEAP32[$bcount >> 2] = _stbi__bitcount(HEAP32[$mb >> 2] | 0) | 0;
    HEAP32[$ashift >> 2] = (_stbi__high_bit(HEAP32[$ma >> 2] | 0) | 0) - 7;
    HEAP32[$acount >> 2] = _stbi__bitcount(HEAP32[$ma >> 2] | 0) | 0;
    break;
   }
   _free(HEAP32[$out >> 2] | 0);
   $tobool308 = (_stbi__err(48129) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool308 ? 0 : 0;
   $319 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $319 | 0;
  } while (0);
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0)) break L23;
   L109 : do if (HEAP32[$easy >> 2] | 0) {
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >= (HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0)) break L109;
     $call336 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + ((HEAP32[$z252 >> 2] | 0) + 2) >> 0] = $call336;
     $call339 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + ((HEAP32[$z252 >> 2] | 0) + 1) >> 0] = $call339;
     $call342 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + ((HEAP32[$z252 >> 2] | 0) + 0) >> 0] = $call342;
     HEAP32[$z252 >> 2] = (HEAP32[$z252 >> 2] | 0) + 3;
     if ((HEAP32[$easy >> 2] | 0) == 2) $cond353 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255; else $cond353 = 255;
     HEAP8[$a >> 0] = $cond353;
     HEAP32[$all_a >> 2] = HEAP32[$all_a >> 2] | (HEAPU8[$a >> 0] | 0);
     if ((HEAP32[$target >> 2] | 0) == 4) {
      $210 = HEAP8[$a >> 0] | 0;
      $211 = HEAP32[$out >> 2] | 0;
      $212 = HEAP32[$z252 >> 2] | 0;
      HEAP32[$z252 >> 2] = $212 + 1;
      HEAP8[$211 + $212 >> 0] = $210;
     }
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   } else {
    HEAP32[$bpp366 >> 2] = HEAP32[$info >> 2];
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >= (HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0)) break L109;
     $219 = HEAP32[$s$addr >> 2] | 0;
     if ((HEAP32[$bpp366 >> 2] | 0) == 16) $cond381 = _stbi__get16le($219) | 0; else $cond381 = _stbi__get32le($219) | 0;
     HEAP32[$v373 >> 2] = $cond381;
     $conv386 = (_stbi__shiftsigned(HEAP32[$v373 >> 2] & HEAP32[$mr >> 2], HEAP32[$rshift >> 2] | 0, HEAP32[$rcount >> 2] | 0) | 0) & 255;
     $224 = HEAP32[$out >> 2] | 0;
     $225 = HEAP32[$z252 >> 2] | 0;
     HEAP32[$z252 >> 2] = $225 + 1;
     HEAP8[$224 + $225 >> 0] = $conv386;
     $conv392 = (_stbi__shiftsigned(HEAP32[$v373 >> 2] & HEAP32[$mg >> 2], HEAP32[$gshift >> 2] | 0, HEAP32[$gcount >> 2] | 0) | 0) & 255;
     $230 = HEAP32[$out >> 2] | 0;
     $231 = HEAP32[$z252 >> 2] | 0;
     HEAP32[$z252 >> 2] = $231 + 1;
     HEAP8[$230 + $231 >> 0] = $conv392;
     $conv398 = (_stbi__shiftsigned(HEAP32[$v373 >> 2] & HEAP32[$mb >> 2], HEAP32[$bshift >> 2] | 0, HEAP32[$bcount >> 2] | 0) | 0) & 255;
     $236 = HEAP32[$out >> 2] | 0;
     $237 = HEAP32[$z252 >> 2] | 0;
     HEAP32[$z252 >> 2] = $237 + 1;
     HEAP8[$236 + $237 >> 0] = $conv398;
     if (HEAP32[$ma >> 2] | 0) $cond407 = _stbi__shiftsigned(HEAP32[$v373 >> 2] & HEAP32[$ma >> 2], HEAP32[$ashift >> 2] | 0, HEAP32[$acount >> 2] | 0) | 0; else $cond407 = 255;
     HEAP32[$a382 >> 2] = $cond407;
     HEAP32[$all_a >> 2] = HEAP32[$all_a >> 2] | HEAP32[$a382 >> 2];
     if ((HEAP32[$target >> 2] | 0) == 4) {
      $conv413 = HEAP32[$a382 >> 2] & 255;
      $247 = HEAP32[$out >> 2] | 0;
      $248 = HEAP32[$z252 >> 2] | 0;
      HEAP32[$z252 >> 2] = $248 + 1;
      HEAP8[$247 + $248 >> 0] = $conv413;
     }
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   } while (0);
   _stbi__skip(HEAP32[$s$addr >> 2] | 0, HEAP32[$pad >> 2] | 0);
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
 } while (0);
 L136 : do if ((HEAP32[$target >> 2] | 0) == 4 & (HEAP32[$all_a >> 2] | 0) == 0) {
  HEAP32[$i >> 2] = (Math_imul(HEAP32[HEAP32[$s$addr >> 2] >> 2] << 2, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0) | 0) - 1;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) < 0) break L136;
   HEAP8[(HEAP32[$out >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = -1;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) - 4;
  }
 } while (0);
 L142 : do if (HEAP32[$flip_vertically >> 2] | 0) {
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] >> 1 | 0)) break L142;
   $mul454 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0) | 0;
   HEAP32[$p1 >> 2] = (HEAP32[$out >> 2] | 0) + (Math_imul($mul454, HEAP32[$target >> 2] | 0) | 0);
   $mul460 = Math_imul((HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0) - 1 - (HEAP32[$j >> 2] | 0) | 0, HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0) | 0;
   HEAP32[$p2 >> 2] = (HEAP32[$out >> 2] | 0) + (Math_imul($mul460, HEAP32[$target >> 2] | 0) | 0);
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0, HEAP32[$target >> 2] | 0) | 0)) break;
    HEAP8[$t >> 0] = HEAP8[(HEAP32[$p1 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
    HEAP8[(HEAP32[$p1 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = HEAP8[(HEAP32[$p2 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
    HEAP8[(HEAP32[$p2 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = HEAP8[$t >> 0] | 0;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAP32[$req_comp$addr >> 2] | 0) if ((HEAP32[$req_comp$addr >> 2] | 0) != (HEAP32[$target >> 2] | 0)) {
  HEAP32[$out >> 2] = _stbi__convert_format(HEAP32[$out >> 2] | 0, HEAP32[$target >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
  if (!(HEAP32[$out >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$out >> 2];
   $319 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $319 | 0;
  }
 }
 HEAP32[HEAP32[$x$addr >> 2] >> 2] = HEAP32[HEAP32[$s$addr >> 2] >> 2];
 HEAP32[HEAP32[$y$addr >> 2] >> 2] = HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2];
 if (HEAP32[$comp$addr >> 2] | 0) HEAP32[HEAP32[$comp$addr >> 2] >> 2] = HEAP32[(HEAP32[$s$addr >> 2] | 0) + 8 >> 2];
 HEAP32[$retval >> 2] = HEAP32[$out >> 2];
 $319 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $319 | 0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $$lcssa213 = 0, $$pre261 = 0, $$pre263 = 0, $$sink = 0, $0 = 0, $1 = 0, $102 = 0, $103 = 0, $11 = 0, $112 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $146 = 0, $154 = 0, $162 = 0, $164 = 0, $166 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $4 = 0, $42 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $82 = 0, $92 = 0, $96 = 0, $a$0 = 0, $a$1 = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr341 = 0, $add323 = 0, $add390 = 0, $add436 = 0, $and220 = 0, $arg = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx129 = 0, $arrayidx365 = 0, $arrayidx78 = 0, $buf = 0, $call104 = 0, $call160 = 0, $call351 = 0, $call379 = 0, $call406 = 0, $cmp185 = 0, $cmp380 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond350 = 0, $conv175 = 0, $conv208 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr23 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $l$0 = 0, $l$0$ph = 0, $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond190 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $spec$select = 0, $spec$select195 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub428 = 0, $sub49230 = 0, $sub49238 = 0, $t$0 = 0, $t$1 = 0, $tobool25 = 0, $tobool34 = 0, $tobool352 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $z$0$lcssa = 0, $z$0226 = 0, label = 0, sp = 0, $55$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $s = sp + 56 | 0;
 $arg = sp + 40 | 0;
 $buf = sp;
 $wc = sp + 48 | 0;
 $mb = sp + 60 | 0;
 HEAP32[$s >> 2] = $fmt;
 $tobool25 = ($f | 0) != 0;
 $add$ptr206 = $buf + 40 | 0;
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = $buf + 39 | 0;
 $arrayidx365 = $wc + 4 | 0;
 $cnt$0$ph = 0;
 $l$0$ph = 0;
 $l10n$0$ph = 0;
 L1 : while (1) {
  $cnt$0 = $cnt$0$ph;
  $l$0 = $l$0$ph;
  while (1) {
   do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 75;
    $cnt$1 = -1;
    break;
   } else {
    $cnt$1 = $l$0 + $cnt$0 | 0;
    break;
   } else $cnt$1 = $cnt$0; while (0);
   $0 = HEAP32[$s >> 2] | 0;
   $1 = HEAP8[$0 >> 0] | 0;
   if (!($1 << 24 >> 24)) {
    label = 92;
    break L1;
   }
   $2 = $1;
   $3 = $0;
   L12 : while (1) {
    switch ($2 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $z$0$lcssa = $3;
      break L12;
      break;
     }
    default:
     {}
    }
    $incdec$ptr = $3 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr;
    $2 = HEAP8[$incdec$ptr >> 0] | 0;
    $3 = $incdec$ptr;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $4 = $3;
    $z$0226 = $3;
    while (1) {
     if ((HEAP8[$4 + 1 >> 0] | 0) != 37) {
      $z$0$lcssa = $z$0226;
      break L15;
     }
     $incdec$ptr23 = $z$0226 + 1 | 0;
     $4 = $4 + 2 | 0;
     HEAP32[$s >> 2] = $4;
     if ((HEAP8[$4 >> 0] | 0) != 37) {
      $z$0$lcssa = $incdec$ptr23;
      break;
     } else $z$0226 = $incdec$ptr23;
    }
   } while (0);
   $l$0 = $z$0$lcssa - $0 | 0;
   if ($tobool25) _out($f, $0, $l$0);
   if (!$l$0) break; else $cnt$0 = $cnt$1;
  }
  $tobool34 = (_isdigit(HEAP8[(HEAP32[$s >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre261 = HEAP32[$s >> 2] | 0;
  if ($tobool34) {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  } else if ((HEAP8[$$pre261 + 2 >> 0] | 0) == 36) {
   $$sink = 3;
   $argpos$0 = (HEAP8[$$pre261 + 1 >> 0] | 0) + -48 | 0;
   $l10n$1 = 1;
  } else {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  }
  $incdec$ptr45 = $$pre261 + $$sink | 0;
  HEAP32[$s >> 2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45 >> 0] | 0;
  $sub49230 = ($11 << 24 >> 24) + -32 | 0;
  if ($sub49230 >>> 0 > 31 | (1 << $sub49230 & 75913 | 0) == 0) {
   $$lcssa213 = $11;
   $fl$0$lcssa = 0;
   $storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;
   $storemerge187236 = $incdec$ptr45;
   $sub49238 = $sub49230;
   while (1) {
    $or = 1 << $sub49238 | $fl$0237;
    $incdec$ptr62 = $storemerge187236 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62 >> 0] | 0;
    $sub49238 = ($12 << 24 >> 24) + -32 | 0;
    if ($sub49238 >>> 0 > 31 | (1 << $sub49238 & 75913 | 0) == 0) {
     $$lcssa213 = $12;
     $fl$0$lcssa = $or;
     $storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;
     $storemerge187236 = $incdec$ptr62;
    }
   }
  }
  if ($$lcssa213 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$storemerge187$lcssa + 1 >> 0] | 0) | 0)) label = 27; else {
    $14 = HEAP32[$s >> 2] | 0;
    if ((HEAP8[$14 + 2 >> 0] | 0) == 36) {
     $arrayidx78 = $14 + 1 | 0;
     HEAP32[$nl_type + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $l10n$2 = 1;
     $storemerge188 = $14 + 3 | 0;
     $w$0 = HEAP32[$nl_arg + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 3) >> 2] | 0;
    } else label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    if ($l10n$1 | 0) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $29 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $30 = HEAP32[$29 >> 2] | 0;
     HEAP32[$ap >> 2] = $29 + 4;
     $cond = $30;
    } else $cond = 0;
    $l10n$2 = 0;
    $storemerge188 = (HEAP32[$s >> 2] | 0) + 1 | 0;
    $w$0 = $cond;
   }
   HEAP32[$s >> 2] = $storemerge188;
   $cmp97 = ($w$0 | 0) < 0;
   $33 = $storemerge188;
   $fl$1 = $cmp97 ? $fl$0$lcssa | 8192 : $fl$0$lcssa;
   $l10n$3 = $l10n$2;
   $w$1 = $cmp97 ? 0 - $w$0 | 0 : $w$0;
  } else {
   $call104 = _getint($s) | 0;
   if (($call104 | 0) < 0) {
    $retval$0 = -1;
    break;
   }
   $33 = HEAP32[$s >> 2] | 0;
   $fl$1 = $fl$0$lcssa;
   $l10n$3 = $l10n$1;
   $w$1 = $call104;
  }
  do if ((HEAP8[$33 >> 0] | 0) == 46) {
   $arrayidx114 = $33 + 1 | 0;
   if ((HEAP8[$arrayidx114 >> 0] | 0) != 42) {
    HEAP32[$s >> 2] = $arrayidx114;
    $call160 = _getint($s) | 0;
    $$pre263 = HEAP32[$s >> 2] | 0;
    $p$0 = $call160;
    break;
   }
   if (_isdigit(HEAP8[$33 + 2 >> 0] | 0) | 0) {
    $36 = HEAP32[$s >> 2] | 0;
    if ((HEAP8[$36 + 3 >> 0] | 0) == 36) {
     $arrayidx129 = $36 + 2 | 0;
     HEAP32[$nl_type + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $42 = HEAP32[$nl_arg + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $add$ptr139 = $36 + 4 | 0;
     HEAP32[$s >> 2] = $add$ptr139;
     $$pre263 = $add$ptr139;
     $p$0 = $42;
     break;
    }
   }
   if ($l10n$3 | 0) {
    $retval$0 = -1;
    break L1;
   }
   if ($tobool25) {
    $51 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $52 = HEAP32[$51 >> 2] | 0;
    HEAP32[$ap >> 2] = $51 + 4;
    $cond149 = $52;
   } else $cond149 = 0;
   $add$ptr150 = (HEAP32[$s >> 2] | 0) + 2 | 0;
   HEAP32[$s >> 2] = $add$ptr150;
   $$pre263 = $add$ptr150;
   $p$0 = $cond149;
  } else {
   $$pre263 = $33;
   $p$0 = -1;
  } while (0);
  $55 = $$pre263;
  $st$0 = 0;
  while (1) {
   if (((HEAP8[$55 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $retval$0 = -1;
    break L1;
   }
   $55$looptemp = $55;
   $55 = $55 + 1 | 0;
   HEAP32[$s >> 2] = $55;
   $57 = HEAP8[(HEAP8[$55$looptemp >> 0] | 0) + -65 + (10176 + ($st$0 * 58 | 0)) >> 0] | 0;
   $conv175 = $57 & 255;
   if (($conv175 + -1 | 0) >>> 0 >= 8) break; else $st$0 = $conv175;
  }
  if (!($57 << 24 >> 24)) {
   $retval$0 = -1;
   break;
  }
  $cmp185 = ($argpos$0 | 0) > -1;
  do if ($57 << 24 >> 24 == 19) if ($cmp185) {
   $retval$0 = -1;
   break L1;
  } else label = 54; else {
   if ($cmp185) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $conv175;
    $59 = $nl_arg + ($argpos$0 << 3) | 0;
    $64 = HEAP32[$59 + 4 >> 2] | 0;
    $65 = $arg;
    HEAP32[$65 >> 2] = HEAP32[$59 >> 2];
    HEAP32[$65 + 4 >> 2] = $64;
    label = 54;
    break;
   }
   if (!$tobool25) {
    $retval$0 = 0;
    break L1;
   }
   _pop_arg($arg, $conv175, $ap, $pop_arg_long_double);
   $69 = HEAP32[$s >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $55;
    label = 55;
   } else $l$0$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $conv208 = HEAP8[$69 + -1 >> 0] | 0;
   $t$0 = ($st$0 | 0) != 0 & ($conv208 & 15 | 0) == 3 ? $conv208 & -33 : $conv208;
   $and220 = $fl$1 & -65537;
   $spec$select = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $and220;
   L79 : do switch ($t$0 | 0) {
   case 110:
    {
     switch (($st$0 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $82 = HEAP32[$arg >> 2] | 0;
       HEAP32[$82 >> 2] = $cnt$1;
       HEAP32[$82 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $92 = HEAP32[$arg >> 2] | 0;
       HEAP32[$92 >> 2] = $cnt$1;
       HEAP32[$92 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $l$0$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $fl$3 = $spec$select | 8;
     $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
     $t$1 = 120;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $spec$select;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 67;
     break;
    }
   case 111:
    {
     $112 = $arg;
     $118 = _fmt_o(HEAP32[$112 >> 2] | 0, HEAP32[$112 + 4 >> 2] | 0, $add$ptr206) | 0;
     $sub$ptr$sub269 = $sub$ptr$lhs$cast318 - $118 | 0;
     $a$0 = $118;
     $fl$4 = $spec$select;
     $p$2 = ($spec$select & 8 | 0) == 0 | ($p$0 | 0) > ($sub$ptr$sub269 | 0) ? $p$0 : $sub$ptr$sub269 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = 49748;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $120 = $arg;
     $122 = HEAP32[$120 >> 2] | 0;
     $125 = HEAP32[$120 + 4 >> 2] | 0;
     if (($125 | 0) < 0) {
      $127 = _i64Subtract(0, 0, $122 | 0, $125 | 0) | 0;
      $128 = getTempRet0() | 0;
      $129 = $arg;
      HEAP32[$129 >> 2] = $127;
      HEAP32[$129 + 4 >> 2] = $128;
      $135 = $127;
      $136 = $128;
      $pl$0 = 1;
      $prefix$0 = 49748;
      label = 72;
      break L79;
     } else {
      $135 = $122;
      $136 = $125;
      $pl$0 = ($spec$select & 2049 | 0) != 0 & 1;
      $prefix$0 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 49748 : 49750) : 49749;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $71 = $arg;
     $135 = HEAP32[$71 >> 2] | 0;
     $136 = HEAP32[$71 + 4 >> 2] | 0;
     $pl$0 = 0;
     $prefix$0 = 49748;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$add$ptr341 >> 0] = HEAP32[$arg >> 2];
     $a$1 = $add$ptr341;
     $fl$6 = $and220;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 49748;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     break;
    }
   case 115:
    {
     $154 = HEAP32[$arg >> 2] | 0;
     $cond350 = ($154 | 0) == 0 ? 49758 : $154;
     $call351 = _memchr($cond350, 0, $p$0) | 0;
     $tobool352 = ($call351 | 0) == 0;
     $a$1 = $cond350;
     $fl$6 = $and220;
     $p$5 = $tobool352 ? $p$0 : $call351 - $cond350 | 0;
     $pl$2 = 0;
     $prefix$2 = 49748;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $tobool352 ? $cond350 + $p$0 | 0 : $call351;
     break;
    }
   case 67:
    {
     HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
     HEAP32[$arrayidx365 >> 2] = 0;
     HEAP32[$arg >> 2] = $wc;
     $p$4269 = -1;
     label = 79;
     break;
    }
   case 83:
    {
     if (!$p$0) {
      _pad_667($f, 32, $w$1, 0, $spec$select);
      $i$0217271 = 0;
      label = 89;
     } else {
      $p$4269 = $p$0;
      label = 79;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $l$0$ph$be = FUNCTION_TABLE_iidiiii[$fmt_fp & 1]($f, +HEAPF64[$arg >> 3], $w$1, $p$0, $spec$select, $t$0) | 0;
     break L77;
     break;
    }
   default:
    {
     $a$1 = $0;
     $fl$6 = $spec$select;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 49748;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
   } while (0);
   L102 : do if ((label | 0) == 67) {
    label = 0;
    $96 = $arg;
    $102 = _fmt_x(HEAP32[$96 >> 2] | 0, HEAP32[$96 + 4 >> 2] | 0, $add$ptr206, $t$1 & 32) | 0;
    $103 = $arg;
    $or$cond190 = ($fl$3 & 8 | 0) == 0 | (HEAP32[$103 >> 2] | 0) == 0 & (HEAP32[$103 + 4 >> 2] | 0) == 0;
    $a$0 = $102;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = $or$cond190 ? 0 : 2;
    $prefix$1 = $or$cond190 ? 49748 : 49748 + ($t$1 >>> 4) | 0;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $a$0 = _fmt_u($135, $136, $add$ptr206) | 0;
    $fl$4 = $spec$select;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 73;
   } else if ((label | 0) == 79) {
    label = 0;
    $i$0243 = 0;
    $ws$0244 = HEAP32[$arg >> 2] | 0;
    while (1) {
     $162 = HEAP32[$ws$0244 >> 2] | 0;
     if (!$162) {
      $i$0217 = $i$0243;
      break;
     }
     $call379 = _wctomb($mb, $162) | 0;
     $cmp380 = ($call379 | 0) < 0;
     if ($cmp380 | $call379 >>> 0 > ($p$4269 - $i$0243 | 0) >>> 0) {
      label = 83;
      break;
     }
     $add390 = $call379 + $i$0243 | 0;
     if ($p$4269 >>> 0 > $add390 >>> 0) {
      $i$0243 = $add390;
      $ws$0244 = $ws$0244 + 4 | 0;
     } else {
      $i$0217 = $add390;
      break;
     }
    }
    if ((label | 0) == 83) {
     label = 0;
     if ($cmp380) {
      $retval$0 = -1;
      break L1;
     } else $i$0217 = $i$0243;
    }
    _pad_667($f, 32, $w$1, $i$0217, $spec$select);
    if (!$i$0217) {
     $i$0217271 = 0;
     label = 89;
    } else {
     $i$1248 = 0;
     $ws$1249 = HEAP32[$arg >> 2] | 0;
     while (1) {
      $164 = HEAP32[$ws$1249 >> 2] | 0;
      if (!$164) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      $call406 = _wctomb($mb, $164) | 0;
      $i$1248 = $call406 + $i$1248 | 0;
      if (($i$1248 | 0) > ($i$0217 | 0)) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      _out($f, $mb, $call406);
      if ($i$1248 >>> 0 >= $i$0217 >>> 0) {
       $i$0217271 = $i$0217;
       label = 89;
       break;
      } else $ws$1249 = $ws$1249 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $138 = $arg;
    $146 = (HEAP32[$138 >> 2] | 0) != 0 | (HEAP32[$138 + 4 >> 2] | 0) != 0;
    $or$cond = ($p$2 | 0) != 0 | $146;
    $add323 = $sub$ptr$lhs$cast318 - $a$0 + (($146 ^ 1) & 1) | 0;
    $a$1 = $or$cond ? $a$0 : $add$ptr206;
    $fl$6 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
    $p$5 = $or$cond ? (($p$2 | 0) > ($add323 | 0) ? $p$2 : $add323) : 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
   } else if ((label | 0) == 89) {
    label = 0;
    _pad_667($f, 32, $w$1, $i$0217271, $spec$select ^ 8192);
    $l$0$ph$be = ($w$1 | 0) > ($i$0217271 | 0) ? $w$1 : $i$0217271;
    break;
   }
   $sub$ptr$sub428 = $sub$ptr$lhs$cast426$pre$phiZZZZ2D - $a$1 | 0;
   $spec$select195 = ($p$5 | 0) < ($sub$ptr$sub428 | 0) ? $sub$ptr$sub428 : $p$5;
   $add436 = $spec$select195 + $pl$2 | 0;
   $w$2 = ($w$1 | 0) < ($add436 | 0) ? $add436 : $w$1;
   _pad_667($f, 32, $w$2, $add436, $fl$6);
   _out($f, $prefix$2, $pl$2);
   _pad_667($f, 48, $w$2, $add436, $fl$6 ^ 65536);
   _pad_667($f, 48, $spec$select195, $sub$ptr$sub428, 0);
   _out($f, $a$1, $sub$ptr$sub428);
   _pad_667($f, 32, $w$2, $add436, $fl$6 ^ 8192);
   $l$0$ph$be = $w$2;
  } while (0);
  $cnt$0$ph = $cnt$1;
  $l$0$ph = $l$0$ph$be;
  $l10n$0$ph = $l10n$3;
 }
 L123 : do if ((label | 0) == 92) if (!$f) if (!$l10n$0$ph) $retval$0 = 0; else {
  $i$2224 = 1;
  while (1) {
   $166 = HEAP32[$nl_type + ($i$2224 << 2) >> 2] | 0;
   if (!$166) break;
   _pop_arg($nl_arg + ($i$2224 << 3) | 0, $166, $ap, $pop_arg_long_double);
   $inc = $i$2224 + 1 | 0;
   if ($inc >>> 0 < 10) $i$2224 = $inc; else {
    $retval$0 = 1;
    break L123;
   }
  }
  $i$3221 = $i$2224;
  while (1) {
   if (HEAP32[$nl_type + ($i$3221 << 2) >> 2] | 0) {
    $retval$0 = -1;
    break L123;
   }
   $i$3221 = $i$3221 + 1 | 0;
   if ($i$3221 >>> 0 >= 10) {
    $retval$0 = 1;
    break;
   }
  }
 } else $retval$0 = $cnt$1; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbtt__GetGlyphShapeTT($info, $glyph_index, $pvertices) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $pvertices = $pvertices | 0;
 var $119 = 0, $145 = 0, $146 = 0, $154 = 0, $155 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $190 = 0, $306 = 0, $31 = 0, $34 = 0, $49 = 0, $73 = 0, $92 = 0, $arrayidx230 = 0, $comp = 0, $comp_num_verts = 0, $comp_verts = 0, $conv109 = 0, $conv64 = 0, $cx = 0, $cy = 0, $data = 0, $div = 0.0, $dx = 0, $dy = 0, $endPtsOfContours = 0, $flagcount = 0, $flags = 0, $flags249 = 0, $g = 0, $gidx = 0, $glyph_index$addr = 0, $i = 0, $i250 = 0, $info$addr = 0, $ins = 0, $j = 0, $m = 0, $m251 = 0, $more = 0, $mtx = 0, $n = 0, $n252 = 0, $next_move = 0, $num_vertices = 0, $numberOfContours = 0, $off = 0, $points = 0, $pvertices$addr = 0, $retval = 0, $scx = 0, $scy = 0, $start_off = 0, $sx = 0, $sy = 0, $tmp = 0, $tobool227 = 0, $v = 0, $vertices = 0, $was_off = 0, $x = 0, $x374 = 0, $y = 0, $y375 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $retval = sp + 164 | 0;
 $info$addr = sp + 160 | 0;
 $glyph_index$addr = sp + 156 | 0;
 $pvertices$addr = sp + 152 | 0;
 $numberOfContours = sp + 180 | 0;
 $endPtsOfContours = sp + 148 | 0;
 $data = sp + 144 | 0;
 $vertices = sp + 140 | 0;
 $num_vertices = sp + 136 | 0;
 $g = sp + 132 | 0;
 $flags = sp + 183 | 0;
 $flagcount = sp + 182 | 0;
 $ins = sp + 128 | 0;
 $i = sp + 124 | 0;
 $j = sp + 120 | 0;
 $m = sp + 116 | 0;
 $n = sp + 112 | 0;
 $next_move = sp + 108 | 0;
 $was_off = sp + 104 | 0;
 $off = sp + 100 | 0;
 $start_off = sp + 96 | 0;
 $x = sp + 92 | 0;
 $y = sp + 88 | 0;
 $cx = sp + 84 | 0;
 $cy = sp + 80 | 0;
 $sx = sp + 76 | 0;
 $sy = sp + 72 | 0;
 $scx = sp + 68 | 0;
 $scy = sp + 64 | 0;
 $points = sp + 60 | 0;
 $dx = sp + 178 | 0;
 $dy = sp + 176 | 0;
 $more = sp + 56 | 0;
 $comp = sp + 52 | 0;
 $flags249 = sp + 174 | 0;
 $gidx = sp + 172 | 0;
 $comp_num_verts = sp + 48 | 0;
 $i250 = sp + 44 | 0;
 $comp_verts = sp + 40 | 0;
 $tmp = sp + 36 | 0;
 $mtx = sp;
 $m251 = sp + 32 | 0;
 $n252 = sp + 28 | 0;
 $v = sp + 24 | 0;
 $x374 = sp + 170 | 0;
 $y375 = sp + 168 | 0;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph_index$addr >> 2] = $glyph_index;
 HEAP32[$pvertices$addr >> 2] = $pvertices;
 HEAP32[$data >> 2] = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$vertices >> 2] = 0;
 HEAP32[$num_vertices >> 2] = 0;
 HEAP32[$g >> 2] = _stbtt__GetGlyfOffset(HEAP32[$info$addr >> 2] | 0, HEAP32[$glyph_index$addr >> 2] | 0) | 0;
 HEAP32[HEAP32[$pvertices$addr >> 2] >> 2] = 0;
 if ((HEAP32[$g >> 2] | 0) < 0) {
  HEAP32[$retval >> 2] = 0;
  $306 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $306 | 0;
 }
 HEAP16[$numberOfContours >> 1] = _ttSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$g >> 2] | 0) | 0) | 0;
 L5 : do if ((HEAP16[$numberOfContours >> 1] | 0) > 0) {
  HEAP8[$flags >> 0] = 0;
  HEAP32[$j >> 2] = 0;
  HEAP32[$was_off >> 2] = 0;
  HEAP32[$start_off >> 2] = 0;
  HEAP32[$endPtsOfContours >> 2] = (HEAP32[$data >> 2] | 0) + (HEAP32[$g >> 2] | 0) + 10;
  HEAP32[$ins >> 2] = (_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$g >> 2] | 0) + 10 + (HEAP16[$numberOfContours >> 1] << 1) | 0) | 0) & 65535;
  HEAP32[$points >> 2] = (HEAP32[$data >> 2] | 0) + (HEAP32[$g >> 2] | 0) + 10 + (HEAP16[$numberOfContours >> 1] << 1) + 2 + (HEAP32[$ins >> 2] | 0);
  HEAP32[$n >> 2] = 1 + ((_ttUSHORT((HEAP32[$endPtsOfContours >> 2] | 0) + (HEAP16[$numberOfContours >> 1] << 1) + -2 | 0) | 0) & 65535);
  HEAP32[$m >> 2] = (HEAP32[$n >> 2] | 0) + (HEAP16[$numberOfContours >> 1] << 1);
  HEAP32[$vertices >> 2] = _fons__tmpalloc((HEAP32[$m >> 2] | 0) * 14 | 0, HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0) | 0;
  if (!(HEAP32[$vertices >> 2] | 0)) {
   HEAP32[$retval >> 2] = 0;
   $306 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $306 | 0;
  }
  HEAP32[$next_move >> 2] = 0;
  HEAP8[$flagcount >> 0] = 0;
  HEAP32[$off >> 2] = (HEAP32[$m >> 2] | 0) - (HEAP32[$n >> 2] | 0);
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
   if (!(HEAPU8[$flagcount >> 0] | 0)) {
    $31 = HEAP32[$points >> 2] | 0;
    HEAP32[$points >> 2] = $31 + 1;
    HEAP8[$flags >> 0] = HEAP8[$31 >> 0] | 0;
    if (HEAPU8[$flags >> 0] & 8 | 0) {
     $34 = HEAP32[$points >> 2] | 0;
     HEAP32[$points >> 2] = $34 + 1;
     HEAP8[$flagcount >> 0] = HEAP8[$34 >> 0] | 0;
    }
   } else HEAP8[$flagcount >> 0] = (HEAP8[$flagcount >> 0] | 0) + -1 << 24 >> 24;
   HEAP8[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] = HEAP8[$flags >> 0] | 0;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$x >> 2] = 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
   HEAP8[$flags >> 0] = HEAP8[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] | 0;
   if (HEAPU8[$flags >> 0] & 2 | 0) {
    $49 = HEAP32[$points >> 2] | 0;
    HEAP32[$points >> 2] = $49 + 1;
    HEAP16[$dx >> 1] = HEAPU8[$49 >> 0] | 0;
    $conv64 = HEAP16[$dx >> 1] | 0;
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + (HEAPU8[$flags >> 0] & 16 | 0 ? $conv64 : 0 - $conv64 | 0);
   } else if (!(HEAPU8[$flags >> 0] & 16)) {
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + (((HEAPU8[HEAP32[$points >> 2] >> 0] << 8) + (HEAPU8[(HEAP32[$points >> 2] | 0) + 1 >> 0] | 0) & 65535) << 16 >> 16);
    HEAP32[$points >> 2] = (HEAP32[$points >> 2] | 0) + 2;
   }
   HEAP16[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) * 14 | 0) >> 1] = HEAP32[$x >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$y >> 2] = 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
   HEAP8[$flags >> 0] = HEAP8[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] | 0;
   if (HEAPU8[$flags >> 0] & 4 | 0) {
    $73 = HEAP32[$points >> 2] | 0;
    HEAP32[$points >> 2] = $73 + 1;
    HEAP16[$dy >> 1] = HEAPU8[$73 >> 0] | 0;
    $conv109 = HEAP16[$dy >> 1] | 0;
    HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + (HEAPU8[$flags >> 0] & 32 | 0 ? $conv109 : 0 - $conv109 | 0);
   } else if (!(HEAPU8[$flags >> 0] & 32)) {
    HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + (((HEAPU8[HEAP32[$points >> 2] >> 0] << 8) + (HEAPU8[(HEAP32[$points >> 2] | 0) + 1 >> 0] | 0) & 65535) << 16 >> 16);
    HEAP32[$points >> 2] = (HEAP32[$points >> 2] | 0) + 2;
   }
   HEAP16[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) * 14 | 0) + 2 >> 1] = HEAP32[$y >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$num_vertices >> 2] = 0;
  HEAP32[$scy >> 2] = 0;
  HEAP32[$scx >> 2] = 0;
  HEAP32[$cy >> 2] = 0;
  HEAP32[$cx >> 2] = 0;
  HEAP32[$sy >> 2] = 0;
  HEAP32[$sx >> 2] = 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   $92 = HEAP32[$vertices >> 2] | 0;
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
   HEAP8[$flags >> 0] = HEAP8[$92 + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) * 14 | 0) + 12 >> 0] | 0;
   HEAP32[$x >> 2] = HEAP16[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) * 14 | 0) >> 1];
   HEAP32[$y >> 2] = HEAP16[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) * 14 | 0) + 2 >> 1];
   do if ((HEAP32[$next_move >> 2] | 0) == (HEAP32[$i >> 2] | 0)) {
    if (HEAP32[$i >> 2] | 0) HEAP32[$num_vertices >> 2] = _stbtt__close_shape(HEAP32[$vertices >> 2] | 0, HEAP32[$num_vertices >> 2] | 0, HEAP32[$was_off >> 2] | 0, HEAP32[$start_off >> 2] | 0, HEAP32[$sx >> 2] | 0, HEAP32[$sy >> 2] | 0, HEAP32[$scx >> 2] | 0, HEAP32[$scy >> 2] | 0, HEAP32[$cx >> 2] | 0, HEAP32[$cy >> 2] | 0) | 0;
    HEAP32[$start_off >> 2] = ((HEAPU8[$flags >> 0] & 1 | 0) != 0 ^ 1) & 1;
    $119 = HEAP32[$x >> 2] | 0;
    do if (HEAP32[$start_off >> 2] | 0) {
     HEAP32[$scx >> 2] = $119;
     HEAP32[$scy >> 2] = HEAP32[$y >> 2];
     if (HEAPU8[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) + 1 | 0) * 14 | 0) + 12 >> 0] & 1 | 0) {
      HEAP32[$sx >> 2] = HEAP16[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) + 1 | 0) * 14 | 0) >> 1];
      HEAP32[$sy >> 2] = HEAP16[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) + 1 | 0) * 14 | 0) + 2 >> 1];
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
      break;
     } else {
      HEAP32[$sx >> 2] = (HEAP32[$x >> 2] | 0) + (HEAP16[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) + 1 | 0) * 14 | 0) >> 1] | 0) >> 1;
      HEAP32[$sy >> 2] = (HEAP32[$y >> 2] | 0) + (HEAP16[(HEAP32[$vertices >> 2] | 0) + (((HEAP32[$off >> 2] | 0) + (HEAP32[$i >> 2] | 0) + 1 | 0) * 14 | 0) + 2 >> 1] | 0) >> 1;
      break;
     }
    } else {
     HEAP32[$sx >> 2] = $119;
     HEAP32[$sy >> 2] = HEAP32[$y >> 2];
    } while (0);
    $145 = HEAP32[$vertices >> 2] | 0;
    $146 = HEAP32[$num_vertices >> 2] | 0;
    HEAP32[$num_vertices >> 2] = $146 + 1;
    _stbtt_setvertex($145 + ($146 * 14 | 0) | 0, 1, HEAP32[$sx >> 2] | 0, HEAP32[$sy >> 2] | 0, 0, 0);
    HEAP32[$was_off >> 2] = 0;
    HEAP32[$next_move >> 2] = 1 + ((_ttUSHORT((HEAP32[$endPtsOfContours >> 2] | 0) + (HEAP32[$j >> 2] << 1) | 0) | 0) & 65535);
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   } else {
    $tobool227 = (HEAP32[$was_off >> 2] | 0) != 0;
    if (!(HEAPU8[$flags >> 0] & 1)) {
     if ($tobool227) {
      $154 = HEAP32[$vertices >> 2] | 0;
      $155 = HEAP32[$num_vertices >> 2] | 0;
      HEAP32[$num_vertices >> 2] = $155 + 1;
      _stbtt_setvertex($154 + ($155 * 14 | 0) | 0, 3, (HEAP32[$cx >> 2] | 0) + (HEAP32[$x >> 2] | 0) >> 1, (HEAP32[$cy >> 2] | 0) + (HEAP32[$y >> 2] | 0) >> 1, HEAP32[$cx >> 2] | 0, HEAP32[$cy >> 2] | 0);
     }
     HEAP32[$cx >> 2] = HEAP32[$x >> 2];
     HEAP32[$cy >> 2] = HEAP32[$y >> 2];
     HEAP32[$was_off >> 2] = 1;
     break;
    }
    $164 = HEAP32[$vertices >> 2] | 0;
    $165 = HEAP32[$num_vertices >> 2] | 0;
    HEAP32[$num_vertices >> 2] = $165 + 1;
    $arrayidx230 = $164 + ($165 * 14 | 0) | 0;
    $166 = HEAP32[$x >> 2] | 0;
    $167 = HEAP32[$y >> 2] | 0;
    if ($tobool227) _stbtt_setvertex($arrayidx230, 3, $166, $167, HEAP32[$cx >> 2] | 0, HEAP32[$cy >> 2] | 0); else _stbtt_setvertex($arrayidx230, 2, $166, $167, 0, 0);
    HEAP32[$was_off >> 2] = 0;
   } while (0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$num_vertices >> 2] = _stbtt__close_shape($92, HEAP32[$num_vertices >> 2] | 0, HEAP32[$was_off >> 2] | 0, HEAP32[$start_off >> 2] | 0, HEAP32[$sx >> 2] | 0, HEAP32[$sy >> 2] | 0, HEAP32[$scx >> 2] | 0, HEAP32[$scy >> 2] | 0, HEAP32[$cx >> 2] | 0, HEAP32[$cy >> 2] | 0) | 0;
 } else {
  if ((HEAP16[$numberOfContours >> 1] | 0) != -1) {
   if ((HEAP16[$numberOfContours >> 1] | 0) >= 0) break;
   ___assert_fail(47680, 44131, 1801, 44537);
  }
  HEAP32[$more >> 2] = 1;
  HEAP32[$comp >> 2] = (HEAP32[$data >> 2] | 0) + (HEAP32[$g >> 2] | 0) + 10;
  HEAP32[$num_vertices >> 2] = 0;
  HEAP32[$vertices >> 2] = 0;
  while (1) {
   if (!(HEAP32[$more >> 2] | 0)) break L5;
   HEAP32[$comp_num_verts >> 2] = 0;
   HEAP32[$comp_verts >> 2] = 0;
   HEAP32[$tmp >> 2] = 0;
   HEAP32[$mtx >> 2] = HEAP32[248];
   HEAP32[$mtx + 4 >> 2] = HEAP32[249];
   HEAP32[$mtx + 8 >> 2] = HEAP32[250];
   HEAP32[$mtx + 12 >> 2] = HEAP32[251];
   HEAP32[$mtx + 16 >> 2] = HEAP32[252];
   HEAP32[$mtx + 20 >> 2] = HEAP32[253];
   HEAP16[$flags249 >> 1] = _ttSHORT(HEAP32[$comp >> 2] | 0) | 0;
   HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
   HEAP16[$gidx >> 1] = _ttSHORT(HEAP32[$comp >> 2] | 0) | 0;
   HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
   if (!(HEAPU16[$flags249 >> 1] & 2)) {
    label = 55;
    break;
   }
   $190 = HEAP32[$comp >> 2] | 0;
   if (HEAPU16[$flags249 >> 1] & 1 | 0) {
    HEAPF32[$mtx + 16 >> 2] = +((_ttSHORT($190) | 0) << 16 >> 16);
    HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
    HEAPF32[$mtx + 20 >> 2] = +((_ttSHORT(HEAP32[$comp >> 2] | 0) | 0) << 16 >> 16);
    HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
   } else {
    HEAPF32[$mtx + 16 >> 2] = +(HEAP8[$190 >> 0] | 0);
    HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 1;
    HEAPF32[$mtx + 20 >> 2] = +(HEAP8[HEAP32[$comp >> 2] >> 0] | 0);
    HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 1;
   }
   do if (HEAPU16[$flags249 >> 1] & 8 | 0) {
    $div = +((_ttSHORT(HEAP32[$comp >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
    HEAPF32[$mtx + 12 >> 2] = $div;
    HEAPF32[$mtx >> 2] = $div;
    HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
    HEAPF32[$mtx + 8 >> 2] = 0.0;
    HEAPF32[$mtx + 4 >> 2] = 0.0;
   } else {
    if (HEAPU16[$flags249 >> 1] & 64 | 0) {
     HEAPF32[$mtx >> 2] = +((_ttSHORT(HEAP32[$comp >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
     HEAPF32[$mtx + 8 >> 2] = 0.0;
     HEAPF32[$mtx + 4 >> 2] = 0.0;
     HEAPF32[$mtx + 12 >> 2] = +((_ttSHORT(HEAP32[$comp >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
     break;
    }
    if (HEAPU16[$flags249 >> 1] & 128 | 0) {
     HEAPF32[$mtx >> 2] = +((_ttSHORT(HEAP32[$comp >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
     HEAPF32[$mtx + 4 >> 2] = +((_ttSHORT(HEAP32[$comp >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
     HEAPF32[$mtx + 8 >> 2] = +((_ttSHORT(HEAP32[$comp >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
     HEAPF32[$mtx + 12 >> 2] = +((_ttSHORT(HEAP32[$comp >> 2] | 0) | 0) << 16 >> 16 | 0) / 16384.0;
     HEAP32[$comp >> 2] = (HEAP32[$comp >> 2] | 0) + 2;
    }
   } while (0);
   HEAPF32[$m251 >> 2] = +Math_sqrt(+(+HEAPF32[$mtx >> 2] * +HEAPF32[$mtx >> 2] + +HEAPF32[$mtx + 4 >> 2] * +HEAPF32[$mtx + 4 >> 2]));
   HEAPF32[$n252 >> 2] = +Math_sqrt(+(+HEAPF32[$mtx + 8 >> 2] * +HEAPF32[$mtx + 8 >> 2] + +HEAPF32[$mtx + 12 >> 2] * +HEAPF32[$mtx + 12 >> 2]));
   HEAP32[$comp_num_verts >> 2] = _stbtt_GetGlyphShape(HEAP32[$info$addr >> 2] | 0, HEAPU16[$gidx >> 1] | 0, $comp_verts) | 0;
   if ((HEAP32[$comp_num_verts >> 2] | 0) > 0) {
    HEAP32[$i250 >> 2] = 0;
    while (1) {
     if ((HEAP32[$i250 >> 2] | 0) >= (HEAP32[$comp_num_verts >> 2] | 0)) break;
     HEAP32[$v >> 2] = (HEAP32[$comp_verts >> 2] | 0) + ((HEAP32[$i250 >> 2] | 0) * 14 | 0);
     HEAP16[$x374 >> 1] = HEAP16[HEAP32[$v >> 2] >> 1] | 0;
     HEAP16[$y375 >> 1] = HEAP16[(HEAP32[$v >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[HEAP32[$v >> 2] >> 1] = ~~(+HEAPF32[$m251 >> 2] * (+HEAPF32[$mtx >> 2] * +(HEAP16[$x374 >> 1] | 0) + +HEAPF32[$mtx + 8 >> 2] * +(HEAP16[$y375 >> 1] | 0) + +HEAPF32[$mtx + 16 >> 2]));
     HEAP16[(HEAP32[$v >> 2] | 0) + 2 >> 1] = ~~(+HEAPF32[$n252 >> 2] * (+HEAPF32[$mtx + 4 >> 2] * +(HEAP16[$x374 >> 1] | 0) + +HEAPF32[$mtx + 12 >> 2] * +(HEAP16[$y375 >> 1] | 0) + +HEAPF32[$mtx + 20 >> 2]));
     HEAP16[$x374 >> 1] = HEAP16[(HEAP32[$v >> 2] | 0) + 4 >> 1] | 0;
     HEAP16[$y375 >> 1] = HEAP16[(HEAP32[$v >> 2] | 0) + 6 >> 1] | 0;
     HEAP16[(HEAP32[$v >> 2] | 0) + 4 >> 1] = ~~(+HEAPF32[$m251 >> 2] * (+HEAPF32[$mtx >> 2] * +(HEAP16[$x374 >> 1] | 0) + +HEAPF32[$mtx + 8 >> 2] * +(HEAP16[$y375 >> 1] | 0) + +HEAPF32[$mtx + 16 >> 2]));
     HEAP16[(HEAP32[$v >> 2] | 0) + 6 >> 1] = ~~(+HEAPF32[$n252 >> 2] * (+HEAPF32[$mtx + 4 >> 2] * +(HEAP16[$x374 >> 1] | 0) + +HEAPF32[$mtx + 12 >> 2] * +(HEAP16[$y375 >> 1] | 0) + +HEAPF32[$mtx + 20 >> 2]));
     HEAP32[$i250 >> 2] = (HEAP32[$i250 >> 2] | 0) + 1;
    }
    HEAP32[$tmp >> 2] = _fons__tmpalloc(((HEAP32[$num_vertices >> 2] | 0) + (HEAP32[$comp_num_verts >> 2] | 0) | 0) * 14 | 0, HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0) | 0;
    if (!(HEAP32[$tmp >> 2] | 0)) break;
    if ((HEAP32[$num_vertices >> 2] | 0) > 0) _memcpy(HEAP32[$tmp >> 2] | 0, HEAP32[$vertices >> 2] | 0, (HEAP32[$num_vertices >> 2] | 0) * 14 | 0) | 0;
    _memcpy((HEAP32[$tmp >> 2] | 0) + ((HEAP32[$num_vertices >> 2] | 0) * 14 | 0) | 0, HEAP32[$comp_verts >> 2] | 0, (HEAP32[$comp_num_verts >> 2] | 0) * 14 | 0) | 0;
    if (HEAP32[$vertices >> 2] | 0) _fons__tmpfree(HEAP32[$vertices >> 2] | 0, HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0);
    HEAP32[$vertices >> 2] = HEAP32[$tmp >> 2];
    _fons__tmpfree(HEAP32[$comp_verts >> 2] | 0, HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0);
    HEAP32[$num_vertices >> 2] = (HEAP32[$num_vertices >> 2] | 0) + (HEAP32[$comp_num_verts >> 2] | 0);
   }
   HEAP32[$more >> 2] = HEAPU16[$flags249 >> 1] & 32;
  }
  if ((label | 0) == 55) ___assert_fail(47680, 44131, 1748, 44537);
  if (HEAP32[$vertices >> 2] | 0) _fons__tmpfree(HEAP32[$vertices >> 2] | 0, HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0);
  if (HEAP32[$comp_verts >> 2] | 0) _fons__tmpfree(HEAP32[$comp_verts >> 2] | 0, HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0);
  HEAP32[$retval >> 2] = 0;
  $306 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $306 | 0;
 } while (0);
 HEAP32[HEAP32[$pvertices$addr >> 2] >> 2] = HEAP32[$vertices >> 2];
 HEAP32[$retval >> 2] = HEAP32[$num_vertices >> 2];
 $306 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $306 | 0;
}

function __ZN2Dr17TraceImageOutlineERK8DrBitmap($agg$result, $bitmap) {
 $agg$result = $agg$result | 0;
 $bitmap = $bitmap | 0;
 var $13 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $31 = 0, $34 = 0, $37 = 0, $39 = 0, $44 = 0, $45 = 0, $52 = 0, $57 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $81 = 0, $85 = 0, $87 = 0, $88 = 0, $94 = 0, $__begin$sroa$0$0 = 0, $__end_$i$i = 0, $__end_$i$i124 = 0, $__end_$i$i152 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i125 = 0, $__value_$i$i$i$i153 = 0, $add = 0, $add36 = 0, $agg$tmp = 0, $agg$tmp188 = 0, $agg$tmp191 = 0, $agg$tmp205 = 0, $agg$tmp205$byval_copy = 0, $agg$tmp208 = 0, $agg$tmp253 = 0, $agg$tmp270 = 0, $agg$tmp270$byval_copy = 0, $agg$tmp56 = 0, $agg$tmp61 = 0, $agg$tmp79 = 0, $angle_diff$0 = 0.0, $angle_diff$1 = 0.0, $border_pixel_count$0 = 0, $border_pixel_count$1 = 0, $border_pixel_count$3 = 0, $call194 = 0.0, $call248 = 0, $call291 = 0, $can_be_border$0$off0 = 0, $can_be_border$1$off0 = 0, $check_angle$0 = 0.0, $check_angle$1 = 0.0, $cmp18 = 0, $cond116 = 0, $cond124 = 0, $cond136 = 0, $current_point = 0, $first$0$off0 = 0, $has_start_point$0$off0 = 0, $has_start_point$1$off0 = 0, $has_start_point$3$off0 = 0, $height = 0, $i$0 = 0, $i308$0 = 0, $inc64 = 0, $j$0 = 0, $last_point = 0, $next_point = 0, $point = 0, $points = 0, $processed = 0, $sub107 = 0, $sub127 = 0, $sub219 = 0.0, $sub29 = 0, $sub34 = 0, $surround = 0, $tmp = 0, $tmp153 = 0, $tmp161 = 0, $tmp242 = 0, $tmp259 = 0, $tmp285 = 0, $tmp40 = 0, $width = 0, $x$0 = 0, $x137$0 = 0, $y$0 = 0, $y117 = 0, $y142$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $agg$tmp270$byval_copy = sp + 104 | 0;
 $agg$tmp205$byval_copy = sp + 88 | 0;
 $processed = sp + 156 | 0;
 $points = sp + 144 | 0;
 $last_point = sp + 136 | 0;
 $tmp = sp + 232 | 0;
 $agg$tmp = sp + 228 | 0;
 $tmp40 = sp + 224 | 0;
 $agg$tmp56 = sp + 220 | 0;
 $agg$tmp61 = sp + 216 | 0;
 $agg$tmp79 = sp + 212 | 0;
 $surround = sp + 120 | 0;
 $current_point = sp + 48 | 0;
 $tmp153 = sp + 208 | 0;
 $tmp161 = sp + 204 | 0;
 $agg$tmp188 = sp + 72 | 0;
 $agg$tmp191 = sp + 56 | 0;
 $next_point = sp + 8 | 0;
 $point = sp;
 $agg$tmp205 = sp + 32 | 0;
 $agg$tmp208 = sp + 16 | 0;
 $tmp242 = sp + 200 | 0;
 $agg$tmp253 = sp + 196 | 0;
 $tmp259 = sp + 192 | 0;
 $agg$tmp270 = sp + 188 | 0;
 $tmp285 = sp + 184 | 0;
 __ZN8DrBitmapC2ERKS_13Bitmap_Format($processed, $bitmap, 4);
 HEAP32[$points >> 2] = 0;
 $__end_$i$i = $points + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $points + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 $width = $bitmap + 8 | 0;
 if ((HEAP32[$width >> 2] | 0) < 1) label = 3; else {
  $height = $bitmap + 12 | 0;
  if ((HEAP32[$height >> 2] | 0) < 1) label = 3; else {
   __ZN7DrPointC2Ev($last_point);
   $border_pixel_count$0 = 0;
   $has_start_point$0$off0 = 0;
   $x$0 = 0;
   while (1) {
    $2 = HEAP32[$width >> 2] | 0;
    if (($x$0 | 0) >= ($2 | 0)) break;
    $cmp18 = ($x$0 | 0) == 0;
    $sub29 = $x$0 + -1 | 0;
    $add = $x$0 + 1 | 0;
    $border_pixel_count$1 = $border_pixel_count$0;
    $has_start_point$1$off0 = $has_start_point$0$off0;
    $y$0 = 0;
    while (1) {
     if (($y$0 | 0) >= (HEAP32[$height >> 2] | 0)) break;
     __ZNK8DrBitmap8getPixelEii($tmp, $bitmap, $x$0, $y$0);
     __ZN7DrColorC2Ej($agg$tmp270$byval_copy, 0);
     do if (__ZNK7DrColoreqERKS_($tmp, $agg$tmp270$byval_copy) | 0) {
      __ZN7DrColorC2Ej($agg$tmp, 0);
      HEAP8[$agg$tmp270$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
      HEAP8[$agg$tmp270$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
      HEAP8[$agg$tmp270$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
      HEAP8[$agg$tmp270$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
      __ZN8DrBitmap8setPixelEii7DrColor($processed, $x$0, $y$0, $agg$tmp270$byval_copy);
      $border_pixel_count$3 = $border_pixel_count$1;
      $has_start_point$3$off0 = $has_start_point$1$off0;
     } else {
      if (!($cmp18 | ($y$0 | 0) == 0)) if (($x$0 | 0) != ((HEAP32[$width >> 2] | 0) + -1 | 0)) if (($y$0 | 0) != ((HEAP32[$height >> 2] | 0) + -1 | 0)) {
       $sub34 = $y$0 + -1 | 0;
       $add36 = $y$0 + 1 | 0;
       $can_be_border$0$off0 = 0;
       $i$0 = $sub29;
       while (1) {
        if (($i$0 | 0) > ($add | 0)) break;
        $can_be_border$1$off0 = $can_be_border$0$off0;
        $j$0 = $sub34;
        while (1) {
         if (($j$0 | 0) > ($add36 | 0)) break;
         __ZNK8DrBitmap8getPixelEii($tmp40, $bitmap, $i$0, $j$0);
         __ZN7DrColorC2Ej($agg$tmp270$byval_copy, 0);
         $can_be_border$1$off0 = $can_be_border$1$off0 | (__ZNK7DrColoreqERKS_($tmp40, $agg$tmp270$byval_copy) | 0);
         $j$0 = $j$0 + 1 | 0;
        }
        $can_be_border$0$off0 = $can_be_border$1$off0;
        $i$0 = $i$0 + 1 | 0;
       }
       if (!$can_be_border$0$off0) {
        __ZN7DrColorC2Ej($agg$tmp56, 0);
        HEAP8[$agg$tmp270$byval_copy >> 0] = HEAP8[$agg$tmp56 >> 0] | 0;
        HEAP8[$agg$tmp270$byval_copy + 1 >> 0] = HEAP8[$agg$tmp56 + 1 >> 0] | 0;
        HEAP8[$agg$tmp270$byval_copy + 2 >> 0] = HEAP8[$agg$tmp56 + 2 >> 0] | 0;
        HEAP8[$agg$tmp270$byval_copy + 3 >> 0] = HEAP8[$agg$tmp56 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($processed, $x$0, $y$0, $agg$tmp270$byval_copy);
        $border_pixel_count$3 = $border_pixel_count$1;
        $has_start_point$3$off0 = $has_start_point$1$off0;
        break;
       }
      }
      __ZN7DrColorC2Ej($agg$tmp61, 2);
      HEAP8[$agg$tmp270$byval_copy >> 0] = HEAP8[$agg$tmp61 >> 0] | 0;
      HEAP8[$agg$tmp270$byval_copy + 1 >> 0] = HEAP8[$agg$tmp61 + 1 >> 0] | 0;
      HEAP8[$agg$tmp270$byval_copy + 2 >> 0] = HEAP8[$agg$tmp61 + 2 >> 0] | 0;
      HEAP8[$agg$tmp270$byval_copy + 3 >> 0] = HEAP8[$agg$tmp61 + 3 >> 0] | 0;
      __ZN8DrBitmap8setPixelEii7DrColor($processed, $x$0, $y$0, $agg$tmp270$byval_copy);
      $inc64 = $border_pixel_count$1 + 1 | 0;
      if ($has_start_point$1$off0) {
       $border_pixel_count$3 = $inc64;
       $has_start_point$3$off0 = 1;
      } else {
       __ZN7DrPointC2Eii($agg$tmp270$byval_copy, $x$0, $y$0);
       $6 = HEAP32[$__end_$i$i >> 2] | 0;
       if ($6 >>> 0 < (HEAP32[$__value_$i$i$i$i >> 2] | 0) >>> 0) {
        $8 = $agg$tmp270$byval_copy;
        $13 = HEAP32[$8 + 4 >> 2] | 0;
        $14 = $6;
        HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$14 + 4 >> 2] = $13;
        HEAP32[$__end_$i$i >> 2] = (HEAP32[$__end_$i$i >> 2] | 0) + 8;
       } else __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($points, $agg$tmp270$byval_copy);
       __ZN7DrPointC2Eii($agg$tmp270$byval_copy, $sub29, $y$0);
       __ZN7DrPointaSERKS_($last_point, $agg$tmp270$byval_copy) | 0;
       __ZN7DrColorC2Ej($agg$tmp79, 1);
       HEAP8[$agg$tmp270$byval_copy >> 0] = HEAP8[$agg$tmp79 >> 0] | 0;
       HEAP8[$agg$tmp270$byval_copy + 1 >> 0] = HEAP8[$agg$tmp79 + 1 >> 0] | 0;
       HEAP8[$agg$tmp270$byval_copy + 2 >> 0] = HEAP8[$agg$tmp79 + 2 >> 0] | 0;
       HEAP8[$agg$tmp270$byval_copy + 3 >> 0] = HEAP8[$agg$tmp79 + 3 >> 0] | 0;
       __ZN8DrBitmap8setPixelEii7DrColor($processed, $x$0, $y$0, $agg$tmp270$byval_copy);
       $border_pixel_count$3 = $inc64;
       $has_start_point$3$off0 = 1;
      }
     } while (0);
     $border_pixel_count$1 = $border_pixel_count$3;
     $has_start_point$1$off0 = $has_start_point$3$off0;
     $y$0 = $y$0 + 1 | 0;
    }
    $border_pixel_count$0 = $border_pixel_count$1;
    $has_start_point$0$off0 = $has_start_point$1$off0;
    $x$0 = $add;
   }
   if (($border_pixel_count$0 | 0) < 3) {
    HEAP32[$agg$result >> 2] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    HEAP32[$agg$result + 8 >> 2] = 0;
   } else {
    HEAP32[$surround >> 2] = 0;
    $__end_$i$i124 = $surround + 4 | 0;
    HEAP32[$__end_$i$i124 >> 2] = 0;
    $__value_$i$i$i$i125 = $surround + 8 | 0;
    HEAP32[$__value_$i$i$i$i125 >> 2] = 0;
    $y117 = $current_point + 4 | 0;
    $19 = 0;
    $31 = $2;
    while (1) {
     HEAP32[$__end_$i$i124 >> 2] = $19;
     $21 = (HEAP32[$__end_$i$i >> 2] | 0) + -8 | 0;
     $23 = HEAP32[$21 >> 2] | 0;
     $26 = HEAP32[$21 + 4 >> 2] | 0;
     $27 = $current_point;
     HEAP32[$27 >> 2] = $23;
     HEAP32[$27 + 4 >> 2] = $26;
     $sub107 = $31 + -1 | 0;
     $cond116 = ($sub107 | 0) > ($23 | 0) ? $23 + 1 | 0 : $sub107;
     $cond124 = ($26 | 0) > 0 ? $26 + -1 | 0 : 0;
     $sub127 = (HEAP32[$height >> 2] | 0) + -1 | 0;
     $cond136 = ($sub127 | 0) > ($26 | 0) ? $26 + 1 | 0 : $sub127;
     $x137$0 = ($23 | 0) > 0 ? $23 + -1 | 0 : 0;
     while (1) {
      if (($x137$0 | 0) > ($cond116 | 0)) break;
      $y142$0 = $cond124;
      while (1) {
       if (($y142$0 | 0) > ($cond136 | 0)) break;
       do if (!(($x137$0 | 0) == (HEAP32[$current_point >> 2] | 0) ? ($y142$0 | 0) == (HEAP32[$y117 >> 2] | 0) : 0)) {
        __ZNK8DrBitmap8getPixelEii($tmp153, $processed, $x137$0, $y142$0);
        __ZN7DrColorC2Ej($agg$tmp270$byval_copy, 4);
        if (!(__ZNK7DrColorneERKS_($tmp153, $agg$tmp270$byval_copy) | 0)) break;
        __ZNK8DrBitmap8getPixelEii($tmp161, $processed, $x137$0, $y142$0);
        __ZN7DrColorC2Ej($agg$tmp205$byval_copy, 0);
        if (__ZNK7DrColorneERKS_($tmp161, $agg$tmp205$byval_copy) | 0) {
         __ZN7DrPointC2Eii($agg$tmp270$byval_copy, $x137$0, $y142$0);
         $37 = HEAP32[$__end_$i$i124 >> 2] | 0;
         if ($37 >>> 0 < (HEAP32[$__value_$i$i$i$i125 >> 2] | 0) >>> 0) {
          $39 = $agg$tmp270$byval_copy;
          $44 = HEAP32[$39 + 4 >> 2] | 0;
          $45 = $37;
          HEAP32[$45 >> 2] = HEAP32[$39 >> 2];
          HEAP32[$45 + 4 >> 2] = $44;
          HEAP32[$__end_$i$i124 >> 2] = (HEAP32[$__end_$i$i124 >> 2] | 0) + 8;
         } else __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($surround, $agg$tmp270$byval_copy);
        }
       } while (0);
       $y142$0 = $y142$0 + 1 | 0;
      }
      $x137$0 = $x137$0 + 1 | 0;
     }
     __ZN7DrPoint8toPointFEv($agg$tmp188, $current_point);
     __ZN7DrPoint8toPointFEv($agg$tmp191, $last_point);
     HEAP32[$agg$tmp205$byval_copy >> 2] = HEAP32[$agg$tmp188 >> 2];
     HEAP32[$agg$tmp205$byval_copy + 4 >> 2] = HEAP32[$agg$tmp188 + 4 >> 2];
     HEAP32[$agg$tmp205$byval_copy + 8 >> 2] = HEAP32[$agg$tmp188 + 8 >> 2];
     HEAP32[$agg$tmp205$byval_copy + 12 >> 2] = HEAP32[$agg$tmp188 + 12 >> 2];
     HEAP32[$agg$tmp270$byval_copy >> 2] = HEAP32[$agg$tmp191 >> 2];
     HEAP32[$agg$tmp270$byval_copy + 4 >> 2] = HEAP32[$agg$tmp191 + 4 >> 2];
     HEAP32[$agg$tmp270$byval_copy + 8 >> 2] = HEAP32[$agg$tmp191 + 8 >> 2];
     HEAP32[$agg$tmp270$byval_copy + 12 >> 2] = HEAP32[$agg$tmp191 + 12 >> 2];
     $call194 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($agg$tmp205$byval_copy, $agg$tmp270$byval_copy);
     __ZN7DrPointC2Ev($next_point);
     $34 = HEAP32[$__end_$i$i124 >> 2] | 0;
     $__begin$sroa$0$0 = HEAP32[$surround >> 2] | 0;
     $angle_diff$0 = 0.0;
     $first$0$off0 = 1;
     while (1) {
      if (($__begin$sroa$0$0 | 0) == ($34 | 0)) break;
      $52 = $__begin$sroa$0$0;
      $57 = HEAP32[$52 + 4 >> 2] | 0;
      $58 = $point;
      HEAP32[$58 >> 2] = HEAP32[$52 >> 2];
      HEAP32[$58 + 4 >> 2] = $57;
      __ZN7DrPoint8toPointFEv($agg$tmp205, $current_point);
      __ZN7DrPoint8toPointFEv($agg$tmp208, $point);
      HEAP32[$agg$tmp205$byval_copy >> 2] = HEAP32[$agg$tmp205 >> 2];
      HEAP32[$agg$tmp205$byval_copy + 4 >> 2] = HEAP32[$agg$tmp205 + 4 >> 2];
      HEAP32[$agg$tmp205$byval_copy + 8 >> 2] = HEAP32[$agg$tmp205 + 8 >> 2];
      HEAP32[$agg$tmp205$byval_copy + 12 >> 2] = HEAP32[$agg$tmp205 + 12 >> 2];
      HEAP32[$agg$tmp270$byval_copy >> 2] = HEAP32[$agg$tmp208 >> 2];
      HEAP32[$agg$tmp270$byval_copy + 4 >> 2] = HEAP32[$agg$tmp208 + 4 >> 2];
      HEAP32[$agg$tmp270$byval_copy + 8 >> 2] = HEAP32[$agg$tmp208 + 8 >> 2];
      HEAP32[$agg$tmp270$byval_copy + 12 >> 2] = HEAP32[$agg$tmp208 + 12 >> 2];
      $check_angle$0 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($agg$tmp205$byval_copy, $agg$tmp270$byval_copy);
      while (1) {
       if (!($check_angle$0 > 0.0)) break;
       $check_angle$0 = $check_angle$0 + -360.0;
      }
      $check_angle$1 = $check_angle$0;
      while (1) {
       if (!($check_angle$1 <= $call194)) break;
       $check_angle$1 = $check_angle$1 + 360.0;
      }
      $sub219 = $check_angle$1 - $call194;
      if ($first$0$off0 | $sub219 < $angle_diff$0) {
       __ZN7DrPointaSERKS_($next_point, $point) | 0;
       $angle_diff$1 = $sub219;
      } else $angle_diff$1 = $angle_diff$0;
      $__begin$sroa$0$0 = $__begin$sroa$0$0 + 8 | 0;
      $angle_diff$0 = $angle_diff$1;
      $first$0$off0 = 0;
     }
     do if ((HEAP32[$__end_$i$i124 >> 2] | 0) != (HEAP32[$surround >> 2] | 0)) {
      __ZNK8DrBitmap8getPixelEii($tmp242, $processed, HEAP32[$current_point >> 2] | 0, HEAP32[$y117 >> 2] | 0);
      __ZN7DrColorC2Ej($agg$tmp270$byval_copy, 2);
      $call248 = __ZNK7DrColoreqERKS_($tmp242, $agg$tmp270$byval_copy) | 0;
      $64 = HEAP32[$current_point >> 2] | 0;
      $65 = HEAP32[$y117 >> 2] | 0;
      if ($call248) {
       __ZN7DrColorC2Ej($agg$tmp253, 3);
       HEAP8[$agg$tmp270$byval_copy >> 0] = HEAP8[$agg$tmp253 >> 0] | 0;
       HEAP8[$agg$tmp270$byval_copy + 1 >> 0] = HEAP8[$agg$tmp253 + 1 >> 0] | 0;
       HEAP8[$agg$tmp270$byval_copy + 2 >> 0] = HEAP8[$agg$tmp253 + 2 >> 0] | 0;
       HEAP8[$agg$tmp270$byval_copy + 3 >> 0] = HEAP8[$agg$tmp253 + 3 >> 0] | 0;
       __ZN8DrBitmap8setPixelEii7DrColor($processed, $64, $65, $agg$tmp270$byval_copy);
      } else {
       __ZNK8DrBitmap8getPixelEii($tmp259, $processed, $64, $65);
       __ZN7DrColorC2Ej($agg$tmp270$byval_copy, 3);
       if (__ZNK7DrColoreqERKS_($tmp259, $agg$tmp270$byval_copy) | 0) {
        $66 = HEAP32[$current_point >> 2] | 0;
        $67 = HEAP32[$y117 >> 2] | 0;
        __ZN7DrColorC2Ej($agg$tmp270, 4);
        HEAP8[$agg$tmp270$byval_copy >> 0] = HEAP8[$agg$tmp270 >> 0] | 0;
        HEAP8[$agg$tmp270$byval_copy + 1 >> 0] = HEAP8[$agg$tmp270 + 1 >> 0] | 0;
        HEAP8[$agg$tmp270$byval_copy + 2 >> 0] = HEAP8[$agg$tmp270 + 2 >> 0] | 0;
        HEAP8[$agg$tmp270$byval_copy + 3 >> 0] = HEAP8[$agg$tmp270 + 3 >> 0] | 0;
        __ZN8DrBitmap8setPixelEii7DrColor($processed, $66, $67, $agg$tmp270$byval_copy);
       }
      }
      __ZN7DrPointaSERKS_($last_point, $current_point) | 0;
      $68 = HEAP32[$__end_$i$i >> 2] | 0;
      if (($68 | 0) == (HEAP32[$__value_$i$i$i$i >> 2] | 0)) {
       __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($points, $next_point);
       break;
      } else {
       $70 = $next_point;
       $75 = HEAP32[$70 + 4 >> 2] | 0;
       $76 = $68;
       HEAP32[$76 >> 2] = HEAP32[$70 >> 2];
       HEAP32[$76 + 4 >> 2] = $75;
       HEAP32[$__end_$i$i >> 2] = (HEAP32[$__end_$i$i >> 2] | 0) + 8;
       break;
      }
     } while (0);
     $81 = HEAP32[$__end_$i$i >> 2] | 0;
     __ZNK8DrBitmap8getPixelEii($tmp285, $processed, HEAP32[$81 + -8 >> 2] | 0, HEAP32[$81 + -4 >> 2] | 0);
     __ZN7DrColorC2Ej($agg$tmp270$byval_copy, 1);
     $call291 = __ZNK7DrColoreqERKS_($tmp285, $agg$tmp270$byval_copy) | 0;
     $85 = HEAP32[$surround >> 2] | 0;
     if ($call291 | (HEAP32[$__end_$i$i124 >> 2] | 0) == ($85 | 0)) break;
     $19 = $85;
     $31 = HEAP32[$width >> 2] | 0;
    }
    HEAP32[$agg$tmp270$byval_copy >> 2] = 0;
    $__end_$i$i152 = $agg$tmp270$byval_copy + 4 | 0;
    HEAP32[$__end_$i$i152 >> 2] = 0;
    $__value_$i$i$i$i153 = $agg$tmp270$byval_copy + 8 | 0;
    HEAP32[$__value_$i$i$i$i153 >> 2] = 0;
    $i308$0 = 0;
    while (1) {
     $87 = HEAP32[$points >> 2] | 0;
     $88 = $87;
     if ($i308$0 >>> 0 >= (HEAP32[$__end_$i$i >> 2] | 0) - $87 >> 3 >>> 0) break;
     __ZN8DrPointFC2Edd($agg$tmp205$byval_copy, +(HEAP32[$88 + ($i308$0 << 3) >> 2] | 0), +(HEAP32[$88 + ($i308$0 << 3) + 4 >> 2] | 0));
     $94 = HEAP32[$__end_$i$i152 >> 2] | 0;
     if ($94 >>> 0 < (HEAP32[$__value_$i$i$i$i153 >> 2] | 0) >>> 0) {
      HEAP32[$94 >> 2] = HEAP32[$agg$tmp205$byval_copy >> 2];
      HEAP32[$94 + 4 >> 2] = HEAP32[$agg$tmp205$byval_copy + 4 >> 2];
      HEAP32[$94 + 8 >> 2] = HEAP32[$agg$tmp205$byval_copy + 8 >> 2];
      HEAP32[$94 + 12 >> 2] = HEAP32[$agg$tmp205$byval_copy + 12 >> 2];
      HEAP32[$__end_$i$i152 >> 2] = $94 + 16;
     } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($agg$tmp270$byval_copy, $agg$tmp205$byval_copy);
     $i308$0 = $i308$0 + 1 | 0;
    }
    HEAP32[$agg$result >> 2] = HEAP32[$agg$tmp270$byval_copy >> 2];
    HEAP32[$agg$result + 4 >> 2] = HEAP32[$__end_$i$i152 >> 2];
    HEAP32[$agg$result + 8 >> 2] = HEAP32[$__value_$i$i$i$i153 >> 2];
    HEAP32[$__value_$i$i$i$i153 >> 2] = 0;
    HEAP32[$__end_$i$i152 >> 2] = 0;
    HEAP32[$agg$tmp270$byval_copy >> 2] = 0;
    __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($agg$tmp270$byval_copy);
    __ZNSt3__213__vector_baseI7DrPointNS_9allocatorIS1_EEED2Ev($surround);
   }
  }
 }
 if ((label | 0) == 3) {
  HEAP32[$agg$result >> 2] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
  HEAP32[$agg$result + 8 >> 2] = 0;
 }
 __ZNSt3__213__vector_baseI7DrPointNS_9allocatorIS1_EEED2Ev($points);
 __ZN8DrBitmapD2Ev($processed);
 STACKTOP = sp;
 return;
}

function _load_jpeg_image($z, $out_x, $out_y, $comp, $req_comp) {
 $z = $z | 0;
 $out_x = $out_x | 0;
 $out_y = $out_y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 var $131 = 0, $135 = 0, $22 = 0, $269 = 0, $292 = 0, $381 = 0, $382 = 0, $383 = 0, $401 = 0, $42 = 0, $70 = 0, $b = 0, $call140 = 0, $call224 = 0, $call228 = 0, $call232 = 0, $call262 = 0, $call268 = 0, $call274 = 0, $call32 = 0, $call327 = 0, $call347 = 0, $call387 = 0, $call417 = 0, $cmp241 = 0, $cmp309 = 0, $cmp427 = 0, $comp$addr = 0, $cond11 = 0, $cond130 = 0, $cond137 = 0, $coutput = 0, $decode_n = 0, $g = 0, $i = 0, $inc143 = 0, $inc152 = 0, $is_rgb = 0, $j = 0, $k = 0, $line1160 = 0, $m = 0, $m255 = 0, $m371 = 0, $mul = 0, $n = 0, $out = 0, $out_x$addr = 0, $out_y$addr = 0, $output = 0, $r = 0, $r114 = 0, $r374 = 0, $req_comp$addr = 0, $res_comp = 0, $retval = 0, $tobool = 0, $tobool100 = 0, $tobool40 = 0, $y170 = 0, $y425 = 0, $y_bot = 0, $ypos151 = 0, $ystep142 = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $retval = sp + 216 | 0;
 $z$addr = sp + 212 | 0;
 $out_x$addr = sp + 208 | 0;
 $out_y$addr = sp + 204 | 0;
 $comp$addr = sp + 200 | 0;
 $req_comp$addr = sp + 196 | 0;
 $n = sp + 192 | 0;
 $decode_n = sp + 188 | 0;
 $is_rgb = sp + 184 | 0;
 $k = sp + 180 | 0;
 $i = sp + 176 | 0;
 $j = sp + 172 | 0;
 $output = sp + 168 | 0;
 $coutput = sp + 128 | 0;
 $res_comp = sp;
 $r = sp + 164 | 0;
 $out = sp + 160 | 0;
 $r114 = sp + 156 | 0;
 $y_bot = sp + 152 | 0;
 $y170 = sp + 148 | 0;
 $m = sp + 225 | 0;
 $m255 = sp + 224 | 0;
 $m371 = sp + 223 | 0;
 $r374 = sp + 222 | 0;
 $g = sp + 221 | 0;
 $b = sp + 220 | 0;
 $y425 = sp + 144 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$out_x$addr >> 2] = $out_x;
 HEAP32[$out_y$addr >> 2] = $out_y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] = 0;
 if ((HEAP32[$req_comp$addr >> 2] | 0) < 0 | (HEAP32[$req_comp$addr >> 2] | 0) > 4) {
  $tobool = (_stbi__err(48224) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $401 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $401 | 0;
 }
 if (!(_stbi__decode_jpeg_image(HEAP32[$z$addr >> 2] | 0) | 0)) {
  _stbi__cleanup_jpeg(HEAP32[$z$addr >> 2] | 0);
  HEAP32[$retval >> 2] = 0;
  $401 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $401 | 0;
 }
 if (HEAP32[$req_comp$addr >> 2] | 0) $cond11 = HEAP32[$req_comp$addr >> 2] | 0; else $cond11 = (HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0) >= 3 ? 3 : 1;
 HEAP32[$n >> 2] = $cond11;
 if ((HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0) == 3) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18412 >> 2] | 0) == 3) $22 = 1; else if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18408 >> 2] | 0)) $22 = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18404 >> 2] | 0) != 0 ^ 1; else $22 = 0; else $22 = 0;
 HEAP32[$is_rgb >> 2] = $22 & 1;
 if (((HEAP32[$n >> 2] | 0) < 3 ? (HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0) == 3 : 0) ^ 1 | (HEAP32[$is_rgb >> 2] | 0) != 0) HEAP32[$decode_n >> 2] = HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2]; else HEAP32[$decode_n >> 2] = 1;
 HEAP32[$coutput >> 2] = 0;
 HEAP32[$coutput + 4 >> 2] = 0;
 HEAP32[$coutput + 8 >> 2] = 0;
 HEAP32[$coutput + 12 >> 2] = 0;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$decode_n >> 2] | 0)) break;
  HEAP32[$r >> 2] = $res_comp + (HEAP32[$k >> 2] << 5);
  $call32 = _stbi__malloc((HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) + 3 | 0) | 0;
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$k >> 2] | 0) * 72 | 0) + 56 >> 2] = $call32;
  $42 = HEAP32[$z$addr >> 2] | 0;
  if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$k >> 2] | 0) * 72 | 0) + 56 >> 2] | 0)) {
   label = 18;
   break;
  }
  HEAP32[(HEAP32[$r >> 2] | 0) + 12 >> 2] = (HEAP32[$42 + 18052 >> 2] | 0) / (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$k >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$r >> 2] | 0) + 16 >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18056 >> 2] | 0) / (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$k >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$r >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[$r >> 2] | 0) + 16 >> 2] >> 1;
  HEAP32[(HEAP32[$r >> 2] | 0) + 20 >> 2] = (((HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$r >> 2] | 0) + 12 >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[(HEAP32[$r >> 2] | 0) + 12 >> 2] | 0) >>> 0) | 0;
  HEAP32[(HEAP32[$r >> 2] | 0) + 28 >> 2] = 0;
  $70 = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$k >> 2] | 0) * 72 | 0) + 44 >> 2] | 0;
  HEAP32[(HEAP32[$r >> 2] | 0) + 8 >> 2] = $70;
  HEAP32[(HEAP32[$r >> 2] | 0) + 4 >> 2] = $70;
  if ((HEAP32[(HEAP32[$r >> 2] | 0) + 12 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[$r >> 2] | 0) + 16 >> 2] | 0) == 1) HEAP32[HEAP32[$r >> 2] >> 2] = 2; else label = 22; else label = 22;
  do if ((label | 0) == 22) {
   label = 0;
   if ((HEAP32[(HEAP32[$r >> 2] | 0) + 12 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[$r >> 2] | 0) + 16 >> 2] | 0) == 2) {
    HEAP32[HEAP32[$r >> 2] >> 2] = 3;
    break;
   }
   if ((HEAP32[(HEAP32[$r >> 2] | 0) + 12 >> 2] | 0) == 2) if ((HEAP32[(HEAP32[$r >> 2] | 0) + 16 >> 2] | 0) == 1) {
    HEAP32[HEAP32[$r >> 2] >> 2] = 4;
    break;
   }
   if ((HEAP32[(HEAP32[$r >> 2] | 0) + 12 >> 2] | 0) == 2) if ((HEAP32[(HEAP32[$r >> 2] | 0) + 16 >> 2] | 0) == 2) {
    HEAP32[HEAP32[$r >> 2] >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18452 >> 2];
    break;
   }
   HEAP32[HEAP32[$r >> 2] >> 2] = 5;
  } while (0);
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 if ((label | 0) == 18) {
  _stbi__cleanup_jpeg($42);
  $tobool40 = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool40 ? 0 : 0;
  $401 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $401 | 0;
 }
 HEAP32[$output >> 2] = _stbi__malloc_mad3(HEAP32[$n >> 2] | 0, HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 4 >> 2] | 0, 1) | 0;
 if (!(HEAP32[$output >> 2] | 0)) {
  _stbi__cleanup_jpeg(HEAP32[$z$addr >> 2] | 0);
  $tobool100 = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool100 ? 0 : 0;
  $401 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $401 | 0;
 }
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
  $mul = Math_imul(HEAP32[$n >> 2] | 0, HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) | 0;
  HEAP32[$out >> 2] = (HEAP32[$output >> 2] | 0) + (Math_imul($mul, HEAP32[$j >> 2] | 0) | 0);
  HEAP32[$k >> 2] = 0;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$decode_n >> 2] | 0)) break;
   HEAP32[$r114 >> 2] = $res_comp + (HEAP32[$k >> 2] << 5);
   HEAP32[$y_bot >> 2] = (HEAP32[(HEAP32[$r114 >> 2] | 0) + 24 >> 2] | 0) >= (HEAP32[(HEAP32[$r114 >> 2] | 0) + 16 >> 2] >> 1 | 0) & 1;
   $131 = HEAP32[$r114 >> 2] | 0;
   if (HEAP32[$y_bot >> 2] | 0) $cond130 = HEAP32[$131 + 8 >> 2] | 0; else $cond130 = HEAP32[$131 + 4 >> 2] | 0;
   $135 = HEAP32[$r114 >> 2] | 0;
   if (HEAP32[$y_bot >> 2] | 0) $cond137 = HEAP32[$135 + 4 >> 2] | 0; else $cond137 = HEAP32[$135 + 8 >> 2] | 0;
   $call140 = FUNCTION_TABLE_iiiiii[HEAP32[HEAP32[$r114 >> 2] >> 2] & 7](HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$k >> 2] | 0) * 72 | 0) + 56 >> 2] | 0, $cond130, $cond137, HEAP32[(HEAP32[$r114 >> 2] | 0) + 20 >> 2] | 0, HEAP32[(HEAP32[$r114 >> 2] | 0) + 12 >> 2] | 0) | 0;
   HEAP32[$coutput + (HEAP32[$k >> 2] << 2) >> 2] = $call140;
   $ystep142 = (HEAP32[$r114 >> 2] | 0) + 24 | 0;
   $inc143 = (HEAP32[$ystep142 >> 2] | 0) + 1 | 0;
   HEAP32[$ystep142 >> 2] = $inc143;
   if (($inc143 | 0) >= (HEAP32[(HEAP32[$r114 >> 2] | 0) + 16 >> 2] | 0)) {
    HEAP32[(HEAP32[$r114 >> 2] | 0) + 24 >> 2] = 0;
    HEAP32[(HEAP32[$r114 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$r114 >> 2] | 0) + 8 >> 2];
    $ypos151 = (HEAP32[$r114 >> 2] | 0) + 28 | 0;
    $inc152 = (HEAP32[$ypos151 >> 2] | 0) + 1 | 0;
    HEAP32[$ypos151 >> 2] = $inc152;
    if (($inc152 | 0) < (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$k >> 2] | 0) * 72 | 0) + 32 >> 2] | 0)) {
     $line1160 = (HEAP32[$r114 >> 2] | 0) + 8 | 0;
     HEAP32[$line1160 >> 2] = (HEAP32[$line1160 >> 2] | 0) + (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$k >> 2] | 0) * 72 | 0) + 36 >> 2] | 0);
    }
   }
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  L71 : do if ((HEAP32[$n >> 2] | 0) >= 3) {
   HEAP32[$y170 >> 2] = HEAP32[$coutput >> 2];
   if ((HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0) == 3) {
    if (!(HEAP32[$is_rgb >> 2] | 0)) {
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18448 >> 2] & 7](HEAP32[$out >> 2] | 0, HEAP32[$y170 >> 2] | 0, HEAP32[$coutput + 4 >> 2] | 0, HEAP32[$coutput + 8 >> 2] | 0, HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0, HEAP32[$n >> 2] | 0);
     break;
    }
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     HEAP8[HEAP32[$out >> 2] >> 0] = HEAP8[(HEAP32[$y170 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$coutput + 4 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$coutput + 8 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$out >> 2] = (HEAP32[$out >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
   if ((HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0) != 4) {
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     $269 = HEAP8[(HEAP32[$y170 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + 2 >> 0] = $269;
     HEAP8[(HEAP32[$out >> 2] | 0) + 1 >> 0] = $269;
     HEAP8[HEAP32[$out >> 2] >> 0] = $269;
     HEAP8[(HEAP32[$out >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$out >> 2] = (HEAP32[$out >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
   if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18408 >> 2] | 0)) {
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     HEAP8[$m >> 0] = HEAP8[(HEAP32[$coutput + 12 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
     $call224 = _stbi__blinn_8x8(HEAP8[(HEAP32[$coutput >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAP8[$m >> 0] | 0) | 0;
     HEAP8[HEAP32[$out >> 2] >> 0] = $call224;
     $call228 = _stbi__blinn_8x8(HEAP8[(HEAP32[$coutput + 4 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAP8[$m >> 0] | 0) | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + 1 >> 0] = $call228;
     $call232 = _stbi__blinn_8x8(HEAP8[(HEAP32[$coutput + 8 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAP8[$m >> 0] | 0) | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + 2 >> 0] = $call232;
     HEAP8[(HEAP32[$out >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$out >> 2] = (HEAP32[$out >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
   $cmp241 = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18408 >> 2] | 0) == 2;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18448 >> 2] & 7](HEAP32[$out >> 2] | 0, HEAP32[$y170 >> 2] | 0, HEAP32[$coutput + 4 >> 2] | 0, HEAP32[$coutput + 8 >> 2] | 0, HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0, HEAP32[$n >> 2] | 0);
   if ($cmp241) {
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     HEAP8[$m255 >> 0] = HEAP8[(HEAP32[$coutput + 12 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
     $call262 = _stbi__blinn_8x8(255 - (HEAPU8[HEAP32[$out >> 2] >> 0] | 0) & 255, HEAP8[$m255 >> 0] | 0) | 0;
     HEAP8[HEAP32[$out >> 2] >> 0] = $call262;
     $call268 = _stbi__blinn_8x8(255 - (HEAPU8[(HEAP32[$out >> 2] | 0) + 1 >> 0] | 0) & 255, HEAP8[$m255 >> 0] | 0) | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + 1 >> 0] = $call268;
     $call274 = _stbi__blinn_8x8(255 - (HEAPU8[(HEAP32[$out >> 2] | 0) + 2 >> 0] | 0) & 255, HEAP8[$m255 >> 0] | 0) | 0;
     HEAP8[(HEAP32[$out >> 2] | 0) + 2 >> 0] = $call274;
     HEAP32[$out >> 2] = (HEAP32[$out >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
  } else {
   if (HEAP32[$is_rgb >> 2] | 0) {
    $cmp309 = (HEAP32[$n >> 2] | 0) == 1;
    HEAP32[$i >> 2] = 0;
    if ($cmp309) while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     $call327 = _stbi__compute_y(HEAPU8[(HEAP32[$coutput >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$coutput + 4 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$coutput + 8 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) | 0;
     $292 = HEAP32[$out >> 2] | 0;
     HEAP32[$out >> 2] = $292 + 1;
     HEAP8[$292 >> 0] = $call327;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    } else while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     $call347 = _stbi__compute_y(HEAPU8[(HEAP32[$coutput >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$coutput + 4 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAPU8[(HEAP32[$coutput + 8 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) | 0;
     HEAP8[HEAP32[$out >> 2] >> 0] = $call347;
     HEAP8[(HEAP32[$out >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
     HEAP32[$out >> 2] = (HEAP32[$out >> 2] | 0) + 2;
    }
   }
   if ((HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0) == 4) if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18408 >> 2] | 0)) {
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     HEAP8[$m371 >> 0] = HEAP8[(HEAP32[$coutput + 12 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
     HEAP8[$r374 >> 0] = _stbi__blinn_8x8(HEAP8[(HEAP32[$coutput >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAP8[$m371 >> 0] | 0) | 0;
     HEAP8[$g >> 0] = _stbi__blinn_8x8(HEAP8[(HEAP32[$coutput + 4 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAP8[$m371 >> 0] | 0) | 0;
     HEAP8[$b >> 0] = _stbi__blinn_8x8(HEAP8[(HEAP32[$coutput + 8 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0, HEAP8[$m371 >> 0] | 0) | 0;
     $call387 = _stbi__compute_y(HEAPU8[$r374 >> 0] | 0, HEAPU8[$g >> 0] | 0, HEAPU8[$b >> 0] | 0) | 0;
     HEAP8[HEAP32[$out >> 2] >> 0] = $call387;
     HEAP8[(HEAP32[$out >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$out >> 2] = (HEAP32[$out >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
   if ((HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0) == 4) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18408 >> 2] | 0) == 2) {
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
     $call417 = _stbi__blinn_8x8(255 - (HEAPU8[(HEAP32[$coutput >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) & 255, HEAP8[(HEAP32[$coutput + 12 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) | 0;
     HEAP8[HEAP32[$out >> 2] >> 0] = $call417;
     HEAP8[(HEAP32[$out >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$out >> 2] = (HEAP32[$out >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
   HEAP32[$y425 >> 2] = HEAP32[$coutput >> 2];
   $cmp427 = (HEAP32[$n >> 2] | 0) == 1;
   HEAP32[$i >> 2] = 0;
   if ($cmp427) while (1) {
    if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
    HEAP8[(HEAP32[$out >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = HEAP8[(HEAP32[$y425 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   } else while (1) {
    if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2] | 0) >>> 0) break L71;
    $381 = HEAP8[(HEAP32[$y425 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
    $382 = HEAP32[$out >> 2] | 0;
    HEAP32[$out >> 2] = $382 + 1;
    HEAP8[$382 >> 0] = $381;
    $383 = HEAP32[$out >> 2] | 0;
    HEAP32[$out >> 2] = $383 + 1;
    HEAP8[$383 >> 0] = -1;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 _stbi__cleanup_jpeg(HEAP32[$z$addr >> 2] | 0);
 HEAP32[HEAP32[$out_x$addr >> 2] >> 2] = HEAP32[HEAP32[HEAP32[$z$addr >> 2] >> 2] >> 2];
 HEAP32[HEAP32[$out_y$addr >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 4 >> 2];
 if (HEAP32[$comp$addr >> 2] | 0) HEAP32[HEAP32[$comp$addr >> 2] >> 2] = (HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0) >= 3 ? 3 : 1;
 HEAP32[$retval >> 2] = HEAP32[$output >> 2];
 $401 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $401 | 0;
}

function __ZN7DrImage13outlinePointsEf($this, $lod) {
 $this = $this | 0;
 $lod = +$lod;
 var $0 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $31 = 0, $34 = 0, $37 = 0, $40 = 0, $43 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $__begin$sroa$0$0 = 0, $__begin179$sroa$0$0 = 0, $__end_$i$i = 0, $__end_$i$i$i = 0, $__end_$i$i$i58 = 0, $__end_$i$i171 = 0, $__end_$i$i174 = 0, $__end_$i$i177 = 0, $__end_$i143 = 0, $__end_$i69 = 0, $__soon_to_be_end$0$i$i$i = 0, $__soon_to_be_end$0$i$i$i59 = 0, $__value_$i$i$i$i100 = 0, $__value_$i$i$i$i148 = 0, $__value_$i$i$i$i172 = 0, $__value_$i$i$i$i175 = 0, $__value_$i$i$i$i178 = 0, $__value_$i$i$i$i180 = 0, $add = 0.0, $add$ptr$i = 0, $add$ptr$i125 = 0, $add20 = 0.0, $add41 = 0.0, $agg$tmp = 0, $agg$tmp$i110 = 0, $agg$tmp$i98$byval_copy = 0, $agg$tmp155 = 0, $arrayidx$i = 0, $arrayidx$i146 = 0, $bitmaps = 0, $call = 0, $call195 = 0, $call207 = 0, $conv201 = 0.0, $conv213 = 0.0, $conv34 = 0.0, $conv40 = 0.0, $conv61 = 0.0, $height17 = 0, $hole_images = 0, $hole_list = 0, $hole_number$0 = 0, $hole_rects = 0, $image_number$0 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i62 = 0, $m_hole_list = 0, $m_poly_list = 0, $one_hole = 0, $one_poly = 0, $rects = 0, $ref$tmp = 0, $ref$tmp232 = 0, $sub$ptr$div$i = 0, $width15 = 0, $y = 0, $y100 = 0, $y120 = 0, $y140 = 0, $y214 = 0, $y82 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $agg$tmp$i98$byval_copy = sp;
 $agg$tmp$i110 = sp + 160 | 0;
 $bitmaps = sp + 128 | 0;
 $rects = sp + 116 | 0;
 $one_poly = sp + 104 | 0;
 $ref$tmp = sp + 76 | 0;
 $agg$tmp = sp + 168 | 0;
 $agg$tmp155 = sp + 144 | 0;
 $hole_images = sp + 64 | 0;
 $hole_rects = sp + 52 | 0;
 $hole_list = sp + 40 | 0;
 $one_hole = sp + 28 | 0;
 $ref$tmp232 = sp + 16 | 0;
 $m_poly_list = $this + 40 | 0;
 $0 = HEAP32[$m_poly_list >> 2] | 0;
 $__end_$i$i$i = $this + 44 | 0;
 $__soon_to_be_end$0$i$i$i = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($__soon_to_be_end$0$i$i$i | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $__soon_to_be_end$0$i$i$i + -12 | 0;
  __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($incdec$ptr$i$i$i);
  $__soon_to_be_end$0$i$i$i = $incdec$ptr$i$i$i;
 }
 HEAP32[$__end_$i$i$i >> 2] = $0;
 $m_hole_list = $this + 52 | 0;
 $2 = HEAP32[$m_hole_list >> 2] | 0;
 $__end_$i$i$i58 = $this + 56 | 0;
 $__soon_to_be_end$0$i$i$i59 = HEAP32[$__end_$i$i$i58 >> 2] | 0;
 while (1) {
  if (($__soon_to_be_end$0$i$i$i59 | 0) == ($2 | 0)) break;
  $incdec$ptr$i$i$i62 = $__soon_to_be_end$0$i$i$i59 + -12 | 0;
  __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($incdec$ptr$i$i$i62);
  $__soon_to_be_end$0$i$i$i59 = $incdec$ptr$i$i$i62;
 }
 HEAP32[$__end_$i$i$i58 >> 2] = $2;
 HEAP32[$bitmaps >> 2] = 0;
 $__end_$i$i = $bitmaps + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 HEAP32[$bitmaps + 8 >> 2] = 0;
 HEAP32[$rects >> 2] = 0;
 HEAP32[$rects + 4 >> 2] = 0;
 HEAP32[$rects + 8 >> 2] = 0;
 $call = __ZN2Dr19FindObjectsInBitmapERK8DrBitmapRNSt3__26vectorIS0_NS3_9allocatorIS0_EEEERNS4_I6DrRectNS5_IS9_EEEEdb($this + 12 | 0, $bitmaps, $rects, .875, 1) | 0;
 $sub$ptr$div$i = ((HEAP32[$__end_$i$i >> 2] | 0) - (HEAP32[$bitmaps >> 2] | 0) | 0) / 28 | 0;
 if ($call) __ZN7DrImage12setSimpleBoxEv($this); else {
  $width15 = $this + 20 | 0;
  $height17 = $this + 24 | 0;
  $__end_$i69 = $one_poly + 4 | 0;
  $conv61 = $lod;
  $__value_$i$i$i$i180 = $this + 48 | 0;
  $y82 = $ref$tmp + 4 | 0;
  $__value_$i$i$i$i100 = $one_poly + 8 | 0;
  $y100 = $ref$tmp + 4 | 0;
  $__end_$i$i177 = $hole_images + 4 | 0;
  $__value_$i$i$i$i178 = $hole_images + 8 | 0;
  $__end_$i$i174 = $hole_rects + 4 | 0;
  $__value_$i$i$i$i175 = $hole_rects + 8 | 0;
  $__end_$i$i171 = $hole_list + 4 | 0;
  $__value_$i$i$i$i172 = $hole_list + 8 | 0;
  $__end_$i143 = $one_hole + 4 | 0;
  $__value_$i$i$i$i148 = $this + 60 | 0;
  $y120 = $ref$tmp + 4 | 0;
  $y140 = $ref$tmp + 4 | 0;
  $image_number$0 = 0;
  while (1) {
   if (($image_number$0 | 0) >= ($sub$ptr$div$i | 0)) break;
   $6 = HEAP32[$bitmaps >> 2] | 0;
   $arrayidx$i = $6 + ($image_number$0 * 28 | 0) | 0;
   if ((HEAP32[$6 + ($image_number$0 * 28 | 0) + 8 >> 2] | 0) >= 1) if ((HEAP32[$6 + ($image_number$0 * 28 | 0) + 12 >> 2] | 0) >= 1) {
    __ZN2Dr17TraceImageOutlineERK8DrBitmap($one_poly, $arrayidx$i);
    $add = 1.0 / +(HEAP32[$width15 >> 2] | 0) + 1.0;
    $add20 = 1.0 / +(HEAP32[$height17 >> 2] | 0) + 1.0;
    $12 = HEAP32[$__end_$i69 >> 2] | 0;
    $__begin$sroa$0$0 = HEAP32[$one_poly >> 2] | 0;
    while (1) {
     if (($__begin$sroa$0$0 | 0) == ($12 | 0)) break;
     $conv34 = +(__ZN6DrRect4leftEv((HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0) | 0);
     HEAPF64[$__begin$sroa$0$0 >> 3] = +HEAPF64[$__begin$sroa$0$0 >> 3] + $conv34;
     $conv40 = +(__ZN6DrRect3topEv((HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0) | 0);
     $y = $__begin$sroa$0$0 + 8 | 0;
     $add41 = +HEAPF64[$y >> 3] + $conv40;
     HEAPF64[$__begin$sroa$0$0 >> 3] = $add * +HEAPF64[$__begin$sroa$0$0 >> 3];
     HEAPF64[$y >> 3] = $add20 * $add41;
     $__begin$sroa$0$0 = $__begin$sroa$0$0 + 16 | 0;
    }
    $13 = HEAP32[$__end_$i69 >> 2] | 0;
    $14 = HEAP32[$one_poly >> 2] | 0;
    if ($13 - $14 >> 4 >>> 0 > 3) {
     $add$ptr$i = $13 + -16 | 0;
     HEAP32[$__end_$i69 >> 2] = $add$ptr$i;
     $21 = $add$ptr$i;
     if ($21 - $14 >> 4 >>> 0 > 10) {
      __ZN6DrMesh12smoothPointsERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEidd($ref$tmp, $one_poly, 5, 20.0, 1.0);
      HEAP8[$agg$tmp$i98$byval_copy >> 0] = HEAP8[$agg$tmp$i110 >> 0] | 0;
      __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($one_poly, $ref$tmp, $agg$tmp$i98$byval_copy);
      __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($ref$tmp);
      __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($ref$tmp, $one_poly, $conv61);
      HEAP8[$agg$tmp$i98$byval_copy >> 0] = HEAP8[$agg$tmp$i110 >> 0] | 0;
      __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($one_poly, $ref$tmp, $agg$tmp$i98$byval_copy);
      __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($ref$tmp);
      $22 = HEAP32[$__end_$i69 >> 2] | 0;
      $23 = HEAP32[$one_poly >> 2] | 0;
     } else {
      $22 = $21;
      $23 = $14;
     }
    } else {
     $22 = $13;
     $23 = $14;
    }
    if ($22 - $23 >> 4 >>> 0 < 4) {
     HEAP32[$__end_$i69 >> 2] = $23;
     __ZN6DrRect7topLeftEv($agg$tmp$i110, (HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0);
     $25 = HEAP32[$agg$tmp$i110 >> 2] | 0;
     __ZN6DrRect7topLeftEv($ref$tmp, (HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0);
     __ZN8DrPointFC2Edd($agg$tmp$i98$byval_copy, +($25 | 0), +(HEAP32[$y82 >> 2] | 0));
     $28 = HEAP32[$__end_$i69 >> 2] | 0;
     if ($28 >>> 0 < (HEAP32[$__value_$i$i$i$i100 >> 2] | 0) >>> 0) {
      HEAP32[$28 >> 2] = HEAP32[$agg$tmp$i98$byval_copy >> 2];
      HEAP32[$28 + 4 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 4 >> 2];
      HEAP32[$28 + 8 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 8 >> 2];
      HEAP32[$28 + 12 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 12 >> 2];
      HEAP32[$__end_$i69 >> 2] = $28 + 16;
     } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($one_poly, $agg$tmp$i98$byval_copy);
     __ZN6DrRect8topRightEv($agg$tmp$i110, (HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0);
     $31 = HEAP32[$agg$tmp$i110 >> 2] | 0;
     __ZN6DrRect8topRightEv($ref$tmp, (HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0);
     __ZN8DrPointFC2Edd($agg$tmp$i98$byval_copy, +($31 | 0), +(HEAP32[$y100 >> 2] | 0));
     $34 = HEAP32[$__end_$i69 >> 2] | 0;
     if ($34 >>> 0 < (HEAP32[$__value_$i$i$i$i100 >> 2] | 0) >>> 0) {
      HEAP32[$34 >> 2] = HEAP32[$agg$tmp$i98$byval_copy >> 2];
      HEAP32[$34 + 4 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 4 >> 2];
      HEAP32[$34 + 8 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 8 >> 2];
      HEAP32[$34 + 12 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 12 >> 2];
      HEAP32[$__end_$i69 >> 2] = $34 + 16;
     } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($one_poly, $agg$tmp$i98$byval_copy);
     __ZN6DrRect11bottomRightEv($agg$tmp$i110, (HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0);
     $37 = HEAP32[$agg$tmp$i110 >> 2] | 0;
     __ZN6DrRect11bottomRightEv($ref$tmp, (HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0);
     __ZN8DrPointFC2Edd($agg$tmp$i98$byval_copy, +($37 | 0), +(HEAP32[$y120 >> 2] | 0));
     $40 = HEAP32[$__end_$i69 >> 2] | 0;
     if ($40 >>> 0 < (HEAP32[$__value_$i$i$i$i100 >> 2] | 0) >>> 0) {
      HEAP32[$40 >> 2] = HEAP32[$agg$tmp$i98$byval_copy >> 2];
      HEAP32[$40 + 4 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 4 >> 2];
      HEAP32[$40 + 8 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 8 >> 2];
      HEAP32[$40 + 12 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 12 >> 2];
      HEAP32[$__end_$i69 >> 2] = $40 + 16;
     } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($one_poly, $agg$tmp$i98$byval_copy);
     __ZN6DrRect10bottomLeftEv($agg$tmp$i110, (HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0);
     $43 = HEAP32[$agg$tmp$i110 >> 2] | 0;
     __ZN6DrRect10bottomLeftEv($ref$tmp, (HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0);
     __ZN8DrPointFC2Edd($agg$tmp$i98$byval_copy, +($43 | 0), +(HEAP32[$y140 >> 2] | 0));
     $46 = HEAP32[$__end_$i69 >> 2] | 0;
     if ($46 >>> 0 < (HEAP32[$__value_$i$i$i$i100 >> 2] | 0) >>> 0) {
      HEAP32[$46 >> 2] = HEAP32[$agg$tmp$i98$byval_copy >> 2];
      HEAP32[$46 + 4 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 4 >> 2];
      HEAP32[$46 + 8 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 8 >> 2];
      HEAP32[$46 + 12 >> 2] = HEAP32[$agg$tmp$i98$byval_copy + 12 >> 2];
      HEAP32[$__end_$i69 >> 2] = $46 + 16;
     } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($one_poly, $agg$tmp$i98$byval_copy);
    }
    __ZN10DrPolygonF24ensureWindingOrientationERNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE19Winding_Orientation($one_poly, 1);
    $48 = HEAP32[$__end_$i$i$i >> 2] | 0;
    if (($48 | 0) == (HEAP32[$__value_$i$i$i$i180 >> 2] | 0)) __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($m_poly_list, $one_poly); else {
     __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($48, $one_poly);
     HEAP32[$__end_$i$i$i >> 2] = (HEAP32[$__end_$i$i$i >> 2] | 0) + 12;
    }
    __ZN8DrBitmap4copyEv($ref$tmp, $arrayidx$i);
    __ZN7DrColorC2Ej($agg$tmp, -1);
    __ZNK8DrBitmap4rectEv($agg$tmp155, $ref$tmp);
    HEAP8[$agg$tmp$i98$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
    HEAP8[$agg$tmp$i98$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
    HEAP8[$agg$tmp$i98$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
    HEAP8[$agg$tmp$i98$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
    __ZN2Dr10FillBorderER8DrBitmap7DrColor6DrRect($ref$tmp, $agg$tmp$i98$byval_copy, $agg$tmp155);
    HEAP32[$hole_images >> 2] = 0;
    HEAP32[$__end_$i$i177 >> 2] = 0;
    HEAP32[$__value_$i$i$i$i178 >> 2] = 0;
    HEAP32[$hole_rects >> 2] = 0;
    HEAP32[$__end_$i$i174 >> 2] = 0;
    HEAP32[$__value_$i$i$i$i175 >> 2] = 0;
    __ZN2Dr19FindObjectsInBitmapERK8DrBitmapRNSt3__26vectorIS0_NS3_9allocatorIS0_EEEERNS4_I6DrRectNS5_IS9_EEEEdb($ref$tmp, $hole_images, $hole_rects, .875, 0) | 0;
    HEAP32[$hole_list >> 2] = 0;
    HEAP32[$__end_$i$i171 >> 2] = 0;
    HEAP32[$__value_$i$i$i$i172 >> 2] = 0;
    $hole_number$0 = 0;
    while (1) {
     $52 = HEAP32[$hole_images >> 2] | 0;
     $53 = $52;
     if (($hole_number$0 | 0) >= (((HEAP32[$__end_$i$i177 >> 2] | 0) - $52 | 0) / 28 | 0 | 0)) break;
     $arrayidx$i146 = $53 + ($hole_number$0 * 28 | 0) | 0;
     if ((HEAP32[$53 + ($hole_number$0 * 28 | 0) + 8 >> 2] | 0) >= 1) if ((HEAP32[$53 + ($hole_number$0 * 28 | 0) + 12 >> 2] | 0) >= 1) {
      __ZN2Dr17TraceImageOutlineERK8DrBitmap($one_hole, $arrayidx$i146);
      $60 = HEAP32[$__end_$i143 >> 2] | 0;
      $__begin179$sroa$0$0 = HEAP32[$one_hole >> 2] | 0;
      while (1) {
       if (($__begin179$sroa$0$0 | 0) == ($60 | 0)) break;
       $call195 = __ZN6DrRect4leftEv((HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0) | 0;
       $conv201 = +((__ZN6DrRect4leftEv((HEAP32[$hole_rects >> 2] | 0) + ($hole_number$0 << 4) | 0) | 0) + $call195 | 0);
       HEAPF64[$__begin179$sroa$0$0 >> 3] = +HEAPF64[$__begin179$sroa$0$0 >> 3] + $conv201;
       $call207 = __ZN6DrRect3topEv((HEAP32[$rects >> 2] | 0) + ($image_number$0 << 4) | 0) | 0;
       $conv213 = +((__ZN6DrRect3topEv((HEAP32[$hole_rects >> 2] | 0) + ($hole_number$0 << 4) | 0) | 0) + $call207 | 0);
       $y214 = $__begin179$sroa$0$0 + 8 | 0;
       HEAPF64[$y214 >> 3] = +HEAPF64[$y214 >> 3] + $conv213;
       $__begin179$sroa$0$0 = $__begin179$sroa$0$0 + 16 | 0;
      }
      $61 = HEAP32[$__end_$i143 >> 2] | 0;
      $62 = HEAP32[$one_hole >> 2] | 0;
      if ($61 - $62 >> 4 >>> 0 > 3) {
       $add$ptr$i125 = $61 + -16 | 0;
       HEAP32[$__end_$i143 >> 2] = $add$ptr$i125;
       $70 = $add$ptr$i125;
       if ($70 - $62 >> 4 >>> 0 > 10) {
        __ZN6DrMesh12smoothPointsERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEidd($ref$tmp232, $one_hole, 5, 30.0, 1.0);
        HEAP8[$agg$tmp$i98$byval_copy >> 0] = HEAP8[$agg$tmp$i110 >> 0] | 0;
        __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($one_hole, $ref$tmp232, $agg$tmp$i98$byval_copy);
        __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($ref$tmp232);
        __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($ref$tmp232, $one_hole, $conv61);
        HEAP8[$agg$tmp$i98$byval_copy >> 0] = HEAP8[$agg$tmp$i110 >> 0] | 0;
        __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($one_hole, $ref$tmp232, $agg$tmp$i98$byval_copy);
        __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($ref$tmp232);
        $71 = HEAP32[$__end_$i143 >> 2] | 0;
        $72 = HEAP32[$one_hole >> 2] | 0;
       } else {
        $71 = $70;
        $72 = $62;
       }
      } else {
       $71 = $61;
       $72 = $62;
      }
      do if ($71 - $72 >> 4 >>> 0 > 3) {
       __ZN10DrPolygonF24ensureWindingOrientationERNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE19Winding_Orientation($one_hole, 0);
       $73 = HEAP32[$__end_$i$i171 >> 2] | 0;
       if (($73 | 0) == (HEAP32[$__value_$i$i$i$i172 >> 2] | 0)) {
        __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($hole_list, $one_hole);
        break;
       } else {
        __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($73, $one_hole);
        HEAP32[$__end_$i$i171 >> 2] = (HEAP32[$__end_$i$i171 >> 2] | 0) + 12;
        break;
       }
      } while (0);
      __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($one_hole);
     }
     $hole_number$0 = $hole_number$0 + 1 | 0;
    }
    $54 = HEAP32[$__end_$i$i$i58 >> 2] | 0;
    if (($54 | 0) == (HEAP32[$__value_$i$i$i$i148 >> 2] | 0)) __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($m_hole_list, $hole_list); else {
     __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEC2ERKS6_($54, $hole_list);
     HEAP32[$__end_$i$i$i58 >> 2] = (HEAP32[$__end_$i$i$i58 >> 2] | 0) + 12;
    }
    __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($hole_list);
    __ZNSt3__213__vector_baseI6DrRectNS_9allocatorIS1_EEED2Ev($hole_rects);
    __ZNSt3__213__vector_baseI8DrBitmapNS_9allocatorIS1_EEED2Ev($hole_images);
    __ZN8DrBitmapD2Ev($ref$tmp);
    __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($one_poly);
   }
   $image_number$0 = $image_number$0 + 1 | 0;
  }
  HEAP8[$this + 64 >> 0] = 0;
  HEAP8[$this + 65 >> 0] = 1;
 }
 __ZNSt3__213__vector_baseI6DrRectNS_9allocatorIS1_EEED2Ev($rects);
 __ZNSt3__213__vector_baseI8DrBitmapNS_9allocatorIS1_EEED2Ev($bitmaps);
 STACKTOP = sp;
 return;
}

function __ZN10DelaunatorC2ERKNSt3__26vectorIdNS0_9allocatorIdEEEE($this, $in_coords) {
 $this = $this | 0;
 $in_coords = $in_coords | 0;
 var $10 = 0, $101 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0.0, $114 = 0, $119 = 0, $12 = 0.0, $120 = 0, $123 = 0, $13 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $21 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0.0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $66 = 0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0, $73 = 0, $77 = 0, $79 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, $__begin$sroa$0$0 = 0, $__end_$i = 0, $__end_$i$i237 = 0, $__end_$i$i261 = 0, $__end_$i$i383 = 0, $__n$addr$0$i$i$i$i = 0, $__value_$i$i$i$i262 = 0, $__value_$i$i$i$i384 = 0, $agg$tmp1$sroa$0$0$i$i$i = 0, $agg$tmp209409 = 0, $call131 = 0.0, $call160 = 0, $call194 = 0.0, $call266 = 0, $call271 = 0, $call276 = 0, $call331 = 0, $call342 = 0, $call398 = 0, $call401 = 0, $call448 = 0, $call48 = 0.0, $call490 = 0, $call518 = 0, $call532 = 0, $call89 = 0.0, $cmp49 = 0, $dists = 0, $div = 0.0, $div30 = 0.0, $e$0 = 0, $e$2 = 0, $e$3 = 0, $exception = 0, $halfedges = 0, $hull_next = 0, $hull_prev = 0, $hull_start = 0, $hull_tri = 0, $i0$0 = 0, $i1$0 = 0, $i1$1 = 0, $i111$0 = 0, $i2$0 = 0, $i2$1 = 0, $i32$0 = 0, $i69$0 = 0, $ids = 0, $j$0 = 0, $k$0 = 0, $m_center_x = 0, $m_center_y = 0, $m_hash = 0, $m_hash_size = 0, $max_x$0 = 0.0, $max_y$0 = 0.0, $min_dist$0 = 0.0, $min_dist$2 = 0.0, $min_dist$4 = 0.0, $min_radius$0 = 0.0, $min_radius$2 = 0.0, $min_x$0 = 0.0, $min_y$0 = 0.0, $mul = 0, $mul100 = 0, $mul121 = 0, $mul149 = 0, $mul182 = 0, $mul302 = 0, $mul365 = 0, $mul374 = 0, $mul38 = 0, $mul418 = 0, $mul427 = 0, $mul463 = 0, $mul472 = 0, $mul523 = 0, $mul58 = 0, $mul79 = 0, $next$0 = 0, $or$cond = 0, $shr = 0, $spec$select472 = 0.0, $spec$select473 = 0.0, $spec$select474 = 0.0, $spec$select475 = 0.0, $spec$select476 = 0, $spec$select477 = 0, $spec$select478 = 0, $start$0 = 0, $start$1 = 0, $storemerge = 0, $sub$ptr$div$i = 0, $triangles = 0, $xp$0 = 0.0, $xp$1 = 0.0, $yp$0 = 0.0, $yp$1 = 0.0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp209409 = sp;
 $ids = sp + 28 | 0;
 $dists = sp + 16 | 0;
 HEAP32[$this >> 2] = $in_coords;
 $triangles = $this + 4 | 0;
 $halfedges = $this + 16 | 0;
 $hull_prev = $this + 28 | 0;
 $hull_next = $this + 40 | 0;
 $hull_tri = $this + 52 | 0;
 $hull_start = $this + 64 | 0;
 $m_hash = $this + 68 | 0;
 $__end_$i$i237 = $this + 72 | 0;
 $m_center_x = $this + 80 | 0;
 $m_center_y = $this + 88 | 0;
 $m_hash_size = $this + 96 | 0;
 $__end_$i = $in_coords + 4 | 0;
 dest = $triangles;
 stop = dest + 108 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $sub$ptr$div$i = (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$in_coords >> 2] | 0) >> 3;
 $shr = $sub$ptr$div$i >>> 1;
 HEAP32[$ids >> 2] = 0;
 $__end_$i$i261 = $ids + 4 | 0;
 HEAP32[$__end_$i$i261 >> 2] = 0;
 $__value_$i$i$i$i262 = $ids + 8 | 0;
 HEAP32[$__value_$i$i$i$i262 >> 2] = 0;
 __ZNSt3__26vectorImNS_9allocatorImEEE7reserveEm($ids, $shr);
 $max_x$0 = 2.2250738585072014e-308;
 $max_y$0 = 2.2250738585072014e-308;
 $min_x$0 = 1797693134862315708145274.0e284;
 $min_y$0 = 1797693134862315708145274.0e284;
 $storemerge = 0;
 while (1) {
  HEAP32[$agg$tmp209409 >> 2] = $storemerge;
  if ($storemerge >>> 0 >= $shr >>> 0) break;
  $mul = $storemerge << 1;
  $3 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
  $4 = +HEAPF64[$3 + ($mul << 3) >> 3];
  $5 = +HEAPF64[$3 + (($mul | 1) << 3) >> 3];
  $6 = HEAP32[$__end_$i$i261 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$__value_$i$i$i$i262 >> 2] | 0)) __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($ids, $agg$tmp209409); else {
   HEAP32[$6 >> 2] = $storemerge;
   HEAP32[$__end_$i$i261 >> 2] = $6 + 4;
  }
  $max_x$0 = $4 > $max_x$0 ? $4 : $max_x$0;
  $max_y$0 = $5 > $max_y$0 ? $5 : $max_y$0;
  $min_x$0 = $4 < $min_x$0 ? $4 : $min_x$0;
  $min_y$0 = $5 < $min_y$0 ? $5 : $min_y$0;
  $storemerge = (HEAP32[$agg$tmp209409 >> 2] | 0) + 1 | 0;
 }
 $div = ($min_x$0 + $max_x$0) * .5;
 $div30 = ($min_y$0 + $max_y$0) * .5;
 $i0$0 = -1;
 $i32$0 = 0;
 $min_dist$0 = 1797693134862315708145274.0e284;
 while (1) {
  $9 = HEAP32[$this >> 2] | 0;
  if (($i32$0 | 0) == ($shr | 0)) break;
  $mul38 = $i32$0 << 1;
  $13 = HEAP32[$9 >> 2] | 0;
  $call48 = +__Z4distdddd($div, $div30, +HEAPF64[$13 + ($mul38 << 3) >> 3], +HEAPF64[$13 + (($mul38 | 1) << 3) >> 3]);
  $cmp49 = $call48 < $min_dist$0;
  $i0$0 = $cmp49 ? $i32$0 : $i0$0;
  $i32$0 = $i32$0 + 1 | 0;
  $min_dist$0 = $cmp49 ? $call48 : $min_dist$0;
 }
 $mul58 = $i0$0 << 1;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = +HEAPF64[$10 + ($mul58 << 3) >> 3];
 $12 = +HEAPF64[$10 + (($mul58 | 1) << 3) >> 3];
 $i1$0 = -1;
 $i69$0 = 0;
 $min_dist$2 = 1797693134862315708145274.0e284;
 while (1) {
  if (($i69$0 | 0) == ($shr | 0)) break;
  if (($i69$0 | 0) == ($i0$0 | 0)) {
   $i1$1 = $i1$0;
   $min_dist$4 = $min_dist$2;
  } else {
   $mul79 = $i69$0 << 1;
   $21 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
   $call89 = +__Z4distdddd($11, $12, +HEAPF64[$21 + ($mul79 << 3) >> 3], +HEAPF64[$21 + (($mul79 | 1) << 3) >> 3]);
   $or$cond = $call89 < $min_dist$2 & $call89 > 0.0;
   $i1$1 = $or$cond ? $i69$0 : $i1$0;
   $min_dist$4 = $or$cond ? $call89 : $min_dist$2;
  }
  $i1$0 = $i1$1;
  $i69$0 = $i69$0 + 1 | 0;
  $min_dist$2 = $min_dist$4;
 }
 $mul100 = $i1$0 << 1;
 $17 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
 $18 = +HEAPF64[$17 + ($mul100 << 3) >> 3];
 $19 = +HEAPF64[$17 + (($mul100 | 1) << 3) >> 3];
 $i111$0 = 0;
 $i2$0 = -1;
 $min_radius$0 = 1797693134862315708145274.0e284;
 while (1) {
  if (($i111$0 | 0) == ($shr | 0)) break;
  if (($i111$0 | 0) == ($i0$0 | 0) | ($i111$0 | 0) == ($i1$0 | 0)) {
   $i2$1 = $i2$0;
   $min_radius$2 = $min_radius$0;
  } else {
   $mul121 = $i111$0 << 1;
   $25 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
   $call131 = +__Z12circumradiusdddddd($11, $12, $18, $19, +HEAPF64[$25 + ($mul121 << 3) >> 3], +HEAPF64[$25 + (($mul121 | 1) << 3) >> 3]);
   if ($call131 < $min_radius$0) {
    $i2$1 = $i111$0;
    $min_radius$2 = $call131;
   } else {
    $i2$1 = $i2$0;
    $min_radius$2 = $min_radius$0;
   }
  }
  $i111$0 = $i111$0 + 1 | 0;
  $i2$0 = $i2$1;
  $min_radius$0 = $min_radius$2;
 }
 if (!($min_radius$0 < 1797693134862315708145274.0e284)) {
  $exception = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc($exception, 45697);
  ___cxa_throw($exception | 0, 12496, 86);
 }
 $mul149 = $i2$0 << 1;
 $29 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
 $30 = +HEAPF64[$29 + ($mul149 << 3) >> 3];
 $31 = +HEAPF64[$29 + (($mul149 | 1) << 3) >> 3];
 $call160 = __Z6orientdddddd($11, $12, $18, $19, $30, $31) | 0;
 $spec$select472 = $call160 ? $19 : $31;
 $spec$select473 = $call160 ? $18 : $30;
 $spec$select474 = $call160 ? $31 : $19;
 $spec$select475 = $call160 ? $30 : $18;
 $spec$select476 = $call160 ? $i1$0 : $i2$0;
 $spec$select477 = $call160 ? $i2$0 : $i1$0;
 __Z12circumcenterdddddd($agg$tmp209409, $11, $12, $spec$select475, $spec$select474, $spec$select473, $spec$select472);
 HEAPF64[$m_center_x >> 3] = +HEAPF64[$agg$tmp209409 >> 3];
 HEAPF64[$m_center_y >> 3] = +HEAPF64[$agg$tmp209409 + 8 >> 3];
 HEAP32[$dists >> 2] = 0;
 $__end_$i$i383 = $dists + 4 | 0;
 HEAP32[$__end_$i$i383 >> 2] = 0;
 $__value_$i$i$i$i384 = $dists + 8 | 0;
 HEAP32[$__value_$i$i$i$i384 >> 2] = 0;
 __ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm($dists, (HEAP32[$__end_$i$i261 >> 2] | 0) - (HEAP32[$ids >> 2] | 0) >> 2);
 $37 = HEAP32[$__end_$i$i261 >> 2] | 0;
 $__begin$sroa$0$0 = HEAP32[$ids >> 2] | 0;
 while (1) {
  if (($__begin$sroa$0$0 | 0) == ($37 | 0)) break;
  $mul182 = HEAP32[$__begin$sroa$0$0 >> 2] << 1;
  $49 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
  $call194 = +__Z4distdddd(+HEAPF64[$49 + ($mul182 << 3) >> 3], +HEAPF64[$49 + (($mul182 | 1) << 3) >> 3], +HEAPF64[$m_center_x >> 3], +HEAPF64[$m_center_y >> 3]);
  HEAPF64[$agg$tmp209409 >> 3] = $call194;
  $54 = HEAP32[$__end_$i$i383 >> 2] | 0;
  if (($54 | 0) == (HEAP32[$__value_$i$i$i$i384 >> 2] | 0)) __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($dists, $agg$tmp209409); else {
   HEAPF64[$54 >> 3] = $call194;
   HEAP32[$__end_$i$i383 >> 2] = $54 + 8;
  }
  $__begin$sroa$0$0 = $__begin$sroa$0$0 + 4 | 0;
 }
 $38 = HEAP32[$ids >> 2] | 0;
 $39 = HEAP32[$__end_$i$i261 >> 2] | 0;
 $40 = HEAP32[$this >> 2] | 0;
 HEAP32[$agg$tmp209409 >> 2] = $dists;
 HEAP32[$agg$tmp209409 + 4 >> 2] = $40;
 __ZNSt3__26__sortIR7comparePmEEvT0_S4_T_($38, $39, $agg$tmp209409);
 $43 = _llround(+Math_ceil(+(+Math_sqrt(+(+($shr >>> 0)))))) | 0;
 getTempRet0() | 0;
 HEAP32[$m_hash_size >> 2] = $43;
 __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($m_hash, $43);
 $45 = HEAP32[$m_hash >> 2] | 0;
 $__n$addr$0$i$i$i$i = (HEAP32[$__end_$i$i237 >> 2] | 0) - $45 >> 2;
 $agg$tmp1$sroa$0$0$i$i$i = $45;
 while (1) {
  if (($__n$addr$0$i$i$i$i | 0) <= 0) break;
  $56 = $agg$tmp1$sroa$0$0$i$i$i;
  HEAP32[$56 >> 2] = -1;
  $__n$addr$0$i$i$i$i = $__n$addr$0$i$i$i$i + -1 | 0;
  $agg$tmp1$sroa$0$0$i$i$i = $56 + 4 | 0;
 }
 __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($hull_prev, $shr);
 __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($hull_next, $shr);
 __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($hull_tri, $shr);
 HEAP32[$hull_start >> 2] = $i0$0;
 $58 = HEAP32[$hull_prev >> 2] | 0;
 HEAP32[$58 + ($spec$select476 << 2) >> 2] = $spec$select477;
 $59 = HEAP32[$hull_next >> 2] | 0;
 HEAP32[$59 + ($i0$0 << 2) >> 2] = $spec$select477;
 HEAP32[$58 + ($i0$0 << 2) >> 2] = $spec$select476;
 HEAP32[$59 + ($spec$select477 << 2) >> 2] = $spec$select476;
 HEAP32[$58 + ($spec$select477 << 2) >> 2] = $i0$0;
 HEAP32[$59 + ($spec$select476 << 2) >> 2] = $i0$0;
 $60 = HEAP32[$hull_tri >> 2] | 0;
 HEAP32[$60 + ($i0$0 << 2) >> 2] = 0;
 HEAP32[$60 + ($spec$select477 << 2) >> 2] = 1;
 HEAP32[$60 + ($spec$select476 << 2) >> 2] = 2;
 $call266 = __ZNK10Delaunator8hash_keyEdd($this, $11, $12) | 0;
 HEAP32[(HEAP32[$m_hash >> 2] | 0) + ($call266 << 2) >> 2] = $i0$0;
 $call271 = __ZNK10Delaunator8hash_keyEdd($this, $spec$select475, $spec$select474) | 0;
 HEAP32[(HEAP32[$m_hash >> 2] | 0) + ($call271 << 2) >> 2] = $spec$select477;
 $call276 = __ZNK10Delaunator8hash_keyEdd($this, $spec$select473, $spec$select472) | 0;
 HEAP32[(HEAP32[$m_hash >> 2] | 0) + ($call276 << 2) >> 2] = $spec$select476;
 $spec$select478 = $sub$ptr$div$i >>> 0 < 6 ? 3 : (($sub$ptr$div$i & -2) * 3 | 0) + -15 | 0;
 __ZNSt3__26vectorImNS_9allocatorImEEE7reserveEm($triangles, $spec$select478);
 __ZNSt3__26vectorImNS_9allocatorImEEE7reserveEm($halfedges, $spec$select478);
 __ZN10Delaunator12add_triangleEmmmmmm($this, $i0$0, $spec$select477, $spec$select476, -1, -1, -1) | 0;
 $k$0 = 0;
 $xp$0 = nan;
 $yp$0 = nan;
 while (1) {
  if ($k$0 >>> 0 >= $shr >>> 0) break;
  $66 = HEAP32[(HEAP32[$ids >> 2] | 0) + ($k$0 << 2) >> 2] | 0;
  $mul302 = $66 << 1;
  $68 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
  $69 = +HEAPF64[$68 + ($mul302 << 3) >> 3];
  $70 = +HEAPF64[$68 + (($mul302 | 1) << 3) >> 3];
  if (!$k$0) label = 37; else if (__Z15check_pts_equaldddd($69, $70, $xp$0, $yp$0) | 0) {
   $xp$1 = $xp$0;
   $yp$1 = $yp$0;
  } else label = 37;
  L48 : do if ((label | 0) == 37) {
   label = 0;
   if (__Z15check_pts_equaldddd($69, $70, $11, $12) | 0) {
    $xp$1 = $69;
    $yp$1 = $70;
   } else if (__Z15check_pts_equaldddd($69, $70, $spec$select475, $spec$select474) | 0) {
    $xp$1 = $69;
    $yp$1 = $70;
   } else if (__Z15check_pts_equaldddd($69, $70, $spec$select473, $spec$select472) | 0) {
    $xp$1 = $69;
    $yp$1 = $70;
   } else {
    $call331 = __ZNK10Delaunator8hash_keyEdd($this, $69, $70) | 0;
    $j$0 = 0;
    $start$0 = 0;
    while (1) {
     $71 = HEAP32[$m_hash_size >> 2] | 0;
     if ($j$0 >>> 0 >= $71 >>> 0) {
      $start$1 = $start$0;
      break;
     }
     $call342 = __Z8fast_modmm($j$0 + $call331 | 0, $71) | 0;
     $73 = HEAP32[(HEAP32[$m_hash >> 2] | 0) + ($call342 << 2) >> 2] | 0;
     if (($73 | 0) != -1) if (($73 | 0) != (HEAP32[(HEAP32[$hull_next >> 2] | 0) + ($73 << 2) >> 2] | 0)) {
      $start$1 = $73;
      break;
     }
     $j$0 = $j$0 + 1 | 0;
     $start$0 = $73;
    }
    $77 = HEAP32[(HEAP32[$hull_prev >> 2] | 0) + ($start$1 << 2) >> 2] | 0;
    $e$0 = $77;
    while (1) {
     $79 = HEAP32[(HEAP32[$hull_next >> 2] | 0) + ($e$0 << 2) >> 2] | 0;
     $mul365 = $e$0 << 1;
     $81 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
     $mul374 = $79 << 1;
     if (__Z6orientdddddd($69, $70, +HEAPF64[$81 + ($mul365 << 3) >> 3], +HEAPF64[$81 + (($mul365 | 1) << 3) >> 3], +HEAPF64[$81 + ($mul374 << 3) >> 3], +HEAPF64[$81 + (($mul374 | 1) << 3) >> 3]) | 0) break;
     if (($79 | 0) == ($77 | 0)) {
      $xp$1 = $69;
      $yp$1 = $70;
      break L48;
     } else $e$0 = $79;
    }
    if (($e$0 | 0) == -1) {
     $xp$1 = $69;
     $yp$1 = $70;
    } else {
     $call398 = __ZN10Delaunator12add_triangleEmmmmmm($this, $e$0, $66, HEAP32[(HEAP32[$hull_next >> 2] | 0) + ($e$0 << 2) >> 2] | 0, -1, -1, HEAP32[(HEAP32[$hull_tri >> 2] | 0) + ($e$0 << 2) >> 2] | 0) | 0;
     $call401 = __ZN10Delaunator8legalizeEm($this, $call398 + 2 | 0) | 0;
     $90 = HEAP32[$hull_tri >> 2] | 0;
     HEAP32[$90 + ($66 << 2) >> 2] = $call401;
     HEAP32[$90 + ($e$0 << 2) >> 2] = $call398;
     $91 = HEAP32[$hull_next >> 2] | 0;
     $93 = $91;
     $next$0 = HEAP32[$91 + ($e$0 << 2) >> 2] | 0;
     while (1) {
      $94 = HEAP32[$93 + ($next$0 << 2) >> 2] | 0;
      $mul418 = $next$0 << 1;
      $96 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
      $mul427 = $94 << 1;
      if (!(__Z6orientdddddd($69, $70, +HEAPF64[$96 + ($mul418 << 3) >> 3], +HEAPF64[$96 + (($mul418 | 1) << 3) >> 3], +HEAPF64[$96 + ($mul427 << 3) >> 3], +HEAPF64[$96 + (($mul427 | 1) << 3) >> 3]) | 0)) break;
      $101 = HEAP32[$hull_tri >> 2] | 0;
      $call448 = __ZN10Delaunator8legalizeEm($this, (__ZN10Delaunator12add_triangleEmmmmmm($this, $next$0, $66, $94, HEAP32[$101 + ($66 << 2) >> 2] | 0, -1, HEAP32[$101 + ($next$0 << 2) >> 2] | 0) | 0) + 2 | 0) | 0;
      HEAP32[(HEAP32[$hull_tri >> 2] | 0) + ($66 << 2) >> 2] = $call448;
      $105 = HEAP32[$hull_next >> 2] | 0;
      HEAP32[$105 + ($next$0 << 2) >> 2] = $next$0;
      $93 = $105;
      $next$0 = $94;
     }
     L69 : do if (($e$0 | 0) == ($77 | 0)) {
      $e$2 = $77;
      while (1) {
       $107 = HEAP32[(HEAP32[$hull_prev >> 2] | 0) + ($e$2 << 2) >> 2] | 0;
       $mul463 = $107 << 1;
       $109 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
       $mul472 = $e$2 << 1;
       if (!(__Z6orientdddddd($69, $70, +HEAPF64[$109 + ($mul463 << 3) >> 3], +HEAPF64[$109 + (($mul463 | 1) << 3) >> 3], +HEAPF64[$109 + ($mul472 << 3) >> 3], +HEAPF64[$109 + (($mul472 | 1) << 3) >> 3]) | 0)) {
        $e$3 = $e$2;
        break L69;
       }
       $114 = HEAP32[$hull_tri >> 2] | 0;
       $call490 = __ZN10Delaunator12add_triangleEmmmmmm($this, $107, $66, $e$2, -1, HEAP32[$114 + ($e$2 << 2) >> 2] | 0, HEAP32[$114 + ($107 << 2) >> 2] | 0) | 0;
       __ZN10Delaunator8legalizeEm($this, $call490 + 2 | 0) | 0;
       HEAP32[(HEAP32[$hull_tri >> 2] | 0) + ($107 << 2) >> 2] = $call490;
       HEAP32[(HEAP32[$hull_next >> 2] | 0) + ($e$2 << 2) >> 2] = $e$2;
       $e$2 = $107;
      }
     } else $e$3 = $e$0; while (0);
     $119 = HEAP32[$hull_prev >> 2] | 0;
     HEAP32[$119 + ($66 << 2) >> 2] = $e$3;
     HEAP32[$hull_start >> 2] = $e$3;
     HEAP32[$119 + ($next$0 << 2) >> 2] = $66;
     $120 = HEAP32[$hull_next >> 2] | 0;
     HEAP32[$120 + ($e$3 << 2) >> 2] = $66;
     HEAP32[$120 + ($66 << 2) >> 2] = $next$0;
     $call518 = __ZNK10Delaunator8hash_keyEdd($this, $69, $70) | 0;
     HEAP32[(HEAP32[$m_hash >> 2] | 0) + ($call518 << 2) >> 2] = $66;
     $mul523 = $e$3 << 1;
     $123 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
     $call532 = __ZNK10Delaunator8hash_keyEdd($this, +HEAPF64[$123 + ($mul523 << 3) >> 3], +HEAPF64[$123 + (($mul523 | 1) << 3) >> 3]) | 0;
     HEAP32[(HEAP32[$m_hash >> 2] | 0) + ($call532 << 2) >> 2] = $e$3;
     $xp$1 = $69;
     $yp$1 = $70;
    }
   }
  } while (0);
  $k$0 = $k$0 + 1 | 0;
  $xp$0 = $xp$1;
  $yp$0 = $yp$1;
 }
 __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($dists);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($ids);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv($this) {
 $this = $this | 0;
 var $N = 0, $agg$tmp = 0, $agg$tmp11 = 0, $agg$tmp111 = 0, $agg$tmp111$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp27 = 0, $agg$tmp33 = 0, $agg$tmp39 = 0, $agg$tmp45 = 0, $agg$tmp51 = 0, $agg$tmp57 = 0, $agg$tmp6 = 0, $agg$tmp63 = 0, $agg$tmp69 = 0, $agg$tmp75 = 0, $agg$tmp81 = 0, $agg$tmp87 = 0, $agg$tmp93 = 0, $call115 = 0, $call122 = 0, $call126 = 0, $call133 = 0, $call20 = 0, $call26 = 0, $call3 = 0, $call32 = 0, $call38 = 0, $call44 = 0, $call50 = 0, $call56 = 0, $call62 = 0, $call68 = 0, $call74 = 0, $call80 = 0, $call86 = 0, $call92 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $agg$tmp111$byval_copy = sp + 144 | 0;
 $agg$tmp = sp + 136 | 0;
 $agg$tmp6 = sp + 128 | 0;
 $agg$tmp11 = sp + 120 | 0;
 $agg$tmp21 = sp + 112 | 0;
 $agg$tmp27 = sp + 104 | 0;
 $agg$tmp33 = sp + 96 | 0;
 $agg$tmp39 = sp + 88 | 0;
 $agg$tmp45 = sp + 80 | 0;
 $agg$tmp51 = sp + 72 | 0;
 $agg$tmp57 = sp + 64 | 0;
 $agg$tmp63 = sp + 56 | 0;
 $agg$tmp69 = sp + 48 | 0;
 $agg$tmp75 = sp + 40 | 0;
 $agg$tmp81 = sp + 32 | 0;
 $agg$tmp87 = sp + 24 | 0;
 $agg$tmp93 = sp + 16 | 0;
 $agg$tmp111 = sp + 8 | 0;
 $N = sp;
 L1 : do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 76) | 0) do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 | 0) {
 case 84:
  {
   $retval$3 = 0;
   break L1;
   break;
  }
 case 119:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52445);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call3, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 98:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 52453);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp111$byval_copy) | 0) {
    HEAP32[$agg$tmp111$byval_copy >> 2] = 0;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this, $agg$tmp111$byval_copy) | 0;
    break L1;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11, 52457);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp11 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp11 + 4 >> 2];
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp111$byval_copy) | 0)) {
    $retval$3 = 0;
    break L1;
   }
   HEAP32[$agg$tmp111$byval_copy >> 2] = 1;
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 99:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call20 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 51535);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp21 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call20, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 97:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call26 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27, 51540);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp27 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp27 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call26, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 104:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call32 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp33, 51552);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp33 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp33 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call32, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 115:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call38 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp39, 51566);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp39 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp39 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call38, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 116:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call44 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp45, 51572);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp45 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp45 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call44, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 105:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call50 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp51, 2193746);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp51 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp51 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call50, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 106:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call56 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57, 52461);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp57 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp57 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call56, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 108:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call62 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63, 52463);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp63 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp63 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call62, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 109:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call68 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp69, 52465);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp69 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp69 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call68, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 120:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call74 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp75, 52468);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp75 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp75 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call74, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 121:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call80 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp81, 52471);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp81 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp81 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call80, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 110:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call86 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87, 51633);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp87 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp87 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call86, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 111:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call92 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp93, 51642);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp93 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp93 + 4 >> 2];
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call92, $agg$tmp111$byval_copy) | 0;
   break L1;
   break;
  }
 case 102:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break L1;
   break;
  }
 case 100:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break L1;
   break;
  }
 case 101:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break L1;
   break;
  }
 case 95:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp111, 51469);
   HEAP32[$agg$tmp111$byval_copy >> 2] = HEAP32[$agg$tmp111 >> 2];
   HEAP32[$agg$tmp111$byval_copy + 4 >> 2] = HEAP32[$agg$tmp111 + 4 >> 2];
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp111$byval_copy) | 0)) {
    $retval$3 = 0;
    break L1;
   }
   $call115 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   if ($call115 | 0) if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
    $retval$3 = $call115;
    break L1;
   }
   $retval$3 = 0;
   break L1;
   break;
  }
 default:
  {
   $call122 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp111$byval_copy >> 2] = $call122;
   if (!$call122) $retval$2 = 0; else {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($N, $this, 0);
    $call126 = __ZNK12_GLOBAL__N_110StringView5emptyEv($N) | 0;
    $call133 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0;
    if ($call126) $retval$1 = $call133 ? $call122 : 0; else if ($call133) $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $agg$tmp111$byval_copy, $N) | 0; else $retval$1 = 0;
    $retval$2 = $retval$1;
   }
   $retval$3 = $retval$2;
   break L1;
  }
 } while (0); else $retval$3 = 0; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($agg$result, $bitmap, $at_x, $at_y, $fill_color, $tolerance, $type, $flood_pixel_count, $flood_rect) {
 $agg$result = $agg$result | 0;
 $bitmap = $bitmap | 0;
 $at_x = $at_x | 0;
 $at_y = $at_y | 0;
 $fill_color = $fill_color | 0;
 $tolerance = +$tolerance;
 $type = $type | 0;
 $flood_pixel_count = $flood_pixel_count | 0;
 $flood_rect = $flood_rect | 0;
 var $$pre313 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $50 = 0, $6 = 0, $9 = 0, $__begin$sroa$0$0 = 0, $__end_$i$i = 0, $__first$addr$0$i$i$i = 0, $__value_$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr$pn$i = 0, $add137 = 0, $agg$tmp = 0, $agg$tmp218 = 0, $agg$tmp218$byval_copy = 0, $agg$tmp25 = 0, $agg$tmp42 = 0, $agg$tmp46 = 0, $agg$tmp76 = 0, $agg$tmp80 = 0, $agg$tmp84 = 0, $cmp154 = 0, $cmp160 = 0, $cond122 = 0, $cond130 = 0, $cond142 = 0, $flood = 0, $height = 0, $incdec$ptr$i = 0, $it$sroa$0$0 = 0, $it$sroa$0$1$in = 0, $max_x$0 = 0, $max_x$1 = 0, $max_x$2 = 0, $max_x$3 = 0, $max_y$0 = 0, $max_y$1 = 0, $max_y$2 = 0, $max_y$3 = 0, $min_x$0 = 0, $min_x$1 = 0, $min_x$3 = 0, $min_y$0 = 0, $min_y$1 = 0, $min_y$3 = 0, $or$cond152194 = 0, $point$sroa$0$0$copyload = 0, $point$sroa$21$0$copyload = 0, $points = 0, $processed = 0, $processed_some$0$off0 = 0, $processed_some$1$off0 = 0, $processed_some$2$off0 = 0, $processed_some$3$off0 = 0, $processed_some$4$off0 = 0, $spec$select = 0, $spec$select148 = 0, $start_color = 0, $sub111 = 0, $sub114 = 0, $sub127 = 0, $sub133 = 0, $tmp = 0, $tmp199 = 0, $tmp254 = 0, $width = 0, $x$0 = 0, $x143$0 = 0, $y$0 = 0, $y148$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $agg$tmp218$byval_copy = sp;
 $flood = sp + 64 | 0;
 $processed = sp + 36 | 0;
 $agg$tmp = sp + 96 | 0;
 $agg$tmp25 = sp + 92 | 0;
 $start_color = sp + 116 | 0;
 $agg$tmp42 = sp + 128 | 0;
 $agg$tmp46 = sp + 124 | 0;
 $points = sp + 16 | 0;
 $tmp = sp + 120 | 0;
 $agg$tmp76 = sp + 32 | 0;
 $agg$tmp80 = sp + 28 | 0;
 $agg$tmp84 = sp + 112 | 0;
 $tmp199 = sp + 108 | 0;
 $agg$tmp218 = sp + 104 | 0;
 $tmp254 = sp + 100 | 0;
 HEAP32[$flood_pixel_count >> 2] = 0;
 __ZN8DrBitmapC2ERKS_13Bitmap_Format($flood, $bitmap, 4);
 __ZN8DrBitmapC2ERKS_13Bitmap_Format($processed, $bitmap, 4);
 __ZN6DrRectC2Eiiii($agg$tmp218$byval_copy, 0, 0, 0, 0);
 HEAP32[$flood_rect >> 2] = HEAP32[$agg$tmp218$byval_copy >> 2];
 HEAP32[$flood_rect + 4 >> 2] = HEAP32[$agg$tmp218$byval_copy + 4 >> 2];
 HEAP32[$flood_rect + 8 >> 2] = HEAP32[$agg$tmp218$byval_copy + 8 >> 2];
 HEAP32[$flood_rect + 12 >> 2] = HEAP32[$agg$tmp218$byval_copy + 12 >> 2];
 do if (($at_y | $at_x | 0) < 0) label = 4; else {
  $width = $bitmap + 8 | 0;
  $2 = HEAP32[$width >> 2] | 0;
  if (($2 | 0) > ($at_x | 0)) {
   $height = $bitmap + 12 | 0;
   $3 = HEAP32[$height >> 2] | 0;
   if (($3 | 0) > ($at_y | 0)) {
    if (($2 | 0) < 1 | ($3 | 0) < 1) {
     __ZN8DrBitmapC2E13Bitmap_Format($agg$result, 4);
     break;
    }
    if (($2 | 0) == 1 & ($3 | 0) == 1) {
     $4 = HEAPU8[$fill_color >> 0] | HEAPU8[$fill_color + 1 >> 0] << 8 | HEAPU8[$fill_color + 2 >> 0] << 16 | HEAPU8[$fill_color + 3 >> 0] << 24;
     HEAP32[$agg$tmp >> 2] = $4;
     HEAP8[$agg$tmp218$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
     HEAP8[$agg$tmp218$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
     HEAP8[$agg$tmp218$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
     HEAP8[$agg$tmp218$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
     __ZN8DrBitmap8setPixelEii7DrColor($bitmap, 0, 0, $agg$tmp218$byval_copy);
     HEAP32[$agg$tmp25 >> 2] = $4;
     HEAP8[$agg$tmp218$byval_copy >> 0] = HEAP8[$agg$tmp25 >> 0] | 0;
     HEAP8[$agg$tmp218$byval_copy + 1 >> 0] = HEAP8[$agg$tmp25 + 1 >> 0] | 0;
     HEAP8[$agg$tmp218$byval_copy + 2 >> 0] = HEAP8[$agg$tmp25 + 2 >> 0] | 0;
     HEAP8[$agg$tmp218$byval_copy + 3 >> 0] = HEAP8[$agg$tmp25 + 3 >> 0] | 0;
     __ZN8DrBitmap8setPixelEii7DrColor($flood, 0, 0, $agg$tmp218$byval_copy);
     __ZN6DrRectC2Eiiii($agg$tmp218$byval_copy, $at_x, $at_y, 1, 1);
     HEAP32[$flood_rect >> 2] = HEAP32[$agg$tmp218$byval_copy >> 2];
     HEAP32[$flood_rect + 4 >> 2] = HEAP32[$agg$tmp218$byval_copy + 4 >> 2];
     HEAP32[$flood_rect + 8 >> 2] = HEAP32[$agg$tmp218$byval_copy + 8 >> 2];
     HEAP32[$flood_rect + 12 >> 2] = HEAP32[$agg$tmp218$byval_copy + 12 >> 2];
     __ZN8DrBitmapC2ERKS_13Bitmap_Format($agg$result, $flood, 4);
     break;
    }
    __ZNK8DrBitmap8getPixelEii($start_color, $bitmap, $at_x, $at_y);
    $x$0 = 0;
    while (1) {
     if (($x$0 | 0) >= (HEAP32[$width >> 2] | 0)) break;
     $y$0 = 0;
     while (1) {
      if (($y$0 | 0) >= (HEAP32[$height >> 2] | 0)) break;
      __ZN7DrColorC2Ej($agg$tmp42, 0);
      HEAP8[$agg$tmp218$byval_copy >> 0] = HEAP8[$agg$tmp42 >> 0] | 0;
      HEAP8[$agg$tmp218$byval_copy + 1 >> 0] = HEAP8[$agg$tmp42 + 1 >> 0] | 0;
      HEAP8[$agg$tmp218$byval_copy + 2 >> 0] = HEAP8[$agg$tmp42 + 2 >> 0] | 0;
      HEAP8[$agg$tmp218$byval_copy + 3 >> 0] = HEAP8[$agg$tmp42 + 3 >> 0] | 0;
      __ZN8DrBitmap8setPixelEii7DrColor($flood, $x$0, $y$0, $agg$tmp218$byval_copy);
      __ZN7DrColorC2Ej($agg$tmp46, 0);
      HEAP8[$agg$tmp218$byval_copy >> 0] = HEAP8[$agg$tmp46 >> 0] | 0;
      HEAP8[$agg$tmp218$byval_copy + 1 >> 0] = HEAP8[$agg$tmp46 + 1 >> 0] | 0;
      HEAP8[$agg$tmp218$byval_copy + 2 >> 0] = HEAP8[$agg$tmp46 + 2 >> 0] | 0;
      HEAP8[$agg$tmp218$byval_copy + 3 >> 0] = HEAP8[$agg$tmp46 + 3 >> 0] | 0;
      __ZN8DrBitmap8setPixelEii7DrColor($processed, $x$0, $y$0, $agg$tmp218$byval_copy);
      $y$0 = $y$0 + 1 | 0;
     }
     $x$0 = $x$0 + 1 | 0;
    }
    $__end_$i$i = $points + 4 | 0;
    $__value_$i$i$i$i = $points + 8 | 0;
    HEAP32[$points >> 2] = 0;
    HEAP32[$points + 4 >> 2] = 0;
    HEAP32[$points + 8 >> 2] = 0;
    __ZN7DrPointC2Eii($agg$tmp218$byval_copy, $at_x, $at_y);
    $6 = HEAP32[$__end_$i$i >> 2] | 0;
    if ($6 >>> 0 < (HEAP32[$__value_$i$i$i$i >> 2] | 0) >>> 0) {
     $9 = $agg$tmp218$byval_copy;
     $14 = HEAP32[$9 + 4 >> 2] | 0;
     $15 = $6;
     HEAP32[$15 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$15 + 4 >> 2] = $14;
     $incdec$ptr$i = (HEAP32[$__end_$i$i >> 2] | 0) + 8 | 0;
     HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i;
     $$pre313 = $incdec$ptr$i;
    } else {
     __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($points, $agg$tmp218$byval_copy);
     $$pre313 = HEAP32[$__end_$i$i >> 2] | 0;
    }
    $cmp160 = ($type | 0) == 0;
    $20 = $$pre313;
    $50 = HEAP32[$points >> 2] | 0;
    $max_x$0 = $at_x;
    $max_y$0 = $at_y;
    $min_x$0 = $at_x;
    $min_y$0 = $at_y;
    while (1) {
     $__begin$sroa$0$0 = $50;
     $max_x$1 = $max_x$0;
     $max_y$1 = $max_y$0;
     $min_x$1 = $min_x$0;
     $min_y$1 = $min_y$0;
     $processed_some$0$off0 = 0;
     while (1) {
      if (($__begin$sroa$0$0 | 0) == ($20 | 0)) break;
      $point$sroa$0$0$copyload = HEAP32[$__begin$sroa$0$0 >> 2] | 0;
      $point$sroa$21$0$copyload = HEAP32[$__begin$sroa$0$0 + 4 >> 2] | 0;
      __ZNK8DrBitmap8getPixelEii($tmp, $processed, $point$sroa$0$0$copyload, $point$sroa$21$0$copyload);
      __ZN7DrColorC2Ej($agg$tmp218$byval_copy, 1);
      L28 : do if (__ZNK7DrColoreqERKS_($tmp, $agg$tmp218$byval_copy) | 0) {
       $max_x$3 = $max_x$1;
       $max_y$3 = $max_y$1;
       $min_x$3 = $min_x$1;
       $min_y$3 = $min_y$1;
       $processed_some$4$off0 = $processed_some$0$off0;
      } else {
       $22 = HEAPU8[$fill_color >> 0] | HEAPU8[$fill_color + 1 >> 0] << 8 | HEAPU8[$fill_color + 2 >> 0] << 16 | HEAPU8[$fill_color + 3 >> 0] << 24;
       HEAP32[$agg$tmp76 >> 2] = $22;
       HEAP8[$agg$tmp218$byval_copy >> 0] = HEAP8[$agg$tmp76 >> 0] | 0;
       HEAP8[$agg$tmp218$byval_copy + 1 >> 0] = HEAP8[$agg$tmp76 + 1 >> 0] | 0;
       HEAP8[$agg$tmp218$byval_copy + 2 >> 0] = HEAP8[$agg$tmp76 + 2 >> 0] | 0;
       HEAP8[$agg$tmp218$byval_copy + 3 >> 0] = HEAP8[$agg$tmp76 + 3 >> 0] | 0;
       __ZN8DrBitmap8setPixelEii7DrColor($bitmap, $point$sroa$0$0$copyload, $point$sroa$21$0$copyload, $agg$tmp218$byval_copy);
       HEAP32[$agg$tmp80 >> 2] = $22;
       HEAP8[$agg$tmp218$byval_copy >> 0] = HEAP8[$agg$tmp80 >> 0] | 0;
       HEAP8[$agg$tmp218$byval_copy + 1 >> 0] = HEAP8[$agg$tmp80 + 1 >> 0] | 0;
       HEAP8[$agg$tmp218$byval_copy + 2 >> 0] = HEAP8[$agg$tmp80 + 2 >> 0] | 0;
       HEAP8[$agg$tmp218$byval_copy + 3 >> 0] = HEAP8[$agg$tmp80 + 3 >> 0] | 0;
       __ZN8DrBitmap8setPixelEii7DrColor($flood, $point$sroa$0$0$copyload, $point$sroa$21$0$copyload, $agg$tmp218$byval_copy);
       __ZN7DrColorC2Ej($agg$tmp84, 1);
       HEAP8[$agg$tmp218$byval_copy >> 0] = HEAP8[$agg$tmp84 >> 0] | 0;
       HEAP8[$agg$tmp218$byval_copy + 1 >> 0] = HEAP8[$agg$tmp84 + 1 >> 0] | 0;
       HEAP8[$agg$tmp218$byval_copy + 2 >> 0] = HEAP8[$agg$tmp84 + 2 >> 0] | 0;
       HEAP8[$agg$tmp218$byval_copy + 3 >> 0] = HEAP8[$agg$tmp84 + 3 >> 0] | 0;
       __ZN8DrBitmap8setPixelEii7DrColor($processed, $point$sroa$0$0$copyload, $point$sroa$21$0$copyload, $agg$tmp218$byval_copy);
       $spec$select = ($point$sroa$0$0$copyload | 0) < ($min_x$1 | 0) ? $point$sroa$0$0$copyload : $min_x$1;
       $max_x$2 = ($point$sroa$0$0$copyload | 0) > ($max_x$1 | 0) ? $point$sroa$0$0$copyload : $max_x$1;
       $spec$select148 = ($point$sroa$21$0$copyload | 0) < ($min_y$1 | 0) ? $point$sroa$21$0$copyload : $min_y$1;
       $max_y$2 = ($point$sroa$21$0$copyload | 0) > ($max_y$1 | 0) ? $point$sroa$21$0$copyload : $max_y$1;
       HEAP32[$flood_pixel_count >> 2] = (HEAP32[$flood_pixel_count >> 2] | 0) + 1;
       $sub111 = $point$sroa$0$0$copyload + -1 | 0;
       $sub114 = (HEAP32[$width >> 2] | 0) + -1 | 0;
       $add = $point$sroa$0$0$copyload + 1 | 0;
       $cond122 = ($point$sroa$0$0$copyload | 0) < ($sub114 | 0) ? $add : $sub114;
       $sub127 = $point$sroa$21$0$copyload + -1 | 0;
       $cond130 = ($point$sroa$21$0$copyload | 0) > 0 ? $sub127 : 0;
       $sub133 = (HEAP32[$height >> 2] | 0) + -1 | 0;
       $add137 = $point$sroa$21$0$copyload + 1 | 0;
       $cond142 = ($point$sroa$21$0$copyload | 0) < ($sub133 | 0) ? $add137 : $sub133;
       $processed_some$1$off0 = $processed_some$0$off0;
       $x143$0 = ($point$sroa$0$0$copyload | 0) > 0 ? $sub111 : 0;
       while (1) {
        if (($x143$0 | 0) > ($cond122 | 0)) {
         $max_x$3 = $max_x$2;
         $max_y$3 = $max_y$2;
         $min_x$3 = $spec$select;
         $min_y$3 = $spec$select148;
         $processed_some$4$off0 = $processed_some$1$off0;
         break L28;
        }
        $cmp154 = ($x143$0 | 0) == ($point$sroa$0$0$copyload | 0);
        $or$cond152194 = ($x143$0 | 0) == ($sub111 | 0) | ($x143$0 | 0) == ($add | 0);
        $processed_some$2$off0 = $processed_some$1$off0;
        $y148$0 = $cond130;
        while (1) {
         if (($y148$0 | 0) > ($cond142 | 0)) break;
         do if ($cmp154 & ($y148$0 | 0) == ($point$sroa$21$0$copyload | 0)) $processed_some$3$off0 = $processed_some$2$off0; else {
          if ($cmp160) if ($or$cond152194 & (($y148$0 | 0) == ($sub127 | 0) | ($y148$0 | 0) == ($add137 | 0))) {
           $processed_some$3$off0 = $processed_some$2$off0;
           break;
          }
          __ZNK8DrBitmap8getPixelEii($tmp199, $processed, $x143$0, $y148$0);
          __ZN7DrColorC2Ej($agg$tmp218$byval_copy, 0);
          if (__ZNK7DrColoreqERKS_($tmp199, $agg$tmp218$byval_copy) | 0) {
           __ZNK8DrBitmap8getPixelEii($agg$tmp218$byval_copy, $bitmap, $x143$0, $y148$0);
           if (!(__ZN2Dr11IsSameColorERK7DrColorS2_d($start_color, $agg$tmp218$byval_copy, $tolerance) | 0)) {
            $processed_some$3$off0 = $processed_some$2$off0;
            break;
           }
           __ZN7DrPointC2Eii($agg$tmp218$byval_copy, $x143$0, $y148$0);
           $26 = HEAP32[$__end_$i$i >> 2] | 0;
           if ($26 >>> 0 < (HEAP32[$__value_$i$i$i$i >> 2] | 0) >>> 0) {
            $28 = $agg$tmp218$byval_copy;
            $33 = HEAP32[$28 + 4 >> 2] | 0;
            $34 = $26;
            HEAP32[$34 >> 2] = HEAP32[$28 >> 2];
            HEAP32[$34 + 4 >> 2] = $33;
            HEAP32[$__end_$i$i >> 2] = (HEAP32[$__end_$i$i >> 2] | 0) + 8;
           } else __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($points, $agg$tmp218$byval_copy);
           __ZN7DrColorC2Ej($agg$tmp218, 2);
           HEAP8[$agg$tmp218$byval_copy >> 0] = HEAP8[$agg$tmp218 >> 0] | 0;
           HEAP8[$agg$tmp218$byval_copy + 1 >> 0] = HEAP8[$agg$tmp218 + 1 >> 0] | 0;
           HEAP8[$agg$tmp218$byval_copy + 2 >> 0] = HEAP8[$agg$tmp218 + 2 >> 0] | 0;
           HEAP8[$agg$tmp218$byval_copy + 3 >> 0] = HEAP8[$agg$tmp218 + 3 >> 0] | 0;
           __ZN8DrBitmap8setPixelEii7DrColor($processed, $x143$0, $y148$0, $agg$tmp218$byval_copy);
           $processed_some$3$off0 = 1;
          } else $processed_some$3$off0 = $processed_some$2$off0;
         } while (0);
         $processed_some$2$off0 = $processed_some$3$off0;
         $y148$0 = $y148$0 + 1 | 0;
        }
        $processed_some$1$off0 = $processed_some$2$off0;
        $x143$0 = $x143$0 + 1 | 0;
       }
      } while (0);
      $__begin$sroa$0$0 = $__begin$sroa$0$0 + 8 | 0;
      $max_x$1 = $max_x$3;
      $max_y$1 = $max_y$3;
      $min_x$1 = $min_x$3;
      $min_y$1 = $min_y$3;
      $processed_some$0$off0 = $processed_some$4$off0;
     }
     $it$sroa$0$0 = HEAP32[$points >> 2] | 0;
     while (1) {
      $39 = HEAP32[$__end_$i$i >> 2] | 0;
      $40 = $it$sroa$0$0;
      if (($39 | 0) == ($40 | 0)) break;
      __ZNK8DrBitmap8getPixelEii($tmp254, $processed, HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0);
      __ZN7DrColorC2Ej($agg$tmp218$byval_copy, 1);
      if (__ZNK7DrColoreqERKS_($tmp254, $agg$tmp218$byval_copy) | 0) {
       $43 = HEAP32[$points >> 2] | 0;
       $add$ptr$i = $43 + ($it$sroa$0$0 - $43 >> 3 << 3) | 0;
       $45 = HEAP32[$__end_$i$i >> 2] | 0;
       $add$ptr$pn$i = $add$ptr$i;
       while (1) {
        $__first$addr$0$i$i$i = $add$ptr$pn$i + 8 | 0;
        if (($__first$addr$0$i$i$i | 0) == ($45 | 0)) break;
        __ZN7DrPointaSERKS_($add$ptr$pn$i, $__first$addr$0$i$i$i) | 0;
        $add$ptr$pn$i = $__first$addr$0$i$i$i;
       }
       HEAP32[$__end_$i$i >> 2] = $add$ptr$pn$i;
       $it$sroa$0$1$in = $add$ptr$i;
      } else $it$sroa$0$1$in = $40 + 8 | 0;
      $it$sroa$0$0 = $it$sroa$0$1$in;
     }
     $47 = HEAP32[$points >> 2] | 0;
     if ($processed_some$0$off0 & ($47 | 0) != ($39 | 0)) {
      $20 = $39;
      $50 = $47;
      $max_x$0 = $max_x$1;
      $max_y$0 = $max_y$1;
      $min_x$0 = $min_x$1;
      $min_y$0 = $min_y$1;
     } else break;
    }
    __ZN6DrRectC2Eiiii($agg$tmp218$byval_copy, $min_x$1, $min_y$1, $max_x$1 + 1 - $min_x$1 | 0, 1 - $min_y$1 + $max_y$1 | 0);
    HEAP32[$flood_rect >> 2] = HEAP32[$agg$tmp218$byval_copy >> 2];
    HEAP32[$flood_rect + 4 >> 2] = HEAP32[$agg$tmp218$byval_copy + 4 >> 2];
    HEAP32[$flood_rect + 8 >> 2] = HEAP32[$agg$tmp218$byval_copy + 8 >> 2];
    HEAP32[$flood_rect + 12 >> 2] = HEAP32[$agg$tmp218$byval_copy + 12 >> 2];
    __ZN8DrBitmapC2ERKS_13Bitmap_Format($agg$result, $flood, 4);
    __ZNSt3__213__vector_baseI7DrPointNS_9allocatorIS1_EEED2Ev($points);
   } else label = 4;
  } else label = 4;
 } while (0);
 if ((label | 0) == 4) __ZN8DrBitmapC2E13Bitmap_Format($agg$result, 4);
 __ZN8DrBitmapD2Ev($processed);
 __ZN8DrBitmapD2Ev($flood);
 STACKTOP = sp;
 return;
}

function __ZN13TPPLPartition11RemoveHolesEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($this, $inpolys, $outpolys) {
 $this = $this | 0;
 $inpolys = $inpolys | 0;
 $outpolys = $outpolys | 0;
 var $0 = 0, $11 = 0, $13 = 0.0, $15 = 0, $18 = 0, $2 = 0, $5 = 0, $7 = 0.0, $__next_$i$i$i = 0, $__next_$i$i93 = 0, $__value_$i124 = 0, $__value_$i126 = 0, $__value_$i139 = 0, $__value_$i149 = 0, $__value_$i155 = 0, $add144 = 0, $agg$tmp = 0, $agg$tmp$i = 0, $agg$tmp$i$byval_copy = 0, $agg$tmp2$i = 0, $agg$tmp316 = 0, $agg$tmp316$byval_copy = 0, $bestpolypoint = 0, $call137 = 0, $call141 = 0, $call159 = 0, $call205 = 0, $call215 = 0, $call251 = 0, $call265 = 0, $call267 = 0, $call288 = 0, $call290 = 0, $call305 = 0, $call307 = 0, $call92 = 0, $cmp75 = 0, $hasholes$1$off0 = 0, $hasholes$3$off0 = 0, $holeiter$sroa$0$0 = 0, $holeiter$sroa$0$1 = 0, $holeiter$sroa$0$3 = 0, $holeiter$sroa$0$5 = 0, $holepoint = 0, $holepointindex$0 = 0, $holepointindex$1 = 0, $holepointindex$3 = 0, $holepointindex$5 = 0, $i$0 = 0, $i$1 = 0, $i$1$be = 0, $i$1$ph = 0, $i$1$ph239 = 0, $i$3 = 0, $i$4 = 0, $i2$0 = 0, $i2$1 = 0, $i2$2 = 0, $i2$3 = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$0$in$in = 0, $iter$sroa$0$1 = 0, $iter$sroa$0$1$in$in = 0, $iter$sroa$0$2 = 0, $iter$sroa$0$2$in$in = 0, $iter$sroa$0$3 = 0, $iter$sroa$0$3$in$in = 0, $iter$sroa$0$4 = 0, $iter$sroa$0$4$in$in = 0, $iter2$sroa$0$0 = 0, $iter2$sroa$0$0$in$in = 0, $linep1 = 0, $linep2 = 0, $newpoly = 0, $pointfound$0$off0 = 0, $pointfound$1$off0$ph = 0, $pointfound$1$off0$ph237 = 0, $pointfound$3$off0 = 0, $polyiter$sroa$0$0 = 0, $polyiter$sroa$0$1 = 0, $polyiter$sroa$0$2$ph = 0, $polyiter$sroa$0$4 = 0, $polypoint = 0, $polypointindex$0 = 0, $polypointindex$1 = 0, $polypointindex$2$ph = 0, $polypointindex$4 = 0, $polys = 0, $retval$0 = 0, $sub = 0, $v1$sroa$0$0$copyload = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $agg$tmp316$byval_copy = sp + 144 | 0;
 $agg$tmp$i$byval_copy = sp + 120 | 0;
 $agg$tmp$i = sp + 204 | 0;
 $agg$tmp2$i = sp + 200 | 0;
 $polys = sp + 188 | 0;
 $holepoint = sp + 96 | 0;
 $polypoint = sp + 72 | 0;
 $bestpolypoint = sp + 48 | 0;
 $linep1 = sp + 24 | 0;
 $linep2 = sp;
 $newpoly = sp + 168 | 0;
 $agg$tmp = sp + 184 | 0;
 $agg$tmp316 = sp + 180 | 0;
 HEAP32[$polys >> 2] = $polys;
 $__next_$i$i$i = $polys + 4 | 0;
 HEAP32[$__next_$i$i$i >> 2] = $polys;
 HEAP32[$polys + 8 >> 2] = 0;
 __ZN8TPPLPolyC2Ev($newpoly);
 $__next_$i$i93 = $inpolys + 4 | 0;
 $iter$sroa$0$0$in$in = $__next_$i$i93;
 while (1) {
  $iter$sroa$0$0 = HEAP32[$iter$sroa$0$0$in$in >> 2] | 0;
  $0 = $iter$sroa$0$0;
  if (($inpolys | 0) == ($0 | 0)) {
   label = 3;
   break;
  }
  if (__ZNK8TPPLPoly6IsHoleEv($iter$sroa$0$0 + 8 | 0) | 0) {
   label = 7;
   break;
  } else $iter$sroa$0$0$in$in = $0 + 4 | 0;
 }
 L4 : do if ((label | 0) == 3) {
  $iter$sroa$0$1$in$in = $__next_$i$i93;
  while (1) {
   $iter$sroa$0$1 = HEAP32[$iter$sroa$0$1$in$in >> 2] | 0;
   $2 = $iter$sroa$0$1;
   if (($inpolys | 0) == ($2 | 0)) {
    $retval$0 = 1;
    break L4;
   }
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($outpolys, $iter$sroa$0$1 + 8 | 0);
   $iter$sroa$0$1$in$in = $2 + 4 | 0;
  }
 } else if ((label | 0) == 7) {
  if (($polys | 0) != ($inpolys | 0)) {
   HEAP32[$agg$tmp$i >> 2] = HEAP32[$__next_$i$i93 >> 2];
   HEAP32[$agg$tmp2$i >> 2] = $inpolys;
   HEAP32[$agg$tmp$i$byval_copy >> 2] = HEAP32[$agg$tmp$i >> 2];
   HEAP32[$agg$tmp316$byval_copy >> 2] = HEAP32[$agg$tmp2$i >> 2];
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE6assignINS_21__list_const_iteratorIS1_PvEEEEvT_S9_PNS_9enable_ifIXsr19__is_input_iteratorIS9_EE5valueEvE4typeE($polys, $agg$tmp$i$byval_copy, $agg$tmp316$byval_copy, 0);
  }
  $holeiter$sroa$0$0 = 0;
  $holepointindex$0 = 0;
  $polyiter$sroa$0$0 = 0;
  $polypointindex$0 = 0;
  while (1) {
   $hasholes$1$off0 = 0;
   $holeiter$sroa$0$1 = $holeiter$sroa$0$0;
   $holepointindex$1 = $holepointindex$0;
   $iter$sroa$0$2$in$in = $__next_$i$i$i;
   while (1) {
    $iter$sroa$0$2 = HEAP32[$iter$sroa$0$2$in$in >> 2] | 0;
    $5 = $iter$sroa$0$2;
    if (($polys | 0) == ($5 | 0)) break;
    $__value_$i124 = $iter$sroa$0$2 + 8 | 0;
    L18 : do if (__ZNK8TPPLPoly6IsHoleEv($__value_$i124) | 0) {
     $holeiter$sroa$0$3 = $hasholes$1$off0 ? $holeiter$sroa$0$1 : $iter$sroa$0$2;
     $holepointindex$3 = $hasholes$1$off0 ? $holepointindex$1 : 0;
     $i$0 = 0;
     while (1) {
      if (($i$0 | 0) >= (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i124) | 0)) {
       $hasholes$3$off0 = 1;
       $holeiter$sroa$0$5 = $holeiter$sroa$0$3;
       $holepointindex$5 = $holepointindex$3;
       break L18;
      }
      $7 = +HEAPF64[(__ZN8TPPLPoly8GetPointEl($__value_$i124, $i$0) | 0) >> 3];
      $cmp75 = $7 > +HEAPF64[(__ZN8TPPLPoly8GetPointEl($holeiter$sroa$0$3 + 8 | 0, $holepointindex$3) | 0) >> 3];
      $holeiter$sroa$0$3 = $cmp75 ? $iter$sroa$0$2 : $holeiter$sroa$0$3;
      $holepointindex$3 = $cmp75 ? $i$0 : $holepointindex$3;
      $i$0 = $i$0 + 1 | 0;
     }
    } else {
     $hasholes$3$off0 = $hasholes$1$off0;
     $holeiter$sroa$0$5 = $holeiter$sroa$0$1;
     $holepointindex$5 = $holepointindex$1;
    } while (0);
    $hasholes$1$off0 = $hasholes$3$off0;
    $holeiter$sroa$0$1 = $holeiter$sroa$0$5;
    $holepointindex$1 = $holepointindex$5;
    $iter$sroa$0$2$in$in = $5 + 4 | 0;
   }
   if (!$hasholes$1$off0) break;
   $__value_$i139 = $holeiter$sroa$0$1 + 8 | 0;
   $call92 = __ZN8TPPLPoly8GetPointEl($__value_$i139, $holepointindex$1) | 0;
   HEAP32[$holepoint >> 2] = HEAP32[$call92 >> 2];
   HEAP32[$holepoint + 4 >> 2] = HEAP32[$call92 + 4 >> 2];
   HEAP32[$holepoint + 8 >> 2] = HEAP32[$call92 + 8 >> 2];
   HEAP32[$holepoint + 12 >> 2] = HEAP32[$call92 + 12 >> 2];
   HEAP32[$holepoint + 16 >> 2] = HEAP32[$call92 + 16 >> 2];
   HEAP32[$holepoint + 20 >> 2] = HEAP32[$call92 + 20 >> 2];
   $iter$sroa$0$3$in$in = $__next_$i$i$i;
   $pointfound$0$off0 = 0;
   $polyiter$sroa$0$1 = $polyiter$sroa$0$0;
   $polypointindex$1 = $polypointindex$0;
   while (1) {
    $iter$sroa$0$3 = HEAP32[$iter$sroa$0$3$in$in >> 2] | 0;
    $11 = $iter$sroa$0$3;
    if (($polys | 0) == ($11 | 0)) break;
    $__value_$i155 = $iter$sroa$0$3 + 8 | 0;
    L29 : do if (__ZNK8TPPLPoly6IsHoleEv($__value_$i155) | 0) {
     $pointfound$3$off0 = $pointfound$0$off0;
     $polyiter$sroa$0$4 = $polyiter$sroa$0$1;
     $polypointindex$4 = $polypointindex$1;
    } else {
     $i$1$ph = 0;
     $pointfound$1$off0$ph = $pointfound$0$off0;
     $polyiter$sroa$0$2$ph = $polyiter$sroa$0$1;
     $polypointindex$2$ph = $polypointindex$1;
     while (1) {
      $i$1$ph239 = $i$1$ph;
      $pointfound$1$off0$ph237 = $pointfound$1$off0$ph;
      L33 : while (1) {
       $i$1 = $i$1$ph239;
       L35 : while (1) {
        if (($i$1 | 0) >= (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i155) | 0)) {
         $pointfound$3$off0 = $pointfound$1$off0$ph237;
         $polyiter$sroa$0$4 = $polyiter$sroa$0$2$ph;
         $polypointindex$4 = $polypointindex$2$ph;
         break L29;
        }
        $13 = +HEAPF64[(__ZN8TPPLPoly8GetPointEl($__value_$i155, $i$1) | 0) >> 3];
        L38 : do if (!($13 <= +HEAPF64[$holepoint >> 3])) {
         $sub = $i$1 + -1 + (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i155) | 0) | 0;
         $call137 = __ZN8TPPLPoly8GetPointEl($__value_$i155, ($sub | 0) % (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i155) | 0) | 0) | 0;
         $call141 = __ZN8TPPLPoly8GetPointEl($__value_$i155, $i$1) | 0;
         $add144 = $i$1 + 1 | 0;
         if (__ZN13TPPLPartition6InConeER9TPPLPointS1_S1_S1_($this, $call137, $call141, __ZN8TPPLPoly8GetPointEl($__value_$i155, ($add144 | 0) % (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i155) | 0) | 0) | 0, $holepoint) | 0) {
          $call159 = __ZN8TPPLPoly8GetPointEl($__value_$i155, $i$1) | 0;
          HEAP32[$polypoint >> 2] = HEAP32[$call159 >> 2];
          HEAP32[$polypoint + 4 >> 2] = HEAP32[$call159 + 4 >> 2];
          HEAP32[$polypoint + 8 >> 2] = HEAP32[$call159 + 8 >> 2];
          HEAP32[$polypoint + 12 >> 2] = HEAP32[$call159 + 12 >> 2];
          HEAP32[$polypoint + 16 >> 2] = HEAP32[$call159 + 16 >> 2];
          HEAP32[$polypoint + 20 >> 2] = HEAP32[$call159 + 20 >> 2];
          if ($pointfound$1$off0$ph237) {
           __ZNK9TPPLPointmiERKS_($agg$tmp$i$byval_copy, $polypoint, $holepoint);
           __ZN13TPPLPartition9NormalizeERK9TPPLPoint($agg$tmp316$byval_copy, 0, $agg$tmp$i$byval_copy);
           $v1$sroa$0$0$copyload = +HEAPF64[$agg$tmp316$byval_copy >> 3];
           __ZNK9TPPLPointmiERKS_($agg$tmp$i$byval_copy, $bestpolypoint, $holepoint);
           __ZN13TPPLPartition9NormalizeERK9TPPLPoint($agg$tmp316$byval_copy, 0, $agg$tmp$i$byval_copy);
           if (+HEAPF64[$agg$tmp316$byval_copy >> 3] > $v1$sroa$0$0$copyload) break L35;
          }
          $iter2$sroa$0$0$in$in = $__next_$i$i$i;
          while (1) {
           $iter2$sroa$0$0 = HEAP32[$iter2$sroa$0$0$in$in >> 2] | 0;
           $15 = $iter2$sroa$0$0;
           if (($polys | 0) == ($15 | 0)) break L33;
           $__value_$i149 = $iter2$sroa$0$0 + 8 | 0;
           L47 : do if (!(__ZNK8TPPLPoly6IsHoleEv($__value_$i149) | 0)) {
            $i2$0 = 0;
            while (1) {
             if (($i2$0 | 0) >= (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i149) | 0)) break L47;
             $call205 = __ZN8TPPLPoly8GetPointEl($__value_$i149, $i2$0) | 0;
             HEAP32[$linep1 >> 2] = HEAP32[$call205 >> 2];
             HEAP32[$linep1 + 4 >> 2] = HEAP32[$call205 + 4 >> 2];
             HEAP32[$linep1 + 8 >> 2] = HEAP32[$call205 + 8 >> 2];
             HEAP32[$linep1 + 12 >> 2] = HEAP32[$call205 + 12 >> 2];
             HEAP32[$linep1 + 16 >> 2] = HEAP32[$call205 + 16 >> 2];
             HEAP32[$linep1 + 20 >> 2] = HEAP32[$call205 + 20 >> 2];
             $i2$0 = $i2$0 + 1 | 0;
             $call215 = __ZN8TPPLPoly8GetPointEl($__value_$i149, ($i2$0 | 0) % (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i149) | 0) | 0) | 0;
             HEAP32[$linep2 >> 2] = HEAP32[$call215 >> 2];
             HEAP32[$linep2 + 4 >> 2] = HEAP32[$call215 + 4 >> 2];
             HEAP32[$linep2 + 8 >> 2] = HEAP32[$call215 + 8 >> 2];
             HEAP32[$linep2 + 12 >> 2] = HEAP32[$call215 + 12 >> 2];
             HEAP32[$linep2 + 16 >> 2] = HEAP32[$call215 + 16 >> 2];
             HEAP32[$linep2 + 20 >> 2] = HEAP32[$call215 + 20 >> 2];
             if (__ZN13TPPLPartition10IntersectsER9TPPLPointS1_S1_S1_(0, $holepoint, $polypoint, $linep1, $linep2) | 0) {
              $i$1$be = $add144;
              break L38;
             }
            }
           } while (0);
           $iter2$sroa$0$0$in$in = $15 + 4 | 0;
          }
         } else $i$1$be = $add144;
        } else $i$1$be = $i$1 + 1 | 0; while (0);
        $i$1 = $i$1$be;
       }
       $i$1$ph239 = $add144;
       $pointfound$1$off0$ph237 = 1;
      }
      HEAP32[$bestpolypoint >> 2] = HEAP32[$polypoint >> 2];
      HEAP32[$bestpolypoint + 4 >> 2] = HEAP32[$polypoint + 4 >> 2];
      HEAP32[$bestpolypoint + 8 >> 2] = HEAP32[$polypoint + 8 >> 2];
      HEAP32[$bestpolypoint + 12 >> 2] = HEAP32[$polypoint + 12 >> 2];
      HEAP32[$bestpolypoint + 16 >> 2] = HEAP32[$polypoint + 16 >> 2];
      HEAP32[$bestpolypoint + 20 >> 2] = HEAP32[$polypoint + 20 >> 2];
      $i$1$ph = $add144;
      $pointfound$1$off0$ph = 1;
      $polyiter$sroa$0$2$ph = $iter$sroa$0$3;
      $polypointindex$2$ph = $i$1;
     }
    } while (0);
    $iter$sroa$0$3$in$in = $11 + 4 | 0;
    $pointfound$0$off0 = $pointfound$3$off0;
    $polyiter$sroa$0$1 = $polyiter$sroa$0$4;
    $polypointindex$1 = $polypointindex$4;
   }
   if (!$pointfound$0$off0) {
    $retval$0 = 0;
    break L4;
   }
   $call251 = __ZNK8TPPLPoly12GetNumPointsEv($__value_$i139) | 0;
   $__value_$i126 = $polyiter$sroa$0$1 + 8 | 0;
   __ZN8TPPLPoly4InitEl($newpoly, $call251 + 2 + (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i126) | 0) | 0);
   $i2$1 = 0;
   while (1) {
    if (($i2$1 | 0) > ($polypointindex$1 | 0)) break;
    $call265 = __ZN8TPPLPoly8GetPointEl($__value_$i126, $i2$1) | 0;
    $call267 = __ZN8TPPLPolyixEi($newpoly, $i2$1) | 0;
    HEAP32[$call267 >> 2] = HEAP32[$call265 >> 2];
    HEAP32[$call267 + 4 >> 2] = HEAP32[$call265 + 4 >> 2];
    HEAP32[$call267 + 8 >> 2] = HEAP32[$call265 + 8 >> 2];
    HEAP32[$call267 + 12 >> 2] = HEAP32[$call265 + 12 >> 2];
    HEAP32[$call267 + 16 >> 2] = HEAP32[$call265 + 16 >> 2];
    HEAP32[$call267 + 20 >> 2] = HEAP32[$call265 + 20 >> 2];
    $i2$1 = $i2$1 + 1 | 0;
   }
   $i$3 = 0;
   $i2$2 = $i2$1;
   while (1) {
    if (($i$3 | 0) > (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i139) | 0)) break;
    $call288 = __ZN8TPPLPoly8GetPointEl($__value_$i139, ($i$3 + $holepointindex$1 | 0) % (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i139) | 0) | 0) | 0;
    $call290 = __ZN8TPPLPolyixEi($newpoly, $i2$2) | 0;
    HEAP32[$call290 >> 2] = HEAP32[$call288 >> 2];
    HEAP32[$call290 + 4 >> 2] = HEAP32[$call288 + 4 >> 2];
    HEAP32[$call290 + 8 >> 2] = HEAP32[$call288 + 8 >> 2];
    HEAP32[$call290 + 12 >> 2] = HEAP32[$call288 + 12 >> 2];
    HEAP32[$call290 + 16 >> 2] = HEAP32[$call288 + 16 >> 2];
    HEAP32[$call290 + 20 >> 2] = HEAP32[$call288 + 20 >> 2];
    $i$3 = $i$3 + 1 | 0;
    $i2$2 = $i2$2 + 1 | 0;
   }
   $i$4 = $polypointindex$1;
   $i2$3 = $i2$2;
   while (1) {
    if (($i$4 | 0) >= (__ZNK8TPPLPoly12GetNumPointsEv($__value_$i126) | 0)) break;
    $call305 = __ZN8TPPLPoly8GetPointEl($__value_$i126, $i$4) | 0;
    $call307 = __ZN8TPPLPolyixEi($newpoly, $i2$3) | 0;
    HEAP32[$call307 >> 2] = HEAP32[$call305 >> 2];
    HEAP32[$call307 + 4 >> 2] = HEAP32[$call305 + 4 >> 2];
    HEAP32[$call307 + 8 >> 2] = HEAP32[$call305 + 8 >> 2];
    HEAP32[$call307 + 12 >> 2] = HEAP32[$call305 + 12 >> 2];
    HEAP32[$call307 + 16 >> 2] = HEAP32[$call305 + 16 >> 2];
    HEAP32[$call307 + 20 >> 2] = HEAP32[$call305 + 20 >> 2];
    $i$4 = $i$4 + 1 | 0;
    $i2$3 = $i2$3 + 1 | 0;
   }
   HEAP32[$agg$tmp >> 2] = $holeiter$sroa$0$1;
   HEAP32[$agg$tmp316$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEE($polys, $agg$tmp316$byval_copy) | 0;
   HEAP32[$agg$tmp316 >> 2] = $polyiter$sroa$0$1;
   HEAP32[$agg$tmp316$byval_copy >> 2] = HEAP32[$agg$tmp316 >> 2];
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEE($polys, $agg$tmp316$byval_copy) | 0;
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($polys, $newpoly);
   $holeiter$sroa$0$0 = $holeiter$sroa$0$1;
   $holepointindex$0 = $holepointindex$1;
   $polyiter$sroa$0$0 = $polyiter$sroa$0$1;
   $polypointindex$0 = $polypointindex$1;
  }
  $iter$sroa$0$4$in$in = $__next_$i$i$i;
  while (1) {
   $iter$sroa$0$4 = HEAP32[$iter$sroa$0$4$in$in >> 2] | 0;
   $18 = $iter$sroa$0$4;
   if (($polys | 0) == ($18 | 0)) {
    $retval$0 = 1;
    break L4;
   }
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($outpolys, $iter$sroa$0$4 + 8 | 0);
   $iter$sroa$0$4$in$in = $18 + 4 | 0;
  }
 } while (0);
 __ZN8TPPLPolyD2Ev($newpoly);
 __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($polys);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbi__parse_entropy_coded_data($z) {
 $z = $z | 0;
 var $155 = 0, $191 = 0, $241 = 0, $68 = 0, $add$ptr138 = 0, $add$ptr33 = 0, $cmp183 = 0, $data = 0, $data211 = 0, $data325 = 0, $data61 = 0, $dec = 0, $dec154 = 0, $dec248 = 0, $dec355 = 0, $h = 0, $h197 = 0, $ha = 0, $ha103 = 0, $ha233 = 0, $i = 0, $i186 = 0, $i276 = 0, $i57 = 0, $j = 0, $j187 = 0, $j277 = 0, $j58 = 0, $k = 0, $k278 = 0, $mul100 = 0, $mul317 = 0, $mul323 = 0, $mul94 = 0, $n = 0, $n188 = 0, $n296 = 0, $n75 = 0, $retval = 0, $todo = 0, $todo153 = 0, $todo247 = 0, $todo354 = 0, $w = 0, $w191 = 0, $x2 = 0, $x2313 = 0, $x279 = 0, $x59 = 0, $y2 = 0, $y2319 = 0, $y280 = 0, $y60 = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $retval = sp + 384 | 0;
 $z$addr = sp + 380 | 0;
 $i = sp + 376 | 0;
 $j = sp + 372 | 0;
 $data = sp + 128 | 0;
 $n = sp + 368 | 0;
 $w = sp + 364 | 0;
 $h = sp + 360 | 0;
 $ha = sp + 356 | 0;
 $i57 = sp + 352 | 0;
 $j58 = sp + 348 | 0;
 $k = sp + 344 | 0;
 $x59 = sp + 340 | 0;
 $y60 = sp + 336 | 0;
 $data61 = sp;
 $n75 = sp + 332 | 0;
 $x2 = sp + 328 | 0;
 $y2 = sp + 324 | 0;
 $ha103 = sp + 320 | 0;
 $i186 = sp + 316 | 0;
 $j187 = sp + 312 | 0;
 $n188 = sp + 308 | 0;
 $w191 = sp + 304 | 0;
 $h197 = sp + 300 | 0;
 $data211 = sp + 296 | 0;
 $ha233 = sp + 292 | 0;
 $i276 = sp + 288 | 0;
 $j277 = sp + 284 | 0;
 $k278 = sp + 280 | 0;
 $x279 = sp + 276 | 0;
 $y280 = sp + 272 | 0;
 $n296 = sp + 268 | 0;
 $x2313 = sp + 264 | 0;
 $y2319 = sp + 260 | 0;
 $data325 = sp + 256 | 0;
 HEAP32[$z$addr >> 2] = $z;
 _stbi__jpeg_reset(HEAP32[$z$addr >> 2] | 0);
 $cmp183 = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18416 >> 2] | 0) == 1;
 if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18380 >> 2] | 0)) {
  if ($cmp183) {
   HEAP32[$n >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18420 >> 2];
   HEAP32[$w >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 28 >> 2] | 0) + 7 >> 3;
   HEAP32[$h >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 32 >> 2] | 0) + 7 >> 3;
   HEAP32[$j >> 2] = 0;
   L5 : while (1) {
    if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$h >> 2] | 0)) {
     label = 18;
     break;
    }
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$w >> 2] | 0)) break;
     HEAP32[$ha >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 20 >> 2];
     if (!(_stbi__jpeg_decode_block(HEAP32[$z$addr >> 2] | 0, $data, (HEAP32[$z$addr >> 2] | 0) + 4 + ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$z$addr >> 2] | 0) + 6724 + ((HEAP32[$ha >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$z$addr >> 2] | 0) + 13956 + (HEAP32[$ha >> 2] << 10) | 0, HEAP32[$n >> 2] | 0, (HEAP32[$z$addr >> 2] | 0) + 13444 + (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 12 >> 2] << 7) | 0) | 0)) {
      label = 8;
      break L5;
     }
     $add$ptr33 = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 44 >> 2] | 0) + ((Math_imul(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[$j >> 2] | 0) | 0) << 3) | 0;
     FUNCTION_TABLE_viii[HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18444 >> 2] & 3]($add$ptr33 + (HEAP32[$i >> 2] << 3) | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, $data);
     $todo = (HEAP32[$z$addr >> 2] | 0) + 18440 | 0;
     $dec = (HEAP32[$todo >> 2] | 0) + -1 | 0;
     HEAP32[$todo >> 2] = $dec;
     if (($dec | 0) <= 0) {
      if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18368 >> 2] | 0) < 24) _stbi__grow_buffer_unsafe(HEAP32[$z$addr >> 2] | 0);
      if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) < 208) {
       label = 14;
       break L5;
      }
      if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) > 215) {
       label = 14;
       break L5;
      }
      _stbi__jpeg_reset(HEAP32[$z$addr >> 2] | 0);
     }
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   if ((label | 0) == 8) {
    HEAP32[$retval >> 2] = 0;
    $241 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $241 | 0;
   } else if ((label | 0) == 14) {
    HEAP32[$retval >> 2] = 1;
    $241 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $241 | 0;
   } else if ((label | 0) == 18) {
    HEAP32[$retval >> 2] = 1;
    $241 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $241 | 0;
   }
  }
  HEAP32[$j58 >> 2] = 0;
  L29 : while (1) {
   if ((HEAP32[$j58 >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18064 >> 2] | 0)) {
    label = 43;
    break;
   }
   HEAP32[$i57 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i57 >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18060 >> 2] | 0)) break;
    HEAP32[$k >> 2] = 0;
    while (1) {
     $68 = HEAP32[$z$addr >> 2] | 0;
     if ((HEAP32[$k >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18416 >> 2] | 0)) break;
     HEAP32[$n75 >> 2] = HEAP32[$68 + 18420 + (HEAP32[$k >> 2] << 2) >> 2];
     HEAP32[$y60 >> 2] = 0;
     while (1) {
      if ((HEAP32[$y60 >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0)) break;
      HEAP32[$x59 >> 2] = 0;
      while (1) {
       if ((HEAP32[$x59 >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0)) break;
       $mul94 = Math_imul(HEAP32[$i57 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0;
       HEAP32[$x2 >> 2] = $mul94 + (HEAP32[$x59 >> 2] | 0) << 3;
       $mul100 = Math_imul(HEAP32[$j58 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0;
       HEAP32[$y2 >> 2] = $mul100 + (HEAP32[$y60 >> 2] | 0) << 3;
       HEAP32[$ha103 >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 20 >> 2];
       if (!(_stbi__jpeg_decode_block(HEAP32[$z$addr >> 2] | 0, $data61, (HEAP32[$z$addr >> 2] | 0) + 4 + ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$z$addr >> 2] | 0) + 6724 + ((HEAP32[$ha103 >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$z$addr >> 2] | 0) + 13956 + (HEAP32[$ha103 >> 2] << 10) | 0, HEAP32[$n75 >> 2] | 0, (HEAP32[$z$addr >> 2] | 0) + 13444 + (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 12 >> 2] << 7) | 0) | 0)) {
        label = 30;
        break L29;
       }
       $add$ptr138 = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 44 >> 2] | 0) + (Math_imul(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[$y2 >> 2] | 0) | 0) | 0;
       FUNCTION_TABLE_viii[HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18444 >> 2] & 3]($add$ptr138 + (HEAP32[$x2 >> 2] | 0) | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n75 >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, $data61);
       HEAP32[$x59 >> 2] = (HEAP32[$x59 >> 2] | 0) + 1;
      }
      HEAP32[$y60 >> 2] = (HEAP32[$y60 >> 2] | 0) + 1;
     }
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    $todo153 = $68 + 18440 | 0;
    $dec154 = (HEAP32[$todo153 >> 2] | 0) + -1 | 0;
    HEAP32[$todo153 >> 2] = $dec154;
    if (($dec154 | 0) <= 0) {
     if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18368 >> 2] | 0) < 24) _stbi__grow_buffer_unsafe(HEAP32[$z$addr >> 2] | 0);
     if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) < 208) {
      label = 39;
      break L29;
     }
     if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) > 215) {
      label = 39;
      break L29;
     }
     _stbi__jpeg_reset(HEAP32[$z$addr >> 2] | 0);
    }
    HEAP32[$i57 >> 2] = (HEAP32[$i57 >> 2] | 0) + 1;
   }
   HEAP32[$j58 >> 2] = (HEAP32[$j58 >> 2] | 0) + 1;
  }
  if ((label | 0) == 30) {
   HEAP32[$retval >> 2] = 0;
   $241 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $241 | 0;
  } else if ((label | 0) == 39) {
   HEAP32[$retval >> 2] = 1;
   $241 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $241 | 0;
  } else if ((label | 0) == 43) {
   HEAP32[$retval >> 2] = 1;
   $241 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $241 | 0;
  }
 }
 if ($cmp183) {
  HEAP32[$n188 >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18420 >> 2];
  HEAP32[$w191 >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n188 >> 2] | 0) * 72 | 0) + 28 >> 2] | 0) + 7 >> 3;
  HEAP32[$h197 >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n188 >> 2] | 0) * 72 | 0) + 32 >> 2] | 0) + 7 >> 3;
  HEAP32[$j187 >> 2] = 0;
  L67 : while (1) {
   if ((HEAP32[$j187 >> 2] | 0) >= (HEAP32[$h197 >> 2] | 0)) {
    label = 63;
    break;
   }
   HEAP32[$i186 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i186 >> 2] | 0) >= (HEAP32[$w191 >> 2] | 0)) break;
    HEAP32[$data211 >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n188 >> 2] | 0) * 72 | 0) + 60 >> 2] | 0) + ((HEAP32[$i186 >> 2] | 0) + (Math_imul(HEAP32[$j187 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n188 >> 2] | 0) * 72 | 0) + 64 >> 2] | 0) | 0) << 6 << 1);
    $155 = HEAP32[$z$addr >> 2] | 0;
    if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18384 >> 2] | 0)) {
     if (!(_stbi__jpeg_decode_block_prog_dc($155, HEAP32[$data211 >> 2] | 0, (HEAP32[$z$addr >> 2] | 0) + 4 + ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n188 >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) * 1680 | 0) | 0, HEAP32[$n188 >> 2] | 0) | 0)) {
      label = 51;
      break L67;
     }
    } else {
     HEAP32[$ha233 >> 2] = HEAP32[$155 + 18076 + ((HEAP32[$n188 >> 2] | 0) * 72 | 0) + 20 >> 2];
     if (!(_stbi__jpeg_decode_block_prog_ac(HEAP32[$z$addr >> 2] | 0, HEAP32[$data211 >> 2] | 0, (HEAP32[$z$addr >> 2] | 0) + 6724 + ((HEAP32[$ha233 >> 2] | 0) * 1680 | 0) | 0, (HEAP32[$z$addr >> 2] | 0) + 13956 + (HEAP32[$ha233 >> 2] << 10) | 0) | 0)) {
      label = 53;
      break L67;
     }
    }
    $todo247 = (HEAP32[$z$addr >> 2] | 0) + 18440 | 0;
    $dec248 = (HEAP32[$todo247 >> 2] | 0) + -1 | 0;
    HEAP32[$todo247 >> 2] = $dec248;
    if (($dec248 | 0) <= 0) {
     if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18368 >> 2] | 0) < 24) _stbi__grow_buffer_unsafe(HEAP32[$z$addr >> 2] | 0);
     if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) < 208) {
      label = 59;
      break L67;
     }
     if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) > 215) {
      label = 59;
      break L67;
     }
     _stbi__jpeg_reset(HEAP32[$z$addr >> 2] | 0);
    }
    HEAP32[$i186 >> 2] = (HEAP32[$i186 >> 2] | 0) + 1;
   }
   HEAP32[$j187 >> 2] = (HEAP32[$j187 >> 2] | 0) + 1;
  }
  if ((label | 0) == 51) {
   HEAP32[$retval >> 2] = 0;
   $241 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $241 | 0;
  } else if ((label | 0) == 53) {
   HEAP32[$retval >> 2] = 0;
   $241 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $241 | 0;
  } else if ((label | 0) == 59) {
   HEAP32[$retval >> 2] = 1;
   $241 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $241 | 0;
  } else if ((label | 0) == 63) {
   HEAP32[$retval >> 2] = 1;
   $241 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $241 | 0;
  }
 }
 HEAP32[$j277 >> 2] = 0;
 L96 : while (1) {
  if ((HEAP32[$j277 >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18064 >> 2] | 0)) {
   label = 88;
   break;
  }
  HEAP32[$i276 >> 2] = 0;
  while (1) {
   if ((HEAP32[$i276 >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18060 >> 2] | 0)) break;
   HEAP32[$k278 >> 2] = 0;
   while (1) {
    $191 = HEAP32[$z$addr >> 2] | 0;
    if ((HEAP32[$k278 >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18416 >> 2] | 0)) break;
    HEAP32[$n296 >> 2] = HEAP32[$191 + 18420 + (HEAP32[$k278 >> 2] << 2) >> 2];
    HEAP32[$y280 >> 2] = 0;
    while (1) {
     if ((HEAP32[$y280 >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n296 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0)) break;
     HEAP32[$x279 >> 2] = 0;
     while (1) {
      if ((HEAP32[$x279 >> 2] | 0) >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n296 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0)) break;
      $mul317 = Math_imul(HEAP32[$i276 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n296 >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0;
      HEAP32[$x2313 >> 2] = $mul317 + (HEAP32[$x279 >> 2] | 0);
      $mul323 = Math_imul(HEAP32[$j277 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n296 >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0;
      HEAP32[$y2319 >> 2] = $mul323 + (HEAP32[$y280 >> 2] | 0);
      HEAP32[$data325 >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n296 >> 2] | 0) * 72 | 0) + 60 >> 2] | 0) + ((HEAP32[$x2313 >> 2] | 0) + (Math_imul(HEAP32[$y2319 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n296 >> 2] | 0) * 72 | 0) + 64 >> 2] | 0) | 0) << 6 << 1);
      if (!(_stbi__jpeg_decode_block_prog_dc(HEAP32[$z$addr >> 2] | 0, HEAP32[$data325 >> 2] | 0, (HEAP32[$z$addr >> 2] | 0) + 4 + ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n296 >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) * 1680 | 0) | 0, HEAP32[$n296 >> 2] | 0) | 0)) {
       label = 75;
       break L96;
      }
      HEAP32[$x279 >> 2] = (HEAP32[$x279 >> 2] | 0) + 1;
     }
     HEAP32[$y280 >> 2] = (HEAP32[$y280 >> 2] | 0) + 1;
    }
    HEAP32[$k278 >> 2] = (HEAP32[$k278 >> 2] | 0) + 1;
   }
   $todo354 = $191 + 18440 | 0;
   $dec355 = (HEAP32[$todo354 >> 2] | 0) + -1 | 0;
   HEAP32[$todo354 >> 2] = $dec355;
   if (($dec355 | 0) <= 0) {
    if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18368 >> 2] | 0) < 24) _stbi__grow_buffer_unsafe(HEAP32[$z$addr >> 2] | 0);
    if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) < 208) {
     label = 84;
     break L96;
    }
    if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) > 215) {
     label = 84;
     break L96;
    }
    _stbi__jpeg_reset(HEAP32[$z$addr >> 2] | 0);
   }
   HEAP32[$i276 >> 2] = (HEAP32[$i276 >> 2] | 0) + 1;
  }
  HEAP32[$j277 >> 2] = (HEAP32[$j277 >> 2] | 0) + 1;
 }
 if ((label | 0) == 75) {
  HEAP32[$retval >> 2] = 0;
  $241 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 } else if ((label | 0) == 84) {
  HEAP32[$retval >> 2] = 1;
  $241 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 } else if ((label | 0) == 88) {
  HEAP32[$retval >> 2] = 1;
  $241 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $241 | 0;
 }
 return 0;
}

function __sg_gl_apply_pipeline($pip) {
 $pip = $pip | 0;
 var $100 = 0, $117 = 0, $145 = 0, $226 = 0, $98 = 0, $blend_color364 = 0, $c = 0, $cache_bs = 0, $cache_ds = 0, $cache_sfs = 0, $cache_ss = 0, $call169 = 0, $call194 = 0, $call196 = 0, $call249 = 0, $call251 = 0, $call253 = 0, $call270 = 0, $cm = 0, $gl_face = 0, $gl_mode = 0, $gl_winding = 0, $i = 0, $i274 = 0, $pip$addr = 0, $po_enabled = 0, $state_bs = 0, $state_ds = 0, $state_sfs = 0, $state_ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $pip$addr = sp + 72 | 0;
 $state_ds = sp + 68 | 0;
 $cache_ds = sp + 64 | 0;
 $po_enabled = sp + 76 | 0;
 $state_ss = sp + 60 | 0;
 $cache_ss = sp + 56 | 0;
 $i = sp + 52 | 0;
 $state_sfs = sp + 48 | 0;
 $cache_sfs = sp + 44 | 0;
 $gl_face = sp + 40 | 0;
 $state_bs = sp + 36 | 0;
 $cache_bs = sp + 32 | 0;
 $i274 = sp + 28 | 0;
 $cm = sp + 24 | 0;
 $c = sp + 8 | 0;
 $gl_mode = sp + 4 | 0;
 $gl_winding = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 if (!(HEAP32[$pip$addr >> 2] | 0)) ___assert_fail(22631, 21600, 6564, 39993);
 if (!(HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(40015, 21600, 6565, 39993);
 if ((HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] >> 2] | 0)) ___assert_fail(40015, 21600, 6565, 39993);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6566, 39993);
 if ((HEAP32[541353] | 0) != (HEAP32[$pip$addr >> 2] | 0)) label = 10; else if ((HEAP32[541354] | 0) != (HEAP32[HEAP32[$pip$addr >> 2] >> 2] | 0)) label = 10;
 if ((label | 0) == 10) {
  HEAP32[541353] = HEAP32[$pip$addr >> 2];
  HEAP32[541354] = HEAP32[HEAP32[$pip$addr >> 2] >> 2];
  HEAP32[541350] = __sg_gl_primitive_type(HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 320 >> 2] | 0) | 0;
  HEAP32[541351] = __sg_gl_index_type(HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 12 + 4 >> 2] | 0) | 0;
  HEAP32[$state_ds >> 2] = (HEAP32[$pip$addr >> 2] | 0) + 88 + 256;
  HEAP32[$cache_ds >> 2] = 2164808;
  if ((HEAP32[(HEAP32[$state_ds >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$cache_ds >> 2] | 0) + 4 >> 2] | 0)) {
   HEAP32[(HEAP32[$cache_ds >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$state_ds >> 2] | 0) + 4 >> 2];
   _glDepthFunc(__sg_gl_compare_func(HEAP32[(HEAP32[$state_ds >> 2] | 0) + 4 >> 2] | 0) | 0);
  }
  if ((HEAP8[(HEAP32[$state_ds >> 2] | 0) + 8 >> 0] & 1 | 0) != (HEAP8[(HEAP32[$cache_ds >> 2] | 0) + 8 >> 0] & 1 | 0)) {
   HEAP8[(HEAP32[$cache_ds >> 2] | 0) + 8 >> 0] = HEAP8[(HEAP32[$state_ds >> 2] | 0) + 8 >> 0] & 1;
   _glDepthMask(HEAP8[(HEAP32[$state_ds >> 2] | 0) + 8 >> 0] & 1 | 0);
  }
  if (+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 12 >> 2] - +HEAPF32[(HEAP32[$cache_ds >> 2] | 0) + 12 >> 2] > -9.999999974752427e-07) if (+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 12 >> 2] - +HEAPF32[(HEAP32[$cache_ds >> 2] | 0) + 12 >> 2] < 9.999999974752427e-07) if (+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 16 >> 2] - +HEAPF32[(HEAP32[$cache_ds >> 2] | 0) + 16 >> 2] > -9.999999974752427e-07) {
   if (!(+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 16 >> 2] - +HEAPF32[(HEAP32[$cache_ds >> 2] | 0) + 16 >> 2] < 9.999999974752427e-07)) label = 18;
  } else label = 18; else label = 18; else label = 18;
  do if ((label | 0) == 18) {
   HEAPF32[(HEAP32[$cache_ds >> 2] | 0) + 12 >> 2] = +HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 12 >> 2];
   HEAPF32[(HEAP32[$cache_ds >> 2] | 0) + 16 >> 2] = +HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 16 >> 2];
   _glPolygonOffset(+(+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 16 >> 2]), +(+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 12 >> 2]));
   HEAP8[$po_enabled >> 0] = 1;
   if (+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 12 >> 2] - 0.0 > -9.999999974752427e-07) if (+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 12 >> 2] - 0.0 < 9.999999974752427e-07) if (+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 16 >> 2] - 0.0 > -9.999999974752427e-07) if (+HEAPF32[(HEAP32[$state_ds >> 2] | 0) + 16 >> 2] - 0.0 < 9.999999974752427e-07) HEAP8[$po_enabled >> 0] = 0;
   if ((HEAP8[$po_enabled >> 0] & 1 | 0) != (HEAP8[2164924] & 1 | 0)) {
    HEAP8[2164924] = HEAP8[$po_enabled >> 0] & 1;
    if (HEAP8[$po_enabled >> 0] & 1) {
     _glEnable(32823);
     break;
    } else {
     _glDisable(32823);
     break;
    }
   }
  } while (0);
  HEAP32[$state_ss >> 2] = (HEAP32[$pip$addr >> 2] | 0) + 88 + 280;
  HEAP32[$cache_ss >> 2] = 2164832;
  do if ((HEAP8[HEAP32[$state_ss >> 2] >> 0] & 1 | 0) != (HEAP8[HEAP32[$cache_ss >> 2] >> 0] & 1 | 0)) {
   HEAP8[HEAP32[$cache_ss >> 2] >> 0] = HEAP8[HEAP32[$state_ss >> 2] >> 0] & 1;
   if (HEAP8[HEAP32[$state_ss >> 2] >> 0] & 1) {
    _glEnable(2960);
    break;
   } else {
    _glDisable(2960);
    break;
   }
  } while (0);
  if ((HEAPU8[(HEAP32[$state_ss >> 2] | 0) + 37 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$cache_ss >> 2] | 0) + 37 >> 0] | 0 | 0)) {
   HEAP8[(HEAP32[$cache_ss >> 2] | 0) + 37 >> 0] = HEAP8[(HEAP32[$state_ss >> 2] | 0) + 37 >> 0] | 0;
   _glStencilMask(HEAPU8[(HEAP32[$state_ss >> 2] | 0) + 37 >> 0] | 0 | 0);
  }
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= 2) break;
   $98 = HEAP32[$state_ss >> 2] | 0;
   HEAP32[$state_sfs >> 2] = (HEAP32[$i >> 2] | 0) == 0 ? $98 + 4 | 0 : $98 + 20 | 0;
   $100 = HEAP32[$cache_ss >> 2] | 0;
   HEAP32[$cache_sfs >> 2] = (HEAP32[$i >> 2] | 0) == 0 ? $100 + 4 | 0 : $100 + 20 | 0;
   HEAP32[$gl_face >> 2] = (HEAP32[$i >> 2] | 0) == 0 ? 1028 : 1029;
   if ((HEAP32[HEAP32[$state_sfs >> 2] >> 2] | 0) != (HEAP32[HEAP32[$cache_sfs >> 2] >> 2] | 0)) label = 38; else if ((HEAPU8[(HEAP32[$state_ss >> 2] | 0) + 36 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$cache_ss >> 2] | 0) + 36 >> 0] | 0 | 0)) label = 38; else if ((HEAPU8[(HEAP32[$state_ss >> 2] | 0) + 38 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$cache_ss >> 2] | 0) + 38 >> 0] | 0 | 0)) label = 38;
   if ((label | 0) == 38) {
    label = 0;
    HEAP32[HEAP32[$cache_sfs >> 2] >> 2] = HEAP32[HEAP32[$state_sfs >> 2] >> 2];
    $117 = HEAP32[$gl_face >> 2] | 0;
    $call169 = __sg_gl_compare_func(HEAP32[HEAP32[$state_sfs >> 2] >> 2] | 0) | 0;
    _glStencilFuncSeparate($117 | 0, $call169 | 0, HEAPU8[(HEAP32[$state_ss >> 2] | 0) + 38 >> 0] | 0 | 0, HEAPU8[(HEAP32[$state_ss >> 2] | 0) + 36 >> 0] | 0 | 0);
   }
   if ((HEAP32[(HEAP32[$state_sfs >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$cache_sfs >> 2] | 0) + 4 >> 2] | 0)) label = 42; else if ((HEAP32[(HEAP32[$state_sfs >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[(HEAP32[$cache_sfs >> 2] | 0) + 8 >> 2] | 0)) label = 42; else if ((HEAP32[(HEAP32[$state_sfs >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[(HEAP32[$cache_sfs >> 2] | 0) + 12 >> 2] | 0)) label = 42;
   if ((label | 0) == 42) {
    label = 0;
    HEAP32[(HEAP32[$cache_sfs >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$state_sfs >> 2] | 0) + 4 >> 2];
    HEAP32[(HEAP32[$cache_sfs >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$state_sfs >> 2] | 0) + 8 >> 2];
    HEAP32[(HEAP32[$cache_sfs >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$state_sfs >> 2] | 0) + 12 >> 2];
    $145 = HEAP32[$gl_face >> 2] | 0;
    $call194 = __sg_gl_stencil_op(HEAP32[(HEAP32[$state_sfs >> 2] | 0) + 4 >> 2] | 0) | 0;
    $call196 = __sg_gl_stencil_op(HEAP32[(HEAP32[$state_sfs >> 2] | 0) + 8 >> 2] | 0) | 0;
    _glStencilOpSeparate($145 | 0, $call194 | 0, $call196 | 0, __sg_gl_stencil_op(HEAP32[(HEAP32[$state_sfs >> 2] | 0) + 12 >> 2] | 0) | 0);
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP8[(HEAP32[$cache_ss >> 2] | 0) + 36 >> 0] = HEAP8[(HEAP32[$state_ss >> 2] | 0) + 36 >> 0] | 0;
  HEAP8[(HEAP32[$cache_ss >> 2] | 0) + 38 >> 0] = HEAP8[(HEAP32[$state_ss >> 2] | 0) + 38 >> 0] | 0;
  HEAP32[$state_bs >> 2] = (HEAP32[$pip$addr >> 2] | 0) + 88 + 324;
  HEAP32[$cache_bs >> 2] = 2164872;
  do if ((HEAP8[HEAP32[$state_bs >> 2] >> 0] & 1 | 0) != (HEAP8[HEAP32[$cache_bs >> 2] >> 0] & 1 | 0)) {
   HEAP8[HEAP32[$cache_bs >> 2] >> 0] = HEAP8[HEAP32[$state_bs >> 2] >> 0] & 1;
   if (HEAP8[HEAP32[$state_bs >> 2] >> 0] & 1) {
    _glEnable(3042);
    break;
   } else {
    _glDisable(3042);
    break;
   }
  } while (0);
  if ((HEAP32[(HEAP32[$state_bs >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 4 >> 2] | 0)) label = 52; else if ((HEAP32[(HEAP32[$state_bs >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 8 >> 2] | 0)) label = 52; else if ((HEAP32[(HEAP32[$state_bs >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 16 >> 2] | 0)) label = 52; else if ((HEAP32[(HEAP32[$state_bs >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 20 >> 2] | 0)) label = 52;
  if ((label | 0) == 52) {
   HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$state_bs >> 2] | 0) + 4 >> 2];
   HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$state_bs >> 2] | 0) + 8 >> 2];
   HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$state_bs >> 2] | 0) + 16 >> 2];
   HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 20 >> 2] = HEAP32[(HEAP32[$state_bs >> 2] | 0) + 20 >> 2];
   $call249 = __sg_gl_blend_factor(HEAP32[(HEAP32[$state_bs >> 2] | 0) + 4 >> 2] | 0) | 0;
   $call251 = __sg_gl_blend_factor(HEAP32[(HEAP32[$state_bs >> 2] | 0) + 8 >> 2] | 0) | 0;
   $call253 = __sg_gl_blend_factor(HEAP32[(HEAP32[$state_bs >> 2] | 0) + 16 >> 2] | 0) | 0;
   _glBlendFuncSeparate($call249 | 0, $call251 | 0, $call253 | 0, __sg_gl_blend_factor(HEAP32[(HEAP32[$state_bs >> 2] | 0) + 20 >> 2] | 0) | 0);
  }
  if ((HEAP32[(HEAP32[$state_bs >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 12 >> 2] | 0)) label = 55; else if ((HEAP32[(HEAP32[$state_bs >> 2] | 0) + 24 >> 2] | 0) != (HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 24 >> 2] | 0)) label = 55;
  if ((label | 0) == 55) {
   HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$state_bs >> 2] | 0) + 12 >> 2];
   HEAP32[(HEAP32[$cache_bs >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[$state_bs >> 2] | 0) + 24 >> 2];
   $call270 = __sg_gl_blend_op(HEAP32[(HEAP32[$state_bs >> 2] | 0) + 12 >> 2] | 0) | 0;
   _glBlendEquationSeparate($call270 | 0, __sg_gl_blend_op(HEAP32[(HEAP32[$state_bs >> 2] | 0) + 24 >> 2] | 0) | 0);
  }
  HEAP32[$i274 >> 2] = 0;
  while (1) {
   $226 = HEAP32[$pip$addr >> 2] | 0;
   if ((HEAP32[$i274 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 12 + 16 >> 2] | 0) >>> 0) break;
   if ((HEAP32[$226 + 88 + 352 + (HEAP32[$i274 >> 2] << 2) >> 2] | 0) != (HEAP32[2164900 + (HEAP32[$i274 >> 2] << 2) >> 2] | 0)) {
    HEAP32[$cm >> 2] = HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 352 + (HEAP32[$i274 >> 2] << 2) >> 2];
    HEAP32[2164900 + (HEAP32[$i274 >> 2] << 2) >> 2] = HEAP32[$cm >> 2];
    if (!(HEAP32[$i274 >> 2] | 0)) _glColorMask((HEAP32[$cm >> 2] & 1 | 0) != 0 & 255 | 0, (HEAP32[$cm >> 2] & 2 | 0) != 0 & 255 | 0, (HEAP32[$cm >> 2] & 4 | 0) != 0 & 255 | 0, (HEAP32[$cm >> 2] & 8 | 0) != 0 & 255 | 0);
   }
   HEAP32[$i274 >> 2] = (HEAP32[$i274 >> 2] | 0) + 1;
  }
  do if (+HEAPF32[$226 + 12 + 56 >> 2] - +HEAPF32[541233] > -9.999999747378752e-05) if (+HEAPF32[(HEAP32[$pip$addr >> 2] | 0) + 12 + 56 >> 2] - +HEAPF32[541233] < 9.999999747378752e-05) if (+HEAPF32[(HEAP32[$pip$addr >> 2] | 0) + 12 + 56 + 4 >> 2] - +HEAPF32[541234] > -9.999999747378752e-05) if (+HEAPF32[(HEAP32[$pip$addr >> 2] | 0) + 12 + 56 + 4 >> 2] - +HEAPF32[541234] < 9.999999747378752e-05) if (+HEAPF32[(HEAP32[$pip$addr >> 2] | 0) + 12 + 56 + 8 >> 2] - +HEAPF32[541235] > -9.999999747378752e-05) {
   if (!(+HEAPF32[(HEAP32[$pip$addr >> 2] | 0) + 12 + 56 + 8 >> 2] - +HEAPF32[541235] < 9.999999747378752e-05)) {
    label = 70;
    break;
   }
   if (!(+HEAPF32[(HEAP32[$pip$addr >> 2] | 0) + 12 + 56 + 12 >> 2] - +HEAPF32[541236] > -9.999999747378752e-05)) {
    label = 70;
    break;
   }
   if (!(+HEAPF32[(HEAP32[$pip$addr >> 2] | 0) + 12 + 56 + 12 >> 2] - +HEAPF32[541236] < 9.999999747378752e-05)) label = 70;
  } else label = 70; else label = 70; else label = 70; else label = 70; else label = 70; while (0);
  if ((label | 0) == 70) {
   $blend_color364 = (HEAP32[$pip$addr >> 2] | 0) + 12 + 56 | 0;
   HEAP32[$c >> 2] = HEAP32[$blend_color364 >> 2];
   HEAP32[$c + 4 >> 2] = HEAP32[$blend_color364 + 4 >> 2];
   HEAP32[$c + 8 >> 2] = HEAP32[$blend_color364 + 8 >> 2];
   HEAP32[$c + 12 >> 2] = HEAP32[$blend_color364 + 12 >> 2];
   HEAP32[541233] = HEAP32[$c >> 2];
   HEAP32[541234] = HEAP32[$c + 4 >> 2];
   HEAP32[541235] = HEAP32[$c + 8 >> 2];
   HEAP32[541236] = HEAP32[$c + 12 >> 2];
   _glBlendColor(+(+HEAPF32[$c >> 2]), +(+HEAPF32[$c + 4 >> 2]), +(+HEAPF32[$c + 8 >> 2]), +(+HEAPF32[$c + 12 >> 2]));
  }
  do if ((HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 368 >> 2] | 0) != (HEAP32[541229] | 0)) {
   HEAP32[541229] = HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 368 >> 2];
   if (1 == (HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 368 >> 2] | 0)) {
    _glDisable(2884);
    break;
   } else {
    _glEnable(2884);
    HEAP32[$gl_mode >> 2] = 2 == (HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 368 >> 2] | 0) ? 1028 : 1029;
    _glCullFace(HEAP32[$gl_mode >> 2] | 0);
    break;
   }
  } while (0);
  if ((HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 372 >> 2] | 0) != (HEAP32[541230] | 0)) {
   HEAP32[541230] = HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 372 >> 2];
   HEAP32[$gl_winding >> 2] = 2 == (HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 372 >> 2] | 0) ? 2304 : 2305;
   _glFrontFace(HEAP32[$gl_winding >> 2] | 0);
  }
  do if ((HEAP8[(HEAP32[$pip$addr >> 2] | 0) + 88 + 380 >> 0] & 1 | 0) != (HEAP8[2164948] & 1 | 0)) {
   HEAP8[2164948] = HEAP8[(HEAP32[$pip$addr >> 2] | 0) + 88 + 380 >> 0] & 1;
   if (HEAP8[(HEAP32[$pip$addr >> 2] | 0) + 88 + 380 >> 0] & 1) {
    _glEnable(32926);
    break;
   } else {
    _glDisable(32926);
    break;
   }
  } while (0);
  if ((HEAP32[(HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] | 0) + 252 >> 2] | 0) != (HEAP32[541322] | 0)) {
   HEAP32[541322] = HEAP32[(HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] | 0) + 252 >> 2];
   _glUseProgram(HEAP32[(HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] | 0) + 252 >> 2] | 0);
  }
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(29811, 21600, 6772, 39993);
}

function __ZN6DrMesh12smoothPointsERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEidd($agg$result, $outline_points, $neighbors, $neighbor_distance, $weight) {
 $agg$result = $agg$result | 0;
 $outline_points = $outline_points | 0;
 $neighbors = $neighbors | 0;
 $neighbor_distance = +$neighbor_distance;
 $weight = +$weight;
 var $$pre244 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $17 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $__end_$i = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $add = 0, $add108 = 0, $add173 = 0, $agg$tmp = 0, $agg$tmp118 = 0, $agg$tmp162 = 0, $arrayidx$i176 = 0, $average_from$2 = 0, $average_to$2 = 0, $call117 = 0, $call123 = 0, $call125 = 0.0, $call131 = 0, $call160 = 0, $call167 = 0, $call169 = 0.0, $call176 = 0, $call176$byval_copy = 0, $call212 = 0, $call85 = 0, $call90 = 0, $call92 = 0.0, $call97 = 0, $check_point = 0, $check_point157$byval_copy = 0, $div219 = 0.0, $i$0 = 0, $i70$0 = 0, $j$0 = 0, $j150$0 = 0, $j202$0 = 0, $neighbor_distance$addr$0 = 0.0, $smooth_points = 0, $start_check_point = 0, $sub = 0.0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $sub107 = 0, $sub120 = 0, $sub217 = 0, $sub54 = 0.0, $sub87 = 0, $this_point = 0, $total_used$0 = 0.0, $total_used$1 = 0.0, $total_used$2 = 0.0, $x79$0 = 0.0, $x79$1 = 0.0, $x79$2 = 0.0, $x_max$0 = 0.0, $x_min$0 = 0.0, $y224 = 0, $y81$0 = 0.0, $y81$1 = 0.0, $y81$2 = 0.0, $y82 = 0, $y_max$0 = 0.0, $y_min$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $call176$byval_copy = sp + 112 | 0;
 $check_point157$byval_copy = sp + 96 | 0;
 $smooth_points = sp + 128 | 0;
 $this_point = sp + 32 | 0;
 $start_check_point = sp + 16 | 0;
 $agg$tmp = sp + 80 | 0;
 $check_point = sp;
 $agg$tmp118 = sp + 64 | 0;
 $agg$tmp162 = sp + 48 | 0;
 HEAP32[$smooth_points >> 2] = 0;
 $__end_$i$i = $smooth_points + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $smooth_points + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 $__end_$i = $outline_points + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$outline_points >> 2] | 0;
 $sub$ptr$sub$i = $0 - $1 | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 4;
 $2 = $1;
 do if (!$sub$ptr$sub$i) __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($agg$result, $outline_points); else {
  $3 = +HEAPF64[$2 >> 3];
  $4 = +HEAPF64[$2 + 8 >> 3];
  $i$0 = 0;
  $x_max$0 = $3;
  $x_min$0 = $3;
  $y_max$0 = $4;
  $y_min$0 = $4;
  while (1) {
   if (($i$0 | 0) >= ($sub$ptr$div$i | 0)) break;
   $5 = +HEAPF64[$2 + ($i$0 << 4) >> 3];
   $6 = +HEAPF64[$2 + ($i$0 << 4) + 8 >> 3];
   $i$0 = $i$0 + 1 | 0;
   $x_max$0 = $5 > $x_max$0 ? $5 : $x_max$0;
   $x_min$0 = $5 < $x_min$0 ? $5 : $x_min$0;
   $y_max$0 = $6 > $y_max$0 ? $6 : $y_max$0;
   $y_min$0 = $6 < $y_min$0 ? $6 : $y_min$0;
  }
  $sub = $x_max$0 - $x_min$0;
  $sub54 = $y_max$0 - $y_min$0;
  if ($sub < 50.0) $neighbor_distance$addr$0 = $neighbor_distance / (50.0 / $sub); else if ($sub54 < 50.0) $neighbor_distance$addr$0 = $neighbor_distance / (50.0 / $sub54); else $neighbor_distance$addr$0 = $neighbor_distance;
  if (($sub$ptr$div$i | 0) <= ($neighbors << 1 | 0)) {
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($agg$result, $outline_points);
   break;
  }
  $y82 = $this_point + 8 | 0;
  $y224 = $call176$byval_copy + 8 | 0;
  $12 = $2;
  $7 = $0;
  $8 = $1;
  $i70$0 = 0;
  while (1) {
   if (($i70$0 | 0) >= ($7 - $8 >> 4 | 0)) break;
   $arrayidx$i176 = $12 + ($i70$0 << 4) | 0;
   HEAP32[$this_point >> 2] = HEAP32[$arrayidx$i176 >> 2];
   HEAP32[$this_point + 4 >> 2] = HEAP32[$arrayidx$i176 + 4 >> 2];
   HEAP32[$this_point + 8 >> 2] = HEAP32[$arrayidx$i176 + 8 >> 2];
   HEAP32[$this_point + 12 >> 2] = HEAP32[$arrayidx$i176 + 12 >> 2];
   $13 = +HEAPF64[$this_point >> 3];
   $14 = +HEAPF64[$y82 >> 3];
   $call85 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $i70$0) | 0;
   HEAP32[$start_check_point >> 2] = HEAP32[$call85 >> 2];
   HEAP32[$start_check_point + 4 >> 2] = HEAP32[$call85 + 4 >> 2];
   HEAP32[$start_check_point + 8 >> 2] = HEAP32[$call85 + 8 >> 2];
   HEAP32[$start_check_point + 12 >> 2] = HEAP32[$call85 + 12 >> 2];
   _memmove($agg$tmp | 0, $call85 | 0, 16) | 0;
   $sub87 = $i70$0 + -1 | 0;
   $call90 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $sub87) | 0;
   HEAP32[$check_point157$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$check_point157$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   HEAP32[$check_point157$byval_copy + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
   HEAP32[$check_point157$byval_copy + 12 >> 2] = HEAP32[$agg$tmp + 12 >> 2];
   HEAP32[$call176$byval_copy >> 2] = HEAP32[$call90 >> 2];
   HEAP32[$call176$byval_copy + 4 >> 2] = HEAP32[$call90 + 4 >> 2];
   HEAP32[$call176$byval_copy + 8 >> 2] = HEAP32[$call90 + 8 >> 2];
   HEAP32[$call176$byval_copy + 12 >> 2] = HEAP32[$call90 + 12 >> 2];
   $call92 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($check_point157$byval_copy, $call176$byval_copy);
   $add = $i70$0 + 1 | 0;
   $call97 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $add) | 0;
   HEAP32[$check_point157$byval_copy >> 2] = HEAP32[$start_check_point >> 2];
   HEAP32[$check_point157$byval_copy + 4 >> 2] = HEAP32[$start_check_point + 4 >> 2];
   HEAP32[$check_point157$byval_copy + 8 >> 2] = HEAP32[$start_check_point + 8 >> 2];
   HEAP32[$check_point157$byval_copy + 12 >> 2] = HEAP32[$start_check_point + 12 >> 2];
   HEAP32[$call176$byval_copy >> 2] = HEAP32[$call97 >> 2];
   HEAP32[$call176$byval_copy + 4 >> 2] = HEAP32[$call97 + 4 >> 2];
   HEAP32[$call176$byval_copy + 8 >> 2] = HEAP32[$call97 + 8 >> 2];
   HEAP32[$call176$byval_copy + 12 >> 2] = HEAP32[$call97 + 12 >> 2];
   do if (!(+__ZN2Dr24DifferenceBetween2AnglesEdd($call92, +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($check_point157$byval_copy, $call176$byval_copy)) <= 110.0)) {
    $sub107 = $i70$0 - $neighbors | 0;
    $add108 = $i70$0 + $neighbors | 0;
    $j$0 = $sub87;
    while (1) {
     if (($j$0 | 0) < ($sub107 | 0)) {
      $average_from$2 = $sub107;
      break;
     }
     $call117 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $j$0) | 0;
     HEAP32[$check_point >> 2] = HEAP32[$call117 >> 2];
     HEAP32[$check_point + 4 >> 2] = HEAP32[$call117 + 4 >> 2];
     HEAP32[$check_point + 8 >> 2] = HEAP32[$call117 + 8 >> 2];
     HEAP32[$check_point + 12 >> 2] = HEAP32[$call117 + 12 >> 2];
     _memmove($agg$tmp118 | 0, $call117 | 0, 16) | 0;
     $sub120 = $j$0 + -1 | 0;
     $call123 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $sub120) | 0;
     HEAP32[$check_point157$byval_copy >> 2] = HEAP32[$agg$tmp118 >> 2];
     HEAP32[$check_point157$byval_copy + 4 >> 2] = HEAP32[$agg$tmp118 + 4 >> 2];
     HEAP32[$check_point157$byval_copy + 8 >> 2] = HEAP32[$agg$tmp118 + 8 >> 2];
     HEAP32[$check_point157$byval_copy + 12 >> 2] = HEAP32[$agg$tmp118 + 12 >> 2];
     HEAP32[$call176$byval_copy >> 2] = HEAP32[$call123 >> 2];
     HEAP32[$call176$byval_copy + 4 >> 2] = HEAP32[$call123 + 4 >> 2];
     HEAP32[$call176$byval_copy + 8 >> 2] = HEAP32[$call123 + 8 >> 2];
     HEAP32[$call176$byval_copy + 12 >> 2] = HEAP32[$call123 + 12 >> 2];
     $call125 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($check_point157$byval_copy, $call176$byval_copy);
     $call131 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $j$0 + 1 | 0) | 0;
     HEAP32[$check_point157$byval_copy >> 2] = HEAP32[$check_point >> 2];
     HEAP32[$check_point157$byval_copy + 4 >> 2] = HEAP32[$check_point + 4 >> 2];
     HEAP32[$check_point157$byval_copy + 8 >> 2] = HEAP32[$check_point + 8 >> 2];
     HEAP32[$check_point157$byval_copy + 12 >> 2] = HEAP32[$check_point + 12 >> 2];
     HEAP32[$call176$byval_copy >> 2] = HEAP32[$call131 >> 2];
     HEAP32[$call176$byval_copy + 4 >> 2] = HEAP32[$call131 + 4 >> 2];
     HEAP32[$call176$byval_copy + 8 >> 2] = HEAP32[$call131 + 8 >> 2];
     HEAP32[$call176$byval_copy + 12 >> 2] = HEAP32[$call131 + 12 >> 2];
     if (!(+__ZN2Dr24DifferenceBetween2AnglesEdd($call125, +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($check_point157$byval_copy, $call176$byval_copy)) <= 110.0)) $j$0 = $sub120; else {
      $average_from$2 = $j$0;
      break;
     }
    }
    $j150$0 = $add;
    while (1) {
     if (($j150$0 | 0) > ($add108 | 0)) {
      $average_to$2 = $add108;
      break;
     }
     $call160 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $j150$0) | 0;
     HEAP32[$check_point >> 2] = HEAP32[$call160 >> 2];
     HEAP32[$check_point + 4 >> 2] = HEAP32[$call160 + 4 >> 2];
     HEAP32[$check_point + 8 >> 2] = HEAP32[$call160 + 8 >> 2];
     HEAP32[$check_point + 12 >> 2] = HEAP32[$call160 + 12 >> 2];
     _memmove($agg$tmp162 | 0, $call160 | 0, 16) | 0;
     $call167 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $j150$0 + -1 | 0) | 0;
     HEAP32[$check_point157$byval_copy >> 2] = HEAP32[$agg$tmp162 >> 2];
     HEAP32[$check_point157$byval_copy + 4 >> 2] = HEAP32[$agg$tmp162 + 4 >> 2];
     HEAP32[$check_point157$byval_copy + 8 >> 2] = HEAP32[$agg$tmp162 + 8 >> 2];
     HEAP32[$check_point157$byval_copy + 12 >> 2] = HEAP32[$agg$tmp162 + 12 >> 2];
     HEAP32[$call176$byval_copy >> 2] = HEAP32[$call167 >> 2];
     HEAP32[$call176$byval_copy + 4 >> 2] = HEAP32[$call167 + 4 >> 2];
     HEAP32[$call176$byval_copy + 8 >> 2] = HEAP32[$call167 + 8 >> 2];
     HEAP32[$call176$byval_copy + 12 >> 2] = HEAP32[$call167 + 12 >> 2];
     $call169 = +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($check_point157$byval_copy, $call176$byval_copy);
     $add173 = $j150$0 + 1 | 0;
     $call176 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $add173) | 0;
     HEAP32[$check_point157$byval_copy >> 2] = HEAP32[$check_point >> 2];
     HEAP32[$check_point157$byval_copy + 4 >> 2] = HEAP32[$check_point + 4 >> 2];
     HEAP32[$check_point157$byval_copy + 8 >> 2] = HEAP32[$check_point + 8 >> 2];
     HEAP32[$check_point157$byval_copy + 12 >> 2] = HEAP32[$check_point + 12 >> 2];
     HEAP32[$call176$byval_copy >> 2] = HEAP32[$call176 >> 2];
     HEAP32[$call176$byval_copy + 4 >> 2] = HEAP32[$call176 + 4 >> 2];
     HEAP32[$call176$byval_copy + 8 >> 2] = HEAP32[$call176 + 8 >> 2];
     HEAP32[$call176$byval_copy + 12 >> 2] = HEAP32[$call176 + 12 >> 2];
     if (!(+__ZN2Dr24DifferenceBetween2AnglesEdd($call169, +__ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($check_point157$byval_copy, $call176$byval_copy)) <= 110.0)) $j150$0 = $add173; else {
      $average_to$2 = $j150$0;
      break;
     }
    }
    $j202$0 = $average_from$2;
    $total_used$0 = 1.0;
    $x79$0 = $13;
    $y81$0 = $14;
    while (1) {
     if (($j202$0 | 0) > ($average_to$2 | 0)) break;
     if (($j202$0 | 0) == ($i70$0 | 0)) {
      $total_used$2 = $total_used$0;
      $x79$2 = $x79$0;
      $y81$2 = $y81$0;
     } else {
      $call212 = __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($outline_points, $j202$0) | 0;
      HEAP32[$call176$byval_copy >> 2] = HEAP32[$call212 >> 2];
      HEAP32[$call176$byval_copy + 4 >> 2] = HEAP32[$call212 + 4 >> 2];
      HEAP32[$call176$byval_copy + 8 >> 2] = HEAP32[$call212 + 8 >> 2];
      HEAP32[$call176$byval_copy + 12 >> 2] = HEAP32[$call212 + 12 >> 2];
      if (+__ZNK8DrPointF8distanceERKS_($this_point, $call176$byval_copy) < $neighbor_distance$addr$0) {
       $sub217 = $j202$0 - $i70$0 | 0;
       $div219 = 1.0 / +((($sub217 | 0) > -1 ? $sub217 : 0 - $sub217 | 0) | 0);
       $total_used$1 = $total_used$0 + $div219 * $weight;
       $x79$1 = $x79$0 + $div219 * (+HEAPF64[$call176$byval_copy >> 3] * $weight);
       $y81$1 = $y81$0 + $div219 * (+HEAPF64[$y224 >> 3] * $weight);
      } else {
       $total_used$1 = $total_used$0;
       $x79$1 = $x79$0;
       $y81$1 = $y81$0;
      }
      $total_used$2 = $total_used$1;
      $x79$2 = $x79$1;
      $y81$2 = $y81$1;
     }
     $j202$0 = $j202$0 + 1 | 0;
     $total_used$0 = $total_used$2;
     $x79$0 = $x79$2;
     $y81$0 = $y81$2;
    }
    __ZN8DrPointFC2Edd($call176$byval_copy, $x79$0 / $total_used$0, $y81$0 / $total_used$0);
    $17 = HEAP32[$__end_$i$i >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$__value_$i$i$i$i >> 2] | 0) >>> 0) {
     HEAP32[$17 >> 2] = HEAP32[$call176$byval_copy >> 2];
     HEAP32[$17 + 4 >> 2] = HEAP32[$call176$byval_copy + 4 >> 2];
     HEAP32[$17 + 8 >> 2] = HEAP32[$call176$byval_copy + 8 >> 2];
     HEAP32[$17 + 12 >> 2] = HEAP32[$call176$byval_copy + 12 >> 2];
     HEAP32[$__end_$i$i >> 2] = $17 + 16;
    } else __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($smooth_points, $call176$byval_copy);
   } else {
    $15 = HEAP32[$__end_$i$i >> 2] | 0;
    if (($15 | 0) == (HEAP32[$__value_$i$i$i$i >> 2] | 0)) {
     __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($smooth_points, $this_point);
     break;
    } else {
     HEAP32[$15 >> 2] = HEAP32[$this_point >> 2];
     HEAP32[$15 + 4 >> 2] = HEAP32[$this_point + 4 >> 2];
     HEAP32[$15 + 8 >> 2] = HEAP32[$this_point + 8 >> 2];
     HEAP32[$15 + 12 >> 2] = HEAP32[$this_point + 12 >> 2];
     HEAP32[$__end_$i$i >> 2] = $15 + 16;
     break;
    }
   } while (0);
   $$pre244 = HEAP32[$outline_points >> 2] | 0;
   $12 = $$pre244;
   $7 = HEAP32[$__end_$i >> 2] | 0;
   $8 = $$pre244;
   $i70$0 = $add;
  }
  HEAP32[$agg$result >> 2] = HEAP32[$smooth_points >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$__end_$i$i >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$__value_$i$i$i$i >> 2];
  HEAP32[$__value_$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i >> 2] = 0;
  HEAP32[$smooth_points >> 2] = 0;
 } while (0);
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($smooth_points);
 STACKTOP = sp;
 return;
}
function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0312 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0311 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add559 = 0, $and = 0, $and5 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx279 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk343 = 0, $bk82 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $dec = 0, $fd311 = 0, $fd322$pre$phiZ2D = 0, $fd347 = 0, $fd56 = 0, $fd620 = 0, $fd67$pre$phiZ2D = 0, $fd86 = 0, $head209 = 0, $head231 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl573 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $add$ptr = $mem + -8 | 0;
 $0 = HEAP32[548311] | 0;
 if ($add$ptr >>> 0 < $0 >>> 0) _abort();
 $1 = HEAP32[$mem + -4 >> 2] | 0;
 $and = $1 & 3;
 if (($and | 0) == 1) _abort();
 $and5 = $1 & -8;
 $add$ptr6 = $add$ptr + $and5 | 0;
 L10 : do if (!($1 & 1)) {
  $2 = HEAP32[$add$ptr >> 2] | 0;
  if (!$and) return;
  $add$ptr16 = $add$ptr + (0 - $2) | 0;
  $add17 = $2 + $and5 | 0;
  if ($add$ptr16 >>> 0 < $0 >>> 0) _abort();
  if ((HEAP32[548312] | 0) == ($add$ptr16 | 0)) {
   $head209 = $add$ptr6 + 4 | 0;
   $27 = HEAP32[$head209 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   HEAP32[548309] = $add17;
   HEAP32[$head209 >> 2] = $27 & -2;
   HEAP32[$add$ptr16 + 4 >> 2] = $add17 | 1;
   HEAP32[$add$ptr16 + $add17 >> 2] = $add17;
   return;
  }
  $shr = $2 >>> 3;
  if ($2 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
   $arrayidx = 2193268 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($0 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[548307] = HEAP32[548307] & ~(1 << $shr);
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd67$pre$phiZ2D = $5 + 8 | 0; else {
    if ($0 >>> 0 > $5 >>> 0) _abort();
    $fd56 = $5 + 8 | 0;
    if ((HEAP32[$fd56 >> 2] | 0) == ($add$ptr16 | 0)) $fd67$pre$phiZ2D = $fd56; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd67$pre$phiZ2D >> 2] = $4;
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
   break;
  }
  $9 = HEAP32[$add$ptr16 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr16 | 0)) {
   $child = $add$ptr16 + 16 | 0;
   $arrayidx99 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx99 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx99;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx108 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx108 >> 2] | 0;
    if (!$16) {
     $arrayidx113 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx113 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx113;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx108;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($0 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   if ($0 >>> 0 > $11 >>> 0) _abort();
   $bk82 = $11 + 12 | 0;
   if ((HEAP32[$bk82 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   $fd86 = $10 + 8 | 0;
   if ((HEAP32[$fd86 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$bk82 >> 2] = $10;
    HEAP32[$fd86 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
  } else {
   $18 = HEAP32[$add$ptr16 + 28 >> 2] | 0;
   $arrayidx130 = 2193532 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx130 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$arrayidx130 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[548308] = HEAP32[548308] & ~(1 << $18);
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    }
   } else if ((HEAP32[548311] | 0) >>> 0 > $9 >>> 0) _abort(); else {
    $arrayidx149 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx149 >> 2] | 0) == ($add$ptr16 | 0) ? $arrayidx149 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    } else break;
   } while (0);
   $23 = HEAP32[548311] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child171 = $add$ptr16 + 16 | 0;
   $24 = HEAP32[$child171 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child171 + 4 >> 2] | 0;
   if (!$25) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
   } else if ((HEAP32[548311] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
  }
 } else {
  $28 = $add$ptr;
  $p$1 = $add$ptr;
  $psize$1 = $and5;
 } while (0);
 if ($28 >>> 0 >= $add$ptr6 >>> 0) _abort();
 $head231 = $add$ptr6 + 4 | 0;
 $29 = HEAP32[$head231 >> 2] | 0;
 if (!($29 & 1)) _abort();
 if (!($29 & 2)) {
  if ((HEAP32[548313] | 0) == ($add$ptr6 | 0)) {
   $add246 = (HEAP32[548310] | 0) + $psize$1 | 0;
   HEAP32[548310] = $add246;
   HEAP32[548313] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $add246 | 1;
   if (($p$1 | 0) != (HEAP32[548312] | 0)) return;
   HEAP32[548312] = 0;
   HEAP32[548309] = 0;
   return;
  }
  if ((HEAP32[548312] | 0) == ($add$ptr6 | 0)) {
   $add258 = (HEAP32[548309] | 0) + $psize$1 | 0;
   HEAP32[548309] = $add258;
   HEAP32[548312] = $28;
   HEAP32[$p$1 + 4 >> 2] = $add258 | 1;
   HEAP32[$28 + $add258 >> 2] = $add258;
   return;
  }
  $add267 = ($29 & -8) + $psize$1 | 0;
  $shr268 = $29 >>> 3;
  L111 : do if ($29 >>> 0 < 256) {
   $35 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   $arrayidx279 = 2193268 + ($shr268 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx279 | 0)) {
    if ((HEAP32[548311] | 0) >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[548307] = HEAP32[548307] & ~(1 << $shr268);
    break;
   }
   if (($36 | 0) == ($arrayidx279 | 0)) $fd322$pre$phiZ2D = $36 + 8 | 0; else {
    if ((HEAP32[548311] | 0) >>> 0 > $36 >>> 0) _abort();
    $fd311 = $36 + 8 | 0;
    if ((HEAP32[$fd311 >> 2] | 0) == ($add$ptr6 | 0)) $fd322$pre$phiZ2D = $fd311; else _abort();
   }
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd322$pre$phiZ2D >> 2] = $35;
  } else {
   $42 = HEAP32[$add$ptr6 + 24 >> 2] | 0;
   $43 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   do if (($43 | 0) == ($add$ptr6 | 0)) {
    $child361 = $add$ptr6 + 16 | 0;
    $arrayidx362 = $child361 + 4 | 0;
    $48 = HEAP32[$arrayidx362 >> 2] | 0;
    if (!$48) {
     $49 = HEAP32[$child361 >> 2] | 0;
     if (!$49) {
      $R332$3 = 0;
      break;
     } else {
      $R332$1$ph = $49;
      $RP360$1$ph = $child361;
     }
    } else {
     $R332$1$ph = $48;
     $RP360$1$ph = $arrayidx362;
    }
    $R332$1 = $R332$1$ph;
    $RP360$1 = $RP360$1$ph;
    while (1) {
     $arrayidx374 = $R332$1 + 20 | 0;
     $50 = HEAP32[$arrayidx374 >> 2] | 0;
     if (!$50) {
      $arrayidx379 = $R332$1 + 16 | 0;
      $51 = HEAP32[$arrayidx379 >> 2] | 0;
      if (!$51) break; else {
       $R332$1$be = $51;
       $RP360$1$be = $arrayidx379;
      }
     } else {
      $R332$1$be = $50;
      $RP360$1$be = $arrayidx374;
     }
     $R332$1 = $R332$1$be;
     $RP360$1 = $RP360$1$be;
    }
    if ((HEAP32[548311] | 0) >>> 0 > $RP360$1 >>> 0) _abort(); else {
     HEAP32[$RP360$1 >> 2] = 0;
     $R332$3 = $R332$1;
     break;
    }
   } else {
    $44 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
    if ((HEAP32[548311] | 0) >>> 0 > $44 >>> 0) _abort();
    $bk343 = $44 + 12 | 0;
    if ((HEAP32[$bk343 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
    $fd347 = $43 + 8 | 0;
    if ((HEAP32[$fd347 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$bk343 >> 2] = $43;
     HEAP32[$fd347 >> 2] = $44;
     $R332$3 = $43;
     break;
    } else _abort();
   } while (0);
   if ($42 | 0) {
    $53 = HEAP32[$add$ptr6 + 28 >> 2] | 0;
    $arrayidx400 = 2193532 + ($53 << 2) | 0;
    do if ((HEAP32[$arrayidx400 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$arrayidx400 >> 2] = $R332$3;
     if (!$R332$3) {
      HEAP32[548308] = HEAP32[548308] & ~(1 << $53);
      break L111;
     }
    } else if ((HEAP32[548311] | 0) >>> 0 > $42 >>> 0) _abort(); else {
     $arrayidx419 = $42 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx419 >> 2] | 0) == ($add$ptr6 | 0) ? $arrayidx419 : $42 + 20 | 0) >> 2] = $R332$3;
     if (!$R332$3) break L111; else break;
    } while (0);
    $58 = HEAP32[548311] | 0;
    if ($58 >>> 0 > $R332$3 >>> 0) _abort();
    HEAP32[$R332$3 + 24 >> 2] = $42;
    $child443 = $add$ptr6 + 16 | 0;
    $59 = HEAP32[$child443 >> 2] | 0;
    do if ($59 | 0) if ($58 >>> 0 > $59 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 16 >> 2] = $59;
     HEAP32[$59 + 24 >> 2] = $R332$3;
     break;
    } while (0);
    $60 = HEAP32[$child443 + 4 >> 2] | 0;
    if ($60 | 0) if ((HEAP32[548311] | 0) >>> 0 > $60 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 20 >> 2] = $60;
     HEAP32[$60 + 24 >> 2] = $R332$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $add267 | 1;
  HEAP32[$28 + $add267 >> 2] = $add267;
  if (($p$1 | 0) == (HEAP32[548312] | 0)) {
   HEAP32[548309] = $add267;
   return;
  } else $psize$2 = $add267;
 } else {
  HEAP32[$head231 >> 2] = $29 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$28 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $arrayidx509 = 2193268 + ($shr501 << 1 << 2) | 0;
  $63 = HEAP32[548307] | 0;
  $shl511 = 1 << $shr501;
  if (!($63 & $shl511)) {
   HEAP32[548307] = $63 | $shl511;
   $$pre$phiZ2D = $arrayidx509 + 8 | 0;
   $F510$0 = $arrayidx509;
  } else {
   $64 = $arrayidx509 + 8 | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   if ((HEAP32[548311] | 0) >>> 0 > $65 >>> 0) _abort(); else {
    $$pre$phiZ2D = $64;
    $F510$0 = $65;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F510$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F510$0;
  HEAP32[$p$1 + 12 >> 2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 if (!$shr535) $I534$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I534$0 = 31; else {
  $and545 = ($shr535 + 1048320 | 0) >>> 16 & 8;
  $shl546 = $shr535 << $and545;
  $and549 = ($shl546 + 520192 | 0) >>> 16 & 4;
  $shl551 = $shl546 << $and549;
  $and554 = ($shl551 + 245760 | 0) >>> 16 & 2;
  $add559 = 14 - ($and549 | $and545 | $and554) + ($shl551 << $and554 >>> 15) | 0;
  $I534$0 = $psize$2 >>> ($add559 + 7 | 0) & 1 | $add559 << 1;
 }
 $arrayidx567 = 2193532 + ($I534$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I534$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $67 = HEAP32[548308] | 0;
 $shl573 = 1 << $I534$0;
 L197 : do if (!($67 & $shl573)) {
  HEAP32[548308] = $67 | $shl573;
  HEAP32[$arrayidx567 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $arrayidx567;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $68 = HEAP32[$arrayidx567 >> 2] | 0;
  L200 : do if ((HEAP32[$68 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) $T$0$lcssa = $68; else {
   $K583$0312 = $psize$2 << (($I534$0 | 0) == 31 ? 0 : 25 - ($I534$0 >>> 1) | 0);
   $T$0311 = $68;
   while (1) {
    $arrayidx599 = $T$0311 + 16 + ($K583$0312 >>> 31 << 2) | 0;
    $70 = HEAP32[$arrayidx599 >> 2] | 0;
    if (!$70) break;
    if ((HEAP32[$70 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
     $T$0$lcssa = $70;
     break L200;
    } else {
     $K583$0312 = $K583$0312 << 1;
     $T$0311 = $70;
    }
   }
   if ((HEAP32[548311] | 0) >>> 0 > $arrayidx599 >>> 0) _abort(); else {
    HEAP32[$arrayidx599 >> 2] = $p$1;
    HEAP32[$p$1 + 24 >> 2] = $T$0311;
    HEAP32[$p$1 + 12 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $p$1;
    break L197;
   }
  } while (0);
  $fd620 = $T$0$lcssa + 8 | 0;
  $73 = HEAP32[$fd620 >> 2] | 0;
  $74 = HEAP32[548311] | 0;
  if ($74 >>> 0 <= $73 >>> 0 & $74 >>> 0 <= $T$0$lcssa >>> 0) {
   HEAP32[$73 + 12 >> 2] = $p$1;
   HEAP32[$fd620 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $73;
   HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $dec = (HEAP32[548315] | 0) + -1 | 0;
 HEAP32[548315] = $dec;
 if ($dec | 0) return;
 $sp$0$in$i = 2193684;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[548315] = -1;
 return;
}

function __ZN13TPPLPartition15Triangulate_OPTEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE($this, $poly, $triangles) {
 $this = $this | 0;
 $poly = $poly | 0;
 $triangles = $triangles | 0;
 var $$pre178 = 0, $11 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $7 = 0, $__next_$i$i$i = 0, $__value_$i$i$i$i = 0, $add = 0, $add134 = 0, $add187 = 0.0, $add94 = 0, $arrayidx135 = 0, $arrayidx145 = 0, $arrayidx17 = 0, $bestvertex$0 = 0, $bestvertex$1 = 0, $call13 = 0, $call162 = 0, $call173 = 0, $call237 = 0, $call239 = 0, $call29 = 0, $call34 = 0, $call37 = 0, $call4 = 0, $call43 = 0, $call47 = 0, $call6 = 0, $call60 = 0, $call64 = 0, $call70 = 0, $call74 = 0, $call87 = 0, $call92 = 0, $call96 = 0, $cmp30 = 0, $cmp40 = 0, $d1$0 = 0.0, $d2$0 = 0.0, $diagonal$sroa$0$0$copyload = 0, $diagonal$sroa$8$0$copyload = 0, $diagonals = 0, $gap$0 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$3 = 0, $i$4 = 0, $inc106$pre$phiZ2D = 0, $index2 = 0, $j$0 = 0, $k$0 = 0, $k$1 = 0, $minweight$0 = 0.0, $minweight$1$ph = 0.0, $minweight$2 = 0.0, $minweight$3 = 0.0, $newdiagonal = 0, $or$cond = 0, $p1 = 0, $p2 = 0, $p3 = 0, $p4 = 0, $ret$0 = 0, $retval$0 = 0, $retval$1 = 0, $sub = 0, $sub131 = 0, $sub35 = 0, $triangle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $p1 = sp + 72 | 0;
 $p2 = sp + 48 | 0;
 $p3 = sp + 24 | 0;
 $p4 = sp;
 $newdiagonal = sp + 120 | 0;
 $diagonals = sp + 108 | 0;
 $triangle = sp + 96 | 0;
 if (__ZNK8TPPLPoly5ValidEv($poly) | 0) {
  HEAP32[$diagonals >> 2] = $diagonals;
  $__next_$i$i$i = $diagonals + 4 | 0;
  HEAP32[$__next_$i$i$i >> 2] = $diagonals;
  $__value_$i$i$i$i = $diagonals + 8 | 0;
  HEAP32[$__value_$i$i$i$i >> 2] = 0;
  __ZN8TPPLPolyC2Ev($triangle);
  $call4 = __ZNK8TPPLPoly12GetNumPointsEv($poly) | 0;
  $call6 = __Znam($call4 >>> 0 > 1073741823 ? -1 : $call4 << 2) | 0;
  $i$0 = 1;
  while (1) {
   if (($i$0 | 0) >= ($call4 | 0)) break;
   HEAP32[$call6 + ($i$0 << 2) >> 2] = __Znam($i$0 >>> 0 > 178956970 ? -1 : $i$0 * 24 | 0) | 0;
   $i$0 = $i$0 + 1 | 0;
  }
  $sub = $call4 + -1 | 0;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) >= ($sub | 0)) break;
   $call13 = __ZN8TPPLPoly8GetPointEl($poly, $i$1) | 0;
   HEAP32[$p1 >> 2] = HEAP32[$call13 >> 2];
   HEAP32[$p1 + 4 >> 2] = HEAP32[$call13 + 4 >> 2];
   HEAP32[$p1 + 8 >> 2] = HEAP32[$call13 + 8 >> 2];
   HEAP32[$p1 + 12 >> 2] = HEAP32[$call13 + 12 >> 2];
   HEAP32[$p1 + 16 >> 2] = HEAP32[$call13 + 16 >> 2];
   HEAP32[$p1 + 20 >> 2] = HEAP32[$call13 + 20 >> 2];
   $add = $i$1 + 1 | 0;
   $cmp30 = ($i$1 | 0) == 0;
   $cmp40 = ($i$1 | 0) == ($sub | 0);
   $sub35 = $i$1 + -1 | 0;
   $j$0 = $add;
   while (1) {
    if (($j$0 | 0) >= ($call4 | 0)) break;
    $arrayidx17 = $call6 + ($j$0 << 2) | 0;
    $2 = HEAP32[$arrayidx17 >> 2] | 0;
    HEAP8[$2 + ($i$1 * 24 | 0) >> 0] = 1;
    HEAPF64[$2 + ($i$1 * 24 | 0) + 8 >> 3] = 0.0;
    HEAP32[$2 + ($i$1 * 24 | 0) + 16 >> 2] = -1;
    L13 : do if (($j$0 | 0) != ($add | 0)) {
     $call29 = __ZN8TPPLPoly8GetPointEl($poly, $j$0) | 0;
     HEAP32[$p2 >> 2] = HEAP32[$call29 >> 2];
     HEAP32[$p2 + 4 >> 2] = HEAP32[$call29 + 4 >> 2];
     HEAP32[$p2 + 8 >> 2] = HEAP32[$call29 + 8 >> 2];
     HEAP32[$p2 + 12 >> 2] = HEAP32[$call29 + 12 >> 2];
     HEAP32[$p2 + 16 >> 2] = HEAP32[$call29 + 16 >> 2];
     HEAP32[$p2 + 20 >> 2] = HEAP32[$call29 + 20 >> 2];
     if ($cmp30) {
      $call34 = __ZN8TPPLPoly8GetPointEl($poly, $sub) | 0;
      HEAP32[$p3 >> 2] = HEAP32[$call34 >> 2];
      HEAP32[$p3 + 4 >> 2] = HEAP32[$call34 + 4 >> 2];
      HEAP32[$p3 + 8 >> 2] = HEAP32[$call34 + 8 >> 2];
      HEAP32[$p3 + 12 >> 2] = HEAP32[$call34 + 12 >> 2];
      HEAP32[$p3 + 16 >> 2] = HEAP32[$call34 + 16 >> 2];
      HEAP32[$p3 + 20 >> 2] = HEAP32[$call34 + 20 >> 2];
     } else {
      $call37 = __ZN8TPPLPoly8GetPointEl($poly, $sub35) | 0;
      HEAP32[$p3 >> 2] = HEAP32[$call37 >> 2];
      HEAP32[$p3 + 4 >> 2] = HEAP32[$call37 + 4 >> 2];
      HEAP32[$p3 + 8 >> 2] = HEAP32[$call37 + 8 >> 2];
      HEAP32[$p3 + 12 >> 2] = HEAP32[$call37 + 12 >> 2];
      HEAP32[$p3 + 16 >> 2] = HEAP32[$call37 + 16 >> 2];
      HEAP32[$p3 + 20 >> 2] = HEAP32[$call37 + 20 >> 2];
     }
     if ($cmp40) {
      $call43 = __ZN8TPPLPoly8GetPointEl($poly, 0) | 0;
      HEAP32[$p4 >> 2] = HEAP32[$call43 >> 2];
      HEAP32[$p4 + 4 >> 2] = HEAP32[$call43 + 4 >> 2];
      HEAP32[$p4 + 8 >> 2] = HEAP32[$call43 + 8 >> 2];
      HEAP32[$p4 + 12 >> 2] = HEAP32[$call43 + 12 >> 2];
      HEAP32[$p4 + 16 >> 2] = HEAP32[$call43 + 16 >> 2];
      HEAP32[$p4 + 20 >> 2] = HEAP32[$call43 + 20 >> 2];
     } else {
      $call47 = __ZN8TPPLPoly8GetPointEl($poly, $add) | 0;
      HEAP32[$p4 >> 2] = HEAP32[$call47 >> 2];
      HEAP32[$p4 + 4 >> 2] = HEAP32[$call47 + 4 >> 2];
      HEAP32[$p4 + 8 >> 2] = HEAP32[$call47 + 8 >> 2];
      HEAP32[$p4 + 12 >> 2] = HEAP32[$call47 + 12 >> 2];
      HEAP32[$p4 + 16 >> 2] = HEAP32[$call47 + 16 >> 2];
      HEAP32[$p4 + 20 >> 2] = HEAP32[$call47 + 20 >> 2];
     }
     if (!(__ZN13TPPLPartition6InConeER9TPPLPointS1_S1_S1_($this, $p3, $p1, $p4, $p2) | 0)) {
      HEAP8[(HEAP32[$arrayidx17 >> 2] | 0) + ($i$1 * 24 | 0) >> 0] = 0;
      break;
     }
     if (!$j$0) {
      $call60 = __ZN8TPPLPoly8GetPointEl($poly, $sub) | 0;
      HEAP32[$p3 >> 2] = HEAP32[$call60 >> 2];
      HEAP32[$p3 + 4 >> 2] = HEAP32[$call60 + 4 >> 2];
      HEAP32[$p3 + 8 >> 2] = HEAP32[$call60 + 8 >> 2];
      HEAP32[$p3 + 12 >> 2] = HEAP32[$call60 + 12 >> 2];
      HEAP32[$p3 + 16 >> 2] = HEAP32[$call60 + 16 >> 2];
      HEAP32[$p3 + 20 >> 2] = HEAP32[$call60 + 20 >> 2];
     } else {
      $call64 = __ZN8TPPLPoly8GetPointEl($poly, $j$0 + -1 | 0) | 0;
      HEAP32[$p3 >> 2] = HEAP32[$call64 >> 2];
      HEAP32[$p3 + 4 >> 2] = HEAP32[$call64 + 4 >> 2];
      HEAP32[$p3 + 8 >> 2] = HEAP32[$call64 + 8 >> 2];
      HEAP32[$p3 + 12 >> 2] = HEAP32[$call64 + 12 >> 2];
      HEAP32[$p3 + 16 >> 2] = HEAP32[$call64 + 16 >> 2];
      HEAP32[$p3 + 20 >> 2] = HEAP32[$call64 + 20 >> 2];
     }
     if (($j$0 | 0) == ($sub | 0)) {
      $call70 = __ZN8TPPLPoly8GetPointEl($poly, 0) | 0;
      HEAP32[$p4 >> 2] = HEAP32[$call70 >> 2];
      HEAP32[$p4 + 4 >> 2] = HEAP32[$call70 + 4 >> 2];
      HEAP32[$p4 + 8 >> 2] = HEAP32[$call70 + 8 >> 2];
      HEAP32[$p4 + 12 >> 2] = HEAP32[$call70 + 12 >> 2];
      HEAP32[$p4 + 16 >> 2] = HEAP32[$call70 + 16 >> 2];
      HEAP32[$p4 + 20 >> 2] = HEAP32[$call70 + 20 >> 2];
     } else {
      $call74 = __ZN8TPPLPoly8GetPointEl($poly, $j$0 + 1 | 0) | 0;
      HEAP32[$p4 >> 2] = HEAP32[$call74 >> 2];
      HEAP32[$p4 + 4 >> 2] = HEAP32[$call74 + 4 >> 2];
      HEAP32[$p4 + 8 >> 2] = HEAP32[$call74 + 8 >> 2];
      HEAP32[$p4 + 12 >> 2] = HEAP32[$call74 + 12 >> 2];
      HEAP32[$p4 + 16 >> 2] = HEAP32[$call74 + 16 >> 2];
      HEAP32[$p4 + 20 >> 2] = HEAP32[$call74 + 20 >> 2];
     }
     if (!(__ZN13TPPLPartition6InConeER9TPPLPointS1_S1_S1_($this, $p3, $p2, $p4, $p1) | 0)) {
      HEAP8[(HEAP32[$arrayidx17 >> 2] | 0) + ($i$1 * 24 | 0) >> 0] = 0;
      break;
     }
     $k$0 = 0;
     while (1) {
      if (($k$0 | 0) >= ($call4 | 0)) break L13;
      $call87 = __ZN8TPPLPoly8GetPointEl($poly, $k$0) | 0;
      HEAP32[$p3 >> 2] = HEAP32[$call87 >> 2];
      HEAP32[$p3 + 4 >> 2] = HEAP32[$call87 + 4 >> 2];
      HEAP32[$p3 + 8 >> 2] = HEAP32[$call87 + 8 >> 2];
      HEAP32[$p3 + 12 >> 2] = HEAP32[$call87 + 12 >> 2];
      HEAP32[$p3 + 16 >> 2] = HEAP32[$call87 + 16 >> 2];
      HEAP32[$p3 + 20 >> 2] = HEAP32[$call87 + 20 >> 2];
      if (($k$0 | 0) == ($sub | 0)) {
       $call92 = __ZN8TPPLPoly8GetPointEl($poly, 0) | 0;
       HEAP32[$p4 >> 2] = HEAP32[$call92 >> 2];
       HEAP32[$p4 + 4 >> 2] = HEAP32[$call92 + 4 >> 2];
       HEAP32[$p4 + 8 >> 2] = HEAP32[$call92 + 8 >> 2];
       HEAP32[$p4 + 12 >> 2] = HEAP32[$call92 + 12 >> 2];
       HEAP32[$p4 + 16 >> 2] = HEAP32[$call92 + 16 >> 2];
       HEAP32[$p4 + 20 >> 2] = HEAP32[$call92 + 20 >> 2];
       $inc106$pre$phiZ2D = $k$0 + 1 | 0;
      } else {
       $add94 = $k$0 + 1 | 0;
       $call96 = __ZN8TPPLPoly8GetPointEl($poly, $add94) | 0;
       HEAP32[$p4 >> 2] = HEAP32[$call96 >> 2];
       HEAP32[$p4 + 4 >> 2] = HEAP32[$call96 + 4 >> 2];
       HEAP32[$p4 + 8 >> 2] = HEAP32[$call96 + 8 >> 2];
       HEAP32[$p4 + 12 >> 2] = HEAP32[$call96 + 12 >> 2];
       HEAP32[$p4 + 16 >> 2] = HEAP32[$call96 + 16 >> 2];
       HEAP32[$p4 + 20 >> 2] = HEAP32[$call96 + 20 >> 2];
       $inc106$pre$phiZ2D = $add94;
      }
      if (!(__ZN13TPPLPartition10IntersectsER9TPPLPointS1_S1_S1_(0, $p1, $p2, $p3, $p4) | 0)) $k$0 = $inc106$pre$phiZ2D; else break;
     }
     HEAP8[(HEAP32[$arrayidx17 >> 2] | 0) + ($i$1 * 24 | 0) >> 0] = 0;
    } while (0);
    $j$0 = $j$0 + 1 | 0;
   }
   $i$1 = $add;
  }
  $6 = HEAP32[$call6 + ($sub << 2) >> 2] | 0;
  HEAP8[$6 >> 0] = 1;
  HEAPF64[$6 + 8 >> 3] = 0.0;
  HEAP32[$6 + 16 >> 2] = -1;
  $gap$0 = 2;
  $minweight$0 = 0.0;
  L48 : while (1) {
   if (($call4 | 0) <= ($gap$0 | 0)) {
    label = 60;
    break;
   }
   $sub131 = $call4 - $gap$0 | 0;
   $i$2$ph = 0;
   $minweight$1$ph = $minweight$0;
   L51 : while (1) {
    $i$2 = $i$2$ph;
    while (1) {
     if (($i$2 | 0) >= ($sub131 | 0)) break L51;
     $add134 = $i$2 + $gap$0 | 0;
     $arrayidx135 = $call6 + ($add134 << 2) | 0;
     $7 = HEAP32[$arrayidx135 >> 2] | 0;
     $$pre178 = $i$2 + 1 | 0;
     if (!(HEAP8[$7 + ($i$2 * 24 | 0) >> 0] | 0)) $i$2 = $$pre178; else break;
    }
    $11 = $7;
    $bestvertex$0 = -1;
    $k$1 = $$pre178;
    $minweight$2 = $minweight$1$ph;
    while (1) {
     if (($k$1 | 0) >= ($add134 | 0)) break;
     $arrayidx145 = $call6 + ($k$1 << 2) | 0;
     if (!(HEAP8[(HEAP32[$arrayidx145 >> 2] | 0) + ($i$2 * 24 | 0) >> 0] | 0)) {
      $23 = $11;
      $bestvertex$1 = $bestvertex$0;
      $minweight$3 = $minweight$2;
     } else if (!(HEAP8[$11 + ($k$1 * 24 | 0) >> 0] | 0)) {
      $23 = $11;
      $bestvertex$1 = $bestvertex$0;
      $minweight$3 = $minweight$2;
     } else {
      if (($k$1 | 0) > ($$pre178 | 0)) {
       $call162 = __ZN8TPPLPoly8GetPointEl($poly, $i$2) | 0;
       $d1$0 = +__ZN13TPPLPartition8DistanceERK9TPPLPointS2_(0, $call162, __ZN8TPPLPoly8GetPointEl($poly, $k$1) | 0);
      } else $d1$0 = 0.0;
      if (($add134 | 0) > ($k$1 + 1 | 0)) {
       $call173 = __ZN8TPPLPoly8GetPointEl($poly, $k$1) | 0;
       $d2$0 = +__ZN13TPPLPartition8DistanceERK9TPPLPointS2_(0, $call173, __ZN8TPPLPoly8GetPointEl($poly, $add134) | 0);
      } else $d2$0 = 0.0;
      $15 = HEAP32[$arrayidx135 >> 2] | 0;
      $add187 = $d2$0 + ($d1$0 + (+HEAPF64[(HEAP32[$arrayidx145 >> 2] | 0) + ($i$2 * 24 | 0) + 8 >> 3] + +HEAPF64[$15 + ($k$1 * 24 | 0) + 8 >> 3]));
      $or$cond = ($bestvertex$0 | 0) == -1 | $add187 < $minweight$2;
      $23 = $15;
      $bestvertex$1 = $or$cond ? $k$1 : $bestvertex$0;
      $minweight$3 = $or$cond ? $add187 : $minweight$2;
     }
     $11 = $23;
     $bestvertex$0 = $bestvertex$1;
     $k$1 = $k$1 + 1 | 0;
     $minweight$2 = $minweight$3;
    }
    if (($bestvertex$0 | 0) == -1) {
     label = 52;
     break L48;
    }
    HEAP32[$11 + ($i$2 * 24 | 0) + 16 >> 2] = $bestvertex$0;
    HEAPF64[$11 + ($i$2 * 24 | 0) + 8 >> 3] = $minweight$2;
    $i$2$ph = $$pre178;
    $minweight$1$ph = $minweight$2;
   }
   $gap$0 = $gap$0 + 1 | 0;
   $minweight$0 = $minweight$1$ph;
  }
  if ((label | 0) == 52) {
   $i$3 = 1;
   while (1) {
    if (($i$3 | 0) == ($call4 | 0)) break;
    $17 = HEAP32[$call6 + ($i$3 << 2) >> 2] | 0;
    if ($17 | 0) __ZdaPv($17);
    $i$3 = $i$3 + 1 | 0;
   }
   __ZdaPv($call6);
   $retval$0 = 0;
  } else if ((label | 0) == 60) {
   HEAP32[$newdiagonal >> 2] = 0;
   $index2 = $newdiagonal + 4 | 0;
   HEAP32[$index2 >> 2] = $sub;
   __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9push_backERKS2_($diagonals, $newdiagonal);
   while (1) {
    if (!(HEAP32[$__value_$i$i$i$i >> 2] | 0)) {
     $ret$0 = 1;
     break;
    }
    $19 = HEAP32[$__next_$i$i$i >> 2] | 0;
    $diagonal$sroa$0$0$copyload = HEAP32[$19 + 8 >> 2] | 0;
    $diagonal$sroa$8$0$copyload = HEAP32[$19 + 12 >> 2] | 0;
    __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9pop_frontEv($diagonals);
    $21 = HEAP32[(HEAP32[$call6 + ($diagonal$sroa$8$0$copyload << 2) >> 2] | 0) + ($diagonal$sroa$0$0$copyload * 24 | 0) + 16 >> 2] | 0;
    if (($21 | 0) == -1) {
     $ret$0 = 0;
     break;
    }
    $call237 = __ZN8TPPLPoly8GetPointEl($poly, $diagonal$sroa$0$0$copyload) | 0;
    $call239 = __ZN8TPPLPoly8GetPointEl($poly, $21) | 0;
    __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($triangle, $call237, $call239, __ZN8TPPLPoly8GetPointEl($poly, $diagonal$sroa$8$0$copyload) | 0);
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($triangles, $triangle);
    if (($21 | 0) > ($diagonal$sroa$0$0$copyload + 1 | 0)) {
     HEAP32[$newdiagonal >> 2] = $diagonal$sroa$0$0$copyload;
     HEAP32[$index2 >> 2] = $21;
     __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9push_backERKS2_($diagonals, $newdiagonal);
    }
    if (($diagonal$sroa$8$0$copyload | 0) > ($21 + 1 | 0)) {
     HEAP32[$newdiagonal >> 2] = $21;
     HEAP32[$index2 >> 2] = $diagonal$sroa$8$0$copyload;
     __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9push_backERKS2_($diagonals, $newdiagonal);
    }
   }
   $i$4 = 1;
   while (1) {
    if (($i$4 | 0) >= ($call4 | 0)) break;
    $22 = HEAP32[$call6 + ($i$4 << 2) >> 2] | 0;
    if ($22 | 0) __ZdaPv($22);
    $i$4 = $i$4 + 1 | 0;
   }
   __ZdaPv($call6);
   $retval$0 = $ret$0;
  }
  __ZN8TPPLPolyD2Ev($triangle);
  __ZNSt3__210__list_impIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEED2Ev($diagonals);
  $retval$1 = $retval$0;
 } else $retval$1 = 0;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _stbtt__fill_active_edges_new($scanline, $scanline_fill, $len, $e, $y_top) {
 $scanline = $scanline | 0;
 $scanline_fill = $scanline_fill | 0;
 $len = $len | 0;
 $e = $e | 0;
 $y_top = +$y_top;
 var $47 = 0.0, $75 = 0.0, $8 = 0.0, $area = 0, $arrayidx = 0, $arrayidx119 = 0, $arrayidx127 = 0, $arrayidx152 = 0, $arrayidx156 = 0, $arrayidx86 = 0, $dx = 0, $dy = 0, $e$addr = 0, $height = 0, $len$addr = 0, $scanline$addr = 0, $scanline_fill$addr = 0, $sign = 0, $step = 0, $sy0 = 0, $sy1 = 0, $t = 0, $x = 0, $x0 = 0, $x014 = 0, $x1 = 0, $x1165 = 0, $x160 = 0, $x2 = 0, $x2167 = 0, $x3 = 0, $x89 = 0, $x_bottom = 0, $x_top = 0, $xb = 0, $y0 = 0, $y1 = 0, $y2 = 0, $y3 = 0, $y_bottom = 0, $y_crossing = 0, $y_top$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $scanline$addr = sp + 128 | 0;
 $scanline_fill$addr = sp + 124 | 0;
 $len$addr = sp + 120 | 0;
 $e$addr = sp + 116 | 0;
 $y_top$addr = sp + 112 | 0;
 $y_bottom = sp + 108 | 0;
 $x0 = sp + 104 | 0;
 $x014 = sp + 100 | 0;
 $dx = sp + 96 | 0;
 $xb = sp + 92 | 0;
 $x_top = sp + 88 | 0;
 $x_bottom = sp + 84 | 0;
 $sy0 = sp + 80 | 0;
 $sy1 = sp + 76 | 0;
 $dy = sp + 72 | 0;
 $height = sp + 68 | 0;
 $x = sp + 64 | 0;
 $x89 = sp + 60 | 0;
 $x1 = sp + 56 | 0;
 $x2 = sp + 52 | 0;
 $y_crossing = sp + 48 | 0;
 $step = sp + 44 | 0;
 $sign = sp + 40 | 0;
 $area = sp + 36 | 0;
 $t = sp + 32 | 0;
 $x160 = sp + 28 | 0;
 $y0 = sp + 24 | 0;
 $x1165 = sp + 20 | 0;
 $x2167 = sp + 16 | 0;
 $x3 = sp + 12 | 0;
 $y3 = sp + 8 | 0;
 $y1 = sp + 4 | 0;
 $y2 = sp;
 HEAP32[$scanline$addr >> 2] = $scanline;
 HEAP32[$scanline_fill$addr >> 2] = $scanline_fill;
 HEAP32[$len$addr >> 2] = $len;
 HEAP32[$e$addr >> 2] = $e;
 HEAPF32[$y_top$addr >> 2] = $y_top;
 HEAPF32[$y_bottom >> 2] = +HEAPF32[$y_top$addr >> 2] + 1.0;
 L1 : while (1) {
  if (!(HEAP32[$e$addr >> 2] | 0)) {
   label = 58;
   break;
  }
  if (!(+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2] >= +HEAPF32[$y_top$addr >> 2])) {
   label = 4;
   break;
  }
  $8 = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 4 >> 2];
  L5 : do if (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 8 >> 2] == 0.0) {
   HEAPF32[$x0 >> 2] = $8;
   if (+HEAPF32[$x0 >> 2] < +(HEAP32[$len$addr >> 2] | 0)) if (+HEAPF32[$x0 >> 2] >= 0.0) {
    _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, ~~+HEAPF32[$x0 >> 2], HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x0 >> 2], +HEAPF32[$y_top$addr >> 2], +HEAPF32[$x0 >> 2], +HEAPF32[$y_bottom >> 2]);
    _stbtt__handle_clipped_edge((HEAP32[$scanline_fill$addr >> 2] | 0) + -4 | 0, ~~+HEAPF32[$x0 >> 2] + 1 | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x0 >> 2], +HEAPF32[$y_top$addr >> 2], +HEAPF32[$x0 >> 2], +HEAPF32[$y_bottom >> 2]);
    break;
   } else {
    _stbtt__handle_clipped_edge((HEAP32[$scanline_fill$addr >> 2] | 0) + -4 | 0, 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x0 >> 2], +HEAPF32[$y_top$addr >> 2], +HEAPF32[$x0 >> 2], +HEAPF32[$y_bottom >> 2]);
    break;
   }
  } else {
   HEAPF32[$x014 >> 2] = $8;
   HEAPF32[$dx >> 2] = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 8 >> 2];
   HEAPF32[$xb >> 2] = +HEAPF32[$x014 >> 2] + +HEAPF32[$dx >> 2];
   HEAPF32[$dy >> 2] = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 12 >> 2];
   if (!(+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 20 >> 2] <= +HEAPF32[$y_bottom >> 2])) {
    label = 12;
    break L1;
   }
   if (!(+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2] >= +HEAPF32[$y_top$addr >> 2])) {
    label = 12;
    break L1;
   }
   $47 = +HEAPF32[$x014 >> 2];
   if (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 20 >> 2] > +HEAPF32[$y_top$addr >> 2]) {
    HEAPF32[$x_top >> 2] = $47 + +HEAPF32[$dx >> 2] * (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 20 >> 2] - +HEAPF32[$y_top$addr >> 2]);
    HEAPF32[$sy0 >> 2] = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 20 >> 2];
   } else {
    HEAPF32[$x_top >> 2] = $47;
    HEAPF32[$sy0 >> 2] = +HEAPF32[$y_top$addr >> 2];
   }
   if (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2] < +HEAPF32[$y_bottom >> 2]) {
    HEAPF32[$x_bottom >> 2] = +HEAPF32[$x014 >> 2] + +HEAPF32[$dx >> 2] * (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2] - +HEAPF32[$y_top$addr >> 2]);
    HEAPF32[$sy1 >> 2] = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2];
   } else {
    HEAPF32[$x_bottom >> 2] = +HEAPF32[$xb >> 2];
    HEAPF32[$sy1 >> 2] = +HEAPF32[$y_bottom >> 2];
   }
   if (+HEAPF32[$x_top >> 2] >= 0.0 & +HEAPF32[$x_bottom >> 2] >= 0.0) if (+HEAPF32[$x_top >> 2] < +(HEAP32[$len$addr >> 2] | 0)) if (+HEAPF32[$x_bottom >> 2] < +(HEAP32[$len$addr >> 2] | 0)) {
    $75 = +HEAPF32[$x_top >> 2];
    if ((~~+HEAPF32[$x_top >> 2] | 0) == (~~+HEAPF32[$x_bottom >> 2] | 0)) {
     HEAP32[$x >> 2] = ~~$75;
     HEAPF32[$height >> 2] = +HEAPF32[$sy1 >> 2] - +HEAPF32[$sy0 >> 2];
     if ((HEAP32[$x >> 2] | 0) < 0) {
      label = 25;
      break L1;
     }
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$len$addr >> 2] | 0)) {
      label = 25;
      break L1;
     }
     $arrayidx = (HEAP32[$scanline$addr >> 2] | 0) + (HEAP32[$x >> 2] << 2) | 0;
     HEAPF32[$arrayidx >> 2] = +HEAPF32[$arrayidx >> 2] + +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 16 >> 2] * (1.0 - (+HEAPF32[$x_top >> 2] - +(HEAP32[$x >> 2] | 0) + (+HEAPF32[$x_bottom >> 2] - +(HEAP32[$x >> 2] | 0))) / 2.0) * +HEAPF32[$height >> 2];
     $arrayidx86 = (HEAP32[$scanline_fill$addr >> 2] | 0) + (HEAP32[$x >> 2] << 2) | 0;
     HEAPF32[$arrayidx86 >> 2] = +HEAPF32[$arrayidx86 >> 2] + +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 16 >> 2] * +HEAPF32[$height >> 2];
     break;
    }
    if ($75 > +HEAPF32[$x_bottom >> 2]) {
     HEAPF32[$sy0 >> 2] = +HEAPF32[$y_bottom >> 2] - (+HEAPF32[$sy0 >> 2] - +HEAPF32[$y_top$addr >> 2]);
     HEAPF32[$sy1 >> 2] = +HEAPF32[$y_bottom >> 2] - (+HEAPF32[$sy1 >> 2] - +HEAPF32[$y_top$addr >> 2]);
     HEAPF32[$t >> 2] = +HEAPF32[$sy0 >> 2];
     HEAPF32[$sy0 >> 2] = +HEAPF32[$sy1 >> 2];
     HEAPF32[$sy1 >> 2] = +HEAPF32[$t >> 2];
     HEAPF32[$t >> 2] = +HEAPF32[$x_bottom >> 2];
     HEAPF32[$x_bottom >> 2] = +HEAPF32[$x_top >> 2];
     HEAPF32[$x_top >> 2] = +HEAPF32[$t >> 2];
     HEAPF32[$dx >> 2] = -+HEAPF32[$dx >> 2];
     HEAPF32[$dy >> 2] = -+HEAPF32[$dy >> 2];
     HEAPF32[$t >> 2] = +HEAPF32[$x014 >> 2];
     HEAPF32[$x014 >> 2] = +HEAPF32[$xb >> 2];
     HEAPF32[$xb >> 2] = +HEAPF32[$t >> 2];
    }
    HEAP32[$x1 >> 2] = ~~+HEAPF32[$x_top >> 2];
    HEAP32[$x2 >> 2] = ~~+HEAPF32[$x_bottom >> 2];
    HEAPF32[$y_crossing >> 2] = (+((HEAP32[$x1 >> 2] | 0) + 1 | 0) - +HEAPF32[$x014 >> 2]) * +HEAPF32[$dy >> 2] + +HEAPF32[$y_top$addr >> 2];
    HEAPF32[$sign >> 2] = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 16 >> 2];
    HEAPF32[$area >> 2] = +HEAPF32[$sign >> 2] * (+HEAPF32[$y_crossing >> 2] - +HEAPF32[$sy0 >> 2]);
    $arrayidx119 = (HEAP32[$scanline$addr >> 2] | 0) + (HEAP32[$x1 >> 2] << 2) | 0;
    HEAPF32[$arrayidx119 >> 2] = +HEAPF32[$arrayidx119 >> 2] + +HEAPF32[$area >> 2] * (1.0 - (+HEAPF32[$x_top >> 2] - +(HEAP32[$x1 >> 2] | 0) + +((HEAP32[$x1 >> 2] | 0) + 1 - (HEAP32[$x1 >> 2] | 0) | 0)) / 2.0);
    HEAPF32[$step >> 2] = +HEAPF32[$sign >> 2] * +HEAPF32[$dy >> 2];
    HEAP32[$x89 >> 2] = (HEAP32[$x1 >> 2] | 0) + 1;
    while (1) {
     if ((HEAP32[$x89 >> 2] | 0) >= (HEAP32[$x2 >> 2] | 0)) break;
     $arrayidx127 = (HEAP32[$scanline$addr >> 2] | 0) + (HEAP32[$x89 >> 2] << 2) | 0;
     HEAPF32[$arrayidx127 >> 2] = +HEAPF32[$arrayidx127 >> 2] + (+HEAPF32[$area >> 2] + +HEAPF32[$step >> 2] / 2.0);
     HEAPF32[$area >> 2] = +HEAPF32[$area >> 2] + +HEAPF32[$step >> 2];
     HEAP32[$x89 >> 2] = (HEAP32[$x89 >> 2] | 0) + 1;
    }
    HEAPF32[$y_crossing >> 2] = +HEAPF32[$y_crossing >> 2] + +HEAPF32[$dy >> 2] * +((HEAP32[$x2 >> 2] | 0) - ((HEAP32[$x1 >> 2] | 0) + 1) | 0);
    if (!(+Math_abs(+(+HEAPF32[$area >> 2])) <= 1.0099999904632568)) {
     label = 33;
     break L1;
    }
    $arrayidx152 = (HEAP32[$scanline$addr >> 2] | 0) + (HEAP32[$x2 >> 2] << 2) | 0;
    HEAPF32[$arrayidx152 >> 2] = +HEAPF32[$arrayidx152 >> 2] + (+HEAPF32[$area >> 2] + +HEAPF32[$sign >> 2] * (1.0 - (+((HEAP32[$x2 >> 2] | 0) - (HEAP32[$x2 >> 2] | 0) | 0) + (+HEAPF32[$x_bottom >> 2] - +(HEAP32[$x2 >> 2] | 0))) / 2.0) * (+HEAPF32[$sy1 >> 2] - +HEAPF32[$y_crossing >> 2]));
    $arrayidx156 = (HEAP32[$scanline_fill$addr >> 2] | 0) + (HEAP32[$x2 >> 2] << 2) | 0;
    HEAPF32[$arrayidx156 >> 2] = +HEAPF32[$arrayidx156 >> 2] + +HEAPF32[$sign >> 2] * (+HEAPF32[$sy1 >> 2] - +HEAPF32[$sy0 >> 2]);
    break;
   }
   HEAP32[$x160 >> 2] = 0;
   while (1) {
    if ((HEAP32[$x160 >> 2] | 0) >= (HEAP32[$len$addr >> 2] | 0)) break L5;
    HEAPF32[$y0 >> 2] = +HEAPF32[$y_top$addr >> 2];
    HEAPF32[$x1165 >> 2] = +(HEAP32[$x160 >> 2] | 0);
    HEAPF32[$x2167 >> 2] = +((HEAP32[$x160 >> 2] | 0) + 1 | 0);
    HEAPF32[$x3 >> 2] = +HEAPF32[$xb >> 2];
    HEAPF32[$y3 >> 2] = +HEAPF32[$y_bottom >> 2];
    HEAPF32[$y1 >> 2] = (+(HEAP32[$x160 >> 2] | 0) - +HEAPF32[$x014 >> 2]) / +HEAPF32[$dx >> 2] + +HEAPF32[$y_top$addr >> 2];
    HEAPF32[$y2 >> 2] = (+((HEAP32[$x160 >> 2] | 0) + 1 | 0) - +HEAPF32[$x014 >> 2]) / +HEAPF32[$dx >> 2] + +HEAPF32[$y_top$addr >> 2];
    if (+HEAPF32[$x014 >> 2] < +HEAPF32[$x1165 >> 2]) if (+HEAPF32[$x3 >> 2] > +HEAPF32[$x2167 >> 2]) {
     _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x014 >> 2], +HEAPF32[$y0 >> 2], +HEAPF32[$x1165 >> 2], +HEAPF32[$y1 >> 2]);
     _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x1165 >> 2], +HEAPF32[$y1 >> 2], +HEAPF32[$x2167 >> 2], +HEAPF32[$y2 >> 2]);
     _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x2167 >> 2], +HEAPF32[$y2 >> 2], +HEAPF32[$x3 >> 2], +HEAPF32[$y3 >> 2]);
    } else label = 40; else label = 40;
    L46 : do if ((label | 0) == 40) {
     label = 0;
     if (+HEAPF32[$x3 >> 2] < +HEAPF32[$x1165 >> 2]) if (+HEAPF32[$x014 >> 2] > +HEAPF32[$x2167 >> 2]) {
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x014 >> 2], +HEAPF32[$y0 >> 2], +HEAPF32[$x2167 >> 2], +HEAPF32[$y2 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x2167 >> 2], +HEAPF32[$y2 >> 2], +HEAPF32[$x1165 >> 2], +HEAPF32[$y1 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x1165 >> 2], +HEAPF32[$y1 >> 2], +HEAPF32[$x3 >> 2], +HEAPF32[$y3 >> 2]);
      break;
     }
     if (+HEAPF32[$x014 >> 2] < +HEAPF32[$x1165 >> 2]) if (+HEAPF32[$x3 >> 2] > +HEAPF32[$x1165 >> 2]) {
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x014 >> 2], +HEAPF32[$y0 >> 2], +HEAPF32[$x1165 >> 2], +HEAPF32[$y1 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x1165 >> 2], +HEAPF32[$y1 >> 2], +HEAPF32[$x3 >> 2], +HEAPF32[$y3 >> 2]);
      break;
     }
     if (+HEAPF32[$x3 >> 2] < +HEAPF32[$x1165 >> 2]) if (+HEAPF32[$x014 >> 2] > +HEAPF32[$x1165 >> 2]) {
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x014 >> 2], +HEAPF32[$y0 >> 2], +HEAPF32[$x1165 >> 2], +HEAPF32[$y1 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x1165 >> 2], +HEAPF32[$y1 >> 2], +HEAPF32[$x3 >> 2], +HEAPF32[$y3 >> 2]);
      break;
     }
     if (+HEAPF32[$x014 >> 2] < +HEAPF32[$x2167 >> 2]) if (+HEAPF32[$x3 >> 2] > +HEAPF32[$x2167 >> 2]) {
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x014 >> 2], +HEAPF32[$y0 >> 2], +HEAPF32[$x2167 >> 2], +HEAPF32[$y2 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x2167 >> 2], +HEAPF32[$y2 >> 2], +HEAPF32[$x3 >> 2], +HEAPF32[$y3 >> 2]);
      break;
     }
     do if (+HEAPF32[$x3 >> 2] < +HEAPF32[$x2167 >> 2]) {
      if (!(+HEAPF32[$x014 >> 2] > +HEAPF32[$x2167 >> 2])) break;
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x014 >> 2], +HEAPF32[$y0 >> 2], +HEAPF32[$x2167 >> 2], +HEAPF32[$y2 >> 2]);
      _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x2167 >> 2], +HEAPF32[$y2 >> 2], +HEAPF32[$x3 >> 2], +HEAPF32[$y3 >> 2]);
      break L46;
     } while (0);
     _stbtt__handle_clipped_edge(HEAP32[$scanline$addr >> 2] | 0, HEAP32[$x160 >> 2] | 0, HEAP32[$e$addr >> 2] | 0, +HEAPF32[$x014 >> 2], +HEAPF32[$y0 >> 2], +HEAPF32[$x3 >> 2], +HEAPF32[$y3 >> 2]);
    } while (0);
    HEAP32[$x160 >> 2] = (HEAP32[$x160 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$e$addr >> 2] = HEAP32[HEAP32[$e$addr >> 2] >> 2];
 }
 if ((label | 0) == 4) ___assert_fail(44730, 44131, 2663, 44745); else if ((label | 0) == 12) ___assert_fail(44774, 44131, 2682, 44745); else if ((label | 0) == 25) ___assert_fail(44810, 44131, 2710, 44745); else if ((label | 0) == 33) ___assert_fail(44828, 44131, 2747, 44745); else if ((label | 0) == 58) {
  STACKTOP = sp;
  return;
 }
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$013 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$012 = 0, $add$ptr = 0, $add$ptr5 = 0, $add230 = 0, $add248 = 0, $add258 = 0, $add570 = 0, $add6 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx271 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk340 = 0, $bk70 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $fd307 = 0, $fd318$pre$phiZ2D = 0, $fd344 = 0, $fd43 = 0, $fd53$pre$phiZ2D = 0, $fd635 = 0, $fd74 = 0, $head201 = 0, $head223 = 0, $p$addr$1 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl586 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0;
 $add$ptr = $p + $psize | 0;
 $0 = HEAP32[$p + 4 >> 2] | 0;
 L1 : do if (!($0 & 1)) {
  $1 = HEAP32[$p >> 2] | 0;
  if (!($0 & 3)) return;
  $add$ptr5 = $p + (0 - $1) | 0;
  $add6 = $1 + $psize | 0;
  $2 = HEAP32[548311] | 0;
  if ($add$ptr5 >>> 0 < $2 >>> 0) _abort();
  if ((HEAP32[548312] | 0) == ($add$ptr5 | 0)) {
   $head201 = $add$ptr + 4 | 0;
   $27 = HEAP32[$head201 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   HEAP32[548309] = $add6;
   HEAP32[$head201 >> 2] = $27 & -2;
   HEAP32[$add$ptr5 + 4 >> 2] = $add6 | 1;
   HEAP32[$add$ptr >> 2] = $add6;
   return;
  }
  $shr = $1 >>> 3;
  if ($1 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
   $arrayidx = 2193268 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($2 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[548307] = HEAP32[548307] & ~(1 << $shr);
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd53$pre$phiZ2D = $5 + 8 | 0; else {
    if ($2 >>> 0 > $5 >>> 0) _abort();
    $fd43 = $5 + 8 | 0;
    if ((HEAP32[$fd43 >> 2] | 0) == ($add$ptr5 | 0)) $fd53$pre$phiZ2D = $fd43; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd53$pre$phiZ2D >> 2] = $4;
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
   break;
  }
  $9 = HEAP32[$add$ptr5 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr5 | 0)) {
   $child = $add$ptr5 + 16 | 0;
   $arrayidx86 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx86 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx86;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx95 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx95 >> 2] | 0;
    if (!$16) {
     $arrayidx100 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx100 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx100;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx95;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($2 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   if ($2 >>> 0 > $11 >>> 0) _abort();
   $bk70 = $11 + 12 | 0;
   if ((HEAP32[$bk70 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   $fd74 = $10 + 8 | 0;
   if ((HEAP32[$fd74 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$bk70 >> 2] = $10;
    HEAP32[$fd74 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
  } else {
   $18 = HEAP32[$add$ptr5 + 28 >> 2] | 0;
   $arrayidx118 = 2193532 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx118 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$arrayidx118 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[548308] = HEAP32[548308] & ~(1 << $18);
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    }
   } else if ((HEAP32[548311] | 0) >>> 0 > $9 >>> 0) _abort(); else {
    $arrayidx138 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx138 >> 2] | 0) == ($add$ptr5 | 0) ? $arrayidx138 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    } else break;
   } while (0);
   $23 = HEAP32[548311] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child161 = $add$ptr5 + 16 | 0;
   $24 = HEAP32[$child161 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child161 + 4 >> 2] | 0;
   if (!$25) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
   } else if ((HEAP32[548311] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
  }
 } else {
  $p$addr$1 = $p;
  $psize$addr$1 = $psize;
 } while (0);
 $28 = HEAP32[548311] | 0;
 if ($add$ptr >>> 0 < $28 >>> 0) _abort();
 $head223 = $add$ptr + 4 | 0;
 $29 = HEAP32[$head223 >> 2] | 0;
 if (!($29 & 2)) {
  if ((HEAP32[548313] | 0) == ($add$ptr | 0)) {
   $add230 = (HEAP32[548310] | 0) + $psize$addr$1 | 0;
   HEAP32[548310] = $add230;
   HEAP32[548313] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add230 | 1;
   if (($p$addr$1 | 0) != (HEAP32[548312] | 0)) return;
   HEAP32[548312] = 0;
   HEAP32[548309] = 0;
   return;
  }
  if ((HEAP32[548312] | 0) == ($add$ptr | 0)) {
   $add248 = (HEAP32[548309] | 0) + $psize$addr$1 | 0;
   HEAP32[548309] = $add248;
   HEAP32[548312] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add248 | 1;
   HEAP32[$p$addr$1 + $add248 >> 2] = $add248;
   return;
  }
  $add258 = ($29 & -8) + $psize$addr$1 | 0;
  $shr259 = $29 >>> 3;
  L99 : do if ($29 >>> 0 < 256) {
   $35 = HEAP32[$add$ptr + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr + 12 >> 2] | 0;
   $arrayidx271 = 2193268 + ($shr259 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx271 | 0)) {
    if ($28 >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[548307] = HEAP32[548307] & ~(1 << $shr259);
    break;
   }
   if (($36 | 0) == ($arrayidx271 | 0)) $fd318$pre$phiZ2D = $36 + 8 | 0; else {
    if ($28 >>> 0 > $36 >>> 0) _abort();
    $fd307 = $36 + 8 | 0;
    if ((HEAP32[$fd307 >> 2] | 0) == ($add$ptr | 0)) $fd318$pre$phiZ2D = $fd307; else _abort();
   }
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd318$pre$phiZ2D >> 2] = $35;
  } else {
   $40 = HEAP32[$add$ptr + 24 >> 2] | 0;
   $41 = HEAP32[$add$ptr + 12 >> 2] | 0;
   do if (($41 | 0) == ($add$ptr | 0)) {
    $child358 = $add$ptr + 16 | 0;
    $arrayidx359 = $child358 + 4 | 0;
    $45 = HEAP32[$arrayidx359 >> 2] | 0;
    if (!$45) {
     $46 = HEAP32[$child358 >> 2] | 0;
     if (!$46) {
      $R328$3 = 0;
      break;
     } else {
      $R328$1$ph = $46;
      $RP357$1$ph = $child358;
     }
    } else {
     $R328$1$ph = $45;
     $RP357$1$ph = $arrayidx359;
    }
    $R328$1 = $R328$1$ph;
    $RP357$1 = $RP357$1$ph;
    while (1) {
     $arrayidx371 = $R328$1 + 20 | 0;
     $47 = HEAP32[$arrayidx371 >> 2] | 0;
     if (!$47) {
      $arrayidx376 = $R328$1 + 16 | 0;
      $48 = HEAP32[$arrayidx376 >> 2] | 0;
      if (!$48) break; else {
       $R328$1$be = $48;
       $RP357$1$be = $arrayidx376;
      }
     } else {
      $R328$1$be = $47;
      $RP357$1$be = $arrayidx371;
     }
     $R328$1 = $R328$1$be;
     $RP357$1 = $RP357$1$be;
    }
    if ($28 >>> 0 > $RP357$1 >>> 0) _abort(); else {
     HEAP32[$RP357$1 >> 2] = 0;
     $R328$3 = $R328$1;
     break;
    }
   } else {
    $42 = HEAP32[$add$ptr + 8 >> 2] | 0;
    if ($28 >>> 0 > $42 >>> 0) _abort();
    $bk340 = $42 + 12 | 0;
    if ((HEAP32[$bk340 >> 2] | 0) != ($add$ptr | 0)) _abort();
    $fd344 = $41 + 8 | 0;
    if ((HEAP32[$fd344 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$bk340 >> 2] = $41;
     HEAP32[$fd344 >> 2] = $42;
     $R328$3 = $41;
     break;
    } else _abort();
   } while (0);
   if ($40 | 0) {
    $49 = HEAP32[$add$ptr + 28 >> 2] | 0;
    $arrayidx399 = 2193532 + ($49 << 2) | 0;
    do if ((HEAP32[$arrayidx399 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$arrayidx399 >> 2] = $R328$3;
     if (!$R328$3) {
      HEAP32[548308] = HEAP32[548308] & ~(1 << $49);
      break L99;
     }
    } else if ((HEAP32[548311] | 0) >>> 0 > $40 >>> 0) _abort(); else {
     $arrayidx420 = $40 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx420 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx420 : $40 + 20 | 0) >> 2] = $R328$3;
     if (!$R328$3) break L99; else break;
    } while (0);
    $54 = HEAP32[548311] | 0;
    if ($54 >>> 0 > $R328$3 >>> 0) _abort();
    HEAP32[$R328$3 + 24 >> 2] = $40;
    $child445 = $add$ptr + 16 | 0;
    $55 = HEAP32[$child445 >> 2] | 0;
    do if ($55 | 0) if ($54 >>> 0 > $55 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 16 >> 2] = $55;
     HEAP32[$55 + 24 >> 2] = $R328$3;
     break;
    } while (0);
    $56 = HEAP32[$child445 + 4 >> 2] | 0;
    if ($56 | 0) if ((HEAP32[548311] | 0) >>> 0 > $56 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 20 >> 2] = $56;
     HEAP32[$56 + 24 >> 2] = $R328$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$addr$1 + 4 >> 2] = $add258 | 1;
  HEAP32[$p$addr$1 + $add258 >> 2] = $add258;
  if (($p$addr$1 | 0) == (HEAP32[548312] | 0)) {
   HEAP32[548309] = $add258;
   return;
  } else $psize$addr$2 = $add258;
 } else {
  HEAP32[$head223 >> 2] = $29 & -2;
  HEAP32[$p$addr$1 + 4 >> 2] = $psize$addr$1 | 1;
  HEAP32[$p$addr$1 + $psize$addr$1 >> 2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 if ($psize$addr$2 >>> 0 < 256) {
  $arrayidx516 = 2193268 + ($shr507 << 1 << 2) | 0;
  $59 = HEAP32[548307] | 0;
  $shl519 = 1 << $shr507;
  if (!($59 & $shl519)) {
   HEAP32[548307] = $59 | $shl519;
   $$pre$phiZ2D = $arrayidx516 + 8 | 0;
   $F517$0 = $arrayidx516;
  } else {
   $60 = $arrayidx516 + 8 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if ((HEAP32[548311] | 0) >>> 0 > $61 >>> 0) _abort(); else {
    $$pre$phiZ2D = $60;
    $F517$0 = $61;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$addr$1;
  HEAP32[$F517$0 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $F517$0;
  HEAP32[$p$addr$1 + 12 >> 2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 if (!$shr546) $I545$0 = 0; else if ($psize$addr$2 >>> 0 > 16777215) $I545$0 = 31; else {
  $and556 = ($shr546 + 1048320 | 0) >>> 16 & 8;
  $shl557 = $shr546 << $and556;
  $and560 = ($shl557 + 520192 | 0) >>> 16 & 4;
  $shl562 = $shl557 << $and560;
  $and565 = ($shl562 + 245760 | 0) >>> 16 & 2;
  $add570 = 14 - ($and560 | $and556 | $and565) + ($shl562 << $and565 >>> 15) | 0;
  $I545$0 = $psize$addr$2 >>> ($add570 + 7 | 0) & 1 | $add570 << 1;
 }
 $arrayidx579 = 2193532 + ($I545$0 << 2) | 0;
 HEAP32[$p$addr$1 + 28 >> 2] = $I545$0;
 HEAP32[$p$addr$1 + 20 >> 2] = 0;
 HEAP32[$p$addr$1 + 16 >> 2] = 0;
 $63 = HEAP32[548308] | 0;
 $shl586 = 1 << $I545$0;
 if (!($63 & $shl586)) {
  HEAP32[548308] = $63 | $shl586;
  HEAP32[$arrayidx579 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $arrayidx579;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 }
 $64 = HEAP32[$arrayidx579 >> 2] | 0;
 L189 : do if ((HEAP32[$64 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) $T$0$lcssa = $64; else {
  $K597$013 = $psize$addr$2 << (($I545$0 | 0) == 31 ? 0 : 25 - ($I545$0 >>> 1) | 0);
  $T$012 = $64;
  while (1) {
   $arrayidx613 = $T$012 + 16 + ($K597$013 >>> 31 << 2) | 0;
   $66 = HEAP32[$arrayidx613 >> 2] | 0;
   if (!$66) break;
   if ((HEAP32[$66 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) {
    $T$0$lcssa = $66;
    break L189;
   } else {
    $K597$013 = $K597$013 << 1;
    $T$012 = $66;
   }
  }
  if ((HEAP32[548311] | 0) >>> 0 > $arrayidx613 >>> 0) _abort();
  HEAP32[$arrayidx613 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $T$012;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 } while (0);
 $fd635 = $T$0$lcssa + 8 | 0;
 $69 = HEAP32[$fd635 >> 2] | 0;
 $70 = HEAP32[548311] | 0;
 if (!($70 >>> 0 <= $69 >>> 0 & $70 >>> 0 <= $T$0$lcssa >>> 0)) _abort();
 HEAP32[$69 + 12 >> 2] = $p$addr$1;
 HEAP32[$fd635 >> 2] = $p$addr$1;
 HEAP32[$p$addr$1 + 8 >> 2] = $69;
 HEAP32[$p$addr$1 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$p$addr$1 + 24 >> 2] = 0;
 return;
}

function _stbi__tga_load($s, $x, $y, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $186 = 0, $99 = 0, $RLE_cmd = 0, $RLE_count = 0, $RLE_repeating = 0, $call155 = 0, $comp$addr = 0, $cond127 = 0, $cond57 = 0, $i = 0, $index1 = 0, $index2 = 0, $j = 0, $mul = 0, $mul168 = 0, $mul184 = 0, $mul188 = 0, $pal_entry = 0, $pal_idx = 0, $raw_data = 0, $read_next_pixel = 0, $req_comp$addr = 0, $retval = 0, $row = 0, $s$addr = 0, $temp = 0, $temp223 = 0, $tga_bits_per_pixel = 0, $tga_comp = 0, $tga_data = 0, $tga_height = 0, $tga_image_type = 0, $tga_indexed = 0, $tga_inverted = 0, $tga_is_RLE = 0, $tga_offset = 0, $tga_palette = 0, $tga_palette_bits = 0, $tga_palette_len = 0, $tga_palette_start = 0, $tga_pixel = 0, $tga_rgb16 = 0, $tga_row = 0, $tga_width = 0, $tga_x_origin = 0, $tga_y_origin = 0, $tobool28 = 0, $tobool37 = 0, $tobool44 = 0, $tobool68 = 0, $tobool89 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $retval = sp + 144 | 0;
 $s$addr = sp + 140 | 0;
 $x$addr = sp + 136 | 0;
 $y$addr = sp + 132 | 0;
 $comp$addr = sp + 128 | 0;
 $req_comp$addr = sp + 124 | 0;
 $tga_offset = sp + 116 | 0;
 $tga_indexed = sp + 112 | 0;
 $tga_image_type = sp + 108 | 0;
 $tga_is_RLE = sp + 104 | 0;
 $tga_palette_start = sp + 100 | 0;
 $tga_palette_len = sp + 96 | 0;
 $tga_palette_bits = sp + 92 | 0;
 $tga_x_origin = sp + 88 | 0;
 $tga_y_origin = sp + 84 | 0;
 $tga_width = sp + 80 | 0;
 $tga_height = sp + 76 | 0;
 $tga_bits_per_pixel = sp + 72 | 0;
 $tga_comp = sp + 68 | 0;
 $tga_rgb16 = sp + 64 | 0;
 $tga_inverted = sp + 60 | 0;
 $tga_data = sp + 56 | 0;
 $tga_palette = sp + 52 | 0;
 $i = sp + 48 | 0;
 $j = sp + 44 | 0;
 $raw_data = sp + 152 | 0;
 $RLE_count = sp + 40 | 0;
 $RLE_repeating = sp + 36 | 0;
 $read_next_pixel = sp + 32 | 0;
 $row = sp + 28 | 0;
 $tga_row = sp + 24 | 0;
 $pal_entry = sp + 20 | 0;
 $RLE_cmd = sp + 16 | 0;
 $pal_idx = sp + 12 | 0;
 $index1 = sp + 8 | 0;
 $index2 = sp + 4 | 0;
 $temp = sp + 149 | 0;
 $tga_pixel = sp;
 $temp223 = sp + 148 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[sp + 120 >> 2] = $ri;
 HEAP32[$tga_offset >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 HEAP32[$tga_indexed >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 HEAP32[$tga_image_type >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 HEAP32[$tga_is_RLE >> 2] = 0;
 HEAP32[$tga_palette_start >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$tga_palette_len >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$tga_palette_bits >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 HEAP32[$tga_x_origin >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$tga_y_origin >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$tga_width >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$tga_height >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$tga_bits_per_pixel >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 HEAP32[$tga_rgb16 >> 2] = 0;
 HEAP32[$tga_inverted >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 HEAP32[$tga_palette >> 2] = 0;
 HEAP8[$raw_data >> 0] = 0;
 HEAP8[$raw_data + 1 >> 0] = 0;
 HEAP8[$raw_data + 2 >> 0] = 0;
 HEAP8[$raw_data + 3 >> 0] = 0;
 HEAP32[$RLE_count >> 2] = 0;
 HEAP32[$RLE_repeating >> 2] = 0;
 HEAP32[$read_next_pixel >> 2] = 1;
 if ((HEAP32[$tga_image_type >> 2] | 0) >= 8) {
  HEAP32[$tga_image_type >> 2] = (HEAP32[$tga_image_type >> 2] | 0) - 8;
  HEAP32[$tga_is_RLE >> 2] = 1;
 }
 HEAP32[$tga_inverted >> 2] = 1 - (HEAP32[$tga_inverted >> 2] >> 5 & 1);
 if (HEAP32[$tga_indexed >> 2] | 0) HEAP32[$tga_comp >> 2] = _stbi__tga_get_comp(HEAP32[$tga_palette_bits >> 2] | 0, 0, $tga_rgb16) | 0; else HEAP32[$tga_comp >> 2] = _stbi__tga_get_comp(HEAP32[$tga_bits_per_pixel >> 2] | 0, (HEAP32[$tga_image_type >> 2] | 0) == 3 & 1, $tga_rgb16) | 0;
 if (!(HEAP32[$tga_comp >> 2] | 0)) {
  $tobool28 = (_stbi__err(47559) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool28 ? 0 : 0;
  $186 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $186 | 0;
 }
 HEAP32[HEAP32[$x$addr >> 2] >> 2] = HEAP32[$tga_width >> 2];
 HEAP32[HEAP32[$y$addr >> 2] >> 2] = HEAP32[$tga_height >> 2];
 if (HEAP32[$comp$addr >> 2] | 0) HEAP32[HEAP32[$comp$addr >> 2] >> 2] = HEAP32[$tga_comp >> 2];
 if (!(_stbi__mad3sizes_valid(HEAP32[$tga_width >> 2] | 0, HEAP32[$tga_height >> 2] | 0, HEAP32[$tga_comp >> 2] | 0, 0) | 0)) {
  $tobool37 = (_stbi__err(47570) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool37 ? 0 : 0;
  $186 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $186 | 0;
 }
 HEAP32[$tga_data >> 2] = _stbi__malloc_mad3(HEAP32[$tga_width >> 2] | 0, HEAP32[$tga_height >> 2] | 0, HEAP32[$tga_comp >> 2] | 0, 0) | 0;
 if (!(HEAP32[$tga_data >> 2] | 0)) {
  $tobool44 = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool44 ? 0 : 0;
  $186 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $186 | 0;
 }
 _stbi__skip(HEAP32[$s$addr >> 2] | 0, HEAP32[$tga_offset >> 2] | 0);
 L23 : do if ((HEAP32[$tga_indexed >> 2] | 0) != 0 | (HEAP32[$tga_is_RLE >> 2] | 0) != 0 | (HEAP32[$tga_rgb16 >> 2] | 0) != 0) {
  L25 : do if (HEAP32[$tga_indexed >> 2] | 0) {
   _stbi__skip(HEAP32[$s$addr >> 2] | 0, HEAP32[$tga_palette_start >> 2] | 0);
   HEAP32[$tga_palette >> 2] = _stbi__malloc_mad2(HEAP32[$tga_palette_len >> 2] | 0, HEAP32[$tga_comp >> 2] | 0, 0) | 0;
   if (!(HEAP32[$tga_palette >> 2] | 0)) {
    _free(HEAP32[$tga_data >> 2] | 0);
    $tobool68 = (_stbi__err(47531) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool68 ? 0 : 0;
    $186 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $186 | 0;
   }
   if (!(HEAP32[$tga_rgb16 >> 2] | 0)) {
    if (_stbi__getn(HEAP32[$s$addr >> 2] | 0, HEAP32[$tga_palette >> 2] | 0, Math_imul(HEAP32[$tga_palette_len >> 2] | 0, HEAP32[$tga_comp >> 2] | 0) | 0) | 0) break;
    _free(HEAP32[$tga_data >> 2] | 0);
    _free(HEAP32[$tga_palette >> 2] | 0);
    $tobool89 = (_stbi__err(47616) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool89 ? 0 : 0;
    $186 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $186 | 0;
   }
   HEAP32[$pal_entry >> 2] = HEAP32[$tga_palette >> 2];
   if ((HEAP32[$tga_comp >> 2] | 0) != 3) ___assert_fail(47580, 47433, 5600, 47601);
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$tga_palette_len >> 2] | 0)) break L25;
    _stbi__tga_read_rgb16(HEAP32[$s$addr >> 2] | 0, HEAP32[$pal_entry >> 2] | 0);
    HEAP32[$pal_entry >> 2] = (HEAP32[$pal_entry >> 2] | 0) + (HEAP32[$tga_comp >> 2] | 0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$i >> 2] = 0;
  L43 : while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$tga_width >> 2] | 0, HEAP32[$tga_height >> 2] | 0) | 0)) break;
   do if (HEAP32[$tga_is_RLE >> 2] | 0) {
    if (!(HEAP32[$RLE_count >> 2] | 0)) {
     HEAP32[$RLE_cmd >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
     HEAP32[$RLE_count >> 2] = 1 + (HEAP32[$RLE_cmd >> 2] & 127);
     HEAP32[$RLE_repeating >> 2] = HEAP32[$RLE_cmd >> 2] >> 7;
     HEAP32[$read_next_pixel >> 2] = 1;
     break;
    }
    if (!(HEAP32[$RLE_repeating >> 2] | 0)) HEAP32[$read_next_pixel >> 2] = 1;
   } else HEAP32[$read_next_pixel >> 2] = 1; while (0);
   if (HEAP32[$read_next_pixel >> 2] | 0) {
    L56 : do if (HEAP32[$tga_indexed >> 2] | 0) {
     $99 = HEAP32[$s$addr >> 2] | 0;
     if ((HEAP32[$tga_bits_per_pixel >> 2] | 0) == 8) $cond127 = (_stbi__get8($99) | 0) & 255; else $cond127 = _stbi__get16le($99) | 0;
     HEAP32[$pal_idx >> 2] = $cond127;
     HEAP32[$pal_idx >> 2] = (HEAP32[$pal_idx >> 2] | 0) >= (HEAP32[$tga_palette_len >> 2] | 0) ? 0 : $cond127;
     HEAP32[$pal_idx >> 2] = Math_imul(HEAP32[$pal_idx >> 2] | 0, HEAP32[$tga_comp >> 2] | 0) | 0;
     HEAP32[$j >> 2] = 0;
     while (1) {
      if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$tga_comp >> 2] | 0)) break L56;
      HEAP8[$raw_data + (HEAP32[$j >> 2] | 0) >> 0] = HEAP8[(HEAP32[$tga_palette >> 2] | 0) + ((HEAP32[$pal_idx >> 2] | 0) + (HEAP32[$j >> 2] | 0)) >> 0] | 0;
      HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
     }
    } else {
     if (HEAP32[$tga_rgb16 >> 2] | 0) {
      if ((HEAP32[$tga_comp >> 2] | 0) != 3) {
       label = 50;
       break L43;
      }
      _stbi__tga_read_rgb16(HEAP32[$s$addr >> 2] | 0, $raw_data);
      break;
     }
     HEAP32[$j >> 2] = 0;
     while (1) {
      if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$tga_comp >> 2] | 0)) break L56;
      $call155 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
      HEAP8[$raw_data + (HEAP32[$j >> 2] | 0) >> 0] = $call155;
      HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
     }
    } while (0);
    HEAP32[$read_next_pixel >> 2] = 0;
   }
   HEAP32[$j >> 2] = 0;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$tga_comp >> 2] | 0)) break;
    $mul168 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$tga_comp >> 2] | 0) | 0;
    HEAP8[(HEAP32[$tga_data >> 2] | 0) + ($mul168 + (HEAP32[$j >> 2] | 0)) >> 0] = HEAP8[$raw_data + (HEAP32[$j >> 2] | 0) >> 0] | 0;
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   HEAP32[$RLE_count >> 2] = (HEAP32[$RLE_count >> 2] | 0) + -1;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  if ((label | 0) == 50) ___assert_fail(47580, 47433, 5649, 47601);
  L82 : do if (HEAP32[$tga_inverted >> 2] | 0) {
   HEAP32[$j >> 2] = 0;
   while (1) {
    if ((HEAP32[$j >> 2] << 1 | 0) >= (HEAP32[$tga_height >> 2] | 0)) break L82;
    $mul184 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$tga_width >> 2] | 0) | 0;
    HEAP32[$index1 >> 2] = Math_imul($mul184, HEAP32[$tga_comp >> 2] | 0) | 0;
    $mul188 = Math_imul((HEAP32[$tga_height >> 2] | 0) - 1 - (HEAP32[$j >> 2] | 0) | 0, HEAP32[$tga_width >> 2] | 0) | 0;
    HEAP32[$index2 >> 2] = Math_imul($mul188, HEAP32[$tga_comp >> 2] | 0) | 0;
    HEAP32[$i >> 2] = Math_imul(HEAP32[$tga_width >> 2] | 0, HEAP32[$tga_comp >> 2] | 0) | 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) <= 0) break;
     HEAP8[$temp >> 0] = HEAP8[(HEAP32[$tga_data >> 2] | 0) + (HEAP32[$index1 >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$tga_data >> 2] | 0) + (HEAP32[$index1 >> 2] | 0) >> 0] = HEAP8[(HEAP32[$tga_data >> 2] | 0) + (HEAP32[$index2 >> 2] | 0) >> 0] | 0;
     HEAP8[(HEAP32[$tga_data >> 2] | 0) + (HEAP32[$index2 >> 2] | 0) >> 0] = HEAP8[$temp >> 0] | 0;
     HEAP32[$index1 >> 2] = (HEAP32[$index1 >> 2] | 0) + 1;
     HEAP32[$index2 >> 2] = (HEAP32[$index2 >> 2] | 0) + 1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
    }
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
  } while (0);
  if (HEAP32[$tga_palette >> 2] | 0) _free(HEAP32[$tga_palette >> 2] | 0);
 } else {
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$tga_height >> 2] | 0)) break L23;
   if (HEAP32[$tga_inverted >> 2] | 0) $cond57 = (HEAP32[$tga_height >> 2] | 0) - (HEAP32[$i >> 2] | 0) - 1 | 0; else $cond57 = HEAP32[$i >> 2] | 0;
   HEAP32[$row >> 2] = $cond57;
   $mul = Math_imul(HEAP32[$row >> 2] | 0, HEAP32[$tga_width >> 2] | 0) | 0;
   HEAP32[$tga_row >> 2] = (HEAP32[$tga_data >> 2] | 0) + (Math_imul($mul, HEAP32[$tga_comp >> 2] | 0) | 0);
   _stbi__getn(HEAP32[$s$addr >> 2] | 0, HEAP32[$tga_row >> 2] | 0, Math_imul(HEAP32[$tga_width >> 2] | 0, HEAP32[$tga_comp >> 2] | 0) | 0) | 0;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 L102 : do if (!((HEAP32[$tga_comp >> 2] | 0) < 3 | (HEAP32[$tga_rgb16 >> 2] | 0) != 0)) {
  HEAP32[$tga_pixel >> 2] = HEAP32[$tga_data >> 2];
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$tga_width >> 2] | 0, HEAP32[$tga_height >> 2] | 0) | 0)) break L102;
   HEAP8[$temp223 >> 0] = HEAP8[HEAP32[$tga_pixel >> 2] >> 0] | 0;
   HEAP8[HEAP32[$tga_pixel >> 2] >> 0] = HEAP8[(HEAP32[$tga_pixel >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$tga_pixel >> 2] | 0) + 2 >> 0] = HEAP8[$temp223 >> 0] | 0;
   HEAP32[$tga_pixel >> 2] = (HEAP32[$tga_pixel >> 2] | 0) + (HEAP32[$tga_comp >> 2] | 0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAP32[$req_comp$addr >> 2] | 0) if ((HEAP32[$req_comp$addr >> 2] | 0) != (HEAP32[$tga_comp >> 2] | 0)) HEAP32[$tga_data >> 2] = _stbi__convert_format(HEAP32[$tga_data >> 2] | 0, HEAP32[$tga_comp >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$tga_width >> 2] | 0, HEAP32[$tga_height >> 2] | 0) | 0;
 HEAP32[$tga_y_origin >> 2] = 0;
 HEAP32[$tga_x_origin >> 2] = 0;
 HEAP32[$tga_palette_bits >> 2] = 0;
 HEAP32[$tga_palette_len >> 2] = 0;
 HEAP32[$tga_palette_start >> 2] = 0;
 HEAP32[$retval >> 2] = HEAP32[$tga_data >> 2];
 $186 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $186 | 0;
}

function _stbi__gif_load_next($s, $g, $comp, $req_comp, $two_back) {
 $s = $s | 0;
 $g = $g | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $two_back = $two_back | 0;
 var $137 = 0, $191 = 0, $202 = 0, $217 = 0, $add118 = 0, $arrayidx192 = 0, $arrayidx195 = 0, $arrayidx48 = 0, $arrayidx50 = 0, $arrayidx64 = 0, $arrayidx67 = 0, $call11 = 0, $call14 = 0, $call15 = 0, $comp$addr = 0, $cond149 = 0, $conv128 = 0, $conv213 = 0, $conv231 = 0, $conv249 = 0, $dispose = 0, $ext = 0, $first_frame = 0, $g$addr = 0, $h89 = 0, $len = 0, $mul111 = 0, $mul216 = 0, $o = 0, $pcount = 0, $pi = 0, $retval = 0, $s$addr = 0, $tag = 0, $tobool104 = 0, $tobool160 = 0, $tobool25 = 0, $tobool254 = 0, $tobool6 = 0, $two_back$addr = 0, $w88 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $retval = sp + 68 | 0;
 $s$addr = sp + 64 | 0;
 $g$addr = sp + 60 | 0;
 $comp$addr = sp + 56 | 0;
 $two_back$addr = sp + 48 | 0;
 $dispose = sp + 44 | 0;
 $first_frame = sp + 40 | 0;
 $pi = sp + 36 | 0;
 $pcount = sp + 32 | 0;
 $tag = sp + 28 | 0;
 $x = sp + 24 | 0;
 $y = sp + 20 | 0;
 $w88 = sp + 16 | 0;
 $h89 = sp + 12 | 0;
 $o = sp + 8 | 0;
 $len = sp + 4 | 0;
 $ext = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$g$addr >> 2] = $g;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[sp + 52 >> 2] = $req_comp;
 HEAP32[$two_back$addr >> 2] = $two_back;
 HEAP32[$first_frame >> 2] = 0;
 do if (!(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2] | 0)) {
  if (!(_stbi__gif_header(HEAP32[$s$addr >> 2] | 0, HEAP32[$g$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, 0) | 0)) {
   HEAP32[$retval >> 2] = 0;
   $217 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
  if (!(_stbi__mad3sizes_valid(4, HEAP32[HEAP32[$g$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$g$addr >> 2] | 0) + 4 >> 2] | 0, 0) | 0)) {
   $tobool6 = (_stbi__err(47570) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool6 ? 0 : 0;
   $217 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
  HEAP32[$pcount >> 2] = Math_imul(HEAP32[HEAP32[$g$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$g$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
  $call11 = _stbi__malloc(HEAP32[$pcount >> 2] << 2) | 0;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2] = $call11;
  $call14 = _stbi__malloc(HEAP32[$pcount >> 2] << 2) | 0;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 12 >> 2] = $call14;
  $call15 = _stbi__malloc(HEAP32[$pcount >> 2] | 0) | 0;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 16 >> 2] = $call15;
  if (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2] | 0) if (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 12 >> 2] | 0) if (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 16 >> 2] | 0) {
   _memset(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2] | 0, 0, HEAP32[$pcount >> 2] << 2 | 0) | 0;
   _memset(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 12 >> 2] | 0, 0, HEAP32[$pcount >> 2] << 2 | 0) | 0;
   _memset(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 16 >> 2] | 0, 0, HEAP32[$pcount >> 2] | 0) | 0;
   HEAP32[$first_frame >> 2] = 1;
   break;
  }
  $tobool25 = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool25 ? 0 : 0;
  $217 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $217 | 0;
 } else {
  HEAP32[$dispose >> 2] = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 36 >> 2] & 28) >> 2;
  HEAP32[$pcount >> 2] = Math_imul(HEAP32[HEAP32[$g$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$g$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
  if ((HEAP32[$dispose >> 2] | 0) == 3 & (HEAP32[$two_back$addr >> 2] | 0) == 0) HEAP32[$dispose >> 2] = 2;
  L21 : do if ((HEAP32[$dispose >> 2] | 0) == 3) {
   HEAP32[$pi >> 2] = 0;
   while (1) {
    if ((HEAP32[$pi >> 2] | 0) >= (HEAP32[$pcount >> 2] | 0)) break L21;
    if (HEAP8[(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$pi >> 2] | 0) >> 0] | 0) {
     $arrayidx48 = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$pi >> 2] << 2) | 0;
     $arrayidx50 = (HEAP32[$two_back$addr >> 2] | 0) + (HEAP32[$pi >> 2] << 2) | 0;
     HEAP8[$arrayidx48 >> 0] = HEAP8[$arrayidx50 >> 0] | 0;
     HEAP8[$arrayidx48 + 1 >> 0] = HEAP8[$arrayidx50 + 1 >> 0] | 0;
     HEAP8[$arrayidx48 + 2 >> 0] = HEAP8[$arrayidx50 + 2 >> 0] | 0;
     HEAP8[$arrayidx48 + 3 >> 0] = HEAP8[$arrayidx50 + 3 >> 0] | 0;
    }
    HEAP32[$pi >> 2] = (HEAP32[$pi >> 2] | 0) + 1;
   }
  } else if ((HEAP32[$dispose >> 2] | 0) == 2) {
   HEAP32[$pi >> 2] = 0;
   while (1) {
    if ((HEAP32[$pi >> 2] | 0) >= (HEAP32[$pcount >> 2] | 0)) break L21;
    if (HEAP8[(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$pi >> 2] | 0) >> 0] | 0) {
     $arrayidx64 = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$pi >> 2] << 2) | 0;
     $arrayidx67 = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$pi >> 2] << 2) | 0;
     HEAP8[$arrayidx64 >> 0] = HEAP8[$arrayidx67 >> 0] | 0;
     HEAP8[$arrayidx64 + 1 >> 0] = HEAP8[$arrayidx67 + 1 >> 0] | 0;
     HEAP8[$arrayidx64 + 2 >> 0] = HEAP8[$arrayidx67 + 2 >> 0] | 0;
     HEAP8[$arrayidx64 + 3 >> 0] = HEAP8[$arrayidx67 + 3 >> 0] | 0;
    }
    HEAP32[$pi >> 2] = (HEAP32[$pi >> 2] | 0) + 1;
   }
  } while (0);
  _memcpy(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2] | 0, Math_imul(HEAP32[HEAP32[$g$addr >> 2] >> 2] << 2, HEAP32[(HEAP32[$g$addr >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
 } while (0);
 _memset(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 16 >> 2] | 0, 0, Math_imul(HEAP32[HEAP32[$g$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$g$addr >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
 L39 : while (1) {
  HEAP32[$tag >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  switch (HEAP32[$tag >> 2] | 0) {
  case 44:
   {
    label = 28;
    break L39;
    break;
   }
  case 59:
   {
    label = 65;
    break L39;
    break;
   }
  case 33:
   break;
  default:
   {
    label = 66;
    break L39;
   }
  }
  HEAP32[$ext >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  do if ((HEAP32[$ext >> 2] | 0) == 249) {
   HEAP32[$len >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   $191 = HEAP32[$s$addr >> 2] | 0;
   if ((HEAP32[$len >> 2] | 0) != 4) {
    _stbi__skip($191, HEAP32[$len >> 2] | 0);
    break;
   }
   $conv213 = (_stbi__get8($191) | 0) & 255;
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 36 >> 2] = $conv213;
   $mul216 = (_stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0) * 10 | 0;
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34900 >> 2] = $mul216;
   if ((HEAP32[(HEAP32[$g$addr >> 2] | 0) + 32 >> 2] | 0) >= 0) HEAP8[(HEAP32[$g$addr >> 2] | 0) + 40 + (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 32 >> 2] << 2) + 3 >> 0] = -1;
   $202 = HEAP32[$s$addr >> 2] | 0;
   if (!(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 36 >> 2] & 1)) {
    _stbi__skip($202, 1);
    HEAP32[(HEAP32[$g$addr >> 2] | 0) + 32 >> 2] = -1;
    label = 62;
    break;
   }
   $conv231 = (_stbi__get8($202) | 0) & 255;
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 32 >> 2] = $conv231;
   if ((HEAP32[(HEAP32[$g$addr >> 2] | 0) + 32 >> 2] | 0) >= 0) {
    HEAP8[(HEAP32[$g$addr >> 2] | 0) + 40 + (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 32 >> 2] << 2) + 3 >> 0] = 0;
    label = 62;
   } else label = 62;
  } else label = 62; while (0);
  L54 : do if ((label | 0) == 62) {
   label = 0;
   while (1) {
    $conv249 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
    HEAP32[$len >> 2] = $conv249;
    if (!$conv249) break L54;
    _stbi__skip(HEAP32[$s$addr >> 2] | 0, HEAP32[$len >> 2] | 0);
   }
  } while (0);
 }
 if ((label | 0) == 28) {
  HEAP32[$x >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP32[$y >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP32[$w88 >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP32[$h89 >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
  if (((HEAP32[$x >> 2] | 0) + (HEAP32[$w88 >> 2] | 0) | 0) <= (HEAP32[HEAP32[$g$addr >> 2] >> 2] | 0)) if (((HEAP32[$y >> 2] | 0) + (HEAP32[$h89 >> 2] | 0) | 0) <= (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 4 >> 2] | 0)) {
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34896 >> 2] = HEAP32[HEAP32[$g$addr >> 2] >> 2] << 2;
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34872 >> 2] = HEAP32[$x >> 2] << 2;
   $mul111 = Math_imul(HEAP32[$y >> 2] | 0, HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34896 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34876 >> 2] = $mul111;
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34880 >> 2] = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34872 >> 2] | 0) + (HEAP32[$w88 >> 2] << 2);
   $add118 = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34876 >> 2] | 0) + (Math_imul(HEAP32[$h89 >> 2] | 0, HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34896 >> 2] | 0) | 0) | 0;
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34884 >> 2] = $add118;
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34888 >> 2] = HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34872 >> 2];
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34892 >> 2] = HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34876 >> 2];
   if (!(HEAP32[$w88 >> 2] | 0)) HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34892 >> 2] = HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34884 >> 2];
   $conv128 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34868 >> 2] = $conv128;
   $137 = HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34896 >> 2] | 0;
   if (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34868 >> 2] & 64 | 0) {
    HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34864 >> 2] = $137 << 3;
    HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34860 >> 2] = 3;
   } else {
    HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34864 >> 2] = $137;
    HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34860 >> 2] = 0;
   }
   do if (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34868 >> 2] & 128 | 0) {
    if (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 36 >> 2] & 1 | 0) $cond149 = HEAP32[(HEAP32[$g$addr >> 2] | 0) + 32 >> 2] | 0; else $cond149 = -1;
    _stbi__gif_parse_colortable(HEAP32[$s$addr >> 2] | 0, (HEAP32[$g$addr >> 2] | 0) + 1064 | 0, 2 << (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34868 >> 2] & 7), $cond149);
    HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34856 >> 2] = (HEAP32[$g$addr >> 2] | 0) + 1064;
   } else {
    if (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 20 >> 2] & 128 | 0) {
     HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34856 >> 2] = (HEAP32[$g$addr >> 2] | 0) + 40;
     break;
    }
    $tobool160 = (_stbi__err(48020) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool160 ? 0 : 0;
    $217 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $217 | 0;
   } while (0);
   HEAP32[$o >> 2] = _stbi__process_gif_raster(HEAP32[$s$addr >> 2] | 0, HEAP32[$g$addr >> 2] | 0) | 0;
   if (!(HEAP32[$o >> 2] | 0)) {
    HEAP32[$retval >> 2] = 0;
    $217 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $217 | 0;
   }
   HEAP32[$pcount >> 2] = Math_imul(HEAP32[HEAP32[$g$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$g$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
   L89 : do if (HEAP32[$first_frame >> 2] | 0) if ((HEAP32[(HEAP32[$g$addr >> 2] | 0) + 24 >> 2] | 0) > 0) {
    HEAP32[$pi >> 2] = 0;
    while (1) {
     if ((HEAP32[$pi >> 2] | 0) >= (HEAP32[$pcount >> 2] | 0)) break L89;
     if (!(HEAPU8[(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$pi >> 2] | 0) >> 0] | 0)) {
      HEAP8[(HEAP32[$g$addr >> 2] | 0) + 40 + (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 24 >> 2] << 2) + 3 >> 0] = -1;
      $arrayidx192 = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$pi >> 2] << 2) | 0;
      $arrayidx195 = (HEAP32[$g$addr >> 2] | 0) + 40 + (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 24 >> 2] << 2) | 0;
      HEAP8[$arrayidx192 >> 0] = HEAP8[$arrayidx195 >> 0] | 0;
      HEAP8[$arrayidx192 + 1 >> 0] = HEAP8[$arrayidx195 + 1 >> 0] | 0;
      HEAP8[$arrayidx192 + 2 >> 0] = HEAP8[$arrayidx195 + 2 >> 0] | 0;
      HEAP8[$arrayidx192 + 3 >> 0] = HEAP8[$arrayidx195 + 3 >> 0] | 0;
     }
     HEAP32[$pi >> 2] = (HEAP32[$pi >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[$retval >> 2] = HEAP32[$o >> 2];
   $217 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
  $tobool104 = (_stbi__err(47999) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool104 ? 0 : 0;
  $217 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $217 | 0;
 } else if ((label | 0) == 65) {
  HEAP32[$retval >> 2] = HEAP32[$s$addr >> 2];
  $217 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $217 | 0;
 } else if ((label | 0) == 66) {
  $tobool254 = (_stbi__err(48040) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool254 ? 0 : 0;
  $217 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $217 | 0;
 }
 return 0;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $107 = 0, $108 = 0, $109 = 0, $114 = 0, $125 = 0, $127 = 0, $13 = 0, $135 = 0, $143 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $2 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $42 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $base$addr$1 = 0, $base$addr$1135 = 0, $base$addr$1136 = 0, $c$0 = 0, $c$1 = 0, $c$1137 = 0, $c$3185 = 0, $c$4$lcssa = 0, $c$6$lcssa = 0, $c$7168 = 0, $c$8 = 0, $cmp25 = 0, $cond = 0, $cond128 = 0, $cond162 = 0, $cond202 = 0, $cond233 = 0, $cond262 = 0, $cond301 = 0, $cond328 = 0, $cond44 = 0, $cond59 = 0, $conv176 = 0, $conv179159 = 0, $conv179162 = 0, $conv207152$pre$phiZ2D = 0, $conv238177 = 0, $conv238180 = 0, $conv267166$pre$phiZ2D = 0, $neg$0 = 0, $neg$1 = 0, $rpos = 0, $shend = 0, $spec$select132 = 0, $sub = 0, $sub111191 = 0, $sub111194 = 0, $sub131187 = 0, $tobool65 = 0, $x$0193 = 0, $x$1161 = 0, $x$2179 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $148 = 0;
  $149 = 0;
 } else {
  $rpos = $f + 4 | 0;
  $shend = $f + 104 | 0;
  do {
   $2 = HEAP32[$rpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $2 + 1;
    $cond = HEAPU8[$2 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L11 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub = (($cond | 0) == 45) << 31 >> 31;
    $5 = HEAP32[$rpos >> 2] | 0;
    if ($5 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $5 + 1;
     $c$0 = HEAPU8[$5 >> 0] | 0;
     $neg$0 = $sub;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $sub;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $neg$0 = 0;
   }
  } while (0);
  $cmp25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $10 = HEAP32[$rpos >> 2] | 0;
   if ($10 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $10 + 1;
    $cond44 = HEAPU8[$10 >> 0] | 0;
   } else $cond44 = ___shgetc($f) | 0;
   if (($cond44 | 32 | 0) != 120) if ($cmp25) {
    $base$addr$1135 = 8;
    $c$1137 = $cond44;
    label = 47;
    break;
   } else {
    $base$addr$1 = $base;
    $c$1 = $cond44;
    label = 32;
    break;
   }
   $13 = HEAP32[$rpos >> 2] | 0;
   if ($13 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $13 + 1;
    $cond59 = HEAPU8[$13 >> 0] | 0;
   } else $cond59 = ___shgetc($f) | 0;
   if ((HEAPU8[9905 + $cond59 >> 0] | 0) > 15) {
    $tobool65 = (HEAP32[$shend >> 2] | 0) == 0;
    if (!$tobool65) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0, 0);
     $148 = 0;
     $149 = 0;
     break L1;
    }
    if ($tobool65) {
     $148 = 0;
     $149 = 0;
     break L1;
    }
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $148 = 0;
    $149 = 0;
    break L1;
   } else {
    $base$addr$1135 = 16;
    $c$1137 = $cond59;
    label = 47;
   }
  } else {
   $spec$select132 = $cmp25 ? 10 : $base;
   if ($spec$select132 >>> 0 > (HEAPU8[9905 + $c$0 >> 0] | 0) >>> 0) {
    $base$addr$1 = $spec$select132;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    ___shlim($f, 0, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    $148 = 0;
    $149 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($base$addr$1 | 0) == 10) {
   $sub111191 = $c$1 + -48 | 0;
   if ($sub111191 >>> 0 < 10) {
    $sub111194 = $sub111191;
    $x$0193 = 0;
    do {
     $x$0193 = ($x$0193 * 10 | 0) + $sub111194 | 0;
     $23 = HEAP32[$rpos >> 2] | 0;
     if ($23 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $23 + 1;
      $cond128 = HEAPU8[$23 >> 0] | 0;
     } else $cond128 = ___shgetc($f) | 0;
     $sub111194 = $cond128 + -48 | 0;
    } while ($sub111194 >>> 0 < 10 & $x$0193 >>> 0 < 429496729);
    if ($sub111194 >>> 0 < 10) {
     $27 = $x$0193;
     $28 = 0;
     $c$3185 = $cond128;
     $sub131187 = $sub111194;
     while (1) {
      $29 = ___muldi3($27 | 0, $28 | 0, 10, 0) | 0;
      $30 = getTempRet0() | 0;
      $32 = (($sub131187 | 0) < 0) << 31 >> 31;
      $34 = ~$32;
      if ($30 >>> 0 > $34 >>> 0 | ($30 | 0) == ($34 | 0) & $29 >>> 0 > ~$sub131187 >>> 0) {
       $150 = $27;
       $151 = $28;
       $base$addr$1136 = 10;
       $c$8 = $c$3185;
       label = 76;
       break L43;
      }
      $27 = _i64Add($29 | 0, $30 | 0, $sub131187 | 0, $32 | 0) | 0;
      $28 = getTempRet0() | 0;
      $42 = HEAP32[$rpos >> 2] | 0;
      if ($42 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $42 + 1;
       $cond162 = HEAPU8[$42 >> 0] | 0;
      } else $cond162 = ___shgetc($f) | 0;
      $sub131187 = $cond162 + -48 | 0;
      if (!($sub131187 >>> 0 < 10 & ($28 >>> 0 < 429496729 | ($28 | 0) == 429496729 & $27 >>> 0 < 2576980378))) break; else $c$3185 = $cond162;
     }
     if ($sub131187 >>> 0 > 9) {
      $125 = $28;
      $127 = $27;
      $neg$1 = $neg$0;
     } else {
      $150 = $27;
      $151 = $28;
      $base$addr$1136 = 10;
      $c$8 = $cond162;
      label = 76;
     }
    } else {
     $125 = 0;
     $127 = $x$0193;
     $neg$1 = $neg$0;
    }
   } else {
    $125 = 0;
    $127 = 0;
    $neg$1 = $neg$0;
   }
  } else {
   $base$addr$1135 = $base$addr$1;
   $c$1137 = $c$1;
   label = 47;
  } while (0);
  L63 : do if ((label | 0) == 47) {
   if (!($base$addr$1135 + -1 & $base$addr$1135)) {
    $conv176 = HEAP8[49739 + (($base$addr$1135 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $51 = HEAP8[9905 + $c$1137 >> 0] | 0;
    $conv179159 = $51 & 255;
    if ($base$addr$1135 >>> 0 > $conv179159 >>> 0) {
     $conv179162 = $conv179159;
     $x$1161 = 0;
     do {
      $x$1161 = $conv179162 | $x$1161 << $conv176;
      $52 = HEAP32[$rpos >> 2] | 0;
      if ($52 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $52 + 1;
       $cond202 = HEAPU8[$52 >> 0] | 0;
      } else $cond202 = ___shgetc($f) | 0;
      $55 = HEAP8[9905 + $cond202 >> 0] | 0;
      $conv179162 = $55 & 255;
     } while ($x$1161 >>> 0 < 134217728 & $base$addr$1135 >>> 0 > $conv179162 >>> 0);
     $152 = $55;
     $60 = 0;
     $62 = $x$1161;
     $c$4$lcssa = $cond202;
     $conv207152$pre$phiZ2D = $conv179162;
    } else {
     $152 = $51;
     $60 = 0;
     $62 = 0;
     $c$4$lcssa = $c$1137;
     $conv207152$pre$phiZ2D = $conv179159;
    }
    $57 = _bitshift64Lshr(-1, -1, $conv176 | 0) | 0;
    $58 = getTempRet0() | 0;
    if ($base$addr$1135 >>> 0 <= $conv207152$pre$phiZ2D >>> 0 | ($58 >>> 0 < $60 >>> 0 | ($58 | 0) == ($60 | 0) & $57 >>> 0 < $62 >>> 0)) {
     $150 = $62;
     $151 = $60;
     $base$addr$1136 = $base$addr$1135;
     $c$8 = $c$4$lcssa;
     label = 76;
     break;
    }
    $66 = $62;
    $67 = $60;
    $71 = $152;
    while (1) {
     $68 = _bitshift64Shl($66 | 0, $67 | 0, $conv176 | 0) | 0;
     $69 = getTempRet0() | 0;
     $72 = $68 | $71 & 255;
     $73 = HEAP32[$rpos >> 2] | 0;
     if ($73 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $73 + 1;
      $cond233 = HEAPU8[$73 >> 0] | 0;
     } else $cond233 = ___shgetc($f) | 0;
     $71 = HEAP8[9905 + $cond233 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($71 & 255) >>> 0 | ($69 >>> 0 > $58 >>> 0 | ($69 | 0) == ($58 | 0) & $72 >>> 0 > $57 >>> 0)) {
      $150 = $72;
      $151 = $69;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond233;
      label = 76;
      break L63;
     } else {
      $66 = $72;
      $67 = $69;
     }
    }
   }
   $82 = HEAP8[9905 + $c$1137 >> 0] | 0;
   $conv238177 = $82 & 255;
   if ($base$addr$1135 >>> 0 > $conv238177 >>> 0) {
    $conv238180 = $conv238177;
    $x$2179 = 0;
    do {
     $x$2179 = $conv238180 + (Math_imul($x$2179, $base$addr$1135) | 0) | 0;
     $83 = HEAP32[$rpos >> 2] | 0;
     if ($83 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $83 + 1;
      $cond262 = HEAPU8[$83 >> 0] | 0;
     } else $cond262 = ___shgetc($f) | 0;
     $86 = HEAP8[9905 + $cond262 >> 0] | 0;
     $conv238180 = $86 & 255;
    } while ($x$2179 >>> 0 < 119304647 & $base$addr$1135 >>> 0 > $conv238180 >>> 0);
    $153 = $86;
    $154 = $x$2179;
    $155 = 0;
    $c$6$lcssa = $cond262;
    $conv267166$pre$phiZ2D = $conv238180;
   } else {
    $153 = $82;
    $154 = 0;
    $155 = 0;
    $c$6$lcssa = $c$1137;
    $conv267166$pre$phiZ2D = $conv238177;
   }
   if ($base$addr$1135 >>> 0 > $conv267166$pre$phiZ2D >>> 0) {
    $88 = ___udivdi3(-1, -1, $base$addr$1135 | 0, 0) | 0;
    $89 = getTempRet0() | 0;
    $100 = $153;
    $91 = $155;
    $93 = $154;
    $c$7168 = $c$6$lcssa;
    while (1) {
     if ($91 >>> 0 > $89 >>> 0 | ($91 | 0) == ($89 | 0) & $93 >>> 0 > $88 >>> 0) {
      $150 = $93;
      $151 = $91;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $97 = ___muldi3($93 | 0, $91 | 0, $base$addr$1135 | 0, 0) | 0;
     $98 = getTempRet0() | 0;
     $99 = $100 & 255;
     if ($98 >>> 0 > 4294967295 | ($98 | 0) == -1 & $97 >>> 0 > ~$99 >>> 0) {
      $150 = $93;
      $151 = $91;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $107 = _i64Add($97 | 0, $98 | 0, $99 | 0, 0) | 0;
     $108 = getTempRet0() | 0;
     $109 = HEAP32[$rpos >> 2] | 0;
     if ($109 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $109 + 1;
      $cond301 = HEAPU8[$109 >> 0] | 0;
     } else $cond301 = ___shgetc($f) | 0;
     $100 = HEAP8[9905 + $cond301 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($100 & 255) >>> 0) {
      $150 = $107;
      $151 = $108;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond301;
      label = 76;
      break;
     } else {
      $91 = $108;
      $93 = $107;
      $c$7168 = $cond301;
     }
    }
   } else {
    $150 = $154;
    $151 = $155;
    $base$addr$1136 = $base$addr$1135;
    $c$8 = $c$6$lcssa;
    label = 76;
   }
  } while (0);
  if ((label | 0) == 76) if ($base$addr$1136 >>> 0 > (HEAPU8[9905 + $c$8 >> 0] | 0) >>> 0) {
   do {
    $114 = HEAP32[$rpos >> 2] | 0;
    if ($114 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $114 + 1;
     $cond328 = HEAPU8[$114 >> 0] | 0;
    } else $cond328 = ___shgetc($f) | 0;
   } while ($base$addr$1136 >>> 0 > (HEAPU8[9905 + $cond328 >> 0] | 0) >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $125 = $1;
   $127 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $125 = $151;
   $127 = $150;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!($125 >>> 0 < $1 >>> 0 | ($125 | 0) == ($1 | 0) & $127 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $135 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $148 = getTempRet0() | 0;
    $149 = $135;
    break;
   }
   if ($125 >>> 0 > $1 >>> 0 | ($125 | 0) == ($1 | 0) & $127 >>> 0 > $0 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $148 = $1;
    $149 = $0;
    break;
   }
  }
  $143 = (($neg$1 | 0) < 0) << 31 >> 31;
  $146 = _i64Subtract($127 ^ $neg$1 | 0, $125 ^ $143 | 0, $neg$1 | 0, $143 | 0) | 0;
  $148 = getTempRet0() | 0;
  $149 = $146;
 } while (0);
 setTempRet0($148 | 0);
 return $149 | 0;
}

function _stbi__psd_load($s, $x, $y, $comp, $req_comp, $ri, $bpc) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 $bpc = $bpc | 0;
 var $182 = 0, $198 = 0, $22 = 0, $24 = 0, $26 = 0, $39 = 0, $75 = 0, $94 = 0, $a = 0, $a258 = 0, $bitdepth = 0, $bpc$addr = 0, $call175 = 0, $channel = 0, $channelCount = 0, $cmp157 = 0, $cmp191 = 0, $comp$addr = 0, $compression = 0, $conv149 = 0, $conv165 = 0, $h = 0, $i = 0, $inv_a = 0, $inv_a265 = 0, $out = 0, $p = 0, $p121 = 0, $p155 = 0, $pixel = 0, $pixel245 = 0, $pixelCount = 0, $q = 0, $q142 = 0, $ra = 0, $ra263 = 0, $req_comp$addr = 0, $retval = 0, $ri$addr = 0, $s$addr = 0, $tobool = 0, $tobool14 = 0, $tobool24 = 0, $tobool31 = 0, $tobool41 = 0, $tobool48 = 0, $tobool6 = 0, $tobool64 = 0, $tobool86 = 0, $val = 0, $val123 = 0, $w = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $retval = sp + 116 | 0;
 $s$addr = sp + 112 | 0;
 $x$addr = sp + 108 | 0;
 $y$addr = sp + 104 | 0;
 $comp$addr = sp + 100 | 0;
 $req_comp$addr = sp + 96 | 0;
 $ri$addr = sp + 92 | 0;
 $bpc$addr = sp + 88 | 0;
 $pixelCount = sp + 84 | 0;
 $channelCount = sp + 80 | 0;
 $compression = sp + 76 | 0;
 $channel = sp + 72 | 0;
 $i = sp + 68 | 0;
 $bitdepth = sp + 64 | 0;
 $w = sp + 60 | 0;
 $h = sp + 56 | 0;
 $out = sp + 52 | 0;
 $p = sp + 48 | 0;
 $q = sp + 44 | 0;
 $val = sp + 120 | 0;
 $p121 = sp + 40 | 0;
 $val123 = sp + 122 | 0;
 $q142 = sp + 36 | 0;
 $p155 = sp + 32 | 0;
 $pixel = sp + 28 | 0;
 $a = sp + 24 | 0;
 $ra = sp + 20 | 0;
 $inv_a = sp + 16 | 0;
 $pixel245 = sp + 12 | 0;
 $a258 = sp + 8 | 0;
 $ra263 = sp + 4 | 0;
 $inv_a265 = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$ri$addr >> 2] = $ri;
 HEAP32[$bpc$addr >> 2] = $bpc;
 if ((_stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0) != 943870035) {
  $tobool = (_stbi__err(47877) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $198 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 if ((_stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0) != 1) {
  $tobool6 = (_stbi__err(47885) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool6 ? 0 : 0;
  $198 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 _stbi__skip(HEAP32[$s$addr >> 2] | 0, 6);
 HEAP32[$channelCount >> 2] = _stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0;
 if ((HEAP32[$channelCount >> 2] | 0) < 0 | (HEAP32[$channelCount >> 2] | 0) > 16) {
  $tobool14 = (_stbi__err(47899) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool14 ? 0 : 0;
  $198 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 HEAP32[$h >> 2] = _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$w >> 2] = _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$bitdepth >> 2] = _stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0;
 if ((HEAP32[$bitdepth >> 2] | 0) != 8 & (HEAP32[$bitdepth >> 2] | 0) != 16) {
  $tobool24 = (_stbi__err(47919) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool24 ? 0 : 0;
  $198 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 if ((_stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0) != 3) {
  $tobool31 = (_stbi__err(47941) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool31 ? 0 : 0;
  $198 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 $22 = HEAP32[$s$addr >> 2] | 0;
 _stbi__skip($22, _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0);
 $24 = HEAP32[$s$addr >> 2] | 0;
 _stbi__skip($24, _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0);
 $26 = HEAP32[$s$addr >> 2] | 0;
 _stbi__skip($26, _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0);
 HEAP32[$compression >> 2] = _stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0;
 if ((HEAP32[$compression >> 2] | 0) > 1) {
  $tobool41 = (_stbi__err(47960) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool41 ? 0 : 0;
  $198 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 if (!(_stbi__mad3sizes_valid(4, HEAP32[$w >> 2] | 0, HEAP32[$h >> 2] | 0, 0) | 0)) {
  $tobool48 = (_stbi__err(47570) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool48 ? 0 : 0;
  $198 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 $39 = HEAP32[$w >> 2] | 0;
 if ((HEAP32[$compression >> 2] | 0) == 0 & (HEAP32[$bitdepth >> 2] | 0) == 16 & (HEAP32[$bpc$addr >> 2] | 0) == 16) {
  HEAP32[$out >> 2] = _stbi__malloc_mad3(8, $39, HEAP32[$h >> 2] | 0, 0) | 0;
  HEAP32[HEAP32[$ri$addr >> 2] >> 2] = 16;
 } else HEAP32[$out >> 2] = _stbi__malloc(Math_imul($39 << 2, HEAP32[$h >> 2] | 0) | 0) | 0;
 if (!(HEAP32[$out >> 2] | 0)) {
  $tobool64 = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool64 ? 0 : 0;
  $198 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 }
 HEAP32[$pixelCount >> 2] = Math_imul(HEAP32[$w >> 2] | 0, HEAP32[$h >> 2] | 0) | 0;
 L37 : do if (HEAP32[$compression >> 2] | 0) {
  _stbi__skip(HEAP32[$s$addr >> 2] | 0, (Math_imul(HEAP32[$h >> 2] | 0, HEAP32[$channelCount >> 2] | 0) | 0) << 1);
  HEAP32[$channel >> 2] = 0;
  L39 : while (1) {
   if ((HEAP32[$channel >> 2] | 0) >= 4) break L37;
   HEAP32[$p >> 2] = (HEAP32[$out >> 2] | 0) + (HEAP32[$channel >> 2] | 0);
   L42 : do if ((HEAP32[$channel >> 2] | 0) >= (HEAP32[$channelCount >> 2] | 0)) {
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$pixelCount >> 2] | 0)) break L42;
     HEAP8[HEAP32[$p >> 2] >> 0] = (HEAP32[$channel >> 2] | 0) == 3 ? 255 : 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
     HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
    }
   } else if (!(_stbi__psd_decode_rle(HEAP32[$s$addr >> 2] | 0, HEAP32[$p >> 2] | 0, HEAP32[$pixelCount >> 2] | 0) | 0)) break L39; while (0);
   HEAP32[$channel >> 2] = (HEAP32[$channel >> 2] | 0) + 1;
  }
  _free(HEAP32[$out >> 2] | 0);
  $tobool86 = (_stbi__err(47814) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool86 ? 0 : 0;
  $198 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $198 | 0;
 } else {
  HEAP32[$channel >> 2] = 0;
  while (1) {
   if ((HEAP32[$channel >> 2] | 0) >= 4) break L37;
   L55 : do if ((HEAP32[$channel >> 2] | 0) >= (HEAP32[$channelCount >> 2] | 0)) {
    $75 = HEAP32[$out >> 2] | 0;
    if ((HEAP32[$bitdepth >> 2] | 0) == 16 & (HEAP32[$bpc$addr >> 2] | 0) == 16) {
     HEAP32[$q >> 2] = $75 + (HEAP32[$channel >> 2] << 1);
     HEAP16[$val >> 1] = (HEAP32[$channel >> 2] | 0) == 3 ? 65535 : 0;
     HEAP32[$i >> 2] = 0;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$pixelCount >> 2] | 0)) break L55;
      HEAP16[HEAP32[$q >> 2] >> 1] = HEAP16[$val >> 1] | 0;
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
      HEAP32[$q >> 2] = (HEAP32[$q >> 2] | 0) + 8;
     }
    } else {
     HEAP32[$p121 >> 2] = $75 + (HEAP32[$channel >> 2] | 0);
     HEAP8[$val123 >> 0] = (HEAP32[$channel >> 2] | 0) == 3 ? 255 : 0;
     HEAP32[$i >> 2] = 0;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$pixelCount >> 2] | 0)) break L55;
      HEAP8[HEAP32[$p121 >> 2] >> 0] = HEAP8[$val123 >> 0] | 0;
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
      HEAP32[$p121 >> 2] = (HEAP32[$p121 >> 2] | 0) + 4;
     }
    }
   } else {
    $94 = HEAP32[$out >> 2] | 0;
    if ((HEAP32[HEAP32[$ri$addr >> 2] >> 2] | 0) == 16) {
     HEAP32[$q142 >> 2] = $94 + (HEAP32[$channel >> 2] << 1);
     HEAP32[$i >> 2] = 0;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$pixelCount >> 2] | 0)) break L55;
      $conv149 = (_stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0) & 65535;
      HEAP16[HEAP32[$q142 >> 2] >> 1] = $conv149;
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
      HEAP32[$q142 >> 2] = (HEAP32[$q142 >> 2] | 0) + 8;
     }
    }
    HEAP32[$p155 >> 2] = $94 + (HEAP32[$channel >> 2] | 0);
    $cmp157 = (HEAP32[$bitdepth >> 2] | 0) == 16;
    HEAP32[$i >> 2] = 0;
    if ($cmp157) while (1) {
     if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$pixelCount >> 2] | 0)) break L55;
     $conv165 = (_stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0) >> 8 & 255;
     HEAP8[HEAP32[$p155 >> 2] >> 0] = $conv165;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
     HEAP32[$p155 >> 2] = (HEAP32[$p155 >> 2] | 0) + 4;
    } else while (1) {
     if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$pixelCount >> 2] | 0)) break L55;
     $call175 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
     HEAP8[HEAP32[$p155 >> 2] >> 0] = $call175;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
     HEAP32[$p155 >> 2] = (HEAP32[$p155 >> 2] | 0) + 4;
    }
   } while (0);
   HEAP32[$channel >> 2] = (HEAP32[$channel >> 2] | 0) + 1;
  }
 } while (0);
 L84 : do if ((HEAP32[$channelCount >> 2] | 0) >= 4) {
  $cmp191 = (HEAP32[HEAP32[$ri$addr >> 2] >> 2] | 0) == 16;
  HEAP32[$i >> 2] = 0;
  if ($cmp191) while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$w >> 2] | 0, HEAP32[$h >> 2] | 0) | 0)) break L84;
   HEAP32[$pixel >> 2] = (HEAP32[$out >> 2] | 0) + (HEAP32[$i >> 2] << 2 << 1);
   if (HEAPU16[(HEAP32[$pixel >> 2] | 0) + 6 >> 1] | 0 | 0) if ((HEAPU16[(HEAP32[$pixel >> 2] | 0) + 6 >> 1] | 0 | 0) != 65535) {
    HEAPF32[$a >> 2] = +(HEAPU16[(HEAP32[$pixel >> 2] | 0) + 6 >> 1] | 0 | 0) / 65535.0;
    HEAPF32[$ra >> 2] = 1.0 / +HEAPF32[$a >> 2];
    HEAPF32[$inv_a >> 2] = (1.0 - +HEAPF32[$ra >> 2]) * 65535.0;
    HEAP16[HEAP32[$pixel >> 2] >> 1] = ~~(+(HEAPU16[HEAP32[$pixel >> 2] >> 1] | 0 | 0) * +HEAPF32[$ra >> 2] + +HEAPF32[$inv_a >> 2]);
    HEAP16[(HEAP32[$pixel >> 2] | 0) + 2 >> 1] = ~~(+(HEAPU16[(HEAP32[$pixel >> 2] | 0) + 2 >> 1] | 0 | 0) * +HEAPF32[$ra >> 2] + +HEAPF32[$inv_a >> 2]);
    HEAP16[(HEAP32[$pixel >> 2] | 0) + 4 >> 1] = ~~(+(HEAPU16[(HEAP32[$pixel >> 2] | 0) + 4 >> 1] | 0 | 0) * +HEAPF32[$ra >> 2] + +HEAPF32[$inv_a >> 2]);
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  } else while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$w >> 2] | 0, HEAP32[$h >> 2] | 0) | 0)) break L84;
   HEAP32[$pixel245 >> 2] = (HEAP32[$out >> 2] | 0) + (HEAP32[$i >> 2] << 2);
   if (HEAPU8[(HEAP32[$pixel245 >> 2] | 0) + 3 >> 0] | 0 | 0) if ((HEAPU8[(HEAP32[$pixel245 >> 2] | 0) + 3 >> 0] | 0 | 0) != 255) {
    HEAPF32[$a258 >> 2] = +(HEAPU8[(HEAP32[$pixel245 >> 2] | 0) + 3 >> 0] | 0 | 0) / 255.0;
    HEAPF32[$ra263 >> 2] = 1.0 / +HEAPF32[$a258 >> 2];
    HEAPF32[$inv_a265 >> 2] = (1.0 - +HEAPF32[$ra263 >> 2]) * 255.0;
    HEAP8[HEAP32[$pixel245 >> 2] >> 0] = ~~(+(HEAPU8[HEAP32[$pixel245 >> 2] >> 0] | 0 | 0) * +HEAPF32[$ra263 >> 2] + +HEAPF32[$inv_a265 >> 2]);
    HEAP8[(HEAP32[$pixel245 >> 2] | 0) + 1 >> 0] = ~~(+(HEAPU8[(HEAP32[$pixel245 >> 2] | 0) + 1 >> 0] | 0 | 0) * +HEAPF32[$ra263 >> 2] + +HEAPF32[$inv_a265 >> 2]);
    HEAP8[(HEAP32[$pixel245 >> 2] | 0) + 2 >> 0] = ~~(+(HEAPU8[(HEAP32[$pixel245 >> 2] | 0) + 2 >> 0] | 0 | 0) * +HEAPF32[$ra263 >> 2] + +HEAPF32[$inv_a265 >> 2]);
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 if ((HEAP32[$req_comp$addr >> 2] | 0) != 0 & (HEAP32[$req_comp$addr >> 2] | 0) != 4) {
  $182 = HEAP32[$out >> 2] | 0;
  if ((HEAP32[HEAP32[$ri$addr >> 2] >> 2] | 0) == 16) HEAP32[$out >> 2] = _stbi__convert_format16($182, 4, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$w >> 2] | 0, HEAP32[$h >> 2] | 0) | 0; else HEAP32[$out >> 2] = _stbi__convert_format($182, 4, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$w >> 2] | 0, HEAP32[$h >> 2] | 0) | 0;
  if (!(HEAP32[$out >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$out >> 2];
   $198 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $198 | 0;
  }
 }
 if (HEAP32[$comp$addr >> 2] | 0) HEAP32[HEAP32[$comp$addr >> 2] >> 2] = 4;
 HEAP32[HEAP32[$y$addr >> 2] >> 2] = HEAP32[$h >> 2];
 HEAP32[HEAP32[$x$addr >> 2] >> 2] = HEAP32[$w >> 2];
 HEAP32[$retval >> 2] = HEAP32[$out >> 2];
 $198 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $198 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv($this) {
 $this = $this | 0;
 var $Ty = 0, $call104 = 0, $call121 = 0, $call13 = 0, $call132 = 0, $call136 = 0, $call24 = 0, $call35 = 0, $call49 = 0, $call58 = 0, $call59 = 0, $call6 = 0, $call68 = 0, $call79 = 0, $call90 = 0, $cmp99 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$11 = 0, $retval$12 = 0, $retval$13 = 0, $retval$14 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Ty = sp + 8 | 0;
 $ref$tmp = sp;
 L1 : do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 | 0) {
 case 84:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 86:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call6 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call6;
     if (!$call6) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$0;
     break L1;
     break;
    }
   case 84:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call13 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call13;
     if (!$call13) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$1;
     break L1;
     break;
    }
   case 73:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call24 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call24;
     if (!$call24) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$2;
     break L1;
     break;
    }
   case 83:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call35 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call35;
     if (!$call35) $retval$3 = 0; else $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$3;
     break L1;
     break;
    }
   case 99:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) | 0) {
      $retval$14 = 0;
      break L1;
     }
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) | 0) {
      $retval$14 = 0;
      break L1;
     }
     $call49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call49;
     if (!$call49) $retval$4 = 0; else $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$4;
     break L1;
     break;
    }
   case 67:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call58 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
     $call59 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call58) | 0;
     HEAP32[$Ty >> 2] = $call59;
     do if (!$call59) $retval$6 = 0; else {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp, $this, 1);
      if (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp) | 0) {
       $retval$6 = 0;
       break;
      }
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
       $call68 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call58) | 0;
       HEAP32[$ref$tmp >> 2] = $call68;
       if (!$call68) $retval$5 = 0; else $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $ref$tmp, $Ty) | 0;
       $retval$6 = $retval$5;
      } else $retval$6 = 0;
     } while (0);
     $retval$14 = $retval$6;
     break L1;
     break;
    }
   case 87:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call79 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
     HEAP32[$Ty >> 2] = $call79;
     if (!$call79) $retval$7 = 0; else $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this, 56953, $Ty) | 0;
     $retval$14 = $retval$7;
     break L1;
     break;
    }
   case 72:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call90 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
     HEAP32[$Ty >> 2] = $call90;
     if (!$call90) $retval$8 = 0; else $retval$8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$8;
     break L1;
     break;
    }
   default:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
     $cmp99 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 118;
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) | 0) {
      $retval$14 = 0;
      break L1;
     }
     $call104 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$Ty >> 2] = $call104;
     do if (!$call104) $retval$9 = 0; else if ($cmp99) {
      $retval$9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
      break;
     } else {
      $retval$9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
      break;
     } while (0);
     $retval$14 = $retval$9;
     break L1;
    }
   }
   break;
  }
 case 71:
  {
   switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
   case 86:
    {
     HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
     $call121 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
     HEAP32[$Ty >> 2] = $call121;
     if (!$call121) $retval$11 = 0; else $retval$11 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0;
     $retval$14 = $retval$11;
     break L1;
     break;
    }
   case 82:
    break;
   default:
    {
     $retval$14 = 0;
     break L1;
    }
   }
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call132 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
   HEAP32[$Ty >> 2] = $call132;
   if (!$call132) $retval$13 = 0; else {
    $call136 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this, $ref$tmp) | 0;
    if ($call136 | (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0)) $retval$12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_($this, $Ty) | 0; else $retval$12 = 0;
    $retval$13 = $retval$12;
   }
   $retval$14 = $retval$13;
   break;
  }
 default:
  $retval$14 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$14 | 0;
}

function _stbi__process_frame_header($z, $scan) {
 $z = $z | 0;
 $scan = $scan | 0;
 var $171 = 0, $202 = 0, $211 = 0, $Lf = 0, $add229 = 0, $add271 = 0, $c = 0, $call16 = 0, $call220 = 0, $call261 = 0, $call9 = 0, $conv100 = 0, $conv51 = 0, $h_max = 0, $i = 0, $mul175 = 0, $mul185 = 0, $mul196 = 0, $mul204 = 0, $p = 0, $q = 0, $retval = 0, $rgb66 = 0, $s = 0, $scan$addr = 0, $v_max = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 40 | 0;
 $z$addr = sp + 36 | 0;
 $scan$addr = sp + 32 | 0;
 $s = sp + 28 | 0;
 $Lf = sp + 24 | 0;
 $p = sp + 20 | 0;
 $i = sp + 16 | 0;
 $q = sp + 12 | 0;
 $h_max = sp + 8 | 0;
 $v_max = sp + 4 | 0;
 $c = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$scan$addr >> 2] = $scan;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$z$addr >> 2] >> 2];
 HEAP32[$h_max >> 2] = 1;
 HEAP32[$v_max >> 2] = 1;
 HEAP32[$Lf >> 2] = _stbi__get16be(HEAP32[$s >> 2] | 0) | 0;
 if ((HEAP32[$Lf >> 2] | 0) < 11) {
  HEAP32[$retval >> 2] = _stbi__err(49581) | 0;
  $211 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 HEAP32[$p >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
 if ((HEAP32[$p >> 2] | 0) != 8) {
  HEAP32[$retval >> 2] = _stbi__err(49593) | 0;
  $211 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 $call9 = _stbi__get16be(HEAP32[$s >> 2] | 0) | 0;
 HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] = $call9;
 if (!(HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(49604) | 0;
  $211 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 $call16 = _stbi__get16be(HEAP32[$s >> 2] | 0) | 0;
 HEAP32[HEAP32[$s >> 2] >> 2] = $call16;
 if (!(HEAP32[HEAP32[$s >> 2] >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(49621) | 0;
  $211 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 HEAP32[$c >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
 if ((HEAP32[$c >> 2] | 0) != 3 & (HEAP32[$c >> 2] | 0) != 1 & (HEAP32[$c >> 2] | 0) != 4) {
  HEAP32[$retval >> 2] = _stbi__err(49629) | 0;
  $211 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = HEAP32[$c >> 2];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$c >> 2] | 0)) break;
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 44 >> 2] = 0;
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 56 >> 2] = 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((HEAP32[$Lf >> 2] | 0) != (8 + ((HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) * 3 | 0) | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(49581) | 0;
  $211 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 }
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18412 >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0)) {
   label = 30;
   break;
  }
  $conv51 = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) >> 2] = $conv51;
  if ((HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) == 3) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) >> 2] | 0) == (HEAPU8[49649 + (HEAP32[$i >> 2] | 0) >> 0] | 0 | 0)) {
   $rgb66 = (HEAP32[$z$addr >> 2] | 0) + 18412 | 0;
   HEAP32[$rgb66 >> 2] = (HEAP32[$rgb66 >> 2] | 0) + 1;
  }
  HEAP32[$q >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 4 >> 2] = HEAP32[$q >> 2] >> 4;
  if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 4 >> 2] | 0)) {
   label = 23;
   break;
  }
  if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) > 4) {
   label = 23;
   break;
  }
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 8 >> 2] = HEAP32[$q >> 2] & 15;
  if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 8 >> 2] | 0)) {
   label = 26;
   break;
  }
  if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) > 4) {
   label = 26;
   break;
  }
  $conv100 = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 12 >> 2] = $conv100;
  if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 12 >> 2] | 0) > 3) {
   label = 28;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 23) {
  HEAP32[$retval >> 2] = _stbi__err(49652) | 0;
  $211 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 } else if ((label | 0) == 26) {
  HEAP32[$retval >> 2] = _stbi__err(49658) | 0;
  $211 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 } else if ((label | 0) == 28) {
  HEAP32[$retval >> 2] = _stbi__err(49664) | 0;
  $211 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $211 | 0;
 } else if ((label | 0) == 30) {
  if (HEAP32[$scan$addr >> 2] | 0) {
   HEAP32[$retval >> 2] = 1;
   $211 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $211 | 0;
  }
  if (!(_stbi__mad3sizes_valid(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0, 0) | 0)) {
   HEAP32[$retval >> 2] = _stbi__err(47570) | 0;
   $211 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $211 | 0;
  }
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) > (HEAP32[$h_max >> 2] | 0)) HEAP32[$h_max >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 4 >> 2];
   if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) > (HEAP32[$v_max >> 2] | 0)) HEAP32[$v_max >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 8 >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18052 >> 2] = HEAP32[$h_max >> 2];
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18056 >> 2] = HEAP32[$v_max >> 2];
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18068 >> 2] = HEAP32[$h_max >> 2] << 3;
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18072 >> 2] = HEAP32[$v_max >> 2] << 3;
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18060 >> 2] = (((HEAP32[HEAP32[$s >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18068 >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18068 >> 2] | 0) >>> 0) | 0;
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18064 >> 2] = (((HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18072 >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18072 >> 2] | 0) >>> 0) | 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0)) {
    label = 50;
    break;
   }
   $mul175 = Math_imul(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 28 >> 2] = (($mul175 + (HEAP32[$h_max >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[$h_max >> 2] | 0) >>> 0) | 0;
   $mul185 = Math_imul(HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 32 >> 2] = (($mul185 + (HEAP32[$v_max >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[$v_max >> 2] | 0) >>> 0) | 0;
   $mul196 = (Math_imul(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18060 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 4 >> 2] | 0) | 0) << 3;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 36 >> 2] = $mul196;
   $mul204 = (Math_imul(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18064 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 8 >> 2] | 0) | 0) << 3;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 40 >> 2] = $mul204;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 60 >> 2] = 0;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 52 >> 2] = 0;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 56 >> 2] = 0;
   $call220 = _stbi__malloc_mad2(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 40 >> 2] | 0, 15) | 0;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 48 >> 2] = $call220;
   $171 = HEAP32[$z$addr >> 2] | 0;
   if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 48 >> 2] | 0)) {
    label = 44;
    break;
   }
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 44 >> 2] = (HEAP32[$171 + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 48 >> 2] | 0) + 15 & -16;
   if (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18380 >> 2] | 0) {
    HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 64 >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 36 >> 2] | 0) / 8 | 0;
    HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 68 >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 40 >> 2] | 0) / 8 | 0;
    $call261 = _stbi__malloc_mad3(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 40 >> 2] | 0, 2, 15) | 0;
    HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 52 >> 2] = $call261;
    $202 = HEAP32[$z$addr >> 2] | 0;
    if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 52 >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 60 >> 2] = (HEAP32[$202 + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 52 >> 2] | 0) + 15 & -16;
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  if ((label | 0) == 44) {
   $add229 = (HEAP32[$i >> 2] | 0) + 1 | 0;
   HEAP32[$retval >> 2] = _stbi__free_jpeg_components($171, $add229, _stbi__err(47531) | 0) | 0;
   $211 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $211 | 0;
  } else if ((label | 0) == 47) {
   $add271 = (HEAP32[$i >> 2] | 0) + 1 | 0;
   HEAP32[$retval >> 2] = _stbi__free_jpeg_components($202, $add271, _stbi__err(47531) | 0) | 0;
   $211 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $211 | 0;
  } else if ((label | 0) == 50) {
   HEAP32[$retval >> 2] = 1;
   $211 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $211 | 0;
  }
 }
 return 0;
}

function _stbi__idct_block($out, $out_stride, $data) {
 $out = $out | 0;
 $out_stride = $out_stride | 0;
 $data = $data | 0;
 var $18 = 0, $call = 0, $call195 = 0, $call199 = 0, $call203 = 0, $call207 = 0, $call211 = 0, $call215 = 0, $call219 = 0, $d = 0, $data$addr = 0, $dcterm = 0, $i = 0, $o = 0, $out$addr = 0, $out_stride$addr = 0, $p1 = 0, $p1131 = 0, $p2 = 0, $p2132 = 0, $p3 = 0, $p3133 = 0, $p4 = 0, $p4134 = 0, $p5 = 0, $p5135 = 0, $t0 = 0, $t0127 = 0, $t1 = 0, $t1128 = 0, $t2 = 0, $t2129 = 0, $t3 = 0, $t3130 = 0, $v = 0, $val = 0, $x0 = 0, $x0136 = 0, $x1 = 0, $x1137 = 0, $x2 = 0, $x2138 = 0, $x3 = 0, $x3139 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $out$addr = sp + 388 | 0;
 $out_stride$addr = sp + 384 | 0;
 $data$addr = sp + 380 | 0;
 $i = sp + 376 | 0;
 $val = sp;
 $v = sp + 372 | 0;
 $o = sp + 368 | 0;
 $d = sp + 364 | 0;
 $dcterm = sp + 360 | 0;
 $t0 = sp + 356 | 0;
 $t1 = sp + 352 | 0;
 $t2 = sp + 348 | 0;
 $t3 = sp + 344 | 0;
 $p1 = sp + 340 | 0;
 $p2 = sp + 336 | 0;
 $p3 = sp + 332 | 0;
 $p4 = sp + 328 | 0;
 $p5 = sp + 324 | 0;
 $x0 = sp + 320 | 0;
 $x1 = sp + 316 | 0;
 $x2 = sp + 312 | 0;
 $x3 = sp + 308 | 0;
 $t0127 = sp + 304 | 0;
 $t1128 = sp + 300 | 0;
 $t2129 = sp + 296 | 0;
 $t3130 = sp + 292 | 0;
 $p1131 = sp + 288 | 0;
 $p2132 = sp + 284 | 0;
 $p3133 = sp + 280 | 0;
 $p4134 = sp + 276 | 0;
 $p5135 = sp + 272 | 0;
 $x0136 = sp + 268 | 0;
 $x1137 = sp + 264 | 0;
 $x2138 = sp + 260 | 0;
 $x3139 = sp + 256 | 0;
 HEAP32[$out$addr >> 2] = $out;
 HEAP32[$out_stride$addr >> 2] = $out_stride;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$v >> 2] = $val;
 HEAP32[$d >> 2] = HEAP32[$data$addr >> 2];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 8) break;
  if (!(HEAP16[(HEAP32[$d >> 2] | 0) + 16 >> 1] | 0)) if (!(HEAP16[(HEAP32[$d >> 2] | 0) + 32 >> 1] | 0)) if (!(HEAP16[(HEAP32[$d >> 2] | 0) + 48 >> 1] | 0)) if (!(HEAP16[(HEAP32[$d >> 2] | 0) + 64 >> 1] | 0)) if (!(HEAP16[(HEAP32[$d >> 2] | 0) + 80 >> 1] | 0)) if (!(HEAP16[(HEAP32[$d >> 2] | 0) + 96 >> 1] | 0)) if (!(HEAP16[(HEAP32[$d >> 2] | 0) + 112 >> 1] | 0)) {
   HEAP32[$dcterm >> 2] = HEAP16[HEAP32[$d >> 2] >> 1] << 2;
   $18 = HEAP32[$dcterm >> 2] | 0;
   HEAP32[(HEAP32[$v >> 2] | 0) + 224 >> 2] = $18;
   HEAP32[(HEAP32[$v >> 2] | 0) + 192 >> 2] = $18;
   HEAP32[(HEAP32[$v >> 2] | 0) + 160 >> 2] = $18;
   HEAP32[(HEAP32[$v >> 2] | 0) + 128 >> 2] = $18;
   HEAP32[(HEAP32[$v >> 2] | 0) + 96 >> 2] = $18;
   HEAP32[(HEAP32[$v >> 2] | 0) + 64 >> 2] = $18;
   HEAP32[(HEAP32[$v >> 2] | 0) + 32 >> 2] = $18;
   HEAP32[HEAP32[$v >> 2] >> 2] = $18;
  } else label = 11; else label = 11; else label = 11; else label = 11; else label = 11; else label = 11; else label = 11;
  if ((label | 0) == 11) {
   label = 0;
   HEAP32[$p2 >> 2] = HEAP16[(HEAP32[$d >> 2] | 0) + 32 >> 1];
   HEAP32[$p3 >> 2] = HEAP16[(HEAP32[$d >> 2] | 0) + 96 >> 1];
   HEAP32[$p1 >> 2] = ((HEAP32[$p2 >> 2] | 0) + (HEAP32[$p3 >> 2] | 0) | 0) * 2217;
   HEAP32[$t2 >> 2] = (HEAP32[$p1 >> 2] | 0) + (Math_imul(HEAP32[$p3 >> 2] | 0, -7567) | 0);
   HEAP32[$t3 >> 2] = (HEAP32[$p1 >> 2] | 0) + ((HEAP32[$p2 >> 2] | 0) * 3135 | 0);
   HEAP32[$p2 >> 2] = HEAP16[HEAP32[$d >> 2] >> 1];
   HEAP32[$p3 >> 2] = HEAP16[(HEAP32[$d >> 2] | 0) + 64 >> 1];
   HEAP32[$t0 >> 2] = (HEAP32[$p2 >> 2] | 0) + (HEAP32[$p3 >> 2] | 0) << 12;
   HEAP32[$t1 >> 2] = (HEAP32[$p2 >> 2] | 0) - (HEAP32[$p3 >> 2] | 0) << 12;
   HEAP32[$x0 >> 2] = (HEAP32[$t0 >> 2] | 0) + (HEAP32[$t3 >> 2] | 0);
   HEAP32[$x3 >> 2] = (HEAP32[$t0 >> 2] | 0) - (HEAP32[$t3 >> 2] | 0);
   HEAP32[$x1 >> 2] = (HEAP32[$t1 >> 2] | 0) + (HEAP32[$t2 >> 2] | 0);
   HEAP32[$x2 >> 2] = (HEAP32[$t1 >> 2] | 0) - (HEAP32[$t2 >> 2] | 0);
   HEAP32[$t0 >> 2] = HEAP16[(HEAP32[$d >> 2] | 0) + 112 >> 1];
   HEAP32[$t1 >> 2] = HEAP16[(HEAP32[$d >> 2] | 0) + 80 >> 1];
   HEAP32[$t2 >> 2] = HEAP16[(HEAP32[$d >> 2] | 0) + 48 >> 1];
   HEAP32[$t3 >> 2] = HEAP16[(HEAP32[$d >> 2] | 0) + 16 >> 1];
   HEAP32[$p3 >> 2] = (HEAP32[$t0 >> 2] | 0) + (HEAP32[$t2 >> 2] | 0);
   HEAP32[$p4 >> 2] = (HEAP32[$t1 >> 2] | 0) + (HEAP32[$t3 >> 2] | 0);
   HEAP32[$p1 >> 2] = (HEAP32[$t0 >> 2] | 0) + (HEAP32[$t3 >> 2] | 0);
   HEAP32[$p2 >> 2] = (HEAP32[$t1 >> 2] | 0) + (HEAP32[$t2 >> 2] | 0);
   HEAP32[$p5 >> 2] = ((HEAP32[$p3 >> 2] | 0) + (HEAP32[$p4 >> 2] | 0) | 0) * 4816;
   HEAP32[$t0 >> 2] = (HEAP32[$t0 >> 2] | 0) * 1223;
   HEAP32[$t1 >> 2] = (HEAP32[$t1 >> 2] | 0) * 8410;
   HEAP32[$t2 >> 2] = (HEAP32[$t2 >> 2] | 0) * 12586;
   HEAP32[$t3 >> 2] = (HEAP32[$t3 >> 2] | 0) * 6149;
   HEAP32[$p1 >> 2] = (HEAP32[$p5 >> 2] | 0) + (Math_imul(HEAP32[$p1 >> 2] | 0, -3685) | 0);
   HEAP32[$p2 >> 2] = (HEAP32[$p5 >> 2] | 0) + (Math_imul(HEAP32[$p2 >> 2] | 0, -10497) | 0);
   HEAP32[$p3 >> 2] = Math_imul(HEAP32[$p3 >> 2] | 0, -8034) | 0;
   HEAP32[$p4 >> 2] = Math_imul(HEAP32[$p4 >> 2] | 0, -1597) | 0;
   HEAP32[$t3 >> 2] = (HEAP32[$t3 >> 2] | 0) + ((HEAP32[$p1 >> 2] | 0) + (HEAP32[$p4 >> 2] | 0));
   HEAP32[$t2 >> 2] = (HEAP32[$t2 >> 2] | 0) + ((HEAP32[$p2 >> 2] | 0) + (HEAP32[$p3 >> 2] | 0));
   HEAP32[$t1 >> 2] = (HEAP32[$t1 >> 2] | 0) + ((HEAP32[$p2 >> 2] | 0) + (HEAP32[$p4 >> 2] | 0));
   HEAP32[$t0 >> 2] = (HEAP32[$t0 >> 2] | 0) + ((HEAP32[$p1 >> 2] | 0) + (HEAP32[$p3 >> 2] | 0));
   HEAP32[$x0 >> 2] = (HEAP32[$x0 >> 2] | 0) + 512;
   HEAP32[$x1 >> 2] = (HEAP32[$x1 >> 2] | 0) + 512;
   HEAP32[$x2 >> 2] = (HEAP32[$x2 >> 2] | 0) + 512;
   HEAP32[$x3 >> 2] = (HEAP32[$x3 >> 2] | 0) + 512;
   HEAP32[HEAP32[$v >> 2] >> 2] = (HEAP32[$x0 >> 2] | 0) + (HEAP32[$t3 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$v >> 2] | 0) + 224 >> 2] = (HEAP32[$x0 >> 2] | 0) - (HEAP32[$t3 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$v >> 2] | 0) + 32 >> 2] = (HEAP32[$x1 >> 2] | 0) + (HEAP32[$t2 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$v >> 2] | 0) + 192 >> 2] = (HEAP32[$x1 >> 2] | 0) - (HEAP32[$t2 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$v >> 2] | 0) + 64 >> 2] = (HEAP32[$x2 >> 2] | 0) + (HEAP32[$t1 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$v >> 2] | 0) + 160 >> 2] = (HEAP32[$x2 >> 2] | 0) - (HEAP32[$t1 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$v >> 2] | 0) + 96 >> 2] = (HEAP32[$x3 >> 2] | 0) + (HEAP32[$t0 >> 2] | 0) >> 10;
   HEAP32[(HEAP32[$v >> 2] | 0) + 128 >> 2] = (HEAP32[$x3 >> 2] | 0) - (HEAP32[$t0 >> 2] | 0) >> 10;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  HEAP32[$d >> 2] = (HEAP32[$d >> 2] | 0) + 2;
  HEAP32[$v >> 2] = (HEAP32[$v >> 2] | 0) + 4;
 }
 HEAP32[$i >> 2] = 0;
 HEAP32[$v >> 2] = $val;
 HEAP32[$o >> 2] = HEAP32[$out$addr >> 2];
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 8) break;
  HEAP32[$p2132 >> 2] = HEAP32[(HEAP32[$v >> 2] | 0) + 8 >> 2];
  HEAP32[$p3133 >> 2] = HEAP32[(HEAP32[$v >> 2] | 0) + 24 >> 2];
  HEAP32[$p1131 >> 2] = ((HEAP32[$p2132 >> 2] | 0) + (HEAP32[$p3133 >> 2] | 0) | 0) * 2217;
  HEAP32[$t2129 >> 2] = (HEAP32[$p1131 >> 2] | 0) + (Math_imul(HEAP32[$p3133 >> 2] | 0, -7567) | 0);
  HEAP32[$t3130 >> 2] = (HEAP32[$p1131 >> 2] | 0) + ((HEAP32[$p2132 >> 2] | 0) * 3135 | 0);
  HEAP32[$p2132 >> 2] = HEAP32[HEAP32[$v >> 2] >> 2];
  HEAP32[$p3133 >> 2] = HEAP32[(HEAP32[$v >> 2] | 0) + 16 >> 2];
  HEAP32[$t0127 >> 2] = (HEAP32[$p2132 >> 2] | 0) + (HEAP32[$p3133 >> 2] | 0) << 12;
  HEAP32[$t1128 >> 2] = (HEAP32[$p2132 >> 2] | 0) - (HEAP32[$p3133 >> 2] | 0) << 12;
  HEAP32[$x0136 >> 2] = (HEAP32[$t0127 >> 2] | 0) + (HEAP32[$t3130 >> 2] | 0);
  HEAP32[$x3139 >> 2] = (HEAP32[$t0127 >> 2] | 0) - (HEAP32[$t3130 >> 2] | 0);
  HEAP32[$x1137 >> 2] = (HEAP32[$t1128 >> 2] | 0) + (HEAP32[$t2129 >> 2] | 0);
  HEAP32[$x2138 >> 2] = (HEAP32[$t1128 >> 2] | 0) - (HEAP32[$t2129 >> 2] | 0);
  HEAP32[$t0127 >> 2] = HEAP32[(HEAP32[$v >> 2] | 0) + 28 >> 2];
  HEAP32[$t1128 >> 2] = HEAP32[(HEAP32[$v >> 2] | 0) + 20 >> 2];
  HEAP32[$t2129 >> 2] = HEAP32[(HEAP32[$v >> 2] | 0) + 12 >> 2];
  HEAP32[$t3130 >> 2] = HEAP32[(HEAP32[$v >> 2] | 0) + 4 >> 2];
  HEAP32[$p3133 >> 2] = (HEAP32[$t0127 >> 2] | 0) + (HEAP32[$t2129 >> 2] | 0);
  HEAP32[$p4134 >> 2] = (HEAP32[$t1128 >> 2] | 0) + (HEAP32[$t3130 >> 2] | 0);
  HEAP32[$p1131 >> 2] = (HEAP32[$t0127 >> 2] | 0) + (HEAP32[$t3130 >> 2] | 0);
  HEAP32[$p2132 >> 2] = (HEAP32[$t1128 >> 2] | 0) + (HEAP32[$t2129 >> 2] | 0);
  HEAP32[$p5135 >> 2] = ((HEAP32[$p3133 >> 2] | 0) + (HEAP32[$p4134 >> 2] | 0) | 0) * 4816;
  HEAP32[$t0127 >> 2] = (HEAP32[$t0127 >> 2] | 0) * 1223;
  HEAP32[$t1128 >> 2] = (HEAP32[$t1128 >> 2] | 0) * 8410;
  HEAP32[$t2129 >> 2] = (HEAP32[$t2129 >> 2] | 0) * 12586;
  HEAP32[$t3130 >> 2] = (HEAP32[$t3130 >> 2] | 0) * 6149;
  HEAP32[$p1131 >> 2] = (HEAP32[$p5135 >> 2] | 0) + (Math_imul(HEAP32[$p1131 >> 2] | 0, -3685) | 0);
  HEAP32[$p2132 >> 2] = (HEAP32[$p5135 >> 2] | 0) + (Math_imul(HEAP32[$p2132 >> 2] | 0, -10497) | 0);
  HEAP32[$p3133 >> 2] = Math_imul(HEAP32[$p3133 >> 2] | 0, -8034) | 0;
  HEAP32[$p4134 >> 2] = Math_imul(HEAP32[$p4134 >> 2] | 0, -1597) | 0;
  HEAP32[$t3130 >> 2] = (HEAP32[$t3130 >> 2] | 0) + ((HEAP32[$p1131 >> 2] | 0) + (HEAP32[$p4134 >> 2] | 0));
  HEAP32[$t2129 >> 2] = (HEAP32[$t2129 >> 2] | 0) + ((HEAP32[$p2132 >> 2] | 0) + (HEAP32[$p3133 >> 2] | 0));
  HEAP32[$t1128 >> 2] = (HEAP32[$t1128 >> 2] | 0) + ((HEAP32[$p2132 >> 2] | 0) + (HEAP32[$p4134 >> 2] | 0));
  HEAP32[$t0127 >> 2] = (HEAP32[$t0127 >> 2] | 0) + ((HEAP32[$p1131 >> 2] | 0) + (HEAP32[$p3133 >> 2] | 0));
  HEAP32[$x0136 >> 2] = (HEAP32[$x0136 >> 2] | 0) + 16842752;
  HEAP32[$x1137 >> 2] = (HEAP32[$x1137 >> 2] | 0) + 16842752;
  HEAP32[$x2138 >> 2] = (HEAP32[$x2138 >> 2] | 0) + 16842752;
  HEAP32[$x3139 >> 2] = (HEAP32[$x3139 >> 2] | 0) + 16842752;
  $call = _stbi__clamp((HEAP32[$x0136 >> 2] | 0) + (HEAP32[$t3130 >> 2] | 0) >> 17) | 0;
  HEAP8[HEAP32[$o >> 2] >> 0] = $call;
  $call195 = _stbi__clamp((HEAP32[$x0136 >> 2] | 0) - (HEAP32[$t3130 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$o >> 2] | 0) + 7 >> 0] = $call195;
  $call199 = _stbi__clamp((HEAP32[$x1137 >> 2] | 0) + (HEAP32[$t2129 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = $call199;
  $call203 = _stbi__clamp((HEAP32[$x1137 >> 2] | 0) - (HEAP32[$t2129 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$o >> 2] | 0) + 6 >> 0] = $call203;
  $call207 = _stbi__clamp((HEAP32[$x2138 >> 2] | 0) + (HEAP32[$t1128 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = $call207;
  $call211 = _stbi__clamp((HEAP32[$x2138 >> 2] | 0) - (HEAP32[$t1128 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$o >> 2] | 0) + 5 >> 0] = $call211;
  $call215 = _stbi__clamp((HEAP32[$x3139 >> 2] | 0) + (HEAP32[$t0127 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = $call215;
  $call219 = _stbi__clamp((HEAP32[$x3139 >> 2] | 0) - (HEAP32[$t0127 >> 2] | 0) >> 17) | 0;
  HEAP8[(HEAP32[$o >> 2] | 0) + 4 >> 0] = $call219;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  HEAP32[$v >> 2] = (HEAP32[$v >> 2] | 0) + 32;
  HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + (HEAP32[$out_stride$addr >> 2] | 0);
 }
 STACKTOP = sp;
 return;
}

function _stbtt_InitFont_internal($info, $data, $fontstart) {
 $info = $info | 0;
 $data = $data | 0;
 $fontstart = $fontstart | 0;
 var $92 = 0, $add89 = 0, $add95 = 0, $b = 0, $b$byval_copy = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $cff = 0, $cff24 = 0, $cff31 = 0, $cff33 = 0, $charstrings = 0, $charstrings58 = 0, $cmap = 0, $conv107 = 0, $conv67 = 0, $cstype = 0, $data$addr = 0, $encoding_record = 0, $fdarrayoff = 0, $fdselect = 0, $fdselect55 = 0, $fdselectoff = 0, $fontdicts = 0, $fontdicts53 = 0, $fontstart$addr = 0, $gsubrs = 0, $i = 0, $info$addr = 0, $numTables = 0, $retval = 0, $subrs = 0, $t = 0, $tmp = 0, $tmp29 = 0, $tmp30 = 0, $tmp32 = 0, $tmp35 = 0, $tmp36 = 0, $tmp37 = 0, $tmp38 = 0, $tmp39 = 0, $tmp40 = 0, $tmp54 = 0, $tmp56 = 0, $tmp59 = 0, $topdict = 0, $topdict$byval_copy = 0, $topdictidx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $topdict$byval_copy = sp + 260 | 0;
 $b$byval_copy = sp + 248 | 0;
 $retval = sp + 244 | 0;
 $info$addr = sp + 240 | 0;
 $data$addr = sp + 236 | 0;
 $fontstart$addr = sp + 232 | 0;
 $cmap = sp + 228 | 0;
 $t = sp + 224 | 0;
 $i = sp + 220 | 0;
 $numTables = sp + 216 | 0;
 $tmp = sp + 204 | 0;
 $b = sp + 192 | 0;
 $topdict = sp + 180 | 0;
 $topdictidx = sp + 168 | 0;
 $cstype = sp + 164 | 0;
 $charstrings = sp + 160 | 0;
 $fdarrayoff = sp + 156 | 0;
 $fdselectoff = sp + 152 | 0;
 $cff24 = sp + 148 | 0;
 $tmp29 = sp + 136 | 0;
 $tmp30 = sp + 124 | 0;
 $tmp32 = sp + 112 | 0;
 $tmp35 = sp + 100 | 0;
 $tmp36 = sp + 88 | 0;
 $tmp37 = sp + 76 | 0;
 $tmp38 = sp + 64 | 0;
 $tmp39 = sp + 52 | 0;
 $tmp40 = sp + 40 | 0;
 $tmp54 = sp + 28 | 0;
 $tmp56 = sp + 16 | 0;
 $tmp59 = sp + 4 | 0;
 $encoding_record = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$fontstart$addr >> 2] = $fontstart;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] = HEAP32[$data$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 8 >> 2] = HEAP32[$fontstart$addr >> 2];
 $cff = (HEAP32[$info$addr >> 2] | 0) + 48 | 0;
 _stbtt__new_buf($tmp, 0, 0);
 HEAP32[$cff >> 2] = HEAP32[$tmp >> 2];
 HEAP32[$cff + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
 HEAP32[$cff + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
 HEAP32[$cmap >> 2] = _stbtt__find_table(HEAP32[$data$addr >> 2] | 0, HEAP32[$fontstart$addr >> 2] | 0, 44068) | 0;
 $call3 = _stbtt__find_table(HEAP32[$data$addr >> 2] | 0, HEAP32[$fontstart$addr >> 2] | 0, 44073) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] = $call3;
 $call4 = _stbtt__find_table(HEAP32[$data$addr >> 2] | 0, HEAP32[$fontstart$addr >> 2] | 0, 44078) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] = $call4;
 $call5 = _stbtt__find_table(HEAP32[$data$addr >> 2] | 0, HEAP32[$fontstart$addr >> 2] | 0, 44083) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] = $call5;
 $call6 = _stbtt__find_table(HEAP32[$data$addr >> 2] | 0, HEAP32[$fontstart$addr >> 2] | 0, 44088) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] = $call6;
 $call7 = _stbtt__find_table(HEAP32[$data$addr >> 2] | 0, HEAP32[$fontstart$addr >> 2] | 0, 44093) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 32 >> 2] = $call7;
 $call8 = _stbtt__find_table(HEAP32[$data$addr >> 2] | 0, HEAP32[$fontstart$addr >> 2] | 0, 44098) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 36 >> 2] = $call8;
 if (HEAP32[$cmap >> 2] | 0) if (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] | 0) if (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] | 0) if (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 32 >> 2] | 0) {
  if (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] | 0) {
   if (!(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] | 0)) {
    HEAP32[$retval >> 2] = 0;
    $92 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $92 | 0;
   }
  } else {
   HEAP32[$cstype >> 2] = 2;
   HEAP32[$charstrings >> 2] = 0;
   HEAP32[$fdarrayoff >> 2] = 0;
   HEAP32[$fdselectoff >> 2] = 0;
   HEAP32[$cff24 >> 2] = _stbtt__find_table(HEAP32[$data$addr >> 2] | 0, HEAP32[$fontstart$addr >> 2] | 0, 44103) | 0;
   if (!(HEAP32[$cff24 >> 2] | 0)) {
    HEAP32[$retval >> 2] = 0;
    $92 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $92 | 0;
   }
   $fontdicts = (HEAP32[$info$addr >> 2] | 0) + 96 | 0;
   _stbtt__new_buf($tmp29, 0, 0);
   HEAP32[$fontdicts >> 2] = HEAP32[$tmp29 >> 2];
   HEAP32[$fontdicts + 4 >> 2] = HEAP32[$tmp29 + 4 >> 2];
   HEAP32[$fontdicts + 8 >> 2] = HEAP32[$tmp29 + 8 >> 2];
   $fdselect = (HEAP32[$info$addr >> 2] | 0) + 108 | 0;
   _stbtt__new_buf($tmp30, 0, 0);
   HEAP32[$fdselect >> 2] = HEAP32[$tmp30 >> 2];
   HEAP32[$fdselect + 4 >> 2] = HEAP32[$tmp30 + 4 >> 2];
   HEAP32[$fdselect + 8 >> 2] = HEAP32[$tmp30 + 8 >> 2];
   $cff31 = (HEAP32[$info$addr >> 2] | 0) + 48 | 0;
   _stbtt__new_buf($tmp32, (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$cff24 >> 2] | 0) | 0, 536870912);
   HEAP32[$cff31 >> 2] = HEAP32[$tmp32 >> 2];
   HEAP32[$cff31 + 4 >> 2] = HEAP32[$tmp32 + 4 >> 2];
   HEAP32[$cff31 + 8 >> 2] = HEAP32[$tmp32 + 8 >> 2];
   $cff33 = (HEAP32[$info$addr >> 2] | 0) + 48 | 0;
   HEAP32[$b >> 2] = HEAP32[$cff33 >> 2];
   HEAP32[$b + 4 >> 2] = HEAP32[$cff33 + 4 >> 2];
   HEAP32[$b + 8 >> 2] = HEAP32[$cff33 + 8 >> 2];
   _stbtt__buf_skip($b, 2);
   _stbtt__buf_seek($b, (_stbtt__buf_get8($b) | 0) & 255);
   _stbtt__cff_get_index($tmp35, $b);
   _stbtt__cff_get_index($tmp36, $b);
   HEAP32[$topdictidx >> 2] = HEAP32[$tmp36 >> 2];
   HEAP32[$topdictidx + 4 >> 2] = HEAP32[$tmp36 + 4 >> 2];
   HEAP32[$topdictidx + 8 >> 2] = HEAP32[$tmp36 + 8 >> 2];
   HEAP32[$topdict$byval_copy >> 2] = HEAP32[$topdictidx >> 2];
   HEAP32[$topdict$byval_copy + 4 >> 2] = HEAP32[$topdictidx + 4 >> 2];
   HEAP32[$topdict$byval_copy + 8 >> 2] = HEAP32[$topdictidx + 8 >> 2];
   _stbtt__cff_index_get($tmp37, $topdict$byval_copy, 0);
   HEAP32[$topdict >> 2] = HEAP32[$tmp37 >> 2];
   HEAP32[$topdict + 4 >> 2] = HEAP32[$tmp37 + 4 >> 2];
   HEAP32[$topdict + 8 >> 2] = HEAP32[$tmp37 + 8 >> 2];
   _stbtt__cff_get_index($tmp38, $b);
   $gsubrs = (HEAP32[$info$addr >> 2] | 0) + 72 | 0;
   _stbtt__cff_get_index($tmp39, $b);
   HEAP32[$gsubrs >> 2] = HEAP32[$tmp39 >> 2];
   HEAP32[$gsubrs + 4 >> 2] = HEAP32[$tmp39 + 4 >> 2];
   HEAP32[$gsubrs + 8 >> 2] = HEAP32[$tmp39 + 8 >> 2];
   _stbtt__dict_get_ints($topdict, 17, 1, $charstrings);
   _stbtt__dict_get_ints($topdict, 262, 1, $cstype);
   _stbtt__dict_get_ints($topdict, 292, 1, $fdarrayoff);
   _stbtt__dict_get_ints($topdict, 293, 1, $fdselectoff);
   $subrs = (HEAP32[$info$addr >> 2] | 0) + 84 | 0;
   HEAP32[$b$byval_copy >> 2] = HEAP32[$b >> 2];
   HEAP32[$b$byval_copy + 4 >> 2] = HEAP32[$b + 4 >> 2];
   HEAP32[$b$byval_copy + 8 >> 2] = HEAP32[$b + 8 >> 2];
   HEAP32[$topdict$byval_copy >> 2] = HEAP32[$topdict >> 2];
   HEAP32[$topdict$byval_copy + 4 >> 2] = HEAP32[$topdict + 4 >> 2];
   HEAP32[$topdict$byval_copy + 8 >> 2] = HEAP32[$topdict + 8 >> 2];
   _stbtt__get_subrs($tmp40, $b$byval_copy, $topdict$byval_copy);
   HEAP32[$subrs >> 2] = HEAP32[$tmp40 >> 2];
   HEAP32[$subrs + 4 >> 2] = HEAP32[$tmp40 + 4 >> 2];
   HEAP32[$subrs + 8 >> 2] = HEAP32[$tmp40 + 8 >> 2];
   if ((HEAP32[$cstype >> 2] | 0) != 2) {
    HEAP32[$retval >> 2] = 0;
    $92 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $92 | 0;
   }
   if (!(HEAP32[$charstrings >> 2] | 0)) {
    HEAP32[$retval >> 2] = 0;
    $92 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $92 | 0;
   }
   do if (HEAP32[$fdarrayoff >> 2] | 0) {
    if (HEAP32[$fdselectoff >> 2] | 0) {
     _stbtt__buf_seek($b, HEAP32[$fdarrayoff >> 2] | 0);
     $fontdicts53 = (HEAP32[$info$addr >> 2] | 0) + 96 | 0;
     _stbtt__cff_get_index($tmp54, $b);
     HEAP32[$fontdicts53 >> 2] = HEAP32[$tmp54 >> 2];
     HEAP32[$fontdicts53 + 4 >> 2] = HEAP32[$tmp54 + 4 >> 2];
     HEAP32[$fontdicts53 + 8 >> 2] = HEAP32[$tmp54 + 8 >> 2];
     $fdselect55 = (HEAP32[$info$addr >> 2] | 0) + 108 | 0;
     _stbtt__buf_range($tmp56, $b, HEAP32[$fdselectoff >> 2] | 0, (HEAP32[$b + 8 >> 2] | 0) - (HEAP32[$fdselectoff >> 2] | 0) | 0);
     HEAP32[$fdselect55 >> 2] = HEAP32[$tmp56 >> 2];
     HEAP32[$fdselect55 + 4 >> 2] = HEAP32[$tmp56 + 4 >> 2];
     HEAP32[$fdselect55 + 8 >> 2] = HEAP32[$tmp56 + 8 >> 2];
     break;
    }
    HEAP32[$retval >> 2] = 0;
    $92 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $92 | 0;
   } while (0);
   _stbtt__buf_seek($b, HEAP32[$charstrings >> 2] | 0);
   $charstrings58 = (HEAP32[$info$addr >> 2] | 0) + 60 | 0;
   _stbtt__cff_get_index($tmp59, $b);
   HEAP32[$charstrings58 >> 2] = HEAP32[$tmp59 >> 2];
   HEAP32[$charstrings58 + 4 >> 2] = HEAP32[$tmp59 + 4 >> 2];
   HEAP32[$charstrings58 + 8 >> 2] = HEAP32[$tmp59 + 8 >> 2];
  }
  HEAP32[$t >> 2] = _stbtt__find_table(HEAP32[$data$addr >> 2] | 0, HEAP32[$fontstart$addr >> 2] | 0, 44108) | 0;
  if (HEAP32[$t >> 2] | 0) {
   $conv67 = (_ttUSHORT((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$t >> 2] | 0) + 4 | 0) | 0) & 65535;
   HEAP32[(HEAP32[$info$addr >> 2] | 0) + 12 >> 2] = $conv67;
  } else HEAP32[(HEAP32[$info$addr >> 2] | 0) + 12 >> 2] = 65535;
  HEAP32[$numTables >> 2] = (_ttUSHORT((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$cmap >> 2] | 0) + 2 | 0) | 0) & 65535;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 40 >> 2] = 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$numTables >> 2] | 0)) break;
   HEAP32[$encoding_record >> 2] = (HEAP32[$cmap >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 3);
   L38 : do switch ((_ttUSHORT((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$encoding_record >> 2] | 0) | 0) | 0) & 65535 | 0) {
   case 3:
    {
     switch ((_ttUSHORT((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$encoding_record >> 2] | 0) + 2 | 0) | 0) & 65535 | 0) {
     case 10:
     case 1:
      break;
     default:
      break L38;
     }
     $add89 = (HEAP32[$cmap >> 2] | 0) + (_ttULONG((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$encoding_record >> 2] | 0) + 4 | 0) | 0) | 0;
     HEAP32[(HEAP32[$info$addr >> 2] | 0) + 40 >> 2] = $add89;
     break;
    }
   case 0:
    {
     $add95 = (HEAP32[$cmap >> 2] | 0) + (_ttULONG((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$encoding_record >> 2] | 0) + 4 | 0) | 0) | 0;
     HEAP32[(HEAP32[$info$addr >> 2] | 0) + 40 >> 2] = $add95;
     break;
    }
   default:
    {}
   } while (0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  if (!(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 40 >> 2] | 0)) {
   HEAP32[$retval >> 2] = 0;
   $92 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $92 | 0;
  } else {
   $conv107 = (_ttUSHORT((HEAP32[$data$addr >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] | 0) + 50 | 0) | 0) & 65535;
   HEAP32[(HEAP32[$info$addr >> 2] | 0) + 44 >> 2] = $conv107;
   HEAP32[$retval >> 2] = 1;
   $92 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $92 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $92 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $92 | 0;
}

function _stbi__hdr_load($s, $x, $y, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $104 = 0, $105 = 0, $106 = 0, $118 = 0, $119 = 0, $138 = 0, $20 = 0, $add$ptr207 = 0, $add$ptr80 = 0, $add$ptr82 = 0, $buffer = 0, $c1 = 0, $c2 = 0, $call187 = 0, $cmp138 = 0, $comp$addr = 0, $conv118 = 0, $count = 0, $hdr_data = 0, $headerToken = 0, $height = 0, $i = 0, $j = 0, $k = 0, $len = 0, $mul = 0, $mul204 = 0, $nleft = 0, $req_comp$addr = 0, $retval = 0, $rgbe = 0, $rgbe106 = 0, $s$addr = 0, $scanline = 0, $sub = 0, $tobool = 0, $tobool123 = 0, $tobool133 = 0, $tobool159 = 0, $tobool179 = 0, $tobool19 = 0, $tobool28 = 0, $tobool39 = 0, $tobool55 = 0, $tobool62 = 0, $token = 0, $valid = 0, $value = 0, $width = 0, $x$addr = 0, $y$addr = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136 | 0;
 $retval = sp + 1108 | 0;
 $s$addr = sp + 1104 | 0;
 $x$addr = sp + 1100 | 0;
 $y$addr = sp + 1096 | 0;
 $comp$addr = sp + 1092 | 0;
 $req_comp$addr = sp + 1088 | 0;
 $buffer = sp;
 $token = sp + 1080 | 0;
 $valid = sp + 1076 | 0;
 $width = sp + 1072 | 0;
 $height = sp + 1068 | 0;
 $scanline = sp + 1064 | 0;
 $hdr_data = sp + 1060 | 0;
 $len = sp + 1056 | 0;
 $count = sp + 1121 | 0;
 $value = sp + 1120 | 0;
 $i = sp + 1052 | 0;
 $j = sp + 1048 | 0;
 $k = sp + 1044 | 0;
 $c1 = sp + 1040 | 0;
 $c2 = sp + 1036 | 0;
 $z = sp + 1032 | 0;
 $headerToken = sp + 1028 | 0;
 $rgbe = sp + 1116 | 0;
 $rgbe106 = sp + 1112 | 0;
 $nleft = sp + 1024 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[sp + 1084 >> 2] = $ri;
 HEAP32[$valid >> 2] = 0;
 HEAP32[$headerToken >> 2] = _stbi__hdr_gettoken(HEAP32[$s$addr >> 2] | 0, $buffer) | 0;
 if (_strcmp(HEAP32[$headerToken >> 2] | 0, 47682) | 0) if (_strcmp(HEAP32[$headerToken >> 2] | 0, 47693) | 0) {
  $tobool = (_stbi__err(47700) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 while (1) {
  HEAP32[$token >> 2] = _stbi__hdr_gettoken(HEAP32[$s$addr >> 2] | 0, $buffer) | 0;
  if (!(HEAP8[HEAP32[$token >> 2] >> 0] | 0)) break;
  if (!(_strcmp(HEAP32[$token >> 2] | 0, 47708) | 0)) HEAP32[$valid >> 2] = 1;
 }
 if (!(HEAP32[$valid >> 2] | 0)) {
  $tobool19 = (_stbi__err(47731) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool19 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAP32[$token >> 2] = _stbi__hdr_gettoken(HEAP32[$s$addr >> 2] | 0, $buffer) | 0;
 if (_strncmp(HEAP32[$token >> 2] | 0, 47750, 3) | 0) {
  $tobool28 = (_stbi__err(47754) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool28 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAP32[$token >> 2] = (HEAP32[$token >> 2] | 0) + 3;
 HEAP32[$height >> 2] = _strtol(HEAP32[$token >> 2] | 0, $token, 10) | 0;
 while (1) {
  $20 = HEAP32[$token >> 2] | 0;
  if ((HEAP8[HEAP32[$token >> 2] >> 0] | 0) != 32) break;
  HEAP32[$token >> 2] = $20 + 1;
 }
 if (_strncmp($20, 47778, 3) | 0) {
  $tobool39 = (_stbi__err(47754) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool39 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAP32[$token >> 2] = (HEAP32[$token >> 2] | 0) + 3;
 HEAP32[$width >> 2] = _strtol(HEAP32[$token >> 2] | 0, 0, 10) | 0;
 HEAP32[HEAP32[$x$addr >> 2] >> 2] = HEAP32[$width >> 2];
 HEAP32[HEAP32[$y$addr >> 2] >> 2] = HEAP32[$height >> 2];
 if (HEAP32[$comp$addr >> 2] | 0) HEAP32[HEAP32[$comp$addr >> 2] >> 2] = 3;
 if (!(HEAP32[$req_comp$addr >> 2] | 0)) HEAP32[$req_comp$addr >> 2] = 3;
 if (!(_stbi__mad4sizes_valid(HEAP32[$width >> 2] | 0, HEAP32[$height >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, 4, 0) | 0)) {
  $tobool55 = (_stbi__err(47570) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool55 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAP32[$hdr_data >> 2] = _stbi__malloc_mad4(HEAP32[$width >> 2] | 0, HEAP32[$height >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, 4, 0) | 0;
 if (!(HEAP32[$hdr_data >> 2] | 0)) {
  $tobool62 = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool62 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 do if ((HEAP32[$width >> 2] | 0) < 8 | (HEAP32[$width >> 2] | 0) >= 32768) {
  HEAP32[$j >> 2] = 0;
  label = 28;
 } else {
  HEAP32[$scanline >> 2] = 0;
  HEAP32[$j >> 2] = 0;
  L46 : while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$height >> 2] | 0)) {
    label = 64;
    break;
   }
   HEAP32[$c1 >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   HEAP32[$c2 >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   HEAP32[$len >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   if ((HEAP32[$c1 >> 2] | 0) != 2 | (HEAP32[$c2 >> 2] | 0) != 2) {
    label = 37;
    break;
   }
   if (HEAP32[$len >> 2] & 128 | 0) {
    label = 37;
    break;
   }
   HEAP32[$len >> 2] = HEAP32[$len >> 2] << 8;
   $conv118 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   HEAP32[$len >> 2] = HEAP32[$len >> 2] | $conv118;
   if ((HEAP32[$len >> 2] | 0) != (HEAP32[$width >> 2] | 0)) {
    label = 39;
    break;
   }
   if (!(HEAP32[$scanline >> 2] | 0)) {
    HEAP32[$scanline >> 2] = _stbi__malloc_mad2(HEAP32[$width >> 2] | 0, 4, 0) | 0;
    if (!(HEAP32[$scanline >> 2] | 0)) {
     label = 42;
     break;
    }
   }
   HEAP32[$k >> 2] = 0;
   while (1) {
    $cmp138 = (HEAP32[$k >> 2] | 0) < 4;
    HEAP32[$i >> 2] = 0;
    if (!$cmp138) break;
    while (1) {
     $sub = (HEAP32[$width >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0;
     HEAP32[$nleft >> 2] = $sub;
     if (($sub | 0) <= 0) break;
     HEAP8[$count >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
     L61 : do if ((HEAPU8[$count >> 0] | 0) > 128) {
      HEAP8[$value >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
      HEAP8[$count >> 0] = (HEAPU8[$count >> 0] | 0) - 128;
      if ((HEAPU8[$count >> 0] | 0) > (HEAP32[$nleft >> 2] | 0)) {
       label = 49;
       break L46;
      }
      HEAP32[$z >> 2] = 0;
      while (1) {
       if ((HEAP32[$z >> 2] | 0) >= (HEAPU8[$count >> 0] | 0)) break L61;
       $104 = HEAP8[$value >> 0] | 0;
       $105 = HEAP32[$scanline >> 2] | 0;
       $106 = HEAP32[$i >> 2] | 0;
       HEAP32[$i >> 2] = $106 + 1;
       HEAP8[$105 + (($106 << 2) + (HEAP32[$k >> 2] | 0)) >> 0] = $104;
       HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) + 1;
      }
     } else {
      if ((HEAPU8[$count >> 0] | 0) > (HEAP32[$nleft >> 2] | 0)) {
       label = 54;
       break L46;
      }
      HEAP32[$z >> 2] = 0;
      while (1) {
       if ((HEAP32[$z >> 2] | 0) >= (HEAPU8[$count >> 0] | 0)) break L61;
       $call187 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
       $118 = HEAP32[$scanline >> 2] | 0;
       $119 = HEAP32[$i >> 2] | 0;
       HEAP32[$i >> 2] = $119 + 1;
       HEAP8[$118 + (($119 << 2) + (HEAP32[$k >> 2] | 0)) >> 0] = $call187;
       HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) + 1;
      }
     } while (0);
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$width >> 2] | 0)) break;
    $mul204 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$width >> 2] | 0) | 0;
    $add$ptr207 = (HEAP32[$hdr_data >> 2] | 0) + ((Math_imul($mul204 + (HEAP32[$i >> 2] | 0) | 0, HEAP32[$req_comp$addr >> 2] | 0) | 0) << 2) | 0;
    _stbi__hdr_convert($add$ptr207, (HEAP32[$scanline >> 2] | 0) + (HEAP32[$i >> 2] << 2) | 0, HEAP32[$req_comp$addr >> 2] | 0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  if ((label | 0) == 37) {
   HEAP8[$rgbe106 >> 0] = HEAP32[$c1 >> 2];
   HEAP8[$rgbe106 + 1 >> 0] = HEAP32[$c2 >> 2];
   HEAP8[$rgbe106 + 2 >> 0] = HEAP32[$len >> 2];
   HEAP8[$rgbe106 + 3 >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
   _stbi__hdr_convert(HEAP32[$hdr_data >> 2] | 0, $rgbe106, HEAP32[$req_comp$addr >> 2] | 0);
   HEAP32[$i >> 2] = 1;
   HEAP32[$j >> 2] = 0;
   _free(HEAP32[$scanline >> 2] | 0);
   label = 31;
   break;
  } else if ((label | 0) == 39) {
   _free(HEAP32[$hdr_data >> 2] | 0);
   _free(HEAP32[$scanline >> 2] | 0);
   $tobool123 = (_stbi__err(47782) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool123 ? 0 : 0;
   $138 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  } else if ((label | 0) == 42) {
   _free(HEAP32[$hdr_data >> 2] | 0);
   $tobool133 = (_stbi__err(47531) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool133 ? 0 : 0;
   $138 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  } else if ((label | 0) == 49) {
   _free(HEAP32[$hdr_data >> 2] | 0);
   _free(HEAP32[$scanline >> 2] | 0);
   $tobool159 = (_stbi__err(47814) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool159 ? 0 : 0;
   $138 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  } else if ((label | 0) == 54) {
   _free(HEAP32[$hdr_data >> 2] | 0);
   _free(HEAP32[$scanline >> 2] | 0);
   $tobool179 = (_stbi__err(47814) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool179 ? 0 : 0;
   $138 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  } else if ((label | 0) == 64) {
   if (!(HEAP32[$scanline >> 2] | 0)) {
    label = 66;
    break;
   }
   _free(HEAP32[$scanline >> 2] | 0);
   label = 66;
   break;
  }
 } while (0);
 while (1) {
  if ((label | 0) == 28) {
   label = 0;
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$height >> 2] | 0)) {
    label = 66;
    continue;
   }
   HEAP32[$i >> 2] = 0;
  } else if ((label | 0) == 31) {
   label = 0;
   _stbi__getn(HEAP32[$s$addr >> 2] | 0, $rgbe, 4) | 0;
   $mul = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$width >> 2] | 0) | 0;
   $add$ptr80 = (HEAP32[$hdr_data >> 2] | 0) + ((Math_imul($mul, HEAP32[$req_comp$addr >> 2] | 0) | 0) << 2) | 0;
   $add$ptr82 = $add$ptr80 + ((Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0) | 0) << 2) | 0;
   _stbi__hdr_convert($add$ptr82, $rgbe, HEAP32[$req_comp$addr >> 2] | 0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  } else if ((label | 0) == 66) {
   label = 0;
   HEAP32[$retval >> 2] = HEAP32[$hdr_data >> 2];
   break;
  }
  if ((HEAP32[$i >> 2] | 0) < (HEAP32[$width >> 2] | 0)) {
   label = 31;
   continue;
  }
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  label = 28;
 }
 $138 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $138 | 0;
}

function __ZL5framev() {
 var $15 = 0, $19 = 0.0, $20 = 0, $3 = 0.0, $33 = 0, $39 = 0, $4 = 0.0, $43 = 0, $44 = 0, $45 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i24 = 0, $__i$0$i$i$i43 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp5 = 0, $agg$tmp8 = 0, $agg$tmp9 = 0, $call$i22 = 0, $call$i31 = 0, $call$i50 = 0, $call23 = 0, $call32 = 0.0, $conv = 0.0, $mul38 = 0.0, $proj = 0, $ref$tmp = 0, $ref$tmp19 = 0, $rotate = 0, $rxm = 0, $rym = 0, $view = 0, $view_proj$byval_copy = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 $agg$tmp25$byval_copy = sp + 712 | 0;
 $view_proj$byval_copy = sp + 128 | 0;
 $agg$tmp$byval_copy = sp + 584 | 0;
 $proj = sp + 520 | 0;
 $view = sp + 456 | 0;
 $agg$tmp = sp + 696 | 0;
 $agg$tmp4 = sp + 684 | 0;
 $agg$tmp5 = sp + 672 | 0;
 $rxm = sp + 384 | 0;
 $agg$tmp8 = sp + 660 | 0;
 $rym = sp + 320 | 0;
 $agg$tmp9 = sp + 648 | 0;
 $rotate = sp + 256 | 0;
 $ref$tmp = sp;
 $ref$tmp19 = sp + 192 | 0;
 $agg$tmp25 = sp + 448 | 0;
 _sfetch_dowork();
 $conv = +(_sapp_width() | 0);
 __ZL15HMM_Perspectiveffff($proj, $conv / +(_sapp_height() | 0));
 __ZL8HMM_Vec3fff($agg$tmp, 0.0, 1.5, +HEAPF32[(HEAP32[546685] | 0) + 28 >> 2] * +HEAPF32[3179]);
 __ZL8HMM_Vec3fff($agg$tmp4, 0.0, 0.0, 0.0);
 __ZL8HMM_Vec3fff($agg$tmp5, 0.0, 1.0, 0.0);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp$byval_copy + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
 HEAP32[$view_proj$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$view_proj$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 HEAP32[$view_proj$byval_copy + 8 >> 2] = HEAP32[$agg$tmp4 + 8 >> 2];
 HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 HEAP32[$agg$tmp25$byval_copy + 8 >> 2] = HEAP32[$agg$tmp5 + 8 >> 2];
 _HMM_LookAt($view, $agg$tmp$byval_copy, $view_proj$byval_copy, $agg$tmp25$byval_copy);
 dest = $view_proj$byval_copy;
 src = $proj;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $agg$tmp25$byval_copy;
 src = $view;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _HMM_MultiplyMat4($agg$tmp$byval_copy, $view_proj$byval_copy, $agg$tmp25$byval_copy);
 $3 = +HEAPF32[546694];
 __ZL8HMM_Vec3fff($agg$tmp8, 1.0, 0.0, 0.0);
 HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 HEAP32[$agg$tmp25$byval_copy + 8 >> 2] = HEAP32[$agg$tmp8 + 8 >> 2];
 _HMM_Rotate($rxm, $3, $agg$tmp25$byval_copy);
 $4 = +HEAPF32[546695];
 __ZL8HMM_Vec3fff($agg$tmp9, 0.0, 1.0, 0.0);
 HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
 HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
 HEAP32[$agg$tmp25$byval_copy + 8 >> 2] = HEAP32[$agg$tmp9 + 8 >> 2];
 _HMM_Rotate($rym, $4, $agg$tmp25$byval_copy);
 dest = $view_proj$byval_copy;
 src = $rxm;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $agg$tmp25$byval_copy;
 src = $rym;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _HMM_MultiplyMat4($rotate, $view_proj$byval_copy, $agg$tmp25$byval_copy);
 dest = $view_proj$byval_copy;
 src = $rotate;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $agg$tmp25$byval_copy;
 src = 2186784;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _HMM_MultiplyMat4($ref$tmp, $view_proj$byval_copy, $agg$tmp25$byval_copy);
 dest = 2186784;
 src = $ref$tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$agg$tmp25$byval_copy >> 2] = +HEAPF32[546692] + +HEAPF32[546694];
 HEAPF32[546692] = +__ZN2Dr19EqualizeAngle0to360IfEET_RKS1_($agg$tmp25$byval_copy);
 HEAPF32[$agg$tmp25$byval_copy >> 2] = +HEAPF32[546693] + +HEAPF32[546695];
 HEAPF32[546693] = +__ZN2Dr19EqualizeAngle0to360IfEET_RKS1_($agg$tmp25$byval_copy);
 __ZN6DrVec23setEff(2186776, 0.0, 0.0);
 dest = $ref$tmp + 64 | 0;
 src = 2186784;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $view_proj$byval_copy;
 src = $agg$tmp$byval_copy;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $agg$tmp25$byval_copy;
 src = 2186784;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _HMM_MultiplyMat4($ref$tmp19, $view_proj$byval_copy, $agg$tmp25$byval_copy);
 dest = $ref$tmp;
 src = $ref$tmp19;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$view_proj$byval_copy >> 2] = (HEAP8[(HEAP32[546685] | 0) + 24 >> 0] | 0) == 0 ? 0.0 : 1.0;
 if ((HEAP32[3178] | 0) != (HEAP32[546689] | 0)) {
  __Z13calculateMeshb(0);
  HEAP32[546689] = HEAP32[3178];
 }
 $call23 = _sapp_width() | 0;
 _sg_begin_default_pass(61840, $call23, _sapp_height() | 0);
 HEAP32[$agg$tmp25 >> 2] = HEAP32[15486];
 HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2];
 _sg_apply_pipeline($agg$tmp25$byval_copy);
 _sg_apply_bindings(61948);
 HEAP32[$agg$tmp25$byval_copy >> 2] = $ref$tmp;
 HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = 128;
 __Z17sg_apply_uniforms15sg_shader_stageiRK8sg_range(0, 0, $agg$tmp25$byval_copy);
 HEAP32[$agg$tmp25$byval_copy >> 2] = $view_proj$byval_copy;
 HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = 16;
 __Z17sg_apply_uniforms15sg_shader_stageiRK8sg_range(1, 0, $agg$tmp25$byval_copy);
 $15 = HEAP32[546685] | 0;
 _sg_draw(0, (HEAP32[$15 + 4 >> 2] | 0) - (HEAP32[$15 >> 2] | 0) >> 2, 1);
 _fonsClearState(HEAP32[278872] | 0);
 _sgl_defaults();
 _sgl_matrix_mode_projection();
 $call32 = +_sapp_widthf();
 _sgl_ortho(0.0, $call32, +_sapp_heightf(), 0.0, -1.0, 1.0);
 $19 = +HEAPF32[278873];
 $20 = HEAP32[278872] | 0;
 if ((HEAP32[278874] | 0) != -1) {
  _fonsSetAlign($20, 65);
  _fonsSetFont($20, HEAP32[278874] | 0);
  _fonsSetSize($20, $19 * 18.0);
  _fonsSetColor($20, _sfons_rgba(-1, -1, -1, -1) | 0);
  _fonsSetBlur($20, 0.0);
  _fonsSetSpacing($20, 0.0);
  $mul38 = $19 * 10.0;
  __ZNSt3__29to_stringEl($ref$tmp19, HEAP32[546691] | 0);
  $call$i22 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp19, 0, 45669) | 0;
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$call$i22 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$call$i22 + 4 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 8 >> 2] = HEAP32[$call$i22 + 8 >> 2];
  $__i$0$i$i$i = 0;
  while (1) {
   if (($__i$0$i$i$i | 0) == 3) break;
   HEAP32[$call$i22 + ($__i$0$i$i$i << 2) >> 2] = 0;
   $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
  }
  +_fonsDrawText($20, $mul38, $19 * 20.0, (HEAP8[$agg$tmp25$byval_copy + 11 >> 0] | 0) < 0 ? HEAP32[$agg$tmp25$byval_copy >> 2] | 0 : $agg$tmp25$byval_copy, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp25$byval_copy);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp19);
  __ZNSt3__29to_stringEi($ref$tmp19, (HEAP32[3178] | 0) + 1 | 0);
  $call$i31 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp19, 0, 45675) | 0;
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$call$i31 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$call$i31 + 4 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 8 >> 2] = HEAP32[$call$i31 + 8 >> 2];
  $__i$0$i$i$i24 = 0;
  while (1) {
   if (($__i$0$i$i$i24 | 0) == 3) break;
   HEAP32[$call$i31 + ($__i$0$i$i$i24 << 2) >> 2] = 0;
   $__i$0$i$i$i24 = $__i$0$i$i$i24 + 1 | 0;
  }
  +_fonsDrawText($20, $mul38, $19 * 40.0, (HEAP8[$agg$tmp25$byval_copy + 11 >> 0] | 0) < 0 ? HEAP32[$agg$tmp25$byval_copy >> 2] | 0 : $agg$tmp25$byval_copy, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp25$byval_copy);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp19);
  __ZNSt3__29to_stringEi($ref$tmp19, (__ZNK6DrMesh10indexCountEv(HEAP32[546685] | 0) | 0) / 3 | 0);
  $call$i50 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp19, 0, 45685) | 0;
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$call$i50 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$call$i50 + 4 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 8 >> 2] = HEAP32[$call$i50 + 8 >> 2];
  $__i$0$i$i$i43 = 0;
  while (1) {
   if (($__i$0$i$i$i43 | 0) == 3) break;
   HEAP32[$call$i50 + ($__i$0$i$i$i43 << 2) >> 2] = 0;
   $__i$0$i$i$i43 = $__i$0$i$i$i43 + 1 | 0;
  }
  +_fonsDrawText($20, $mul38, $19 * 60.0, (HEAP8[$agg$tmp25$byval_copy + 11 >> 0] | 0) < 0 ? HEAP32[$agg$tmp25$byval_copy >> 2] | 0 : $agg$tmp25$byval_copy, 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp25$byval_copy);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp19);
 }
 _sfons_flush($20);
 _sgl_draw();
 _sg_end_pass();
 _sg_commit();
 HEAP32[546690] = (HEAP32[546690] | 0) + 1;
 $33 = 61832;
 $39 = _stm_since(HEAP32[$33 >> 2] | 0, HEAP32[$33 + 4 >> 2] | 0) | 0;
 if (+_stm_sec($39, getTempRet0() | 0) >= 1.0) {
  HEAP32[546691] = HEAP32[546690];
  $43 = _stm_now() | 0;
  $44 = getTempRet0() | 0;
  $45 = 61832;
  HEAP32[$45 >> 2] = $43;
  HEAP32[$45 + 4 >> 2] = $44;
  HEAP32[546690] = 0;
 }
 STACKTOP = sp;
 return;
}

function __sg_gl_create_image($img, $desc) {
 $img = $img | 0;
 $desc = $desc | 0;
 var $102 = 0, $159 = 0, $42 = 0, $96 = 0, $call35 = 0, $call61 = 0, $cmn37 = 0, $data_index = 0, $data_ptr = 0, $data_size = 0, $desc$addr = 0, $face_index = 0, $gl_depth_format = 0, $gl_format = 0, $gl_img_target = 0, $gl_internal_format = 0, $gl_mag_filter = 0, $gl_min_filter = 0, $gl_type = 0, $img$addr = 0, $is_compressed = 0, $max_aniso = 0, $mip_height = 0, $mip_index = 0, $mip_width = 0, $num_faces = 0, $retval = 0, $shr = 0, $shr188 = 0, $slot = 0, $slot97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $retval = sp + 80 | 0;
 $img$addr = sp + 76 | 0;
 $desc$addr = sp + 72 | 0;
 $gl_depth_format = sp + 68 | 0;
 $gl_internal_format = sp + 64 | 0;
 $slot = sp + 60 | 0;
 $gl_format = sp + 56 | 0;
 $is_compressed = sp + 84 | 0;
 $slot97 = sp + 52 | 0;
 $gl_min_filter = sp + 48 | 0;
 $gl_mag_filter = sp + 44 | 0;
 $max_aniso = sp + 40 | 0;
 $num_faces = sp + 36 | 0;
 $data_index = sp + 32 | 0;
 $face_index = sp + 28 | 0;
 $mip_index = sp + 24 | 0;
 $gl_img_target = sp + 20 | 0;
 $data_ptr = sp + 16 | 0;
 $data_size = sp + 12 | 0;
 $mip_width = sp + 8 | 0;
 $mip_height = sp + 4 | 0;
 $gl_type = sp;
 HEAP32[$img$addr >> 2] = $img;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!((HEAP32[$img$addr >> 2] | 0) != 0 & (HEAP32[$desc$addr >> 2] | 0) != 0)) ___assert_fail(36903, 21600, 5761, 36915);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5762, 36915);
 __sg_image_common_init((HEAP32[$img$addr >> 2] | 0) + 12 | 0, HEAP32[$desc$addr >> 2] | 0);
 HEAP8[(HEAP32[$img$addr >> 2] | 0) + 88 + 20 >> 0] = 0 != (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 848 >> 2] | 0) & 1;
 if (!(__sg_gl_supported_texture_format(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0)) {
  _puts(36935) | 0;
  HEAP32[$retval >> 2] = 3;
  $159 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $159 | 0;
 }
 if ((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0) == 3) if (!(HEAP8[2164380] & 1)) {
  _puts(36979) | 0;
  HEAP32[$retval >> 2] = 3;
  $159 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $159 | 0;
 }
 if ((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0) == 4) if (!(HEAP8[2164381] & 1)) {
  _puts(37020) | 0;
  HEAP32[$retval >> 2] = 3;
  $159 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $159 | 0;
 }
 $call35 = __sg_is_valid_rendertarget_depth_format(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
 $cmn37 = (HEAP32[$img$addr >> 2] | 0) + 12 | 0;
 L21 : do if ($call35) {
  if ((HEAP32[$cmn37 + 24 >> 2] | 0) != 1) ___assert_fail(37064, 21600, 5790, 36915);
  if ((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 68 >> 2] | 0) != 1) ___assert_fail(37064, 21600, 5790, 36915);
  if (HEAP8[(HEAP32[$img$addr >> 2] | 0) + 88 + 20 >> 0] & 1) ___assert_fail(37132, 21600, 5791, 36915); else {
   _glGenRenderbuffers(1, (HEAP32[$img$addr >> 2] | 0) + 88 + 4 | 0);
   _glBindRenderbuffer(36161, HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 + 4 >> 2] | 0);
   HEAP32[$gl_depth_format >> 2] = __sg_gl_depth_attachment_format(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
   _glRenderbufferStorage(36161, HEAP32[$gl_depth_format >> 2] | 0, HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 8 >> 2] | 0, HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 12 >> 2] | 0);
   break;
  }
 } else {
  $call61 = __sg_gl_texture_target(HEAP32[$cmn37 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] = $call61;
  HEAP32[$gl_internal_format >> 2] = __sg_gl_teximage_internal_format(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
  if (HEAP8[(HEAP32[$img$addr >> 2] | 0) + 88 + 20 >> 0] & 1) {
   HEAP32[$slot >> 2] = 0;
   while (1) {
    $42 = HEAP32[$desc$addr >> 2] | 0;
    if ((HEAP32[$slot >> 2] | 0) >= (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 68 >> 2] | 0)) break;
    if (!(HEAP32[$42 + 848 + (HEAP32[$slot >> 2] << 2) >> 2] | 0)) {
     label = 24;
     break;
    }
    HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 + 12 + (HEAP32[$slot >> 2] << 2) >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 848 + (HEAP32[$slot >> 2] << 2) >> 2];
    HEAP32[$slot >> 2] = (HEAP32[$slot >> 2] | 0) + 1;
   }
   if ((label | 0) == 24) ___assert_fail(37154, 21600, 5822, 36915);
   if (!(HEAP32[$42 + 856 >> 2] | 0)) break;
   HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 856 >> 2];
   break;
  }
  HEAP32[$gl_format >> 2] = __sg_gl_teximage_format(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
  HEAP8[$is_compressed >> 0] = (__sg_is_compressed_pixel_format(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0) & 1;
  HEAP32[$slot97 >> 2] = 0;
  while (1) {
   if ((HEAP32[$slot97 >> 2] | 0) >= (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 68 >> 2] | 0)) break L21;
   _glGenTextures(1, (HEAP32[$img$addr >> 2] | 0) + 88 + 12 + (HEAP32[$slot97 >> 2] << 2) | 0);
   if (!(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 + 12 + (HEAP32[$slot97 >> 2] << 2) >> 2] | 0)) break;
   __sg_gl_cache_store_texture_binding(0);
   __sg_gl_cache_bind_texture(0, HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] | 0, HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 + 12 + (HEAP32[$slot97 >> 2] << 2) >> 2] | 0);
   HEAP32[$gl_min_filter >> 2] = __sg_gl_filter(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 36 >> 2] | 0) | 0;
   HEAP32[$gl_mag_filter >> 2] = __sg_gl_filter(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 40 >> 2] | 0) | 0;
   _glTexParameteri(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] | 0, 10241, HEAP32[$gl_min_filter >> 2] | 0);
   _glTexParameteri(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] | 0, 10240, HEAP32[$gl_mag_filter >> 2] | 0);
   if (HEAP8[2165420] & 1) if ((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 60 >> 2] | 0) >>> 0 > 1) {
    HEAP32[$max_aniso >> 2] = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 60 >> 2];
    if ((HEAP32[$max_aniso >> 2] | 0) > (HEAP32[541356] | 0)) HEAP32[$max_aniso >> 2] = HEAP32[541356];
    _glTexParameteri(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] | 0, 34046, HEAP32[$max_aniso >> 2] | 0);
   }
   $96 = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] | 0;
   if ((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0) == 2) {
    _glTexParameteri($96 | 0, 10242, 33071);
    _glTexParameteri(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] | 0, 10243, 33071);
   } else {
    _glTexParameteri($96 | 0, 10242, __sg_gl_wrap(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 44 >> 2] | 0) | 0);
    $102 = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] | 0;
    _glTexParameteri($102 | 0, 10243, __sg_gl_wrap(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 48 >> 2] | 0) | 0);
   }
   HEAP32[$num_faces >> 2] = (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0) == 2 ? 6 : 1;
   HEAP32[$data_index >> 2] = 0;
   HEAP32[$face_index >> 2] = 0;
   while (1) {
    if ((HEAP32[$face_index >> 2] | 0) >= (HEAP32[$num_faces >> 2] | 0)) break;
    HEAP32[$mip_index >> 2] = 0;
    while (1) {
     if ((HEAP32[$mip_index >> 2] | 0) >= (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 20 >> 2] | 0)) break;
     HEAP32[$gl_img_target >> 2] = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2];
     if (2 == (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0)) HEAP32[$gl_img_target >> 2] = __sg_gl_cubeface_target(HEAP32[$face_index >> 2] | 0) | 0;
     HEAP32[$data_ptr >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 76 + (HEAP32[$face_index >> 2] << 7) + (HEAP32[$mip_index >> 2] << 3) >> 2];
     HEAP32[$data_size >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 76 + (HEAP32[$face_index >> 2] << 7) + (HEAP32[$mip_index >> 2] << 3) + 4 >> 2];
     $shr = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 8 >> 2] >> HEAP32[$mip_index >> 2];
     HEAP32[$mip_width >> 2] = $shr;
     HEAP32[$mip_width >> 2] = (HEAP32[$mip_width >> 2] | 0) == 0 ? 1 : $shr;
     $shr188 = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 12 >> 2] >> HEAP32[$mip_index >> 2];
     HEAP32[$mip_height >> 2] = $shr188;
     HEAP32[$mip_height >> 2] = (HEAP32[$mip_height >> 2] | 0) == 0 ? 1 : $shr188;
     if (1 == (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0)) label = 48; else if (2 == (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0)) label = 48;
     do if ((label | 0) == 48) {
      label = 0;
      if (HEAP8[$is_compressed >> 0] & 1) {
       _glCompressedTexImage2D(HEAP32[$gl_img_target >> 2] | 0, HEAP32[$mip_index >> 2] | 0, HEAP32[$gl_internal_format >> 2] | 0, HEAP32[$mip_width >> 2] | 0, HEAP32[$mip_height >> 2] | 0, 0, HEAP32[$data_size >> 2] | 0, HEAP32[$data_ptr >> 2] | 0);
       break;
      } else {
       HEAP32[$gl_type >> 2] = __sg_gl_teximage_type(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
       _glTexImage2D(HEAP32[$gl_img_target >> 2] | 0, HEAP32[$mip_index >> 2] | 0, HEAP32[$gl_internal_format >> 2] | 0, HEAP32[$mip_width >> 2] | 0, HEAP32[$mip_height >> 2] | 0, 0, HEAP32[$gl_format >> 2] | 0, HEAP32[$gl_type >> 2] | 0, HEAP32[$data_ptr >> 2] | 0);
       break;
      }
     } while (0);
     HEAP32[$mip_index >> 2] = (HEAP32[$mip_index >> 2] | 0) + 1;
     HEAP32[$data_index >> 2] = (HEAP32[$data_index >> 2] | 0) + 1;
    }
    HEAP32[$face_index >> 2] = (HEAP32[$face_index >> 2] | 0) + 1;
   }
   __sg_gl_cache_restore_texture_binding(0);
   HEAP32[$slot97 >> 2] = (HEAP32[$slot97 >> 2] | 0) + 1;
  }
  ___assert_fail(37178, 21600, 5835, 36915);
 } while (0);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5941, 36915);
 HEAP32[$retval >> 2] = 2;
 $159 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $159 | 0;
}

function _fons__getGlyph($stash, $font, $codepoint, $isize, $iblur) {
 $stash = $stash | 0;
 $font = $font | 0;
 $codepoint = $codepoint | 0;
 $isize = $isize | 0;
 $iblur = $iblur | 0;
 var $11 = 0, $206 = 0, $added = 0, $advance = 0, $bdst = 0, $call187 = 0, $call194 = 0, $call201 = 0, $call208 = 0, $codepoint$addr = 0, $dst = 0, $fallbackFont = 0, $fallbackIndex = 0, $font$addr = 0, $g = 0, $gh = 0, $glyph = 0, $gw = 0, $gx = 0, $gy = 0, $h = 0, $i = 0, $iblur$addr = 0, $isize$addr = 0, $lsb = 0, $pad = 0, $renderFont = 0, $retval = 0, $scale = 0, $size = 0, $stash$addr = 0, $x = 0, $x0 = 0, $x1 = 0, $y = 0, $y0 = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $retval = sp + 112 | 0;
 $stash$addr = sp + 108 | 0;
 $font$addr = sp + 104 | 0;
 $codepoint$addr = sp + 100 | 0;
 $isize$addr = sp + 118 | 0;
 $iblur$addr = sp + 116 | 0;
 $i = sp + 96 | 0;
 $g = sp + 92 | 0;
 $advance = sp + 88 | 0;
 $lsb = sp + 84 | 0;
 $x0 = sp + 80 | 0;
 $y0 = sp + 76 | 0;
 $x1 = sp + 72 | 0;
 $y1 = sp + 68 | 0;
 $gw = sp + 64 | 0;
 $gh = sp + 60 | 0;
 $gx = sp + 56 | 0;
 $gy = sp + 52 | 0;
 $x = sp + 48 | 0;
 $y = sp + 44 | 0;
 $scale = sp + 40 | 0;
 $glyph = sp + 36 | 0;
 $h = sp + 32 | 0;
 $size = sp + 28 | 0;
 $pad = sp + 24 | 0;
 $added = sp + 20 | 0;
 $bdst = sp + 16 | 0;
 $dst = sp + 12 | 0;
 $renderFont = sp + 8 | 0;
 $fallbackFont = sp + 4 | 0;
 $fallbackIndex = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$codepoint$addr >> 2] = $codepoint;
 HEAP16[$isize$addr >> 1] = $isize;
 HEAP16[$iblur$addr >> 1] = $iblur;
 HEAP32[$glyph >> 2] = 0;
 HEAPF32[$size >> 2] = +(HEAP16[$isize$addr >> 1] | 0) / 10.0;
 HEAP32[$renderFont >> 2] = HEAP32[$font$addr >> 2];
 if ((HEAP16[$isize$addr >> 1] | 0) < 2) {
  HEAP32[$retval >> 2] = 0;
  $206 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $206 | 0;
 }
 if ((HEAP16[$iblur$addr >> 1] | 0) > 20) HEAP16[$iblur$addr >> 1] = 20;
 HEAP32[$pad >> 2] = (HEAP16[$iblur$addr >> 1] | 0) + 2;
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20568 >> 2] = 0;
 HEAP32[$h >> 2] = (_fons__hashint(HEAP32[$codepoint$addr >> 2] | 0) | 0) & 255;
 HEAP32[$i >> 2] = HEAP32[(HEAP32[$font$addr >> 2] | 0) + 220 + (HEAP32[$h >> 2] << 2) >> 2];
 while (1) {
  $11 = HEAP32[$font$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) == -1) break;
  if ((HEAP32[(HEAP32[$11 + 208 >> 2] | 0) + (HEAP32[$i >> 2] << 5) >> 2] | 0) == (HEAP32[$codepoint$addr >> 2] | 0)) if ((HEAP16[(HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] | 0) + (HEAP32[$i >> 2] << 5) + 12 >> 1] | 0) == (HEAP16[$isize$addr >> 1] | 0)) if ((HEAP16[(HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] | 0) + (HEAP32[$i >> 2] << 5) + 14 >> 1] | 0) == (HEAP16[$iblur$addr >> 1] | 0)) {
   label = 10;
   break;
  }
  HEAP32[$i >> 2] = HEAP32[(HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] | 0) + (HEAP32[$i >> 2] << 5) + 8 >> 2];
 }
 if ((label | 0) == 10) {
  HEAP32[$retval >> 2] = (HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] | 0) + (HEAP32[$i >> 2] << 5);
  $206 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $206 | 0;
 }
 HEAP32[$g >> 2] = _fons__tt_getGlyphIndex($11, HEAP32[$codepoint$addr >> 2] | 0) | 0;
 L19 : do if (!(HEAP32[$g >> 2] | 0)) {
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$font$addr >> 2] | 0) + 1324 >> 2] | 0)) break L19;
   HEAP32[$fallbackFont >> 2] = HEAP32[(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] | 0) + (HEAP32[(HEAP32[$font$addr >> 2] | 0) + 1244 + (HEAP32[$i >> 2] << 2) >> 2] << 2) >> 2];
   HEAP32[$fallbackIndex >> 2] = _fons__tt_getGlyphIndex(HEAP32[$fallbackFont >> 2] | 0, HEAP32[$codepoint$addr >> 2] | 0) | 0;
   if (HEAP32[$fallbackIndex >> 2] | 0) break;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$g >> 2] = HEAP32[$fallbackIndex >> 2];
  HEAP32[$renderFont >> 2] = HEAP32[$fallbackFont >> 2];
 } while (0);
 HEAPF32[$scale >> 2] = +_fons__tt_getPixelHeightScale(HEAP32[$renderFont >> 2] | 0, +HEAPF32[$size >> 2]);
 _fons__tt_buildGlyphBitmap(HEAP32[$renderFont >> 2] | 0, HEAP32[$g >> 2] | 0, +HEAPF32[$size >> 2], +HEAPF32[$scale >> 2], $advance, $lsb, $x0, $y0, $x1, $y1) | 0;
 HEAP32[$gw >> 2] = (HEAP32[$x1 >> 2] | 0) - (HEAP32[$x0 >> 2] | 0) + (HEAP32[$pad >> 2] << 1);
 HEAP32[$gh >> 2] = (HEAP32[$y1 >> 2] | 0) - (HEAP32[$y0 >> 2] | 0) + (HEAP32[$pad >> 2] << 1);
 HEAP32[$added >> 2] = _fons__atlasAddRect(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 68 >> 2] | 0, HEAP32[$gw >> 2] | 0, HEAP32[$gh >> 2] | 0, $gx, $gy) | 0;
 if (!(HEAP32[$added >> 2] | 0)) if (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 21056 >> 2] | 0) {
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 21056 >> 2] & 3](HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 21060 >> 2] | 0, 1, 0);
  HEAP32[$added >> 2] = _fons__atlasAddRect(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 68 >> 2] | 0, HEAP32[$gw >> 2] | 0, HEAP32[$gh >> 2] | 0, $gx, $gy) | 0;
 }
 if (!(HEAP32[$added >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $206 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $206 | 0;
 }
 HEAP32[$glyph >> 2] = _fons__allocGlyph(HEAP32[$font$addr >> 2] | 0) | 0;
 HEAP32[HEAP32[$glyph >> 2] >> 2] = HEAP32[$codepoint$addr >> 2];
 HEAP16[(HEAP32[$glyph >> 2] | 0) + 12 >> 1] = HEAP16[$isize$addr >> 1] | 0;
 HEAP16[(HEAP32[$glyph >> 2] | 0) + 14 >> 1] = HEAP16[$iblur$addr >> 1] | 0;
 HEAP32[(HEAP32[$glyph >> 2] | 0) + 4 >> 2] = HEAP32[$g >> 2];
 HEAP16[(HEAP32[$glyph >> 2] | 0) + 16 >> 1] = HEAP32[$gx >> 2];
 HEAP16[(HEAP32[$glyph >> 2] | 0) + 18 >> 1] = HEAP32[$gy >> 2];
 HEAP16[(HEAP32[$glyph >> 2] | 0) + 20 >> 1] = (HEAP16[(HEAP32[$glyph >> 2] | 0) + 16 >> 1] | 0) + (HEAP32[$gw >> 2] | 0);
 HEAP16[(HEAP32[$glyph >> 2] | 0) + 22 >> 1] = (HEAP16[(HEAP32[$glyph >> 2] | 0) + 18 >> 1] | 0) + (HEAP32[$gh >> 2] | 0);
 HEAP16[(HEAP32[$glyph >> 2] | 0) + 24 >> 1] = ~~(+HEAPF32[$scale >> 2] * +(HEAP32[$advance >> 2] | 0) * 10.0);
 HEAP16[(HEAP32[$glyph >> 2] | 0) + 26 >> 1] = (HEAP32[$x0 >> 2] | 0) - (HEAP32[$pad >> 2] | 0);
 HEAP16[(HEAP32[$glyph >> 2] | 0) + 28 >> 1] = (HEAP32[$y0 >> 2] | 0) - (HEAP32[$pad >> 2] | 0);
 HEAP32[(HEAP32[$glyph >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$glyph >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$font$addr >> 2] | 0) + 220 + (HEAP32[$h >> 2] << 2) >> 2];
 HEAP32[(HEAP32[$font$addr >> 2] | 0) + 220 + (HEAP32[$h >> 2] << 2) >> 2] = (HEAP32[(HEAP32[$font$addr >> 2] | 0) + 216 >> 2] | 0) - 1;
 HEAP32[$dst >> 2] = (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 44 >> 2] | 0) + ((HEAP16[(HEAP32[$glyph >> 2] | 0) + 16 >> 1] | 0) + (HEAP32[$pad >> 2] | 0) + (Math_imul((HEAP16[(HEAP32[$glyph >> 2] | 0) + 18 >> 1] | 0) + (HEAP32[$pad >> 2] | 0) | 0, HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0) | 0));
 _fons__tt_renderGlyphBitmap(HEAP32[$renderFont >> 2] | 0, HEAP32[$dst >> 2] | 0, (HEAP32[$gw >> 2] | 0) - (HEAP32[$pad >> 2] << 1) | 0, (HEAP32[$gh >> 2] | 0) - (HEAP32[$pad >> 2] << 1) | 0, HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0, +HEAPF32[$scale >> 2], +HEAPF32[$scale >> 2], HEAP32[$g >> 2] | 0);
 HEAP32[$dst >> 2] = (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 44 >> 2] | 0) + ((HEAP16[(HEAP32[$glyph >> 2] | 0) + 16 >> 1] | 0) + (Math_imul(HEAP16[(HEAP32[$glyph >> 2] | 0) + 18 >> 1] | 0, HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0) | 0));
 HEAP32[$y >> 2] = 0;
 while (1) {
  if ((HEAP32[$y >> 2] | 0) >= (HEAP32[$gh >> 2] | 0)) break;
  HEAP8[(HEAP32[$dst >> 2] | 0) + (Math_imul(HEAP32[$y >> 2] | 0, HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0) | 0) >> 0] = 0;
  HEAP8[(HEAP32[$dst >> 2] | 0) + ((HEAP32[$gw >> 2] | 0) - 1 + (Math_imul(HEAP32[$y >> 2] | 0, HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0) | 0)) >> 0] = 0;
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 1;
 }
 HEAP32[$x >> 2] = 0;
 while (1) {
  if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$gw >> 2] | 0)) break;
  HEAP8[(HEAP32[$dst >> 2] | 0) + (HEAP32[$x >> 2] | 0) >> 0] = 0;
  HEAP8[(HEAP32[$dst >> 2] | 0) + ((HEAP32[$x >> 2] | 0) + (Math_imul((HEAP32[$gh >> 2] | 0) - 1 | 0, HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0) | 0)) >> 0] = 0;
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 if ((HEAP16[$iblur$addr >> 1] | 0) > 0) {
  HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20568 >> 2] = 0;
  HEAP32[$bdst >> 2] = (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 44 >> 2] | 0) + ((HEAP16[(HEAP32[$glyph >> 2] | 0) + 16 >> 1] | 0) + (Math_imul(HEAP16[(HEAP32[$glyph >> 2] | 0) + 18 >> 1] | 0, HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0) | 0));
  _fons__blur(HEAP32[$stash$addr >> 2] | 0, HEAP32[$bdst >> 2] | 0, HEAP32[$gw >> 2] | 0, HEAP32[$gh >> 2] | 0, HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0, HEAP16[$iblur$addr >> 1] | 0);
 }
 $call187 = _fons__mini(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 >> 2] | 0, HEAP16[(HEAP32[$glyph >> 2] | 0) + 16 >> 1] | 0) | 0;
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 >> 2] = $call187;
 $call194 = _fons__mini(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 4 >> 2] | 0, HEAP16[(HEAP32[$glyph >> 2] | 0) + 18 >> 1] | 0) | 0;
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 4 >> 2] = $call194;
 $call201 = _fons__maxi(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 8 >> 2] | 0, HEAP16[(HEAP32[$glyph >> 2] | 0) + 20 >> 1] | 0) | 0;
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 8 >> 2] = $call201;
 $call208 = _fons__maxi(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 12 >> 2] | 0, HEAP16[(HEAP32[$glyph >> 2] | 0) + 22 >> 1] | 0) | 0;
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 12 >> 2] = $call208;
 HEAP32[$retval >> 2] = HEAP32[$glyph >> 2];
 $206 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $206 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $5 = 0, $PushComponent = 0, $SoFar = 0, $State$addr = 0, $Subs136 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call119 = 0, $call125 = 0, $call131 = 0, $call2 = 0, $call52 = 0, $call93 = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0, $tobool12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp$byval_copy = sp + 32 | 0;
 $State$addr = sp + 20 | 0;
 $SoFar = sp + 24 | 0;
 $PushComponent = sp + 8 | 0;
 $agg$tmp = sp;
 HEAP32[$State$addr >> 2] = $State;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 78) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
  $tobool = ($State | 0) == 0;
  if (!$tobool) HEAP32[$State + 4 >> 2] = $call2;
  do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 79) | 0) {
   if (!$tobool) HEAP8[$State + 8 >> 0] = 2;
  } else {
   $tobool12 = ($State | 0) != 0;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 82) | 0) {
    if (!$tobool12) break;
    HEAP8[$State + 8 >> 0] = 1;
    break;
   } else {
    if (!$tobool12) break;
    HEAP8[$State + 8 >> 0] = 0;
    break;
   }
  } while (0);
  HEAP32[$SoFar >> 2] = 0;
  HEAP32[$PushComponent >> 2] = $this;
  HEAP32[$PushComponent + 4 >> 2] = $SoFar;
  HEAP32[$PushComponent + 8 >> 2] = $State$addr;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55325);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0) HEAP32[$SoFar >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this, 55643) | 0;
  $Subs136 = $this + 148 | 0;
  L19 : while (1) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
    label = 41;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 76) | 0;
   L22 : do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 77) | 0) {
    if (!(HEAP32[$SoFar >> 2] | 0)) {
     $retval$3 = 0;
     break L19;
    }
   } else {
    L25 : do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
    case 84:
     {
      if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0) | 0)) {
       $retval$3 = 0;
       break L19;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
      break L22;
      break;
     }
    case 73:
     {
      $call52 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, (HEAP32[$State$addr >> 2] | 0) != 0) | 0;
      HEAP32[$agg$tmp$byval_copy >> 2] = $call52;
      if (($call52 | 0) == 0 | (HEAP32[$SoFar >> 2] | 0) == 0) {
       label = 26;
       break L19;
      }
      HEAP32[$SoFar >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp$byval_copy) | 0;
      $5 = HEAP32[$State$addr >> 2] | 0;
      if ($5 | 0) HEAP8[$5 + 1 >> 0] = 1;
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
      break L22;
      break;
     }
    case 68:
     {
      switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24) {
      case 67:
       {
        label = 39;
        break L25;
        break;
       }
      case 84:
      case 116:
       break;
      default:
       break L25;
      }
      if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0) | 0)) {
       $retval$3 = 0;
       break L19;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
      break L22;
      break;
     }
    case 83:
     {
      if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 116) label = 39; else {
       $call93 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
       HEAP32[$agg$tmp$byval_copy >> 2] = $call93;
       if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, $call93) | 0)) {
        label = 44;
        break L19;
       }
       if ((HEAP32[$SoFar >> 2] | 0) != ($call93 | 0)) __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $agg$tmp$byval_copy);
       break L22;
      }
      break;
     }
    case 67:
     break;
    default:
     label = 39;
    } while (0);
    if ((label | 0) == 39) {
     label = 0;
     $call131 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
     if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($call131, HEAP32[$State$addr >> 2] | 0) | 0) | 0)) {
      $retval$3 = 0;
      break L19;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
     break;
    }
    if (!(HEAP32[$SoFar >> 2] | 0)) {
     $retval$3 = 0;
     break L19;
    }
    $call119 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    if (!(__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent, __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE($call119, $SoFar, HEAP32[$State$addr >> 2] | 0) | 0) | 0)) {
     $retval$3 = 0;
     break L19;
    }
    $call125 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($call119, HEAP32[$SoFar >> 2] | 0) | 0;
    HEAP32[$SoFar >> 2] = $call125;
    if (!$call125) {
     $retval$3 = 0;
     break L19;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136, $SoFar);
   } while (0);
  }
  if ((label | 0) == 26) $retval$3 = 0; else if ((label | 0) == 41) if (!(HEAP32[$SoFar >> 2] | 0)) $retval$3 = 0; else if (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($Subs136) | 0) $retval$3 = 0; else {
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv($Subs136);
   $retval$3 = HEAP32[$SoFar >> 2] | 0;
  } else if ((label | 0) == 44) $retval$3 = 0;
  $retval$4 = $retval$3;
 } else $retval$4 = 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function _stbi__pic_load_core($s, $width, $height, $comp, $result) {
 $s = $s | 0;
 $width = $width | 0;
 $height = $height | 0;
 $comp = $comp | 0;
 $result = $result | 0;
 var $106 = 0, $3 = 0, $72 = 0, $act_comp = 0, $call2 = 0, $call3 = 0, $call4 = 0, $chained = 0, $comp$addr = 0, $count = 0, $count94 = 0, $dest = 0, $height$addr = 0, $i = 0, $i97 = 0, $left = 0, $left89 = 0, $num_packets = 0, $packet = 0, $packet32 = 0, $packet_idx = 0, $packets = 0, $result$addr = 0, $retval = 0, $s$addr = 0, $tobool = 0, $tobool102 = 0, $tobool11 = 0, $tobool119 = 0, $tobool146 = 0, $tobool20 = 0, $tobool38 = 0, $tobool60 = 0, $value = 0, $value108 = 0, $width$addr = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $retval = sp + 108 | 0;
 $s$addr = sp + 104 | 0;
 $width$addr = sp + 100 | 0;
 $height$addr = sp + 96 | 0;
 $comp$addr = sp + 92 | 0;
 $result$addr = sp + 88 | 0;
 $act_comp = sp + 84 | 0;
 $num_packets = sp + 80 | 0;
 $y = sp + 76 | 0;
 $chained = sp + 72 | 0;
 $packets = sp;
 $packet = sp + 68 | 0;
 $packet_idx = sp + 64 | 0;
 $packet32 = sp + 60 | 0;
 $dest = sp + 56 | 0;
 $x = sp + 52 | 0;
 $left = sp + 48 | 0;
 $i = sp + 44 | 0;
 $count = sp + 120 | 0;
 $value = sp + 116 | 0;
 $left89 = sp + 40 | 0;
 $count94 = sp + 36 | 0;
 $i97 = sp + 32 | 0;
 $value108 = sp + 112 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$result$addr >> 2] = $result;
 HEAP32[$act_comp >> 2] = 0;
 HEAP32[$num_packets >> 2] = 0;
 while (1) {
  if ((HEAP32[$num_packets >> 2] | 0) == 10) {
   label = 3;
   break;
  }
  $3 = HEAP32[$num_packets >> 2] | 0;
  HEAP32[$num_packets >> 2] = $3 + 1;
  HEAP32[$packet >> 2] = $packets + ($3 * 3 | 0);
  HEAP32[$chained >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  $call2 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP8[HEAP32[$packet >> 2] >> 0] = $call2;
  $call3 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP8[(HEAP32[$packet >> 2] | 0) + 1 >> 0] = $call3;
  $call4 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP8[(HEAP32[$packet >> 2] | 0) + 2 >> 0] = $call4;
  HEAP32[$act_comp >> 2] = HEAP32[$act_comp >> 2] | (HEAPU8[(HEAP32[$packet >> 2] | 0) + 2 >> 0] | 0);
  if (_stbi__at_eof(HEAP32[$s$addr >> 2] | 0) | 0) {
   label = 5;
   break;
  }
  if ((HEAPU8[HEAP32[$packet >> 2] >> 0] | 0 | 0) != 8) {
   label = 7;
   break;
  }
  if (!(HEAP32[$chained >> 2] | 0)) {
   label = 9;
   break;
  }
 }
 if ((label | 0) == 3) {
  $tobool = (_stbi__err(47559) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $106 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 } else if ((label | 0) == 5) {
  $tobool11 = (_stbi__err(47858) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool11 ? 0 : 0;
  $106 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 } else if ((label | 0) == 7) {
  $tobool20 = (_stbi__err(47559) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool20 ? 0 : 0;
  $106 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 } else if ((label | 0) == 9) {
  HEAP32[HEAP32[$comp$addr >> 2] >> 2] = HEAP32[$act_comp >> 2] & 16 | 0 ? 4 : 3;
  HEAP32[$y >> 2] = 0;
  L10 : while (1) {
   if ((HEAP32[$y >> 2] | 0) >= (HEAP32[$height$addr >> 2] | 0)) {
    label = 57;
    break;
   }
   HEAP32[$packet_idx >> 2] = 0;
   while (1) {
    if ((HEAP32[$packet_idx >> 2] | 0) >= (HEAP32[$num_packets >> 2] | 0)) break;
    HEAP32[$packet32 >> 2] = $packets + ((HEAP32[$packet_idx >> 2] | 0) * 3 | 0);
    HEAP32[$dest >> 2] = (HEAP32[$result$addr >> 2] | 0) + ((Math_imul(HEAP32[$y >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0) << 2);
    L16 : do switch (HEAPU8[(HEAP32[$packet32 >> 2] | 0) + 1 >> 0] | 0 | 0) {
    case 0:
     {
      HEAP32[$x >> 2] = 0;
      while (1) {
       if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$width$addr >> 2] | 0)) break L16;
       if (!(_stbi__readval(HEAP32[$s$addr >> 2] | 0, HEAPU8[(HEAP32[$packet32 >> 2] | 0) + 2 >> 0] | 0, HEAP32[$dest >> 2] | 0) | 0)) {
        label = 18;
        break L10;
       }
       HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
       HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
      }
      break;
     }
    case 1:
     {
      HEAP32[$left >> 2] = HEAP32[$width$addr >> 2];
      while (1) {
       if ((HEAP32[$left >> 2] | 0) <= 0) break L16;
       HEAP8[$count >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
       if (_stbi__at_eof(HEAP32[$s$addr >> 2] | 0) | 0) {
        label = 23;
        break L10;
       }
       if ((HEAPU8[$count >> 0] | 0 | 0) > (HEAP32[$left >> 2] | 0)) HEAP8[$count >> 0] = HEAP32[$left >> 2];
       if (!(_stbi__readval(HEAP32[$s$addr >> 2] | 0, HEAPU8[(HEAP32[$packet32 >> 2] | 0) + 2 >> 0] | 0, $value) | 0)) {
        label = 27;
        break L10;
       }
       HEAP32[$i >> 2] = 0;
       while (1) {
        if ((HEAP32[$i >> 2] | 0) >= (HEAPU8[$count >> 0] | 0 | 0)) break;
        _stbi__copyval(HEAPU8[(HEAP32[$packet32 >> 2] | 0) + 2 >> 0] | 0, HEAP32[$dest >> 2] | 0, $value);
        HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
        HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
       }
       HEAP32[$left >> 2] = (HEAP32[$left >> 2] | 0) - (HEAPU8[$count >> 0] | 0);
      }
      break;
     }
    case 2:
     {
      HEAP32[$left89 >> 2] = HEAP32[$width$addr >> 2];
      while (1) {
       if ((HEAP32[$left89 >> 2] | 0) <= 0) break L16;
       HEAP32[$count94 >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
       if (_stbi__at_eof(HEAP32[$s$addr >> 2] | 0) | 0) {
        label = 35;
        break L10;
       }
       $72 = HEAP32[$count94 >> 2] | 0;
       L40 : do if ((HEAP32[$count94 >> 2] | 0) >= 128) {
        if (($72 | 0) == 128) HEAP32[$count94 >> 2] = _stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0; else HEAP32[$count94 >> 2] = (HEAP32[$count94 >> 2] | 0) - 127;
        if ((HEAP32[$count94 >> 2] | 0) > (HEAP32[$left89 >> 2] | 0)) {
         label = 41;
         break L10;
        }
        if (!(_stbi__readval(HEAP32[$s$addr >> 2] | 0, HEAPU8[(HEAP32[$packet32 >> 2] | 0) + 2 >> 0] | 0, $value108) | 0)) {
         label = 43;
         break L10;
        }
        HEAP32[$i97 >> 2] = 0;
        while (1) {
         if ((HEAP32[$i97 >> 2] | 0) >= (HEAP32[$count94 >> 2] | 0)) break L40;
         _stbi__copyval(HEAPU8[(HEAP32[$packet32 >> 2] | 0) + 2 >> 0] | 0, HEAP32[$dest >> 2] | 0, $value108);
         HEAP32[$i97 >> 2] = (HEAP32[$i97 >> 2] | 0) + 1;
         HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
        }
       } else {
        HEAP32[$count94 >> 2] = $72 + 1;
        if ((HEAP32[$count94 >> 2] | 0) > (HEAP32[$left89 >> 2] | 0)) {
         label = 48;
         break L10;
        }
        HEAP32[$i97 >> 2] = 0;
        while (1) {
         if ((HEAP32[$i97 >> 2] | 0) >= (HEAP32[$count94 >> 2] | 0)) break L40;
         if (!(_stbi__readval(HEAP32[$s$addr >> 2] | 0, HEAPU8[(HEAP32[$packet32 >> 2] | 0) + 2 >> 0] | 0, HEAP32[$dest >> 2] | 0) | 0)) {
          label = 52;
          break L10;
         }
         HEAP32[$i97 >> 2] = (HEAP32[$i97 >> 2] | 0) + 1;
         HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
        }
       } while (0);
       HEAP32[$left89 >> 2] = (HEAP32[$left89 >> 2] | 0) - (HEAP32[$count94 >> 2] | 0);
      }
      break;
     }
    default:
     {
      label = 14;
      break L10;
     }
    } while (0);
    HEAP32[$packet_idx >> 2] = (HEAP32[$packet_idx >> 2] | 0) + 1;
   }
   HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 1;
  }
  switch (label | 0) {
  case 14:
   {
    $tobool38 = (_stbi__err(47559) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool38 ? 0 : 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  case 18:
   {
    HEAP32[$retval >> 2] = 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  case 23:
   {
    $tobool60 = (_stbi__err(47858) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool60 ? 0 : 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  case 27:
   {
    HEAP32[$retval >> 2] = 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  case 35:
   {
    $tobool102 = (_stbi__err(47858) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool102 ? 0 : 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  case 41:
   {
    $tobool119 = (_stbi__err(47858) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool119 ? 0 : 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  case 43:
   {
    HEAP32[$retval >> 2] = 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  case 48:
   {
    $tobool146 = (_stbi__err(47858) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool146 ? 0 : 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  case 52:
   {
    HEAP32[$retval >> 2] = 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  case 57:
   {
    HEAP32[$retval >> 2] = HEAP32[$result$addr >> 2];
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  }
 }
 return 0;
}

function _stbi__convert_format16($data, $img_n, $req_comp, $x, $y) {
 $data = $data | 0;
 $img_n = $img_n | 0;
 $req_comp = $req_comp | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $14 = 0, $168 = 0, $36 = 0, $46 = 0, $65 = 0, $75 = 0, $call121 = 0, $call140 = 0, $call160 = 0, $call179 = 0, $data$addr = 0, $dest = 0, $good = 0, $i = 0, $img_n$addr = 0, $j = 0, $mul = 0, $mul10 = 0, $mul12 = 0, $req_comp$addr = 0, $retval = 0, $src = 0, $tobool = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 40 | 0;
 $data$addr = sp + 36 | 0;
 $img_n$addr = sp + 32 | 0;
 $req_comp$addr = sp + 28 | 0;
 $x$addr = sp + 24 | 0;
 $y$addr = sp + 20 | 0;
 $i = sp + 16 | 0;
 $j = sp + 12 | 0;
 $good = sp + 8 | 0;
 $src = sp + 4 | 0;
 $dest = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$img_n$addr >> 2] = $img_n;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 if ((HEAP32[$req_comp$addr >> 2] | 0) == (HEAP32[$img_n$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$data$addr >> 2];
  $168 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $168 | 0;
 }
 if (!((HEAP32[$req_comp$addr >> 2] | 0) >= 1 & (HEAP32[$req_comp$addr >> 2] | 0) <= 4)) ___assert_fail(47628, 47433, 1636, 47976);
 $mul = Math_imul(HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
 HEAP32[$good >> 2] = _stbi__malloc((Math_imul($mul, HEAP32[$y$addr >> 2] | 0) | 0) << 1) | 0;
 if (!(HEAP32[$good >> 2] | 0)) {
  _free(HEAP32[$data$addr >> 2] | 0);
  $tobool = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $168 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $168 | 0;
 }
 HEAP32[$j >> 2] = 0;
 L12 : while (1) {
  $14 = HEAP32[$data$addr >> 2] | 0;
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$y$addr >> 2] | 0)) break;
  $mul10 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
  HEAP32[$src >> 2] = $14 + ((Math_imul($mul10, HEAP32[$img_n$addr >> 2] | 0) | 0) << 1);
  $mul12 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
  HEAP32[$dest >> 2] = (HEAP32[$good >> 2] | 0) + ((Math_imul($mul12, HEAP32[$req_comp$addr >> 2] | 0) | 0) << 1);
  L15 : do switch ((HEAP32[$img_n$addr >> 2] << 3) + (HEAP32[$req_comp$addr >> 2] | 0) | 0) {
  case 10:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$dest >> 2] >> 1] = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 11:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $36 = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = $36;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = $36;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $36;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 6;
    }
    break;
   }
  case 12:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $46 = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = $46;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = $46;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $46;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 6 >> 1] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 8;
    }
    break;
   }
  case 17:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$dest >> 2] >> 1] = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 19:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $65 = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = $65;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = $65;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $65;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 6;
    }
    break;
   }
  case 20:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $75 = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = $75;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = $75;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $75;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 6 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 8;
    }
    break;
   }
  case 28:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$dest >> 2] >> 1] = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 4 >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 6 >> 1] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 6;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 8;
    }
    break;
   }
  case 25:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $call121 = _stbi__compute_y_16(HEAPU16[HEAP32[$src >> 2] >> 1] | 0, HEAPU16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0, HEAPU16[(HEAP32[$src >> 2] | 0) + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $call121;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 6;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 26:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $call140 = _stbi__compute_y_16(HEAPU16[HEAP32[$src >> 2] >> 1] | 0, HEAPU16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0, HEAPU16[(HEAP32[$src >> 2] | 0) + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $call140;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 6;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 33:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $call160 = _stbi__compute_y_16(HEAPU16[HEAP32[$src >> 2] >> 1] | 0, HEAPU16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0, HEAPU16[(HEAP32[$src >> 2] | 0) + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $call160;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 8;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 34:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $call179 = _stbi__compute_y_16(HEAPU16[HEAP32[$src >> 2] >> 1] | 0, HEAPU16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0, HEAPU16[(HEAP32[$src >> 2] | 0) + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $call179;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 6 >> 1] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 8;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 35:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$dest >> 2] >> 1] = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 4 >> 1] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 8;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 6;
    }
    break;
   }
  default:
   {
    label = 46;
    break L12;
   }
  } while (0);
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 if ((label | 0) == 46) ___assert_fail(47680, 47433, 1665, 47976);
 _free($14);
 HEAP32[$retval >> 2] = HEAP32[$good >> 2];
 $168 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $168 | 0;
}

function _stbi__convert_format($data, $img_n, $req_comp, $x, $y) {
 $data = $data | 0;
 $img_n = $img_n | 0;
 $req_comp = $req_comp | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $14 = 0, $168 = 0, $36 = 0, $46 = 0, $65 = 0, $75 = 0, $call118 = 0, $call137 = 0, $call157 = 0, $call176 = 0, $data$addr = 0, $dest = 0, $good = 0, $i = 0, $img_n$addr = 0, $j = 0, $mul = 0, $mul9 = 0, $req_comp$addr = 0, $retval = 0, $src = 0, $tobool = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 40 | 0;
 $data$addr = sp + 36 | 0;
 $img_n$addr = sp + 32 | 0;
 $req_comp$addr = sp + 28 | 0;
 $x$addr = sp + 24 | 0;
 $y$addr = sp + 20 | 0;
 $i = sp + 16 | 0;
 $j = sp + 12 | 0;
 $good = sp + 8 | 0;
 $src = sp + 4 | 0;
 $dest = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$img_n$addr >> 2] = $img_n;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 if ((HEAP32[$req_comp$addr >> 2] | 0) == (HEAP32[$img_n$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$data$addr >> 2];
  $168 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $168 | 0;
 }
 if (!((HEAP32[$req_comp$addr >> 2] | 0) >= 1 & (HEAP32[$req_comp$addr >> 2] | 0) <= 4)) ___assert_fail(47628, 47433, 1587, 47659);
 HEAP32[$good >> 2] = _stbi__malloc_mad3(HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, 0) | 0;
 if (!(HEAP32[$good >> 2] | 0)) {
  _free(HEAP32[$data$addr >> 2] | 0);
  $tobool = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $168 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $168 | 0;
 }
 HEAP32[$j >> 2] = 0;
 L12 : while (1) {
  $14 = HEAP32[$data$addr >> 2] | 0;
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$y$addr >> 2] | 0)) break;
  $mul = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
  HEAP32[$src >> 2] = $14 + (Math_imul($mul, HEAP32[$img_n$addr >> 2] | 0) | 0);
  $mul9 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
  HEAP32[$dest >> 2] = (HEAP32[$good >> 2] | 0) + (Math_imul($mul9, HEAP32[$req_comp$addr >> 2] | 0) | 0);
  L15 : do switch ((HEAP32[$img_n$addr >> 2] << 3) + (HEAP32[$req_comp$addr >> 2] | 0) | 0) {
  case 10:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$dest >> 2] >> 0] = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 1;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 11:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $36 = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = $36;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = $36;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $36;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 1;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 3;
    }
    break;
   }
  case 12:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $46 = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = $46;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = $46;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $46;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 1;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 17:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$dest >> 2] >> 0] = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 1;
    }
    break;
   }
  case 19:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $65 = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = $65;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = $65;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $65;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 3;
    }
    break;
   }
  case 20:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $75 = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = $75;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = $75;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $75;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 28:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$dest >> 2] >> 0] = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 2 >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 3;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 25:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $call118 = _stbi__compute_y(HEAPU8[HEAP32[$src >> 2] >> 0] | 0, HEAPU8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0, HEAPU8[(HEAP32[$src >> 2] | 0) + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $call118;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 3;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 1;
    }
    break;
   }
  case 26:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $call137 = _stbi__compute_y(HEAPU8[HEAP32[$src >> 2] >> 0] | 0, HEAPU8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0, HEAPU8[(HEAP32[$src >> 2] | 0) + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $call137;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 3;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 33:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $call157 = _stbi__compute_y(HEAPU8[HEAP32[$src >> 2] >> 0] | 0, HEAPU8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0, HEAPU8[(HEAP32[$src >> 2] | 0) + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $call157;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 1;
    }
    break;
   }
  case 34:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $call176 = _stbi__compute_y(HEAPU8[HEAP32[$src >> 2] >> 0] | 0, HEAPU8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0, HEAPU8[(HEAP32[$src >> 2] | 0) + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $call176;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 3 >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 35:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$dest >> 2] >> 0] = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 2 >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 3;
    }
    break;
   }
  default:
   {
    label = 46;
    break L12;
   }
  } while (0);
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 if ((label | 0) == 46) ___assert_fail(47680, 47433, 1616, 47659);
 _free($14);
 HEAP32[$retval >> 2] = HEAP32[$good >> 2];
 $168 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $168 | 0;
}

function __ZNSt3__26__sortIRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$1 = 0, $__first$addr$1$ph = 0, $__first$addr$1$ph$be = 0, $__first$addr$6 = 0, $__i$0 = 0, $__i$1 = 0, $__i$2 = 0, $__i$3 = 0, $__i$4 = 0, $__i$5 = 0, $__i$6 = 0, $__j$0 = 0, $__j$1 = 0, $__j$2 = 0, $__j$3 = 0, $__j$4 = 0, $__j$5 = 0, $__last$addr$1$ph = 0, $__last$addr$1$ph$be = 0, $__last$addr$6 = 0, $__m$0 = 0, $__m$2 = 0, $__n_swaps$0 = 0, $__n_swaps$3 = 0, $__n_swaps$4 = 0, $__n_swaps$5 = 0, $__n_swaps$6 = 0, $add$ptr114 = 0, $add$ptr21 = 0, $call113 = 0, $cleanup$dest$slot$2 = 0, $div22 = 0, $incdec$ptr = 0, $incdec$ptr18 = 0, $incdec$ptr37 = 0, $incdec$ptr60 = 0, $incdec$ptr80 = 0, $incdec$ptr88 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast$le = 0, $sub$ptr$lhs$cast126 = 0, $sub$ptr$sub = 0, label = 0;
 $__first$addr$1$ph = $__first;
 $__last$addr$1$ph = $__last;
 L1 : while (1) {
  $sub$ptr$lhs$cast = $__last$addr$1$ph;
  $incdec$ptr18 = $__last$addr$1$ph + -4 | 0;
  $sub$ptr$lhs$cast$le = $__last$addr$1$ph;
  $__first$addr$1 = $__first$addr$1$ph;
  L3 : while (1) {
   $sub$ptr$sub = $sub$ptr$lhs$cast - $__first$addr$1 | 0;
   $sub$ptr$div = $sub$ptr$sub >> 2;
   switch ($sub$ptr$div | 0) {
   case 1:
   case 0:
    {
     break L1;
     break;
    }
   case 2:
    {
     label = 4;
     break L1;
     break;
    }
   case 3:
    {
     label = 6;
     break L1;
     break;
    }
   case 4:
    {
     label = 7;
     break L1;
     break;
    }
   case 5:
    {
     label = 8;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($sub$ptr$sub | 0) < 124) {
    label = 10;
    break L1;
   }
   $add$ptr21 = $__first$addr$1 + ((($sub$ptr$div | 0) / 2 | 0) << 2) | 0;
   if (($sub$ptr$sub | 0) > 3996) {
    $div22 = ($sub$ptr$div | 0) / 4 | 0;
    $__n_swaps$0 = __ZNSt3__27__sort5IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_S5_T_($__first$addr$1, $__first$addr$1 + ($div22 << 2) | 0, $add$ptr21, $add$ptr21 + ($div22 << 2) | 0, $incdec$ptr18, $__comp) | 0;
   } else $__n_swaps$0 = __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($__first$addr$1, $add$ptr21, $incdec$ptr18, $__comp) | 0;
   $2 = HEAP32[$__first$addr$1 >> 2] | 0;
   $3 = HEAP32[$add$ptr21 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $2, $3) | 0) {
    $__j$3 = $incdec$ptr18;
    $__n_swaps$3 = $__n_swaps$0;
   } else {
    $__j$0 = $incdec$ptr18;
    do {
     $__j$0 = $__j$0 + -4 | 0;
     if (($__first$addr$1 | 0) == ($__j$0 | 0)) {
      label = 17;
      break L3;
     }
     $9 = HEAP32[$__j$0 >> 2] | 0;
    } while (!(__ZN13TPPLPartition12VertexSorterclEll($__comp, $9, $3) | 0));
    HEAP32[$__first$addr$1 >> 2] = $9;
    HEAP32[$__j$0 >> 2] = $2;
    $__j$3 = $__j$0;
    $__n_swaps$3 = $__n_swaps$0 + 1 | 0;
   }
   $incdec$ptr80 = $__first$addr$1 + 4 | 0;
   L18 : do if ($incdec$ptr80 >>> 0 < $__j$3 >>> 0) {
    $__i$4 = $incdec$ptr80;
    $__j$4 = $__j$3;
    $__m$0 = $add$ptr21;
    $__n_swaps$4 = $__n_swaps$3;
    while (1) {
     $10 = HEAP32[$__m$0 >> 2] | 0;
     $__i$5 = $__i$4;
     while (1) {
      $11 = HEAP32[$__i$5 >> 2] | 0;
      $incdec$ptr88 = $__i$5 + 4 | 0;
      if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $11, $10) | 0) $__i$5 = $incdec$ptr88; else break;
     }
     $__j$5 = $__j$4;
     do {
      $__j$5 = $__j$5 + -4 | 0;
      $12 = HEAP32[$__j$5 >> 2] | 0;
     } while (!(__ZN13TPPLPartition12VertexSorterclEll($__comp, $12, $10) | 0));
     if ($__i$5 >>> 0 > $__j$5 >>> 0) {
      $__i$6 = $__i$5;
      $__m$2 = $__m$0;
      $__n_swaps$5 = $__n_swaps$4;
      break L18;
     }
     HEAP32[$__i$5 >> 2] = $12;
     HEAP32[$__j$5 >> 2] = $11;
     $__i$4 = $incdec$ptr88;
     $__j$4 = $__j$5;
     $__m$0 = ($__m$0 | 0) == ($__i$5 | 0) ? $__j$5 : $__m$0;
     $__n_swaps$4 = $__n_swaps$4 + 1 | 0;
    }
   } else {
    $__i$6 = $incdec$ptr80;
    $__m$2 = $add$ptr21;
    $__n_swaps$5 = $__n_swaps$3;
   } while (0);
   if (($__i$6 | 0) == ($__m$2 | 0)) $__n_swaps$6 = $__n_swaps$5; else {
    $13 = HEAP32[$__m$2 >> 2] | 0;
    $14 = HEAP32[$__i$6 >> 2] | 0;
    if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $13, $14) | 0) {
     HEAP32[$__i$6 >> 2] = $13;
     HEAP32[$__m$2 >> 2] = $14;
     $__n_swaps$6 = $__n_swaps$5 + 1 | 0;
    } else $__n_swaps$6 = $__n_swaps$5;
   }
   if (!$__n_swaps$6) {
    $call113 = __ZNSt3__227__insertion_sort_incompleteIRN13TPPLPartition12VertexSorterEPlEEbT0_S5_T_($__first$addr$1, $__i$6, $__comp) | 0;
    $add$ptr114 = $__i$6 + 4 | 0;
    if (__ZNSt3__227__insertion_sort_incompleteIRN13TPPLPartition12VertexSorterEPlEEbT0_S5_T_($add$ptr114, $__last$addr$1$ph, $__comp) | 0) {
     label = 46;
     break;
    }
    if ($call113) {
     $__first$addr$6 = $add$ptr114;
     $__last$addr$6 = $__last$addr$1$ph;
     $cleanup$dest$slot$2 = 2;
     label = 51;
     break;
    }
   }
   $sub$ptr$lhs$cast126 = $__i$6;
   if (($sub$ptr$lhs$cast126 - $__first$addr$1 | 0) >= ($sub$ptr$lhs$cast$le - $sub$ptr$lhs$cast126 | 0)) {
    label = 50;
    break;
   }
   __ZNSt3__26__sortIRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($__first$addr$1, $__i$6, $__comp);
   $__first$addr$1 = $__i$6 + 4 | 0;
  }
  L39 : do if ((label | 0) == 17) {
   label = 0;
   $incdec$ptr37 = $__first$addr$1 + 4 | 0;
   $4 = HEAP32[$incdec$ptr18 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $2, $4) | 0) $__i$1 = $incdec$ptr37; else {
    $__i$0 = $incdec$ptr37;
    while (1) {
     if (($__i$0 | 0) == ($incdec$ptr18 | 0)) break L1;
     $5 = HEAP32[$__i$0 >> 2] | 0;
     if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $2, $5) | 0) break;
     $__i$0 = $__i$0 + 4 | 0;
    }
    HEAP32[$__i$0 >> 2] = $4;
    HEAP32[$incdec$ptr18 >> 2] = $5;
    $__i$1 = $__i$0 + 4 | 0;
   }
   if (($__i$1 | 0) == ($incdec$ptr18 | 0)) break L1;
   $__i$2 = $__i$1;
   $__j$1 = $incdec$ptr18;
   while (1) {
    $6 = HEAP32[$__first$addr$1 >> 2] | 0;
    $__i$3 = $__i$2;
    while (1) {
     $7 = HEAP32[$__i$3 >> 2] | 0;
     $incdec$ptr60 = $__i$3 + 4 | 0;
     if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $6, $7) | 0) break; else $__i$3 = $incdec$ptr60;
    }
    $__j$2 = $__j$1;
    do {
     $__j$2 = $__j$2 + -4 | 0;
     $8 = HEAP32[$__j$2 >> 2] | 0;
    } while (__ZN13TPPLPartition12VertexSorterclEll($__comp, $6, $8) | 0);
    if ($__i$3 >>> 0 >= $__j$2 >>> 0) {
     $__first$addr$6 = $__i$3;
     $__last$addr$6 = $__last$addr$1$ph;
     $cleanup$dest$slot$2 = 4;
     label = 51;
     break L39;
    }
    HEAP32[$__i$3 >> 2] = $8;
    HEAP32[$__j$2 >> 2] = $7;
    $__i$2 = $incdec$ptr60;
    $__j$1 = $__j$2;
   }
  } else if ((label | 0) == 46) {
   label = 0;
   $__first$addr$6 = $__first$addr$1;
   $__last$addr$6 = $call113 ? $__last$addr$1$ph : $__i$6;
   $cleanup$dest$slot$2 = $call113 ? 1 : 2;
   label = 51;
  } else if ((label | 0) == 50) {
   label = 0;
   __ZNSt3__26__sortIRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($__i$6 + 4 | 0, $__last$addr$1$ph, $__comp);
   $__first$addr$1$ph$be = $__first$addr$1;
   $__last$addr$1$ph$be = $__i$6;
  } while (0);
  if ((label | 0) == 51) {
   label = 0;
   switch ($cleanup$dest$slot$2 & 7) {
   case 2:
   case 4:
   case 0:
    {
     $__first$addr$1$ph$be = $__first$addr$6;
     $__last$addr$1$ph$be = $__last$addr$6;
     break;
    }
   default:
    break L1;
   }
  }
  $__first$addr$1$ph = $__first$addr$1$ph$be;
  $__last$addr$1$ph = $__last$addr$1$ph$be;
 }
 if ((label | 0) == 4) {
  $incdec$ptr = $__last$addr$1$ph + -4 | 0;
  $0 = HEAP32[$incdec$ptr >> 2] | 0;
  $1 = HEAP32[$__first$addr$1 >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $0, $1) | 0) {
   HEAP32[$__first$addr$1 >> 2] = $0;
   HEAP32[$incdec$ptr >> 2] = $1;
  }
 } else if ((label | 0) == 6) __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($__first$addr$1, $__first$addr$1 + 4 | 0, $__last$addr$1$ph + -4 | 0, $__comp) | 0; else if ((label | 0) == 7) __ZNSt3__27__sort4IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_T_($__first$addr$1, $__first$addr$1 + 4 | 0, $__first$addr$1 + 8 | 0, $__last$addr$1$ph + -4 | 0, $__comp) | 0; else if ((label | 0) == 8) __ZNSt3__27__sort5IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_S5_T_($__first$addr$1, $__first$addr$1 + 4 | 0, $__first$addr$1 + 8 | 0, $__first$addr$1 + 12 | 0, $__last$addr$1$ph + -4 | 0, $__comp) | 0; else if ((label | 0) == 10) __ZNSt3__218__insertion_sort_3IRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($__first$addr$1, $__last$addr$1$ph, $__comp);
 return;
}

function __sg_gl_create_shader($shd, $desc) {
 $shd = $shd | 0;
 $desc = $desc | 0;
 var $116 = 0, $125 = 0, $42 = 0, $85 = 0, $96 = 0, $call85 = 0, $call90 = 0, $cur_prog = 0, $cur_uniform_offset = 0, $desc$addr = 0, $gl_fs = 0, $gl_img = 0, $gl_loc149 = 0, $gl_prog = 0, $gl_stage = 0, $gl_stage130 = 0, $gl_tex_slot = 0, $gl_vs = 0, $i = 0, $img_desc = 0, $img_index = 0, $link_status = 0, $log_buf = 0, $log_len = 0, $retval = 0, $shd$addr = 0, $stage_desc = 0, $stage_desc121 = 0, $stage_index = 0, $stage_index116 = 0, $u = 0, $u_desc = 0, $u_index = 0, $ub = 0, $ub_desc = 0, $ub_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $retval = sp + 112 | 0;
 $shd$addr = sp + 108 | 0;
 $desc$addr = sp + 104 | 0;
 $i = sp + 100 | 0;
 $gl_vs = sp + 96 | 0;
 $gl_fs = sp + 92 | 0;
 $gl_prog = sp + 88 | 0;
 $link_status = sp + 84 | 0;
 $log_len = sp + 80 | 0;
 $log_buf = sp + 76 | 0;
 $stage_index = sp + 72 | 0;
 $stage_desc = sp + 68 | 0;
 $gl_stage = sp + 64 | 0;
 $ub_index = sp + 60 | 0;
 $ub_desc = sp + 56 | 0;
 $ub = sp + 52 | 0;
 $cur_uniform_offset = sp + 48 | 0;
 $u_index = sp + 44 | 0;
 $u_desc = sp + 40 | 0;
 $u = sp + 36 | 0;
 $cur_prog = sp + 32 | 0;
 $gl_tex_slot = sp + 28 | 0;
 $stage_index116 = sp + 24 | 0;
 $stage_desc121 = sp + 20 | 0;
 $gl_stage130 = sp + 16 | 0;
 $img_index = sp + 12 | 0;
 $img_desc = sp + 8 | 0;
 $gl_img = sp + 4 | 0;
 $gl_loc149 = sp;
 HEAP32[$shd$addr >> 2] = $shd;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!((HEAP32[$shd$addr >> 2] | 0) != 0 & (HEAP32[$desc$addr >> 2] | 0) != 0)) ___assert_fail(37712, 21600, 5991, 37724);
 if (HEAP32[(HEAP32[$shd$addr >> 2] | 0) + 252 >> 2] | 0) ___assert_fail(37745, 21600, 5992, 37724);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5993, 37724);
 __sg_shader_common_init((HEAP32[$shd$addr >> 2] | 0) + 12 | 0, HEAP32[$desc$addr >> 2] | 0);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  __sg_strcpy((HEAP32[$shd$addr >> 2] | 0) + 252 + 4 + (HEAP32[$i >> 2] << 4) | 0, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 12 | 0) >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$gl_vs >> 2] = __sg_gl_compile_shader(0, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 196 >> 2] | 0) | 0;
 HEAP32[$gl_fs >> 2] = __sg_gl_compile_shader(1, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 1144 >> 2] | 0) | 0;
 if (!((HEAP32[$gl_vs >> 2] | 0) != 0 & (HEAP32[$gl_fs >> 2] | 0) != 0)) {
  HEAP32[$retval >> 2] = 3;
  $125 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 }
 HEAP32[$gl_prog >> 2] = _glCreateProgram() | 0;
 _glAttachShader(HEAP32[$gl_prog >> 2] | 0, HEAP32[$gl_vs >> 2] | 0);
 _glAttachShader(HEAP32[$gl_prog >> 2] | 0, HEAP32[$gl_fs >> 2] | 0);
 _glLinkProgram(HEAP32[$gl_prog >> 2] | 0);
 _glDeleteShader(HEAP32[$gl_vs >> 2] | 0);
 _glDeleteShader(HEAP32[$gl_fs >> 2] | 0);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6013, 37724);
 _glGetProgramiv(HEAP32[$gl_prog >> 2] | 0, 35714, $link_status | 0);
 if (!(HEAP32[$link_status >> 2] | 0)) {
  HEAP32[$log_len >> 2] = 0;
  _glGetProgramiv(HEAP32[$gl_prog >> 2] | 0, 35716, $log_len | 0);
  do if ((HEAP32[$log_len >> 2] | 0) > 0) {
   HEAP32[$log_buf >> 2] = _malloc(HEAP32[$log_len >> 2] | 0) | 0;
   _glGetProgramInfoLog(HEAP32[$gl_prog >> 2] | 0, HEAP32[$log_len >> 2] | 0, $log_len | 0, HEAP32[$log_buf >> 2] | 0);
   if (HEAP32[$log_buf >> 2] | 0) {
    _puts(HEAP32[$log_buf >> 2] | 0) | 0;
    _free(HEAP32[$log_buf >> 2] | 0);
    break;
   } else ___assert_fail(37759, 21600, 6023, 37724);
  } while (0);
  _glDeleteProgram(HEAP32[$gl_prog >> 2] | 0);
  HEAP32[$retval >> 2] = 3;
  $125 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 }
 HEAP32[(HEAP32[$shd$addr >> 2] | 0) + 252 >> 2] = HEAP32[$gl_prog >> 2];
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6032, 37724);
 HEAP32[$stage_index >> 2] = 0;
 L34 : while (1) {
  if ((HEAP32[$stage_index >> 2] | 0) >= 2) {
   label = 41;
   break;
  }
  $42 = HEAP32[$desc$addr >> 2] | 0;
  HEAP32[$stage_desc >> 2] = (HEAP32[$stage_index >> 2] | 0) == 0 ? $42 + 196 | 0 : $42 + 1144 | 0;
  HEAP32[$gl_stage >> 2] = (HEAP32[$shd$addr >> 2] | 0) + 252 + 260 + ((HEAP32[$stage_index >> 2] | 0) * 832 | 0);
  HEAP32[$ub_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$ub_index >> 2] | 0) >= (HEAP32[(HEAP32[$shd$addr >> 2] | 0) + 12 + ((HEAP32[$stage_index >> 2] | 0) * 120 | 0) >> 2] | 0)) break;
   HEAP32[$ub_desc >> 2] = (HEAP32[$stage_desc >> 2] | 0) + 20 + ((HEAP32[$ub_index >> 2] | 0) * 196 | 0);
   if ((HEAP32[HEAP32[$ub_desc >> 2] >> 2] | 0) >>> 0 <= 0) {
    label = 27;
    break L34;
   }
   HEAP32[$ub >> 2] = (HEAP32[$gl_stage >> 2] | 0) + ((HEAP32[$ub_index >> 2] | 0) * 196 | 0);
   if (HEAP32[HEAP32[$ub >> 2] >> 2] | 0) {
    label = 29;
    break L34;
   }
   HEAP32[$cur_uniform_offset >> 2] = 0;
   HEAP32[$u_index >> 2] = 0;
   while (1) {
    if ((HEAP32[$u_index >> 2] | 0) >= 16) break;
    HEAP32[$u_desc >> 2] = (HEAP32[$ub_desc >> 2] | 0) + 4 + ((HEAP32[$u_index >> 2] | 0) * 12 | 0);
    if (!(HEAP32[(HEAP32[$u_desc >> 2] | 0) + 4 >> 2] | 0)) break;
    HEAP32[$u >> 2] = (HEAP32[$ub >> 2] | 0) + 4 + ((HEAP32[$u_index >> 2] | 0) * 12 | 0);
    HEAP32[(HEAP32[$u >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$u_desc >> 2] | 0) + 4 >> 2];
    HEAP8[(HEAP32[$u >> 2] | 0) + 8 >> 0] = HEAP32[(HEAP32[$u_desc >> 2] | 0) + 8 >> 2];
    HEAP16[(HEAP32[$u >> 2] | 0) + 10 >> 1] = HEAP32[$cur_uniform_offset >> 2];
    $call85 = __sg_uniform_size(HEAP32[(HEAP32[$u >> 2] | 0) + 4 >> 2] | 0, HEAPU8[(HEAP32[$u >> 2] | 0) + 8 >> 0] | 0) | 0;
    HEAP32[$cur_uniform_offset >> 2] = (HEAP32[$cur_uniform_offset >> 2] | 0) + $call85;
    if (HEAP32[HEAP32[$u_desc >> 2] >> 2] | 0) {
     $call90 = _glGetUniformLocation(HEAP32[$gl_prog >> 2] | 0, HEAP32[HEAP32[$u_desc >> 2] >> 2] | 0) | 0;
     HEAP32[HEAP32[$u >> 2] >> 2] = $call90;
    } else HEAP32[HEAP32[$u >> 2] >> 2] = HEAP32[$u_index >> 2];
    $85 = HEAP32[$ub >> 2] | 0;
    HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
    HEAP32[$u_index >> 2] = (HEAP32[$u_index >> 2] | 0) + 1;
   }
   if ((HEAP32[HEAP32[$ub_desc >> 2] >> 2] | 0) != (HEAP32[$cur_uniform_offset >> 2] | 0)) {
    label = 38;
    break L34;
   }
   HEAP32[$ub_index >> 2] = (HEAP32[$ub_index >> 2] | 0) + 1;
  }
  HEAP32[$stage_index >> 2] = (HEAP32[$stage_index >> 2] | 0) + 1;
 }
 if ((label | 0) == 27) ___assert_fail(37767, 21600, 6038, 37724); else if ((label | 0) == 29) ___assert_fail(37785, 21600, 6040, 37724); else if ((label | 0) == 38) ___assert_fail(37807, 21600, 6060, 37724); else if ((label | 0) == 41) {
  if (_glGetError() | 0) ___assert_fail(29811, 21600, 6065, 37724);
  HEAP32[$cur_prog >> 2] = 0;
  _glGetIntegerv(35725, $cur_prog | 0);
  _glUseProgram(HEAP32[$gl_prog >> 2] | 0);
  HEAP32[$gl_tex_slot >> 2] = 0;
  HEAP32[$stage_index116 >> 2] = 0;
  L58 : while (1) {
   if ((HEAP32[$stage_index116 >> 2] | 0) >= 2) break;
   $96 = HEAP32[$desc$addr >> 2] | 0;
   HEAP32[$stage_desc121 >> 2] = (HEAP32[$stage_index116 >> 2] | 0) == 0 ? $96 + 196 | 0 : $96 + 1144 | 0;
   HEAP32[$gl_stage130 >> 2] = (HEAP32[$shd$addr >> 2] | 0) + 252 + 260 + ((HEAP32[$stage_index116 >> 2] | 0) * 832 | 0);
   HEAP32[$img_index >> 2] = 0;
   while (1) {
    if ((HEAP32[$img_index >> 2] | 0) >= (HEAP32[(HEAP32[$shd$addr >> 2] | 0) + 12 + ((HEAP32[$stage_index116 >> 2] | 0) * 120 | 0) + 4 >> 2] | 0)) break;
    HEAP32[$img_desc >> 2] = (HEAP32[$stage_desc121 >> 2] | 0) + 804 + ((HEAP32[$img_index >> 2] | 0) * 12 | 0);
    if (!(HEAP32[(HEAP32[$img_desc >> 2] | 0) + 4 >> 2] | 0)) {
     label = 48;
     break L58;
    }
    HEAP32[$gl_img >> 2] = (HEAP32[$gl_stage130 >> 2] | 0) + 784 + (HEAP32[$img_index >> 2] << 2);
    HEAP32[$gl_loc149 >> 2] = HEAP32[$img_index >> 2];
    if (HEAP32[HEAP32[$img_desc >> 2] >> 2] | 0) HEAP32[$gl_loc149 >> 2] = _glGetUniformLocation(HEAP32[$gl_prog >> 2] | 0, HEAP32[HEAP32[$img_desc >> 2] >> 2] | 0) | 0;
    if ((HEAP32[$gl_loc149 >> 2] | 0) != -1) {
     $116 = HEAP32[$gl_tex_slot >> 2] | 0;
     HEAP32[$gl_tex_slot >> 2] = $116 + 1;
     HEAP32[HEAP32[$gl_img >> 2] >> 2] = $116;
     _glUniform1i(HEAP32[$gl_loc149 >> 2] | 0, HEAP32[HEAP32[$gl_img >> 2] >> 2] | 0);
    } else HEAP32[HEAP32[$gl_img >> 2] >> 2] = -1;
    HEAP32[$img_index >> 2] = (HEAP32[$img_index >> 2] | 0) + 1;
   }
   HEAP32[$stage_index116 >> 2] = (HEAP32[$stage_index116 >> 2] | 0) + 1;
  }
  if ((label | 0) == 48) ___assert_fail(37851, 21600, 6075, 37724);
  _glUseProgram(HEAP32[$cur_prog >> 2] | 0);
  if (_glGetError() | 0) ___assert_fail(29811, 21600, 6092, 37724);
  HEAP32[$retval >> 2] = 2;
  $125 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $125 | 0;
 }
 return 0;
}

function __ZN13TPPLPartition19TriangulateMonotoneEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE($this, $inPoly, $triangles) {
 $this = $this | 0;
 $inPoly = $inPoly | 0;
 $triangles = $triangles | 0;
 var $$sink = 0, $2 = 0, $21 = 0, $5 = 0, $add = 0, $add229 = 0, $add33 = 0, $add52 = 0, $arrayidx = 0, $arrayidx118 = 0, $arrayidx123 = 0, $arrayidx124 = 0, $arrayidx174 = 0, $arrayidx177 = 0, $arrayidx179 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx240 = 0, $arrayidx88 = 0, $bottomindex$0 = 0, $call11 = 0, $call114 = 0, $call17 = 0, $call2 = 0, $call4 = 0, $call46 = 0, $call49 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $inc76 = 0, $inc98 = 0, $j$0 = 0, $j$1 = 0, $leftindex$0 = 0, $leftindex$1 = 0, $retval$0 = 0, $retval$1 = 0, $rightindex$1 = 0, $rightindex$1$sink = 0, $rightindex$4 = 0, $stackptr$0 = 0, $stackptr$1 = 0, $stackptr$1$in = 0, $stackptr$3 = 0, $sub125 = 0, $sub226 = 0, $sub61 = 0, $topindex$0 = 0, $topindex$1 = 0, $triangle = 0, sp = 0, $i$1$looptemp = 0, $i$2$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $triangle = sp;
 if (__ZNK8TPPLPoly5ValidEv($inPoly) | 0) {
  __ZN8TPPLPolyC2Ev($triangle);
  $call2 = __ZNK8TPPLPoly12GetNumPointsEv($inPoly) | 0;
  $call4 = __ZN8TPPLPoly9GetPointsEv($inPoly) | 0;
  L3 : do if (($call2 | 0) == 3) {
   __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($triangles, $inPoly);
   $retval$0 = 1;
  } else {
   $bottomindex$0 = 0;
   $i$0 = 1;
   $topindex$0 = 0;
   while (1) {
    if (($i$0 | 0) >= ($call2 | 0)) break;
    $arrayidx = $call4 + ($i$0 * 24 | 0) | 0;
    $call11 = __ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $arrayidx, $call4 + ($bottomindex$0 * 24 | 0) | 0) | 0;
    $call17 = __ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $call4 + ($topindex$0 * 24 | 0) | 0, $arrayidx) | 0;
    $topindex$1 = $call17 ? $i$0 : $topindex$0;
    $bottomindex$0 = $call11 ? $i$0 : $bottomindex$0;
    $i$0 = $i$0 + 1 | 0;
    $topindex$0 = $topindex$1;
   }
   $i$1 = $topindex$0;
   while (1) {
    if (($i$1 | 0) == ($bottomindex$0 | 0)) break;
    $add = $i$1 + 1 | 0;
    $i$1$looptemp = $i$1;
    $i$1 = ($add | 0) < ($call2 | 0) ? $add : 0;
    if (!(__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $call4 + ($i$1 * 24 | 0) | 0, $call4 + ($i$1$looptemp * 24 | 0) | 0) | 0)) {
     $retval$0 = 0;
     break L3;
    }
   }
   $i$2 = $bottomindex$0;
   while (1) {
    if (($i$2 | 0) == ($topindex$0 | 0)) break;
    $add33 = $i$2 + 1 | 0;
    $i$2$looptemp = $i$2;
    $i$2 = ($add33 | 0) < ($call2 | 0) ? $add33 : 0;
    if (!(__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $call4 + ($i$2$looptemp * 24 | 0) | 0, $call4 + ($i$2 * 24 | 0) | 0) | 0)) {
     $retval$0 = 0;
     break L3;
    }
   }
   $call46 = __Znam(($call2 | 0) > -1 ? $call2 : -1) | 0;
   $2 = $call2 >>> 0 > 1073741823 ? -1 : $call2 << 2;
   $call49 = __Znam($2) | 0;
   HEAP32[$call49 >> 2] = $topindex$0;
   HEAP8[$call46 + $topindex$0 >> 0] = 0;
   $add52 = $topindex$0 + 1 | 0;
   $sub61 = $call2 + -1 | 0;
   $i$3 = 1;
   $leftindex$0 = ($add52 | 0) < ($call2 | 0) ? $add52 : 0;
   $rightindex$1 = (($topindex$0 | 0) < 1 ? $call2 : $topindex$0) + -1 | 0;
   while (1) {
    if (($i$3 | 0) >= ($sub61 | 0)) break;
    do if (($leftindex$0 | 0) == ($bottomindex$0 | 0)) {
     HEAP32[$call49 + ($i$3 << 2) >> 2] = $rightindex$1;
     $$sink = -1;
     $leftindex$1 = $bottomindex$0;
     $rightindex$1$sink = $rightindex$1;
     $rightindex$4 = ($rightindex$1 | 0) < 1 ? $sub61 : $rightindex$1 + -1 | 0;
    } else {
     if (($rightindex$1 | 0) == ($bottomindex$0 | 0)) {
      HEAP32[$call49 + ($i$3 << 2) >> 2] = $leftindex$0;
      $inc76 = $leftindex$0 + 1 | 0;
      $$sink = 1;
      $leftindex$1 = ($inc76 | 0) < ($call2 | 0) ? $inc76 : 0;
      $rightindex$1$sink = $leftindex$0;
      $rightindex$4 = $bottomindex$0;
      break;
     }
     $arrayidx88 = $call49 + ($i$3 << 2) | 0;
     if (__ZN13TPPLPartition5BelowER9TPPLPointS1_(0, $call4 + ($leftindex$0 * 24 | 0) | 0, $call4 + ($rightindex$1 * 24 | 0) | 0) | 0) {
      HEAP32[$arrayidx88 >> 2] = $rightindex$1;
      $$sink = -1;
      $leftindex$1 = $leftindex$0;
      $rightindex$1$sink = $rightindex$1;
      $rightindex$4 = ($rightindex$1 | 0) < 1 ? $sub61 : $rightindex$1 + -1 | 0;
      break;
     } else {
      HEAP32[$arrayidx88 >> 2] = $leftindex$0;
      $inc98 = $leftindex$0 + 1 | 0;
      $$sink = 1;
      $leftindex$1 = ($inc98 | 0) < ($call2 | 0) ? $inc98 : 0;
      $rightindex$1$sink = $leftindex$0;
      $rightindex$4 = $rightindex$1;
      break;
     }
    } while (0);
    HEAP8[$call46 + $rightindex$1$sink >> 0] = $$sink;
    $i$3 = $i$3 + 1 | 0;
    $leftindex$0 = $leftindex$1;
    $rightindex$1 = $rightindex$4;
   }
   HEAP32[$call49 + ($i$3 << 2) >> 2] = $bottomindex$0;
   HEAP8[$call46 + $bottomindex$0 >> 0] = 0;
   $call114 = __Znam($2) | 0;
   HEAP32[$call114 >> 2] = HEAP32[$call49 >> 2];
   $arrayidx118 = $call114 + 4 | 0;
   HEAP32[$arrayidx118 >> 2] = HEAP32[$call49 + 4 >> 2];
   $i$4 = 2;
   $stackptr$0 = 2;
   while (1) {
    $arrayidx123 = $call49 + ($i$4 << 2) | 0;
    $5 = HEAP32[$arrayidx123 >> 2] | 0;
    if (($i$4 | 0) >= ($sub61 | 0)) break;
    $arrayidx124 = $call46 + $5 | 0;
    $sub125 = $stackptr$0 + -1 | 0;
    $arrayidx174 = $call4 + ($5 * 24 | 0) | 0;
    if ((HEAP8[$arrayidx124 >> 0] | 0) == (HEAP8[$call46 + (HEAP32[$call114 + ($sub125 << 2) >> 2] | 0) >> 0] | 0)) {
     $stackptr$1$in = $stackptr$0;
     while (1) {
      $stackptr$1 = $stackptr$1$in + -1 | 0;
      if (($stackptr$1$in | 0) <= 1) break;
      if ((HEAP8[$arrayidx124 >> 0] | 0) == 1) {
       $arrayidx177 = $call4 + ((HEAP32[$call114 + ($stackptr$1$in + -2 << 2) >> 2] | 0) * 24 | 0) | 0;
       $arrayidx179 = $call4 + ((HEAP32[$call114 + ($stackptr$1 << 2) >> 2] | 0) * 24 | 0) | 0;
       if (!(__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $arrayidx174, $arrayidx177, $arrayidx179) | 0)) break;
       __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($triangle, $arrayidx174, $arrayidx177, $arrayidx179);
       __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($triangles, $triangle);
      } else {
       $arrayidx197 = $call4 + ((HEAP32[$call114 + ($stackptr$1 << 2) >> 2] | 0) * 24 | 0) | 0;
       $arrayidx200 = $call4 + ((HEAP32[$call114 + ($stackptr$1$in + -2 << 2) >> 2] | 0) * 24 | 0) | 0;
       if (!(__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $arrayidx174, $arrayidx197, $arrayidx200) | 0)) break;
       __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($triangle, $arrayidx174, $arrayidx197, $arrayidx200);
       __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($triangles, $triangle);
      }
      $stackptr$1$in = $stackptr$1;
     }
     HEAP32[$call114 + ($stackptr$1$in << 2) >> 2] = $5;
     $stackptr$3 = $stackptr$1$in + 1 | 0;
    } else {
     $j$0 = 0;
     while (1) {
      if (($j$0 | 0) >= ($sub125 | 0)) break;
      if ((HEAP8[$arrayidx124 >> 0] | 0) == 1) __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($triangle, $call4 + ((HEAP32[$call114 + ($j$0 + 1 << 2) >> 2] | 0) * 24 | 0) | 0, $call4 + ((HEAP32[$call114 + ($j$0 << 2) >> 2] | 0) * 24 | 0) | 0, $arrayidx174); else __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($triangle, $call4 + ((HEAP32[$call114 + ($j$0 << 2) >> 2] | 0) * 24 | 0) | 0, $call4 + ((HEAP32[$call114 + ($j$0 + 1 << 2) >> 2] | 0) * 24 | 0) | 0, $arrayidx174);
      __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($triangles, $triangle);
      $j$0 = $j$0 + 1 | 0;
     }
     HEAP32[$call114 >> 2] = HEAP32[$call49 + ($i$4 + -1 << 2) >> 2];
     HEAP32[$arrayidx118 >> 2] = HEAP32[$arrayidx123 >> 2];
     $stackptr$3 = 2;
    }
    $i$4 = $i$4 + 1 | 0;
    $stackptr$0 = $stackptr$3;
   }
   $sub226 = $stackptr$0 + -1 | 0;
   $arrayidx240 = $call4 + ($5 * 24 | 0) | 0;
   $j$1 = 0;
   while (1) {
    if (($j$1 | 0) >= ($sub226 | 0)) break;
    $add229 = $j$1 + 1 | 0;
    $21 = HEAP32[$call114 + ($add229 << 2) >> 2] | 0;
    if ((HEAP8[$call46 + $21 >> 0] | 0) == 1) __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($triangle, $call4 + ((HEAP32[$call114 + ($j$1 << 2) >> 2] | 0) * 24 | 0) | 0, $call4 + ($21 * 24 | 0) | 0, $arrayidx240); else __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($triangle, $call4 + ($21 * 24 | 0) | 0, $call4 + ((HEAP32[$call114 + ($j$1 << 2) >> 2] | 0) * 24 | 0) | 0, $arrayidx240);
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($triangles, $triangle);
    $j$1 = $add229;
   }
   __ZdaPv($call49);
   __ZdaPv($call46);
   __ZdaPv($call114);
   $retval$0 = 1;
  } while (0);
  __ZN8TPPLPolyD2Ev($triangle);
  $retval$1 = $retval$0;
 } else $retval$1 = 0;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($this) {
 $this = $this | 0;
 var $CVQuals = 0, $ExceptionSpec = 0, $Names = 0, $Names53 = 0, $ReferenceQualifier = 0, $ReturnType = 0, $agg$tmp = 0, $agg$tmp18 = 0, $agg$tmp42 = 0, $agg$tmp5 = 0, $agg$tmp63 = 0, $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $call21 = 0, $call24 = 0, $call48 = 0, $call49 = 0, $call54 = 0, $call73 = 0, $call9 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $agg$tmp67$byval_copy = sp + 72 | 0;
 $CVQuals = sp + 40 | 0;
 $ExceptionSpec = sp + 24 | 0;
 $agg$tmp = sp + 64 | 0;
 $agg$tmp5 = sp + 56 | 0;
 $agg$tmp18 = sp + 48 | 0;
 $agg$tmp42 = sp + 32 | 0;
 $ReturnType = sp;
 $ReferenceQualifier = sp + 80 | 0;
 $agg$tmp63 = sp + 16 | 0;
 $agg$tmp67 = sp + 8 | 0;
 HEAP32[$CVQuals >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
 HEAP32[$ExceptionSpec >> 2] = 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56525);
 HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0) {
  HEAP32[$ExceptionSpec >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, 56528) | 0;
  label = 14;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5, 56537);
  HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
  HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0) {
   $call9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp67$byval_copy >> 2] = $call9;
   if (!$call9) {
    $retval$9 = 0;
    break;
   }
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
    HEAP32[$ExceptionSpec >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp67$byval_copy) | 0;
    label = 14;
    break;
   } else {
    $retval$9 = 0;
    break;
   }
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 56540);
  HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
  HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp18 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0) {
   $Names = $this + 8 | 0;
   $call21 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     label = 12;
     break;
    }
    $call24 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$agg$tmp67$byval_copy >> 2] = $call24;
    if (!$call24) {
     label = 13;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp67$byval_copy);
   }
   if ((label | 0) == 12) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp67$byval_copy, $this, $call21);
    HEAP32[$ExceptionSpec >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp67$byval_copy) | 0;
    label = 14;
    break;
   } else if ((label | 0) == 13) {
    $retval$9 = 0;
    break;
   }
  } else label = 14;
 } while (0);
 if ((label | 0) == 14) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42, 56543);
  HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp42 >> 2];
  HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp42 + 4 >> 2];
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0;
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 70) | 0) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 89) | 0;
   $call48 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48) | 0;
   HEAP32[$ReturnType >> 2] = $call49;
   if (!$call49) $retval$8 = 0; else {
    HEAP8[$ReferenceQualifier >> 0] = 0;
    $Names53 = $this + 8 | 0;
    $call54 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names53) | 0;
    while (1) {
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
      label = 27;
      break;
     }
     if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 118) | 0)) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63, 56546);
      HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp63 >> 2];
      HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp63 + 4 >> 2];
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0) {
       label = 21;
       break;
      }
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67, 56549);
      HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2];
      HEAP32[$agg$tmp67$byval_copy + 4 >> 2] = HEAP32[$agg$tmp67 + 4 >> 2];
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp67$byval_copy) | 0) {
       label = 23;
       break;
      }
      $call73 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48) | 0;
      HEAP32[$agg$tmp67$byval_copy >> 2] = $call73;
      if (!$call73) {
       label = 26;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names53, $agg$tmp67$byval_copy);
     }
    }
    if ((label | 0) == 21) {
     HEAP8[$ReferenceQualifier >> 0] = 1;
     label = 27;
    } else if ((label | 0) == 23) {
     HEAP8[$ReferenceQualifier >> 0] = 2;
     label = 27;
    } else if ((label | 0) == 26) $retval$7 = 0;
    if ((label | 0) == 27) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp67$byval_copy, $this, $call54);
     $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_($this, $ReturnType, $agg$tmp67$byval_copy, $CVQuals, $ReferenceQualifier, $ExceptionSpec) | 0;
    }
    $retval$8 = $retval$7;
   }
   $retval$9 = $retval$8;
  } else $retval$9 = 0;
 }
 STACKTOP = sp;
 return $retval$9 | 0;
}

function _stbi__process_marker($z, $m) {
 $z = $z | 0;
 $m = $m | 0;
 var $111 = 0, $20 = 0, $47 = 0, $L = 0, $call104 = 0, $call5 = 0, $cond = 0, $conv157 = 0, $conv186 = 0, $conv207 = 0, $conv69 = 0, $i = 0, $i150 = 0, $i179 = 0, $i49 = 0, $m$addr = 0, $n = 0, $ok = 0, $ok178 = 0, $p = 0, $q = 0, $q50 = 0, $retval = 0, $sixteen = 0, $sizes = 0, $t = 0, $tc = 0, $th = 0, $tobool = 0, $v = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $retval = sp + 136 | 0;
 $z$addr = sp + 132 | 0;
 $m$addr = sp + 128 | 0;
 $L = sp + 124 | 0;
 $q = sp + 120 | 0;
 $p = sp + 116 | 0;
 $sixteen = sp + 112 | 0;
 $t = sp + 108 | 0;
 $i = sp + 104 | 0;
 $v = sp + 100 | 0;
 $sizes = sp;
 $i49 = sp + 96 | 0;
 $n = sp + 92 | 0;
 $q50 = sp + 88 | 0;
 $tc = sp + 84 | 0;
 $th = sp + 80 | 0;
 $ok = sp + 76 | 0;
 $i150 = sp + 72 | 0;
 $ok178 = sp + 68 | 0;
 $i179 = sp + 64 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$m$addr >> 2] = $m;
 switch (HEAP32[$m$addr >> 2] | 0) {
 case 255:
  {
   HEAP32[$retval >> 2] = _stbi__err(49151) | 0;
   $111 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $111 | 0;
  }
 case 221:
  {
   if ((_stbi__get16be(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) != 4) {
    HEAP32[$retval >> 2] = _stbi__err(49167) | 0;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   } else {
    $call5 = _stbi__get16be(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0;
    HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18436 >> 2] = $call5;
    HEAP32[$retval >> 2] = 1;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   }
   break;
  }
 case 219:
  {
   HEAP32[$L >> 2] = (_stbi__get16be(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) - 2;
   while (1) {
    if ((HEAP32[$L >> 2] | 0) <= 0) {
     label = 19;
     break;
    }
    HEAP32[$q >> 2] = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
    HEAP32[$p >> 2] = HEAP32[$q >> 2] >> 4;
    HEAP32[$sixteen >> 2] = (HEAP32[$p >> 2] | 0) != 0 & 1;
    HEAP32[$t >> 2] = HEAP32[$q >> 2] & 15;
    if ((HEAP32[$p >> 2] | 0) != 0 & (HEAP32[$p >> 2] | 0) != 1) {
     label = 9;
     break;
    }
    if ((HEAP32[$t >> 2] | 0) > 3) {
     label = 11;
     break;
    }
    HEAP32[$i >> 2] = 0;
    while (1) {
     $tobool = (HEAP32[$sixteen >> 2] | 0) != 0;
     if ((HEAP32[$i >> 2] | 0) >= 64) break;
     $20 = HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0;
     if ($tobool) $cond = _stbi__get16be($20) | 0; else $cond = (_stbi__get8($20) | 0) & 255;
     HEAP16[(HEAP32[$z$addr >> 2] | 0) + 13444 + (HEAP32[$t >> 2] << 7) + ((HEAPU8[9680 + (HEAP32[$i >> 2] | 0) >> 0] | 0) << 1) >> 1] = $cond;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    HEAP32[$L >> 2] = (HEAP32[$L >> 2] | 0) - ($tobool ? 129 : 65);
   }
   if ((label | 0) == 9) {
    HEAP32[$retval >> 2] = _stbi__err(49179) | 0;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   } else if ((label | 0) == 11) {
    HEAP32[$retval >> 2] = _stbi__err(49192) | 0;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   } else if ((label | 0) == 19) {
    HEAP32[$retval >> 2] = (HEAP32[$L >> 2] | 0) == 0 & 1;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   }
   break;
  }
 case 196:
  {
   HEAP32[$L >> 2] = (_stbi__get16be(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) - 2;
   while (1) {
    if ((HEAP32[$L >> 2] | 0) <= 0) {
     label = 40;
     break;
    }
    HEAP32[$n >> 2] = 0;
    HEAP32[$q50 >> 2] = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
    HEAP32[$tc >> 2] = HEAP32[$q50 >> 2] >> 4;
    HEAP32[$th >> 2] = HEAP32[$q50 >> 2] & 15;
    if ((HEAP32[$tc >> 2] | 0) > 1 | (HEAP32[$th >> 2] | 0) > 3) {
     label = 23;
     break;
    }
    HEAP32[$i49 >> 2] = 0;
    while (1) {
     if ((HEAP32[$i49 >> 2] | 0) >= 16) break;
     $conv69 = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
     HEAP32[$sizes + (HEAP32[$i49 >> 2] << 2) >> 2] = $conv69;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + (HEAP32[$sizes + (HEAP32[$i49 >> 2] << 2) >> 2] | 0);
     HEAP32[$i49 >> 2] = (HEAP32[$i49 >> 2] | 0) + 1;
    }
    HEAP32[$L >> 2] = (HEAP32[$L >> 2] | 0) - 17;
    $47 = HEAP32[$z$addr >> 2] | 0;
    if (!(HEAP32[$tc >> 2] | 0)) {
     if (!(_stbi__build_huffman($47 + 4 + ((HEAP32[$th >> 2] | 0) * 1680 | 0) | 0, $sizes) | 0)) {
      label = 29;
      break;
     }
     HEAP32[$v >> 2] = (HEAP32[$z$addr >> 2] | 0) + 4 + ((HEAP32[$th >> 2] | 0) * 1680 | 0) + 1024;
    } else {
     if (!(_stbi__build_huffman($47 + 6724 + ((HEAP32[$th >> 2] | 0) * 1680 | 0) | 0, $sizes) | 0)) {
      label = 32;
      break;
     }
     HEAP32[$v >> 2] = (HEAP32[$z$addr >> 2] | 0) + 6724 + ((HEAP32[$th >> 2] | 0) * 1680 | 0) + 1024;
    }
    HEAP32[$i49 >> 2] = 0;
    while (1) {
     if ((HEAP32[$i49 >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
     $call104 = _stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0;
     HEAP8[(HEAP32[$v >> 2] | 0) + (HEAP32[$i49 >> 2] | 0) >> 0] = $call104;
     HEAP32[$i49 >> 2] = (HEAP32[$i49 >> 2] | 0) + 1;
    }
    if (HEAP32[$tc >> 2] | 0) _stbi__build_fast_ac((HEAP32[$z$addr >> 2] | 0) + 13956 + (HEAP32[$th >> 2] << 10) | 0, (HEAP32[$z$addr >> 2] | 0) + 6724 + ((HEAP32[$th >> 2] | 0) * 1680 | 0) | 0);
    HEAP32[$L >> 2] = (HEAP32[$L >> 2] | 0) - (HEAP32[$n >> 2] | 0);
   }
   if ((label | 0) == 23) {
    HEAP32[$retval >> 2] = _stbi__err(49206) | 0;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   } else if ((label | 0) == 29) {
    HEAP32[$retval >> 2] = 0;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   } else if ((label | 0) == 32) {
    HEAP32[$retval >> 2] = 0;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   } else if ((label | 0) == 40) {
    HEAP32[$retval >> 2] = (HEAP32[$L >> 2] | 0) == 0 & 1;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   }
   break;
  }
 default:
  {
   if (!((HEAP32[$m$addr >> 2] | 0) >= 224 & (HEAP32[$m$addr >> 2] | 0) <= 239 | (HEAP32[$m$addr >> 2] | 0) == 254)) {
    HEAP32[$retval >> 2] = _stbi__err(49256) | 0;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   }
   HEAP32[$L >> 2] = _stbi__get16be(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0;
   if ((HEAP32[$L >> 2] | 0) < 2) if ((HEAP32[$m$addr >> 2] | 0) == 254) {
    HEAP32[$retval >> 2] = _stbi__err(49221) | 0;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   } else {
    HEAP32[$retval >> 2] = _stbi__err(49233) | 0;
    $111 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   }
   HEAP32[$L >> 2] = (HEAP32[$L >> 2] | 0) - 2;
   if ((HEAP32[$m$addr >> 2] | 0) == 224 & (HEAP32[$L >> 2] | 0) >= 5) {
    HEAP32[$ok >> 2] = 1;
    HEAP32[$i150 >> 2] = 0;
    while (1) {
     if ((HEAP32[$i150 >> 2] | 0) >= 5) break;
     $conv157 = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
     if (($conv157 | 0) != (HEAPU8[49245 + (HEAP32[$i150 >> 2] | 0) >> 0] | 0 | 0)) HEAP32[$ok >> 2] = 0;
     HEAP32[$i150 >> 2] = (HEAP32[$i150 >> 2] | 0) + 1;
    }
    HEAP32[$L >> 2] = (HEAP32[$L >> 2] | 0) - 5;
    if (HEAP32[$ok >> 2] | 0) HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18404 >> 2] = 1;
   } else if ((HEAP32[$m$addr >> 2] | 0) == 238 & (HEAP32[$L >> 2] | 0) >= 12) {
    HEAP32[$ok178 >> 2] = 1;
    HEAP32[$i179 >> 2] = 0;
    while (1) {
     if ((HEAP32[$i179 >> 2] | 0) >= 6) break;
     $conv186 = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
     if (($conv186 | 0) != (HEAPU8[49250 + (HEAP32[$i179 >> 2] | 0) >> 0] | 0 | 0)) HEAP32[$ok178 >> 2] = 0;
     HEAP32[$i179 >> 2] = (HEAP32[$i179 >> 2] | 0) + 1;
    }
    HEAP32[$L >> 2] = (HEAP32[$L >> 2] | 0) - 6;
    if (HEAP32[$ok178 >> 2] | 0) {
     _stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0;
     _stbi__get16be(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0;
     _stbi__get16be(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0;
     $conv207 = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
     HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18408 >> 2] = $conv207;
     HEAP32[$L >> 2] = (HEAP32[$L >> 2] | 0) - 6;
    }
   }
   _stbi__skip(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0, HEAP32[$L >> 2] | 0);
   HEAP32[$retval >> 2] = 1;
   $111 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $111 | 0;
  }
 }
 return 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (setTempRet0($_0$1 | 0), $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = getTempRet0() | 0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}

function __ZNSt3__26__sortIR7comparePmEEvT0_S4_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $10 = 0, $16 = 0, $2 = 0, $20 = 0, $26 = 0, $30 = 0, $__first$addr$1 = 0, $__first$addr$1$ph = 0, $__first$addr$1$ph$be = 0, $__first$addr$6 = 0, $__i$0 = 0, $__i$1 = 0, $__i$2 = 0, $__i$3 = 0, $__i$4 = 0, $__i$5 = 0, $__i$6 = 0, $__j$0 = 0, $__j$1 = 0, $__j$2 = 0, $__j$3 = 0, $__j$4 = 0, $__j$5 = 0, $__last$addr$1$ph = 0, $__last$addr$1$ph$be = 0, $__last$addr$6 = 0, $__m$0 = 0, $__m$2 = 0, $__n_swaps$0 = 0, $__n_swaps$3 = 0, $__n_swaps$4 = 0, $__n_swaps$5 = 0, $__n_swaps$6 = 0, $add$ptr114 = 0, $add$ptr21 = 0, $call113 = 0, $cleanup$dest$slot$2 = 0, $div22 = 0, $incdec$ptr = 0, $incdec$ptr18 = 0, $incdec$ptr37 = 0, $incdec$ptr60 = 0, $incdec$ptr80 = 0, $incdec$ptr88 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast$le = 0, $sub$ptr$lhs$cast126 = 0, $sub$ptr$sub = 0, label = 0;
 $__first$addr$1$ph = $__first;
 $__last$addr$1$ph = $__last;
 L1 : while (1) {
  $sub$ptr$lhs$cast = $__last$addr$1$ph;
  $incdec$ptr18 = $__last$addr$1$ph + -4 | 0;
  $sub$ptr$lhs$cast$le = $__last$addr$1$ph;
  $__first$addr$1 = $__first$addr$1$ph;
  L3 : while (1) {
   $sub$ptr$sub = $sub$ptr$lhs$cast - $__first$addr$1 | 0;
   $sub$ptr$div = $sub$ptr$sub >> 2;
   switch ($sub$ptr$div | 0) {
   case 1:
   case 0:
    {
     break L1;
     break;
    }
   case 2:
    {
     label = 4;
     break L1;
     break;
    }
   case 3:
    {
     label = 6;
     break L1;
     break;
    }
   case 4:
    {
     label = 7;
     break L1;
     break;
    }
   case 5:
    {
     label = 8;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($sub$ptr$sub | 0) < 124) {
    label = 10;
    break L1;
   }
   $add$ptr21 = $__first$addr$1 + ((($sub$ptr$div | 0) / 2 | 0) << 2) | 0;
   if (($sub$ptr$sub | 0) > 3996) {
    $div22 = ($sub$ptr$div | 0) / 4 | 0;
    $__n_swaps$0 = __ZNSt3__27__sort5IR7comparePmEEjT0_S4_S4_S4_S4_T_($__first$addr$1, $__first$addr$1 + ($div22 << 2) | 0, $add$ptr21, $add$ptr21 + ($div22 << 2) | 0, $incdec$ptr18, $__comp) | 0;
   } else $__n_swaps$0 = __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($__first$addr$1, $add$ptr21, $incdec$ptr18, $__comp) | 0;
   if (__ZN7compareclEmm($__comp, HEAP32[$__first$addr$1 >> 2] | 0, HEAP32[$add$ptr21 >> 2] | 0) | 0) {
    $__j$3 = $incdec$ptr18;
    $__n_swaps$3 = $__n_swaps$0;
   } else {
    $__j$0 = $incdec$ptr18;
    do {
     $__j$0 = $__j$0 + -4 | 0;
     if (($__first$addr$1 | 0) == ($__j$0 | 0)) {
      label = 17;
      break L3;
     }
    } while (!(__ZN7compareclEmm($__comp, HEAP32[$__j$0 >> 2] | 0, HEAP32[$add$ptr21 >> 2] | 0) | 0));
    $20 = HEAP32[$__first$addr$1 >> 2] | 0;
    HEAP32[$__first$addr$1 >> 2] = HEAP32[$__j$0 >> 2];
    HEAP32[$__j$0 >> 2] = $20;
    $__j$3 = $__j$0;
    $__n_swaps$3 = $__n_swaps$0 + 1 | 0;
   }
   $incdec$ptr80 = $__first$addr$1 + 4 | 0;
   L18 : do if ($incdec$ptr80 >>> 0 < $__j$3 >>> 0) {
    $__i$4 = $incdec$ptr80;
    $__j$4 = $__j$3;
    $__m$0 = $add$ptr21;
    $__n_swaps$4 = $__n_swaps$3;
    while (1) {
     $__i$5 = $__i$4;
     while (1) {
      $incdec$ptr88 = $__i$5 + 4 | 0;
      if (__ZN7compareclEmm($__comp, HEAP32[$__i$5 >> 2] | 0, HEAP32[$__m$0 >> 2] | 0) | 0) $__i$5 = $incdec$ptr88; else break;
     }
     $__j$5 = $__j$4;
     do $__j$5 = $__j$5 + -4 | 0; while (!(__ZN7compareclEmm($__comp, HEAP32[$__j$5 >> 2] | 0, HEAP32[$__m$0 >> 2] | 0) | 0));
     if ($__i$5 >>> 0 > $__j$5 >>> 0) {
      $__i$6 = $__i$5;
      $__m$2 = $__m$0;
      $__n_swaps$5 = $__n_swaps$4;
      break L18;
     }
     $26 = HEAP32[$__i$5 >> 2] | 0;
     HEAP32[$__i$5 >> 2] = HEAP32[$__j$5 >> 2];
     HEAP32[$__j$5 >> 2] = $26;
     $__i$4 = $incdec$ptr88;
     $__j$4 = $__j$5;
     $__m$0 = ($__m$0 | 0) == ($__i$5 | 0) ? $__j$5 : $__m$0;
     $__n_swaps$4 = $__n_swaps$4 + 1 | 0;
    }
   } else {
    $__i$6 = $incdec$ptr80;
    $__m$2 = $add$ptr21;
    $__n_swaps$5 = $__n_swaps$3;
   } while (0);
   if (($__i$6 | 0) == ($__m$2 | 0)) $__n_swaps$6 = $__n_swaps$5; else if (__ZN7compareclEmm($__comp, HEAP32[$__m$2 >> 2] | 0, HEAP32[$__i$6 >> 2] | 0) | 0) {
    $30 = HEAP32[$__i$6 >> 2] | 0;
    HEAP32[$__i$6 >> 2] = HEAP32[$__m$2 >> 2];
    HEAP32[$__m$2 >> 2] = $30;
    $__n_swaps$6 = $__n_swaps$5 + 1 | 0;
   } else $__n_swaps$6 = $__n_swaps$5;
   if (!$__n_swaps$6) {
    $call113 = __ZNSt3__227__insertion_sort_incompleteIR7comparePmEEbT0_S4_T_($__first$addr$1, $__i$6, $__comp) | 0;
    $add$ptr114 = $__i$6 + 4 | 0;
    if (__ZNSt3__227__insertion_sort_incompleteIR7comparePmEEbT0_S4_T_($add$ptr114, $__last$addr$1$ph, $__comp) | 0) {
     label = 46;
     break;
    }
    if ($call113) {
     $__first$addr$6 = $add$ptr114;
     $__last$addr$6 = $__last$addr$1$ph;
     $cleanup$dest$slot$2 = 2;
     label = 51;
     break;
    }
   }
   $sub$ptr$lhs$cast126 = $__i$6;
   if (($sub$ptr$lhs$cast126 - $__first$addr$1 | 0) >= ($sub$ptr$lhs$cast$le - $sub$ptr$lhs$cast126 | 0)) {
    label = 50;
    break;
   }
   __ZNSt3__26__sortIR7comparePmEEvT0_S4_T_($__first$addr$1, $__i$6, $__comp);
   $__first$addr$1 = $__i$6 + 4 | 0;
  }
  L39 : do if ((label | 0) == 17) {
   label = 0;
   $incdec$ptr37 = $__first$addr$1 + 4 | 0;
   if (__ZN7compareclEmm($__comp, HEAP32[$__first$addr$1 >> 2] | 0, HEAP32[$incdec$ptr18 >> 2] | 0) | 0) $__i$1 = $incdec$ptr37; else {
    $__i$0 = $incdec$ptr37;
    while (1) {
     if (($__i$0 | 0) == ($incdec$ptr18 | 0)) break L1;
     if (__ZN7compareclEmm($__comp, HEAP32[$__first$addr$1 >> 2] | 0, HEAP32[$__i$0 >> 2] | 0) | 0) break;
     $__i$0 = $__i$0 + 4 | 0;
    }
    $10 = HEAP32[$__i$0 >> 2] | 0;
    HEAP32[$__i$0 >> 2] = HEAP32[$incdec$ptr18 >> 2];
    HEAP32[$incdec$ptr18 >> 2] = $10;
    $__i$1 = $__i$0 + 4 | 0;
   }
   if (($__i$1 | 0) == ($incdec$ptr18 | 0)) break L1;
   $__i$2 = $__i$1;
   $__j$1 = $incdec$ptr18;
   while (1) {
    $__i$3 = $__i$2;
    while (1) {
     $incdec$ptr60 = $__i$3 + 4 | 0;
     if (__ZN7compareclEmm($__comp, HEAP32[$__first$addr$1 >> 2] | 0, HEAP32[$__i$3 >> 2] | 0) | 0) break; else $__i$3 = $incdec$ptr60;
    }
    $__j$2 = $__j$1;
    do $__j$2 = $__j$2 + -4 | 0; while (__ZN7compareclEmm($__comp, HEAP32[$__first$addr$1 >> 2] | 0, HEAP32[$__j$2 >> 2] | 0) | 0);
    if ($__i$3 >>> 0 >= $__j$2 >>> 0) {
     $__first$addr$6 = $__i$3;
     $__last$addr$6 = $__last$addr$1$ph;
     $cleanup$dest$slot$2 = 4;
     label = 51;
     break L39;
    }
    $16 = HEAP32[$__i$3 >> 2] | 0;
    HEAP32[$__i$3 >> 2] = HEAP32[$__j$2 >> 2];
    HEAP32[$__j$2 >> 2] = $16;
    $__i$2 = $incdec$ptr60;
    $__j$1 = $__j$2;
   }
  } else if ((label | 0) == 46) {
   label = 0;
   $__first$addr$6 = $__first$addr$1;
   $__last$addr$6 = $call113 ? $__last$addr$1$ph : $__i$6;
   $cleanup$dest$slot$2 = $call113 ? 1 : 2;
   label = 51;
  } else if ((label | 0) == 50) {
   label = 0;
   __ZNSt3__26__sortIR7comparePmEEvT0_S4_T_($__i$6 + 4 | 0, $__last$addr$1$ph, $__comp);
   $__first$addr$1$ph$be = $__first$addr$1;
   $__last$addr$1$ph$be = $__i$6;
  } while (0);
  if ((label | 0) == 51) {
   label = 0;
   switch ($cleanup$dest$slot$2 & 7) {
   case 2:
   case 4:
   case 0:
    {
     $__first$addr$1$ph$be = $__first$addr$6;
     $__last$addr$1$ph$be = $__last$addr$6;
     break;
    }
   default:
    break L1;
   }
  }
  $__first$addr$1$ph = $__first$addr$1$ph$be;
  $__last$addr$1$ph = $__last$addr$1$ph$be;
 }
 if ((label | 0) == 4) {
  $incdec$ptr = $__last$addr$1$ph + -4 | 0;
  if (__ZN7compareclEmm($__comp, HEAP32[$incdec$ptr >> 2] | 0, HEAP32[$__first$addr$1 >> 2] | 0) | 0) {
   $2 = HEAP32[$__first$addr$1 >> 2] | 0;
   HEAP32[$__first$addr$1 >> 2] = HEAP32[$incdec$ptr >> 2];
   HEAP32[$incdec$ptr >> 2] = $2;
  }
 } else if ((label | 0) == 6) __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($__first$addr$1, $__first$addr$1 + 4 | 0, $__last$addr$1$ph + -4 | 0, $__comp) | 0; else if ((label | 0) == 7) __ZNSt3__27__sort4IR7comparePmEEjT0_S4_S4_S4_T_($__first$addr$1, $__first$addr$1 + 4 | 0, $__first$addr$1 + 8 | 0, $__last$addr$1$ph + -4 | 0, $__comp) | 0; else if ((label | 0) == 8) __ZNSt3__27__sort5IR7comparePmEEjT0_S4_S4_S4_S4_T_($__first$addr$1, $__first$addr$1 + 4 | 0, $__first$addr$1 + 8 | 0, $__first$addr$1 + 12 | 0, $__last$addr$1$ph + -4 | 0, $__comp) | 0; else if ((label | 0) == 10) __ZNSt3__218__insertion_sort_3IR7comparePmEEvT0_S4_T_($__first$addr$1, $__last$addr$1$ph, $__comp);
 return;
}

function __Z32meshopt_optimizeVertexCacheTablePjPKjmmPKN7meshopt16VertexScoreTableE($destination, $indices, $index_count, $vertex_count, $table) {
 $destination = $destination | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $vertex_count = $vertex_count | 0;
 $table = $table | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $31 = 0, $4 = 0, $5 = 0, $add$ptr124 = 0, $add$ptr172 = 0, $add$ptr175 = 0, $add187 = 0.0, $adjacency = 0, $allocator = 0, $arrayidx109 = 0, $arrayidx110 = 0, $arrayidx112 = 0, $arrayidx126 = 0, $arrayidx132 = 0, $arrayidx165 = 0, $arrayidx186 = 0, $best_score$0 = 0.0, $best_score$1 = 0.0, $best_triangle$0 = 0, $best_triangle$1 = 0, $cache$0 = 0, $cache$0$phi = 0, $cache_count$0 = 0, $cache_holder = 0, $cache_new$0 = 0, $cache_write$0 = 0, $cache_write$1 = 0, $call = 0, $call15 = 0, $call164 = 0.0, $call19 = 0, $call22 = 0, $call30 = 0, $cmp193 = 0, $cond = 0, $current_triangle$0 = 0, $current_triangle$0$be = 0, $div = 0, $i$0 = 0, $i127$0 = 0, $i149$0 = 0, $i31$0 = 0, $i91$0 = 0, $inc82 = 0, $indices$addr$0 = 0, $input_cursor = 0, $it$0 = 0, $k$0 = 0, $mul36 = 0, $mul62 = 0, $mul73 = 0, $output_triangle$0 = 0, $sub166 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $allocator = sp + 168 | 0;
 $adjacency = sp + 156 | 0;
 $cache_holder = sp;
 $input_cursor = sp + 152 | 0;
 $div = ($index_count >>> 0) / 3 | 0;
 if ($index_count - ($div * 3 | 0) | 0) ___assert_fail(47099, 46674, 173, 46759);
 __ZN17meshopt_AllocatorC2Ev($allocator);
 do if (!(($index_count | 0) == 0 | ($vertex_count | 0) == 0)) {
  if (($destination | 0) == ($indices | 0)) {
   $call = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $index_count) | 0;
   _memcpy($call | 0, $destination | 0, $index_count << 2 | 0) | 0;
   $indices$addr$0 = $call;
  } else $indices$addr$0 = $indices;
  HEAP32[$adjacency >> 2] = 0;
  HEAP32[$adjacency + 4 >> 2] = 0;
  HEAP32[$adjacency + 8 >> 2] = 0;
  __ZN7meshoptL22buildTriangleAdjacencyERNS_17TriangleAdjacencyEPKjmmR17meshopt_Allocator($adjacency, $indices$addr$0, $index_count, $vertex_count, $allocator);
  $call15 = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $vertex_count) | 0;
  $2 = HEAP32[$adjacency >> 2] | 0;
  _memcpy($call15 | 0, $2 | 0, $vertex_count << 2 | 0) | 0;
  $call19 = __ZN17meshopt_Allocator8allocateIhEEPT_m($allocator, $div) | 0;
  _memset($call19 | 0, 0, $div | 0) | 0;
  $call22 = __ZN17meshopt_Allocator8allocateIfEEPT_m($allocator, $vertex_count) | 0;
  $i$0 = 0;
  while (1) {
   if ($i$0 >>> 0 >= $vertex_count >>> 0) break;
   HEAPF32[$call22 + ($i$0 << 2) >> 2] = +__ZN7meshoptL11vertexScoreEPKNS_16VertexScoreTableEij($table, -1, HEAP32[$call15 + ($i$0 << 2) >> 2] | 0);
   $i$0 = $i$0 + 1 | 0;
  }
  $call30 = __ZN17meshopt_Allocator8allocateIfEEPT_m($allocator, $div) | 0;
  $i31$0 = 0;
  while (1) {
   if ($i31$0 >>> 0 >= $div >>> 0) break;
   $mul36 = $i31$0 * 3 | 0;
   HEAPF32[$call30 + ($i31$0 << 2) >> 2] = +HEAPF32[$call22 + (HEAP32[$indices$addr$0 + ($mul36 << 2) >> 2] << 2) >> 2] + +HEAPF32[$call22 + (HEAP32[$indices$addr$0 + ($mul36 + 1 << 2) >> 2] << 2) >> 2] + +HEAPF32[$call22 + (HEAP32[$indices$addr$0 + ($mul36 + 2 << 2) >> 2] << 2) >> 2];
   $i31$0 = $i31$0 + 1 | 0;
  }
  HEAP32[$input_cursor >> 2] = 1;
  $4 = HEAP32[$adjacency + 8 >> 2] | 0;
  $5 = HEAP32[$adjacency + 4 >> 2] | 0;
  $cache$0 = $cache_holder;
  $cache_count$0 = 0;
  $cache_new$0 = $cache_holder + 76 | 0;
  $current_triangle$0 = 0;
  $output_triangle$0 = 0;
  L17 : while (1) {
   if (($current_triangle$0 | 0) == -1) {
    label = 41;
    break;
   }
   if ($output_triangle$0 >>> 0 >= $div >>> 0) {
    label = 15;
    break;
   }
   $mul62 = $current_triangle$0 * 3 | 0;
   $12 = HEAP32[$indices$addr$0 + ($mul62 << 2) >> 2] | 0;
   $13 = HEAP32[$indices$addr$0 + ($mul62 + 1 << 2) >> 2] | 0;
   $14 = HEAP32[$indices$addr$0 + ($mul62 + 2 << 2) >> 2] | 0;
   $mul73 = $output_triangle$0 * 3 | 0;
   HEAP32[$destination + ($mul73 << 2) >> 2] = $12;
   HEAP32[$destination + ($mul73 + 1 << 2) >> 2] = $13;
   HEAP32[$destination + ($mul73 + 2 << 2) >> 2] = $14;
   HEAP8[$call19 + $current_triangle$0 >> 0] = 1;
   HEAPF32[$call30 + ($current_triangle$0 << 2) >> 2] = 0.0;
   HEAP32[$cache_new$0 >> 2] = $12;
   HEAP32[$cache_new$0 + 4 >> 2] = $13;
   HEAP32[$cache_new$0 + 8 >> 2] = $14;
   $cache_write$0 = 3;
   $i91$0 = 0;
   while (1) {
    if (($i91$0 | 0) == ($cache_count$0 | 0)) break;
    $19 = HEAP32[$cache$0 + ($i91$0 << 2) >> 2] | 0;
    if (($19 | 0) == ($14 | 0) | (($19 | 0) == ($12 | 0) | ($19 | 0) == ($13 | 0))) $cache_write$1 = $cache_write$0; else {
     HEAP32[$cache_new$0 + ($cache_write$0 << 2) >> 2] = $19;
     $cache_write$1 = $cache_write$0 + 1 | 0;
    }
    $cache_write$0 = $cache_write$1;
    $i91$0 = $i91$0 + 1 | 0;
   }
   $15 = $cache_write$0 >>> 0 < 16;
   $arrayidx109 = $call15 + ($12 << 2) | 0;
   HEAP32[$arrayidx109 >> 2] = (HEAP32[$arrayidx109 >> 2] | 0) + -1;
   $arrayidx110 = $call15 + ($13 << 2) | 0;
   HEAP32[$arrayidx110 >> 2] = (HEAP32[$arrayidx110 >> 2] | 0) + -1;
   $arrayidx112 = $call15 + ($14 << 2) | 0;
   HEAP32[$arrayidx112 >> 2] = (HEAP32[$arrayidx112 >> 2] | 0) + -1;
   $k$0 = 0;
   while (1) {
    if (($k$0 | 0) == 3) break;
    $20 = HEAP32[$indices$addr$0 + ($k$0 + $mul62 << 2) >> 2] | 0;
    $add$ptr124 = $4 + (HEAP32[$5 + ($20 << 2) >> 2] << 2) | 0;
    $arrayidx126 = $2 + ($20 << 2) | 0;
    $22 = HEAP32[$arrayidx126 >> 2] | 0;
    $i127$0 = 0;
    while (1) {
     if ($i127$0 >>> 0 >= $22 >>> 0) break;
     $arrayidx132 = $add$ptr124 + ($i127$0 << 2) | 0;
     if ((HEAP32[$arrayidx132 >> 2] | 0) == ($current_triangle$0 | 0)) {
      label = 27;
      break;
     } else $i127$0 = $i127$0 + 1 | 0;
    }
    if ((label | 0) == 27) {
     label = 0;
     HEAP32[$arrayidx132 >> 2] = HEAP32[$add$ptr124 + ($22 + -1 << 2) >> 2];
     HEAP32[$arrayidx126 >> 2] = (HEAP32[$arrayidx126 >> 2] | 0) + -1;
    }
    $k$0 = $k$0 + 1 | 0;
   }
   $inc82 = $output_triangle$0 + 1 | 0;
   $cond = $15 ? $cache_write$0 : 16;
   $best_score$0 = 0.0;
   $best_triangle$0 = -1;
   $i149$0 = 0;
   while (1) {
    if ($i149$0 >>> 0 >= $cache_write$0 >>> 0) break;
    $26 = HEAP32[$cache_new$0 + ($i149$0 << 2) >> 2] | 0;
    $call164 = +__ZN7meshoptL11vertexScoreEPKNS_16VertexScoreTableEij($table, $i149$0 >>> 0 > 15 ? -1 : $i149$0, HEAP32[$call15 + ($26 << 2) >> 2] | 0);
    $arrayidx165 = $call22 + ($26 << 2) | 0;
    $sub166 = $call164 - +HEAPF32[$arrayidx165 >> 2];
    HEAPF32[$arrayidx165 >> 2] = $call164;
    $add$ptr172 = $4 + (HEAP32[$5 + ($26 << 2) >> 2] << 2) | 0;
    $add$ptr175 = $add$ptr172 + (HEAP32[$2 + ($26 << 2) >> 2] << 2) | 0;
    $best_score$1 = $best_score$0;
    $best_triangle$1 = $best_triangle$0;
    $it$0 = $add$ptr172;
    while (1) {
     if (($it$0 | 0) == ($add$ptr175 | 0)) break;
     $31 = HEAP32[$it$0 >> 2] | 0;
     if (HEAP8[$call19 + $31 >> 0] | 0) {
      label = 35;
      break L17;
     }
     $arrayidx186 = $call30 + ($31 << 2) | 0;
     $add187 = $sub166 + +HEAPF32[$arrayidx186 >> 2];
     if (!($add187 > 0.0)) {
      label = 37;
      break L17;
     }
     $cmp193 = $best_score$1 < $add187;
     HEAPF32[$arrayidx186 >> 2] = $add187;
     $best_score$1 = $cmp193 ? $add187 : $best_score$1;
     $best_triangle$1 = $cmp193 ? $31 : $best_triangle$1;
     $it$0 = $it$0 + 4 | 0;
    }
    $best_score$0 = $best_score$1;
    $best_triangle$0 = $best_triangle$1;
    $i149$0 = $i149$0 + 1 | 0;
   }
   if (($best_triangle$0 | 0) == -1) $current_triangle$0$be = __ZN7meshoptL22getNextTriangleDeadEndERjPKhm($input_cursor, $call19, $div) | 0; else $current_triangle$0$be = $best_triangle$0;
   $cache$0$phi = $cache_new$0;
   $cache_count$0 = $cond;
   $current_triangle$0 = $current_triangle$0$be;
   $output_triangle$0 = $inc82;
   $cache_new$0 = $cache$0;
   $cache$0 = $cache$0$phi;
  }
  if ((label | 0) == 15) ___assert_fail(46792, 46674, 236, 46759); else if ((label | 0) == 35) ___assert_fail(46821, 46674, 323, 46759); else if ((label | 0) == 37) ___assert_fail(46841, 46674, 326, 46759); else if ((label | 0) == 41) {
   if ((HEAP32[$input_cursor >> 2] | 0) != ($div | 0)) ___assert_fail(46855, 46674, 347, 46759);
   if (($output_triangle$0 | 0) == ($div | 0)) break; else ___assert_fail(46882, 46674, 348, 46759);
  }
 } while (0);
 __ZN17meshopt_AllocatorD2Ev($allocator);
 STACKTOP = sp;
 return;
}

function __sg_gl_apply_bindings($pip, $vbs, $vb_offsets, $num_vbs, $ib, $ib_offset, $vs_imgs, $num_vs_imgs, $fs_imgs, $num_fs_imgs) {
 $pip = $pip | 0;
 $vbs = $vbs | 0;
 $vb_offsets = $vb_offsets | 0;
 $num_vbs = $num_vbs | 0;
 $ib = $ib | 0;
 $ib_offset = $ib_offset | 0;
 $vs_imgs = $vs_imgs | 0;
 $num_vs_imgs = $num_vs_imgs | 0;
 $fs_imgs = $fs_imgs | 0;
 $num_fs_imgs = $num_fs_imgs | 0;
 var $124 = 0, $125 = 0, $attr = 0, $attr_index = 0, $cache_attr = 0, $cache_attr_dirty = 0, $cond66 = 0, $fs_imgs$addr = 0, $gl_ib = 0, $gl_shd_img = 0, $gl_stage = 0, $gl_tex = 0, $gl_vb = 0, $ib$addr = 0, $ib_offset$addr = 0, $img = 0, $img_index = 0, $imgs = 0, $num_fs_imgs$addr = 0, $num_vbs$addr = 0, $num_vs_imgs$addr = 0, $pip$addr = 0, $stage = 0, $stage_index = 0, $vb = 0, $vb_offset = 0, $vb_offsets$addr = 0, $vbs$addr = 0, $vs_imgs$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $pip$addr = sp + 96 | 0;
 $vbs$addr = sp + 92 | 0;
 $vb_offsets$addr = sp + 88 | 0;
 $num_vbs$addr = sp + 84 | 0;
 $ib$addr = sp + 80 | 0;
 $ib_offset$addr = sp + 76 | 0;
 $vs_imgs$addr = sp + 72 | 0;
 $num_vs_imgs$addr = sp + 68 | 0;
 $fs_imgs$addr = sp + 64 | 0;
 $num_fs_imgs$addr = sp + 60 | 0;
 $stage_index = sp + 56 | 0;
 $stage = sp + 52 | 0;
 $gl_stage = sp + 48 | 0;
 $imgs = sp + 44 | 0;
 $img_index = sp + 40 | 0;
 $gl_shd_img = sp + 36 | 0;
 $img = sp + 32 | 0;
 $gl_tex = sp + 28 | 0;
 $gl_ib = sp + 24 | 0;
 $attr_index = sp + 20 | 0;
 $attr = sp + 16 | 0;
 $cache_attr = sp + 12 | 0;
 $cache_attr_dirty = sp + 100 | 0;
 $vb_offset = sp + 8 | 0;
 $gl_vb = sp + 4 | 0;
 $vb = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 HEAP32[$vbs$addr >> 2] = $vbs;
 HEAP32[$vb_offsets$addr >> 2] = $vb_offsets;
 HEAP32[$num_vbs$addr >> 2] = $num_vbs;
 HEAP32[$ib$addr >> 2] = $ib;
 HEAP32[$ib_offset$addr >> 2] = $ib_offset;
 HEAP32[$vs_imgs$addr >> 2] = $vs_imgs;
 HEAP32[$num_vs_imgs$addr >> 2] = $num_vs_imgs;
 HEAP32[$fs_imgs$addr >> 2] = $fs_imgs;
 HEAP32[$num_fs_imgs$addr >> 2] = $num_fs_imgs;
 if (!(HEAP32[$pip$addr >> 2] | 0)) ___assert_fail(22631, 21600, 6782, 40220);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6786, 40220);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6789, 40220);
 HEAP32[$stage_index >> 2] = 0;
 L10 : while (1) {
  if ((HEAP32[$stage_index >> 2] | 0) >= 2) {
   label = 22;
   break;
  }
  HEAP32[$stage >> 2] = (HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] | 0) + 12 + ((HEAP32[$stage_index >> 2] | 0) * 120 | 0);
  HEAP32[$gl_stage >> 2] = (HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] | 0) + 252 + 260 + ((HEAP32[$stage_index >> 2] | 0) * 832 | 0);
  HEAP32[$imgs >> 2] = (HEAP32[$stage_index >> 2] | 0) == 0 ? HEAP32[$vs_imgs$addr >> 2] | 0 : HEAP32[$fs_imgs$addr >> 2] | 0;
  if ((((HEAP32[$stage_index >> 2] | 0) == 0 ? HEAP32[$num_vs_imgs$addr >> 2] | 0 : HEAP32[$num_fs_imgs$addr >> 2] | 0) | 0) != (HEAP32[(HEAP32[$stage >> 2] | 0) + 4 >> 2] | 0)) {
   label = 10;
   break;
  }
  HEAP32[$img_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$img_index >> 2] | 0) >= (HEAP32[(HEAP32[$stage >> 2] | 0) + 4 >> 2] | 0)) break;
   HEAP32[$gl_shd_img >> 2] = (HEAP32[$gl_stage >> 2] | 0) + 784 + (HEAP32[$img_index >> 2] << 2);
   if ((HEAP32[HEAP32[$gl_shd_img >> 2] >> 2] | 0) != -1) {
    HEAP32[$img >> 2] = HEAP32[(HEAP32[$imgs >> 2] | 0) + (HEAP32[$img_index >> 2] << 2) >> 2];
    HEAP32[$gl_tex >> 2] = HEAP32[(HEAP32[$img >> 2] | 0) + 88 + 12 + (HEAP32[(HEAP32[$img >> 2] | 0) + 12 + 72 >> 2] << 2) >> 2];
    if (!(HEAP32[$img >> 2] | 0)) {
     label = 16;
     break L10;
    }
    if (!(HEAP32[(HEAP32[$img >> 2] | 0) + 88 >> 2] | 0)) {
     label = 16;
     break L10;
    }
    if (!(HEAP32[$gl_tex >> 2] | 0 ? (HEAP32[HEAP32[$gl_shd_img >> 2] >> 2] | 0) != -1 : 0)) {
     label = 18;
     break L10;
    }
    __sg_gl_cache_bind_texture(HEAP32[HEAP32[$gl_shd_img >> 2] >> 2] | 0, HEAP32[(HEAP32[$img >> 2] | 0) + 88 >> 2] | 0, HEAP32[$gl_tex >> 2] | 0);
   }
   HEAP32[$img_index >> 2] = (HEAP32[$img_index >> 2] | 0) + 1;
  }
  HEAP32[$stage_index >> 2] = (HEAP32[$stage_index >> 2] | 0) + 1;
 }
 if ((label | 0) == 10) ___assert_fail(40242, 21600, 6794, 40220); else if ((label | 0) == 16) ___assert_fail(40327, 21600, 6800, 40220); else if ((label | 0) == 18) ___assert_fail(40349, 21600, 6801, 40220); else if ((label | 0) == 22) {
  if (_glGetError() | 0) ___assert_fail(29811, 21600, 6806, 40220);
  if (HEAP32[$ib$addr >> 2] | 0) $cond66 = HEAP32[(HEAP32[$ib$addr >> 2] | 0) + 48 + (HEAP32[(HEAP32[$ib$addr >> 2] | 0) + 12 + 32 >> 2] << 2) >> 2] | 0; else $cond66 = 0;
  HEAP32[$gl_ib >> 2] = $cond66;
  __sg_gl_cache_bind_buffer(34963, HEAP32[$gl_ib >> 2] | 0);
  HEAP32[541349] = HEAP32[$ib_offset$addr >> 2];
  HEAP32[$attr_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$attr_index >> 2] | 0) >>> 0 >= (HEAP32[541102] | 0) >>> 0) {
    label = 50;
    break;
   }
   HEAP32[$attr >> 2] = (HEAP32[$pip$addr >> 2] | 0) + 88 + (HEAP32[$attr_index >> 2] << 4);
   HEAP32[$cache_attr >> 2] = 2164952 + ((HEAP32[$attr_index >> 2] | 0) * 20 | 0);
   HEAP8[$cache_attr_dirty >> 0] = 0;
   HEAP32[$vb_offset >> 2] = 0;
   HEAP32[$gl_vb >> 2] = 0;
   if ((HEAP8[HEAP32[$attr >> 2] >> 0] | 0) >= 0) {
    if ((HEAP8[HEAP32[$attr >> 2] >> 0] | 0) >= (HEAP32[$num_vbs$addr >> 2] | 0)) {
     label = 30;
     break;
    }
    HEAP32[$vb >> 2] = HEAP32[(HEAP32[$vbs$addr >> 2] | 0) + (HEAP8[HEAP32[$attr >> 2] >> 0] << 2) >> 2];
    if (!(HEAP32[$vb >> 2] | 0)) {
     label = 32;
     break;
    }
    HEAP32[$gl_vb >> 2] = HEAP32[(HEAP32[$vb >> 2] | 0) + 48 + (HEAP32[(HEAP32[$vb >> 2] | 0) + 12 + 32 >> 2] << 2) >> 2];
    HEAP32[$vb_offset >> 2] = (HEAP32[(HEAP32[$vb_offsets$addr >> 2] | 0) + (HEAP8[HEAP32[$attr >> 2] >> 0] << 2) >> 2] | 0) + (HEAP32[(HEAP32[$attr >> 2] | 0) + 8 >> 2] | 0);
    if ((HEAP32[$gl_vb >> 2] | 0) != (HEAP32[(HEAP32[$cache_attr >> 2] | 0) + 16 >> 2] | 0)) label = 40; else if ((HEAPU8[(HEAP32[$attr >> 2] | 0) + 3 >> 0] | 0) != (HEAPU8[(HEAP32[$cache_attr >> 2] | 0) + 3 >> 0] | 0)) label = 40; else if ((HEAP32[(HEAP32[$attr >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[(HEAP32[$cache_attr >> 2] | 0) + 12 >> 2] | 0)) label = 40; else if ((HEAPU8[(HEAP32[$attr >> 2] | 0) + 4 >> 0] | 0) != (HEAPU8[(HEAP32[$cache_attr >> 2] | 0) + 4 >> 0] | 0)) label = 40; else if ((HEAPU8[(HEAP32[$attr >> 2] | 0) + 2 >> 0] | 0) != (HEAPU8[(HEAP32[$cache_attr >> 2] | 0) + 2 >> 0] | 0)) label = 40; else if ((HEAP32[$vb_offset >> 2] | 0) != (HEAP32[(HEAP32[$cache_attr >> 2] | 0) + 8 >> 2] | 0)) label = 40; else if ((HEAP8[(HEAP32[$cache_attr >> 2] | 0) + 1 >> 0] | 0) != (HEAP8[(HEAP32[$attr >> 2] | 0) + 1 >> 0] | 0)) label = 40;
    if ((label | 0) == 40) {
     label = 0;
     __sg_gl_cache_bind_buffer(34962, HEAP32[$gl_vb >> 2] | 0);
     _glVertexAttribPointer(HEAP32[$attr_index >> 2] | 0, HEAPU8[(HEAP32[$attr >> 2] | 0) + 3 >> 0] | 0, HEAP32[(HEAP32[$attr >> 2] | 0) + 12 >> 2] | 0, HEAP8[(HEAP32[$attr >> 2] | 0) + 4 >> 0] | 0, HEAPU8[(HEAP32[$attr >> 2] | 0) + 2 >> 0] | 0, HEAP32[$vb_offset >> 2] | 0);
     if (HEAP8[2164376] & 1) _glVertexAttribDivisorANGLE(HEAP32[$attr_index >> 2] | 0, HEAP8[(HEAP32[$attr >> 2] | 0) + 1 >> 0] | 0);
     HEAP8[$cache_attr_dirty >> 0] = 1;
    }
    if ((HEAP8[HEAP32[$cache_attr >> 2] >> 0] | 0) == -1) {
     _glEnableVertexAttribArray(HEAP32[$attr_index >> 2] | 0);
     HEAP8[$cache_attr_dirty >> 0] = 1;
    }
   } else if ((HEAP8[HEAP32[$cache_attr >> 2] >> 0] | 0) != -1) {
    _glDisableVertexAttribArray(HEAP32[$attr_index >> 2] | 0);
    HEAP8[$cache_attr_dirty >> 0] = 1;
   }
   if (HEAP8[$cache_attr_dirty >> 0] & 1) {
    $124 = HEAP32[$cache_attr >> 2] | 0;
    $125 = HEAP32[$attr >> 2] | 0;
    HEAP32[$124 >> 2] = HEAP32[$125 >> 2];
    HEAP32[$124 + 4 >> 2] = HEAP32[$125 + 4 >> 2];
    HEAP32[$124 + 8 >> 2] = HEAP32[$125 + 8 >> 2];
    HEAP32[$124 + 12 >> 2] = HEAP32[$125 + 12 >> 2];
    HEAP32[(HEAP32[$cache_attr >> 2] | 0) + 8 >> 2] = HEAP32[$vb_offset >> 2];
    HEAP32[(HEAP32[$cache_attr >> 2] | 0) + 16 >> 2] = HEAP32[$gl_vb >> 2];
   }
   HEAP32[$attr_index >> 2] = (HEAP32[$attr_index >> 2] | 0) + 1;
  }
  if ((label | 0) == 30) ___assert_fail(40391, 21600, 6822, 40220); else if ((label | 0) == 32) ___assert_fail(40416, 21600, 6824, 40220); else if ((label | 0) == 50) if (!(_glGetError() | 0)) {
   STACKTOP = sp;
   return;
  } else ___assert_fail(29811, 21600, 6864, 40220);
 }
}

function _stbi__jpeg_decode_block_prog_ac($j, $data, $hac, $fac) {
 $j = $j | 0;
 $data = $data | 0;
 $hac = $hac | 0;
 $fac = $fac | 0;
 var $108 = 0, $109 = 0, $120 = 0, $129 = 0, $29 = 0, $41 = 0, $5 = 0, $53 = 0, $65 = 0, $8 = 0, $84 = 0, $bit = 0, $c = 0, $call133 = 0, $call41 = 0, $call54 = 0, $code_bits16 = 0, $code_buffer15 = 0, $conv148 = 0, $conv179 = 0, $conv180 = 0, $conv94 = 0, $conv95 = 0, $data$addr = 0, $eob_run134 = 0, $eob_run4 = 0, $eob_run42 = 0, $eob_run45 = 0, $eob_run69 = 0, $fac$addr = 0, $hac$addr = 0, $j$addr = 0, $k = 0, $p = 0, $p157 = 0, $r = 0, $r111 = 0, $retval = 0, $rs = 0, $rs113 = 0, $s = 0, $s112 = 0, $shift = 0, $tobool146 = 0, $zig = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $retval = sp + 64 | 0;
 $j$addr = sp + 60 | 0;
 $data$addr = sp + 56 | 0;
 $hac$addr = sp + 52 | 0;
 $fac$addr = sp + 48 | 0;
 $k = sp + 44 | 0;
 $shift = sp + 40 | 0;
 $zig = sp + 36 | 0;
 $c = sp + 32 | 0;
 $r = sp + 28 | 0;
 $s = sp + 24 | 0;
 $rs = sp + 20 | 0;
 $bit = sp + 68 | 0;
 $p = sp + 16 | 0;
 $r111 = sp + 12 | 0;
 $s112 = sp + 8 | 0;
 $rs113 = sp + 4 | 0;
 $p157 = sp;
 HEAP32[$j$addr >> 2] = $j;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$hac$addr >> 2] = $hac;
 HEAP32[$fac$addr >> 2] = $fac;
 if (!(HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18384 >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(49288) | 0;
  $129 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 }
 $5 = HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18396 >> 2] | 0;
 L5 : do if (!(HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18392 >> 2] | 0)) {
  HEAP32[$shift >> 2] = $5;
  $8 = HEAP32[$j$addr >> 2] | 0;
  if (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18400 >> 2] | 0) {
   $eob_run4 = $8 + 18400 | 0;
   HEAP32[$eob_run4 >> 2] = (HEAP32[$eob_run4 >> 2] | 0) + -1;
   HEAP32[$retval >> 2] = 1;
   $129 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $129 | 0;
  }
  HEAP32[$k >> 2] = HEAP32[$8 + 18384 >> 2];
  L11 : while (1) {
   if ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$j$addr >> 2] | 0);
   HEAP32[$c >> 2] = (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] | 0) >>> 23 & 511;
   HEAP32[$r >> 2] = HEAP16[(HEAP32[$fac$addr >> 2] | 0) + (HEAP32[$c >> 2] << 1) >> 1];
   do if (HEAP32[$r >> 2] | 0) {
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + (HEAP32[$r >> 2] >> 4 & 15);
    HEAP32[$s >> 2] = HEAP32[$r >> 2] & 15;
    $code_buffer15 = (HEAP32[$j$addr >> 2] | 0) + 18364 | 0;
    HEAP32[$code_buffer15 >> 2] = HEAP32[$code_buffer15 >> 2] << HEAP32[$s >> 2];
    $code_bits16 = (HEAP32[$j$addr >> 2] | 0) + 18368 | 0;
    HEAP32[$code_bits16 >> 2] = (HEAP32[$code_bits16 >> 2] | 0) - (HEAP32[$s >> 2] | 0);
    $29 = HEAP32[$k >> 2] | 0;
    HEAP32[$k >> 2] = $29 + 1;
    HEAP32[$zig >> 2] = HEAPU8[9680 + $29 >> 0];
    HEAP16[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$zig >> 2] << 1) >> 1] = HEAP32[$r >> 2] >> 8 << HEAP32[$shift >> 2];
   } else {
    HEAP32[$rs >> 2] = _stbi__jpeg_huff_decode(HEAP32[$j$addr >> 2] | 0, HEAP32[$hac$addr >> 2] | 0) | 0;
    if ((HEAP32[$rs >> 2] | 0) < 0) {
     label = 12;
     break L11;
    }
    HEAP32[$s >> 2] = HEAP32[$rs >> 2] & 15;
    HEAP32[$r >> 2] = HEAP32[$rs >> 2] >> 4;
    $41 = HEAP32[$r >> 2] | 0;
    if (HEAP32[$s >> 2] | 0) {
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + $41;
     $53 = HEAP32[$k >> 2] | 0;
     HEAP32[$k >> 2] = $53 + 1;
     HEAP32[$zig >> 2] = HEAPU8[9680 + $53 >> 0];
     $call54 = _stbi__extend_receive(HEAP32[$j$addr >> 2] | 0, HEAP32[$s >> 2] | 0) | 0;
     HEAP16[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$zig >> 2] << 1) >> 1] = $call54 << HEAP32[$shift >> 2];
     break;
    }
    if (($41 | 0) < 15) break L11;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 16;
   } while (0);
   if ((HEAP32[$k >> 2] | 0) > (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18388 >> 2] | 0)) break L5;
  }
  if ((label | 0) == 12) {
   HEAP32[$retval >> 2] = _stbi__err(48758) | 0;
   $129 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $129 | 0;
  }
  HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18400 >> 2] = 1 << HEAP32[$r >> 2];
  if (HEAP32[$r >> 2] | 0) {
   $call41 = _stbi__jpeg_get_bits(HEAP32[$j$addr >> 2] | 0, HEAP32[$r >> 2] | 0) | 0;
   $eob_run42 = (HEAP32[$j$addr >> 2] | 0) + 18400 | 0;
   HEAP32[$eob_run42 >> 2] = (HEAP32[$eob_run42 >> 2] | 0) + $call41;
  }
  $eob_run45 = (HEAP32[$j$addr >> 2] | 0) + 18400 | 0;
  HEAP32[$eob_run45 >> 2] = (HEAP32[$eob_run45 >> 2] | 0) + -1;
 } else {
  HEAP16[$bit >> 1] = 1 << $5;
  $65 = HEAP32[$j$addr >> 2] | 0;
  if (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18400 >> 2] | 0) {
   $eob_run69 = $65 + 18400 | 0;
   HEAP32[$eob_run69 >> 2] = (HEAP32[$eob_run69 >> 2] | 0) + -1;
   HEAP32[$k >> 2] = HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18384 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18388 >> 2] | 0)) break L5;
    HEAP32[$p >> 2] = (HEAP32[$data$addr >> 2] | 0) + (HEAPU8[9680 + (HEAP32[$k >> 2] | 0) >> 0] << 1);
    do if (HEAP16[HEAP32[$p >> 2] >> 1] | 0) if (_stbi__jpeg_get_bit(HEAP32[$j$addr >> 2] | 0) | 0) if (!(HEAP16[HEAP32[$p >> 2] >> 1] & HEAP16[$bit >> 1])) {
     $conv94 = HEAP16[$bit >> 1] | 0;
     $84 = HEAP32[$p >> 2] | 0;
     $conv95 = HEAP16[$84 >> 1] | 0;
     if ((HEAP16[HEAP32[$p >> 2] >> 1] | 0) > 0) {
      HEAP16[$84 >> 1] = $conv95 + $conv94;
      break;
     } else {
      HEAP16[$84 >> 1] = $conv95 - $conv94;
      break;
     }
    } while (0);
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
  }
  HEAP32[$k >> 2] = HEAP32[$65 + 18384 >> 2];
  L47 : while (1) {
   HEAP32[$rs113 >> 2] = _stbi__jpeg_huff_decode(HEAP32[$j$addr >> 2] | 0, HEAP32[$hac$addr >> 2] | 0) | 0;
   if ((HEAP32[$rs113 >> 2] | 0) < 0) {
    label = 33;
    break;
   }
   HEAP32[$s112 >> 2] = HEAP32[$rs113 >> 2] & 15;
   HEAP32[$r111 >> 2] = HEAP32[$rs113 >> 2] >> 4;
   do if (!(HEAP32[$s112 >> 2] | 0)) {
    if ((HEAP32[$r111 >> 2] | 0) < 15) {
     HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18400 >> 2] = (1 << HEAP32[$r111 >> 2]) - 1;
     if (HEAP32[$r111 >> 2] | 0) {
      $call133 = _stbi__jpeg_get_bits(HEAP32[$j$addr >> 2] | 0, HEAP32[$r111 >> 2] | 0) | 0;
      $eob_run134 = (HEAP32[$j$addr >> 2] | 0) + 18400 | 0;
      HEAP32[$eob_run134 >> 2] = (HEAP32[$eob_run134 >> 2] | 0) + $call133;
     }
     HEAP32[$r111 >> 2] = 64;
    }
   } else {
    if ((HEAP32[$s112 >> 2] | 0) != 1) {
     label = 40;
     break L47;
    }
    $tobool146 = (_stbi__jpeg_get_bit(HEAP32[$j$addr >> 2] | 0) | 0) != 0;
    $conv148 = HEAP16[$bit >> 1] | 0;
    if ($tobool146) {
     HEAP32[$s112 >> 2] = $conv148;
     break;
    } else {
     HEAP32[$s112 >> 2] = 0 - $conv148;
     break;
    }
   } while (0);
   L62 : while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18388 >> 2] | 0)) break;
    $108 = HEAP32[$data$addr >> 2] | 0;
    $109 = HEAP32[$k >> 2] | 0;
    HEAP32[$k >> 2] = $109 + 1;
    HEAP32[$p157 >> 2] = $108 + (HEAPU8[9680 + $109 >> 0] << 1);
    do if (HEAP16[HEAP32[$p157 >> 2] >> 1] | 0) {
     if (_stbi__jpeg_get_bit(HEAP32[$j$addr >> 2] | 0) | 0) if (!(HEAP16[HEAP32[$p157 >> 2] >> 1] & HEAP16[$bit >> 1])) {
      $conv179 = HEAP16[$bit >> 1] | 0;
      $120 = HEAP32[$p157 >> 2] | 0;
      $conv180 = HEAP16[$120 >> 1] | 0;
      if ((HEAP16[HEAP32[$p157 >> 2] >> 1] | 0) > 0) {
       HEAP16[$120 >> 1] = $conv180 + $conv179;
       break;
      } else {
       HEAP16[$120 >> 1] = $conv180 - $conv179;
       break;
      }
     }
    } else {
     if (!(HEAP32[$r111 >> 2] | 0)) {
      label = 53;
      break L62;
     }
     HEAP32[$r111 >> 2] = (HEAP32[$r111 >> 2] | 0) + -1;
    } while (0);
   }
   if ((label | 0) == 53) {
    label = 0;
    HEAP16[HEAP32[$p157 >> 2] >> 1] = HEAP32[$s112 >> 2];
   }
   if ((HEAP32[$k >> 2] | 0) > (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18388 >> 2] | 0)) break L5;
  }
  if ((label | 0) == 33) {
   HEAP32[$retval >> 2] = _stbi__err(48758) | 0;
   $129 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $129 | 0;
  } else if ((label | 0) == 40) {
   HEAP32[$retval >> 2] = _stbi__err(48758) | 0;
   $129 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $129 | 0;
  }
 } while (0);
 HEAP32[$retval >> 2] = 1;
 $129 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $129 | 0;
}

function __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root, $__z) {
 $__root = $__root | 0;
 $__z = $__z | 0;
 var $$pre = 0, $$pre170 = 0, $$pre173$pn = 0, $$sink = 0, $0 = 0, $10 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $5 = 0, $__is_black_ = 0, $__is_black_126 = 0, $__is_black_137 = 0, $__is_black_145$pre$phiZ2D = 0, $__is_black_150 = 0, $__is_black_205$phi$trans$insert = 0, $__is_black_216 = 0, $__is_black_224$pre$phiZ2D = 0, $__left_2$pre$phi181Z2D = 0, $__left_2$pre$phi182Z2D = 0, $__left_2$pre$phi183Z2D = 0, $__parent_ = 0, $__parent_$i$pre$phiZZ2D = 0, $__parent_30 = 0, $__root$addr$0 = 0, $__root$addr$1 = 0, $__root$addr$2 = 0, $__root$addr$4 = 0, $__root$addr$4$lcssa194$pn = 0, $__root$addr$6 = 0, $__root$addr$7 = 0, $__w$0 = 0, $__w$1 = 0, $__w$2 = 0, $__w$3 = 0, $__w$4 = 0, $__w$5 = 0, $call = 0, $cmp10142 = 0, $cmp167 = 0, $cond184 = 0, $cond185 = 0, $cond186 = 0, $cond9140 = 0, $cond9141 = 0, $tobool = 0, $tobool151 = 0, label = 0;
 $0 = HEAP32[$__z >> 2] | 0;
 if (!$0) {
  $__left_2$pre$phi183Z2D = $__z;
  $cond186 = $__z;
  label = 4;
 } else if (!(HEAP32[$__z + 4 >> 2] | 0)) {
  $__left_2$pre$phi182Z2D = $__z;
  $cond185 = $__z;
  $cond9140 = $0;
  label = 6;
 } else {
  $call = __ZNSt3__211__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__z) | 0;
  $$pre = HEAP32[$call >> 2] | 0;
  if (!$$pre) {
   $__left_2$pre$phi183Z2D = $call;
   $cond186 = $call;
   label = 4;
  } else {
   $__left_2$pre$phi182Z2D = $call;
   $cond185 = $call;
   $cond9140 = $$pre;
   label = 6;
  }
 }
 if ((label | 0) == 4) {
  $2 = HEAP32[$cond186 + 4 >> 2] | 0;
  if (!$2) {
   $__left_2$pre$phi181Z2D = $__left_2$pre$phi183Z2D;
   $__parent_$i$pre$phiZZ2D = $cond186 + 8 | 0;
   $cmp10142 = 0;
   $cond184 = $cond186;
   $cond9141 = 0;
  } else {
   $__left_2$pre$phi182Z2D = $__left_2$pre$phi183Z2D;
   $cond185 = $cond186;
   $cond9140 = $2;
   label = 6;
  }
 }
 if ((label | 0) == 6) {
  $__parent_ = $cond185 + 8 | 0;
  HEAP32[$cond9140 + 8 >> 2] = HEAP32[$__parent_ >> 2];
  $__left_2$pre$phi181Z2D = $__left_2$pre$phi182Z2D;
  $__parent_$i$pre$phiZZ2D = $__parent_;
  $cmp10142 = 1;
  $cond184 = $cond185;
  $cond9141 = $cond9140;
 }
 $4 = HEAP32[$__parent_$i$pre$phiZZ2D >> 2] | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) == ($cond184 | 0)) {
  HEAP32[$4 >> 2] = $cond9141;
  if (($cond184 | 0) == ($__root | 0)) {
   $__root$addr$0 = $cond9141;
   $__w$0 = 0;
  } else {
   $__root$addr$0 = $__root;
   $__w$0 = HEAP32[$4 + 4 >> 2] | 0;
  }
 } else {
  HEAP32[$4 + 4 >> 2] = $cond9141;
  $__root$addr$0 = $__root;
  $__w$0 = $5;
 }
 $__is_black_ = $cond184 + 12 | 0;
 $tobool = (HEAP8[$__is_black_ >> 0] | 0) != 0;
 if (($cond184 | 0) == ($__z | 0)) $__root$addr$1 = $__root$addr$0; else {
  $__parent_30 = $__z + 8 | 0;
  $10 = HEAP32[$__parent_30 >> 2] | 0;
  HEAP32[$__parent_$i$pre$phiZZ2D >> 2] = $10;
  HEAP32[((HEAP32[HEAP32[$__parent_30 >> 2] >> 2] | 0) == ($__z | 0) ? $10 : $10 + 4 | 0) >> 2] = $cond184;
  $15 = HEAP32[$__z >> 2] | 0;
  HEAP32[$__left_2$pre$phi181Z2D >> 2] = $15;
  HEAP32[$15 + 8 >> 2] = $cond184;
  $16 = HEAP32[$__z + 4 >> 2] | 0;
  HEAP32[$cond184 + 4 >> 2] = $16;
  if ($16 | 0) HEAP32[$16 + 8 >> 2] = $cond184;
  HEAP8[$__is_black_ >> 0] = HEAP8[$__z + 12 >> 0] | 0;
  $__root$addr$1 = ($__root$addr$0 | 0) == ($__z | 0) ? $cond184 : $__root$addr$0;
 }
 L21 : do if ($tobool & ($__root$addr$1 | 0) != 0) {
  if ($cmp10142) {
   HEAP8[$cond9141 + 12 >> 0] = 1;
   break;
  }
  $__root$addr$2 = $__root$addr$1;
  $__w$1 = $__w$0;
  while (1) {
   $18 = HEAP32[$__w$1 + 8 >> 2] | 0;
   $__is_black_150 = $__w$1 + 12 | 0;
   $tobool151 = (HEAP8[$__is_black_150 >> 0] | 0) != 0;
   if ((HEAP32[$18 >> 2] | 0) == ($__w$1 | 0)) {
    if ($tobool151) {
     $__root$addr$6 = $__root$addr$2;
     $__w$4 = $__w$1;
    } else {
     HEAP8[$__is_black_150 >> 0] = 1;
     HEAP8[$18 + 12 >> 0] = 0;
     __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($18);
     $34 = HEAP32[$__w$1 + 4 >> 2] | 0;
     $__root$addr$6 = ($__root$addr$2 | 0) == ($34 | 0) ? $__w$1 : $__root$addr$2;
     $__w$4 = HEAP32[$34 >> 2] | 0;
    }
    $36 = HEAP32[$__w$4 >> 2] | 0;
    $cmp167 = ($36 | 0) == 0;
    if (!$cmp167) if (!(HEAP8[$36 + 12 >> 0] | 0)) {
     label = 45;
     break;
    }
    $38 = HEAP32[$__w$4 + 4 >> 2] | 0;
    if ($38 | 0) if (!(HEAP8[$38 + 12 >> 0] | 0)) {
     label = 41;
     break;
    }
    HEAP8[$__w$4 + 12 >> 0] = 0;
    $40 = HEAP32[$__w$4 + 8 >> 2] | 0;
    if (($40 | 0) == ($__root$addr$6 | 0) | (HEAP8[$40 + 12 >> 0] | 0) == 0) {
     label = 40;
     break;
    } else {
     $$sink = $40;
     $__root$addr$7 = $__root$addr$6;
    }
   } else {
    if ($tobool151) {
     $__root$addr$4 = $__root$addr$2;
     $__w$2 = $__w$1;
    } else {
     HEAP8[$__is_black_150 >> 0] = 1;
     HEAP8[$18 + 12 >> 0] = 0;
     __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($18);
     $21 = HEAP32[$__w$1 >> 2] | 0;
     $__root$addr$4 = ($__root$addr$2 | 0) == ($21 | 0) ? $__w$1 : $__root$addr$2;
     $__w$2 = HEAP32[$21 + 4 >> 2] | 0;
    }
    $23 = HEAP32[$__w$2 >> 2] | 0;
    if ($23 | 0) if (!(HEAP8[$23 + 12 >> 0] | 0)) {
     label = 29;
     break;
    }
    $25 = HEAP32[$__w$2 + 4 >> 2] | 0;
    if ($25 | 0) if (!(HEAP8[$25 + 12 >> 0] | 0)) {
     $29 = $25;
     label = 30;
     break;
    }
    HEAP8[$__w$2 + 12 >> 0] = 0;
    $27 = HEAP32[$__w$2 + 8 >> 2] | 0;
    if (($27 | 0) == ($__root$addr$4 | 0)) {
     $__root$addr$4$lcssa194$pn = $__root$addr$4;
     label = 28;
     break;
    }
    if (!(HEAP8[$27 + 12 >> 0] | 0)) {
     $__root$addr$4$lcssa194$pn = $27;
     label = 28;
     break;
    } else {
     $$sink = $27;
     $__root$addr$7 = $__root$addr$4;
    }
   }
   $45 = HEAP32[$$sink + 8 >> 2] | 0;
   $__root$addr$2 = $__root$addr$7;
   $__w$1 = HEAP32[((HEAP32[$45 >> 2] | 0) == ($$sink | 0) ? $45 + 4 | 0 : $45) >> 2] | 0;
  }
  do if ((label | 0) == 28) {
   HEAP8[$__root$addr$4$lcssa194$pn + 12 >> 0] = 1;
   break L21;
  } else if ((label | 0) == 29) {
   $$pre170 = HEAP32[$__w$2 + 4 >> 2] | 0;
   if (!$$pre170) label = 31; else {
    $29 = $$pre170;
    label = 30;
   }
  } else if ((label | 0) == 40) {
   HEAP8[$40 + 12 >> 0] = 1;
   break L21;
  } else if ((label | 0) == 41) {
   if ($cmp167) $$pre173$pn = $38; else {
    $__is_black_205$phi$trans$insert = $36 + 12 | 0;
    if (!(HEAP8[$__is_black_205$phi$trans$insert >> 0] | 0)) {
     $__is_black_224$pre$phiZ2D = $__is_black_205$phi$trans$insert;
     $__w$5 = $__w$4;
     label = 46;
     break;
    }
    $$pre173$pn = HEAP32[$__w$4 + 4 >> 2] | 0;
   }
   HEAP8[$$pre173$pn + 12 >> 0] = 1;
   HEAP8[$__w$4 + 12 >> 0] = 0;
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__w$4);
   $42 = HEAP32[$__w$4 + 8 >> 2] | 0;
   $__is_black_224$pre$phiZ2D = (HEAP32[$42 >> 2] | 0) + 12 | 0;
   $__w$5 = $42;
   label = 46;
  } else if ((label | 0) == 45) {
   $__is_black_224$pre$phiZ2D = $36 + 12 | 0;
   $__w$5 = $__w$4;
   label = 46;
  } while (0);
  if ((label | 0) == 30) {
   $__is_black_126 = $29 + 12 | 0;
   if (!(HEAP8[$__is_black_126 >> 0] | 0)) {
    $__is_black_145$pre$phiZ2D = $__is_black_126;
    $__w$3 = $__w$2;
   } else label = 31;
  } else if ((label | 0) == 46) {
   $43 = HEAP32[$__w$5 + 8 >> 2] | 0;
   $__is_black_216 = $43 + 12 | 0;
   HEAP8[$__w$5 + 12 >> 0] = HEAP8[$__is_black_216 >> 0] | 0;
   HEAP8[$__is_black_216 >> 0] = 1;
   HEAP8[$__is_black_224$pre$phiZ2D >> 0] = 1;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($43);
   break;
  }
  if ((label | 0) == 31) {
   HEAP8[$23 + 12 >> 0] = 1;
   HEAP8[$__w$2 + 12 >> 0] = 0;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__w$2);
   $31 = HEAP32[$__w$2 + 8 >> 2] | 0;
   $__is_black_145$pre$phiZ2D = (HEAP32[$31 + 4 >> 2] | 0) + 12 | 0;
   $__w$3 = $31;
  }
  $32 = HEAP32[$__w$3 + 8 >> 2] | 0;
  $__is_black_137 = $32 + 12 | 0;
  HEAP8[$__w$3 + 12 >> 0] = HEAP8[$__is_black_137 >> 0] | 0;
  HEAP8[$__is_black_137 >> 0] = 1;
  HEAP8[$__is_black_145$pre$phiZ2D >> 0] = 1;
  __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($32);
 } while (0);
 return;
}

function _stbtt_FindGlyphIndex($info, $unicode_codepoint) {
 $info = $info | 0;
 $unicode_codepoint = $unicode_codepoint | 0;
 var $115 = 0, $118 = 0, $42 = 0, $62 = 0, $77 = 0, $bytes = 0, $count = 0, $data = 0, $end = 0, $endCount = 0, $end_char = 0, $entrySelector = 0, $first = 0, $format = 0, $high = 0, $index_map = 0, $info$addr = 0, $item = 0, $low = 0, $mid = 0, $ngroups = 0, $offset = 0, $rangeShift = 0, $retval = 0, $search = 0, $searchRange = 0, $segcount = 0, $start = 0, $start_char = 0, $start_glyph = 0, $unicode_codepoint$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $retval = sp + 64 | 0;
 $info$addr = sp + 60 | 0;
 $unicode_codepoint$addr = sp + 56 | 0;
 $data = sp + 52 | 0;
 $index_map = sp + 48 | 0;
 $format = sp + 84 | 0;
 $bytes = sp + 44 | 0;
 $first = sp + 40 | 0;
 $count = sp + 36 | 0;
 $segcount = sp + 82 | 0;
 $searchRange = sp + 80 | 0;
 $entrySelector = sp + 78 | 0;
 $rangeShift = sp + 76 | 0;
 $endCount = sp + 32 | 0;
 $search = sp + 28 | 0;
 $end = sp + 74 | 0;
 $offset = sp + 72 | 0;
 $start = sp + 70 | 0;
 $item = sp + 68 | 0;
 $ngroups = sp + 24 | 0;
 $low = sp + 20 | 0;
 $high = sp + 16 | 0;
 $mid = sp + 12 | 0;
 $start_char = sp + 8 | 0;
 $end_char = sp + 4 | 0;
 $start_glyph = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$unicode_codepoint$addr >> 2] = $unicode_codepoint;
 HEAP32[$data >> 2] = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$index_map >> 2] = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 40 >> 2];
 HEAP16[$format >> 1] = _ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) | 0) | 0;
 if (!(HEAPU16[$format >> 1] | 0)) {
  HEAP32[$bytes >> 2] = (_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 2 | 0) | 0) & 65535;
  if ((HEAP32[$unicode_codepoint$addr >> 2] | 0) < ((HEAP32[$bytes >> 2] | 0) - 6 | 0)) {
   HEAP32[$retval >> 2] = HEAPU8[(HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 6 + (HEAP32[$unicode_codepoint$addr >> 2] | 0) >> 0];
   $118 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $118 | 0;
  } else {
   HEAP32[$retval >> 2] = 0;
   $118 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $118 | 0;
  }
 }
 if ((HEAPU16[$format >> 1] | 0) == 6) {
  HEAP32[$first >> 2] = (_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 6 | 0) | 0) & 65535;
  HEAP32[$count >> 2] = (_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 8 | 0) | 0) & 65535;
  if ((HEAP32[$unicode_codepoint$addr >> 2] | 0) >>> 0 >= (HEAP32[$first >> 2] | 0) >>> 0) if ((HEAP32[$unicode_codepoint$addr >> 2] | 0) >>> 0 < ((HEAP32[$first >> 2] | 0) + (HEAP32[$count >> 2] | 0) | 0) >>> 0) {
   HEAP32[$retval >> 2] = (_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 10 + ((HEAP32[$unicode_codepoint$addr >> 2] | 0) - (HEAP32[$first >> 2] | 0) << 1) | 0) | 0) & 65535;
   $118 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $118 | 0;
  }
  HEAP32[$retval >> 2] = 0;
  $118 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 if ((HEAPU16[$format >> 1] | 0) == 2) ___assert_fail(47680, 44131, 1424, 44423);
 if ((HEAPU16[$format >> 1] | 0) != 4) {
  if ((HEAPU16[$format >> 1] | 0) != 12) if ((HEAPU16[$format >> 1] | 0) != 13) ___assert_fail(47680, 44131, 1495, 44423);
  HEAP32[$ngroups >> 2] = _ttULONG((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 12 | 0) | 0;
  HEAP32[$low >> 2] = 0;
  HEAP32[$high >> 2] = HEAP32[$ngroups >> 2];
  while (1) {
   if ((HEAP32[$low >> 2] | 0) >= (HEAP32[$high >> 2] | 0)) {
    label = 41;
    break;
   }
   HEAP32[$mid >> 2] = (HEAP32[$low >> 2] | 0) + ((HEAP32[$high >> 2] | 0) - (HEAP32[$low >> 2] | 0) >> 1);
   HEAP32[$start_char >> 2] = _ttULONG((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 16 + ((HEAP32[$mid >> 2] | 0) * 12 | 0) | 0) | 0;
   HEAP32[$end_char >> 2] = _ttULONG((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 16 + ((HEAP32[$mid >> 2] | 0) * 12 | 0) + 4 | 0) | 0;
   if ((HEAP32[$unicode_codepoint$addr >> 2] | 0) >>> 0 < (HEAP32[$start_char >> 2] | 0) >>> 0) HEAP32[$high >> 2] = HEAP32[$mid >> 2]; else {
    if ((HEAP32[$unicode_codepoint$addr >> 2] | 0) >>> 0 <= (HEAP32[$end_char >> 2] | 0) >>> 0) break;
    HEAP32[$low >> 2] = (HEAP32[$mid >> 2] | 0) + 1;
   }
  }
  if ((label | 0) == 41) {
   HEAP32[$retval >> 2] = 0;
   $118 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $118 | 0;
  }
  HEAP32[$start_glyph >> 2] = _ttULONG((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 16 + ((HEAP32[$mid >> 2] | 0) * 12 | 0) + 8 | 0) | 0;
  $115 = HEAP32[$start_glyph >> 2] | 0;
  if ((HEAPU16[$format >> 1] | 0) == 12) {
   HEAP32[$retval >> 2] = $115 + (HEAP32[$unicode_codepoint$addr >> 2] | 0) - (HEAP32[$start_char >> 2] | 0);
   $118 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $118 | 0;
  } else {
   HEAP32[$retval >> 2] = $115;
   $118 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $118 | 0;
  }
 }
 HEAP16[$segcount >> 1] = ((_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 6 | 0) | 0) & 65535) >> 1;
 HEAP16[$searchRange >> 1] = ((_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 8 | 0) | 0) & 65535) >> 1;
 HEAP16[$entrySelector >> 1] = _ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 10 | 0) | 0;
 HEAP16[$rangeShift >> 1] = ((_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 12 | 0) | 0) & 65535) >> 1;
 HEAP32[$endCount >> 2] = (HEAP32[$index_map >> 2] | 0) + 14;
 HEAP32[$search >> 2] = HEAP32[$endCount >> 2];
 if ((HEAP32[$unicode_codepoint$addr >> 2] | 0) > 65535) {
  HEAP32[$retval >> 2] = 0;
  $118 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 $42 = HEAP32[$unicode_codepoint$addr >> 2] | 0;
 if (($42 | 0) >= ((_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$search >> 2] | 0) + (HEAPU16[$rangeShift >> 1] << 1) | 0) | 0) & 65535 | 0)) HEAP32[$search >> 2] = (HEAP32[$search >> 2] | 0) + (HEAPU16[$rangeShift >> 1] << 1);
 HEAP32[$search >> 2] = (HEAP32[$search >> 2] | 0) - 2;
 while (1) {
  if (!(HEAP16[$entrySelector >> 1] | 0)) break;
  HEAP16[$searchRange >> 1] = HEAPU16[$searchRange >> 1] >> 1;
  HEAP16[$end >> 1] = _ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$search >> 2] | 0) + (HEAPU16[$searchRange >> 1] << 1) | 0) | 0;
  if ((HEAP32[$unicode_codepoint$addr >> 2] | 0) > (HEAPU16[$end >> 1] | 0)) HEAP32[$search >> 2] = (HEAP32[$search >> 2] | 0) + (HEAPU16[$searchRange >> 1] << 1);
  HEAP16[$entrySelector >> 1] = (HEAP16[$entrySelector >> 1] | 0) + -1 << 16 >> 16;
 }
 HEAP32[$search >> 2] = (HEAP32[$search >> 2] | 0) + 2;
 HEAP16[$item >> 1] = ((HEAP32[$search >> 2] | 0) - (HEAP32[$endCount >> 2] | 0) | 0) >>> 1;
 $62 = HEAP32[$unicode_codepoint$addr >> 2] | 0;
 if (($62 | 0) > ((_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$endCount >> 2] | 0) + (HEAPU16[$item >> 1] << 1) | 0) | 0) & 65535 | 0)) ___assert_fail(44444, 44131, 1460, 44423);
 HEAP16[$start >> 1] = _ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 14 + (HEAPU16[$segcount >> 1] << 1) + 2 + (HEAPU16[$item >> 1] << 1) | 0) | 0;
 if ((HEAP32[$unicode_codepoint$addr >> 2] | 0) < (HEAPU16[$start >> 1] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $118 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 HEAP16[$offset >> 1] = _ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 14 + ((HEAPU16[$segcount >> 1] | 0) * 6 | 0) + 2 + (HEAPU16[$item >> 1] << 1) | 0) | 0;
 if (!(HEAPU16[$offset >> 1] | 0)) {
  $77 = HEAP32[$unicode_codepoint$addr >> 2] | 0;
  HEAP32[$retval >> 2] = $77 + ((_ttSHORT((HEAP32[$data >> 2] | 0) + (HEAP32[$index_map >> 2] | 0) + 14 + (HEAPU16[$segcount >> 1] << 2) + 2 + (HEAPU16[$item >> 1] << 1) | 0) | 0) << 16 >> 16) & 65535;
  $118 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 } else {
  HEAP32[$retval >> 2] = (_ttUSHORT((HEAP32[$data >> 2] | 0) + (HEAPU16[$offset >> 1] | 0) + ((HEAP32[$unicode_codepoint$addr >> 2] | 0) - (HEAPU16[$start >> 1] | 0) << 1) + (HEAP32[$index_map >> 2] | 0) + 14 + ((HEAPU16[$segcount >> 1] | 0) * 6 | 0) + 2 + (HEAPU16[$item >> 1] << 1) | 0) | 0) & 65535;
  $118 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $118 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($this) {
 $this = $this | 0;
 var $$pre$phiZ2D = 0, $SoFar = 0, $agg$tmp = 0, $agg$tmp38 = 0, $agg$tmp40 = 0, $agg$tmp40$byval_copy = 0, $call109 = 0, $call19 = 0, $call2 = 0, $call3 = 0, $call31 = 0, $call39 = 0, $call45 = 0, $call51 = 0, $call60 = 0, $call61 = 0, $call83 = 0, $call84 = 0, $call9 = 0, $call94 = 0, $retval$10 = 0, $retval$4 = 0, $retval$8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp40$byval_copy = sp + 32 | 0;
 $SoFar = sp + 8 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp38 = sp + 16 | 0;
 $agg$tmp40 = sp;
 HEAP32[$SoFar >> 2] = 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53898);
 HEAP32[$agg$tmp40$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp40$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 L1 : do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp40$byval_copy) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call2) | 0;
  HEAP32[$SoFar >> 2] = $call3;
  if (!$call3) $retval$10 = 0; else {
   do if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
    $call9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call2, 0) | 0;
    HEAP32[$agg$tmp40$byval_copy >> 2] = $call9;
    if (!$call9) {
     $retval$10 = 0;
     break L1;
    } else {
     HEAP32[$SoFar >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
     break;
    }
   } while (0);
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) break;
    $call19 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call2) | 0;
    HEAP32[$agg$tmp40$byval_copy >> 2] = $call19;
    if (!$call19) {
     label = 35;
     break;
    }
    HEAP32[$SoFar >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
   }
   if ((label | 0) == 35) {
    $retval$10 = 0;
    break;
   }
   $call31 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($call2) | 0;
   HEAP32[$agg$tmp40$byval_copy >> 2] = $call31;
   if (!$call31) $retval$4 = 0; else $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
   $retval$10 = $retval$4;
  }
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp38, 52872);
  HEAP32[$agg$tmp40$byval_copy >> 2] = HEAP32[$agg$tmp38 >> 2];
  HEAP32[$agg$tmp40$byval_copy + 4 >> 2] = HEAP32[$agg$tmp38 + 4 >> 2];
  $call39 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp40$byval_copy) | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp40, 53902);
  HEAP32[$agg$tmp40$byval_copy >> 2] = HEAP32[$agg$tmp40 >> 2];
  HEAP32[$agg$tmp40$byval_copy + 4 >> 2] = HEAP32[$agg$tmp40 + 4 >> 2];
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp40$byval_copy) | 0)) {
   $call45 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$SoFar >> 2] = $call45;
   if (($call45 | 0) == 0 | $call39 ^ 1) {
    $retval$10 = $call45;
    break;
   }
   $call51 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $SoFar) | 0;
   HEAP32[$SoFar >> 2] = $call51;
   $retval$10 = $call51;
   break;
  }
  L25 : do if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10) {
   while (1) {
    $call60 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    $call61 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call60) | 0;
    HEAP32[$agg$tmp40$byval_copy >> 2] = $call61;
    if (!$call61) break;
    do if (!(HEAP32[$SoFar >> 2] | 0)) if ($call39) {
     HEAP32[$SoFar >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp40$byval_copy) | 0;
     break;
    } else {
     HEAP32[$SoFar >> 2] = $call61;
     break;
    } else HEAP32[$SoFar >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0; while (0);
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     $$pre$phiZ2D = $call60;
     break L25;
    }
   }
   $retval$10 = 0;
   break L1;
  } else {
   $call83 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call84 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call83) | 0;
   HEAP32[$SoFar >> 2] = $call84;
   if (!$call84) {
    $retval$10 = 0;
    break L1;
   }
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
    $call94 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call83, 0) | 0;
    HEAP32[$agg$tmp40$byval_copy >> 2] = $call94;
    if (!$call94) {
     $retval$10 = 0;
     break L1;
    } else {
     HEAP32[$SoFar >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
     $$pre$phiZ2D = $call83;
     break;
    }
   } else $$pre$phiZ2D = $call83;
  } while (0);
  $call109 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($$pre$phiZ2D) | 0;
  HEAP32[$agg$tmp40$byval_copy >> 2] = $call109;
  if (!$call109) $retval$8 = 0; else $retval$8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SoFar, $agg$tmp40$byval_copy) | 0;
  $retval$10 = $retval$8;
 } while (0);
 STACKTOP = sp;
 return $retval$10 | 0;
}

function __sg_pipeline_desc_defaults($agg$result, $desc) {
 $agg$result = $agg$result | 0;
 $desc = $desc | 0;
 var $a_desc = 0, $a_desc272 = 0, $arrayidx292 = 0, $attr_index = 0, $attr_index255 = 0, $attr_index268 = 0, $auto_offset = 0, $b_desc = 0, $bs = 0, $buf_index = 0, $call = 0, $cond104 = 0, $cond118 = 0, $cond132 = 0, $cond143 = 0, $cond174 = 0, $cond181 = 0, $cond190 = 0, $cond197 = 0, $cond204 = 0, $cond211 = 0, $cond218 = 0, $cond225 = 0, $cond243 = 0, $cond250 = 0, $cond38 = 0, $cond51 = 0, $cond64 = 0, $cond77 = 0, $cond90 = 0, $cs = 0, $def = 0, $desc$addr = 0, $i = 0, $l_desc = 0, $use_auto_offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 $desc$addr = sp + 632 | 0;
 $def = sp + 76 | 0;
 $i = sp + 72 | 0;
 $cs = sp + 68 | 0;
 $bs = sp + 64 | 0;
 $attr_index = sp + 60 | 0;
 $a_desc = sp + 56 | 0;
 $b_desc = sp + 52 | 0;
 $auto_offset = sp;
 $use_auto_offset = sp + 636 | 0;
 $attr_index255 = sp + 48 | 0;
 $attr_index268 = sp + 44 | 0;
 $a_desc272 = sp + 40 | 0;
 $buf_index = sp + 36 | 0;
 $l_desc = sp + 32 | 0;
 HEAP32[$desc$addr >> 2] = $desc;
 _memcpy($def | 0, HEAP32[$desc$addr >> 2] | 0, 556) | 0;
 HEAP32[$def + 508 >> 2] = (HEAP32[$def + 508 >> 2] | 0) == 0 ? 4 : HEAP32[$def + 508 >> 2] | 0;
 HEAP32[$def + 512 >> 2] = (HEAP32[$def + 512 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 512 >> 2] | 0;
 HEAP32[$def + 516 >> 2] = (HEAP32[$def + 516 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 516 >> 2] | 0;
 HEAP32[$def + 520 >> 2] = (HEAP32[$def + 520 >> 2] | 0) == 0 ? 2 : HEAP32[$def + 520 >> 2] | 0;
 HEAP32[$def + 524 >> 2] = (HEAP32[$def + 524 >> 2] | 0) == 0 ? HEAP32[541033] | 0 : HEAP32[$def + 524 >> 2] | 0;
 if (!(HEAP32[$def + 320 + 4 >> 2] | 0)) $cond38 = 8; else $cond38 = HEAP32[$def + 320 + 4 >> 2] | 0;
 HEAP32[$def + 320 + 4 >> 2] = $cond38;
 if (!(HEAP32[$def + 320 + 4 + 4 >> 2] | 0)) $cond51 = 1; else $cond51 = HEAP32[$def + 320 + 4 + 4 >> 2] | 0;
 HEAP32[$def + 320 + 4 + 4 >> 2] = $cond51;
 if (!(HEAP32[$def + 320 + 4 + 8 >> 2] | 0)) $cond64 = 1; else $cond64 = HEAP32[$def + 320 + 4 + 8 >> 2] | 0;
 HEAP32[$def + 320 + 4 + 8 >> 2] = $cond64;
 if (!(HEAP32[$def + 320 + 4 + 12 >> 2] | 0)) $cond77 = 1; else $cond77 = HEAP32[$def + 320 + 4 + 12 >> 2] | 0;
 HEAP32[$def + 320 + 4 + 12 >> 2] = $cond77;
 if (!(HEAP32[$def + 320 + 20 >> 2] | 0)) $cond90 = 8; else $cond90 = HEAP32[$def + 320 + 20 >> 2] | 0;
 HEAP32[$def + 320 + 20 >> 2] = $cond90;
 if (!(HEAP32[$def + 320 + 20 + 4 >> 2] | 0)) $cond104 = 1; else $cond104 = HEAP32[$def + 320 + 20 + 4 >> 2] | 0;
 HEAP32[$def + 320 + 20 + 4 >> 2] = $cond104;
 if (!(HEAP32[$def + 320 + 20 + 8 >> 2] | 0)) $cond118 = 1; else $cond118 = HEAP32[$def + 320 + 20 + 8 >> 2] | 0;
 HEAP32[$def + 320 + 20 + 8 >> 2] = $cond118;
 if (!(HEAP32[$def + 320 + 20 + 12 >> 2] | 0)) $cond132 = 1; else $cond132 = HEAP32[$def + 320 + 20 + 12 >> 2] | 0;
 HEAP32[$def + 320 + 20 + 12 >> 2] = $cond132;
 if (!(HEAP32[$def + 296 + 4 >> 2] | 0)) $cond143 = 8; else $cond143 = HEAP32[$def + 296 + 4 >> 2] | 0;
 HEAP32[$def + 296 + 4 >> 2] = $cond143;
 HEAP32[$def + 296 >> 2] = (HEAP32[$def + 296 >> 2] | 0) == 0 ? HEAP32[541032] | 0 : HEAP32[$def + 296 >> 2] | 0;
 HEAP32[$def + 360 >> 2] = (HEAP32[$def + 360 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 360 >> 2] | 0;
 if ((HEAP32[$def + 360 >> 2] | 0) > 4) HEAP32[$def + 360 >> 2] = 4;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$def + 360 >> 2] | 0)) break;
  HEAP32[$cs >> 2] = $def + 364 + ((HEAP32[$i >> 2] | 0) * 36 | 0);
  if (!(HEAP32[HEAP32[$cs >> 2] >> 2] | 0)) $cond174 = HEAP32[541031] | 0; else $cond174 = HEAP32[HEAP32[$cs >> 2] >> 2] | 0;
  HEAP32[HEAP32[$cs >> 2] >> 2] = $cond174;
  if (!(HEAP32[(HEAP32[$cs >> 2] | 0) + 4 >> 2] | 0)) $cond181 = 15; else $cond181 = HEAP32[(HEAP32[$cs >> 2] | 0) + 4 >> 2] | 0;
  HEAP32[(HEAP32[$cs >> 2] | 0) + 4 >> 2] = $cond181;
  HEAP32[$bs >> 2] = $def + 364 + ((HEAP32[$i >> 2] | 0) * 36 | 0) + 8;
  if (!(HEAP32[(HEAP32[$bs >> 2] | 0) + 4 >> 2] | 0)) $cond190 = 2; else $cond190 = HEAP32[(HEAP32[$bs >> 2] | 0) + 4 >> 2] | 0;
  HEAP32[(HEAP32[$bs >> 2] | 0) + 4 >> 2] = $cond190;
  if (!(HEAP32[(HEAP32[$bs >> 2] | 0) + 8 >> 2] | 0)) $cond197 = 1; else $cond197 = HEAP32[(HEAP32[$bs >> 2] | 0) + 8 >> 2] | 0;
  HEAP32[(HEAP32[$bs >> 2] | 0) + 8 >> 2] = $cond197;
  if (!(HEAP32[(HEAP32[$bs >> 2] | 0) + 12 >> 2] | 0)) $cond204 = 1; else $cond204 = HEAP32[(HEAP32[$bs >> 2] | 0) + 12 >> 2] | 0;
  HEAP32[(HEAP32[$bs >> 2] | 0) + 12 >> 2] = $cond204;
  if (!(HEAP32[(HEAP32[$bs >> 2] | 0) + 16 >> 2] | 0)) $cond211 = 2; else $cond211 = HEAP32[(HEAP32[$bs >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[(HEAP32[$bs >> 2] | 0) + 16 >> 2] = $cond211;
  if (!(HEAP32[(HEAP32[$bs >> 2] | 0) + 20 >> 2] | 0)) $cond218 = 1; else $cond218 = HEAP32[(HEAP32[$bs >> 2] | 0) + 20 >> 2] | 0;
  HEAP32[(HEAP32[$bs >> 2] | 0) + 20 >> 2] = $cond218;
  if (!(HEAP32[(HEAP32[$bs >> 2] | 0) + 24 >> 2] | 0)) $cond225 = 1; else $cond225 = HEAP32[(HEAP32[$bs >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[(HEAP32[$bs >> 2] | 0) + 24 >> 2] = $cond225;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$attr_index >> 2] = 0;
 while (1) {
  if ((HEAP32[$attr_index >> 2] | 0) >= 16) break;
  HEAP32[$a_desc >> 2] = $def + 8 + 96 + ((HEAP32[$attr_index >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$a_desc >> 2] | 0) + 8 >> 2] | 0)) break;
  if ((HEAP32[HEAP32[$a_desc >> 2] >> 2] | 0) >= 8) {
   label = 45;
   break;
  }
  HEAP32[$b_desc >> 2] = $def + 8 + ((HEAP32[HEAP32[$a_desc >> 2] >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$b_desc >> 2] | 0) + 4 >> 2] | 0)) $cond243 = 1; else $cond243 = HEAP32[(HEAP32[$b_desc >> 2] | 0) + 4 >> 2] | 0;
  HEAP32[(HEAP32[$b_desc >> 2] | 0) + 4 >> 2] = $cond243;
  if (!(HEAP32[(HEAP32[$b_desc >> 2] | 0) + 8 >> 2] | 0)) $cond250 = 1; else $cond250 = HEAP32[(HEAP32[$b_desc >> 2] | 0) + 8 >> 2] | 0;
  HEAP32[(HEAP32[$b_desc >> 2] | 0) + 8 >> 2] = $cond250;
  HEAP32[$attr_index >> 2] = (HEAP32[$attr_index >> 2] | 0) + 1;
 }
 if ((label | 0) == 45) ___assert_fail(38035, 21600, 13946, 38085);
 HEAP32[$auto_offset >> 2] = 0;
 HEAP32[$auto_offset + 4 >> 2] = 0;
 HEAP32[$auto_offset + 8 >> 2] = 0;
 HEAP32[$auto_offset + 12 >> 2] = 0;
 HEAP32[$auto_offset + 16 >> 2] = 0;
 HEAP32[$auto_offset + 20 >> 2] = 0;
 HEAP32[$auto_offset + 24 >> 2] = 0;
 HEAP32[$auto_offset + 28 >> 2] = 0;
 HEAP8[$use_auto_offset >> 0] = 1;
 HEAP32[$attr_index255 >> 2] = 0;
 while (1) {
  if ((HEAP32[$attr_index255 >> 2] | 0) >= 16) break;
  if (HEAP32[$def + 8 + 96 + ((HEAP32[$attr_index255 >> 2] | 0) * 12 | 0) + 4 >> 2] | 0) HEAP8[$use_auto_offset >> 0] = 0;
  HEAP32[$attr_index255 >> 2] = (HEAP32[$attr_index255 >> 2] | 0) + 1;
 }
 HEAP32[$attr_index268 >> 2] = 0;
 while (1) {
  if ((HEAP32[$attr_index268 >> 2] | 0) >= 16) break;
  HEAP32[$a_desc272 >> 2] = $def + 8 + 96 + ((HEAP32[$attr_index268 >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$a_desc272 >> 2] | 0) + 8 >> 2] | 0)) break;
  if ((HEAP32[HEAP32[$a_desc272 >> 2] >> 2] | 0) >= 8) {
   label = 60;
   break;
  }
  if (HEAP8[$use_auto_offset >> 0] & 1) HEAP32[(HEAP32[$a_desc272 >> 2] | 0) + 4 >> 2] = HEAP32[$auto_offset + (HEAP32[HEAP32[$a_desc272 >> 2] >> 2] << 2) >> 2];
  $call = __sg_vertexformat_bytesize(HEAP32[(HEAP32[$a_desc272 >> 2] | 0) + 8 >> 2] | 0) | 0;
  $arrayidx292 = $auto_offset + (HEAP32[HEAP32[$a_desc272 >> 2] >> 2] << 2) | 0;
  HEAP32[$arrayidx292 >> 2] = (HEAP32[$arrayidx292 >> 2] | 0) + $call;
  HEAP32[$attr_index268 >> 2] = (HEAP32[$attr_index268 >> 2] | 0) + 1;
 }
 if ((label | 0) == 60) ___assert_fail(38035, 21600, 13967, 38085);
 HEAP32[$buf_index >> 2] = 0;
 while (1) {
  if ((HEAP32[$buf_index >> 2] | 0) >= 8) break;
  HEAP32[$l_desc >> 2] = $def + 8 + ((HEAP32[$buf_index >> 2] | 0) * 12 | 0);
  if (!(HEAP32[HEAP32[$l_desc >> 2] >> 2] | 0)) HEAP32[HEAP32[$l_desc >> 2] >> 2] = HEAP32[$auto_offset + (HEAP32[$buf_index >> 2] << 2) >> 2];
  HEAP32[$buf_index >> 2] = (HEAP32[$buf_index >> 2] | 0) + 1;
 }
 _memcpy($agg$result | 0, $def | 0, 556) | 0;
 STACKTOP = sp;
 return;
}

function _twoway_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $0 = 0, $12 = 0, $14 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add13165 = 0, $add46157 = 0, $add90 = 0, $add99 = 0, $arrayidx8 = 0, $byteset = 0, $call108 = 0, $cmp156 = 0, $cmp160 = 0, $cmp85 = 0, $cond162 = 0, $conv125 = 0, $conv5 = 0, $h$addr$0 = 0, $inc177 = 0, $ip$0$lcssa179 = 0, $ip$0161 = 0, $ip$1 = 0, $ip$2$ip$0 = 0, $ip$2$lcssa = 0, $ip$2153 = 0, $ip$3 = 0, $jp$0162 = 0, $jp$1 = 0, $jp$2154 = 0, $jp$3 = 0, $k$0163 = 0, $k$1 = 0, $k$2155 = 0, $k$3 = 0, $k$4$sink = 0, $k$5148 = 0, $k$6150 = 0, $l$0$lcssa176178 = 0, $l$0169 = 0, $mem$0 = 0, $mem$0$be = 0, $mem0$0 = 0, $or107 = 0, $p$0$lcssa180 = 0, $p$0164 = 0, $p$1 = 0, $p$2$lcssa = 0, $p$2$p$0 = 0, $p$2156 = 0, $p$3 = 0, $p$5 = 0, $retval$3 = 0, $shift = 0, $sub$ptr$rhs$cast = 0, $sub101 = 0, $sub123 = 0, $sub139 = 0, $sub148$pre$phiZ2D = 0, $sub94 = 0, $tobool142 = 0, $z$0 = 0, $z$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $byteset = sp + 1024 | 0;
 $shift = sp;
 HEAP32[$byteset >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$n >> 0] | 0;
 L1 : do if (!($0 << 24 >> 24)) {
  $ip$0$lcssa179 = -1;
  $ip$2$lcssa = -1;
  $l$0$lcssa176178 = 0;
  $p$0$lcssa180 = 1;
  $p$2$lcssa = 1;
  label = 25;
 } else {
  $2 = $0;
  $l$0169 = 0;
  do {
   if (!(HEAP8[$h + $l$0169 >> 0] | 0)) {
    $retval$3 = 0;
    break L1;
   }
   $conv5 = $2 & 255;
   $arrayidx8 = $byteset + ($conv5 >>> 5 << 2) | 0;
   HEAP32[$arrayidx8 >> 2] = HEAP32[$arrayidx8 >> 2] | 1 << ($conv5 & 31);
   $l$0169 = $l$0169 + 1 | 0;
   HEAP32[$shift + ($conv5 << 2) >> 2] = $l$0169;
   $2 = HEAP8[$n + $l$0169 >> 0] | 0;
  } while ($2 << 24 >> 24 != 0);
  $cmp160 = $l$0169 >>> 0 > 1;
  if ($cmp160) {
   $add13165 = 1;
   $ip$0161 = -1;
   $jp$0162 = 0;
   $k$0163 = 1;
   $p$0164 = 1;
   while (1) {
    $5 = HEAP8[$n + ($k$0163 + $ip$0161) >> 0] | 0;
    $6 = HEAP8[$n + $add13165 >> 0] | 0;
    do if ($5 << 24 >> 24 == $6 << 24 >> 24) if (($k$0163 | 0) == ($p$0164 | 0)) {
     $ip$1 = $ip$0161;
     $jp$1 = $p$0164 + $jp$0162 | 0;
     $k$1 = 1;
     $p$1 = $p$0164;
     break;
    } else {
     $ip$1 = $ip$0161;
     $jp$1 = $jp$0162;
     $k$1 = $k$0163 + 1 | 0;
     $p$1 = $p$0164;
     break;
    } else if (($5 & 255) > ($6 & 255)) {
     $ip$1 = $ip$0161;
     $jp$1 = $add13165;
     $k$1 = 1;
     $p$1 = $add13165 - $ip$0161 | 0;
     break;
    } else {
     $ip$1 = $jp$0162;
     $jp$1 = $jp$0162 + 1 | 0;
     $k$1 = 1;
     $p$1 = 1;
     break;
    } while (0);
    $add13165 = $k$1 + $jp$1 | 0;
    if ($add13165 >>> 0 >= $l$0169 >>> 0) break; else {
     $ip$0161 = $ip$1;
     $jp$0162 = $jp$1;
     $k$0163 = $k$1;
     $p$0164 = $p$1;
    }
   }
   if ($cmp160) {
    $add46157 = 1;
    $ip$2153 = -1;
    $jp$2154 = 0;
    $k$2155 = 1;
    $p$2156 = 1;
    while (1) {
     $7 = HEAP8[$n + ($k$2155 + $ip$2153) >> 0] | 0;
     $8 = HEAP8[$n + $add46157 >> 0] | 0;
     do if ($7 << 24 >> 24 == $8 << 24 >> 24) if (($k$2155 | 0) == ($p$2156 | 0)) {
      $ip$3 = $ip$2153;
      $jp$3 = $p$2156 + $jp$2154 | 0;
      $k$3 = 1;
      $p$3 = $p$2156;
      break;
     } else {
      $ip$3 = $ip$2153;
      $jp$3 = $jp$2154;
      $k$3 = $k$2155 + 1 | 0;
      $p$3 = $p$2156;
      break;
     } else if (($7 & 255) < ($8 & 255)) {
      $ip$3 = $ip$2153;
      $jp$3 = $add46157;
      $k$3 = 1;
      $p$3 = $add46157 - $ip$2153 | 0;
      break;
     } else {
      $ip$3 = $jp$2154;
      $jp$3 = $jp$2154 + 1 | 0;
      $k$3 = 1;
      $p$3 = 1;
      break;
     } while (0);
     $add46157 = $k$3 + $jp$3 | 0;
     if ($add46157 >>> 0 >= $l$0169 >>> 0) {
      $ip$0$lcssa179 = $ip$1;
      $ip$2$lcssa = $ip$3;
      $l$0$lcssa176178 = $l$0169;
      $p$0$lcssa180 = $p$1;
      $p$2$lcssa = $p$3;
      label = 25;
      break;
     } else {
      $ip$2153 = $ip$3;
      $jp$2154 = $jp$3;
      $k$2155 = $k$3;
      $p$2156 = $p$3;
     }
    }
   } else {
    $ip$0$lcssa179 = $ip$1;
    $ip$2$lcssa = -1;
    $l$0$lcssa176178 = $l$0169;
    $p$0$lcssa180 = $p$1;
    $p$2$lcssa = 1;
    label = 25;
   }
  } else {
   $ip$0$lcssa179 = -1;
   $ip$2$lcssa = -1;
   $l$0$lcssa176178 = $l$0169;
   $p$0$lcssa180 = 1;
   $p$2$lcssa = 1;
   label = 25;
  }
 } while (0);
 L34 : do if ((label | 0) == 25) {
  $cmp85 = ($ip$2$lcssa + 1 | 0) >>> 0 > ($ip$0$lcssa179 + 1 | 0) >>> 0;
  $p$2$p$0 = $cmp85 ? $p$2$lcssa : $p$0$lcssa180;
  $ip$2$ip$0 = $cmp85 ? $ip$2$lcssa : $ip$0$lcssa179;
  $add90 = $ip$2$ip$0 + 1 | 0;
  if (!(_memcmp($n, $n + $p$2$p$0 | 0, $add90) | 0)) {
   $sub101 = $l$0$lcssa176178 - $p$2$p$0 | 0;
   $mem0$0 = $sub101;
   $p$5 = $p$2$p$0;
   $sub148$pre$phiZ2D = $sub101;
  } else {
   $sub94 = $l$0$lcssa176178 - $ip$2$ip$0 + -1 | 0;
   $add99 = ($ip$2$ip$0 >>> 0 > $sub94 >>> 0 ? $ip$2$ip$0 : $sub94) + 1 | 0;
   $mem0$0 = 0;
   $p$5 = $add99;
   $sub148$pre$phiZ2D = $l$0$lcssa176178 - $add99 | 0;
  }
  $or107 = $l$0$lcssa176178 | 63;
  $sub123 = $l$0$lcssa176178 + -1 | 0;
  $tobool142 = ($mem0$0 | 0) != 0;
  $h$addr$0 = $h;
  $mem$0 = 0;
  $z$0 = $h;
  while (1) {
   $sub$ptr$rhs$cast = $h$addr$0;
   do if (($z$0 - $sub$ptr$rhs$cast | 0) >>> 0 < $l$0$lcssa176178 >>> 0) {
    $call108 = _memchr($z$0, 0, $or107) | 0;
    if (!$call108) {
     $z$3 = $z$0 + $or107 | 0;
     break;
    } else if (($call108 - $sub$ptr$rhs$cast | 0) >>> 0 < $l$0$lcssa176178 >>> 0) {
     $retval$3 = 0;
     break L34;
    } else {
     $z$3 = $call108;
     break;
    }
   } else $z$3 = $z$0; while (0);
   $conv125 = HEAPU8[$h$addr$0 + $sub123 >> 0] | 0;
   L48 : do if (!(1 << ($conv125 & 31) & HEAP32[$byteset + ($conv125 >>> 5 << 2) >> 2])) {
    $k$4$sink = $l$0$lcssa176178;
    $mem$0$be = 0;
   } else {
    $sub139 = $l$0$lcssa176178 - (HEAP32[$shift + ($conv125 << 2) >> 2] | 0) | 0;
    if ($sub139 | 0) {
     $k$4$sink = $tobool142 & ($mem$0 | 0) != 0 & $sub139 >>> 0 < $p$5 >>> 0 ? $sub148$pre$phiZ2D : $sub139;
     $mem$0$be = 0;
     break;
    }
    $cmp156 = $add90 >>> 0 > $mem$0 >>> 0;
    $cond162 = $cmp156 ? $add90 : $mem$0;
    $12 = HEAP8[$n + $cond162 >> 0] | 0;
    L53 : do if ($12 << 24 >> 24) {
     $14 = $12;
     $k$5148 = $cond162;
     while (1) {
      if ($14 << 24 >> 24 != (HEAP8[$h$addr$0 + $k$5148 >> 0] | 0)) break;
      $inc177 = $k$5148 + 1 | 0;
      $14 = HEAP8[$n + $inc177 >> 0] | 0;
      if (!($14 << 24 >> 24)) break L53; else $k$5148 = $inc177;
     }
     $k$4$sink = $k$5148 - $ip$2$ip$0 | 0;
     $mem$0$be = 0;
     break L48;
    } while (0);
    if (!$cmp156) {
     $retval$3 = $h$addr$0;
     break L34;
    }
    $k$6150 = $add90;
    while (1) {
     $k$6150 = $k$6150 + -1 | 0;
     if ((HEAP8[$n + $k$6150 >> 0] | 0) != (HEAP8[$h$addr$0 + $k$6150 >> 0] | 0)) {
      $k$4$sink = $p$5;
      $mem$0$be = $mem0$0;
      break L48;
     }
     if ($k$6150 >>> 0 <= $mem$0 >>> 0) {
      $retval$3 = $h$addr$0;
      break L34;
     }
    }
   } while (0);
   $h$addr$0 = $h$addr$0 + $k$4$sink | 0;
   $mem$0 = $mem$0$be;
   $z$0 = $z$3;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __sg_gl_create_pipeline($pip, $shd, $desc) {
 $pip = $pip | 0;
 $shd = $shd | 0;
 $desc = $desc | 0;
 var $27 = 0, $68 = 0, $a_desc = 0, $attr_index = 0, $attr_index52 = 0, $attr_loc = 0, $blend = 0, $blend29 = 0, $call119 = 0, $call121 = 0, $conv117 = 0, $depth = 0, $depth25 = 0, $desc$addr = 0, $gl_attr = 0, $i = 0, $l_desc = 0, $pip$addr = 0, $shd$addr = 0, $step_func = 0, $step_rate = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $pip$addr = sp + 44 | 0;
 $shd$addr = sp + 40 | 0;
 $desc$addr = sp + 36 | 0;
 $i = sp + 32 | 0;
 $attr_index = sp + 28 | 0;
 $attr_index52 = sp + 24 | 0;
 $a_desc = sp + 20 | 0;
 $l_desc = sp + 16 | 0;
 $step_func = sp + 12 | 0;
 $step_rate = sp + 8 | 0;
 $attr_loc = sp + 4 | 0;
 $gl_attr = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 HEAP32[$shd$addr >> 2] = $shd;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!((HEAP32[$pip$addr >> 2] | 0) != 0 & (HEAP32[$shd$addr >> 2] | 0) != 0 & (HEAP32[$desc$addr >> 2] | 0) != 0)) ___assert_fail(38308, 21600, 6107, 38327);
 if (HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] | 0) ___assert_fail(38350, 21600, 6108, 38327);
 if (HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 12 >> 2] | 0) ___assert_fail(38350, 21600, 6108, 38327);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[HEAP32[$shd$addr >> 2] >> 2] | 0)) ___assert_fail(38405, 21600, 6109, 38327);
 if (!(HEAP32[(HEAP32[$shd$addr >> 2] | 0) + 252 >> 2] | 0)) ___assert_fail(38437, 21600, 6110, 38327);
 HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] = HEAP32[$shd$addr >> 2];
 __sg_pipeline_common_init((HEAP32[$pip$addr >> 2] | 0) + 12 | 0, HEAP32[$desc$addr >> 2] | 0);
 HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 320 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 508 >> 2];
 $depth = (HEAP32[$pip$addr >> 2] | 0) + 88 + 256 | 0;
 $depth25 = (HEAP32[$desc$addr >> 2] | 0) + 296 | 0;
 HEAP32[$depth >> 2] = HEAP32[$depth25 >> 2];
 HEAP32[$depth + 4 >> 2] = HEAP32[$depth25 + 4 >> 2];
 HEAP32[$depth + 8 >> 2] = HEAP32[$depth25 + 8 >> 2];
 HEAP32[$depth + 12 >> 2] = HEAP32[$depth25 + 12 >> 2];
 HEAP32[$depth + 16 >> 2] = HEAP32[$depth25 + 16 >> 2];
 HEAP32[$depth + 20 >> 2] = HEAP32[$depth25 + 20 >> 2];
 dest = (HEAP32[$pip$addr >> 2] | 0) + 88 + 280 | 0;
 src = (HEAP32[$desc$addr >> 2] | 0) + 320 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $blend = (HEAP32[$pip$addr >> 2] | 0) + 88 + 324 | 0;
 $blend29 = (HEAP32[$desc$addr >> 2] | 0) + 364 + 8 | 0;
 HEAP32[$blend >> 2] = HEAP32[$blend29 >> 2];
 HEAP32[$blend + 4 >> 2] = HEAP32[$blend29 + 4 >> 2];
 HEAP32[$blend + 8 >> 2] = HEAP32[$blend29 + 8 >> 2];
 HEAP32[$blend + 12 >> 2] = HEAP32[$blend29 + 12 >> 2];
 HEAP32[$blend + 16 >> 2] = HEAP32[$blend29 + 16 >> 2];
 HEAP32[$blend + 20 >> 2] = HEAP32[$blend29 + 20 >> 2];
 HEAP32[$blend + 24 >> 2] = HEAP32[$blend29 + 24 >> 2];
 HEAP32[$i >> 2] = 0;
 while (1) {
  $27 = HEAP32[$desc$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= 4) break;
  HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 352 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$27 + 364 + ((HEAP32[$i >> 2] | 0) * 36 | 0) + 4 >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 368 >> 2] = HEAP32[$27 + 516 >> 2];
 HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 372 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 520 >> 2];
 HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 88 + 376 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 524 >> 2];
 HEAP8[(HEAP32[$pip$addr >> 2] | 0) + 88 + 380 >> 0] = HEAP8[(HEAP32[$desc$addr >> 2] | 0) + 544 >> 0] & 1;
 HEAP32[$attr_index >> 2] = 0;
 while (1) {
  if ((HEAP32[$attr_index >> 2] | 0) >= 16) break;
  HEAP8[(HEAP32[$pip$addr >> 2] | 0) + 88 + (HEAP32[$attr_index >> 2] << 4) >> 0] = -1;
  HEAP32[$attr_index >> 2] = (HEAP32[$attr_index >> 2] | 0) + 1;
 }
 HEAP32[$attr_index52 >> 2] = 0;
 while (1) {
  if ((HEAP32[$attr_index52 >> 2] | 0) >= (HEAP32[541102] | 0)) {
   label = 38;
   break;
  }
  HEAP32[$a_desc >> 2] = (HEAP32[$desc$addr >> 2] | 0) + 8 + 96 + ((HEAP32[$attr_index52 >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$a_desc >> 2] | 0) + 8 >> 2] | 0)) {
   label = 38;
   break;
  }
  if ((HEAP32[HEAP32[$a_desc >> 2] >> 2] | 0) >= 8) {
   label = 20;
   break;
  }
  HEAP32[$l_desc >> 2] = (HEAP32[$desc$addr >> 2] | 0) + 8 + ((HEAP32[HEAP32[$a_desc >> 2] >> 2] | 0) * 12 | 0);
  HEAP32[$step_func >> 2] = HEAP32[(HEAP32[$l_desc >> 2] | 0) + 4 >> 2];
  HEAP32[$step_rate >> 2] = HEAP32[(HEAP32[$l_desc >> 2] | 0) + 8 >> 2];
  HEAP32[$attr_loc >> 2] = HEAP32[$attr_index52 >> 2];
  if (!(__sg_strempty((HEAP32[$shd$addr >> 2] | 0) + 252 + 4 + (HEAP32[$attr_index52 >> 2] << 4) | 0) | 0)) {
   $68 = HEAP32[(HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 84 >> 2] | 0) + 252 >> 2] | 0;
   HEAP32[$attr_loc >> 2] = _glGetAttribLocation($68 | 0, __sg_strptr((HEAP32[$shd$addr >> 2] | 0) + 252 + 4 + (HEAP32[$attr_index52 >> 2] << 4) | 0) | 0) | 0;
  }
  if ((HEAP32[$attr_loc >> 2] | 0) >= (HEAP32[541102] | 0)) {
   label = 24;
   break;
  }
  if ((HEAP32[$attr_loc >> 2] | 0) != -1) {
   HEAP32[$gl_attr >> 2] = (HEAP32[$pip$addr >> 2] | 0) + 88 + (HEAP32[$attr_loc >> 2] << 4);
   if ((HEAP8[HEAP32[$gl_attr >> 2] >> 0] | 0) != -1) {
    label = 27;
    break;
   }
   HEAP8[HEAP32[$gl_attr >> 2] >> 0] = HEAP32[HEAP32[$a_desc >> 2] >> 2];
   if ((HEAP32[$step_func >> 2] | 0) == 1) HEAP8[(HEAP32[$gl_attr >> 2] | 0) + 1 >> 0] = 0; else HEAP8[(HEAP32[$gl_attr >> 2] | 0) + 1 >> 0] = HEAP32[$step_rate >> 2];
   if ((HEAP32[HEAP32[$l_desc >> 2] >> 2] | 0) <= 0) {
    label = 32;
    break;
   }
   HEAP8[(HEAP32[$gl_attr >> 2] | 0) + 2 >> 0] = HEAP32[HEAP32[$l_desc >> 2] >> 2];
   HEAP32[(HEAP32[$gl_attr >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$a_desc >> 2] | 0) + 4 >> 2];
   $conv117 = (__sg_gl_vertexformat_size(HEAP32[(HEAP32[$a_desc >> 2] | 0) + 8 >> 2] | 0) | 0) & 255;
   HEAP8[(HEAP32[$gl_attr >> 2] | 0) + 3 >> 0] = $conv117;
   $call119 = __sg_gl_vertexformat_type(HEAP32[(HEAP32[$a_desc >> 2] | 0) + 8 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$gl_attr >> 2] | 0) + 12 >> 2] = $call119;
   $call121 = __sg_gl_vertexformat_normalized(HEAP32[(HEAP32[$a_desc >> 2] | 0) + 8 >> 2] | 0) | 0;
   HEAP8[(HEAP32[$gl_attr >> 2] | 0) + 4 >> 0] = $call121;
   HEAP8[(HEAP32[$pip$addr >> 2] | 0) + 12 + 8 + (HEAP32[HEAP32[$a_desc >> 2] >> 2] | 0) >> 0] = 1;
  } else {
   _puts(38539) | 0;
   if (!(__sg_strptr((HEAP32[$shd$addr >> 2] | 0) + 252 + 4 + (HEAP32[$attr_index52 >> 2] << 4) | 0) | 0)) {
    label = 35;
    break;
   }
   _puts(__sg_strptr((HEAP32[$shd$addr >> 2] | 0) + 252 + 4 + (HEAP32[$attr_index52 >> 2] << 4) | 0) | 0) | 0;
  }
  HEAP32[$attr_index52 >> 2] = (HEAP32[$attr_index52 >> 2] | 0) + 1;
 }
 if ((label | 0) == 20) ___assert_fail(38035, 21600, 6135, 38327); else if ((label | 0) == 24) ___assert_fail(38450, 21600, 6143, 38327); else if ((label | 0) == 27) ___assert_fail(38496, 21600, 6146, 38327); else if ((label | 0) == 32) ___assert_fail(38520, 21600, 6154, 38327); else if ((label | 0) == 35) ___assert_fail(38578, 21600, 6164, 38327); else if ((label | 0) == 38) {
  STACKTOP = sp;
  return 2;
 }
 return 0;
}

function __sfetch_channel_dowork($chn, $pool) {
 $chn = $chn | 0;
 $pool = $pool | 0;
 var $8 = 0, $81 = 0, $95 = 0, $avail_lanes = 0, $call12 = 0, $chn$addr = 0, $i = 0, $i16 = 0, $item = 0, $item23 = 0, $item83 = 0, $num_incoming = 0, $num_move = 0, $num_sent = 0, $pool$addr = 0, $slot_id = 0, $slot_id20 = 0, $slot_id69 = 0, $slot_id76 = 0, $state135 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $chn$addr = sp + 56 | 0;
 $pool$addr = sp + 52 | 0;
 $num_sent = sp + 48 | 0;
 $avail_lanes = sp + 44 | 0;
 $num_move = sp + 40 | 0;
 $i = sp + 36 | 0;
 $slot_id = sp + 32 | 0;
 $item = sp + 28 | 0;
 $num_incoming = sp + 24 | 0;
 $i16 = sp + 20 | 0;
 $slot_id20 = sp + 16 | 0;
 $item23 = sp + 12 | 0;
 $slot_id69 = sp + 8 | 0;
 $slot_id76 = sp + 4 | 0;
 $item83 = sp;
 HEAP32[$chn$addr >> 2] = $chn;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$num_sent >> 2] = __sfetch_ring_count((HEAP32[$chn$addr >> 2] | 0) + 20 | 0) | 0;
 HEAP32[$avail_lanes >> 2] = __sfetch_ring_count((HEAP32[$chn$addr >> 2] | 0) + 4 | 0) | 0;
 HEAP32[$num_move >> 2] = (HEAP32[$num_sent >> 2] | 0) >>> 0 < (HEAP32[$avail_lanes >> 2] | 0) >>> 0 ? HEAP32[$num_sent >> 2] | 0 : HEAP32[$avail_lanes >> 2] | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  $8 = HEAP32[$chn$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$num_move >> 2] | 0) >>> 0) {
   label = 10;
   break;
  }
  HEAP32[$slot_id >> 2] = __sfetch_ring_dequeue($8 + 20 | 0) | 0;
  HEAP32[$item >> 2] = __sfetch_pool_item_lookup(HEAP32[$pool$addr >> 2] | 0, HEAP32[$slot_id >> 2] | 0) | 0;
  if (!(HEAP32[$item >> 2] | 0)) {
   label = 4;
   break;
  }
  if ((HEAP32[(HEAP32[$item >> 2] | 0) + 4 >> 2] | 0) != 1) {
   label = 6;
   break;
  }
  HEAP32[(HEAP32[$item >> 2] | 0) + 4 >> 2] = 2;
  $call12 = __sfetch_ring_dequeue((HEAP32[$chn$addr >> 2] | 0) + 4 | 0) | 0;
  HEAP32[(HEAP32[$item >> 2] | 0) + 12 >> 2] = $call12;
  if (!(HEAP32[(HEAP32[$item >> 2] | 0) + 24 >> 2] | 0)) __sfetch_invoke_response_callback(HEAP32[$item >> 2] | 0);
  __sfetch_ring_enqueue((HEAP32[$chn$addr >> 2] | 0) + 36 | 0, HEAP32[$slot_id >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) ___assert_fail(43344, 25510, 2189, 43349); else if ((label | 0) == 6) ___assert_fail(43372, 25510, 2190, 43349); else if ((label | 0) == 10) {
  HEAP32[$num_incoming >> 2] = __sfetch_ring_count($8 + 36 | 0) | 0;
  HEAP32[$i16 >> 2] = 0;
  while (1) {
   if ((HEAP32[$i16 >> 2] | 0) >>> 0 >= (HEAP32[$num_incoming >> 2] | 0) >>> 0) {
    label = 29;
    break;
   }
   HEAP32[$slot_id20 >> 2] = __sfetch_ring_peek((HEAP32[$chn$addr >> 2] | 0) + 36 | 0, HEAP32[$i16 >> 2] | 0) | 0;
   HEAP32[$item23 >> 2] = __sfetch_pool_item_lookup(HEAP32[$pool$addr >> 2] | 0, HEAP32[$slot_id20 >> 2] | 0) | 0;
   if (!(HEAP32[$item23 >> 2] | 0)) {
    label = 13;
    break;
   }
   if (!(HEAP32[(HEAP32[$item23 >> 2] | 0) + 4 >> 2] | 0)) {
    label = 15;
    break;
   }
   if ((HEAP32[(HEAP32[$item23 >> 2] | 0) + 4 >> 2] | 0) == 3) {
    label = 17;
    break;
   }
   if (HEAP8[(HEAP32[$item23 >> 2] | 0) + 56 >> 0] & 1) {
    HEAP32[(HEAP32[$item23 >> 2] | 0) + 4 >> 2] = 5;
    HEAP8[(HEAP32[$item23 >> 2] | 0) + 56 >> 0] = 0;
   }
   if (HEAP8[(HEAP32[$item23 >> 2] | 0) + 56 + 1 >> 0] & 1) {
    if ((HEAP32[(HEAP32[$item23 >> 2] | 0) + 4 >> 2] | 0) == 5) HEAP32[(HEAP32[$item23 >> 2] | 0) + 4 >> 2] = 4;
    HEAP8[(HEAP32[$item23 >> 2] | 0) + 56 + 1 >> 0] = 0;
   }
   if (HEAP8[(HEAP32[$item23 >> 2] | 0) + 56 + 2 >> 0] & 1) {
    HEAP32[(HEAP32[$item23 >> 2] | 0) + 4 >> 2] = 6;
    HEAP8[(HEAP32[$item23 >> 2] | 0) + 56 + 16 >> 0] = 1;
   }
   switch (HEAP32[(HEAP32[$item23 >> 2] | 0) + 4 >> 2] | 0) {
   case 4:
   case 2:
    {
     HEAP32[(HEAP32[$item23 >> 2] | 0) + 4 >> 2] = 3;
     break;
    }
   default:
    {}
   }
   HEAP32[$i16 >> 2] = (HEAP32[$i16 >> 2] | 0) + 1;
  }
  if ((label | 0) == 13) ___assert_fail(43344, 25510, 2205, 43349); else if ((label | 0) == 15) ___assert_fail(43411, 25510, 2206, 43349); else if ((label | 0) == 17) ___assert_fail(43448, 25510, 2207, 43349); else if ((label | 0) == 29) {
   while (1) {
    if (!((__sfetch_ring_empty((HEAP32[$chn$addr >> 2] | 0) + 36 | 0) | 0) ^ 1)) break;
    HEAP32[$slot_id69 >> 2] = __sfetch_ring_dequeue((HEAP32[$chn$addr >> 2] | 0) + 36 | 0) | 0;
    __sfetch_request_handler(HEAP32[HEAP32[$chn$addr >> 2] >> 2] | 0, HEAP32[$slot_id69 >> 2] | 0);
   }
   while (1) {
    if (!((__sfetch_ring_empty((HEAP32[$chn$addr >> 2] | 0) + 52 | 0) | 0) ^ 1)) {
     label = 60;
     break;
    }
    HEAP32[$slot_id76 >> 2] = __sfetch_ring_dequeue((HEAP32[$chn$addr >> 2] | 0) + 52 | 0) | 0;
    if (!(HEAP32[$slot_id76 >> 2] | 0)) {
     label = 35;
     break;
    }
    HEAP32[$item83 >> 2] = __sfetch_pool_item_lookup(HEAP32[$pool$addr >> 2] | 0, HEAP32[$slot_id76 >> 2] | 0) | 0;
    if (!(HEAP32[$item83 >> 2] | 0)) {
     label = 38;
     break;
    }
    if (!(HEAP32[(HEAP32[$item83 >> 2] | 0) + 20 >> 2] | 0)) {
     label = 38;
     break;
    }
    if (!(HEAP32[(HEAP32[$item83 >> 2] | 0) + 4 >> 2] | 0)) {
     label = 40;
     break;
    }
    if ((HEAP32[(HEAP32[$item83 >> 2] | 0) + 4 >> 2] | 0) == 1) {
     label = 42;
     break;
    }
    if ((HEAP32[(HEAP32[$item83 >> 2] | 0) + 4 >> 2] | 0) == 2) {
     label = 44;
     break;
    }
    if ((HEAP32[(HEAP32[$item83 >> 2] | 0) + 4 >> 2] | 0) == 4) {
     label = 46;
     break;
    }
    HEAP32[(HEAP32[$item83 >> 2] | 0) + 56 + 4 >> 2] = HEAP32[(HEAP32[$item83 >> 2] | 0) + 32 >> 2];
    HEAP32[(HEAP32[$item83 >> 2] | 0) + 56 + 8 >> 2] = HEAP32[(HEAP32[$item83 >> 2] | 0) + 32 + 4 >> 2];
    $81 = HEAP32[$item83 >> 2] | 0;
    if (HEAP8[(HEAP32[$item83 >> 2] | 0) + 56 + 2 >> 0] & 1) HEAP32[$81 + 56 + 12 >> 2] = 6; else HEAP32[(HEAP32[$item83 >> 2] | 0) + 56 + 12 >> 2] = HEAP32[$81 + 32 + 8 >> 2];
    if (HEAP8[(HEAP32[$item83 >> 2] | 0) + 32 + 13 >> 0] & 1) HEAP8[(HEAP32[$item83 >> 2] | 0) + 56 + 16 >> 0] = 1;
    $state135 = (HEAP32[$item83 >> 2] | 0) + 4 | 0;
    if (HEAP8[(HEAP32[$item83 >> 2] | 0) + 32 + 12 >> 0] & 1) HEAP32[$state135 >> 2] = 6; else if ((HEAP32[$state135 >> 2] | 0) == 3) HEAP32[(HEAP32[$item83 >> 2] | 0) + 4 >> 2] = 4;
    __sfetch_invoke_response_callback(HEAP32[$item83 >> 2] | 0);
    $95 = HEAP32[$chn$addr >> 2] | 0;
    if (HEAP8[(HEAP32[$item83 >> 2] | 0) + 56 + 16 >> 0] & 1) {
     __sfetch_ring_enqueue($95 + 4 | 0, HEAP32[(HEAP32[$item83 >> 2] | 0) + 12 >> 2] | 0);
     __sfetch_pool_item_free(HEAP32[$pool$addr >> 2] | 0, HEAP32[$slot_id76 >> 2] | 0);
    } else __sfetch_ring_enqueue($95 + 36 | 0, HEAP32[$slot_id76 >> 2] | 0);
   }
   if ((label | 0) == 35) ___assert_fail(43486, 25510, 2252, 43349); else if ((label | 0) == 38) ___assert_fail(43494, 25510, 2254, 43349); else if ((label | 0) == 40) ___assert_fail(43411, 25510, 2255, 43349); else if ((label | 0) == 42) ___assert_fail(43517, 25510, 2256, 43349); else if ((label | 0) == 44) ___assert_fail(43556, 25510, 2257, 43349); else if ((label | 0) == 46) ___assert_fail(43596, 25510, 2258, 43349); else if ((label | 0) == 60) {
    STACKTOP = sp;
    return;
   }
  }
 }
}

function _stbtt_FlattenCurves($vertices, $num_verts, $objspace_flatness, $contour_lengths, $num_contours, $userdata) {
 $vertices = $vertices | 0;
 $num_verts = $num_verts | 0;
 $objspace_flatness = +$objspace_flatness;
 $contour_lengths = $contour_lengths | 0;
 $num_contours = $num_contours | 0;
 $userdata = $userdata | 0;
 var $121 = 0, $42 = 0, $43 = 0, $52 = 0, $53 = 0, $call = 0, $contour_lengths$addr = 0, $i = 0, $n = 0, $num_contours$addr = 0, $num_points = 0, $num_verts$addr = 0, $objspace_flatness$addr = 0, $objspace_flatness_squared = 0, $pass = 0, $points = 0, $retval = 0, $start = 0, $userdata$addr = 0, $vertices$addr = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $retval = sp + 60 | 0;
 $vertices$addr = sp + 56 | 0;
 $num_verts$addr = sp + 52 | 0;
 $objspace_flatness$addr = sp + 48 | 0;
 $contour_lengths$addr = sp + 44 | 0;
 $num_contours$addr = sp + 40 | 0;
 $userdata$addr = sp + 36 | 0;
 $points = sp + 32 | 0;
 $num_points = sp + 28 | 0;
 $objspace_flatness_squared = sp + 24 | 0;
 $i = sp + 20 | 0;
 $n = sp + 16 | 0;
 $start = sp + 12 | 0;
 $pass = sp + 8 | 0;
 $x = sp + 4 | 0;
 $y = sp;
 HEAP32[$vertices$addr >> 2] = $vertices;
 HEAP32[$num_verts$addr >> 2] = $num_verts;
 HEAPF32[$objspace_flatness$addr >> 2] = $objspace_flatness;
 HEAP32[$contour_lengths$addr >> 2] = $contour_lengths;
 HEAP32[$num_contours$addr >> 2] = $num_contours;
 HEAP32[$userdata$addr >> 2] = $userdata;
 HEAP32[$points >> 2] = 0;
 HEAP32[$num_points >> 2] = 0;
 HEAPF32[$objspace_flatness_squared >> 2] = +HEAPF32[$objspace_flatness$addr >> 2] * +HEAPF32[$objspace_flatness$addr >> 2];
 HEAP32[$n >> 2] = 0;
 HEAP32[$start >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num_verts$addr >> 2] | 0)) break;
  if ((HEAPU8[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) == 1) HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[$num_contours$addr >> 2] >> 2] = HEAP32[$n >> 2];
 if (!(HEAP32[$n >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $121 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 }
 $call = _fons__tmpalloc(HEAP32[$n >> 2] << 2, HEAP32[$userdata$addr >> 2] | 0) | 0;
 HEAP32[HEAP32[$contour_lengths$addr >> 2] >> 2] = $call;
 if (!(HEAP32[HEAP32[$contour_lengths$addr >> 2] >> 2] | 0)) {
  HEAP32[HEAP32[$num_contours$addr >> 2] >> 2] = 0;
  HEAP32[$retval >> 2] = 0;
  $121 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 }
 HEAP32[$pass >> 2] = 0;
 while (1) {
  if ((HEAP32[$pass >> 2] | 0) >= 2) {
   label = 25;
   break;
  }
  HEAPF32[$x >> 2] = 0.0;
  HEAPF32[$y >> 2] = 0.0;
  if ((HEAP32[$pass >> 2] | 0) == 1) {
   HEAP32[$points >> 2] = _fons__tmpalloc(HEAP32[$num_points >> 2] << 3, HEAP32[$userdata$addr >> 2] | 0) | 0;
   if (!(HEAP32[$points >> 2] | 0)) {
    label = 26;
    break;
   }
  }
  HEAP32[$num_points >> 2] = 0;
  HEAP32[$n >> 2] = -1;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num_verts$addr >> 2] | 0)) break;
   switch (HEAPU8[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 12 >> 0] | 0) {
   case 1:
    {
     if ((HEAP32[$n >> 2] | 0) >= 0) HEAP32[(HEAP32[HEAP32[$contour_lengths$addr >> 2] >> 2] | 0) + (HEAP32[$n >> 2] << 2) >> 2] = (HEAP32[$num_points >> 2] | 0) - (HEAP32[$start >> 2] | 0);
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
     HEAP32[$start >> 2] = HEAP32[$num_points >> 2];
     HEAPF32[$x >> 2] = +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[$y >> 2] = +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     $42 = HEAP32[$points >> 2] | 0;
     $43 = HEAP32[$num_points >> 2] | 0;
     HEAP32[$num_points >> 2] = $43 + 1;
     _stbtt__add_point($42, $43, +HEAPF32[$x >> 2], +HEAPF32[$y >> 2]);
     break;
    }
   case 2:
    {
     HEAPF32[$x >> 2] = +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[$y >> 2] = +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     $52 = HEAP32[$points >> 2] | 0;
     $53 = HEAP32[$num_points >> 2] | 0;
     HEAP32[$num_points >> 2] = $53 + 1;
     _stbtt__add_point($52, $53, +HEAPF32[$x >> 2], +HEAPF32[$y >> 2]);
     break;
    }
   case 3:
    {
     _stbtt__tesselate_curve(HEAP32[$points >> 2] | 0, $num_points, +HEAPF32[$x >> 2], +HEAPF32[$y >> 2], +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 4 >> 1] | 0), +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 6 >> 1] | 0), +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) >> 1] | 0), +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 2 >> 1] | 0), +HEAPF32[$objspace_flatness_squared >> 2], 0) | 0;
     HEAPF32[$x >> 2] = +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[$y >> 2] = +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     break;
    }
   case 4:
    {
     _stbtt__tesselate_cubic(HEAP32[$points >> 2] | 0, $num_points, +HEAPF32[$x >> 2], +HEAPF32[$y >> 2], +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 4 >> 1] | 0), +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 6 >> 1] | 0), +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 8 >> 1] | 0), +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 10 >> 1] | 0), +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) >> 1] | 0), +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 2 >> 1] | 0), +HEAPF32[$objspace_flatness_squared >> 2], 0);
     HEAPF32[$x >> 2] = +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) >> 1] | 0);
     HEAPF32[$y >> 2] = +(HEAP16[(HEAP32[$vertices$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 14 | 0) + 2 >> 1] | 0);
     break;
    }
   default:
    {}
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[(HEAP32[HEAP32[$contour_lengths$addr >> 2] >> 2] | 0) + (HEAP32[$n >> 2] << 2) >> 2] = (HEAP32[$num_points >> 2] | 0) - (HEAP32[$start >> 2] | 0);
  HEAP32[$pass >> 2] = (HEAP32[$pass >> 2] | 0) + 1;
 }
 if ((label | 0) == 25) {
  HEAP32[$retval >> 2] = HEAP32[$points >> 2];
  $121 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 } else if ((label | 0) == 26) {
  _fons__tmpfree(HEAP32[$points >> 2] | 0, HEAP32[$userdata$addr >> 2] | 0);
  _fons__tmpfree(HEAP32[HEAP32[$contour_lengths$addr >> 2] >> 2] | 0, HEAP32[$userdata$addr >> 2] | 0);
  HEAP32[HEAP32[$contour_lengths$addr >> 2] >> 2] = 0;
  HEAP32[HEAP32[$num_contours$addr >> 2] >> 2] = 0;
  HEAP32[$retval >> 2] = 0;
  $121 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 }
 return 0;
}

function __Z4initv() {
 var $0 = 0, $1 = 0, $2 = 0, $7 = 0, $call1 = 0.0, $call2 = 0, $chunk_size = 0, $chunk_size87 = 0, $context = 0, $depth = 0, $face_winding = 0, $font_file = 0, $gl_buffers = 0, $gl_buffers17 = 0, $image_file = 0, $sokol_buffer_index = 0, $sokol_buffer_vertex = 0, $sokol_fetch = 0, $sokol_fetch_font = 0, $sokol_fetch_image = 0, $sokol_gfx = 0, $sokol_gl = 0, $sokol_pipleine = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976 | 0;
 $sokol_gfx = sp + 824 | 0;
 $sokol_gl = sp + 796 | 0;
 $sokol_fetch = sp + 776 | 0;
 $sokol_buffer_vertex = sp + 720 | 0;
 $sokol_buffer_index = sp + 664 | 0;
 $sokol_pipleine = sp + 104 | 0;
 $image_file = sp + 92 | 0;
 $font_file = sp + 80 | 0;
 $sokol_fetch_image = sp + 40 | 0;
 $sokol_fetch_font = sp;
 $context = $sokol_gfx + 40 | 0;
 dest = $sokol_gfx;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _sapp_sgcontext($context);
 HEAP32[$sokol_gfx + 140 >> 2] = 0;
 _sg_setup($sokol_gfx);
 HEAP32[$sokol_gl >> 2] = 0;
 HEAP32[$sokol_gl + 4 >> 2] = 0;
 HEAP32[$sokol_gl + 8 >> 2] = 0;
 HEAP32[$sokol_gl + 12 >> 2] = 0;
 HEAP32[$sokol_gl + 16 >> 2] = 0;
 HEAP32[$sokol_gl + 20 >> 2] = 0;
 HEAP32[$sokol_gl + 24 >> 2] = 0;
 _sgl_setup($sokol_gl);
 _stm_setup();
 $0 = _stm_now() | 0;
 $1 = getTempRet0() | 0;
 $2 = 61832;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$sokol_fetch >> 2] = HEAP32[3194];
 HEAP32[$sokol_fetch + 4 >> 2] = HEAP32[3195];
 HEAP32[$sokol_fetch + 8 >> 2] = HEAP32[3196];
 HEAP32[$sokol_fetch + 12 >> 2] = HEAP32[3197];
 HEAP32[$sokol_fetch + 16 >> 2] = HEAP32[3198];
 _sfetch_setup($sokol_fetch);
 $call1 = +_sapp_dpi_scale();
 HEAPF32[278873] = $call1;
 $call2 = __ZN2Dr13RoundPowerOf2IfEEiT_($call1 * 512.0) | 0;
 HEAP32[278872] = _sfons_create($call2, $call2, 1) | 0;
 HEAP32[278874] = -1;
 HEAP32[15461] = 1;
 HEAPF32[15462] = .125;
 HEAPF32[15463] = .25;
 HEAPF32[15464] = .3499999940395355;
 HEAPF32[15465] = 1.0;
 HEAP32[$sokol_buffer_vertex >> 2] = 0;
 HEAP32[$sokol_buffer_vertex + 4 >> 2] = 0;
 HEAP32[$sokol_buffer_vertex + 8 >> 2] = 0;
 HEAP32[$sokol_buffer_vertex + 12 >> 2] = 0;
 HEAP32[$sokol_buffer_vertex + 16 >> 2] = 1648;
 HEAP32[$sokol_buffer_vertex + 20 >> 2] = 176;
 HEAP32[$sokol_buffer_vertex + 24 >> 2] = 45401;
 $gl_buffers = $sokol_buffer_vertex + 28 | 0;
 HEAP32[$gl_buffers >> 2] = 0;
 HEAP32[$gl_buffers + 4 >> 2] = 0;
 HEAP32[$gl_buffers + 8 >> 2] = 0;
 HEAP32[$gl_buffers + 12 >> 2] = 0;
 HEAP32[$gl_buffers + 16 >> 2] = 0;
 HEAP32[$gl_buffers + 20 >> 2] = 0;
 HEAP32[$gl_buffers + 24 >> 2] = 0;
 HEAP32[15488] = _sg_make_buffer($sokol_buffer_vertex) | 0;
 HEAP32[$sokol_buffer_index >> 2] = 0;
 HEAP32[$sokol_buffer_index + 4 >> 2] = 0;
 HEAP32[$sokol_buffer_index + 8 >> 2] = 2;
 HEAP32[$sokol_buffer_index + 12 >> 2] = 0;
 HEAP32[$sokol_buffer_index + 16 >> 2] = 16420;
 HEAP32[$sokol_buffer_index + 20 >> 2] = 12;
 HEAP32[$sokol_buffer_index + 24 >> 2] = 45415;
 $gl_buffers17 = $sokol_buffer_index + 28 | 0;
 HEAP32[$gl_buffers17 >> 2] = 0;
 HEAP32[$gl_buffers17 + 4 >> 2] = 0;
 HEAP32[$gl_buffers17 + 8 >> 2] = 0;
 HEAP32[$gl_buffers17 + 12 >> 2] = 0;
 HEAP32[$gl_buffers17 + 16 >> 2] = 0;
 HEAP32[$gl_buffers17 + 20 >> 2] = 0;
 HEAP32[$gl_buffers17 + 24 >> 2] = 0;
 HEAP32[15504] = _sg_make_buffer($sokol_buffer_index) | 0;
 HEAP32[$sokol_pipleine >> 2] = 0;
 HEAP32[$sokol_pipleine + 4 >> 2] = _sg_make_shader(__ZL21extrude3D_shader_desc10sg_backend(_sg_query_backend() | 0) | 0) | 0;
 _memset($sokol_pipleine + 8 | 0, 0, 288) | 0;
 HEAP32[$sokol_pipleine + 112 >> 2] = 3;
 HEAP32[$sokol_pipleine + 124 >> 2] = 3;
 HEAP32[$sokol_pipleine + 136 >> 2] = 2;
 HEAP32[$sokol_pipleine + 148 >> 2] = 3;
 $depth = $sokol_pipleine + 296 | 0;
 HEAP32[$depth >> 2] = 0;
 HEAP32[$depth + 4 >> 2] = 0;
 HEAP32[$depth + 8 >> 2] = 0;
 HEAP32[$depth + 12 >> 2] = 0;
 HEAP32[$depth + 16 >> 2] = 0;
 HEAP32[$depth + 20 >> 2] = 0;
 HEAP32[$sokol_pipleine + 300 >> 2] = 4;
 HEAP8[$sokol_pipleine + 304 >> 0] = 1;
 $7 = $sokol_pipleine + 372 | 0;
 _memset($sokol_pipleine + 320 | 0, 0, 188) | 0;
 HEAP32[$7 >> 2] = HEAP32[3180];
 HEAP32[$7 + 4 >> 2] = HEAP32[3181];
 HEAP32[$7 + 8 >> 2] = HEAP32[3182];
 HEAP32[$7 + 12 >> 2] = HEAP32[3183];
 HEAP32[$7 + 16 >> 2] = HEAP32[3184];
 HEAP32[$7 + 20 >> 2] = HEAP32[3185];
 HEAP32[$7 + 24 >> 2] = HEAP32[3186];
 HEAP32[$sokol_pipleine + 508 >> 2] = 0;
 HEAP32[$sokol_pipleine + 512 >> 2] = 2;
 HEAP32[$sokol_pipleine + 516 >> 2] = 2;
 $face_winding = $sokol_pipleine + 520 | 0;
 HEAP32[$face_winding >> 2] = 0;
 HEAP32[$face_winding + 4 >> 2] = 0;
 HEAP32[$face_winding + 8 >> 2] = 0;
 HEAP32[$face_winding + 12 >> 2] = 0;
 HEAP32[$face_winding + 16 >> 2] = 0;
 HEAP32[$face_winding + 20 >> 2] = 0;
 HEAP8[$face_winding + 24 >> 0] = 0;
 HEAP32[$sokol_pipleine + 548 >> 2] = 45428;
 HEAP32[$sokol_pipleine + 552 >> 2] = 0;
 HEAP32[15486] = _sg_make_pipeline($sokol_pipleine) | 0;
 HEAP32[15518] = _sg_alloc_image() | 0;
 HEAP32[$image_file >> 2] = 0;
 HEAP32[$image_file + 4 >> 2] = 0;
 HEAP32[$image_file + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($image_file, 2193746, __ZNSt3__211char_traitsIcE6lengthEPKc(2193746) | 0);
 HEAP32[$font_file >> 2] = 0;
 HEAP32[$font_file + 4 >> 2] = 0;
 HEAP32[$font_file + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($font_file, 2193746, __ZNSt3__211char_traitsIcE6lengthEPKc(2193746) | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($image_file, 45445) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($font_file, 45463) | 0;
 HEAP32[$sokol_fetch_image >> 2] = 0;
 HEAP32[$sokol_fetch_image + 4 >> 2] = 0;
 HEAP32[$sokol_fetch_image + 8 >> 2] = (HEAP8[$image_file + 11 >> 0] | 0) < 0 ? HEAP32[$image_file >> 2] | 0 : $image_file;
 HEAP32[$sokol_fetch_image + 12 >> 2] = 93;
 HEAP32[$sokol_fetch_image + 16 >> 2] = 62124;
 HEAP32[$sokol_fetch_image + 20 >> 2] = 1048576;
 $chunk_size = $sokol_fetch_image + 24 | 0;
 HEAP32[$chunk_size >> 2] = 0;
 HEAP32[$chunk_size + 4 >> 2] = 0;
 HEAP32[$chunk_size + 8 >> 2] = 0;
 HEAP32[$chunk_size + 12 >> 2] = 0;
 _sfetch_send($sokol_fetch_image) | 0;
 HEAP32[$sokol_fetch_font >> 2] = 0;
 HEAP32[$sokol_fetch_font + 4 >> 2] = 0;
 HEAP32[$sokol_fetch_font + 8 >> 2] = (HEAP8[$font_file + 11 >> 0] | 0) < 0 ? HEAP32[$font_file >> 2] | 0 : $font_file;
 HEAP32[$sokol_fetch_font + 12 >> 2] = 94;
 HEAP32[$sokol_fetch_font + 16 >> 2] = 1115500;
 HEAP32[$sokol_fetch_font + 20 >> 2] = 1048576;
 $chunk_size87 = $sokol_fetch_font + 24 | 0;
 HEAP32[$chunk_size87 >> 2] = 0;
 HEAP32[$chunk_size87 + 4 >> 2] = 0;
 HEAP32[$chunk_size87 + 8 >> 2] = 0;
 HEAP32[$chunk_size87 + 12 >> 2] = 0;
 _sfetch_send($sokol_fetch_font) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($font_file);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($image_file);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $17 = 0, $18 = 0, $__flags34 = 0, $add$ptr = 0, $add$ptr64 = 0, $does_dst_type_point_to_our_static_type$0 = 0, $does_dst_type_point_to_our_static_type$1 = 0, $does_dst_type_point_to_our_static_type$273 = 0, $does_dst_type_point_to_our_static_type$274 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr69 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr76 = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr99 = 0, $search_done = 0, $search_done110 = 0, $search_done79 = 0, $search_done92 = 0, label = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $17 = HEAP32[$this + 12 >> 2] | 0;
   $add$ptr64 = $this + 16 + ($17 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
   $incdec$ptr69 = $this + 24 | 0;
   if (($17 | 0) <= 1) break;
   $18 = HEAP32[$this + 8 >> 2] | 0;
   if (!($18 & 2)) {
    $number_to_static_ptr76 = $info + 36 | 0;
    if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $search_done110 = $info + 54 | 0;
      $p65$2 = $incdec$ptr69;
      while (1) {
       if (HEAP8[$search_done110 >> 0] | 0) break L1;
       if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2, $info, $current_ptr, $path_below, $use_strcmp);
       $p65$2 = $p65$2 + 8 | 0;
       if ($p65$2 >>> 0 >= $add$ptr64 >>> 0) break L1;
      }
     }
     $path_dst_ptr_to_static_ptr99 = $info + 24 | 0;
     $search_done92 = $info + 54 | 0;
     $p65$1 = $incdec$ptr69;
     while (1) {
      if (HEAP8[$search_done92 >> 0] | 0) break L1;
      if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) if ((HEAP32[$path_dst_ptr_to_static_ptr99 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1, $info, $current_ptr, $path_below, $use_strcmp);
      $p65$1 = $p65$1 + 8 | 0;
      if ($p65$1 >>> 0 >= $add$ptr64 >>> 0) break L1;
     }
    }
   }
   $search_done79 = $info + 54 | 0;
   $p65$0 = $incdec$ptr69;
   while (1) {
    if (HEAP8[$search_done79 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p65$0 = $p65$0 + 8 | 0;
    if ($p65$0 >>> 0 >= $add$ptr64 >>> 0) break L1;
   }
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
     $add$ptr = $this + 16 + (HEAP32[$this + 12 >> 2] << 3) | 0;
     $found_our_static_ptr = $info + 52 | 0;
     $found_any_static_type = $info + 53 | 0;
     $search_done = $info + 54 | 0;
     $__flags34 = $this + 8 | 0;
     $path_dst_ptr_to_static_ptr = $info + 24 | 0;
     $does_dst_type_point_to_our_static_type$0 = 0;
     $is_dst_type_derived_from_static_type13$0$off0 = 0;
     $p$0 = $this + 16 | 0;
     L33 : while (1) {
      if ($p$0 >>> 0 >= $add$ptr >>> 0) {
       label = 18;
       break;
      }
      HEAP8[$found_our_static_ptr >> 0] = 0;
      HEAP8[$found_any_static_type >> 0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
      if (HEAP8[$search_done >> 0] | 0) {
       label = 18;
       break;
      }
      do if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
       $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
       $is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
      } else {
       if (!(HEAP8[$found_our_static_ptr >> 0] | 0)) if (!(HEAP32[$__flags34 >> 2] & 1)) {
        $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
        label = 19;
        break L33;
       } else {
        $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
        $is_dst_type_derived_from_static_type13$1$off0 = 1;
        break;
       }
       if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
        $does_dst_type_point_to_our_static_type$274 = 1;
        label = 19;
        break L33;
       }
       if (!(HEAP32[$__flags34 >> 2] & 2)) {
        $does_dst_type_point_to_our_static_type$274 = 1;
        label = 19;
        break L33;
       } else {
        $does_dst_type_point_to_our_static_type$1 = 1;
        $is_dst_type_derived_from_static_type13$1$off0 = 1;
       }
      } while (0);
      $does_dst_type_point_to_our_static_type$0 = $does_dst_type_point_to_our_static_type$1;
      $is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;
      $p$0 = $p$0 + 8 | 0;
     }
     if ((label | 0) == 18) if ($is_dst_type_derived_from_static_type13$0$off0) {
      $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
      label = 19;
     } else {
      $12 = 4;
      $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$0;
     }
     if ((label | 0) == 19) {
      $12 = 3;
      $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$274;
     }
     HEAP32[$is_dst_type_derived_from_static_type >> 2] = $12;
     if ($does_dst_type_point_to_our_static_type$273 & 1) break;
    }
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
    if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
    HEAP8[$info + 54 >> 0] = 1;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _stbi__create_png_image($a, $image_data, $image_data_len, $out_n, $depth, $color, $interlaced) {
 $a = $a | 0;
 $image_data = $image_data | 0;
 $image_data_len = $image_data_len | 0;
 $out_n = $out_n | 0;
 $depth = $depth | 0;
 $color = $color | 0;
 $interlaced = $interlaced | 0;
 var $4 = 0, $62 = 0, $97 = 0, $a$addr = 0, $add$ptr = 0, $add$ptr54 = 0, $add$ptr58 = 0, $add29 = 0, $bytes = 0, $color$addr = 0, $depth$addr = 0, $final = 0, $i = 0, $image_data$addr = 0, $image_data_len$addr = 0, $img_len = 0, $interlaced$addr = 0, $j = 0, $mul26 = 0, $mul42 = 0, $mul46 = 0, $mul51 = 0, $mul55 = 0, $out_bytes = 0, $out_n$addr = 0, $out_x = 0, $out_y = 0, $p = 0, $retval = 0, $x = 0, $xorig = 0, $xspc = 0, $y = 0, $yorig = 0, $yspc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $retval = sp + 196 | 0;
 $a$addr = sp + 192 | 0;
 $image_data$addr = sp + 188 | 0;
 $image_data_len$addr = sp + 184 | 0;
 $out_n$addr = sp + 180 | 0;
 $depth$addr = sp + 176 | 0;
 $color$addr = sp + 172 | 0;
 $interlaced$addr = sp + 168 | 0;
 $bytes = sp + 164 | 0;
 $out_bytes = sp + 160 | 0;
 $final = sp + 156 | 0;
 $p = sp + 152 | 0;
 $xorig = sp + 96 | 0;
 $yorig = sp + 64 | 0;
 $xspc = sp + 32 | 0;
 $yspc = sp;
 $i = sp + 148 | 0;
 $j = sp + 144 | 0;
 $x = sp + 140 | 0;
 $y = sp + 136 | 0;
 $img_len = sp + 132 | 0;
 $out_y = sp + 128 | 0;
 $out_x = sp + 124 | 0;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$image_data$addr >> 2] = $image_data;
 HEAP32[$image_data_len$addr >> 2] = $image_data_len;
 HEAP32[$out_n$addr >> 2] = $out_n;
 HEAP32[$depth$addr >> 2] = $depth;
 HEAP32[$color$addr >> 2] = $color;
 HEAP32[$interlaced$addr >> 2] = $interlaced;
 HEAP32[$bytes >> 2] = (HEAP32[$depth$addr >> 2] | 0) == 16 ? 2 : 1;
 HEAP32[$out_bytes >> 2] = Math_imul(HEAP32[$out_n$addr >> 2] | 0, HEAP32[$bytes >> 2] | 0) | 0;
 $4 = HEAP32[$a$addr >> 2] | 0;
 if (!(HEAP32[$interlaced$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__create_png_image_raw($4, HEAP32[$image_data$addr >> 2] | 0, HEAP32[$image_data_len$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0, HEAP32[HEAP32[HEAP32[$a$addr >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[$depth$addr >> 2] | 0, HEAP32[$color$addr >> 2] | 0) | 0;
  $97 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $97 | 0;
 }
 HEAP32[$final >> 2] = _stbi__malloc_mad3(HEAP32[HEAP32[$4 >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[$out_bytes >> 2] | 0, 0) | 0;
 HEAP32[$p >> 2] = 0;
 while (1) {
  if ((HEAP32[$p >> 2] | 0) >= 7) {
   label = 16;
   break;
  };
  HEAP32[$xorig >> 2] = HEAP32[2172];
  HEAP32[$xorig + 4 >> 2] = HEAP32[2173];
  HEAP32[$xorig + 8 >> 2] = HEAP32[2174];
  HEAP32[$xorig + 12 >> 2] = HEAP32[2175];
  HEAP32[$xorig + 16 >> 2] = HEAP32[2176];
  HEAP32[$xorig + 20 >> 2] = HEAP32[2177];
  HEAP32[$xorig + 24 >> 2] = HEAP32[2178];
  HEAP32[$yorig >> 2] = HEAP32[2180];
  HEAP32[$yorig + 4 >> 2] = HEAP32[2181];
  HEAP32[$yorig + 8 >> 2] = HEAP32[2182];
  HEAP32[$yorig + 12 >> 2] = HEAP32[2183];
  HEAP32[$yorig + 16 >> 2] = HEAP32[2184];
  HEAP32[$yorig + 20 >> 2] = HEAP32[2185];
  HEAP32[$yorig + 24 >> 2] = HEAP32[2186];
  HEAP32[$xspc >> 2] = HEAP32[2188];
  HEAP32[$xspc + 4 >> 2] = HEAP32[2189];
  HEAP32[$xspc + 8 >> 2] = HEAP32[2190];
  HEAP32[$xspc + 12 >> 2] = HEAP32[2191];
  HEAP32[$xspc + 16 >> 2] = HEAP32[2192];
  HEAP32[$xspc + 20 >> 2] = HEAP32[2193];
  HEAP32[$xspc + 24 >> 2] = HEAP32[2194];
  HEAP32[$yspc >> 2] = HEAP32[2196];
  HEAP32[$yspc + 4 >> 2] = HEAP32[2197];
  HEAP32[$yspc + 8 >> 2] = HEAP32[2198];
  HEAP32[$yspc + 12 >> 2] = HEAP32[2199];
  HEAP32[$yspc + 16 >> 2] = HEAP32[2200];
  HEAP32[$yspc + 20 >> 2] = HEAP32[2201];
  HEAP32[$yspc + 24 >> 2] = HEAP32[2202];
  HEAP32[$x >> 2] = (((HEAP32[HEAP32[HEAP32[$a$addr >> 2] >> 2] >> 2] | 0) - (HEAP32[$xorig + (HEAP32[$p >> 2] << 2) >> 2] | 0) + (HEAP32[$xspc + (HEAP32[$p >> 2] << 2) >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[$xspc + (HEAP32[$p >> 2] << 2) >> 2] | 0) >>> 0) | 0;
  HEAP32[$y >> 2] = (((HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[$yorig + (HEAP32[$p >> 2] << 2) >> 2] | 0) + (HEAP32[$yspc + (HEAP32[$p >> 2] << 2) >> 2] | 0) - 1 | 0) >>> 0) / ((HEAP32[$yspc + (HEAP32[$p >> 2] << 2) >> 2] | 0) >>> 0) | 0;
  if ((HEAP32[$x >> 2] | 0) != 0 & (HEAP32[$y >> 2] | 0) != 0) {
   $mul26 = Math_imul(HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 8 >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
   $add29 = ((Math_imul($mul26, HEAP32[$depth$addr >> 2] | 0) | 0) + 7 >> 3) + 1 | 0;
   HEAP32[$img_len >> 2] = Math_imul($add29, HEAP32[$y >> 2] | 0) | 0;
   if (!(_stbi__create_png_image_raw(HEAP32[$a$addr >> 2] | 0, HEAP32[$image_data$addr >> 2] | 0, HEAP32[$image_data_len$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$y >> 2] | 0, HEAP32[$depth$addr >> 2] | 0, HEAP32[$color$addr >> 2] | 0) | 0)) {
    label = 7;
    break;
   }
   HEAP32[$j >> 2] = 0;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$y >> 2] | 0)) break;
    HEAP32[$i >> 2] = 0;
    while (1) {
     $62 = HEAP32[$j >> 2] | 0;
     if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$x >> 2] | 0)) break;
     $mul42 = Math_imul($62, HEAP32[$yspc + (HEAP32[$p >> 2] << 2) >> 2] | 0) | 0;
     HEAP32[$out_y >> 2] = $mul42 + (HEAP32[$yorig + (HEAP32[$p >> 2] << 2) >> 2] | 0);
     $mul46 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$xspc + (HEAP32[$p >> 2] << 2) >> 2] | 0) | 0;
     HEAP32[$out_x >> 2] = $mul46 + (HEAP32[$xorig + (HEAP32[$p >> 2] << 2) >> 2] | 0);
     $mul51 = Math_imul(HEAP32[$out_y >> 2] | 0, HEAP32[HEAP32[HEAP32[$a$addr >> 2] >> 2] >> 2] | 0) | 0;
     $add$ptr = (HEAP32[$final >> 2] | 0) + (Math_imul($mul51, HEAP32[$out_bytes >> 2] | 0) | 0) | 0;
     $add$ptr54 = $add$ptr + (Math_imul(HEAP32[$out_x >> 2] | 0, HEAP32[$out_bytes >> 2] | 0) | 0) | 0;
     $mul55 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
     $add$ptr58 = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul($mul55 + (HEAP32[$i >> 2] | 0) | 0, HEAP32[$out_bytes >> 2] | 0) | 0) | 0;
     _memcpy($add$ptr54 | 0, $add$ptr58 | 0, HEAP32[$out_bytes >> 2] | 0) | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    HEAP32[$j >> 2] = $62 + 1;
   }
   _free(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0);
   HEAP32[$image_data$addr >> 2] = (HEAP32[$image_data$addr >> 2] | 0) + (HEAP32[$img_len >> 2] | 0);
   HEAP32[$image_data_len$addr >> 2] = (HEAP32[$image_data_len$addr >> 2] | 0) - (HEAP32[$img_len >> 2] | 0);
  }
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  _free(HEAP32[$final >> 2] | 0);
  HEAP32[$retval >> 2] = 0;
  $97 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $97 | 0;
 } else if ((label | 0) == 16) {
  HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] = HEAP32[$final >> 2];
  HEAP32[$retval >> 2] = 1;
  $97 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $97 | 0;
 }
 return 0;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr303 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add105 = 0, $add58 = 0, $and = 0, $and2 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $bk164 = 0, $child = 0, $child249 = 0, $fd138 = 0, $fd148$pre$phiZ2D = 0, $fd167 = 0, $head = 0, $head299 = 0, $head318 = 0, $head6 = 0, $head79 = 0, $head92 = 0, $newp$2 = 0, $shr = 0, $storemerge = 0, $storemerge3 = 0, $sub = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0;
 $head = $p + 4 | 0;
 $0 = HEAP32[$head >> 2] | 0;
 $and = $0 & -8;
 $add$ptr = $p + $and | 0;
 $1 = HEAP32[548311] | 0;
 $and2 = $0 & 3;
 if (!(($and2 | 0) != 1 & $1 >>> 0 <= $p >>> 0 & $add$ptr >>> 0 > $p >>> 0)) _abort();
 $head6 = $add$ptr + 4 | 0;
 $2 = HEAP32[$head6 >> 2] | 0;
 if (!($2 & 1)) _abort();
 if (!$and2) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($and >>> 0 >= ($nb + 4 | 0) >>> 0) if (($and - $nb | 0) >>> 0 <= HEAP32[548427] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($and >>> 0 >= $nb >>> 0) {
  $sub = $and - $nb | 0;
  if ($sub >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $add$ptr17 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr17 + 4 >> 2] = $sub | 3;
  HEAP32[$head6 >> 2] = HEAP32[$head6 >> 2] | 1;
  _dispose_chunk($add$ptr17, $sub);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[548313] | 0) == ($add$ptr | 0)) {
  $add = (HEAP32[548310] | 0) + $and | 0;
  $sub40 = $add - $nb | 0;
  $add$ptr41 = $p + $nb | 0;
  if ($add >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr41 + 4 >> 2] = $sub40 | 1;
  HEAP32[548313] = $add$ptr41;
  HEAP32[548310] = $sub40;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[548312] | 0) == ($add$ptr | 0)) {
  $add58 = (HEAP32[548309] | 0) + $and | 0;
  if ($add58 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $sub62 = $add58 - $nb | 0;
  if ($sub62 >>> 0 > 15) {
   $add$ptr66 = $p + $nb | 0;
   $add$ptr67 = $p + $add58 | 0;
   HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
   HEAP32[$add$ptr66 + 4 >> 2] = $sub62 | 1;
   HEAP32[$add$ptr67 >> 2] = $sub62;
   $head79 = $add$ptr67 + 4 | 0;
   HEAP32[$head79 >> 2] = HEAP32[$head79 >> 2] & -2;
   $storemerge = $add$ptr66;
   $storemerge3 = $sub62;
  } else {
   HEAP32[$head >> 2] = $0 & 1 | $add58 | 2;
   $head92 = $p + $add58 + 4 | 0;
   HEAP32[$head92 >> 2] = HEAP32[$head92 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[548309] = $storemerge3;
  HEAP32[548312] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($2 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $add105 = ($2 & -8) + $and | 0;
 if ($add105 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $sub110 = $add105 - $nb | 0;
 $shr = $2 >>> 3;
 L49 : do if ($2 >>> 0 < 256) {
  $11 = HEAP32[$add$ptr + 8 >> 2] | 0;
  $12 = HEAP32[$add$ptr + 12 >> 2] | 0;
  $arrayidx = 2193268 + ($shr << 1 << 2) | 0;
  if (($11 | 0) != ($arrayidx | 0)) {
   if ($1 >>> 0 > $11 >>> 0) _abort();
   if ((HEAP32[$11 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
  }
  if (($12 | 0) == ($11 | 0)) {
   HEAP32[548307] = HEAP32[548307] & ~(1 << $shr);
   break;
  }
  if (($12 | 0) == ($arrayidx | 0)) $fd148$pre$phiZ2D = $12 + 8 | 0; else {
   if ($1 >>> 0 > $12 >>> 0) _abort();
   $fd138 = $12 + 8 | 0;
   if ((HEAP32[$fd138 >> 2] | 0) == ($add$ptr | 0)) $fd148$pre$phiZ2D = $fd138; else _abort();
  }
  HEAP32[$11 + 12 >> 2] = $12;
  HEAP32[$fd148$pre$phiZ2D >> 2] = $11;
 } else {
  $16 = HEAP32[$add$ptr + 24 >> 2] | 0;
  $17 = HEAP32[$add$ptr + 12 >> 2] | 0;
  do if (($17 | 0) == ($add$ptr | 0)) {
   $child = $add$ptr + 16 | 0;
   $arrayidx179 = $child + 4 | 0;
   $21 = HEAP32[$arrayidx179 >> 2] | 0;
   if (!$21) {
    $22 = HEAP32[$child >> 2] | 0;
    if (!$22) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $22;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $21;
    $RP$1$ph = $arrayidx179;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx186 = $R$1 + 20 | 0;
    $23 = HEAP32[$arrayidx186 >> 2] | 0;
    if (!$23) {
     $arrayidx190 = $R$1 + 16 | 0;
     $24 = HEAP32[$arrayidx190 >> 2] | 0;
     if (!$24) break; else {
      $R$1$be = $24;
      $RP$1$be = $arrayidx190;
     }
    } else {
     $R$1$be = $23;
     $RP$1$be = $arrayidx186;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($1 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $18 = HEAP32[$add$ptr + 8 >> 2] | 0;
   if ($1 >>> 0 > $18 >>> 0) _abort();
   $bk164 = $18 + 12 | 0;
   if ((HEAP32[$bk164 >> 2] | 0) != ($add$ptr | 0)) _abort();
   $fd167 = $17 + 8 | 0;
   if ((HEAP32[$fd167 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$bk164 >> 2] = $17;
    HEAP32[$fd167 >> 2] = $18;
    $R$3 = $17;
    break;
   } else _abort();
  } while (0);
  if ($16 | 0) {
   $25 = HEAP32[$add$ptr + 28 >> 2] | 0;
   $arrayidx206 = 2193532 + ($25 << 2) | 0;
   do if ((HEAP32[$arrayidx206 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$arrayidx206 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[548308] = HEAP32[548308] & ~(1 << $25);
     break L49;
    }
   } else if ((HEAP32[548311] | 0) >>> 0 > $16 >>> 0) _abort(); else {
    $arrayidx226 = $16 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx226 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx226 : $16 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) break L49; else break;
   } while (0);
   $30 = HEAP32[548311] | 0;
   if ($30 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $16;
   $child249 = $add$ptr + 16 | 0;
   $31 = HEAP32[$child249 >> 2] | 0;
   do if ($31 | 0) if ($30 >>> 0 > $31 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $31;
    HEAP32[$31 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $32 = HEAP32[$child249 + 4 >> 2] | 0;
   if ($32 | 0) if ((HEAP32[548311] | 0) >>> 0 > $32 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $32;
    HEAP32[$32 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 if ($sub110 >>> 0 < 16) {
  HEAP32[$head >> 2] = $0 & 1 | $add105 | 2;
  $head299 = $p + $add105 + 4 | 0;
  HEAP32[$head299 >> 2] = HEAP32[$head299 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $add$ptr303 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr303 + 4 >> 2] = $sub110 | 3;
  $head318 = $p + $add105 + 4 | 0;
  HEAP32[$head318 >> 2] = HEAP32[$head318 >> 2] | 1;
  _dispose_chunk($add$ptr303, $sub110);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function _stbi__bmp_parse_header($s, $info) {
 $s = $s | 0;
 $info = $info | 0;
 var $106 = 0, $23 = 0, $48 = 0, $call10 = 0, $call11 = 0, $call111 = 0, $call113 = 0, $call115 = 0, $call149 = 0, $call151 = 0, $call153 = 0, $call155 = 0, $call34 = 0, $call35 = 0, $call36 = 0, $call38 = 0, $call49 = 0, $compress = 0, $hsz = 0, $i = 0, $info$addr = 0, $mr98 = 0, $retval = 0, $s$addr = 0, $tobool = 0, $tobool128 = 0, $tobool133 = 0, $tobool146 = 0, $tobool28 = 0, $tobool46 = 0, $tobool61 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 20 | 0;
 $s$addr = sp + 16 | 0;
 $info$addr = sp + 12 | 0;
 $hsz = sp + 8 | 0;
 $compress = sp + 4 | 0;
 $i = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$info$addr >> 2] = $info;
 if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 66) if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 77) {
  _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
  _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
  _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
  $call10 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] = $call10;
  $call11 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP32[$hsz >> 2] = $call11;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 8 >> 2] = $call11;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] = 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] = 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 12 >> 2] = 0;
  if ((HEAP32[$hsz >> 2] | 0) != 12 & (HEAP32[$hsz >> 2] | 0) != 40 & (HEAP32[$hsz >> 2] | 0) != 56 & (HEAP32[$hsz >> 2] | 0) != 108 & (HEAP32[$hsz >> 2] | 0) != 124) {
   $tobool28 = (_stbi__err(48196) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool28 ? 0 : 0;
   $106 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $106 | 0;
  }
  $23 = HEAP32[$s$addr >> 2] | 0;
  if ((HEAP32[$hsz >> 2] | 0) == 12) {
   $call34 = _stbi__get16le($23) | 0;
   HEAP32[HEAP32[$s$addr >> 2] >> 2] = $call34;
   $call35 = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] = $call35;
  } else {
   $call36 = _stbi__get32le($23) | 0;
   HEAP32[HEAP32[$s$addr >> 2] >> 2] = $call36;
   $call38 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] = $call38;
  }
  if ((_stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0) != 1) {
   $tobool46 = (_stbi__err(48208) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool46 ? 0 : 0;
   $106 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $106 | 0;
  }
  $call49 = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP32[HEAP32[$info$addr >> 2] >> 2] = $call49;
  do if ((HEAP32[$hsz >> 2] | 0) != 12) {
   HEAP32[$compress >> 2] = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   if ((HEAP32[$compress >> 2] | 0) == 1 | (HEAP32[$compress >> 2] | 0) == 2) {
    $tobool61 = (_stbi__err(48216) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool61 ? 0 : 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
   _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   $48 = HEAP32[$hsz >> 2] | 0;
   if (!((HEAP32[$hsz >> 2] | 0) == 40 | (HEAP32[$hsz >> 2] | 0) == 56)) {
    if (($48 | 0) != 108 & (HEAP32[$hsz >> 2] | 0) != 124) {
     $tobool146 = (_stbi__err(48208) | 0) != 0;
     HEAP32[$retval >> 2] = $tobool146 ? 0 : 0;
     $106 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $106 | 0;
    }
    $call149 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    HEAP32[(HEAP32[$info$addr >> 2] | 0) + 12 >> 2] = $call149;
    $call151 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] = $call151;
    $call153 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] = $call153;
    $call155 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] = $call155;
    _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >= 12) break;
     _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    if ((HEAP32[$hsz >> 2] | 0) != 124) break;
    _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    break;
   }
   if (($48 | 0) == 56) {
    _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
    _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   }
   if ((HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0) != 16) if ((HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0) != 32) break;
   if (!(HEAP32[$compress >> 2] | 0)) {
    $mr98 = (HEAP32[$info$addr >> 2] | 0) + 12 | 0;
    if ((HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0) == 32) {
     HEAP32[$mr98 >> 2] = 16711680;
     HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] = 65280;
     HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] = 255;
     HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] = -16777216;
     HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] = 0;
     break;
    } else {
     HEAP32[$mr98 >> 2] = 31744;
     HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] = 992;
     HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] = 31;
     break;
    }
   }
   if ((HEAP32[$compress >> 2] | 0) != 3) {
    $tobool133 = (_stbi__err(48208) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool133 ? 0 : 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
   $call111 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP32[(HEAP32[$info$addr >> 2] | 0) + 12 >> 2] = $call111;
   $call113 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] = $call113;
   $call115 = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] = $call115;
   if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] | 0)) if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] | 0)) {
    $tobool128 = (_stbi__err(48208) | 0) != 0;
    HEAP32[$retval >> 2] = $tobool128 ? 0 : 0;
    $106 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $106 | 0;
   }
  } while (0);
  HEAP32[$retval >> 2] = 1;
  $106 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $106 | 0;
 }
 $tobool = (_stbi__err(48188) | 0) != 0;
 HEAP32[$retval >> 2] = $tobool ? 0 : 0;
 $106 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $106 | 0;
}

function __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($agg$result, $point_list, $epsilon) {
 $agg$result = $agg$result | 0;
 $point_list = $point_list | 0;
 $epsilon = +$epsilon;
 var $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre68 = 0, $$pre71 = 0, $1 = 0, $2 = 0, $__end_$i = 0, $__end_$i$i = 0, $__value_$i$i$i$i = 0, $agg$tmp = 0, $agg$tmp19 = 0, $agg$tmp29 = 0, $agg$tmp35 = 0, $agg$tmp44 = 0, $agg$tmp47 = 0, $agg$tmp55 = 0, $agg$tmp55$byval_copy = 0, $agg$tmp58 = 0, $agg$tmp58$byval_copy = 0, $agg$tmp61 = 0, $agg$tmp61$byval_copy = 0, $arrayidx$i51 = 0, $call12 = 0.0, $cmp13 = 0, $dmax$0 = 0.0, $exception = 0, $exception72 = 0, $first_line = 0, $i$0 = 0, $index$0 = 0, $index$1 = 0, $last_line = 0, $recursive_results1 = 0, $recursive_results2 = 0, $simplified = 0, $sub = 0, $sub$ptr$div$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $agg$tmp61$byval_copy = sp + 104 | 0;
 $agg$tmp58$byval_copy = sp + 100 | 0;
 $agg$tmp55$byval_copy = sp + 96 | 0;
 $simplified = sp + 68 | 0;
 $first_line = sp + 56 | 0;
 $agg$tmp = sp + 92 | 0;
 $agg$tmp19 = sp + 88 | 0;
 $last_line = sp + 44 | 0;
 $agg$tmp29 = sp + 84 | 0;
 $agg$tmp35 = sp + 80 | 0;
 $recursive_results1 = sp + 28 | 0;
 $recursive_results2 = sp + 12 | 0;
 $agg$tmp44 = sp + 40 | 0;
 $agg$tmp47 = sp + 24 | 0;
 $agg$tmp55 = sp + 8 | 0;
 $agg$tmp58 = sp + 4 | 0;
 $agg$tmp61 = sp;
 HEAP32[$simplified >> 2] = 0;
 $__end_$i$i = $simplified + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $simplified + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 $__end_$i = $point_list + 4 | 0;
 $1 = HEAP32[$point_list >> 2] | 0;
 $sub$ptr$div$i = (HEAP32[$__end_$i >> 2] | 0) - $1 >> 4;
 $2 = $1;
 if ($sub$ptr$div$i >>> 0 < 2) {
  $exception = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception, 47320);
  HEAP32[$exception >> 2] = 16320;
  ___cxa_throw($exception | 0, 12512, 84);
 }
 $sub = $sub$ptr$div$i + -1 | 0;
 $arrayidx$i51 = $2 + ($sub << 4) | 0;
 $dmax$0 = 0.0;
 $i$0 = 1;
 $index$0 = 0;
 while (1) {
  if (($i$0 | 0) == ($sub | 0)) break;
  $call12 = +__Z21PerpendicularDistanceRK8DrPointFS1_S1_($2 + ($i$0 << 4) | 0, $2, $arrayidx$i51);
  $cmp13 = $call12 > $dmax$0;
  $index$1 = $cmp13 ? $i$0 : $index$0;
  $dmax$0 = $cmp13 ? $call12 : $dmax$0;
  $i$0 = $i$0 + 1 | 0;
  $index$0 = $index$1;
 }
 do if ($dmax$0 > $epsilon) {
  HEAP32[$agg$tmp >> 2] = $2;
  HEAP32[$agg$tmp19 >> 2] = $2 + ($index$0 << 4) + 16;
  HEAP32[$agg$tmp58$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp61$byval_copy >> 2] = HEAP32[$agg$tmp19 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2INS_11__wrap_iterIPKS1_EEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISA_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueESA_E4typeE($first_line, $agg$tmp58$byval_copy, $agg$tmp61$byval_copy);
  HEAP32[$agg$tmp29 >> 2] = (HEAP32[$point_list >> 2] | 0) + ($index$0 << 4);
  HEAP32[$agg$tmp35 >> 2] = HEAP32[$__end_$i >> 2];
  HEAP32[$agg$tmp58$byval_copy >> 2] = HEAP32[$agg$tmp29 >> 2];
  HEAP32[$agg$tmp61$byval_copy >> 2] = HEAP32[$agg$tmp35 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2INS_11__wrap_iterIPKS1_EEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISA_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueESA_E4typeE($last_line, $agg$tmp58$byval_copy, $agg$tmp61$byval_copy);
  __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($recursive_results1, $first_line, $epsilon);
  __ZN22PolylineSimplification19RamerDouglasPeuckerERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEd($recursive_results2, $last_line, $epsilon);
  HEAP32[$agg$tmp44 >> 2] = HEAP32[$recursive_results1 >> 2];
  HEAP32[$agg$tmp47 >> 2] = (HEAP32[$recursive_results1 + 4 >> 2] | 0) + -16;
  HEAP32[$agg$tmp58$byval_copy >> 2] = HEAP32[$agg$tmp44 >> 2];
  HEAP32[$agg$tmp61$byval_copy >> 2] = HEAP32[$agg$tmp47 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE6assignINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_($simplified, $agg$tmp58$byval_copy, $agg$tmp61$byval_copy);
  HEAP32[$agg$tmp55 >> 2] = HEAP32[$__end_$i$i >> 2];
  HEAP32[$agg$tmp58 >> 2] = HEAP32[$recursive_results2 >> 2];
  HEAP32[$agg$tmp61 >> 2] = HEAP32[$recursive_results2 + 4 >> 2];
  HEAP32[$agg$tmp55$byval_copy >> 2] = HEAP32[$agg$tmp55 >> 2];
  HEAP32[$agg$tmp58$byval_copy >> 2] = HEAP32[$agg$tmp58 >> 2];
  HEAP32[$agg$tmp61$byval_copy >> 2] = HEAP32[$agg$tmp61 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueES8_E4typeENS6_IPKS1_EESA_SA_($simplified, $agg$tmp55$byval_copy, $agg$tmp58$byval_copy, $agg$tmp61$byval_copy) | 0;
  if ((HEAP32[$__end_$i$i >> 2] | 0) - (HEAP32[$simplified >> 2] | 0) >> 4 >>> 0 < 2) {
   $exception72 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc($exception72, 47350);
   ___cxa_throw($exception72 | 0, 12496, 86);
  } else {
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($recursive_results2);
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($recursive_results1);
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($last_line);
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($first_line);
   $$pre$phi70Z2D = $__end_$i$i;
   $$pre$phiZ2D = $simplified;
   break;
  }
 } else {
  HEAP32[$__end_$i$i >> 2] = 0;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($simplified, $2);
  $$pre68 = HEAP32[$__end_$i$i >> 2] | 0;
  $$pre71 = (HEAP32[$point_list >> 2] | 0) + ($sub << 4) | 0;
  if (($$pre68 | 0) == (HEAP32[$__value_$i$i$i$i >> 2] | 0)) {
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($simplified, $$pre71);
   $$pre$phi70Z2D = $__end_$i$i;
   $$pre$phiZ2D = $simplified;
   break;
  } else {
   HEAP32[$$pre68 >> 2] = HEAP32[$$pre71 >> 2];
   HEAP32[$$pre68 + 4 >> 2] = HEAP32[$$pre71 + 4 >> 2];
   HEAP32[$$pre68 + 8 >> 2] = HEAP32[$$pre71 + 8 >> 2];
   HEAP32[$$pre68 + 12 >> 2] = HEAP32[$$pre71 + 12 >> 2];
   HEAP32[$__end_$i$i >> 2] = $$pre68 + 16;
   $$pre$phi70Z2D = $__end_$i$i;
   $$pre$phiZ2D = $simplified;
   break;
  }
 } while (0);
 HEAP32[$agg$result >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$$pre$phi70Z2D >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$__value_$i$i$i$i >> 2];
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 HEAP32[$simplified >> 2] = 0;
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($simplified);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($this) {
 $this = $this | 0;
 var $Attrs = 0, $IsEndOfEncoding = 0, $Name = 0, $NameInfo = 0, $Names = 0, $Names49 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call20 = 0, $call23 = 0, $call39 = 0, $call50 = 0, $call52 = 0, $call7 = 0, $call8 = 0, $ref$tmp46 = 0, $retval$10 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp$byval_copy = sp + 48 | 0;
 $IsEndOfEncoding = sp + 40 | 0;
 $NameInfo = sp + 24 | 0;
 $Name = sp + 20 | 0;
 $Attrs = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $ref$tmp46 = sp;
 switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
 case 84:
 case 71:
  {
   $retval$10 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break;
  }
 default:
  {
   HEAP32[$IsEndOfEncoding >> 2] = $this;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_($NameInfo, $this);
   $call7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call7, $NameInfo) | 0;
   HEAP32[$Name >> 2] = $call8;
   if (!$call8) $retval$9 = 0; else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE($this, $NameInfo) | 0) $retval$9 = 0; else if (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($IsEndOfEncoding) | 0) $retval$9 = $call8; else {
    HEAP32[$Attrs >> 2] = 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56824);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
    HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
    do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0) {
     $Names = $this + 8 | 0;
     $call20 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
     while (1) {
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
       label = 11;
       break;
      }
      $call23 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call7) | 0;
      HEAP32[$agg$tmp$byval_copy >> 2] = $call23;
      if (!$call23) {
       label = 12;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp$byval_copy);
     }
     if ((label | 0) == 11) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp$byval_copy, $this, $call20);
      HEAP32[$Attrs >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp$byval_copy) | 0;
      label = 13;
      break;
     } else if ((label | 0) == 12) {
      $retval$8 = 0;
      break;
     }
    } else label = 13; while (0);
    if ((label | 0) == 13) {
     HEAP32[$agg$tmp$byval_copy >> 2] = 0;
     if (!(HEAP8[$NameInfo >> 0] | 0)) if (!(HEAP8[$NameInfo + 1 >> 0] | 0)) label = 16; else {
      $call39 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call7) | 0;
      HEAP32[$agg$tmp$byval_copy >> 2] = $call39;
      if (!$call39) $retval$7 = 0; else label = 16;
     } else label = 16;
     do if ((label | 0) == 16) {
      if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 118) | 0) {
       __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($ref$tmp46);
       $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $Name, $ref$tmp46, $Attrs, $NameInfo + 4 | 0, $NameInfo + 8 | 0) | 0;
       break;
      }
      $Names49 = $this + 8 | 0;
      $call50 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names49) | 0;
      while (1) {
       $call52 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call7) | 0;
       HEAP32[$ref$tmp46 >> 2] = $call52;
       if (!$call52) {
        label = 21;
        break;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names49, $ref$tmp46);
       if (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($IsEndOfEncoding) | 0) {
        label = 22;
        break;
       }
      }
      if ((label | 0) == 21) {
       $retval$7 = 0;
       break;
      } else if ((label | 0) == 22) {
       __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp46, $this, $call50);
       $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $Name, $ref$tmp46, $Attrs, $NameInfo + 4 | 0, $NameInfo + 8 | 0) | 0;
       break;
      }
     } while (0);
     $retval$8 = $retval$7;
    }
    $retval$9 = $retval$8;
   }
   $retval$10 = $retval$9;
  }
 }
 STACKTOP = sp;
 return $retval$10 | 0;
}

function __ZN2Dr19FindObjectsInBitmapERK8DrBitmapRNSt3__26vectorIS0_NS3_9allocatorIS0_EEEERNS4_I6DrRectNS5_IS9_EEEEdb($bitmap, $bitmaps, $rects, $alpha_tolerance, $convert) {
 $bitmap = $bitmap | 0;
 $bitmaps = $bitmaps | 0;
 $rects = $rects | 0;
 $alpha_tolerance = +$alpha_tolerance;
 $convert = $convert | 0;
 var $0 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $22 = 0, $7 = 0, $__end_$i = 0, $__end_$i34 = 0, $__end_$i42 = 0, $__end_$i50 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i35 = 0, $agg$tmp = 0, $agg$tmp110 = 0, $agg$tmp110$byval_copy = 0, $black_white = 0, $compare = 0, $flood_fill = 0, $flood_pixel_count = 0, $height = 0, $height65 = 0, $rect = 0, $tmp = 0, $tmp48 = 0, $width = 0, $width63 = 0, $x$0 = 0, $x36$0 = 0, $x98$0 = 0, $y$0 = 0, $y104$0 = 0, $y42$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $agg$tmp110$byval_copy = sp + 76 | 0;
 $black_white = sp + 48 | 0;
 $compare = sp + 116 | 0;
 $tmp = sp + 120 | 0;
 $tmp48 = sp + 112 | 0;
 $rect = sp + 32 | 0;
 $flood_pixel_count = sp + 28 | 0;
 $flood_fill = sp;
 $agg$tmp = sp + 108 | 0;
 $agg$tmp110 = sp + 104 | 0;
 __ZN8DrBitmapC2E13Bitmap_Format($black_white, 4);
 if ($convert) {
  __ZN2Dr22BlackAndWhiteFromAlphaERK8DrBitmapdb13Bitmap_Format($agg$tmp110$byval_copy, $bitmap, $alpha_tolerance, 1, 4);
  __ZN8DrBitmapaSERKS_($black_white, $agg$tmp110$byval_copy) | 0;
  __ZN8DrBitmapD2Ev($agg$tmp110$byval_copy);
 } else __ZN8DrBitmapaSERKS_($black_white, $bitmap) | 0;
 __ZN7DrColorC2Ej($compare, 0);
 $width = $black_white + 8 | 0;
 $height = $black_white + 12 | 0;
 L5 : do if ($convert) {
  $x$0 = 0;
  while (1) {
   $0 = HEAP32[$width >> 2] | 0;
   if (($x$0 | 0) >= ($0 | 0)) break;
   $y$0 = 0;
   while (1) {
    if (($y$0 | 0) >= (HEAP32[$height >> 2] | 0)) break;
    __ZNK8DrBitmap8getPixelEii($tmp, $black_white, $x$0, $y$0);
    if (__ZNK7DrColorneERKS_($tmp, $compare) | 0) {
     label = 11;
     break L5;
    } else $y$0 = $y$0 + 1 | 0;
   }
   $x$0 = $x$0 + 1 | 0;
  }
  if (($0 | 0) > 0) {
   $13 = HEAP32[$height >> 2] | 0;
   if (($13 | 0) > 0) {
    $14 = $0;
    $22 = $13;
    $x98$0 = 0;
    while (1) {
     if (($x98$0 | 0) >= ($14 | 0)) break;
     $17 = $22;
     $y104$0 = 0;
     while (1) {
      if (($y104$0 | 0) >= ($17 | 0)) break;
      __ZN7DrColorC2Ej($agg$tmp110, -65536);
      HEAP8[$agg$tmp110$byval_copy >> 0] = HEAP8[$agg$tmp110 >> 0] | 0;
      HEAP8[$agg$tmp110$byval_copy + 1 >> 0] = HEAP8[$agg$tmp110 + 1 >> 0] | 0;
      HEAP8[$agg$tmp110$byval_copy + 2 >> 0] = HEAP8[$agg$tmp110 + 2 >> 0] | 0;
      HEAP8[$agg$tmp110$byval_copy + 3 >> 0] = HEAP8[$agg$tmp110 + 3 >> 0] | 0;
      __ZN8DrBitmap8setPixelEii7DrColor($black_white, $x98$0, $y104$0, $agg$tmp110$byval_copy);
      $17 = HEAP32[$height >> 2] | 0;
      $y104$0 = $y104$0 + 1 | 0;
     }
     $14 = HEAP32[$width >> 2] | 0;
     $22 = $17;
     $x98$0 = $x98$0 + 1 | 0;
    }
    __ZNK8DrBitmap4rectEv($agg$tmp110$byval_copy, $black_white);
    $__end_$i42 = $rects + 4 | 0;
    $15 = HEAP32[$__end_$i42 >> 2] | 0;
    if ($15 >>> 0 < (HEAP32[$rects + 8 >> 2] | 0) >>> 0) {
     __ZN6DrRectC2ERKS_($15, $agg$tmp110$byval_copy);
     HEAP32[$__end_$i42 >> 2] = (HEAP32[$__end_$i42 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($rects, $agg$tmp110$byval_copy);
    $__end_$i50 = $bitmaps + 4 | 0;
    $19 = HEAP32[$__end_$i50 >> 2] | 0;
    if (($19 | 0) == (HEAP32[$bitmaps + 8 >> 2] | 0)) {
     __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($bitmaps, $black_white);
     break;
    } else {
     __ZN8DrBitmapC2ERKS_13Bitmap_Format($19, $black_white, 4);
     HEAP32[$__end_$i50 >> 2] = (HEAP32[$__end_$i50 >> 2] | 0) + 28;
     break;
    }
   }
  }
 } else label = 11; while (0);
 L32 : do if ((label | 0) == 11) {
  $width63 = $agg$tmp110$byval_copy + 8 | 0;
  $height65 = $agg$tmp110$byval_copy + 12 | 0;
  $__end_$i = $rects + 4 | 0;
  $__value_$i$i$i$i = $rects + 8 | 0;
  $__end_$i34 = $bitmaps + 4 | 0;
  $__value_$i$i$i$i35 = $bitmaps + 8 | 0;
  $x36$0 = 0;
  while (1) {
   if (($x36$0 | 0) >= (HEAP32[$width >> 2] | 0)) break L32;
   $y42$0 = 0;
   while (1) {
    if (($y42$0 | 0) >= (HEAP32[$height >> 2] | 0)) break;
    __ZNK8DrBitmap8getPixelEii($tmp48, $black_white, $x36$0, $y42$0);
    if (__ZNK7DrColoreqERKS_($tmp48, $compare) | 0) {
     __ZN6DrRectC2Ev($rect);
     __ZN7DrColorC2Ej($agg$tmp, -65536);
     HEAP8[$agg$tmp110$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
     HEAP8[$agg$tmp110$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
     HEAP8[$agg$tmp110$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
     HEAP8[$agg$tmp110$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
     __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($flood_fill, $black_white, $x36$0, $y42$0, $agg$tmp110$byval_copy, .001, 0, $flood_pixel_count, $rect);
     __ZN6DrRect6adjustEiiii($rect, -1, -1, 1, 1);
     __ZN8DrBitmap4copyER6DrRect($agg$tmp110$byval_copy, $flood_fill, $rect);
     do if ((HEAP32[$width63 >> 2] | 0) > 0) if ((HEAP32[$height65 >> 2] | 0) > 0 & (HEAP32[$flood_pixel_count >> 2] | 0) > 1) {
      $7 = HEAP32[$__end_$i >> 2] | 0;
      if (($7 | 0) == (HEAP32[$__value_$i$i$i$i >> 2] | 0)) __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($rects, $rect); else {
       __ZN6DrRectC2ERKS_($7, $rect);
       HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 16;
      }
      $10 = HEAP32[$__end_$i34 >> 2] | 0;
      if (($10 | 0) == (HEAP32[$__value_$i$i$i$i35 >> 2] | 0)) {
       __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($bitmaps, $agg$tmp110$byval_copy);
       break;
      } else {
       __ZN8DrBitmapC2ERKS_13Bitmap_Format($10, $agg$tmp110$byval_copy, 4);
       HEAP32[$__end_$i34 >> 2] = (HEAP32[$__end_$i34 >> 2] | 0) + 28;
       break;
      }
     } while (0);
     __ZN8DrBitmapD2Ev($agg$tmp110$byval_copy);
     __ZN8DrBitmapD2Ev($flood_fill);
    }
    $y42$0 = $y42$0 + 1 | 0;
   }
   $x36$0 = $x36$0 + 1 | 0;
  }
 } while (0);
 __ZN8DrBitmapD2Ev($black_white);
 STACKTOP = sp;
 return 0;
}

function _stbtt__sort_edges_quicksort($p, $n) {
 $p = $p | 0;
 $n = $n | 0;
 var $31 = 0, $32 = 0, $65 = 0, $arrayidx22 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx28 = 0, $arrayidx29 = 0, $arrayidx55 = 0, $arrayidx56 = 0, $arrayidx57 = 0, $arrayidx58 = 0, $c = 0, $c01 = 0, $c12 = 0, $i = 0, $j = 0, $m = 0, $n$addr = 0, $p$addr = 0, $t = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $p$addr = sp + 52 | 0;
 $n$addr = sp + 48 | 0;
 $t = sp + 28 | 0;
 $c01 = sp + 24 | 0;
 $c12 = sp + 20 | 0;
 $c = sp + 16 | 0;
 $m = sp + 12 | 0;
 $i = sp + 8 | 0;
 $j = sp + 4 | 0;
 $z = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$n$addr >> 2] = $n;
 while (1) {
  if ((HEAP32[$n$addr >> 2] | 0) <= 12) break;
  HEAP32[$m >> 2] = HEAP32[$n$addr >> 2] >> 1;
  HEAP32[$c01 >> 2] = +HEAPF32[(HEAP32[$p$addr >> 2] | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$m >> 2] | 0) * 20 | 0) + 4 >> 2] & 1;
  HEAP32[$c12 >> 2] = +HEAPF32[(HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$m >> 2] | 0) * 20 | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$p$addr >> 2] | 0) + (((HEAP32[$n$addr >> 2] | 0) - 1 | 0) * 20 | 0) + 4 >> 2] & 1;
  if ((HEAP32[$c01 >> 2] | 0) != (HEAP32[$c12 >> 2] | 0)) {
   HEAP32[$c >> 2] = +HEAPF32[(HEAP32[$p$addr >> 2] | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$p$addr >> 2] | 0) + (((HEAP32[$n$addr >> 2] | 0) - 1 | 0) * 20 | 0) + 4 >> 2] & 1;
   HEAP32[$z >> 2] = (HEAP32[$c >> 2] | 0) == (HEAP32[$c12 >> 2] | 0) ? 0 : (HEAP32[$n$addr >> 2] | 0) - 1 | 0;
   $arrayidx22 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$z >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$t >> 2] = HEAP32[$arrayidx22 >> 2];
   HEAP32[$t + 4 >> 2] = HEAP32[$arrayidx22 + 4 >> 2];
   HEAP32[$t + 8 >> 2] = HEAP32[$arrayidx22 + 8 >> 2];
   HEAP32[$t + 12 >> 2] = HEAP32[$arrayidx22 + 12 >> 2];
   HEAP32[$t + 16 >> 2] = HEAP32[$arrayidx22 + 16 >> 2];
   $arrayidx23 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$z >> 2] | 0) * 20 | 0) | 0;
   $arrayidx24 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$m >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$arrayidx23 >> 2] = HEAP32[$arrayidx24 >> 2];
   HEAP32[$arrayidx23 + 4 >> 2] = HEAP32[$arrayidx24 + 4 >> 2];
   HEAP32[$arrayidx23 + 8 >> 2] = HEAP32[$arrayidx24 + 8 >> 2];
   HEAP32[$arrayidx23 + 12 >> 2] = HEAP32[$arrayidx24 + 12 >> 2];
   HEAP32[$arrayidx23 + 16 >> 2] = HEAP32[$arrayidx24 + 16 >> 2];
   $arrayidx25 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$m >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$arrayidx25 >> 2] = HEAP32[$t >> 2];
   HEAP32[$arrayidx25 + 4 >> 2] = HEAP32[$t + 4 >> 2];
   HEAP32[$arrayidx25 + 8 >> 2] = HEAP32[$t + 8 >> 2];
   HEAP32[$arrayidx25 + 12 >> 2] = HEAP32[$t + 12 >> 2];
   HEAP32[$arrayidx25 + 16 >> 2] = HEAP32[$t + 16 >> 2];
  }
  $31 = HEAP32[$p$addr >> 2] | 0;
  HEAP32[$t >> 2] = HEAP32[$31 >> 2];
  HEAP32[$t + 4 >> 2] = HEAP32[$31 + 4 >> 2];
  HEAP32[$t + 8 >> 2] = HEAP32[$31 + 8 >> 2];
  HEAP32[$t + 12 >> 2] = HEAP32[$31 + 12 >> 2];
  HEAP32[$t + 16 >> 2] = HEAP32[$31 + 16 >> 2];
  $32 = HEAP32[$p$addr >> 2] | 0;
  $arrayidx28 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$m >> 2] | 0) * 20 | 0) | 0;
  HEAP32[$32 >> 2] = HEAP32[$arrayidx28 >> 2];
  HEAP32[$32 + 4 >> 2] = HEAP32[$arrayidx28 + 4 >> 2];
  HEAP32[$32 + 8 >> 2] = HEAP32[$arrayidx28 + 8 >> 2];
  HEAP32[$32 + 12 >> 2] = HEAP32[$arrayidx28 + 12 >> 2];
  HEAP32[$32 + 16 >> 2] = HEAP32[$arrayidx28 + 16 >> 2];
  $arrayidx29 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$m >> 2] | 0) * 20 | 0) | 0;
  HEAP32[$arrayidx29 >> 2] = HEAP32[$t >> 2];
  HEAP32[$arrayidx29 + 4 >> 2] = HEAP32[$t + 4 >> 2];
  HEAP32[$arrayidx29 + 8 >> 2] = HEAP32[$t + 8 >> 2];
  HEAP32[$arrayidx29 + 12 >> 2] = HEAP32[$t + 12 >> 2];
  HEAP32[$arrayidx29 + 16 >> 2] = HEAP32[$t + 16 >> 2];
  HEAP32[$i >> 2] = 1;
  HEAP32[$j >> 2] = (HEAP32[$n$addr >> 2] | 0) - 1;
  while (1) {
   while (1) {
    if (!(+HEAPF32[(HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 20 | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$p$addr >> 2] | 0) + 4 >> 2])) break;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   while (1) {
    if (!(+HEAPF32[(HEAP32[$p$addr >> 2] | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$j >> 2] | 0) * 20 | 0) + 4 >> 2])) break;
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
   }
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$j >> 2] | 0)) break;
   $arrayidx55 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$t >> 2] = HEAP32[$arrayidx55 >> 2];
   HEAP32[$t + 4 >> 2] = HEAP32[$arrayidx55 + 4 >> 2];
   HEAP32[$t + 8 >> 2] = HEAP32[$arrayidx55 + 8 >> 2];
   HEAP32[$t + 12 >> 2] = HEAP32[$arrayidx55 + 12 >> 2];
   HEAP32[$t + 16 >> 2] = HEAP32[$arrayidx55 + 16 >> 2];
   $arrayidx56 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 20 | 0) | 0;
   $arrayidx57 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$j >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$arrayidx56 >> 2] = HEAP32[$arrayidx57 >> 2];
   HEAP32[$arrayidx56 + 4 >> 2] = HEAP32[$arrayidx57 + 4 >> 2];
   HEAP32[$arrayidx56 + 8 >> 2] = HEAP32[$arrayidx57 + 8 >> 2];
   HEAP32[$arrayidx56 + 12 >> 2] = HEAP32[$arrayidx57 + 12 >> 2];
   HEAP32[$arrayidx56 + 16 >> 2] = HEAP32[$arrayidx57 + 16 >> 2];
   $arrayidx58 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$j >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$arrayidx58 >> 2] = HEAP32[$t >> 2];
   HEAP32[$arrayidx58 + 4 >> 2] = HEAP32[$t + 4 >> 2];
   HEAP32[$arrayidx58 + 8 >> 2] = HEAP32[$t + 8 >> 2];
   HEAP32[$arrayidx58 + 12 >> 2] = HEAP32[$t + 12 >> 2];
   HEAP32[$arrayidx58 + 16 >> 2] = HEAP32[$t + 16 >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
  }
  $65 = HEAP32[$p$addr >> 2] | 0;
  if ((HEAP32[$j >> 2] | 0) < ((HEAP32[$n$addr >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0)) {
   _stbtt__sort_edges_quicksort($65, HEAP32[$j >> 2] | 0);
   HEAP32[$p$addr >> 2] = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 20 | 0);
   HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] | 0) - (HEAP32[$i >> 2] | 0);
  } else {
   _stbtt__sort_edges_quicksort($65 + ((HEAP32[$i >> 2] | 0) * 20 | 0) | 0, (HEAP32[$n$addr >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0);
   HEAP32[$n$addr >> 2] = HEAP32[$j >> 2];
  }
 }
 STACKTOP = sp;
 return;
}

function __sg_validate_string($err) {
 $err = $err | 0;
 var $err$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $err$addr = sp;
 HEAP32[$err$addr >> 2] = $err;
 do switch (HEAP32[$err$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 30974;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 31005;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 31037;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 31140;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = 31192;
   break;
  }
 case 6:
  {
   HEAP32[$retval >> 2] = 31253;
   break;
  }
 case 7:
  {
   HEAP32[$retval >> 2] = 31283;
   break;
  }
 case 8:
  {
   HEAP32[$retval >> 2] = 31315;
   break;
  }
 case 9:
  {
   HEAP32[$retval >> 2] = 31348;
   break;
  }
 case 10:
  {
   HEAP32[$retval >> 2] = 31393;
   break;
  }
 case 11:
  {
   HEAP32[$retval >> 2] = 31442;
   break;
  }
 case 12:
  {
   HEAP32[$retval >> 2] = 31490;
   break;
  }
 case 13:
  {
   HEAP32[$retval >> 2] = 31531;
   break;
  }
 case 14:
  {
   HEAP32[$retval >> 2] = 31579;
   break;
  }
 case 15:
  {
   HEAP32[$retval >> 2] = 31632;
   break;
  }
 case 16:
  {
   HEAP32[$retval >> 2] = 31676;
   break;
  }
 case 17:
  {
   HEAP32[$retval >> 2] = 31736;
   break;
  }
 case 18:
  {
   HEAP32[$retval >> 2] = 31767;
   break;
  }
 case 19:
  {
   HEAP32[$retval >> 2] = 31795;
   break;
  }
 case 20:
  {
   HEAP32[$retval >> 2] = 31821;
   break;
  }
 case 21:
  {
   HEAP32[$retval >> 2] = 31857;
   break;
  }
 case 22:
  {
   HEAP32[$retval >> 2] = 31901;
   break;
  }
 case 24:
  {
   HEAP32[$retval >> 2] = 31952;
   break;
  }
 case 25:
  {
   HEAP32[$retval >> 2] = 32003;
   break;
  }
 case 26:
  {
   HEAP32[$retval >> 2] = 32057;
   break;
  }
 case 27:
  {
   HEAP32[$retval >> 2] = 32091;
   break;
  }
 case 23:
  {
   HEAP32[$retval >> 2] = 32154;
   break;
  }
 case 28:
  {
   HEAP32[$retval >> 2] = 32197;
   break;
  }
 case 29:
  {
   HEAP32[$retval >> 2] = 32244;
   break;
  }
 case 30:
  {
   HEAP32[$retval >> 2] = 32290;
   break;
  }
 case 31:
  {
   HEAP32[$retval >> 2] = 32340;
   break;
  }
 case 32:
  {
   HEAP32[$retval >> 2] = 32400;
   break;
  }
 case 33:
  {
   HEAP32[$retval >> 2] = 32433;
   break;
  }
 case 34:
  {
   HEAP32[$retval >> 2] = 32476;
   break;
  }
 case 35:
  {
   HEAP32[$retval >> 2] = 32533;
   break;
  }
 case 36:
  {
   HEAP32[$retval >> 2] = 32596;
   break;
  }
 case 37:
  {
   HEAP32[$retval >> 2] = 32648;
   break;
  }
 case 38:
  {
   HEAP32[$retval >> 2] = 32699;
   break;
  }
 case 39:
  {
   HEAP32[$retval >> 2] = 32728;
   break;
  }
 case 40:
  {
   HEAP32[$retval >> 2] = 32776;
   break;
  }
 case 41:
  {
   HEAP32[$retval >> 2] = 32823;
   break;
  }
 case 42:
  {
   HEAP32[$retval >> 2] = 32858;
   break;
  }
 case 43:
  {
   HEAP32[$retval >> 2] = 32917;
   break;
  }
 case 44:
  {
   HEAP32[$retval >> 2] = 32977;
   break;
  }
 case 45:
  {
   HEAP32[$retval >> 2] = 33044;
   break;
  }
 case 46:
  {
   HEAP32[$retval >> 2] = 33108;
   break;
  }
 case 47:
  {
   HEAP32[$retval >> 2] = 33153;
   break;
  }
 case 48:
  {
   HEAP32[$retval >> 2] = 33218;
   break;
  }
 case 49:
  {
   HEAP32[$retval >> 2] = 33275;
   break;
  }
 case 50:
  {
   HEAP32[$retval >> 2] = 33320;
   break;
  }
 case 51:
  {
   HEAP32[$retval >> 2] = 33373;
   break;
  }
 case 52:
  {
   HEAP32[$retval >> 2] = 33407;
   break;
  }
 case 53:
  {
   HEAP32[$retval >> 2] = 33466;
   break;
  }
 case 54:
  {
   HEAP32[$retval >> 2] = 33514;
   break;
  }
 case 55:
  {
   HEAP32[$retval >> 2] = 33565;
   break;
  }
 case 56:
  {
   HEAP32[$retval >> 2] = 33619;
   break;
  }
 case 57:
  {
   HEAP32[$retval >> 2] = 33668;
   break;
  }
 case 58:
  {
   HEAP32[$retval >> 2] = 33720;
   break;
  }
 case 59:
  {
   HEAP32[$retval >> 2] = 33823;
   break;
  }
 case 60:
  {
   HEAP32[$retval >> 2] = 33930;
   break;
  }
 case 61:
  {
   HEAP32[$retval >> 2] = 34026;
   break;
  }
 case 62:
  {
   HEAP32[$retval >> 2] = 34122;
   break;
  }
 case 63:
  {
   HEAP32[$retval >> 2] = 34180;
   break;
  }
 case 64:
  {
   HEAP32[$retval >> 2] = 34249;
   break;
  }
 case 65:
  {
   HEAP32[$retval >> 2] = 34321;
   break;
  }
 case 66:
  {
   HEAP32[$retval >> 2] = 34413;
   break;
  }
 case 67:
  {
   HEAP32[$retval >> 2] = 34462;
   break;
  }
 case 68:
  {
   HEAP32[$retval >> 2] = 34546;
   break;
  }
 case 69:
  {
   HEAP32[$retval >> 2] = 34607;
   break;
  }
 case 70:
  {
   HEAP32[$retval >> 2] = 34698;
   break;
  }
 case 71:
  {
   HEAP32[$retval >> 2] = 34790;
   break;
  }
 case 72:
  {
   HEAP32[$retval >> 2] = 34838;
   break;
  }
 case 73:
  {
   HEAP32[$retval >> 2] = 34920;
   break;
  }
 case 74:
  {
   HEAP32[$retval >> 2] = 34980;
   break;
  }
 case 75:
  {
   HEAP32[$retval >> 2] = 35054;
   break;
  }
 case 76:
  {
   HEAP32[$retval >> 2] = 35109;
   break;
  }
 case 77:
  {
   HEAP32[$retval >> 2] = 35193;
   break;
  }
 case 78:
  {
   HEAP32[$retval >> 2] = 35269;
   break;
  }
 case 79:
  {
   HEAP32[$retval >> 2] = 35326;
   break;
  }
 case 80:
  {
   HEAP32[$retval >> 2] = 35412;
   break;
  }
 case 81:
  {
   HEAP32[$retval >> 2] = 35472;
   break;
  }
 case 82:
  {
   HEAP32[$retval >> 2] = 35549;
   break;
  }
 case 83:
  {
   HEAP32[$retval >> 2] = 35614;
   break;
  }
 case 84:
  {
   HEAP32[$retval >> 2] = 35663;
   break;
  }
 case 85:
  {
   HEAP32[$retval >> 2] = 35720;
   break;
  }
 case 86:
  {
   HEAP32[$retval >> 2] = 35783;
   break;
  }
 case 87:
  {
   HEAP32[$retval >> 2] = 35865;
   break;
  }
 case 88:
  {
   HEAP32[$retval >> 2] = 35917;
   break;
  }
 case 89:
  {
   HEAP32[$retval >> 2] = 35984;
   break;
  }
 case 90:
  {
   HEAP32[$retval >> 2] = 36066;
   break;
  }
 case 91:
  {
   HEAP32[$retval >> 2] = 36113;
   break;
  }
 case 92:
  {
   HEAP32[$retval >> 2] = 36164;
   break;
  }
 case 93:
  {
   HEAP32[$retval >> 2] = 36217;
   break;
  }
 case 94:
  {
   HEAP32[$retval >> 2] = 36278;
   break;
  }
 default:
  HEAP32[$retval >> 2] = 36339;
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function _stbi__process_gif_raster($s, $g) {
 $s = $s | 0;
 $g = $g | 0;
 var $56 = 0, $88 = 0, $avail = 0, $bits = 0, $clear = 0, $code = 0, $codemask = 0, $codes63 = 0, $codesize = 0, $cond87 = 0, $conv30 = 0, $conv48 = 0, $first = 0, $g$addr = 0, $init_code = 0, $len = 0, $lzw_cs = 0, $oldcode = 0, $p = 0, $retval = 0, $s$addr = 0, $tobool112 = 0, $tobool58 = 0, $tobool70 = 0, $tobool95 = 0, $valid_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $retval = sp + 56 | 0;
 $s$addr = sp + 52 | 0;
 $g$addr = sp + 48 | 0;
 $lzw_cs = sp + 60 | 0;
 $len = sp + 44 | 0;
 $init_code = sp + 40 | 0;
 $first = sp + 36 | 0;
 $codesize = sp + 32 | 0;
 $codemask = sp + 28 | 0;
 $avail = sp + 24 | 0;
 $oldcode = sp + 20 | 0;
 $bits = sp + 16 | 0;
 $valid_bits = sp + 12 | 0;
 $clear = sp + 8 | 0;
 $p = sp + 4 | 0;
 $code = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$g$addr >> 2] = $g;
 HEAP8[$lzw_cs >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
 if ((HEAPU8[$lzw_cs >> 0] | 0 | 0) > 12) {
  HEAP32[$retval >> 2] = 0;
  $88 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 }
 HEAP32[$clear >> 2] = 1 << (HEAPU8[$lzw_cs >> 0] | 0);
 HEAP32[$first >> 2] = 1;
 HEAP32[$codesize >> 2] = (HEAPU8[$lzw_cs >> 0] | 0) + 1;
 HEAP32[$codemask >> 2] = (1 << HEAP32[$codesize >> 2]) - 1;
 HEAP32[$bits >> 2] = 0;
 HEAP32[$valid_bits >> 2] = 0;
 HEAP32[$init_code >> 2] = 0;
 while (1) {
  if ((HEAP32[$init_code >> 2] | 0) >= (HEAP32[$clear >> 2] | 0)) break;
  HEAP16[(HEAP32[$g$addr >> 2] | 0) + 2088 + (HEAP32[$init_code >> 2] << 2) >> 1] = -1;
  HEAP8[(HEAP32[$g$addr >> 2] | 0) + 2088 + (HEAP32[$init_code >> 2] << 2) + 2 >> 0] = HEAP32[$init_code >> 2];
  HEAP8[(HEAP32[$g$addr >> 2] | 0) + 2088 + (HEAP32[$init_code >> 2] << 2) + 3 >> 0] = HEAP32[$init_code >> 2];
  HEAP32[$init_code >> 2] = (HEAP32[$init_code >> 2] | 0) + 1;
 }
 HEAP32[$avail >> 2] = (HEAP32[$clear >> 2] | 0) + 2;
 HEAP32[$oldcode >> 2] = -1;
 HEAP32[$len >> 2] = 0;
 L9 : while (1) do if ((HEAP32[$valid_bits >> 2] | 0) < (HEAP32[$codesize >> 2] | 0)) {
  if (!(HEAP32[$len >> 2] | 0)) {
   HEAP32[$len >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   if (!(HEAP32[$len >> 2] | 0)) {
    label = 10;
    break L9;
   }
  }
  HEAP32[$len >> 2] = (HEAP32[$len >> 2] | 0) + -1;
  $conv30 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  HEAP32[$bits >> 2] = HEAP32[$bits >> 2] | $conv30 << HEAP32[$valid_bits >> 2];
  HEAP32[$valid_bits >> 2] = (HEAP32[$valid_bits >> 2] | 0) + 8;
 } else {
  HEAP32[$code >> 2] = HEAP32[$bits >> 2] & HEAP32[$codemask >> 2];
  HEAP32[$bits >> 2] = HEAP32[$bits >> 2] >> HEAP32[$codesize >> 2];
  HEAP32[$valid_bits >> 2] = (HEAP32[$valid_bits >> 2] | 0) - (HEAP32[$codesize >> 2] | 0);
  if ((HEAP32[$code >> 2] | 0) == (HEAP32[$clear >> 2] | 0)) {
   HEAP32[$codesize >> 2] = (HEAPU8[$lzw_cs >> 0] | 0) + 1;
   HEAP32[$codemask >> 2] = (1 << HEAP32[$codesize >> 2]) - 1;
   HEAP32[$avail >> 2] = (HEAP32[$clear >> 2] | 0) + 2;
   HEAP32[$oldcode >> 2] = -1;
   HEAP32[$first >> 2] = 0;
   break;
  }
  if ((HEAP32[$code >> 2] | 0) == ((HEAP32[$clear >> 2] | 0) + 1 | 0)) {
   label = 15;
   break L9;
  }
  if ((HEAP32[$code >> 2] | 0) > (HEAP32[$avail >> 2] | 0)) {
   label = 34;
   break L9;
  }
  if (HEAP32[$first >> 2] | 0) {
   label = 21;
   break L9;
  }
  if ((HEAP32[$oldcode >> 2] | 0) >= 0) {
   $codes63 = (HEAP32[$g$addr >> 2] | 0) + 2088 | 0;
   $56 = HEAP32[$avail >> 2] | 0;
   HEAP32[$avail >> 2] = $56 + 1;
   HEAP32[$p >> 2] = $codes63 + ($56 << 2);
   if ((HEAP32[$avail >> 2] | 0) > 8192) {
    label = 24;
    break L9;
   }
   HEAP16[HEAP32[$p >> 2] >> 1] = HEAP32[$oldcode >> 2];
   HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$g$addr >> 2] | 0) + 2088 + (HEAP32[$oldcode >> 2] << 2) + 2 >> 0] | 0;
   if ((HEAP32[$code >> 2] | 0) == (HEAP32[$avail >> 2] | 0)) $cond87 = HEAPU8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0; else $cond87 = HEAPU8[(HEAP32[$g$addr >> 2] | 0) + 2088 + (HEAP32[$code >> 2] << 2) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 3 >> 0] = $cond87;
  } else if ((HEAP32[$code >> 2] | 0) == (HEAP32[$avail >> 2] | 0)) {
   label = 30;
   break L9;
  }
  _stbi__out_gif_code(HEAP32[$g$addr >> 2] | 0, HEAP32[$code >> 2] & 65535);
  if ((HEAP32[$avail >> 2] | 0) <= 4095 ? (HEAP32[$avail >> 2] & HEAP32[$codemask >> 2] | 0) == 0 : 0) {
   HEAP32[$codesize >> 2] = (HEAP32[$codesize >> 2] | 0) + 1;
   HEAP32[$codemask >> 2] = (1 << HEAP32[$codesize >> 2]) - 1;
  }
  HEAP32[$oldcode >> 2] = HEAP32[$code >> 2];
 } while (0);
 if ((label | 0) == 10) {
  HEAP32[$retval >> 2] = HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2];
  $88 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 } else if ((label | 0) == 15) {
  _stbi__skip(HEAP32[$s$addr >> 2] | 0, HEAP32[$len >> 2] | 0);
  while (1) {
   $conv48 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   HEAP32[$len >> 2] = $conv48;
   if (($conv48 | 0) <= 0) break;
   _stbi__skip(HEAP32[$s$addr >> 2] | 0, HEAP32[$len >> 2] | 0);
  }
  HEAP32[$retval >> 2] = HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2];
  $88 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 } else if ((label | 0) == 21) {
  $tobool58 = (_stbi__err(48053) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool58 ? 0 : 0;
  $88 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 } else if ((label | 0) == 24) {
  $tobool70 = (_stbi__err(48067) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool70 ? 0 : 0;
  $88 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 } else if ((label | 0) == 30) {
  $tobool95 = (_stbi__err(48082) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool95 ? 0 : 0;
  $88 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 } else if ((label | 0) == 34) {
  $tobool112 = (_stbi__err(48082) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool112 ? 0 : 0;
  $88 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $88 | 0;
 }
 return 0;
}

function _stbtt__rasterize_sorted_edges($result, $e, $n, $vsubsample, $off_x, $off_y, $userdata) {
 $result = $result | 0;
 $e = $e | 0;
 $n = $n | 0;
 $vsubsample = $vsubsample | 0;
 $off_x = $off_x | 0;
 $off_y = $off_y | 0;
 $userdata = $userdata | 0;
 var $active = 0, $conv68 = 0, $e$addr = 0, $fx = 0, $hh = 0, $i = 0, $j = 0, $k = 0, $m = 0, $mul74 = 0, $n$addr = 0, $off_x$addr = 0, $off_y$addr = 0, $result$addr = 0, $scan_y_bottom = 0, $scan_y_top = 0, $scanline = 0, $scanline2 = 0, $scanline_data = 0, $step = 0, $sum = 0, $userdata$addr = 0, $y = 0, $z = 0, $z37 = 0, $z80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 $result$addr = sp + 612 | 0;
 $e$addr = sp + 608 | 0;
 $n$addr = sp + 604 | 0;
 $off_x$addr = sp + 596 | 0;
 $off_y$addr = sp + 592 | 0;
 $userdata$addr = sp + 588 | 0;
 $hh = sp + 576 | 0;
 $active = sp + 572 | 0;
 $y = sp + 568 | 0;
 $j = sp + 564 | 0;
 $i = sp + 560 | 0;
 $scanline_data = sp;
 $scanline = sp + 556 | 0;
 $scanline2 = sp + 552 | 0;
 $scan_y_top = sp + 548 | 0;
 $scan_y_bottom = sp + 544 | 0;
 $step = sp + 540 | 0;
 $z = sp + 536 | 0;
 $z37 = sp + 532 | 0;
 $sum = sp + 528 | 0;
 $k = sp + 524 | 0;
 $m = sp + 520 | 0;
 $z80 = sp + 516 | 0;
 HEAP32[$result$addr >> 2] = $result;
 HEAP32[$e$addr >> 2] = $e;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[sp + 600 >> 2] = $vsubsample;
 HEAP32[$off_x$addr >> 2] = $off_x;
 HEAP32[$off_y$addr >> 2] = $off_y;
 HEAP32[$userdata$addr >> 2] = $userdata;
 HEAP32[$hh >> 2] = 0;
 HEAP32[$hh + 4 >> 2] = 0;
 HEAP32[$hh + 8 >> 2] = 0;
 HEAP32[$active >> 2] = 0;
 HEAP32[$j >> 2] = 0;
 if ((HEAP32[HEAP32[$result$addr >> 2] >> 2] | 0) > 64) HEAP32[$scanline >> 2] = _fons__tmpalloc((HEAP32[HEAP32[$result$addr >> 2] >> 2] << 1) + 1 << 2, HEAP32[$userdata$addr >> 2] | 0) | 0; else HEAP32[$scanline >> 2] = $scanline_data;
 HEAP32[$scanline2 >> 2] = (HEAP32[$scanline >> 2] | 0) + (HEAP32[HEAP32[$result$addr >> 2] >> 2] << 2);
 HEAP32[$y >> 2] = HEAP32[$off_y$addr >> 2];
 HEAPF32[(HEAP32[$e$addr >> 2] | 0) + ((HEAP32[$n$addr >> 2] | 0) * 20 | 0) + 4 >> 2] = +((HEAP32[$off_y$addr >> 2] | 0) + (HEAP32[(HEAP32[$result$addr >> 2] | 0) + 4 >> 2] | 0) | 0) + 1.0;
 L5 : while (1) {
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[(HEAP32[$result$addr >> 2] | 0) + 4 >> 2] | 0)) {
   label = 31;
   break;
  }
  HEAPF32[$scan_y_top >> 2] = +(HEAP32[$y >> 2] | 0) + 0.0;
  HEAPF32[$scan_y_bottom >> 2] = +(HEAP32[$y >> 2] | 0) + 1.0;
  HEAP32[$step >> 2] = $active;
  _memset(HEAP32[$scanline >> 2] | 0, 0, HEAP32[HEAP32[$result$addr >> 2] >> 2] << 2 | 0) | 0;
  _memset(HEAP32[$scanline2 >> 2] | 0, 0, (HEAP32[HEAP32[$result$addr >> 2] >> 2] | 0) + 1 << 2 | 0) | 0;
  while (1) {
   if (!(HEAP32[HEAP32[$step >> 2] >> 2] | 0)) break;
   HEAP32[$z >> 2] = HEAP32[HEAP32[$step >> 2] >> 2];
   if (+HEAPF32[(HEAP32[$z >> 2] | 0) + 24 >> 2] <= +HEAPF32[$scan_y_top >> 2]) {
    HEAP32[HEAP32[$step >> 2] >> 2] = HEAP32[HEAP32[$z >> 2] >> 2];
    if (!(+HEAPF32[(HEAP32[$z >> 2] | 0) + 16 >> 2] != 0.0)) {
     label = 10;
     break L5;
    }
    HEAPF32[(HEAP32[$z >> 2] | 0) + 16 >> 2] = 0.0;
    _stbtt__hheap_free($hh, HEAP32[$z >> 2] | 0);
   } else HEAP32[$step >> 2] = HEAP32[HEAP32[$step >> 2] >> 2];
  }
  while (1) {
   if (!(+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 4 >> 2] <= +HEAPF32[$scan_y_bottom >> 2])) break;
   if (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 4 >> 2] != +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 12 >> 2]) {
    HEAP32[$z37 >> 2] = _stbtt__new_active($hh, HEAP32[$e$addr >> 2] | 0, HEAP32[$off_x$addr >> 2] | 0, +HEAPF32[$scan_y_top >> 2], HEAP32[$userdata$addr >> 2] | 0) | 0;
    if (HEAP32[$z37 >> 2] | 0) {
     if (!(+HEAPF32[(HEAP32[$z37 >> 2] | 0) + 24 >> 2] >= +HEAPF32[$scan_y_top >> 2])) {
      label = 19;
      break L5;
     }
     HEAP32[HEAP32[$z37 >> 2] >> 2] = HEAP32[$active >> 2];
     HEAP32[$active >> 2] = HEAP32[$z37 >> 2];
    }
   }
   HEAP32[$e$addr >> 2] = (HEAP32[$e$addr >> 2] | 0) + 20;
  }
  if (HEAP32[$active >> 2] | 0) _stbtt__fill_active_edges_new(HEAP32[$scanline >> 2] | 0, (HEAP32[$scanline2 >> 2] | 0) + 4 | 0, HEAP32[HEAP32[$result$addr >> 2] >> 2] | 0, HEAP32[$active >> 2] | 0, +HEAPF32[$scan_y_top >> 2]);
  HEAPF32[$sum >> 2] = 0.0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[HEAP32[$result$addr >> 2] >> 2] | 0)) break;
   HEAPF32[$sum >> 2] = +HEAPF32[$sum >> 2] + +HEAPF32[(HEAP32[$scanline2 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2];
   HEAPF32[$k >> 2] = +HEAPF32[(HEAP32[$scanline >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] + +HEAPF32[$sum >> 2];
   HEAPF32[$k >> 2] = +Math_abs(+(+HEAPF32[$k >> 2])) * 255.0 + .5;
   $conv68 = ~~+HEAPF32[$k >> 2];
   HEAP32[$m >> 2] = $conv68;
   HEAP32[$m >> 2] = (HEAP32[$m >> 2] | 0) > 255 ? 255 : $conv68;
   $mul74 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[(HEAP32[$result$addr >> 2] | 0) + 8 >> 2] | 0) | 0;
   HEAP8[(HEAP32[(HEAP32[$result$addr >> 2] | 0) + 12 >> 2] | 0) + ($mul74 + (HEAP32[$i >> 2] | 0)) >> 0] = HEAP32[$m >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$step >> 2] = $active;
  while (1) {
   if (!(HEAP32[HEAP32[$step >> 2] >> 2] | 0)) break;
   HEAP32[$z80 >> 2] = HEAP32[HEAP32[$step >> 2] >> 2];
   $fx = (HEAP32[$z80 >> 2] | 0) + 4 | 0;
   HEAPF32[$fx >> 2] = +HEAPF32[$fx >> 2] + +HEAPF32[(HEAP32[$z80 >> 2] | 0) + 8 >> 2];
   HEAP32[$step >> 2] = HEAP32[HEAP32[$step >> 2] >> 2];
  }
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 1;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 if ((label | 0) == 10) ___assert_fail(44633, 44131, 2851, 44646); else if ((label | 0) == 19) ___assert_fail(44676, 44131, 2864, 44646); else if ((label | 0) == 31) {
  _stbtt__hheap_cleanup($hh, HEAP32[$userdata$addr >> 2] | 0);
  if ((HEAP32[$scanline >> 2] | 0) == ($scanline_data | 0)) {
   STACKTOP = sp;
   return;
  }
  _fons__tmpfree(HEAP32[$scanline >> 2] | 0, HEAP32[$userdata$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv($this) {
 $this = $this | 0;
 var $ExprList = 0, $Global = 0, $IsArray = 0, $Names = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp22 = 0, $agg$tmp22$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp6 = 0, $call12 = 0, $call17 = 0, $call18 = 0, $call26 = 0, $call32 = 0, $call8 = 0, $retval$5 = 0, $retval$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp22$byval_copy = sp + 48 | 0;
 $Global = sp + 57 | 0;
 $agg$tmp = sp + 40 | 0;
 $IsArray = sp + 56 | 0;
 $agg$tmp4 = sp + 32 | 0;
 $agg$tmp6 = sp + 24 | 0;
 $ExprList = sp + 16 | 0;
 $Ty = sp + 8 | 0;
 $agg$tmp22 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52872);
 HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp22$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP8[$Global >> 0] = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp22$byval_copy) | 0) & 1;
 HEAP8[$IsArray >> 0] = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 97 & 1;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 53486);
 HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp22$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp22$byval_copy) | 0) label = 3; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 53489);
  HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp22$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp22$byval_copy) | 0) label = 3; else $retval$7 = 0;
 }
 do if ((label | 0) == 3) {
  $Names = $this + 8 | 0;
  $call8 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
  while (1) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) break;
   $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp22$byval_copy >> 2] = $call12;
   if (!$call12) {
    label = 7;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp22$byval_copy);
  }
  if ((label | 0) == 7) {
   $retval$7 = 0;
   break;
  }
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ExprList, $this, $call8);
  $call17 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call18 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call17) | 0;
  HEAP32[$Ty >> 2] = $call18;
  do if (!$call18) $retval$5 = 0; else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22, 53492);
   HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp22 >> 2];
   HEAP32[$agg$tmp22$byval_copy + 4 >> 2] = HEAP32[$agg$tmp22 + 4 >> 2];
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp22$byval_copy) | 0)) {
    if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0)) {
     $retval$5 = 0;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($agg$tmp22$byval_copy);
    $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_($this, $ExprList, $Ty, $agg$tmp22$byval_copy, $Global, $IsArray) | 0;
    break;
   }
   $call26 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     label = 15;
     break;
    }
    $call32 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call17) | 0;
    HEAP32[$agg$tmp22$byval_copy >> 2] = $call32;
    if (!$call32) {
     label = 13;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp22$byval_copy);
   }
   if ((label | 0) == 13) {
    $retval$5 = 0;
    break;
   } else if ((label | 0) == 15) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp22$byval_copy, $this, $call26);
    $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_($this, $ExprList, $Ty, $agg$tmp22$byval_copy, $Global, $IsArray) | 0;
    break;
   }
  } while (0);
  $retval$7 = $retval$5;
 } while (0);
 STACKTOP = sp;
 return $retval$7 | 0;
}

function _fonsTextBounds($stash, $x, $y, $str, $end, $bounds) {
 $stash = $stash | 0;
 $x = +$x;
 $y = +$y;
 $str = $str | 0;
 $end = $end | 0;
 $bounds = $bounds | 0;
 var $100 = 0.0, $27 = 0.0, $28 = 0.0, $31 = 0, $advance = 0, $bounds$addr = 0, $call19 = 0.0, $codepoint = 0, $cond = 0, $end$addr = 0, $font = 0, $glyph = 0, $iblur = 0, $isize = 0, $maxx = 0, $maxy = 0, $minx = 0, $miny = 0, $prevGlyphIndex = 0, $q = 0, $retval = 0, $scale = 0, $startx = 0, $stash$addr = 0, $state = 0, $str$addr = 0, $utf8state = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $retval = sp + 108 | 0;
 $stash$addr = sp + 104 | 0;
 $x$addr = sp + 100 | 0;
 $y$addr = sp + 96 | 0;
 $str$addr = sp + 92 | 0;
 $end$addr = sp + 88 | 0;
 $bounds$addr = sp + 84 | 0;
 $state = sp + 80 | 0;
 $codepoint = sp + 76 | 0;
 $utf8state = sp + 72 | 0;
 $q = sp + 40 | 0;
 $glyph = sp + 36 | 0;
 $prevGlyphIndex = sp + 32 | 0;
 $isize = sp + 114 | 0;
 $iblur = sp + 112 | 0;
 $scale = sp + 28 | 0;
 $font = sp + 24 | 0;
 $startx = sp + 20 | 0;
 $advance = sp + 16 | 0;
 $minx = sp + 12 | 0;
 $miny = sp + 8 | 0;
 $maxx = sp + 4 | 0;
 $maxy = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAP32[$str$addr >> 2] = $str;
 HEAP32[$end$addr >> 2] = $end;
 HEAP32[$bounds$addr >> 2] = $bounds;
 HEAP32[$state >> 2] = _fons__getState(HEAP32[$stash$addr >> 2] | 0) | 0;
 HEAP32[$utf8state >> 2] = 0;
 HEAP32[$glyph >> 2] = 0;
 HEAP32[$prevGlyphIndex >> 2] = -1;
 HEAP16[$isize >> 1] = ~~(+HEAPF32[(HEAP32[$state >> 2] | 0) + 8 >> 2] * 10.0);
 HEAP16[$iblur >> 1] = ~~+HEAPF32[(HEAP32[$state >> 2] | 0) + 16 >> 2];
 if (!(HEAP32[$stash$addr >> 2] | 0)) {
  HEAPF32[$retval >> 2] = 0.0;
  $100 = +HEAPF32[$retval >> 2];
  STACKTOP = sp;
  return +$100;
 }
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) >= 0) if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) < (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 76 >> 2] | 0)) {
  HEAP32[$font >> 2] = HEAP32[(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] | 0) + (HEAP32[HEAP32[$state >> 2] >> 2] << 2) >> 2];
  if (!(HEAP32[(HEAP32[$font >> 2] | 0) + 184 >> 2] | 0)) {
   HEAPF32[$retval >> 2] = 0.0;
   $100 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$100;
  }
  HEAPF32[$scale >> 2] = +_fons__tt_getPixelHeightScale(HEAP32[$font >> 2] | 0, +(HEAP16[$isize >> 1] | 0) / 10.0);
  $call19 = +_fons__getVertAlign(HEAP32[$stash$addr >> 2] | 0, HEAP32[$font >> 2] | 0, HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0, HEAP16[$isize >> 1] | 0);
  HEAPF32[$y$addr >> 2] = +HEAPF32[$y$addr >> 2] + $call19;
  $27 = +HEAPF32[$x$addr >> 2];
  HEAPF32[$maxx >> 2] = $27;
  HEAPF32[$minx >> 2] = $27;
  $28 = +HEAPF32[$y$addr >> 2];
  HEAPF32[$maxy >> 2] = $28;
  HEAPF32[$miny >> 2] = $28;
  HEAPF32[$startx >> 2] = +HEAPF32[$x$addr >> 2];
  if (!(HEAP32[$end$addr >> 2] | 0)) {
   $31 = HEAP32[$str$addr >> 2] | 0;
   HEAP32[$end$addr >> 2] = $31 + (_strlen(HEAP32[$str$addr >> 2] | 0) | 0);
  }
  while (1) {
   if ((HEAP32[$str$addr >> 2] | 0) == (HEAP32[$end$addr >> 2] | 0)) break;
   if (!(_fons__decutf8($utf8state, $codepoint, HEAPU8[HEAP32[$str$addr >> 2] >> 0] | 0) | 0)) {
    HEAP32[$glyph >> 2] = _fons__getGlyph(HEAP32[$stash$addr >> 2] | 0, HEAP32[$font >> 2] | 0, HEAP32[$codepoint >> 2] | 0, HEAP16[$isize >> 1] | 0, HEAP16[$iblur >> 1] | 0) | 0;
    do if (HEAP32[$glyph >> 2] | 0) {
     _fons__getQuad(HEAP32[$stash$addr >> 2] | 0, HEAP32[$font >> 2] | 0, HEAP32[$prevGlyphIndex >> 2] | 0, HEAP32[$glyph >> 2] | 0, +HEAPF32[$scale >> 2], +HEAPF32[(HEAP32[$state >> 2] | 0) + 20 >> 2], $x$addr, $y$addr, $q);
     if (+HEAPF32[$q >> 2] < +HEAPF32[$minx >> 2]) HEAPF32[$minx >> 2] = +HEAPF32[$q >> 2];
     if (+HEAPF32[$q + 16 >> 2] > +HEAPF32[$maxx >> 2]) HEAPF32[$maxx >> 2] = +HEAPF32[$q + 16 >> 2];
     if (HEAPU8[(HEAP32[$stash$addr >> 2] | 0) + 8 >> 0] & 1 | 0) {
      if (+HEAPF32[$q + 4 >> 2] < +HEAPF32[$miny >> 2]) HEAPF32[$miny >> 2] = +HEAPF32[$q + 4 >> 2];
      if (!(+HEAPF32[$q + 20 >> 2] > +HEAPF32[$maxy >> 2])) break;
      HEAPF32[$maxy >> 2] = +HEAPF32[$q + 20 >> 2];
      break;
     } else {
      if (+HEAPF32[$q + 20 >> 2] < +HEAPF32[$miny >> 2]) HEAPF32[$miny >> 2] = +HEAPF32[$q + 20 >> 2];
      if (!(+HEAPF32[$q + 4 >> 2] > +HEAPF32[$maxy >> 2])) break;
      HEAPF32[$maxy >> 2] = +HEAPF32[$q + 4 >> 2];
      break;
     }
    } while (0);
    if (HEAP32[$glyph >> 2] | 0) $cond = HEAP32[(HEAP32[$glyph >> 2] | 0) + 4 >> 2] | 0; else $cond = -1;
    HEAP32[$prevGlyphIndex >> 2] = $cond;
   }
   HEAP32[$str$addr >> 2] = (HEAP32[$str$addr >> 2] | 0) + 1;
  }
  HEAPF32[$advance >> 2] = +HEAPF32[$x$addr >> 2] - +HEAPF32[$startx >> 2];
  do if (!(HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] & 1)) {
   if (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] & 4 | 0) {
    HEAPF32[$minx >> 2] = +HEAPF32[$minx >> 2] - +HEAPF32[$advance >> 2];
    HEAPF32[$maxx >> 2] = +HEAPF32[$maxx >> 2] - +HEAPF32[$advance >> 2];
    break;
   }
   if (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] & 2 | 0) {
    HEAPF32[$minx >> 2] = +HEAPF32[$minx >> 2] - +HEAPF32[$advance >> 2] * .5;
    HEAPF32[$maxx >> 2] = +HEAPF32[$maxx >> 2] - +HEAPF32[$advance >> 2] * .5;
   }
  } while (0);
  if (HEAP32[$bounds$addr >> 2] | 0) {
   HEAPF32[HEAP32[$bounds$addr >> 2] >> 2] = +HEAPF32[$minx >> 2];
   HEAPF32[(HEAP32[$bounds$addr >> 2] | 0) + 4 >> 2] = +HEAPF32[$miny >> 2];
   HEAPF32[(HEAP32[$bounds$addr >> 2] | 0) + 8 >> 2] = +HEAPF32[$maxx >> 2];
   HEAPF32[(HEAP32[$bounds$addr >> 2] | 0) + 12 >> 2] = +HEAPF32[$maxy >> 2];
  }
  HEAPF32[$retval >> 2] = +HEAPF32[$advance >> 2];
  $100 = +HEAPF32[$retval >> 2];
  STACKTOP = sp;
  return +$100;
 }
 HEAPF32[$retval >> 2] = 0.0;
 $100 = +HEAPF32[$retval >> 2];
 STACKTOP = sp;
 return +$100;
}

function _fonsDrawText($stash, $x, $y, $str, $end) {
 $stash = $stash | 0;
 $x = +$x;
 $y = +$y;
 $str = $str | 0;
 $end = $end | 0;
 var $121 = 0.0, $25 = 0, $call42 = 0.0, $codepoint = 0, $cond = 0, $end$addr = 0, $font = 0, $glyph = 0, $iblur = 0, $isize = 0, $prevGlyphIndex = 0, $q = 0, $retval = 0, $scale = 0, $stash$addr = 0, $state = 0, $str$addr = 0, $utf8state = 0, $width = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $retval = sp + 84 | 0;
 $stash$addr = sp + 80 | 0;
 $x$addr = sp + 76 | 0;
 $y$addr = sp + 72 | 0;
 $str$addr = sp + 68 | 0;
 $end$addr = sp + 64 | 0;
 $state = sp + 60 | 0;
 $codepoint = sp + 56 | 0;
 $utf8state = sp + 52 | 0;
 $glyph = sp + 48 | 0;
 $q = sp + 16 | 0;
 $prevGlyphIndex = sp + 12 | 0;
 $isize = sp + 90 | 0;
 $iblur = sp + 88 | 0;
 $scale = sp + 8 | 0;
 $font = sp + 4 | 0;
 $width = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAP32[$str$addr >> 2] = $str;
 HEAP32[$end$addr >> 2] = $end;
 HEAP32[$state >> 2] = _fons__getState(HEAP32[$stash$addr >> 2] | 0) | 0;
 HEAP32[$utf8state >> 2] = 0;
 HEAP32[$glyph >> 2] = 0;
 HEAP32[$prevGlyphIndex >> 2] = -1;
 HEAP16[$isize >> 1] = ~~(+HEAPF32[(HEAP32[$state >> 2] | 0) + 8 >> 2] * 10.0);
 HEAP16[$iblur >> 1] = ~~+HEAPF32[(HEAP32[$state >> 2] | 0) + 16 >> 2];
 if (!(HEAP32[$stash$addr >> 2] | 0)) {
  HEAPF32[$retval >> 2] = +HEAPF32[$x$addr >> 2];
  $121 = +HEAPF32[$retval >> 2];
  STACKTOP = sp;
  return +$121;
 }
 if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) >= 0) if ((HEAP32[HEAP32[$state >> 2] >> 2] | 0) < (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 76 >> 2] | 0)) {
  HEAP32[$font >> 2] = HEAP32[(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] | 0) + (HEAP32[HEAP32[$state >> 2] >> 2] << 2) >> 2];
  if (!(HEAP32[(HEAP32[$font >> 2] | 0) + 184 >> 2] | 0)) {
   HEAPF32[$retval >> 2] = +HEAPF32[$x$addr >> 2];
   $121 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$121;
  }
  HEAPF32[$scale >> 2] = +_fons__tt_getPixelHeightScale(HEAP32[$font >> 2] | 0, +(HEAP16[$isize >> 1] | 0) / 10.0);
  if (!(HEAP32[$end$addr >> 2] | 0)) {
   $25 = HEAP32[$str$addr >> 2] | 0;
   HEAP32[$end$addr >> 2] = $25 + (_strlen(HEAP32[$str$addr >> 2] | 0) | 0);
  }
  do if (!(HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] & 1)) {
   if (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] & 4 | 0) {
    HEAPF32[$width >> 2] = +_fonsTextBounds(HEAP32[$stash$addr >> 2] | 0, +HEAPF32[$x$addr >> 2], +HEAPF32[$y$addr >> 2], HEAP32[$str$addr >> 2] | 0, HEAP32[$end$addr >> 2] | 0, 0);
    HEAPF32[$x$addr >> 2] = +HEAPF32[$x$addr >> 2] - +HEAPF32[$width >> 2];
    break;
   }
   if (HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] & 2 | 0) {
    HEAPF32[$width >> 2] = +_fonsTextBounds(HEAP32[$stash$addr >> 2] | 0, +HEAPF32[$x$addr >> 2], +HEAPF32[$y$addr >> 2], HEAP32[$str$addr >> 2] | 0, HEAP32[$end$addr >> 2] | 0, 0);
    HEAPF32[$x$addr >> 2] = +HEAPF32[$x$addr >> 2] - +HEAPF32[$width >> 2] * .5;
   }
  } while (0);
  $call42 = +_fons__getVertAlign(HEAP32[$stash$addr >> 2] | 0, HEAP32[$font >> 2] | 0, HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] | 0, HEAP16[$isize >> 1] | 0);
  HEAPF32[$y$addr >> 2] = +HEAPF32[$y$addr >> 2] + $call42;
  while (1) {
   if ((HEAP32[$str$addr >> 2] | 0) == (HEAP32[$end$addr >> 2] | 0)) break;
   if (!(_fons__decutf8($utf8state, $codepoint, HEAPU8[HEAP32[$str$addr >> 2] >> 0] | 0) | 0)) {
    HEAP32[$glyph >> 2] = _fons__getGlyph(HEAP32[$stash$addr >> 2] | 0, HEAP32[$font >> 2] | 0, HEAP32[$codepoint >> 2] | 0, HEAP16[$isize >> 1] | 0, HEAP16[$iblur >> 1] | 0) | 0;
    if (HEAP32[$glyph >> 2] | 0) {
     _fons__getQuad(HEAP32[$stash$addr >> 2] | 0, HEAP32[$font >> 2] | 0, HEAP32[$prevGlyphIndex >> 2] | 0, HEAP32[$glyph >> 2] | 0, +HEAPF32[$scale >> 2], +HEAPF32[(HEAP32[$state >> 2] | 0) + 20 >> 2], $x$addr, $y$addr, $q);
     if (((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20560 >> 2] | 0) + 6 | 0) > 1024) _fons__flush(HEAP32[$stash$addr >> 2] | 0);
     _fons__vertex(HEAP32[$stash$addr >> 2] | 0, +HEAPF32[$q >> 2], +HEAPF32[$q + 4 >> 2], +HEAPF32[$q + 8 >> 2], +HEAPF32[$q + 12 >> 2], HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$stash$addr >> 2] | 0, +HEAPF32[$q + 16 >> 2], +HEAPF32[$q + 20 >> 2], +HEAPF32[$q + 24 >> 2], +HEAPF32[$q + 28 >> 2], HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$stash$addr >> 2] | 0, +HEAPF32[$q + 16 >> 2], +HEAPF32[$q + 4 >> 2], +HEAPF32[$q + 24 >> 2], +HEAPF32[$q + 12 >> 2], HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$stash$addr >> 2] | 0, +HEAPF32[$q >> 2], +HEAPF32[$q + 4 >> 2], +HEAPF32[$q + 8 >> 2], +HEAPF32[$q + 12 >> 2], HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$stash$addr >> 2] | 0, +HEAPF32[$q >> 2], +HEAPF32[$q + 20 >> 2], +HEAPF32[$q + 8 >> 2], +HEAPF32[$q + 28 >> 2], HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0);
     _fons__vertex(HEAP32[$stash$addr >> 2] | 0, +HEAPF32[$q + 16 >> 2], +HEAPF32[$q + 20 >> 2], +HEAPF32[$q + 24 >> 2], +HEAPF32[$q + 28 >> 2], HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] | 0);
    }
    if (HEAP32[$glyph >> 2] | 0) $cond = HEAP32[(HEAP32[$glyph >> 2] | 0) + 4 >> 2] | 0; else $cond = -1;
    HEAP32[$prevGlyphIndex >> 2] = $cond;
   }
   HEAP32[$str$addr >> 2] = (HEAP32[$str$addr >> 2] | 0) + 1;
  }
  _fons__flush(HEAP32[$stash$addr >> 2] | 0);
  HEAPF32[$retval >> 2] = +HEAPF32[$x$addr >> 2];
  $121 = +HEAPF32[$retval >> 2];
  STACKTOP = sp;
  return +$121;
 }
 HEAPF32[$retval >> 2] = +HEAPF32[$x$addr >> 2];
 $121 = +HEAPF32[$retval >> 2];
 STACKTOP = sp;
 return +$121;
}

function __Z13calculateMeshb($reset_position) {
 $reset_position = $reset_position | 0;
 var $13 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $8 = 0, $__begin_$i16 = 0, $__cntrl_3$i$i = 0, $agg$tmp = 0, $agg$tmp60 = 0, $agg$tmp60$byval_copy = 0, $conv = 0.0, $gl_buffers = 0, $gl_buffers55 = 0, $i$0 = 0, $i34$0 = 0, $level_of_detail$0 = 0.0, $ref$tmp = 0, $sokol_buffer_index = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i20 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i19 = 0, $vla = 0, $vla33 = 0, $width = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $agg$tmp60$byval_copy = sp + 128 | 0;
 $ref$tmp = sp + 64 | 0;
 $agg$tmp = sp + 120 | 0;
 $sokol_buffer_index = sp;
 $agg$tmp60 = sp + 56 | 0;
 switch (HEAP32[3178] | 0) {
 case 0:
  {
   $level_of_detail$0 = 19.200000762939453;
   break;
  }
 case 1:
  {
   $level_of_detail$0 = 9.600000381469727;
   break;
  }
 case 2:
  {
   $level_of_detail$0 = 4.800000190734863;
   break;
  }
 case 3:
  {
   $level_of_detail$0 = 2.4000000953674316;
   break;
  }
 case 4:
  {
   $level_of_detail$0 = 1.2000000476837158;
   break;
  }
 case 8:
  {
   $level_of_detail$0 = .07500000298023224;
   break;
  }
 case 6:
  {
   $level_of_detail$0 = .30000001192092896;
   break;
  }
 case 7:
  {
   $level_of_detail$0 = .15000000596046448;
   break;
  }
 default:
  $level_of_detail$0 = .6000000238418579;
 }
 __ZN7DrImage13outlinePointsEf(HEAP32[546687] | 0, $level_of_detail$0);
 __ZNSt3__210shared_ptrI6DrMeshE11make_sharedIJEEES2_DpOT_($ref$tmp);
 $2 = HEAP32[$ref$tmp >> 2] | 0;
 $__cntrl_3$i$i = $ref$tmp + 4 | 0;
 $3 = HEAP32[$__cntrl_3$i$i >> 2] | 0;
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$__cntrl_3$i$i >> 2] = 0;
 HEAP32[$agg$tmp60$byval_copy >> 2] = HEAP32[546685];
 HEAP32[546685] = $2;
 HEAP32[$agg$tmp60$byval_copy + 4 >> 2] = HEAP32[546686];
 HEAP32[546686] = $3;
 __ZNSt3__210shared_ptrI6DrMeshED2Ev($agg$tmp60$byval_copy);
 __ZNSt3__210shared_ptrI6DrMeshED2Ev($ref$tmp);
 $width = (__ZNK7DrImage9getBitmapEv(HEAP32[546687] | 0) | 0) + 8 | 0;
 $conv = +(__ZN2Dr3MaxIiEET_RKS1_S3_($width, (__ZNK7DrImage9getBitmapEv(HEAP32[546687] | 0) | 0) + 12 | 0) | 0);
 $8 = HEAP32[546685] | 0;
 HEAPF32[$8 + 28 >> 2] = $conv;
 HEAP8[$8 + 24 >> 0] = HEAP8[45278] | 0;
 __ZN6DrMesh23initializeExtrudedImageEP7DrImagei($8, HEAP32[546687] | 0, HEAP32[3178] | 0);
 if ((__ZNK6DrMesh11vertexCountEv(HEAP32[546685] | 0) | 0) > 0) {
  $13 = HEAP32[546685] | 0;
  $sub$ptr$sub$i19 = (HEAP32[$13 + 16 >> 2] | 0) - (HEAP32[$13 + 12 >> 2] | 0) | 0;
  $sub$ptr$div$i20 = ($sub$ptr$sub$i19 | 0) / 44 | 0;
  $16 = _llvm_stacksave() | 0;
  $vla = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($sub$ptr$div$i20 * 44 | 0) | 0) + 15 & -16) | 0;
  $__begin_$i16 = (HEAP32[546685] | 0) + 12 | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == ($sub$ptr$div$i20 | 0)) break;
   dest = $vla + ($i$0 * 44 | 0) | 0;
   src = (HEAP32[$__begin_$i16 >> 2] | 0) + ($i$0 * 44 | 0) | 0;
   stop = dest + 44 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $i$0 = $i$0 + 1 | 0;
  }
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  HEAP32[$ref$tmp + 12 >> 2] = 0;
  HEAP32[$ref$tmp + 16 >> 2] = $vla;
  HEAP32[$ref$tmp + 20 >> 2] = $sub$ptr$sub$i19;
  HEAP32[$ref$tmp + 24 >> 2] = 45502;
  $gl_buffers = $ref$tmp + 28 | 0;
  HEAP32[$gl_buffers >> 2] = 0;
  HEAP32[$gl_buffers + 4 >> 2] = 0;
  HEAP32[$gl_buffers + 8 >> 2] = 0;
  HEAP32[$gl_buffers + 12 >> 2] = 0;
  HEAP32[$gl_buffers + 16 >> 2] = 0;
  HEAP32[$gl_buffers + 20 >> 2] = 0;
  HEAP32[$gl_buffers + 24 >> 2] = 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[15488];
  HEAP32[$agg$tmp60$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  _sg_destroy_buffer($agg$tmp60$byval_copy);
  HEAP32[15488] = _sg_make_buffer($ref$tmp) | 0;
  $19 = HEAP32[546685] | 0;
  $21 = HEAP32[$19 >> 2] | 0;
  $sub$ptr$sub$i = (HEAP32[$19 + 4 >> 2] | 0) - $21 | 0;
  $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
  $vla33 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($sub$ptr$div$i << 1) | 0) + 15 & -16) | 0;
  $22 = $21;
  $i34$0 = 0;
  while (1) {
   if (($i34$0 | 0) == ($sub$ptr$div$i | 0)) break;
   HEAP16[$vla33 + ($i34$0 << 1) >> 1] = HEAP32[$22 + ($i34$0 << 2) >> 2];
   $i34$0 = $i34$0 + 1 | 0;
  }
  HEAP32[$sokol_buffer_index >> 2] = 0;
  HEAP32[$sokol_buffer_index + 4 >> 2] = 0;
  HEAP32[$sokol_buffer_index + 8 >> 2] = 2;
  HEAP32[$sokol_buffer_index + 12 >> 2] = 0;
  HEAP32[$sokol_buffer_index + 16 >> 2] = $vla33;
  HEAP32[$sokol_buffer_index + 20 >> 2] = $sub$ptr$sub$i >> 1;
  HEAP32[$sokol_buffer_index + 24 >> 2] = 45415;
  $gl_buffers55 = $sokol_buffer_index + 28 | 0;
  HEAP32[$gl_buffers55 >> 2] = 0;
  HEAP32[$gl_buffers55 + 4 >> 2] = 0;
  HEAP32[$gl_buffers55 + 8 >> 2] = 0;
  HEAP32[$gl_buffers55 + 12 >> 2] = 0;
  HEAP32[$gl_buffers55 + 16 >> 2] = 0;
  HEAP32[$gl_buffers55 + 20 >> 2] = 0;
  HEAP32[$gl_buffers55 + 24 >> 2] = 0;
  HEAP32[$agg$tmp60 >> 2] = HEAP32[15504];
  HEAP32[$agg$tmp60$byval_copy >> 2] = HEAP32[$agg$tmp60 >> 2];
  _sg_destroy_buffer($agg$tmp60$byval_copy);
  HEAP32[15504] = _sg_make_buffer($sokol_buffer_index) | 0;
  if ($reset_position) {
   __ZN6DrVec23setEff(2186768, 0.0, 0.0);
   __ZN6DrVec23setEff(2186776, 25.0, 25.0);
   __ZN2Dr14IdentityMatrixEv($agg$tmp60$byval_copy);
   dest = 2186784;
   src = $agg$tmp60$byval_copy;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
  }
  _llvm_stackrestore($16 | 0);
 }
 STACKTOP = sp;
 return;
}

function __ZL12image_loadedPK17sfetch_response_t($response) {
 $response = $response | 0;
 var $10 = 0, $6 = 0, $pass_action0$sroa$9 = 0, $pass_action1$sroa$7 = 0, $pass_action2$sroa$7 = 0, $pass_action3$sroa$7 = 0, $pass_action4$sroa$8 = 0, $pass_action5$sroa$8 = 0, $pass_action6$sroa$8 = 0, $pass_action7$sroa$9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 $pass_action0$sroa$9 = sp + 560 | 0;
 $pass_action1$sroa$7 = sp + 480 | 0;
 $pass_action2$sroa$7 = sp + 400 | 0;
 $pass_action3$sroa$7 = sp + 320 | 0;
 $pass_action4$sroa$8 = sp + 240 | 0;
 $pass_action5$sroa$8 = sp + 160 | 0;
 $pass_action6$sroa$8 = sp + 80 | 0;
 $pass_action7$sroa$9 = sp;
 if (!(HEAP8[$response + 5 >> 0] | 0)) {
  if (HEAP8[$response + 7 >> 0] | 0) if (HEAP8[$response + 8 >> 0] | 0) {
   dest = $pass_action0$sroa$9;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $pass_action1$sroa$7;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $pass_action2$sroa$7;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $pass_action3$sroa$7;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $pass_action4$sroa$8;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $pass_action5$sroa$8;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $pass_action6$sroa$8;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $pass_action7$sroa$9;
   stop = dest + 80 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   switch (HEAP32[$response + 12 >> 2] | 0) {
   case 0:
    {
     HEAP32[15460] = 0;
     HEAP32[15461] = 1;
     HEAPF32[15462] = 1.0;
     HEAPF32[15463] = 1.0;
     HEAPF32[15464] = 1.0;
     HEAPF32[15465] = 1.0;
     dest = 61864;
     src = $pass_action0$sroa$9;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 1:
    {
     HEAP32[15460] = 0;
     HEAP32[15461] = 1;
     HEAPF32[15462] = 1.0;
     $6 = 61852;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     HEAPF32[15465] = 1.0;
     dest = 61864;
     src = $pass_action1$sroa$7;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 2:
    {
     HEAP32[15460] = 0;
     HEAP32[15461] = 1;
     HEAPF32[15462] = 0.0;
     HEAPF32[15463] = 1.0;
     HEAPF32[15464] = 0.0;
     HEAPF32[15465] = 1.0;
     dest = 61864;
     src = $pass_action2$sroa$7;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 3:
    {
     HEAP32[15460] = 0;
     HEAP32[15461] = 1;
     $10 = 61848;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     HEAPF32[15464] = 1.0;
     HEAPF32[15465] = 1.0;
     dest = 61864;
     src = $pass_action3$sroa$7;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 4:
    {
     HEAP32[15460] = 0;
     HEAP32[15461] = 1;
     HEAPF32[15462] = 1.0;
     HEAPF32[15463] = 1.0;
     HEAPF32[15464] = 0.0;
     HEAPF32[15465] = 1.0;
     dest = 61864;
     src = $pass_action4$sroa$8;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 6:
    {
     HEAP32[15460] = 0;
     HEAP32[15461] = 1;
     HEAPF32[15462] = 0.0;
     HEAPF32[15463] = 1.0;
     HEAPF32[15464] = 1.0;
     HEAPF32[15465] = 1.0;
     dest = 61864;
     src = $pass_action5$sroa$8;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   case 5:
    {
     HEAP32[15460] = 0;
     HEAP32[15461] = 1;
     HEAPF32[15462] = 1.0;
     HEAPF32[15463] = 0.0;
     HEAPF32[15464] = 1.0;
     HEAPF32[15465] = 1.0;
     dest = 61864;
     src = $pass_action6$sroa$8;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     break;
    }
   default:
    {
     HEAP32[15460] = 0;
     HEAP32[15461] = 1;
     HEAPF32[15462] = .5;
     HEAPF32[15463] = .5;
     HEAPF32[15464] = .5;
     HEAPF32[15465] = 1.0;
     dest = 61864;
     src = $pass_action7$sroa$9;
     stop = dest + 80 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
    }
   }
  }
 } else __ZL10load_imagePhi(HEAP32[$response + 40 >> 2] | 0, HEAP32[$response + 36 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _sg_apply_bindings($bindings) {
 $bindings = $bindings | 0;
 var $bindings$addr = 0, $call118 = 0, $call20 = 0, $call83 = 0, $fs_imgs = 0, $i = 0, $i106 = 0, $i71 = 0, $ib = 0, $ib_offset = 0, $num_fs_imgs = 0, $num_vbs = 0, $num_vs_imgs = 0, $pip = 0, $vb_offsets = 0, $vbs = 0, $vs_imgs = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $bindings$addr = sp + 168 | 0;
 $pip = sp + 164 | 0;
 $vbs = sp + 96 | 0;
 $num_vbs = sp + 160 | 0;
 $i = sp + 156 | 0;
 $ib = sp + 152 | 0;
 $vs_imgs = sp + 48 | 0;
 $num_vs_imgs = sp + 148 | 0;
 $i71 = sp + 144 | 0;
 $fs_imgs = sp;
 $num_fs_imgs = sp + 140 | 0;
 $i106 = sp + 136 | 0;
 $vb_offsets = sp + 132 | 0;
 $ib_offset = sp + 128 | 0;
 HEAP32[$bindings$addr >> 2] = $bindings;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14858, 22698);
 if (!(HEAP32[$bindings$addr >> 2] | 0)) ___assert_fail(22716, 21600, 14859, 22698);
 if (HEAP32[HEAP32[$bindings$addr >> 2] >> 2] | 0) ___assert_fail(22725, 21600, 14860, 22698);
 if (HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 172 >> 2] | 0) ___assert_fail(22725, 21600, 14860, 22698);
 if (!(__sg_validate_apply_bindings(HEAP32[$bindings$addr >> 2] | 0) | 0)) {
  HEAP8[2164246] = 0;
  STACKTOP = sp;
  return;
 }
 HEAP8[2164245] = 1;
 HEAP32[$pip >> 2] = __sg_lookup_pipeline(2164252, HEAP32[541060] | 0) | 0;
 if (!(HEAP32[$pip >> 2] | 0)) ___assert_fail(22631, 21600, 14869, 22698);
 HEAP32[$vbs >> 2] = 0;
 HEAP32[$vbs + 4 >> 2] = 0;
 HEAP32[$vbs + 8 >> 2] = 0;
 HEAP32[$vbs + 12 >> 2] = 0;
 HEAP32[$vbs + 16 >> 2] = 0;
 HEAP32[$vbs + 20 >> 2] = 0;
 HEAP32[$vbs + 24 >> 2] = 0;
 HEAP32[$vbs + 28 >> 2] = 0;
 HEAP32[$num_vbs >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 8) break;
  if (!(HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] | 0)) break;
  $call20 = __sg_lookup_buffer(2164252, HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[$vbs + (HEAP32[$i >> 2] << 2) >> 2] = $call20;
  if (!(HEAP32[$vbs + (HEAP32[$i >> 2] << 2) >> 2] | 0)) {
   label = 16;
   break;
  }
  HEAP8[2164246] = (HEAP8[2164246] & 1 & 2 == (HEAP32[(HEAP32[$vbs + (HEAP32[$i >> 2] << 2) >> 2] | 0) + 8 >> 2] | 0) | 0) != 0 & 1;
  HEAP8[2164246] = (HEAP8[2164246] & 1 & ((HEAP8[(HEAP32[$vbs + (HEAP32[$i >> 2] << 2) >> 2] | 0) + 12 + 8 >> 0] & 1 ^ 1) & 1) | 0) != 0 & 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  HEAP32[$num_vbs >> 2] = (HEAP32[$num_vbs >> 2] | 0) + 1;
 }
 if ((label | 0) == 16) ___assert_fail(22786, 21600, 14876, 22698);
 HEAP32[$ib >> 2] = 0;
 do if (HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 68 >> 2] | 0) {
  HEAP32[$ib >> 2] = __sg_lookup_buffer(2164252, HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 68 >> 2] | 0) | 0;
  if (HEAP32[$ib >> 2] | 0) {
   HEAP8[2164246] = (HEAP8[2164246] & 1 & 2 == (HEAP32[(HEAP32[$ib >> 2] | 0) + 8 >> 2] | 0) | 0) != 0 & 1;
   HEAP8[2164246] = (HEAP8[2164246] & 1 & ((HEAP8[(HEAP32[$ib >> 2] | 0) + 12 + 8 >> 0] & 1 ^ 1) & 1) | 0) != 0 & 1;
   break;
  } else ___assert_fail(22793, 21600, 14888, 22698);
 } while (0);
 dest = $vs_imgs;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$num_vs_imgs >> 2] = 0;
 HEAP32[$i71 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i71 >> 2] | 0) >= 12) break;
  if (!(HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 76 + (HEAP32[$i71 >> 2] << 2) >> 2] | 0)) break;
  $call83 = __sg_lookup_image(2164252, HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 76 + (HEAP32[$i71 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[$vs_imgs + (HEAP32[$i71 >> 2] << 2) >> 2] = $call83;
  if (!(HEAP32[$vs_imgs + (HEAP32[$i71 >> 2] << 2) >> 2] | 0)) {
   label = 26;
   break;
  }
  HEAP8[2164246] = (HEAP8[2164246] & 1 & 2 == (HEAP32[(HEAP32[$vs_imgs + (HEAP32[$i71 >> 2] << 2) >> 2] | 0) + 8 >> 2] | 0) | 0) != 0 & 1;
  HEAP32[$i71 >> 2] = (HEAP32[$i71 >> 2] | 0) + 1;
  HEAP32[$num_vs_imgs >> 2] = (HEAP32[$num_vs_imgs >> 2] | 0) + 1;
 }
 if ((label | 0) == 26) ___assert_fail(22796, 21600, 14898, 22698);
 dest = $fs_imgs;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$num_fs_imgs >> 2] = 0;
 HEAP32[$i106 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i106 >> 2] | 0) >= 12) break;
  if (!(HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 124 + (HEAP32[$i106 >> 2] << 2) >> 2] | 0)) break;
  $call118 = __sg_lookup_image(2164252, HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 124 + (HEAP32[$i106 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[$fs_imgs + (HEAP32[$i106 >> 2] << 2) >> 2] = $call118;
  if (!(HEAP32[$fs_imgs + (HEAP32[$i106 >> 2] << 2) >> 2] | 0)) {
   label = 32;
   break;
  }
  HEAP8[2164246] = (HEAP8[2164246] & 1 & 2 == (HEAP32[(HEAP32[$fs_imgs + (HEAP32[$i106 >> 2] << 2) >> 2] | 0) + 8 >> 2] | 0) | 0) != 0 & 1;
  HEAP32[$i106 >> 2] = (HEAP32[$i106 >> 2] | 0) + 1;
  HEAP32[$num_fs_imgs >> 2] = (HEAP32[$num_fs_imgs >> 2] | 0) + 1;
 }
 if ((label | 0) == 32) ___assert_fail(22807, 21600, 14911, 22698);
 if (!(HEAP8[2164246] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$vb_offsets >> 2] = (HEAP32[$bindings$addr >> 2] | 0) + 36;
 HEAP32[$ib_offset >> 2] = HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 72 >> 2];
 __sg_apply_bindings(HEAP32[$pip >> 2] | 0, $vbs, HEAP32[$vb_offsets >> 2] | 0, HEAP32[$num_vbs >> 2] | 0, HEAP32[$ib >> 2] | 0, HEAP32[$ib_offset >> 2] | 0, $vs_imgs, HEAP32[$num_vs_imgs >> 2] | 0, $fs_imgs, HEAP32[$num_fs_imgs >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbtt__tesselate_cubic($points, $num_points, $x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3, $objspace_flatness_squared, $n) {
 $points = $points | 0;
 $num_points = $num_points | 0;
 $x0 = +$x0;
 $y0 = +$y0;
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 $x3 = +$x3;
 $y3 = +$y3;
 $objspace_flatness_squared = +$objspace_flatness_squared;
 $n = $n | 0;
 var $20 = 0.0, $add13 = 0.0, $dx = 0, $dx0 = 0, $dx1 = 0, $dx2 = 0, $dy = 0, $dy0 = 0, $dy1 = 0, $dy2 = 0, $flatness_squared = 0, $longlen = 0, $mx = 0, $my = 0, $n$addr = 0, $num_points$addr = 0, $objspace_flatness_squared$addr = 0, $points$addr = 0, $shortlen = 0, $x0$addr = 0, $x01 = 0, $x1$addr = 0, $x12 = 0, $x2$addr = 0, $x23 = 0, $x3$addr = 0, $xa = 0, $xb = 0, $y0$addr = 0, $y01 = 0, $y1$addr = 0, $y12 = 0, $y2$addr = 0, $y23 = 0, $y3$addr = 0, $ya = 0, $yb = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $points$addr = sp + 136 | 0;
 $num_points$addr = sp + 132 | 0;
 $x0$addr = sp + 128 | 0;
 $y0$addr = sp + 124 | 0;
 $x1$addr = sp + 120 | 0;
 $y1$addr = sp + 116 | 0;
 $x2$addr = sp + 112 | 0;
 $y2$addr = sp + 108 | 0;
 $x3$addr = sp + 104 | 0;
 $y3$addr = sp + 100 | 0;
 $objspace_flatness_squared$addr = sp + 96 | 0;
 $n$addr = sp + 92 | 0;
 $dx0 = sp + 88 | 0;
 $dy0 = sp + 84 | 0;
 $dx1 = sp + 80 | 0;
 $dy1 = sp + 76 | 0;
 $dx2 = sp + 72 | 0;
 $dy2 = sp + 68 | 0;
 $dx = sp + 64 | 0;
 $dy = sp + 60 | 0;
 $longlen = sp + 56 | 0;
 $shortlen = sp + 52 | 0;
 $flatness_squared = sp + 48 | 0;
 $x01 = sp + 44 | 0;
 $y01 = sp + 40 | 0;
 $x12 = sp + 36 | 0;
 $y12 = sp + 32 | 0;
 $x23 = sp + 28 | 0;
 $y23 = sp + 24 | 0;
 $xa = sp + 20 | 0;
 $ya = sp + 16 | 0;
 $xb = sp + 12 | 0;
 $yb = sp + 8 | 0;
 $mx = sp + 4 | 0;
 $my = sp;
 HEAP32[$points$addr >> 2] = $points;
 HEAP32[$num_points$addr >> 2] = $num_points;
 HEAPF32[$x0$addr >> 2] = $x0;
 HEAPF32[$y0$addr >> 2] = $y0;
 HEAPF32[$x1$addr >> 2] = $x1;
 HEAPF32[$y1$addr >> 2] = $y1;
 HEAPF32[$x2$addr >> 2] = $x2;
 HEAPF32[$y2$addr >> 2] = $y2;
 HEAPF32[$x3$addr >> 2] = $x3;
 HEAPF32[$y3$addr >> 2] = $y3;
 HEAPF32[$objspace_flatness_squared$addr >> 2] = $objspace_flatness_squared;
 HEAP32[$n$addr >> 2] = $n;
 HEAPF32[$dx0 >> 2] = +HEAPF32[$x1$addr >> 2] - +HEAPF32[$x0$addr >> 2];
 HEAPF32[$dy0 >> 2] = +HEAPF32[$y1$addr >> 2] - +HEAPF32[$y0$addr >> 2];
 HEAPF32[$dx1 >> 2] = +HEAPF32[$x2$addr >> 2] - +HEAPF32[$x1$addr >> 2];
 HEAPF32[$dy1 >> 2] = +HEAPF32[$y2$addr >> 2] - +HEAPF32[$y1$addr >> 2];
 HEAPF32[$dx2 >> 2] = +HEAPF32[$x3$addr >> 2] - +HEAPF32[$x2$addr >> 2];
 HEAPF32[$dy2 >> 2] = +HEAPF32[$y3$addr >> 2] - +HEAPF32[$y2$addr >> 2];
 HEAPF32[$dx >> 2] = +HEAPF32[$x3$addr >> 2] - +HEAPF32[$x0$addr >> 2];
 HEAPF32[$dy >> 2] = +HEAPF32[$y3$addr >> 2] - +HEAPF32[$y0$addr >> 2];
 $20 = +Math_sqrt(+(+HEAPF32[$dx0 >> 2] * +HEAPF32[$dx0 >> 2] + +HEAPF32[$dy0 >> 2] * +HEAPF32[$dy0 >> 2]));
 $add13 = $20 + +Math_sqrt(+(+HEAPF32[$dx1 >> 2] * +HEAPF32[$dx1 >> 2] + +HEAPF32[$dy1 >> 2] * +HEAPF32[$dy1 >> 2]));
 HEAPF32[$longlen >> 2] = $add13 + +Math_sqrt(+(+HEAPF32[$dx2 >> 2] * +HEAPF32[$dx2 >> 2] + +HEAPF32[$dy2 >> 2] * +HEAPF32[$dy2 >> 2]));
 HEAPF32[$shortlen >> 2] = +Math_sqrt(+(+HEAPF32[$dx >> 2] * +HEAPF32[$dx >> 2] + +HEAPF32[$dy >> 2] * +HEAPF32[$dy >> 2]));
 HEAPF32[$flatness_squared >> 2] = +HEAPF32[$longlen >> 2] * +HEAPF32[$longlen >> 2] - +HEAPF32[$shortlen >> 2] * +HEAPF32[$shortlen >> 2];
 if ((HEAP32[$n$addr >> 2] | 0) > 16) {
  STACKTOP = sp;
  return;
 }
 if (+HEAPF32[$flatness_squared >> 2] > +HEAPF32[$objspace_flatness_squared$addr >> 2]) {
  HEAPF32[$x01 >> 2] = (+HEAPF32[$x0$addr >> 2] + +HEAPF32[$x1$addr >> 2]) / 2.0;
  HEAPF32[$y01 >> 2] = (+HEAPF32[$y0$addr >> 2] + +HEAPF32[$y1$addr >> 2]) / 2.0;
  HEAPF32[$x12 >> 2] = (+HEAPF32[$x1$addr >> 2] + +HEAPF32[$x2$addr >> 2]) / 2.0;
  HEAPF32[$y12 >> 2] = (+HEAPF32[$y1$addr >> 2] + +HEAPF32[$y2$addr >> 2]) / 2.0;
  HEAPF32[$x23 >> 2] = (+HEAPF32[$x2$addr >> 2] + +HEAPF32[$x3$addr >> 2]) / 2.0;
  HEAPF32[$y23 >> 2] = (+HEAPF32[$y2$addr >> 2] + +HEAPF32[$y3$addr >> 2]) / 2.0;
  HEAPF32[$xa >> 2] = (+HEAPF32[$x01 >> 2] + +HEAPF32[$x12 >> 2]) / 2.0;
  HEAPF32[$ya >> 2] = (+HEAPF32[$y01 >> 2] + +HEAPF32[$y12 >> 2]) / 2.0;
  HEAPF32[$xb >> 2] = (+HEAPF32[$x12 >> 2] + +HEAPF32[$x23 >> 2]) / 2.0;
  HEAPF32[$yb >> 2] = (+HEAPF32[$y12 >> 2] + +HEAPF32[$y23 >> 2]) / 2.0;
  HEAPF32[$mx >> 2] = (+HEAPF32[$xa >> 2] + +HEAPF32[$xb >> 2]) / 2.0;
  HEAPF32[$my >> 2] = (+HEAPF32[$ya >> 2] + +HEAPF32[$yb >> 2]) / 2.0;
  _stbtt__tesselate_cubic(HEAP32[$points$addr >> 2] | 0, HEAP32[$num_points$addr >> 2] | 0, +HEAPF32[$x0$addr >> 2], +HEAPF32[$y0$addr >> 2], +HEAPF32[$x01 >> 2], +HEAPF32[$y01 >> 2], +HEAPF32[$xa >> 2], +HEAPF32[$ya >> 2], +HEAPF32[$mx >> 2], +HEAPF32[$my >> 2], +HEAPF32[$objspace_flatness_squared$addr >> 2], (HEAP32[$n$addr >> 2] | 0) + 1 | 0);
  _stbtt__tesselate_cubic(HEAP32[$points$addr >> 2] | 0, HEAP32[$num_points$addr >> 2] | 0, +HEAPF32[$mx >> 2], +HEAPF32[$my >> 2], +HEAPF32[$xb >> 2], +HEAPF32[$yb >> 2], +HEAPF32[$x23 >> 2], +HEAPF32[$y23 >> 2], +HEAPF32[$x3$addr >> 2], +HEAPF32[$y3$addr >> 2], +HEAPF32[$objspace_flatness_squared$addr >> 2], (HEAP32[$n$addr >> 2] | 0) + 1 | 0);
  STACKTOP = sp;
  return;
 } else {
  _stbtt__add_point(HEAP32[$points$addr >> 2] | 0, HEAP32[HEAP32[$num_points$addr >> 2] >> 2] | 0, +HEAPF32[$x3$addr >> 2], +HEAPF32[$y3$addr >> 2]);
  HEAP32[HEAP32[$num_points$addr >> 2] >> 2] = (HEAP32[HEAP32[$num_points$addr >> 2] >> 2] | 0) + 1;
  STACKTOP = sp;
  return;
 }
}

function __sg_setup_pools($p, $desc) {
 $p = $p | 0;
 $desc = $desc | 0;
 var $buffer_pool_byte_size = 0, $call = 0, $call101 = 0, $call29 = 0, $call47 = 0, $call65 = 0, $call83 = 0, $context_pool_byte_size = 0, $desc$addr = 0, $image_pool_byte_size = 0, $p$addr = 0, $pass_pool_byte_size = 0, $pipeline_pool_byte_size = 0, $shader_pool_byte_size = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $p$addr = sp + 28 | 0;
 $desc$addr = sp + 24 | 0;
 $buffer_pool_byte_size = sp + 20 | 0;
 $image_pool_byte_size = sp + 16 | 0;
 $shader_pool_byte_size = sp + 12 | 0;
 $pipeline_pool_byte_size = sp + 8 | 0;
 $pass_pool_byte_size = sp + 4 | 0;
 $context_pool_byte_size = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$p$addr >> 2] | 0)) ___assert_fail(28915, 21600, 12875, 28917);
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 12876, 28917);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0) <= 0) ___assert_fail(28933, 21600, 12878, 28917);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0) >= 65536) ___assert_fail(28933, 21600, 12878, 28917);
 __sg_init_pool(HEAP32[$p$addr >> 2] | 0, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[$buffer_pool_byte_size >> 2] = (HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) * 60;
 $call = _malloc(HEAP32[$buffer_pool_byte_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 96 >> 2] = $call;
 if (!(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 96 >> 2] | 0)) ___assert_fail(29010, 21600, 12882, 28917);
 _memset(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 96 >> 2] | 0, 0, HEAP32[$buffer_pool_byte_size >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 2] | 0) <= 0) ___assert_fail(29021, 21600, 12885, 28917);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 2] | 0) >= 65536) ___assert_fail(29021, 21600, 12885, 28917);
 __sg_init_pool((HEAP32[$p$addr >> 2] | 0) + 16 | 0, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[$image_pool_byte_size >> 2] = (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 16 >> 2] | 0) * 112;
 $call29 = _malloc(HEAP32[$image_pool_byte_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 100 >> 2] = $call29;
 if (!(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 100 >> 2] | 0)) ___assert_fail(29096, 21600, 12889, 28917);
 _memset(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 100 >> 2] | 0, 0, HEAP32[$image_pool_byte_size >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 12 >> 2] | 0) <= 0) ___assert_fail(29106, 21600, 12892, 28917);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 12 >> 2] | 0) >= 65536) ___assert_fail(29106, 21600, 12892, 28917);
 __sg_init_pool((HEAP32[$p$addr >> 2] | 0) + 32 | 0, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[$shader_pool_byte_size >> 2] = (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 32 >> 2] | 0) * 2176;
 $call47 = _malloc(HEAP32[$shader_pool_byte_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 104 >> 2] = $call47;
 if (!(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 104 >> 2] | 0)) ___assert_fail(29183, 21600, 12896, 28917);
 _memset(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 104 >> 2] | 0, 0, HEAP32[$shader_pool_byte_size >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2] | 0) <= 0) ___assert_fail(29194, 21600, 12899, 28917);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2] | 0) >= 65536) ___assert_fail(29194, 21600, 12899, 28917);
 __sg_init_pool((HEAP32[$p$addr >> 2] | 0) + 48 | 0, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2] | 0);
 HEAP32[$pipeline_pool_byte_size >> 2] = (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 48 >> 2] | 0) * 472;
 $call65 = _malloc(HEAP32[$pipeline_pool_byte_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 108 >> 2] = $call65;
 if (!(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 108 >> 2] | 0)) ___assert_fail(29275, 21600, 12903, 28917);
 _memset(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 108 >> 2] | 0, 0, HEAP32[$pipeline_pool_byte_size >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 20 >> 2] | 0) <= 0) ___assert_fail(29288, 21600, 12906, 28917);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 20 >> 2] | 0) >= 65536) ___assert_fail(29288, 21600, 12906, 28917);
 __sg_init_pool((HEAP32[$p$addr >> 2] | 0) + 64 | 0, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 20 >> 2] | 0);
 HEAP32[$pass_pool_byte_size >> 2] = (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 64 >> 2] | 0) * 120;
 $call83 = _malloc(HEAP32[$pass_pool_byte_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 112 >> 2] = $call83;
 if (!(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 112 >> 2] | 0)) ___assert_fail(29361, 21600, 12910, 28917);
 _memset(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 112 >> 2] | 0, 0, HEAP32[$pass_pool_byte_size >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 24 >> 2] | 0) <= 0) ___assert_fail(29371, 21600, 12913, 28917);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 24 >> 2] | 0) >= 65536) ___assert_fail(29371, 21600, 12913, 28917);
 __sg_init_pool((HEAP32[$p$addr >> 2] | 0) + 80 | 0, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 24 >> 2] | 0);
 HEAP32[$context_pool_byte_size >> 2] = HEAP32[(HEAP32[$p$addr >> 2] | 0) + 80 >> 2] << 4;
 $call101 = _malloc(HEAP32[$context_pool_byte_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 116 >> 2] = $call101;
 if (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 116 >> 2] | 0) {
  _memset(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 116 >> 2] | 0, 0, HEAP32[$context_pool_byte_size >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(29450, 21600, 12917, 28917);
}

function _stbtt__rasterize($result, $pts, $wcount, $windings, $scale_x, $scale_y, $shift_x, $shift_y, $off_x, $off_y, $invert, $userdata) {
 $result = $result | 0;
 $pts = $pts | 0;
 $wcount = $wcount | 0;
 $windings = $windings | 0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $off_x = $off_x | 0;
 $off_y = $off_y | 0;
 $invert = $invert | 0;
 $userdata = $userdata | 0;
 var $1 = 0.0, $40 = 0.0, $43 = 0.0, $79 = 0, $a = 0, $b = 0, $e = 0, $i = 0, $invert$addr = 0, $j = 0, $k = 0, $m = 0, $n = 0, $off_x$addr = 0, $off_y$addr = 0, $p = 0, $pts$addr = 0, $result$addr = 0, $scale_x$addr = 0, $scale_y$addr = 0, $shift_x$addr = 0, $shift_y$addr = 0, $userdata$addr = 0, $vsubsample = 0, $wcount$addr = 0, $windings$addr = 0, $y_scale_inv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $result$addr = sp + 88 | 0;
 $pts$addr = sp + 84 | 0;
 $wcount$addr = sp + 80 | 0;
 $windings$addr = sp + 76 | 0;
 $scale_x$addr = sp + 72 | 0;
 $scale_y$addr = sp + 68 | 0;
 $shift_x$addr = sp + 64 | 0;
 $shift_y$addr = sp + 60 | 0;
 $off_x$addr = sp + 56 | 0;
 $off_y$addr = sp + 52 | 0;
 $invert$addr = sp + 48 | 0;
 $userdata$addr = sp + 44 | 0;
 $y_scale_inv = sp + 40 | 0;
 $e = sp + 36 | 0;
 $n = sp + 32 | 0;
 $i = sp + 28 | 0;
 $j = sp + 24 | 0;
 $k = sp + 20 | 0;
 $m = sp + 16 | 0;
 $vsubsample = sp + 12 | 0;
 $p = sp + 8 | 0;
 $a = sp + 4 | 0;
 $b = sp;
 HEAP32[$result$addr >> 2] = $result;
 HEAP32[$pts$addr >> 2] = $pts;
 HEAP32[$wcount$addr >> 2] = $wcount;
 HEAP32[$windings$addr >> 2] = $windings;
 HEAPF32[$scale_x$addr >> 2] = $scale_x;
 HEAPF32[$scale_y$addr >> 2] = $scale_y;
 HEAPF32[$shift_x$addr >> 2] = $shift_x;
 HEAPF32[$shift_y$addr >> 2] = $shift_y;
 HEAP32[$off_x$addr >> 2] = $off_x;
 HEAP32[$off_y$addr >> 2] = $off_y;
 HEAP32[$invert$addr >> 2] = $invert;
 HEAP32[$userdata$addr >> 2] = $userdata;
 $1 = +HEAPF32[$scale_y$addr >> 2];
 HEAPF32[$y_scale_inv >> 2] = HEAP32[$invert$addr >> 2] | 0 ? -$1 : $1;
 HEAP32[$vsubsample >> 2] = 1;
 HEAP32[$n >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$windings$addr >> 2] | 0)) break;
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + (HEAP32[(HEAP32[$wcount$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$e >> 2] = _fons__tmpalloc(((HEAP32[$n >> 2] | 0) + 1 | 0) * 20 | 0, HEAP32[$userdata$addr >> 2] | 0) | 0;
 if (!(HEAP32[$e >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$n >> 2] = 0;
 HEAP32[$m >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$windings$addr >> 2] | 0)) break;
  HEAP32[$p >> 2] = (HEAP32[$pts$addr >> 2] | 0) + (HEAP32[$m >> 2] << 3);
  HEAP32[$m >> 2] = (HEAP32[$m >> 2] | 0) + (HEAP32[(HEAP32[$wcount$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  HEAP32[$j >> 2] = (HEAP32[(HEAP32[$wcount$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) - 1;
  HEAP32[$k >> 2] = 0;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) >= (HEAP32[(HEAP32[$wcount$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0)) break;
   HEAP32[$a >> 2] = HEAP32[$k >> 2];
   HEAP32[$b >> 2] = HEAP32[$j >> 2];
   if (!(+HEAPF32[(HEAP32[$p >> 2] | 0) + (HEAP32[$j >> 2] << 3) + 4 >> 2] == +HEAPF32[(HEAP32[$p >> 2] | 0) + (HEAP32[$k >> 2] << 3) + 4 >> 2])) {
    HEAP32[(HEAP32[$e >> 2] | 0) + ((HEAP32[$n >> 2] | 0) * 20 | 0) + 16 >> 2] = 0;
    $40 = +HEAPF32[(HEAP32[$p >> 2] | 0) + (HEAP32[$j >> 2] << 3) + 4 >> 2];
    $43 = +HEAPF32[(HEAP32[$p >> 2] | 0) + (HEAP32[$k >> 2] << 3) + 4 >> 2];
    if (HEAP32[$invert$addr >> 2] | 0) {
     if ($40 > $43) label = 13;
    } else if ($40 < $43) label = 13;
    if ((label | 0) == 13) {
     label = 0;
     HEAP32[(HEAP32[$e >> 2] | 0) + ((HEAP32[$n >> 2] | 0) * 20 | 0) + 16 >> 2] = 1;
     HEAP32[$a >> 2] = HEAP32[$j >> 2];
     HEAP32[$b >> 2] = HEAP32[$k >> 2];
    }
    HEAPF32[(HEAP32[$e >> 2] | 0) + ((HEAP32[$n >> 2] | 0) * 20 | 0) >> 2] = +HEAPF32[(HEAP32[$p >> 2] | 0) + (HEAP32[$a >> 2] << 3) >> 2] * +HEAPF32[$scale_x$addr >> 2] + +HEAPF32[$shift_x$addr >> 2];
    HEAPF32[(HEAP32[$e >> 2] | 0) + ((HEAP32[$n >> 2] | 0) * 20 | 0) + 4 >> 2] = (+HEAPF32[(HEAP32[$p >> 2] | 0) + (HEAP32[$a >> 2] << 3) + 4 >> 2] * +HEAPF32[$y_scale_inv >> 2] + +HEAPF32[$shift_y$addr >> 2]) * +(HEAP32[$vsubsample >> 2] | 0);
    HEAPF32[(HEAP32[$e >> 2] | 0) + ((HEAP32[$n >> 2] | 0) * 20 | 0) + 8 >> 2] = +HEAPF32[(HEAP32[$p >> 2] | 0) + (HEAP32[$b >> 2] << 3) >> 2] * +HEAPF32[$scale_x$addr >> 2] + +HEAPF32[$shift_x$addr >> 2];
    HEAPF32[(HEAP32[$e >> 2] | 0) + ((HEAP32[$n >> 2] | 0) * 20 | 0) + 12 >> 2] = (+HEAPF32[(HEAP32[$p >> 2] | 0) + (HEAP32[$b >> 2] << 3) + 4 >> 2] * +HEAPF32[$y_scale_inv >> 2] + +HEAPF32[$shift_y$addr >> 2]) * +(HEAP32[$vsubsample >> 2] | 0);
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
   }
   $79 = HEAP32[$k >> 2] | 0;
   HEAP32[$k >> 2] = $79 + 1;
   HEAP32[$j >> 2] = $79;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _stbtt__sort_edges(HEAP32[$e >> 2] | 0, HEAP32[$n >> 2] | 0);
 _stbtt__rasterize_sorted_edges(HEAP32[$result$addr >> 2] | 0, HEAP32[$e >> 2] | 0, HEAP32[$n >> 2] | 0, HEAP32[$vsubsample >> 2] | 0, HEAP32[$off_x$addr >> 2] | 0, HEAP32[$off_y$addr >> 2] | 0, HEAP32[$userdata$addr >> 2] | 0);
 _fons__tmpfree(HEAP32[$e >> 2] | 0, HEAP32[$userdata$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _fons__getQuad($stash, $font, $prevGlyphIndex, $glyph, $scale, $spacing, $x, $y, $q) {
 $stash = $stash | 0;
 $font = $font | 0;
 $prevGlyphIndex = $prevGlyphIndex | 0;
 $glyph = $glyph | 0;
 $scale = +$scale;
 $spacing = +$spacing;
 $x = $x | 0;
 $y = $y | 0;
 $q = $q | 0;
 var $28 = 0.0, $29 = 0.0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $add82 = 0.0, $add85 = 0.0, $adv = 0, $conv = 0.0, $conv80 = 0, $conv81 = 0.0, $conv83 = 0, $conv84 = 0.0, $div = 0.0, $font$addr = 0, $glyph$addr = 0, $prevGlyphIndex$addr = 0, $q$addr = 0, $rx = 0, $ry = 0, $scale$addr = 0, $spacing$addr = 0, $stash$addr = 0, $tobool = 0, $x$addr = 0, $x0 = 0, $x1 = 0, $xadv = 0, $xoff = 0, $y$addr = 0, $y0 = 0, $y1 = 0, $yoff = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $stash$addr = sp + 68 | 0;
 $font$addr = sp + 64 | 0;
 $prevGlyphIndex$addr = sp + 60 | 0;
 $glyph$addr = sp + 56 | 0;
 $scale$addr = sp + 52 | 0;
 $spacing$addr = sp + 48 | 0;
 $x$addr = sp + 44 | 0;
 $y$addr = sp + 40 | 0;
 $q$addr = sp + 36 | 0;
 $rx = sp + 32 | 0;
 $ry = sp + 28 | 0;
 $xoff = sp + 24 | 0;
 $yoff = sp + 20 | 0;
 $x0 = sp + 16 | 0;
 $y0 = sp + 12 | 0;
 $x1 = sp + 8 | 0;
 $y1 = sp + 4 | 0;
 $adv = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$prevGlyphIndex$addr >> 2] = $prevGlyphIndex;
 HEAP32[$glyph$addr >> 2] = $glyph;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAPF32[$spacing$addr >> 2] = $spacing;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$q$addr >> 2] = $q;
 if ((HEAP32[$prevGlyphIndex$addr >> 2] | 0) != -1) {
  $conv = +(_fons__tt_getGlyphKernAdvance(HEAP32[$font$addr >> 2] | 0, HEAP32[$prevGlyphIndex$addr >> 2] | 0, HEAP32[(HEAP32[$glyph$addr >> 2] | 0) + 4 >> 2] | 0) | 0);
  HEAPF32[$adv >> 2] = $conv * +HEAPF32[$scale$addr >> 2];
  $8 = HEAP32[$x$addr >> 2] | 0;
  HEAPF32[$8 >> 2] = +HEAPF32[$8 >> 2] + +(~~(+HEAPF32[$adv >> 2] + +HEAPF32[$spacing$addr >> 2] + .5) | 0);
 }
 HEAPF32[$xoff >> 2] = +(((HEAP16[(HEAP32[$glyph$addr >> 2] | 0) + 26 >> 1] | 0) + 1 & 65535) << 16 >> 16);
 HEAPF32[$yoff >> 2] = +(((HEAP16[(HEAP32[$glyph$addr >> 2] | 0) + 28 >> 1] | 0) + 1 & 65535) << 16 >> 16);
 HEAPF32[$x0 >> 2] = +((HEAP16[(HEAP32[$glyph$addr >> 2] | 0) + 16 >> 1] | 0) + 1 | 0);
 HEAPF32[$y0 >> 2] = +((HEAP16[(HEAP32[$glyph$addr >> 2] | 0) + 18 >> 1] | 0) + 1 | 0);
 HEAPF32[$x1 >> 2] = +((HEAP16[(HEAP32[$glyph$addr >> 2] | 0) + 20 >> 1] | 0) - 1 | 0);
 HEAPF32[$y1 >> 2] = +((HEAP16[(HEAP32[$glyph$addr >> 2] | 0) + 22 >> 1] | 0) - 1 | 0);
 $tobool = (HEAPU8[(HEAP32[$stash$addr >> 2] | 0) + 8 >> 0] & 1 | 0) != 0;
 HEAPF32[$rx >> 2] = +(~~(+HEAPF32[HEAP32[$x$addr >> 2] >> 2] + +HEAPF32[$xoff >> 2]) | 0);
 $28 = +HEAPF32[HEAP32[$y$addr >> 2] >> 2];
 $29 = +HEAPF32[$yoff >> 2];
 if ($tobool) {
  HEAPF32[$ry >> 2] = +(~~($28 + $29) | 0);
  HEAPF32[HEAP32[$q$addr >> 2] >> 2] = +HEAPF32[$rx >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 4 >> 2] = +HEAPF32[$ry >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 16 >> 2] = +HEAPF32[$rx >> 2] + +HEAPF32[$x1 >> 2] - +HEAPF32[$x0 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 20 >> 2] = +HEAPF32[$ry >> 2] + +HEAPF32[$y1 >> 2] - +HEAPF32[$y0 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 8 >> 2] = +HEAPF32[$x0 >> 2] * +HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 36 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 12 >> 2] = +HEAPF32[$y0 >> 2] * +HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 40 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 24 >> 2] = +HEAPF32[$x1 >> 2] * +HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 36 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 28 >> 2] = +HEAPF32[$y1 >> 2] * +HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 40 >> 2];
  $86 = HEAP32[$glyph$addr >> 2] | 0;
  $xadv = $86 + 24 | 0;
  $87 = HEAP16[$xadv >> 1] | 0;
  $conv80 = $87 << 16 >> 16;
  $conv81 = +($conv80 | 0);
  $div = $conv81 / 10.0;
  $add82 = $div + .5;
  $conv83 = ~~$add82;
  $conv84 = +($conv83 | 0);
  $88 = HEAP32[$x$addr >> 2] | 0;
  $89 = +HEAPF32[$88 >> 2];
  $add85 = $89 + $conv84;
  HEAPF32[$88 >> 2] = $add85;
  STACKTOP = sp;
  return;
 } else {
  HEAPF32[$ry >> 2] = +(~~($28 - $29) | 0);
  HEAPF32[HEAP32[$q$addr >> 2] >> 2] = +HEAPF32[$rx >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 4 >> 2] = +HEAPF32[$ry >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 16 >> 2] = +HEAPF32[$rx >> 2] + +HEAPF32[$x1 >> 2] - +HEAPF32[$x0 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 20 >> 2] = +HEAPF32[$ry >> 2] - +HEAPF32[$y1 >> 2] + +HEAPF32[$y0 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 8 >> 2] = +HEAPF32[$x0 >> 2] * +HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 36 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 12 >> 2] = +HEAPF32[$y0 >> 2] * +HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 40 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 24 >> 2] = +HEAPF32[$x1 >> 2] * +HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 36 >> 2];
  HEAPF32[(HEAP32[$q$addr >> 2] | 0) + 28 >> 2] = +HEAPF32[$y1 >> 2] * +HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 40 >> 2];
  $86 = HEAP32[$glyph$addr >> 2] | 0;
  $xadv = $86 + 24 | 0;
  $87 = HEAP16[$xadv >> 1] | 0;
  $conv80 = $87 << 16 >> 16;
  $conv81 = +($conv80 | 0);
  $div = $conv81 / 10.0;
  $add82 = $div + .5;
  $conv83 = ~~$add82;
  $conv84 = +($conv83 | 0);
  $88 = HEAP32[$x$addr >> 2] | 0;
  $89 = +HEAPF32[$88 >> 2];
  $add85 = $89 + $conv84;
  HEAPF32[$88 >> 2] = $add85;
  STACKTOP = sp;
  return;
 }
}

function __ZN13TPPLPartition14Triangulate_ECEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE($this, $poly, $triangles) {
 $this = $this | 0;
 $poly = $poly | 0;
 $triangles = $triangles | 0;
 var $9 = 0, $arrayctor$cur = 0, $arrayctor$end = 0, $arrayidx55 = 0, $call12 = 0, $call14 = 0, $call19 = 0, $ear$0 = 0, $ear$1 = 0, $ear$2 = 0, $earfound$0$off0 = 0, $earfound$1$off0 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $j$0 = 0, $next = 0, $next83 = 0, $p = 0, $previous80 = 0, $retval$0 = 0, $retval$1 = 0, $sub = 0, $sub49 = 0, $sub94 = 0, $tobool60 = 0, $triangle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $triangle = sp;
 if (__ZNK8TPPLPoly5ValidEv($poly) | 0) {
  __ZN8TPPLPolyC2Ev($triangle);
  do if ((__ZNK8TPPLPoly12GetNumPointsEv($poly) | 0) < 3) $retval$0 = 0; else {
   if ((__ZNK8TPPLPoly12GetNumPointsEv($poly) | 0) == 3) {
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($triangles, $poly);
    $retval$0 = 1;
    break;
   }
   $call12 = __ZNK8TPPLPoly12GetNumPointsEv($poly) | 0;
   $call14 = __Znam($call12 >>> 0 > 89478485 ? -1 : $call12 * 48 | 0) | 0;
   if ($call12 | 0) {
    $arrayctor$end = $call14 + ($call12 * 48 | 0) | 0;
    $arrayctor$cur = $call14;
    do {
     __ZN13TPPLPartition15PartitionVertexC2Ev($arrayctor$cur);
     $arrayctor$cur = $arrayctor$cur + 48 | 0;
    } while (($arrayctor$cur | 0) != ($arrayctor$end | 0));
   }
   $sub = $call12 + -1 | 0;
   $next = $call14 + ($sub * 48 | 0) + 44 | 0;
   $i$0 = 0;
   while (1) {
    if (($i$0 | 0) >= ($call12 | 0)) break;
    HEAP8[$call14 + ($i$0 * 48 | 0) >> 0] = 1;
    $call19 = __ZN8TPPLPoly8GetPointEl($poly, $i$0) | 0;
    $p = $call14 + ($i$0 * 48 | 0) + 8 | 0;
    HEAP32[$p >> 2] = HEAP32[$call19 >> 2];
    HEAP32[$p + 4 >> 2] = HEAP32[$call19 + 4 >> 2];
    HEAP32[$p + 8 >> 2] = HEAP32[$call19 + 8 >> 2];
    HEAP32[$p + 12 >> 2] = HEAP32[$call19 + 12 >> 2];
    HEAP32[$p + 16 >> 2] = HEAP32[$call19 + 16 >> 2];
    HEAP32[$p + 20 >> 2] = HEAP32[$call19 + 20 >> 2];
    if (($i$0 | 0) == ($sub | 0)) HEAP32[$next >> 2] = $call14; else HEAP32[$call14 + ($i$0 * 48 | 0) + 44 >> 2] = $call14 + (($i$0 + 1 | 0) * 48 | 0);
    HEAP32[$call14 + ($i$0 * 48 | 0) + 40 >> 2] = $call14 + ((($i$0 | 0) == 0 ? $sub : $i$0 + -1 | 0) * 48 | 0);
    $i$0 = $i$0 + 1 | 0;
   }
   $i$1 = 0;
   while (1) {
    if (($i$1 | 0) >= ($call12 | 0)) break;
    __ZN13TPPLPartition12UpdateVertexEPNS_15PartitionVertexES1_l(0, $call14 + ($i$1 * 48 | 0) | 0, $call14, $call12);
    $i$1 = $i$1 + 1 | 0;
   }
   $sub49 = $call12 + -3 | 0;
   $sub94 = $call12 + -4 | 0;
   $ear$0 = 0;
   $i$2 = 0;
   while (1) {
    if (($i$2 | 0) >= ($sub49 | 0)) break;
    $ear$1 = $ear$0;
    $earfound$0$off0 = 0;
    $j$0 = 0;
    while (1) {
     if (($j$0 | 0) >= ($call12 | 0)) break;
     $arrayidx55 = $call14 + ($j$0 * 48 | 0) | 0;
     if (!(HEAP8[$arrayidx55 >> 0] | 0)) {
      $ear$2 = $ear$1;
      $earfound$1$off0 = $earfound$0$off0;
     } else {
      $tobool60 = (HEAP8[$call14 + ($j$0 * 48 | 0) + 2 >> 0] | 0) == 0;
      if ($tobool60 | $earfound$0$off0 ^ 1) {
       $ear$2 = $tobool60 ? $ear$1 : $arrayidx55;
       $earfound$1$off0 = $earfound$0$off0 | $tobool60 ^ 1;
      } else if (+HEAPF64[$call14 + ($j$0 * 48 | 0) + 32 >> 3] > +HEAPF64[$ear$1 + 32 >> 3]) {
       $ear$2 = $arrayidx55;
       $earfound$1$off0 = $earfound$0$off0;
      } else {
       $ear$2 = $ear$1;
       $earfound$1$off0 = $earfound$0$off0;
      }
     }
     $ear$1 = $ear$2;
     $earfound$0$off0 = $earfound$1$off0;
     $j$0 = $j$0 + 1 | 0;
    }
    if (!$earfound$0$off0) {
     label = 28;
     break;
    }
    $previous80 = $ear$1 + 40 | 0;
    $next83 = $ear$1 + 44 | 0;
    __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($triangle, (HEAP32[$previous80 >> 2] | 0) + 8 | 0, $ear$1 + 8 | 0, (HEAP32[$next83 >> 2] | 0) + 8 | 0);
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($triangles, $triangle);
    HEAP8[$ear$1 >> 0] = 0;
    $9 = HEAP32[$previous80 >> 2] | 0;
    HEAP32[$9 + 44 >> 2] = HEAP32[$next83 >> 2];
    HEAP32[(HEAP32[$next83 >> 2] | 0) + 40 >> 2] = $9;
    if (($i$2 | 0) == ($sub94 | 0)) break;
    __ZN13TPPLPartition12UpdateVertexEPNS_15PartitionVertexES1_l(0, HEAP32[$previous80 >> 2] | 0, $call14, $call12);
    __ZN13TPPLPartition12UpdateVertexEPNS_15PartitionVertexES1_l(0, HEAP32[$next83 >> 2] | 0, $call14, $call12);
    $ear$0 = $ear$1;
    $i$2 = $i$2 + 1 | 0;
   }
   if ((label | 0) == 28) {
    __ZdaPv($call14);
    $retval$0 = 0;
    break;
   }
   $i$3 = 0;
   while (1) {
    if (($i$3 | 0) >= ($call12 | 0)) break;
    if (HEAP8[$call14 + ($i$3 * 48 | 0) >> 0] | 0) {
     label = 33;
     break;
    }
    $i$3 = $i$3 + 1 | 0;
   }
   if ((label | 0) == 33) {
    __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($triangle, (HEAP32[$call14 + ($i$3 * 48 | 0) + 40 >> 2] | 0) + 8 | 0, $call14 + ($i$3 * 48 | 0) + 8 | 0, (HEAP32[$call14 + ($i$3 * 48 | 0) + 44 >> 2] | 0) + 8 | 0);
    __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($triangles, $triangle);
   }
   __ZdaPv($call14);
   $retval$0 = 1;
  } while (0);
  __ZN8TPPLPolyD2Ev($triangle);
  $retval$1 = $retval$0;
 } else $retval$1 = 0;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN7meshoptL17calculateSortDataEPfPKjmPKfmS2_m($sort_data, $indices, $index_count, $vertex_positions, $vertex_positions_stride, $clusters, $cluster_count) {
 $sort_data = $sort_data | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $vertex_positions = $vertex_positions | 0;
 $vertex_positions_stride = $vertex_positions_stride | 0;
 $clusters = $clusters | 0;
 $cluster_count = $cluster_count | 0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $6 = 0.0, $add$ptr = 0, $add$ptr37 = 0, $add$ptr41 = 0, $add$ptr45 = 0, $add23 = 0, $cluster$0 = 0, $cluster_area$0 = 0.0, $cluster_centroid$sroa$0$0 = 0.0, $cluster_centroid$sroa$13$1 = 0.0, $cluster_centroid$sroa$8$0 = 0.0, $cluster_normal$sroa$0$0 = 0.0, $cluster_normal$sroa$10$0 = 0.0, $cluster_normal$sroa$17$1 = 0.0, $cond = 0, $cond135 = 0.0, $cond158 = 0.0, $conv = 0.0, $div = 0, $div10 = 0.0, $div13 = 0.0, $div16 = 0.0, $div98 = 0.0, $i$0 = 0, $i29$0 = 0, $mesh_centroid$sroa$0$0 = 0.0, $mesh_centroid$sroa$13$0 = 0.0, $mesh_centroid$sroa$8$0 = 0.0, $mul22 = 0, $sub = 0.0, $sub50 = 0.0, $sub54 = 0.0, $sub58 = 0.0, $sub62 = 0.0, $sub66 = 0.0, $sub73 = 0.0, $sub80 = 0.0, $sub87 = 0.0, label = 0;
 $div = $vertex_positions_stride >>> 2;
 $i$0 = 0;
 $mesh_centroid$sroa$0$0 = 0.0;
 $mesh_centroid$sroa$13$0 = 0.0;
 $mesh_centroid$sroa$8$0 = 0.0;
 while (1) {
  if (($i$0 | 0) == ($index_count | 0)) break;
  $add$ptr = $vertex_positions + ((Math_imul(HEAP32[$indices + ($i$0 << 2) >> 2] | 0, $div) | 0) << 2) | 0;
  $i$0 = $i$0 + 1 | 0;
  $mesh_centroid$sroa$0$0 = $mesh_centroid$sroa$0$0 + +HEAPF32[$add$ptr >> 2];
  $mesh_centroid$sroa$13$0 = $mesh_centroid$sroa$13$0 + +HEAPF32[$add$ptr + 8 >> 2];
  $mesh_centroid$sroa$8$0 = $mesh_centroid$sroa$8$0 + +HEAPF32[$add$ptr + 4 >> 2];
 }
 $conv = +($index_count >>> 0);
 $div10 = $mesh_centroid$sroa$0$0 / $conv;
 $div13 = $mesh_centroid$sroa$8$0 / $conv;
 $div16 = $mesh_centroid$sroa$13$0 / $conv;
 $cluster$0 = 0;
 while (1) {
  if ($cluster$0 >>> 0 >= $cluster_count >>> 0) {
   label = 6;
   break;
  }
  $mul22 = (HEAP32[$clusters + ($cluster$0 << 2) >> 2] | 0) * 3 | 0;
  $add23 = $cluster$0 + 1 | 0;
  if ($add23 >>> 0 < $cluster_count >>> 0) $cond = (HEAP32[$clusters + ($add23 << 2) >> 2] | 0) * 3 | 0; else $cond = $index_count;
  if ($mul22 >>> 0 >= $cond >>> 0) {
   label = 11;
   break;
  }
  $cluster_area$0 = 0.0;
  $cluster_centroid$sroa$0$0 = 0.0;
  $cluster_centroid$sroa$13$1 = 0.0;
  $cluster_centroid$sroa$8$0 = 0.0;
  $cluster_normal$sroa$0$0 = 0.0;
  $cluster_normal$sroa$10$0 = 0.0;
  $cluster_normal$sroa$17$1 = 0.0;
  $i29$0 = $mul22;
  while (1) {
   if ($i29$0 >>> 0 >= $cond >>> 0) break;
   $add$ptr37 = $vertex_positions + ((Math_imul(HEAP32[$indices + ($i29$0 << 2) >> 2] | 0, $div) | 0) << 2) | 0;
   $add$ptr41 = $vertex_positions + ((Math_imul(HEAP32[$indices + ($i29$0 + 1 << 2) >> 2] | 0, $div) | 0) << 2) | 0;
   $add$ptr45 = $vertex_positions + ((Math_imul(HEAP32[$indices + ($i29$0 + 2 << 2) >> 2] | 0, $div) | 0) << 2) | 0;
   $10 = +HEAPF32[$add$ptr41 >> 2];
   $11 = +HEAPF32[$add$ptr37 >> 2];
   $sub = $10 - $11;
   $12 = +HEAPF32[$add$ptr41 + 4 >> 2];
   $13 = +HEAPF32[$add$ptr37 + 4 >> 2];
   $sub50 = $12 - $13;
   $14 = +HEAPF32[$add$ptr41 + 8 >> 2];
   $15 = +HEAPF32[$add$ptr37 + 8 >> 2];
   $sub54 = $14 - $15;
   $16 = +HEAPF32[$add$ptr45 >> 2];
   $sub58 = $16 - $11;
   $17 = +HEAPF32[$add$ptr45 + 4 >> 2];
   $sub62 = $17 - $13;
   $18 = +HEAPF32[$add$ptr45 + 8 >> 2];
   $sub66 = $18 - $15;
   $sub73 = $sub50 * $sub66 - $sub54 * $sub62;
   $sub80 = $sub54 * $sub58 - $sub * $sub66;
   $sub87 = $sub * $sub62 - $sub50 * $sub58;
   $19 = +Math_sqrt(+($sub87 * $sub87 + ($sub73 * $sub73 + $sub80 * $sub80)));
   $div98 = $19 / 3.0;
   $cluster_area$0 = $cluster_area$0 + $19;
   $cluster_centroid$sroa$0$0 = $cluster_centroid$sroa$0$0 + ($10 + $11 + $16) * $div98;
   $cluster_centroid$sroa$13$1 = $cluster_centroid$sroa$13$1 + ($14 + $15 + $18) * $div98;
   $cluster_centroid$sroa$8$0 = $cluster_centroid$sroa$8$0 + ($12 + $13 + $17) * $div98;
   $cluster_normal$sroa$0$0 = $cluster_normal$sroa$0$0 + $sub73;
   $cluster_normal$sroa$10$0 = $cluster_normal$sroa$10$0 + $sub80;
   $cluster_normal$sroa$17$1 = $cluster_normal$sroa$17$1 + $sub87;
   $i29$0 = $i29$0 + 3 | 0;
  }
  $cond135 = $cluster_area$0 == 0.0 ? 0.0 : 1.0 / $cluster_area$0;
  $6 = +Math_sqrt(+($cluster_normal$sroa$0$0 * $cluster_normal$sroa$0$0 + $cluster_normal$sroa$10$0 * $cluster_normal$sroa$10$0 + $cluster_normal$sroa$17$1 * $cluster_normal$sroa$17$1));
  $cond158 = $6 == 0.0 ? 0.0 : 1.0 / $6;
  HEAPF32[$sort_data + ($cluster$0 << 2) >> 2] = $cluster_normal$sroa$17$1 * $cond158 * ($cluster_centroid$sroa$13$1 * $cond135 - $div16) + ($cluster_normal$sroa$0$0 * $cond158 * ($cluster_centroid$sroa$0$0 * $cond135 - $div10) + $cluster_normal$sroa$10$0 * $cond158 * ($cluster_centroid$sroa$8$0 * $cond135 - $div13));
  $cluster$0 = $add23;
 }
 if ((label | 0) == 6) return; else if ((label | 0) == 11) ___assert_fail(46332, 46089, 36, 46548);
}

function __sg_gl_begin_pass($pass, $action, $w, $h) {
 $pass = $pass | 0;
 $action = $action | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $action$addr = 0, $c = 0, $clear_color = 0, $clear_depth = 0, $clear_mask = 0, $clear_stencil = 0, $cond = 0, $h$addr = 0, $i = 0, $i37 = 0, $need_color_mask_flush = 0, $need_pip_cache_flush = 0, $num_color_atts = 0, $pass$addr = 0, $use_mrt_clear = 0, $value = 0, $w$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $pass$addr = sp + 44 | 0;
 $action$addr = sp + 40 | 0;
 $w$addr = sp + 36 | 0;
 $h$addr = sp + 32 | 0;
 $num_color_atts = sp + 28 | 0;
 $clear_color = sp + 53 | 0;
 $i = sp + 24 | 0;
 $clear_depth = sp + 52 | 0;
 $clear_stencil = sp + 51 | 0;
 $need_pip_cache_flush = sp + 50 | 0;
 $need_color_mask_flush = sp + 49 | 0;
 $i37 = sp + 20 | 0;
 $use_mrt_clear = sp + 48 | 0;
 $clear_mask = sp + 16 | 0;
 $c = sp;
 HEAP32[$pass$addr >> 2] = $pass;
 HEAP32[$action$addr >> 2] = $action;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 if (!(HEAP32[$action$addr >> 2] | 0)) ___assert_fail(39714, 21600, 6369, 39721);
 if (HEAP8[2164786] & 1) ___assert_fail(39739, 21600, 6370, 39721);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6371, 39721);
 HEAP8[2164786] = 1;
 HEAP32[541200] = HEAP32[$pass$addr >> 2];
 if (HEAP32[$pass$addr >> 2] | 0) HEAP32[541201] = HEAP32[HEAP32[$pass$addr >> 2] >> 2]; else HEAP32[541201] = 0;
 HEAP32[541197] = HEAP32[$w$addr >> 2];
 HEAP32[541198] = HEAP32[$h$addr >> 2];
 if (HEAP32[$pass$addr >> 2] | 0) $cond = HEAP32[(HEAP32[$pass$addr >> 2] | 0) + 12 >> 2] | 0; else $cond = 1;
 HEAP32[$num_color_atts >> 2] = $cond;
 do if (HEAP32[$pass$addr >> 2] | 0) if (HEAP32[(HEAP32[$pass$addr >> 2] | 0) + 76 >> 2] | 0) {
  _glBindFramebuffer(36160, HEAP32[(HEAP32[$pass$addr >> 2] | 0) + 76 >> 2] | 0);
  break;
 } else ___assert_fail(39755, 21600, 6389, 39721); else if (HEAP32[541199] | 0) {
  _glBindFramebuffer(36160, HEAP32[(HEAP32[541199] | 0) + 12 >> 2] | 0);
  break;
 } else ___assert_fail(39767, 21600, 6394, 39721); while (0);
 _glViewport(0, 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0);
 _glScissor(0, 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0);
 HEAP8[$clear_color >> 0] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num_color_atts >> 2] | 0)) break;
  if (1 == (HEAP32[(HEAP32[$action$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 20 | 0) >> 2] | 0)) {
   label = 22;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 22) HEAP8[$clear_color >> 0] = 1;
 HEAP8[$clear_depth >> 0] = (HEAP32[(HEAP32[$action$addr >> 2] | 0) + 84 >> 2] | 0) == 1 & 1;
 HEAP8[$clear_stencil >> 0] = (HEAP32[(HEAP32[$action$addr >> 2] | 0) + 92 >> 2] | 0) == 1 & 1;
 HEAP8[$need_pip_cache_flush >> 0] = 0;
 if (HEAP8[$clear_color >> 0] & 1) {
  HEAP8[$need_color_mask_flush >> 0] = 0;
  HEAP32[$i37 >> 2] = 0;
  while (1) {
   if ((HEAP32[$i37 >> 2] | 0) >= 4) break;
   if (15 != (HEAP32[2164900 + (HEAP32[$i37 >> 2] << 2) >> 2] | 0)) {
    HEAP8[$need_pip_cache_flush >> 0] = 1;
    HEAP8[$need_color_mask_flush >> 0] = 1;
    HEAP32[2164900 + (HEAP32[$i37 >> 2] << 2) >> 2] = 15;
   }
   HEAP32[$i37 >> 2] = (HEAP32[$i37 >> 2] | 0) + 1;
  }
  if (HEAP8[$need_color_mask_flush >> 0] & 1) _glColorMask(1, 1, 1, 1);
 }
 if (HEAP8[$clear_depth >> 0] & 1) {
  if (!(HEAP8[2164816] & 1)) {
   HEAP8[$need_pip_cache_flush >> 0] = 1;
   HEAP8[2164816] = 1;
   _glDepthMask(1);
  }
  if ((HEAP32[541203] | 0) != 8) {
   HEAP8[$need_pip_cache_flush >> 0] = 1;
   HEAP32[541203] = 8;
   _glDepthFunc(519);
  }
 }
 if (HEAP8[$clear_stencil >> 0] & 1) if ((HEAPU8[2164869] | 0 | 0) != 255) {
  HEAP8[$need_pip_cache_flush >> 0] = 1;
  HEAP8[2164869] = -1;
  _glStencilMask(255);
 }
 if (HEAP8[$need_pip_cache_flush >> 0] & 1) {
  HEAP32[541353] = 0;
  HEAP32[541354] = 0;
 }
 HEAP8[$use_mrt_clear >> 0] = 0 != (HEAP32[$pass$addr >> 2] | 0) & 1;
 HEAP8[$use_mrt_clear >> 0] = 0;
 if (!(HEAP8[$use_mrt_clear >> 0] & 1)) {
  HEAP32[$clear_mask >> 2] = 0;
  if (HEAP8[$clear_color >> 0] & 1) {
   HEAP32[$clear_mask >> 2] = HEAP32[$clear_mask >> 2] | 16384;
   $value = (HEAP32[$action$addr >> 2] | 0) + 4 + 4 | 0;
   HEAP32[$c >> 2] = HEAP32[$value >> 2];
   HEAP32[$c + 4 >> 2] = HEAP32[$value + 4 >> 2];
   HEAP32[$c + 8 >> 2] = HEAP32[$value + 8 >> 2];
   HEAP32[$c + 12 >> 2] = HEAP32[$value + 12 >> 2];
   _glClearColor(+(+HEAPF32[$c >> 2]), +(+HEAPF32[$c + 4 >> 2]), +(+HEAPF32[$c + 8 >> 2]), +(+HEAPF32[$c + 12 >> 2]));
  }
  if (HEAP8[$clear_depth >> 0] & 1) {
   HEAP32[$clear_mask >> 2] = HEAP32[$clear_mask >> 2] | 256;
   _glClearDepthf(+(+HEAPF32[(HEAP32[$action$addr >> 2] | 0) + 84 + 4 >> 2]));
  }
  if (HEAP8[$clear_stencil >> 0] & 1) {
   HEAP32[$clear_mask >> 2] = HEAP32[$clear_mask >> 2] | 1024;
   _glClearStencil(HEAPU8[(HEAP32[$action$addr >> 2] | 0) + 92 + 4 >> 0] | 0 | 0);
  }
  if (HEAP32[$clear_mask >> 2] | 0) _glClear(HEAP32[$clear_mask >> 2] | 0);
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(29811, 21600, 6504, 39721);
}

function _sgl_setup($desc) {
 $desc = $desc | 0;
 var $$compoundliteral = 0, $1 = 0, $coerce = 0, $coerce103 = 0, $coerce45 = 0, $coerce96 = 0, $data = 0, $def_pip_desc = 0, $desc$addr = 0, $i = 0, $i105 = 0, $img_desc = 0, $pixels = 0, $shd_desc = 0, $ub = 0, $vbuf_desc = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3904 | 0;
 $desc$addr = sp + 3896 | 0;
 $vbuf_desc = sp + 3840 | 0;
 $coerce = sp + 3832 | 0;
 $pixels = sp;
 $i = sp + 3828 | 0;
 $img_desc = sp + 2944 | 0;
 $$compoundliteral = sp + 2936 | 0;
 $coerce45 = sp + 2928 | 0;
 $shd_desc = sp + 828 | 0;
 $ub = sp + 824 | 0;
 $coerce96 = sp + 820 | 0;
 $def_pip_desc = sp + 264 | 0;
 $coerce103 = sp + 260 | 0;
 $i105 = sp + 256 | 0;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 23371, 2646, 23439);
 _memset(2165432, 0, 12884) | 0;
 HEAP32[541358] = -1412584499;
 $1 = HEAP32[$desc$addr >> 2] | 0;
 HEAP32[541359] = HEAP32[$1 >> 2];
 HEAP32[541360] = HEAP32[$1 + 4 >> 2];
 HEAP32[541361] = HEAP32[$1 + 8 >> 2];
 HEAP32[541362] = HEAP32[$1 + 12 >> 2];
 HEAP32[541363] = HEAP32[$1 + 16 >> 2];
 HEAP32[541364] = HEAP32[$1 + 20 >> 2];
 HEAP32[541365] = HEAP32[$1 + 24 >> 2];
 HEAP32[541361] = (HEAP32[541361] | 0) == 0 ? 64 : HEAP32[541361] | 0;
 HEAP32[541359] = (HEAP32[541359] | 0) == 0 ? 65536 : HEAP32[541359] | 0;
 HEAP32[541360] = (HEAP32[541360] | 0) == 0 ? 16384 : HEAP32[541360] | 0;
 HEAP32[541365] = (HEAP32[541365] | 0) == 0 ? 1 : HEAP32[541365] | 0;
 HEAP32[541366] = HEAP32[541359];
 HEAP32[541367] = HEAP32[541360];
 HEAP32[541368] = HEAP32[541367];
 HEAP32[541372] = _malloc((HEAP32[541366] | 0) * 24 | 0) | 0;
 if (!(HEAP32[541372] | 0)) ___assert_fail(23449, 23371, 2660, 23439);
 HEAP32[541373] = _malloc(HEAP32[541367] << 7) | 0;
 if (!(HEAP32[541373] | 0)) ___assert_fail(23463, 23371, 2662, 23439);
 HEAP32[541374] = _malloc((HEAP32[541368] | 0) * 24 | 0) | 0;
 if (!(HEAP32[541374] | 0)) ___assert_fail(23477, 23371, 2664, 23439);
 __sgl_setup_pipeline_pool(2165436);
 _sg_push_debug_group(23491);
 dest = $vbuf_desc;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$vbuf_desc + 4 >> 2] = (HEAP32[541366] | 0) * 24;
 HEAP32[$vbuf_desc + 8 >> 2] = 1;
 HEAP32[$vbuf_desc + 12 >> 2] = 3;
 HEAP32[$vbuf_desc + 24 >> 2] = 23500;
 HEAP32[$coerce >> 2] = _sg_make_buffer($vbuf_desc) | 0;
 HEAP32[541385] = HEAP32[$coerce >> 2];
 if (!(HEAP32[541385] | 0)) ___assert_fail(23518, 23371, 2677, 23439);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 64) break;
  HEAP32[$pixels + (HEAP32[$i >> 2] << 2) >> 2] = -1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _memset($img_desc | 0, 0, 884) | 0;
 HEAP32[$img_desc + 4 >> 2] = 1;
 HEAP32[$img_desc + 12 >> 2] = 8;
 HEAP32[$img_desc + 16 >> 2] = 8;
 HEAP32[$img_desc + 24 >> 2] = 1;
 HEAP32[$img_desc + 32 >> 2] = 23;
 HEAP32[$img_desc + 40 >> 2] = 1;
 HEAP32[$img_desc + 44 >> 2] = 1;
 $data = $img_desc + 76 | 0;
 HEAP32[$$compoundliteral >> 2] = $pixels;
 HEAP32[$$compoundliteral + 4 >> 2] = 256;
 HEAP32[$data >> 2] = HEAP32[$$compoundliteral >> 2];
 HEAP32[$data + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
 HEAP32[$img_desc + 844 >> 2] = 23548;
 HEAP32[$coerce45 >> 2] = _sg_make_image($img_desc) | 0;
 HEAP32[541386] = HEAP32[$coerce45 >> 2];
 if (!(HEAP32[541386] | 0)) ___assert_fail(23568, 23371, 2695, 23439);
 HEAP32[541383] = HEAP32[541386];
 _memset($shd_desc | 0, 0, 2100) | 0;
 HEAP32[$shd_desc + 4 >> 2] = 23601;
 HEAP32[$shd_desc + 4 + 12 >> 2] = 45589;
 HEAP32[$shd_desc + 4 + 24 >> 2] = 23610;
 HEAP32[$shd_desc + 4 + 4 >> 2] = 23617;
 HEAP32[$shd_desc + 4 + 8 >> 2] = 0;
 HEAP32[$shd_desc + 4 + 12 + 4 >> 2] = 23617;
 HEAP32[$shd_desc + 4 + 12 + 8 >> 2] = 1;
 HEAP32[$shd_desc + 4 + 24 + 4 >> 2] = 23617;
 HEAP32[$shd_desc + 4 + 24 + 8 >> 2] = 2;
 HEAP32[$ub >> 2] = $shd_desc + 196 + 20;
 HEAP32[HEAP32[$ub >> 2] >> 2] = 128;
 HEAP32[(HEAP32[$ub >> 2] | 0) + 4 >> 2] = 45609;
 HEAP32[(HEAP32[$ub >> 2] | 0) + 4 + 4 >> 2] = 4;
 HEAP32[(HEAP32[$ub >> 2] | 0) + 4 + 8 >> 2] = 8;
 HEAP32[$shd_desc + 1144 + 804 >> 2] = 45629;
 HEAP32[$shd_desc + 1144 + 804 + 4 >> 2] = 1;
 HEAP32[$shd_desc + 1144 + 804 + 8 >> 2] = 1;
 HEAP32[$shd_desc + 2092 >> 2] = 23626;
 HEAP32[$shd_desc + 196 >> 2] = 16;
 HEAP32[$shd_desc + 1144 >> 2] = 400;
 HEAP32[$coerce96 >> 2] = _sg_make_shader($shd_desc) | 0;
 HEAP32[541387] = HEAP32[$coerce96 >> 2];
 if (!(HEAP32[541387] | 0)) ___assert_fail(23637, 23371, 2752, 23439);
 _memset($def_pip_desc | 0, 0, 556) | 0;
 HEAP8[$def_pip_desc + 296 + 8 >> 0] = 1;
 HEAP32[$coerce103 >> 2] = __sgl_make_pipeline($def_pip_desc) | 0;
 HEAP32[541432] = HEAP32[$coerce103 >> 2];
 _sg_pop_debug_group();
 HEAP32[541381] = -1;
 HEAP32[$i105 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i105 >> 2] | 0) >= 3) break;
  __sgl_identity(2166028 + (HEAP32[$i105 >> 2] << 12) | 0);
  HEAP32[$i105 >> 2] = (HEAP32[$i105 >> 2] | 0) + 1;
 }
 HEAP32[541439] = HEAP32[541432];
 HEAP8[2165537] = 1;
 STACKTOP = sp;
 return;
}

function _stbi__load_main($s, $x, $y, $comp, $req_comp, $ri, $bpc) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 $bpc = $bpc | 0;
 var $0 = 0, $11 = 0, $17 = 0, $23 = 0, $29 = 0, $36 = 0, $42 = 0, $48 = 0, $5 = 0, $71 = 0, $bpc$addr = 0, $comp$addr = 0, $cond = 0, $hdr = 0, $req_comp$addr = 0, $retval = 0, $ri$addr = 0, $s$addr = 0, $tobool = 0, $tobool13 = 0, $tobool18 = 0, $tobool23 = 0, $tobool28 = 0, $tobool3 = 0, $tobool33 = 0, $tobool45 = 0, $tobool8 = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 32 | 0;
 $s$addr = sp + 28 | 0;
 $x$addr = sp + 24 | 0;
 $y$addr = sp + 20 | 0;
 $comp$addr = sp + 16 | 0;
 $req_comp$addr = sp + 12 | 0;
 $ri$addr = sp + 8 | 0;
 $bpc$addr = sp + 4 | 0;
 $hdr = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$ri$addr >> 2] = $ri;
 HEAP32[$bpc$addr >> 2] = $bpc;
 $0 = HEAP32[$ri$addr >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[HEAP32[$ri$addr >> 2] >> 2] = 8;
 HEAP32[(HEAP32[$ri$addr >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$ri$addr >> 2] | 0) + 4 >> 2] = 0;
 $tobool = (_stbi__jpeg_test(HEAP32[$s$addr >> 2] | 0) | 0) != 0;
 $5 = HEAP32[$s$addr >> 2] | 0;
 if ($tobool) {
  HEAP32[$retval >> 2] = _stbi__jpeg_load($5, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 $tobool3 = (_stbi__png_test($5) | 0) != 0;
 $11 = HEAP32[$s$addr >> 2] | 0;
 if ($tobool3) {
  HEAP32[$retval >> 2] = _stbi__png_load($11, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 $tobool8 = (_stbi__bmp_test($11) | 0) != 0;
 $17 = HEAP32[$s$addr >> 2] | 0;
 if ($tobool8) {
  HEAP32[$retval >> 2] = _stbi__bmp_load($17, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 $tobool13 = (_stbi__gif_test($17) | 0) != 0;
 $23 = HEAP32[$s$addr >> 2] | 0;
 if ($tobool13) {
  HEAP32[$retval >> 2] = _stbi__gif_load($23, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 $tobool18 = (_stbi__psd_test($23) | 0) != 0;
 $29 = HEAP32[$s$addr >> 2] | 0;
 if ($tobool18) {
  HEAP32[$retval >> 2] = _stbi__psd_load($29, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0, HEAP32[$bpc$addr >> 2] | 0) | 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 $tobool23 = (_stbi__pic_test($29) | 0) != 0;
 $36 = HEAP32[$s$addr >> 2] | 0;
 if ($tobool23) {
  HEAP32[$retval >> 2] = _stbi__pic_load($36, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 $tobool28 = (_stbi__pnm_test($36) | 0) != 0;
 $42 = HEAP32[$s$addr >> 2] | 0;
 if ($tobool28) {
  HEAP32[$retval >> 2] = _stbi__pnm_load($42, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 $tobool33 = (_stbi__hdr_test($42) | 0) != 0;
 $48 = HEAP32[$s$addr >> 2] | 0;
 if ($tobool33) {
  HEAP32[$hdr >> 2] = _stbi__hdr_load($48, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
  if (HEAP32[$req_comp$addr >> 2] | 0) $cond = HEAP32[$req_comp$addr >> 2] | 0; else $cond = HEAP32[HEAP32[$comp$addr >> 2] >> 2] | 0;
  HEAP32[$retval >> 2] = _stbi__hdr_to_ldr(HEAP32[$hdr >> 2] | 0, HEAP32[HEAP32[$x$addr >> 2] >> 2] | 0, HEAP32[HEAP32[$y$addr >> 2] >> 2] | 0, $cond) | 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 } else if (_stbi__tga_test($48) | 0) {
  HEAP32[$retval >> 2] = _stbi__tga_load(HEAP32[$s$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 } else {
  $tobool45 = (_stbi__err(47540) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool45 ? 0 : 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 return 0;
}

function __sg_validate_apply_bindings($bindings) {
 $bindings = $bindings | 0;
 var $$pre_trunc = 0, $35 = 0, $54 = 0, $56 = 0, $76 = 0, $78 = 0, $92 = 0, $bindings$addr = 0, $buf = 0, $buf52 = 0, $i = 0, $i108 = 0, $i72 = 0, $img = 0, $img123 = 0, $pip = 0, $retval = 0, $stage = 0, $stage112 = 0, $tobool15 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 44 | 0;
 $bindings$addr = sp + 40 | 0;
 $pip = sp + 36 | 0;
 $i = sp + 32 | 0;
 $buf = sp + 28 | 0;
 $buf52 = sp + 24 | 0;
 $i72 = sp + 20 | 0;
 $stage = sp + 16 | 0;
 $img = sp + 12 | 0;
 $i108 = sp + 8 | 0;
 $stage112 = sp + 4 | 0;
 $img123 = sp;
 HEAP32[$bindings$addr >> 2] = $bindings;
 __sg_validate_begin();
 __sg_validate((HEAP32[541060] | 0) != 0, 62);
 HEAP32[$pip >> 2] = __sg_lookup_pipeline(2164252, HEAP32[541060] | 0) | 0;
 __sg_validate((HEAP32[$pip >> 2] | 0) != 0, 63);
 if (!(HEAP32[$pip >> 2] | 0)) {
  HEAP8[$retval >> 0] = (__sg_validate_end() | 0) & 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $92 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $92 | 0;
 }
 __sg_validate((HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] | 0) == 2, 64);
 if (!(HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(40015, 21600, 13664, 40192);
 if ((HEAP32[(HEAP32[$pip >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] >> 2] | 0)) ___assert_fail(40015, 21600, 13664, 40192);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 8) break;
  $tobool15 = HEAP8[(HEAP32[$pip >> 2] | 0) + 12 + 8 + (HEAP32[$i >> 2] | 0) >> 0] & 1;
  if (HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] | 0) {
   __sg_validate($tobool15, 65);
   HEAP32[$buf >> 2] = __sg_lookup_buffer(2164252, HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 4 + (HEAP32[$i >> 2] << 2) >> 2] | 0) | 0;
   __sg_validate((HEAP32[$buf >> 2] | 0) != 0, 66);
   if (HEAP32[$buf >> 2] | 0) if ((HEAP32[(HEAP32[$buf >> 2] | 0) + 8 >> 2] | 0) == 2) {
    __sg_validate(1 == (HEAP32[(HEAP32[$buf >> 2] | 0) + 12 + 12 >> 2] | 0), 67);
    __sg_validate(HEAP8[(HEAP32[$buf >> 2] | 0) + 12 + 8 >> 0] & 1 ^ 1, 68);
   }
  } else __sg_validate($tobool15 ^ 1, 65);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $35 = HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 68 >> 2] | 0;
 if ((HEAP32[(HEAP32[$pip >> 2] | 0) + 12 + 4 >> 2] | 0) == 1) __sg_validate(($35 | 0) == 0, 70); else __sg_validate(($35 | 0) != 0, 69);
 if (HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 68 >> 2] | 0) {
  HEAP32[$buf52 >> 2] = __sg_lookup_buffer(2164252, HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 68 >> 2] | 0) | 0;
  __sg_validate((HEAP32[$buf52 >> 2] | 0) != 0, 71);
  if (HEAP32[$buf52 >> 2] | 0) if ((HEAP32[(HEAP32[$buf52 >> 2] | 0) + 8 >> 2] | 0) == 2) {
   __sg_validate(2 == (HEAP32[(HEAP32[$buf52 >> 2] | 0) + 12 + 12 >> 2] | 0), 72);
   __sg_validate(HEAP8[(HEAP32[$buf52 >> 2] | 0) + 12 + 8 >> 0] & 1 ^ 1, 73);
  }
 }
 HEAP32[$i72 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i72 >> 2] | 0) >= 12) break;
  HEAP32[$stage >> 2] = (HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] | 0) + 12;
  $54 = HEAP32[$i72 >> 2] | 0;
  $56 = HEAP32[(HEAP32[$stage >> 2] | 0) + 4 >> 2] | 0;
  if (HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 76 + (HEAP32[$i72 >> 2] << 2) >> 2] | 0) {
   __sg_validate(($54 | 0) < ($56 | 0), 74);
   HEAP32[$img >> 2] = __sg_lookup_image(2164252, HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 76 + (HEAP32[$i72 >> 2] << 2) >> 2] | 0) | 0;
   __sg_validate((HEAP32[$img >> 2] | 0) != 0, 75);
   if (HEAP32[$img >> 2] | 0) if ((HEAP32[(HEAP32[$img >> 2] | 0) + 8 >> 2] | 0) == 2) __sg_validate((HEAP32[(HEAP32[$img >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[$stage >> 2] | 0) + 24 + (HEAP32[$i72 >> 2] << 3) >> 2] | 0), 76);
  } else __sg_validate(($54 | 0) >= ($56 | 0), 74);
  HEAP32[$i72 >> 2] = (HEAP32[$i72 >> 2] | 0) + 1;
 }
 HEAP32[$i108 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i108 >> 2] | 0) >= 12) break;
  HEAP32[$stage112 >> 2] = (HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] | 0) + 12 + 120;
  $76 = HEAP32[$i108 >> 2] | 0;
  $78 = HEAP32[(HEAP32[$stage112 >> 2] | 0) + 4 >> 2] | 0;
  if (HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 124 + (HEAP32[$i108 >> 2] << 2) >> 2] | 0) {
   __sg_validate(($76 | 0) < ($78 | 0), 77);
   HEAP32[$img123 >> 2] = __sg_lookup_image(2164252, HEAP32[(HEAP32[$bindings$addr >> 2] | 0) + 124 + (HEAP32[$i108 >> 2] << 2) >> 2] | 0) | 0;
   __sg_validate((HEAP32[$img123 >> 2] | 0) != 0, 78);
   if (HEAP32[$img123 >> 2] | 0) if ((HEAP32[(HEAP32[$img123 >> 2] | 0) + 8 >> 2] | 0) == 2) __sg_validate((HEAP32[(HEAP32[$img123 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[$stage112 >> 2] | 0) + 24 + (HEAP32[$i108 >> 2] << 3) >> 2] | 0), 79);
  } else __sg_validate(($76 | 0) >= ($78 | 0), 77);
  HEAP32[$i108 >> 2] = (HEAP32[$i108 >> 2] | 0) + 1;
 }
 HEAP8[$retval >> 0] = (__sg_validate_end() | 0) & 1;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $92 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $92 | 0;
}

function _stbi__process_scan_header($z) {
 $z = $z | 0;
 var $66 = 0, $82 = 0, $Ls = 0, $aa = 0, $cmp21 = 0, $conv = 0, $conv25 = 0, $conv75 = 0, $i = 0, $id = 0, $q = 0, $retval = 0, $which = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $z$addr = sp + 24 | 0;
 $i = sp + 20 | 0;
 $Ls = sp + 16 | 0;
 $id = sp + 12 | 0;
 $which = sp + 8 | 0;
 $q = sp + 4 | 0;
 $aa = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$Ls >> 2] = _stbi__get16be(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0;
 $conv = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18416 >> 2] = $conv;
 if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18416 >> 2] | 0) >= 1) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18416 >> 2] | 0) <= 4) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18416 >> 2] | 0) <= (HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0)) {
  if ((HEAP32[$Ls >> 2] | 0) != (6 + (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18416 >> 2] << 1) | 0)) {
   HEAP32[$retval >> 2] = _stbi__err(49523) | 0;
   $82 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $82 | 0;
  }
  HEAP32[$i >> 2] = 0;
  while (1) {
   $cmp21 = (HEAP32[$i >> 2] | 0) < (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18416 >> 2] | 0);
   $conv25 = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
   if (!$cmp21) {
    label = 20;
    break;
   }
   HEAP32[$id >> 2] = $conv25;
   HEAP32[$q >> 2] = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
   HEAP32[$which >> 2] = 0;
   while (1) {
    if ((HEAP32[$which >> 2] | 0) >= (HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0)) break;
    if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$which >> 2] | 0) * 72 | 0) >> 2] | 0) == (HEAP32[$id >> 2] | 0)) break;
    HEAP32[$which >> 2] = (HEAP32[$which >> 2] | 0) + 1;
   }
   if ((HEAP32[$which >> 2] | 0) == (HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0)) {
    label = 14;
    break;
   }
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$which >> 2] | 0) * 72 | 0) + 16 >> 2] = HEAP32[$q >> 2] >> 4;
   if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$which >> 2] | 0) * 72 | 0) + 16 >> 2] | 0) > 3) {
    label = 16;
    break;
   }
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$which >> 2] | 0) * 72 | 0) + 20 >> 2] = HEAP32[$q >> 2] & 15;
   if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$which >> 2] | 0) * 72 | 0) + 20 >> 2] | 0) > 3) {
    label = 18;
    break;
   }
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18420 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$which >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  if ((label | 0) == 14) {
   HEAP32[$retval >> 2] = 0;
   $82 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $82 | 0;
  } else if ((label | 0) == 16) {
   HEAP32[$retval >> 2] = _stbi__err(49535) | 0;
   $82 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $82 | 0;
  } else if ((label | 0) == 18) {
   HEAP32[$retval >> 2] = _stbi__err(49547) | 0;
   $82 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $82 | 0;
  } else if ((label | 0) == 20) {
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18384 >> 2] = $conv25;
   $conv75 = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18388 >> 2] = $conv75;
   HEAP32[$aa >> 2] = (_stbi__get8(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) & 255;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18392 >> 2] = HEAP32[$aa >> 2] >> 4;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18396 >> 2] = HEAP32[$aa >> 2] & 15;
   $66 = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18384 >> 2] | 0;
   do if (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18380 >> 2] | 0) {
    if (($66 | 0) <= 63) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18388 >> 2] | 0) <= 63) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18384 >> 2] | 0) <= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18388 >> 2] | 0)) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18392 >> 2] | 0) <= 13) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18396 >> 2] | 0) <= 13) break;
    HEAP32[$retval >> 2] = _stbi__err(49559) | 0;
    $82 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $82 | 0;
   } else {
    if ($66 | 0) {
     HEAP32[$retval >> 2] = _stbi__err(49559) | 0;
     $82 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $82 | 0;
    }
    if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18392 >> 2] | 0)) if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18396 >> 2] | 0)) {
     HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18388 >> 2] = 63;
     break;
    }
    HEAP32[$retval >> 2] = _stbi__err(49559) | 0;
    $82 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $82 | 0;
   } while (0);
   HEAP32[$retval >> 2] = 1;
   $82 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $82 | 0;
  }
 }
 HEAP32[$retval >> 2] = _stbi__err(49499) | 0;
 $82 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $82 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv($this) {
 $this = $this | 0;
 var $3 = 0, $Last = 0, $agg$tmp = 0, $agg$tmp17 = 0, $agg$tmp24 = 0, $agg$tmp24$byval_copy = 0, $call22 = 0, $call28 = 0, $call3 = 0, $call49 = 0, $call8 = 0, $cmp13 = 0, $cmp51 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$2 = 0, $retval$4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp24$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $ref$tmp = sp;
 $agg$tmp17 = sp + 16 | 0;
 $agg$tmp24 = sp + 8 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 51469);
 HEAP32[$agg$tmp24$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp24$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp24$byval_copy) | 0) {
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$agg$tmp24$byval_copy >> 2] = $call3;
  if (!$call3) $retval$0 = 0; else {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 46) {
    $Last = $this + 4 | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp, HEAP32[$this >> 2] | 0, HEAP32[$Last >> 2] | 0);
    $call8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this, $agg$tmp24$byval_copy, $ref$tmp) | 0;
    HEAP32[$agg$tmp24$byval_copy >> 2] = $call8;
    HEAP32[$this >> 2] = HEAP32[$Last >> 2];
    $3 = $call8;
   } else $3 = $call3;
   $cmp13 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) == 0;
   $retval$0 = $cmp13 ? $3 : 0;
  }
  $retval$4 = $retval$0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 51472);
  HEAP32[$agg$tmp24$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2];
  HEAP32[$agg$tmp24$byval_copy + 4 >> 2] = HEAP32[$agg$tmp17 + 4 >> 2];
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp24$byval_copy) | 0)) {
   $call49 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   $cmp51 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) == 0;
   $retval$4 = $cmp51 ? $call49 : 0;
   break;
  }
  $call22 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$ref$tmp >> 2] = $call22;
  if (!$call22) $retval$2 = 0; else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp24, 51477);
   HEAP32[$agg$tmp24$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2];
   HEAP32[$agg$tmp24$byval_copy + 4 >> 2] = HEAP32[$agg$tmp24 + 4 >> 2];
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp24$byval_copy) | 0) {
    $call28 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp24$byval_copy, $this, 0);
    if ($call28 & (__ZNK12_GLOBAL__N_110StringView5emptyEv($agg$tmp24$byval_copy) | 0)) $retval$2 = 0; else {
     if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 46) HEAP32[$this >> 2] = HEAP32[$this + 4 >> 2];
     if (!(__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0)) $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this, 51491, $ref$tmp) | 0; else $retval$2 = 0;
    }
   } else $retval$2 = 0;
  }
  $retval$4 = $retval$2;
 } while (0);
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __sg_validate_shader_desc($desc) {
 $desc = $desc | 0;
 var $12 = 0, $34 = 0, $array_count = 0, $call67 = 0, $call98 = 0, $desc$addr = 0, $i = 0, $images_continuous = 0, $img_desc = 0, $img_index = 0, $num_uniforms = 0, $stage_desc = 0, $stage_index = 0, $u_desc = 0, $u_index = 0, $ub_desc = 0, $ub_index = 0, $uniform_blocks_continuous = 0, $uniform_offset = 0, $uniforms_continuous = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $desc$addr = sp + 48 | 0;
 $i = sp + 44 | 0;
 $stage_index = sp + 40 | 0;
 $stage_desc = sp + 36 | 0;
 $uniform_blocks_continuous = sp + 54 | 0;
 $ub_index = sp + 32 | 0;
 $ub_desc = sp + 28 | 0;
 $uniforms_continuous = sp + 53 | 0;
 $uniform_offset = sp + 24 | 0;
 $num_uniforms = sp + 20 | 0;
 $u_index = sp + 16 | 0;
 $u_desc = sp + 12 | 0;
 $array_count = sp + 8 | 0;
 $images_continuous = sp + 52 | 0;
 $img_index = sp + 4 | 0;
 $img_desc = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 13371, 37670);
 __sg_validate_begin();
 __sg_validate((HEAP32[HEAP32[$desc$addr >> 2] >> 2] | 0) == 0, 17);
 __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 2096 >> 2] | 0) == 0, 17);
 __sg_validate(0 != (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0), 29);
 __sg_validate(0 != (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 196 >> 2] | 0), 18);
 __sg_validate(0 != (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 1144 >> 2] | 0), 18);
 HEAP32[$i >> 2] = 0;
 while (1) {
  $12 = HEAP32[$desc$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  if (HEAP32[$12 + 4 + ((HEAP32[$i >> 2] | 0) * 12 | 0) >> 2] | 0) __sg_validate((_strlen(HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 12 | 0) >> 2] | 0) | 0) >>> 0 < 16, 31);
  if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 12 | 0) + 4 >> 2] | 0) __sg_validate((_strlen(HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 12 | 0) + 4 >> 2] | 0) | 0) >>> 0 < 16, 31);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (HEAP32[$12 + 196 + 4 >> 2] | 0) __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 196 + 4 + 4 >> 2] | 0) >>> 0 > 0, 21);
 if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 1144 + 4 >> 2] | 0) __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 1144 + 4 + 4 >> 2] | 0) >>> 0 > 0, 21);
 HEAP32[$stage_index >> 2] = 0;
 while (1) {
  if ((HEAP32[$stage_index >> 2] | 0) >= 2) break;
  $34 = HEAP32[$desc$addr >> 2] | 0;
  HEAP32[$stage_desc >> 2] = (HEAP32[$stage_index >> 2] | 0) == 0 ? $34 + 196 | 0 : $34 + 1144 | 0;
  HEAP8[$uniform_blocks_continuous >> 0] = 1;
  HEAP32[$ub_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$ub_index >> 2] | 0) >= 4) break;
   HEAP32[$ub_desc >> 2] = (HEAP32[$stage_desc >> 2] | 0) + 20 + ((HEAP32[$ub_index >> 2] | 0) * 196 | 0);
   if ((HEAP32[HEAP32[$ub_desc >> 2] >> 2] | 0) >>> 0 > 0) {
    __sg_validate(HEAP8[$uniform_blocks_continuous >> 0] & 1, 22);
    HEAP8[$uniforms_continuous >> 0] = 1;
    HEAP32[$uniform_offset >> 2] = 0;
    HEAP32[$num_uniforms >> 2] = 0;
    HEAP32[$u_index >> 2] = 0;
    while (1) {
     if ((HEAP32[$u_index >> 2] | 0) >= 16) break;
     HEAP32[$u_desc >> 2] = (HEAP32[$ub_desc >> 2] | 0) + 4 + ((HEAP32[$u_index >> 2] | 0) * 12 | 0);
     if (HEAP32[(HEAP32[$u_desc >> 2] | 0) + 4 >> 2] | 0) {
      __sg_validate(HEAP8[$uniforms_continuous >> 0] & 1, 24);
      __sg_validate(0 != (HEAP32[HEAP32[$u_desc >> 2] >> 2] | 0), 26);
      HEAP32[$array_count >> 2] = HEAP32[(HEAP32[$u_desc >> 2] | 0) + 8 >> 2];
      $call67 = __sg_uniform_size(HEAP32[(HEAP32[$u_desc >> 2] | 0) + 4 >> 2] | 0, HEAP32[$array_count >> 2] | 0) | 0;
      HEAP32[$uniform_offset >> 2] = (HEAP32[$uniform_offset >> 2] | 0) + $call67;
      HEAP32[$num_uniforms >> 2] = (HEAP32[$num_uniforms >> 2] | 0) + 1;
     } else HEAP8[$uniforms_continuous >> 0] = 0;
     HEAP32[$u_index >> 2] = (HEAP32[$u_index >> 2] | 0) + 1;
    }
    __sg_validate((HEAP32[$uniform_offset >> 2] | 0) == (HEAP32[HEAP32[$ub_desc >> 2] >> 2] | 0), 27);
    __sg_validate((HEAP32[$num_uniforms >> 2] | 0) > 0, 25);
   } else HEAP8[$uniform_blocks_continuous >> 0] = 0;
   HEAP32[$ub_index >> 2] = (HEAP32[$ub_index >> 2] | 0) + 1;
  }
  HEAP8[$images_continuous >> 0] = 1;
  HEAP32[$img_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$img_index >> 2] | 0) >= 12) break;
   HEAP32[$img_desc >> 2] = (HEAP32[$stage_desc >> 2] | 0) + 804 + ((HEAP32[$img_index >> 2] | 0) * 12 | 0);
   if (HEAP32[(HEAP32[$img_desc >> 2] | 0) + 4 >> 2] | 0) {
    __sg_validate(HEAP8[$images_continuous >> 0] & 1, 23);
    __sg_validate(0 != (HEAP32[HEAP32[$img_desc >> 2] >> 2] | 0), 28);
   } else HEAP8[$images_continuous >> 0] = 0;
   HEAP32[$img_index >> 2] = (HEAP32[$img_index >> 2] | 0) + 1;
  }
  HEAP32[$stage_index >> 2] = (HEAP32[$stage_index >> 2] | 0) + 1;
 }
 $call98 = __sg_validate_end() | 0;
 STACKTOP = sp;
 return $call98 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($this) {
 $this = $this | 0;
 var $SpecialSub$0 = 0, $SpecialSub$1 = 0, $Subs43 = 0, $Subs54 = 0, $call37 = 0, $conv = 0, $inc = 0, $ref$tmp = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 L1 : do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 83) | 0) {
  $conv = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24;
  if (!(_islower($conv) | 0)) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
    $Subs43 = $this + 148 | 0;
    if (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($Subs43) | 0) {
     $retval$2 = 0;
     break;
    }
    $retval$2 = HEAP32[(__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($Subs43, 0) | 0) >> 2] | 0;
    break;
   }
   HEAP32[$ref$tmp >> 2] = 0;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this, $ref$tmp) | 0) $retval$1 = 0; else {
    $inc = (HEAP32[$ref$tmp >> 2] | 0) + 1 | 0;
    HEAP32[$ref$tmp >> 2] = $inc;
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
     $Subs54 = $this + 148 | 0;
     if ($inc >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Subs54) | 0) >>> 0) $retval$1 = HEAP32[(__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($Subs54, $inc) | 0) >> 2] | 0; else $retval$1 = 0;
    } else $retval$1 = 0;
   }
   $retval$2 = $retval$1;
   break;
  }
  switch ($conv | 0) {
  case 97:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 0;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 98:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 1;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 115:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 2;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 105:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 3;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 111:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 4;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  case 100:
   {
    HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
    HEAP32[$ref$tmp >> 2] = 5;
    $SpecialSub$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    break;
   }
  default:
   {
    $retval$2 = 0;
    break L1;
   }
  }
  $call37 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $SpecialSub$0) | 0;
  HEAP32[$ref$tmp >> 2] = $call37;
  if (($call37 | 0) == ($SpecialSub$0 | 0)) $SpecialSub$1 = $SpecialSub$0; else {
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $ref$tmp);
   $SpecialSub$1 = $call37;
  }
  $retval$2 = $SpecialSub$1;
 } else $retval$2 = 0; while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _stbi__jpeg_decode_block($j, $data, $hdc, $hac, $fac, $b, $dequant) {
 $j = $j | 0;
 $data = $data | 0;
 $hdc = $hdc | 0;
 $hac = $hac | 0;
 $fac = $fac | 0;
 $b = $b | 0;
 $dequant = $dequant | 0;
 var $39 = 0, $57 = 0, $67 = 0, $b$addr = 0, $c = 0, $call56 = 0, $code_bits26 = 0, $code_buffer25 = 0, $cond = 0, $conv10 = 0, $conv33 = 0, $conv60 = 0, $data$addr = 0, $dc = 0, $dequant$addr = 0, $diff = 0, $fac$addr = 0, $hac$addr = 0, $hdc$addr = 0, $j$addr = 0, $k = 0, $r = 0, $retval = 0, $rs = 0, $s = 0, $t = 0, $zig = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $retval = sp + 64 | 0;
 $j$addr = sp + 60 | 0;
 $data$addr = sp + 56 | 0;
 $hdc$addr = sp + 52 | 0;
 $hac$addr = sp + 48 | 0;
 $fac$addr = sp + 44 | 0;
 $b$addr = sp + 40 | 0;
 $dequant$addr = sp + 36 | 0;
 $diff = sp + 32 | 0;
 $dc = sp + 28 | 0;
 $k = sp + 24 | 0;
 $t = sp + 20 | 0;
 $zig = sp + 16 | 0;
 $c = sp + 12 | 0;
 $r = sp + 8 | 0;
 $s = sp + 4 | 0;
 $rs = sp;
 HEAP32[$j$addr >> 2] = $j;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$hdc$addr >> 2] = $hdc;
 HEAP32[$hac$addr >> 2] = $hac;
 HEAP32[$fac$addr >> 2] = $fac;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$dequant$addr >> 2] = $dequant;
 if ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$j$addr >> 2] | 0);
 HEAP32[$t >> 2] = _stbi__jpeg_huff_decode(HEAP32[$j$addr >> 2] | 0, HEAP32[$hdc$addr >> 2] | 0) | 0;
 if ((HEAP32[$t >> 2] | 0) < 0) {
  HEAP32[$retval >> 2] = _stbi__err(48758) | 0;
  $67 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 }
 dest = HEAP32[$data$addr >> 2] | 0;
 stop = dest + 128 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 if (HEAP32[$t >> 2] | 0) $cond = _stbi__extend_receive(HEAP32[$j$addr >> 2] | 0, HEAP32[$t >> 2] | 0) | 0; else $cond = 0;
 HEAP32[$diff >> 2] = $cond;
 HEAP32[$dc >> 2] = (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18076 + ((HEAP32[$b$addr >> 2] | 0) * 72 | 0) + 24 >> 2] | 0) + (HEAP32[$diff >> 2] | 0);
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18076 + ((HEAP32[$b$addr >> 2] | 0) * 72 | 0) + 24 >> 2] = HEAP32[$dc >> 2];
 $conv10 = (Math_imul(HEAP32[$dc >> 2] | 0, HEAPU16[HEAP32[$dequant$addr >> 2] >> 1] | 0) | 0) & 65535;
 HEAP16[HEAP32[$data$addr >> 2] >> 1] = $conv10;
 HEAP32[$k >> 2] = 1;
 L11 : while (1) {
  if ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$j$addr >> 2] | 0);
  HEAP32[$c >> 2] = (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] | 0) >>> 23 & 511;
  HEAP32[$r >> 2] = HEAP16[(HEAP32[$fac$addr >> 2] | 0) + (HEAP32[$c >> 2] << 1) >> 1];
  do if (HEAP32[$r >> 2] | 0) {
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + (HEAP32[$r >> 2] >> 4 & 15);
   HEAP32[$s >> 2] = HEAP32[$r >> 2] & 15;
   $code_buffer25 = (HEAP32[$j$addr >> 2] | 0) + 18364 | 0;
   HEAP32[$code_buffer25 >> 2] = HEAP32[$code_buffer25 >> 2] << HEAP32[$s >> 2];
   $code_bits26 = (HEAP32[$j$addr >> 2] | 0) + 18368 | 0;
   HEAP32[$code_bits26 >> 2] = (HEAP32[$code_bits26 >> 2] | 0) - (HEAP32[$s >> 2] | 0);
   $39 = HEAP32[$k >> 2] | 0;
   HEAP32[$k >> 2] = $39 + 1;
   HEAP32[$zig >> 2] = HEAPU8[9680 + $39 >> 0];
   $conv33 = (Math_imul(HEAP32[$r >> 2] >> 8, HEAPU16[(HEAP32[$dequant$addr >> 2] | 0) + (HEAP32[$zig >> 2] << 1) >> 1] | 0) | 0) & 65535;
   HEAP16[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$zig >> 2] << 1) >> 1] = $conv33;
  } else {
   HEAP32[$rs >> 2] = _stbi__jpeg_huff_decode(HEAP32[$j$addr >> 2] | 0, HEAP32[$hac$addr >> 2] | 0) | 0;
   if ((HEAP32[$rs >> 2] | 0) < 0) {
    label = 13;
    break L11;
   }
   HEAP32[$s >> 2] = HEAP32[$rs >> 2] & 15;
   HEAP32[$r >> 2] = HEAP32[$rs >> 2] >> 4;
   if (HEAP32[$s >> 2] | 0) {
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + (HEAP32[$r >> 2] | 0);
    $57 = HEAP32[$k >> 2] | 0;
    HEAP32[$k >> 2] = $57 + 1;
    HEAP32[$zig >> 2] = HEAPU8[9680 + $57 >> 0];
    $call56 = _stbi__extend_receive(HEAP32[$j$addr >> 2] | 0, HEAP32[$s >> 2] | 0) | 0;
    $conv60 = (Math_imul($call56, HEAPU16[(HEAP32[$dequant$addr >> 2] | 0) + (HEAP32[$zig >> 2] << 1) >> 1] | 0) | 0) & 65535;
    HEAP16[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$zig >> 2] << 1) >> 1] = $conv60;
    break;
   }
   if ((HEAP32[$rs >> 2] | 0) != 240) {
    label = 19;
    break L11;
   }
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 16;
  } while (0);
  if ((HEAP32[$k >> 2] | 0) >= 64) {
   label = 19;
   break;
  }
 }
 if ((label | 0) == 13) {
  HEAP32[$retval >> 2] = _stbi__err(48758) | 0;
  $67 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 } else if ((label | 0) == 19) {
  HEAP32[$retval >> 2] = 1;
  $67 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $67 | 0;
 }
 return 0;
}

function __ZN2Dr10FillBorderER8DrBitmap7DrColor6DrRect($bitmap, $fill_color, $rect) {
 $bitmap = $bitmap | 0;
 $fill_color = $fill_color | 0;
 $rect = $rect | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$ensured = 0, $agg$tmp$ensured25 = 0, $agg$tmp$ensured32 = 0, $agg$tmp$ensured9 = 0, $agg$tmp10 = 0, $agg$tmp26 = 0, $agg$tmp33 = 0, $call = 0, $call1 = 0, $call12 = 0, $call13 = 0, $call16 = 0, $call2 = 0, $call3 = 0, $fill_qty = 0, $fill_rect = 0, $height = 0, $tmp = 0, $tmp21 = 0, $tmp28 = 0, $tmp5 = 0, $tmpcast$byval_copy = 0, $width = 0, $x$0 = 0, $y$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $tmpcast$byval_copy = sp + 164 | 0;
 $fill_rect = sp + 104 | 0;
 $fill_qty = sp + 100 | 0;
 $tmp = sp + 160 | 0;
 $agg$tmp$ensured = sp + 120 | 0;
 $agg$tmp = sp + 96 | 0;
 $tmp5 = sp + 156 | 0;
 $agg$tmp$ensured9 = sp + 68 | 0;
 $agg$tmp10 = sp + 64 | 0;
 $tmp21 = sp + 152 | 0;
 $agg$tmp$ensured25 = sp + 36 | 0;
 $agg$tmp26 = sp + 32 | 0;
 $tmp28 = sp + 148 | 0;
 $agg$tmp$ensured32 = sp + 4 | 0;
 $agg$tmp33 = sp;
 __ZN6DrRectC2Ev($fill_rect);
 $call = __ZN6DrRect3topEv($rect) | 0;
 $call1 = __ZN6DrRect6bottomEv($rect) | 0;
 $call2 = __ZN6DrRect4leftEv($rect) | 0;
 $width = $rect + 8 | 0;
 $0 = HEAPU8[$fill_color >> 0] | HEAPU8[$fill_color + 1 >> 0] << 8 | HEAPU8[$fill_color + 2 >> 0] << 16 | HEAPU8[$fill_color + 3 >> 0] << 24;
 $x$0 = $call2;
 while (1) {
  $call3 = __ZN6DrRect4leftEv($rect) | 0;
  if (($x$0 | 0) >= ((HEAP32[$width >> 2] | 0) + $call3 | 0)) break;
  __ZNK8DrBitmap8getPixelEii($tmp, $bitmap, $x$0, $call);
  __ZN7DrColorC2Ej($tmpcast$byval_copy, 0);
  if (__ZNK7DrColoreqERKS_($tmp, $tmpcast$byval_copy) | 0) {
   HEAP32[$agg$tmp >> 2] = $0;
   HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
   __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($agg$tmp$ensured, $bitmap, $x$0, $call, $tmpcast$byval_copy, .001, 0, $fill_qty, $fill_rect);
   __ZN8DrBitmapD2Ev($agg$tmp$ensured);
  }
  __ZNK8DrBitmap8getPixelEii($tmp5, $bitmap, $x$0, $call1);
  __ZN7DrColorC2Ej($tmpcast$byval_copy, 0);
  if (__ZNK7DrColoreqERKS_($tmp5, $tmpcast$byval_copy) | 0) {
   HEAP32[$agg$tmp10 >> 2] = $0;
   HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$agg$tmp10 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$agg$tmp10 + 1 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$agg$tmp10 + 2 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$agg$tmp10 + 3 >> 0] | 0;
   __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($agg$tmp$ensured9, $bitmap, $x$0, $call1, $tmpcast$byval_copy, .001, 0, $fill_qty, $fill_rect);
   __ZN8DrBitmapD2Ev($agg$tmp$ensured9);
  }
  $x$0 = $x$0 + 1 | 0;
 }
 $call12 = __ZN6DrRect4leftEv($rect) | 0;
 $call13 = __ZN6DrRect5rightEv($rect) | 0;
 $height = $rect + 12 | 0;
 $y$0 = __ZN6DrRect3topEv($rect) | 0;
 while (1) {
  $call16 = __ZN6DrRect3topEv($rect) | 0;
  if (($y$0 | 0) >= ((HEAP32[$height >> 2] | 0) + $call16 | 0)) break;
  __ZNK8DrBitmap8getPixelEii($tmp21, $bitmap, $call12, $y$0);
  __ZN7DrColorC2Ej($tmpcast$byval_copy, 0);
  if (__ZNK7DrColoreqERKS_($tmp21, $tmpcast$byval_copy) | 0) {
   HEAP32[$agg$tmp26 >> 2] = $0;
   HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$agg$tmp26 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$agg$tmp26 + 1 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$agg$tmp26 + 2 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$agg$tmp26 + 3 >> 0] | 0;
   __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($agg$tmp$ensured25, $bitmap, $call12, $y$0, $tmpcast$byval_copy, .001, 0, $fill_qty, $fill_rect);
   __ZN8DrBitmapD2Ev($agg$tmp$ensured25);
  }
  __ZNK8DrBitmap8getPixelEii($tmp28, $bitmap, $call13, $y$0);
  __ZN7DrColorC2Ej($tmpcast$byval_copy, 0);
  if (__ZNK7DrColoreqERKS_($tmp28, $tmpcast$byval_copy) | 0) {
   HEAP32[$agg$tmp33 >> 2] = $0;
   HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$agg$tmp33 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$agg$tmp33 + 1 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$agg$tmp33 + 2 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$agg$tmp33 + 3 >> 0] | 0;
   __ZN2Dr9FloodFillER8DrBitmapii7DrColord15Flood_Fill_TypeRiR6DrRect($agg$tmp$ensured32, $bitmap, $call13, $y$0, $tmpcast$byval_copy, .001, 0, $fill_qty, $fill_rect);
   __ZN8DrBitmapD2Ev($agg$tmp$ensured32);
  }
  $y$0 = $y$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __sg_validate_image_desc($desc) {
 $desc = $desc | 0;
 var $21 = 0, $34 = 0, $call102 = 0, $desc$addr = 0, $face_index = 0, $face_index68 = 0, $fmt = 0, $has_data = 0, $has_size = 0, $injected = 0, $mip_index = 0, $mip_index72 = 0, $no_data = 0, $no_size = 0, $num_faces = 0, $num_mips = 0, $usage = 0, $valid_nonrt_fmt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $desc$addr = sp + 32 | 0;
 $fmt = sp + 28 | 0;
 $usage = sp + 24 | 0;
 $injected = sp + 41 | 0;
 $valid_nonrt_fmt = sp + 40 | 0;
 $num_faces = sp + 20 | 0;
 $num_mips = sp + 16 | 0;
 $face_index = sp + 12 | 0;
 $mip_index = sp + 8 | 0;
 $has_data = sp + 39 | 0;
 $has_size = sp + 38 | 0;
 $face_index68 = sp + 4 | 0;
 $mip_index72 = sp;
 $no_data = sp + 37 | 0;
 $no_size = sp + 36 | 0;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 13308, 36734);
 __sg_validate_begin();
 __sg_validate((HEAP32[HEAP32[$desc$addr >> 2] >> 2] | 0) == 0, 6);
 __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 880 >> 2] | 0) == 0, 6);
 __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 12 >> 2] | 0) > 0, 7);
 __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2] | 0) > 0, 8);
 HEAP32[$fmt >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 32 >> 2];
 HEAP32[$usage >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 28 >> 2];
 if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 848 >> 2] | 0) $21 = 1; else if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 860 >> 2] | 0) $21 = 1; else if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 868 >> 2] | 0) $21 = 1; else $21 = 0 != (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 876 >> 2] | 0);
 HEAP8[$injected >> 0] = $21 & 1;
 if (HEAP8[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 0] & 1) {
  if (!((HEAP32[$fmt >> 2] | 0) >= 0 & (HEAP32[$fmt >> 2] | 0) < 62)) ___assert_fail(36758, 21600, 13321, 36734);
  __sg_validate(HEAP8[2164412 + ((HEAP32[$fmt >> 2] | 0) * 6 | 0) + 2 >> 0] & 1, 9);
  if (!(HEAP8[2164785] & 1)) if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 36 >> 2] | 0) > 1) {
   if (HEAP8[2164379] & 1) $34 = HEAP8[2164412 + ((HEAP32[$fmt >> 2] | 0) * 6 | 0) + 4 >> 0] & 1; else $34 = 0;
   __sg_validate($34, 12);
  }
  __sg_validate((HEAP32[$usage >> 2] | 0) == 1, 13);
  __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 76 >> 2] | 0) == 0, 14);
  $call102 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $call102 | 0;
 }
 __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 36 >> 2] | 0) <= 1, 11);
 HEAP8[$valid_nonrt_fmt >> 0] = ((__sg_is_valid_rendertarget_depth_format(HEAP32[$fmt >> 2] | 0) | 0) ^ 1) & 1;
 __sg_validate(HEAP8[$valid_nonrt_fmt >> 0] & 1, 10);
 if ((HEAP8[$injected >> 0] & 1 ^ 1) & (HEAP32[$usage >> 2] | 0) == 1) {
  HEAP32[$num_faces >> 2] = (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0) == 2 ? 6 : 1;
  HEAP32[$num_mips >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 24 >> 2];
  HEAP32[$face_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$face_index >> 2] | 0) >= (HEAP32[$num_faces >> 2] | 0)) break;
   HEAP32[$mip_index >> 2] = 0;
   while (1) {
    if ((HEAP32[$mip_index >> 2] | 0) >= (HEAP32[$num_mips >> 2] | 0)) break;
    HEAP8[$has_data >> 0] = (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 76 + (HEAP32[$face_index >> 2] << 7) + (HEAP32[$mip_index >> 2] << 3) >> 2] | 0) != 0 & 1;
    HEAP8[$has_size >> 0] = (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 76 + (HEAP32[$face_index >> 2] << 7) + (HEAP32[$mip_index >> 2] << 3) + 4 >> 2] | 0) >>> 0 > 0 & 1;
    __sg_validate(HEAP8[$has_data >> 0] & 1 ? HEAP8[$has_size >> 0] & 1 : 0, 15);
    HEAP32[$mip_index >> 2] = (HEAP32[$mip_index >> 2] | 0) + 1;
   }
   HEAP32[$face_index >> 2] = (HEAP32[$face_index >> 2] | 0) + 1;
  }
  $call102 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $call102 | 0;
 } else {
  HEAP32[$face_index68 >> 2] = 0;
  while (1) {
   if ((HEAP32[$face_index68 >> 2] | 0) >= 6) break;
   HEAP32[$mip_index72 >> 2] = 0;
   while (1) {
    if ((HEAP32[$mip_index72 >> 2] | 0) >= 16) break;
    HEAP8[$no_data >> 0] = 0 == (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 76 + (HEAP32[$face_index68 >> 2] << 7) + (HEAP32[$mip_index72 >> 2] << 3) >> 2] | 0) & 1;
    HEAP8[$no_size >> 0] = 0 == (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 76 + (HEAP32[$face_index68 >> 2] << 7) + (HEAP32[$mip_index72 >> 2] << 3) + 4 >> 2] | 0) & 1;
    __sg_validate(HEAP8[$no_data >> 0] & 1 ? HEAP8[$no_size >> 0] & 1 : 0, 16);
    HEAP32[$mip_index72 >> 2] = (HEAP32[$mip_index72 >> 2] | 0) + 1;
   }
   HEAP32[$face_index68 >> 2] = (HEAP32[$face_index68 >> 2] | 0) + 1;
  }
  $call102 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $call102 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($this) {
 $this = $this | 0;
 var $Field = 0, $Init = 0, $call18 = 0, $call19 = 0, $call25 = 0, $call36 = 0, $call37 = 0, $call4 = 0, $call42 = 0, $call48 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Field = sp + 8 | 0;
 $Init = sp + 4 | 0;
 $ref$tmp = sp;
 L1 : do if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 100) switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 | 0) {
 case 105:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call4) | 0;
   HEAP32[$Field >> 2] = $call5;
   if (!$call5) $retval$1 = 0; else {
    $call9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call4) | 0;
    HEAP32[$Init >> 2] = $call9;
    if (!$call9) $retval$0 = 0; else {
     HEAP8[$ref$tmp >> 0] = 0;
     $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this, $Field, $Init, $ref$tmp) | 0;
    }
    $retval$1 = $retval$0;
   }
   $retval$7 = $retval$1;
   break L1;
   break;
  }
 case 120:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call18 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call19 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call18) | 0;
   HEAP32[$Field >> 2] = $call19;
   if (!$call19) $retval$3 = 0; else {
    $call25 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call18) | 0;
    HEAP32[$Init >> 2] = $call25;
    if (!$call25) $retval$2 = 0; else {
     HEAP8[$ref$tmp >> 0] = 1;
     $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this, $Field, $Init, $ref$tmp) | 0;
    }
    $retval$3 = $retval$2;
   }
   $retval$7 = $retval$3;
   break L1;
   break;
  }
 case 88:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call36 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call37 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call36) | 0;
   HEAP32[$Field >> 2] = $call37;
   if (!$call37) $retval$6 = 0; else {
    $call42 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call36) | 0;
    HEAP32[$Init >> 2] = $call42;
    if (!$call42) $retval$5 = 0; else {
     $call48 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call36) | 0;
     HEAP32[$ref$tmp >> 2] = $call48;
     if (!$call48) $retval$4 = 0; else $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this, $Field, $Init, $ref$tmp) | 0;
     $retval$5 = $retval$4;
    }
    $retval$6 = $retval$5;
   }
   $retval$7 = $retval$6;
   break L1;
   break;
  }
 default:
  {
   label = 20;
   break L1;
  }
 } else label = 20; while (0);
 if ((label | 0) == 20) $retval$7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
 STACKTOP = sp;
 return $retval$7 | 0;
}

function _stbtt__handle_clipped_edge($scanline, $x, $e, $x0, $y0, $x1, $y1) {
 $scanline = $scanline | 0;
 $x = $x | 0;
 $e = $e | 0;
 $x0 = +$x0;
 $y0 = +$y0;
 $x1 = +$x1;
 $y1 = +$y1;
 var $54 = 0.0, $55 = 0, $arrayidx = 0, $arrayidx148 = 0, $e$addr = 0, $scanline$addr = 0, $x$addr = 0, $x0$addr = 0, $x1$addr = 0, $y0$addr = 0, $y1$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $scanline$addr = sp + 24 | 0;
 $x$addr = sp + 20 | 0;
 $e$addr = sp + 16 | 0;
 $x0$addr = sp + 12 | 0;
 $y0$addr = sp + 8 | 0;
 $x1$addr = sp + 4 | 0;
 $y1$addr = sp;
 HEAP32[$scanline$addr >> 2] = $scanline;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$e$addr >> 2] = $e;
 HEAPF32[$x0$addr >> 2] = $x0;
 HEAPF32[$y0$addr >> 2] = $y0;
 HEAPF32[$x1$addr >> 2] = $x1;
 HEAPF32[$y1$addr >> 2] = $y1;
 if (+HEAPF32[$y0$addr >> 2] == +HEAPF32[$y1$addr >> 2]) {
  STACKTOP = sp;
  return;
 }
 if (!(+HEAPF32[$y0$addr >> 2] < +HEAPF32[$y1$addr >> 2])) ___assert_fail(44848, 44131, 2621, 44856);
 if (!(+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 20 >> 2] <= +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2])) ___assert_fail(44883, 44131, 2622, 44856);
 if (+HEAPF32[$y0$addr >> 2] > +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2]) {
  STACKTOP = sp;
  return;
 }
 if (+HEAPF32[$y1$addr >> 2] < +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 20 >> 2]) {
  STACKTOP = sp;
  return;
 }
 if (+HEAPF32[$y0$addr >> 2] < +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 20 >> 2]) {
  HEAPF32[$x0$addr >> 2] = +HEAPF32[$x0$addr >> 2] + (+HEAPF32[$x1$addr >> 2] - +HEAPF32[$x0$addr >> 2]) * (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 20 >> 2] - +HEAPF32[$y0$addr >> 2]) / (+HEAPF32[$y1$addr >> 2] - +HEAPF32[$y0$addr >> 2]);
  HEAPF32[$y0$addr >> 2] = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 20 >> 2];
 }
 if (+HEAPF32[$y1$addr >> 2] > +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2]) {
  HEAPF32[$x1$addr >> 2] = +HEAPF32[$x1$addr >> 2] + (+HEAPF32[$x1$addr >> 2] - +HEAPF32[$x0$addr >> 2]) * (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2] - +HEAPF32[$y1$addr >> 2]) / (+HEAPF32[$y1$addr >> 2] - +HEAPF32[$y0$addr >> 2]);
  HEAPF32[$y1$addr >> 2] = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 24 >> 2];
 }
 do if (+HEAPF32[$x0$addr >> 2] == +(HEAP32[$x$addr >> 2] | 0)) if (+HEAPF32[$x1$addr >> 2] <= +((HEAP32[$x$addr >> 2] | 0) + 1 | 0)) break; else ___assert_fail(44898, 44131, 2635, 44856); else {
  if (+HEAPF32[$x0$addr >> 2] == +((HEAP32[$x$addr >> 2] | 0) + 1 | 0)) if (+HEAPF32[$x1$addr >> 2] >= +(HEAP32[$x$addr >> 2] | 0)) break; else ___assert_fail(44908, 44131, 2637, 44856);
  if (+HEAPF32[$x0$addr >> 2] <= +(HEAP32[$x$addr >> 2] | 0)) if (+HEAPF32[$x1$addr >> 2] <= +(HEAP32[$x$addr >> 2] | 0)) break; else ___assert_fail(44916, 44131, 2639, 44856);
  $54 = +HEAPF32[$x1$addr >> 2];
  $55 = HEAP32[$x$addr >> 2] | 0;
  if (+HEAPF32[$x0$addr >> 2] >= +((HEAP32[$x$addr >> 2] | 0) + 1 | 0)) if ($54 >= +($55 + 1 | 0)) break; else ___assert_fail(44924, 44131, 2641, 44856);
  if (!($54 >= +($55 | 0))) ___assert_fail(44934, 44131, 2643, 44856);
  if (+HEAPF32[$x1$addr >> 2] <= +((HEAP32[$x$addr >> 2] | 0) + 1 | 0)) break; else ___assert_fail(44934, 44131, 2643, 44856);
 } while (0);
 if (+HEAPF32[$x0$addr >> 2] <= +(HEAP32[$x$addr >> 2] | 0)) if (+HEAPF32[$x1$addr >> 2] <= +(HEAP32[$x$addr >> 2] | 0)) {
  $arrayidx = (HEAP32[$scanline$addr >> 2] | 0) + (HEAP32[$x$addr >> 2] << 2) | 0;
  HEAPF32[$arrayidx >> 2] = +HEAPF32[$arrayidx >> 2] + +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 16 >> 2] * (+HEAPF32[$y1$addr >> 2] - +HEAPF32[$y0$addr >> 2]);
  STACKTOP = sp;
  return;
 }
 if (+HEAPF32[$x0$addr >> 2] >= +((HEAP32[$x$addr >> 2] | 0) + 1 | 0)) if (+HEAPF32[$x1$addr >> 2] >= +((HEAP32[$x$addr >> 2] | 0) + 1 | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(+HEAPF32[$x0$addr >> 2] >= +(HEAP32[$x$addr >> 2] | 0))) ___assert_fail(44955, 44131, 2650, 44856);
 if (!(+HEAPF32[$x0$addr >> 2] <= +((HEAP32[$x$addr >> 2] | 0) + 1 | 0))) ___assert_fail(44955, 44131, 2650, 44856);
 if (!(+HEAPF32[$x1$addr >> 2] >= +(HEAP32[$x$addr >> 2] | 0))) ___assert_fail(44955, 44131, 2650, 44856);
 if (!(+HEAPF32[$x1$addr >> 2] <= +((HEAP32[$x$addr >> 2] | 0) + 1 | 0))) ___assert_fail(44955, 44131, 2650, 44856);
 $arrayidx148 = (HEAP32[$scanline$addr >> 2] | 0) + (HEAP32[$x$addr >> 2] << 2) | 0;
 HEAPF32[$arrayidx148 >> 2] = +HEAPF32[$arrayidx148 >> 2] + +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 16 >> 2] * (+HEAPF32[$y1$addr >> 2] - +HEAPF32[$y0$addr >> 2]) * (1.0 - (+HEAPF32[$x0$addr >> 2] - +(HEAP32[$x$addr >> 2] | 0) + (+HEAPF32[$x1$addr >> 2] - +(HEAP32[$x$addr >> 2] | 0))) / 2.0);
 STACKTOP = sp;
 return;
}

function _stbi__compute_huffman_codes($a) {
 $a = $a | 0;
 var $19 = 0, $45 = 0, $a$addr = 0, $c = 0, $codelength_sizes = 0, $conv23 = 0, $fill = 0, $hclen = 0, $hdist = 0, $hlit = 0, $i = 0, $lencodes = 0, $n = 0, $ntot = 0, $retval = 0, $s = 0, $z_codelength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2560 | 0;
 $retval = sp + 2544 | 0;
 $a$addr = sp + 2540 | 0;
 $z_codelength = sp + 520 | 0;
 $lencodes = sp + 32 | 0;
 $codelength_sizes = sp;
 $i = sp + 516 | 0;
 $n = sp + 512 | 0;
 $hlit = sp + 508 | 0;
 $hdist = sp + 504 | 0;
 $hclen = sp + 500 | 0;
 $ntot = sp + 496 | 0;
 $s = sp + 492 | 0;
 $c = sp + 488 | 0;
 $fill = sp + 2548 | 0;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$hlit >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 5) | 0) + 257;
 HEAP32[$hdist >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 5) | 0) + 1;
 HEAP32[$hclen >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 4) | 0) + 4;
 HEAP32[$ntot >> 2] = (HEAP32[$hlit >> 2] | 0) + (HEAP32[$hdist >> 2] | 0);
 HEAP32[$codelength_sizes >> 2] = 0;
 HEAP32[$codelength_sizes + 4 >> 2] = 0;
 HEAP32[$codelength_sizes + 8 >> 2] = 0;
 HEAP32[$codelength_sizes + 12 >> 2] = 0;
 HEAP16[$codelength_sizes + 16 >> 1] = 0;
 HEAP8[$codelength_sizes + 18 >> 0] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$hclen >> 2] | 0)) break;
  HEAP32[$s >> 2] = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 3) | 0;
  HEAP8[$codelength_sizes + (HEAPU8[9648 + (HEAP32[$i >> 2] | 0) >> 0] | 0) >> 0] = HEAP32[$s >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (!(_stbi__zbuild_huffman($z_codelength, $codelength_sizes, 19) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $45 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 HEAP32[$n >> 2] = 0;
 L9 : while (1) {
  if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$ntot >> 2] | 0)) {
   label = 25;
   break;
  }
  HEAP32[$c >> 2] = _stbi__zhuffman_decode(HEAP32[$a$addr >> 2] | 0, $z_codelength) | 0;
  if ((HEAP32[$c >> 2] | 0) < 0 | (HEAP32[$c >> 2] | 0) >= 19) {
   label = 9;
   break;
  }
  if ((HEAP32[$c >> 2] | 0) < 16) {
   $conv23 = HEAP32[$c >> 2] & 255;
   $19 = HEAP32[$n >> 2] | 0;
   HEAP32[$n >> 2] = $19 + 1;
   HEAP8[$lencodes + $19 >> 0] = $conv23;
  } else {
   HEAP8[$fill >> 0] = 0;
   do if ((HEAP32[$c >> 2] | 0) == 16) {
    HEAP32[$c >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 2) | 0) + 3;
    if (!(HEAP32[$n >> 2] | 0)) {
     label = 14;
     break L9;
    }
    HEAP8[$fill >> 0] = HEAP8[$lencodes + ((HEAP32[$n >> 2] | 0) - 1) >> 0] | 0;
   } else {
    if ((HEAP32[$c >> 2] | 0) == 17) {
     HEAP32[$c >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 3) | 0) + 3;
     break;
    }
    if ((HEAP32[$c >> 2] | 0) != 18) {
     label = 19;
     break L9;
    }
    HEAP32[$c >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 7) | 0) + 11;
   } while (0);
   if (((HEAP32[$ntot >> 2] | 0) - (HEAP32[$n >> 2] | 0) | 0) < (HEAP32[$c >> 2] | 0)) {
    label = 22;
    break;
   }
   _memset($lencodes + (HEAP32[$n >> 2] | 0) | 0, (HEAPU8[$fill >> 0] | 0) & 255 | 0, HEAP32[$c >> 2] | 0) | 0;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + (HEAP32[$c >> 2] | 0);
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$retval >> 2] = _stbi__err(48933) | 0;
  $45 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } else if ((label | 0) == 14) {
  HEAP32[$retval >> 2] = _stbi__err(48933) | 0;
  $45 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } else if ((label | 0) == 19) ___assert_fail(48949, 47433, 4121, 48957); else if ((label | 0) == 22) {
  HEAP32[$retval >> 2] = _stbi__err(48933) | 0;
  $45 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } else if ((label | 0) == 25) {
  if ((HEAP32[$n >> 2] | 0) != (HEAP32[$ntot >> 2] | 0)) {
   HEAP32[$retval >> 2] = _stbi__err(48933) | 0;
   $45 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  }
  if (!(_stbi__zbuild_huffman((HEAP32[$a$addr >> 2] | 0) + 32 | 0, $lencodes, HEAP32[$hlit >> 2] | 0) | 0)) {
   HEAP32[$retval >> 2] = 0;
   $45 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  }
  if (_stbi__zbuild_huffman((HEAP32[$a$addr >> 2] | 0) + 2052 | 0, $lencodes + (HEAP32[$hlit >> 2] | 0) | 0, HEAP32[$hdist >> 2] | 0) | 0) {
   HEAP32[$retval >> 2] = 1;
   $45 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  } else {
   HEAP32[$retval >> 2] = 0;
   $45 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  }
 }
 return 0;
}

function _stbi__parse_huffman_block($a) {
 $a = $a | 0;
 var $14 = 0, $5 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $a$addr = 0, $call21 = 0, $call34 = 0, $conv = 0, $dec = 0, $dec68 = 0, $dist = 0, $len = 0, $p = 0, $retval = 0, $v = 0, $z = 0, $zout = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 24 | 0;
 $a$addr = sp + 20 | 0;
 $zout = sp + 16 | 0;
 $z = sp + 12 | 0;
 $p = sp + 8 | 0;
 $len = sp + 4 | 0;
 $dist = sp;
 $v = sp + 28 | 0;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$zout >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2];
 L1 : while (1) {
  HEAP32[$z >> 2] = _stbi__zhuffman_decode(HEAP32[$a$addr >> 2] | 0, (HEAP32[$a$addr >> 2] | 0) + 32 | 0) | 0;
  $5 = HEAP32[$z >> 2] | 0;
  do if ((HEAP32[$z >> 2] | 0) < 256) {
   if (($5 | 0) < 0) {
    label = 4;
    break L1;
   }
   if ((HEAP32[$zout >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
    if (!(_stbi__zexpand(HEAP32[$a$addr >> 2] | 0, HEAP32[$zout >> 2] | 0, 1) | 0)) {
     label = 7;
     break L1;
    }
    HEAP32[$zout >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2];
   }
   $conv = HEAP32[$z >> 2] & 255;
   $14 = HEAP32[$zout >> 2] | 0;
   HEAP32[$zout >> 2] = $14 + 1;
   HEAP8[$14 >> 0] = $conv;
  } else {
   if (($5 | 0) == 256) {
    label = 11;
    break L1;
   }
   HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) - 257;
   HEAP32[$len >> 2] = HEAP32[9136 + (HEAP32[$z >> 2] << 2) >> 2];
   if (HEAP32[9264 + (HEAP32[$z >> 2] << 2) >> 2] | 0) {
    $call21 = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, HEAP32[9264 + (HEAP32[$z >> 2] << 2) >> 2] | 0) | 0;
    HEAP32[$len >> 2] = (HEAP32[$len >> 2] | 0) + $call21;
   }
   HEAP32[$z >> 2] = _stbi__zhuffman_decode(HEAP32[$a$addr >> 2] | 0, (HEAP32[$a$addr >> 2] | 0) + 2052 | 0) | 0;
   if ((HEAP32[$z >> 2] | 0) < 0) {
    label = 15;
    break L1;
   }
   HEAP32[$dist >> 2] = HEAP32[9392 + (HEAP32[$z >> 2] << 2) >> 2];
   if (HEAP32[9520 + (HEAP32[$z >> 2] << 2) >> 2] | 0) {
    $call34 = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, HEAP32[9520 + (HEAP32[$z >> 2] << 2) >> 2] | 0) | 0;
    HEAP32[$dist >> 2] = (HEAP32[$dist >> 2] | 0) + $call34;
   }
   if (((HEAP32[$zout >> 2] | 0) - (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 20 >> 2] | 0) | 0) < (HEAP32[$dist >> 2] | 0)) {
    label = 19;
    break L1;
   }
   if (((HEAP32[$zout >> 2] | 0) + (HEAP32[$len >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
    if (!(_stbi__zexpand(HEAP32[$a$addr >> 2] | 0, HEAP32[$zout >> 2] | 0, HEAP32[$len >> 2] | 0) | 0)) {
     label = 22;
     break L1;
    }
    HEAP32[$zout >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2];
   }
   HEAP32[$p >> 2] = (HEAP32[$zout >> 2] | 0) + (0 - (HEAP32[$dist >> 2] | 0));
   if ((HEAP32[$dist >> 2] | 0) == 1) {
    HEAP8[$v >> 0] = HEAP8[HEAP32[$p >> 2] >> 0] | 0;
    if (!(HEAP32[$len >> 2] | 0)) break;
    do {
     $56 = HEAP8[$v >> 0] | 0;
     $57 = HEAP32[$zout >> 2] | 0;
     HEAP32[$zout >> 2] = $57 + 1;
     HEAP8[$57 >> 0] = $56;
     $dec = (HEAP32[$len >> 2] | 0) + -1 | 0;
     HEAP32[$len >> 2] = $dec;
    } while (($dec | 0) != 0);
   } else {
    if (!(HEAP32[$len >> 2] | 0)) break;
    do {
     $60 = HEAP32[$p >> 2] | 0;
     HEAP32[$p >> 2] = $60 + 1;
     $61 = HEAP8[$60 >> 0] | 0;
     $62 = HEAP32[$zout >> 2] | 0;
     HEAP32[$zout >> 2] = $62 + 1;
     HEAP8[$62 >> 0] = $61;
     $dec68 = (HEAP32[$len >> 2] | 0) + -1 | 0;
     HEAP32[$len >> 2] = $dec68;
    } while (($dec68 | 0) != 0);
   }
  } while (0);
 }
 if ((label | 0) == 4) {
  HEAP32[$retval >> 2] = _stbi__err(48758) | 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 7) {
  HEAP32[$retval >> 2] = 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 11) {
  HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] = HEAP32[$zout >> 2];
  HEAP32[$retval >> 2] = 1;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 15) {
  HEAP32[$retval >> 2] = _stbi__err(48758) | 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 19) {
  HEAP32[$retval >> 2] = _stbi__err(48775) | 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 22) {
  HEAP32[$retval >> 2] = 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE($this) {
 $this = $this | 0;
 var $Names = 0, $Params = 0, $SwapParams = 0, $agg$tmp = 0, $agg$tmp6 = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $call15 = 0, $call20 = 0, $retval$0 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp9$byval_copy = sp + 40 | 0;
 $agg$tmp = sp + 32 | 0;
 $agg$tmp6 = sp + 24 | 0;
 $Params = sp;
 $SwapParams = sp + 8 | 0;
 $agg$tmp9 = sp + 16 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55448);
 HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp9$byval_copy) | 0) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp9$byval_copy, $this, 0);
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp9$byval_copy) | 0; else $retval$0 = 0;
  $retval$5 = $retval$0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 55451);
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp9$byval_copy) | 0) {
   __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($Params);
   __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SwapParams, $this + 362 | 0, 1);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 55454);
   HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
   HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
   do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp9$byval_copy) | 0) label = 12; else {
    $Names = $this + 8 | 0;
    $call15 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
    while (1) {
     $call20 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
     HEAP32[$agg$tmp9$byval_copy >> 2] = $call20;
     if (!$call20) {
      label = 11;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp9$byval_copy);
     if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
      label = 10;
      break;
     }
    }
    if ((label | 0) == 10) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Params, $this, $call15);
     label = 12;
     break;
    } else if ((label | 0) == 11) {
     $retval$4 = 0;
     break;
    }
   } while (0);
   if ((label | 0) == 12) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp9$byval_copy, $this, 0);
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Params, $agg$tmp9$byval_copy) | 0; else $retval$3 = 0;
    $retval$4 = $retval$3;
   }
   __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SwapParams);
   $retval$5 = $retval$4;
  } else $retval$5 = 0;
 }
 STACKTOP = sp;
 return $retval$5 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv($this) {
 $this = $this | 0;
 var $ElemType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call15 = 0, $call24 = 0, $call25 = 0, $call33 = 0, $call43 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $ElemType = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56179);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0) {
  if (((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) + -49 & 255) < 9) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp$byval_copy, $this, 0);
   do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 112) | 0) {
     $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp$byval_copy) | 0;
     break;
    }
    $call15 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$ElemType >> 2] = $call15;
    if (!$call15) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $ElemType, $agg$tmp$byval_copy) | 0;
    $retval$1 = $retval$0;
   } else $retval$1 = 0; while (0);
   $retval$5 = $retval$1;
   break;
  }
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
   $call43 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = $call43;
   if (!$call43) $retval$4 = 0; else {
    __ZN12_GLOBAL__N_110StringViewC2Ev($ElemType);
    $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $ElemType) | 0;
   }
   $retval$5 = $retval$4;
   break;
  }
  $call24 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call25 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call24) | 0;
  HEAP32[$agg$tmp$byval_copy >> 2] = $call25;
  if (!$call25) $retval$3 = 0; else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
   $call33 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call24) | 0;
   HEAP32[$ElemType >> 2] = $call33;
   if (!$call33) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $ElemType, $agg$tmp$byval_copy) | 0;
   $retval$3 = $retval$2;
  } else $retval$3 = 0;
  $retval$5 = $retval$3;
 } else $retval$5 = 0; while (0);
 STACKTOP = sp;
 return $retval$5 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($this) {
 $this = $this | 0;
 var $Proto = 0, $Qual = 0, $SaveFirst = 0, $SaveLast = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call17 = 0, $call28 = 0, $call37 = 0, $call39 = 0, $call45 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp$byval_copy = sp + 48 | 0;
 $Qual = sp + 40 | 0;
 $agg$tmp = sp + 32 | 0;
 $Proto = sp;
 $SaveFirst = sp + 20 | 0;
 $SaveLast = sp + 8 | 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 85) | 0) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Qual, $this);
  do if (__ZNK12_GLOBAL__N_110StringView5emptyEv($Qual) | 0) $retval$3 = 0; else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56340);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   if (!(__ZNK12_GLOBAL__N_110StringView10startsWithES0_($Qual, $agg$tmp$byval_copy) | 0)) {
    $call28 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = $call28;
    if (!$call28) $retval$2 = 0; else $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $Qual) | 0;
    $retval$3 = $retval$2;
    break;
   }
   __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$tmp$byval_copy, $Qual, 9);
   __ZN12_GLOBAL__N_110StringViewC2Ev($Proto);
   __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($SaveFirst, $this, __ZNK12_GLOBAL__N_110StringView5beginEv($agg$tmp$byval_copy) | 0);
   __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($SaveLast, $this + 4 | 0, __ZNK12_GLOBAL__N_110StringView3endEv($agg$tmp$byval_copy) | 0);
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Proto, $this);
   __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveLast);
   __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveFirst);
   if (__ZNK12_GLOBAL__N_110StringView5emptyEv($Proto) | 0) $retval$1 = 0; else {
    $call17 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$SaveFirst >> 2] = $call17;
    if (!$call17) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $SaveFirst, $Proto) | 0;
    $retval$1 = $retval$0;
   }
   $retval$3 = $retval$1;
  } while (0);
  $retval$5 = $retval$3;
 } else {
  $call37 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
  HEAP32[$agg$tmp$byval_copy >> 2] = $call37;
  $call39 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$Qual >> 2] = $call39;
  if (!$call39) $retval$4 = 0; else if (!$call37) $retval$4 = $call39; else {
   $call45 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_($this, $Qual, $agg$tmp$byval_copy) | 0;
   HEAP32[$Qual >> 2] = $call45;
   $retval$4 = $call45;
  }
  $retval$5 = $retval$4;
 }
 STACKTOP = sp;
 return $retval$5 | 0;
}

function _stbi__zbuild_huffman($z, $sizelist, $num) {
 $z = $z | 0;
 $sizelist = $sizelist | 0;
 $num = $num | 0;
 var $74 = 0, $arrayidx2 = 0, $arrayidx76 = 0, $c = 0, $code = 0, $fastv = 0, $i = 0, $j = 0, $k = 0, $next_code = 0, $num$addr = 0, $retval = 0, $s = 0, $sizelist$addr = 0, $sizes = 0, $z$addr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $retval = sp + 180 | 0;
 $z$addr = sp + 176 | 0;
 $sizelist$addr = sp + 172 | 0;
 $num$addr = sp + 168 | 0;
 $i = sp + 164 | 0;
 $k = sp + 160 | 0;
 $code = sp + 156 | 0;
 $next_code = sp + 80 | 0;
 $sizes = sp;
 $s = sp + 152 | 0;
 $c = sp + 148 | 0;
 $fastv = sp + 184 | 0;
 $j = sp + 144 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$sizelist$addr >> 2] = $sizelist;
 HEAP32[$num$addr >> 2] = $num;
 HEAP32[$k >> 2] = 0;
 dest = $sizes;
 stop = dest + 68 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _memset(HEAP32[$z$addr >> 2] | 0, 0, 1024) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num$addr >> 2] | 0)) break;
  $arrayidx2 = $sizes + ((HEAPU8[(HEAP32[$sizelist$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) << 2) | 0;
  HEAP32[$arrayidx2 >> 2] = (HEAP32[$arrayidx2 >> 2] | 0) + 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$sizes >> 2] = 0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  if ((HEAP32[$sizes + (HEAP32[$i >> 2] << 2) >> 2] | 0) > (1 << HEAP32[$i >> 2] | 0)) {
   label = 7;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  HEAP32[$retval >> 2] = _stbi__err(48985) | 0;
  $74 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $74 | 0;
 }
 HEAP32[$code >> 2] = 0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  HEAP32[$next_code + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$code >> 2];
  HEAP16[(HEAP32[$z$addr >> 2] | 0) + 1024 + (HEAP32[$i >> 2] << 1) >> 1] = HEAP32[$code >> 2];
  HEAP16[(HEAP32[$z$addr >> 2] | 0) + 1124 + (HEAP32[$i >> 2] << 1) >> 1] = HEAP32[$k >> 2];
  HEAP32[$code >> 2] = (HEAP32[$code >> 2] | 0) + (HEAP32[$sizes + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  if (HEAP32[$sizes + (HEAP32[$i >> 2] << 2) >> 2] | 0) if (((HEAP32[$code >> 2] | 0) - 1 | 0) >= (1 << HEAP32[$i >> 2] | 0)) {
   label = 13;
   break;
  }
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 1056 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$code >> 2] << 16 - (HEAP32[$i >> 2] | 0);
  HEAP32[$code >> 2] = HEAP32[$code >> 2] << 1;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + (HEAP32[$sizes + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) {
  HEAP32[$retval >> 2] = _stbi__err(48933) | 0;
  $74 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $74 | 0;
 }
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 1056 + 64 >> 2] = 65536;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num$addr >> 2] | 0)) break;
  HEAP32[$s >> 2] = HEAPU8[(HEAP32[$sizelist$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0];
  if (HEAP32[$s >> 2] | 0) {
   HEAP32[$c >> 2] = (HEAP32[$next_code + (HEAP32[$s >> 2] << 2) >> 2] | 0) - (HEAPU16[(HEAP32[$z$addr >> 2] | 0) + 1024 + (HEAP32[$s >> 2] << 1) >> 1] | 0) + (HEAPU16[(HEAP32[$z$addr >> 2] | 0) + 1124 + (HEAP32[$s >> 2] << 1) >> 1] | 0);
   HEAP16[$fastv >> 1] = HEAP32[$s >> 2] << 9 | HEAP32[$i >> 2];
   HEAP8[(HEAP32[$z$addr >> 2] | 0) + 1156 + (HEAP32[$c >> 2] | 0) >> 0] = HEAP32[$s >> 2];
   HEAP16[(HEAP32[$z$addr >> 2] | 0) + 1444 + (HEAP32[$c >> 2] << 1) >> 1] = HEAP32[$i >> 2];
   L28 : do if ((HEAP32[$s >> 2] | 0) <= 9) {
    HEAP32[$j >> 2] = _stbi__bit_reverse(HEAP32[$next_code + (HEAP32[$s >> 2] << 2) >> 2] | 0, HEAP32[$s >> 2] | 0) | 0;
    while (1) {
     if ((HEAP32[$j >> 2] | 0) >= 512) break L28;
     HEAP16[(HEAP32[$z$addr >> 2] | 0) + (HEAP32[$j >> 2] << 1) >> 1] = HEAP16[$fastv >> 1] | 0;
     HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + (1 << HEAP32[$s >> 2]);
    }
   } while (0);
   $arrayidx76 = $next_code + (HEAP32[$s >> 2] << 2) | 0;
   HEAP32[$arrayidx76 >> 2] = (HEAP32[$arrayidx76 >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$retval >> 2] = 1;
 $74 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $74 | 0;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueES8_E4typeENS6_IPKS1_EESA_SA_($this, $__position, $__first, $__last) {
 $this = $this | 0;
 $__position = $__position | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__m$sroa$0$045 = 0, $__p$0 = 0, $__result$addr$0$i$i = 0, $__v = 0, $__value_$i$i$i = 0, $add = 0, $add$ptr = 0, $agg$tmp21 = 0, $agg$tmp22 = 0, $agg$tmp38 = 0, $agg$tmp38$byval_copy = 0, $agg$tmp39 = 0, $agg$tmp39$byval_copy = 0, $call$i = 0, $call41 = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$div13 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub$i$i$i = 0, $sub$ptr$sub$i$i$i30 = 0, $sub$ptr$sub12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp39$byval_copy = sp + 40 | 0;
 $agg$tmp38$byval_copy = sp + 36 | 0;
 $agg$tmp21 = sp + 32 | 0;
 $agg$tmp22 = sp + 28 | 0;
 $__v = sp + 8 | 0;
 $agg$tmp38 = sp + 4 | 0;
 $agg$tmp39 = sp;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 $add$ptr = $0 + ((HEAP32[$__position >> 2] | 0) - $1 >> 4 << 4) | 0;
 $3 = HEAP32[$__first >> 2] | 0;
 $4 = HEAP32[$__last >> 2] | 0;
 $sub$ptr$sub$i$i$i = $4 - $3 | 0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 4;
 L1 : do if (($sub$ptr$sub$i$i$i | 0) > 0) {
  $__value_$i$i$i = $this + 8 | 0;
  $6 = HEAP32[$this + 4 >> 2] | 0;
  $sub$ptr$rhs$cast = $6;
  if (($sub$ptr$div$i$i$i | 0) > ((HEAP32[$__value_$i$i$i >> 2] | 0) - $sub$ptr$rhs$cast >> 4 | 0)) {
   $add = ($sub$ptr$rhs$cast - $1 >> 4) + $sub$ptr$div$i$i$i | 0;
   $call$i = __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
   if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
    $12 = HEAP32[$this >> 2] | 0;
    $sub$ptr$sub$i$i$i30 = (HEAP32[$__value_$i$i$i >> 2] | 0) - $12 | 0;
    $mul$i = $sub$ptr$sub$i$i$i30 >> 3;
    __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$sub$i$i$i30 >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, $add$ptr - $12 >> 4, $this + 8 | 0);
    HEAP32[$agg$tmp38 >> 2] = $3;
    HEAP32[$agg$tmp39 >> 2] = $4;
    HEAP32[$agg$tmp38$byval_copy >> 2] = HEAP32[$agg$tmp38 >> 2];
    HEAP32[$agg$tmp39$byval_copy >> 2] = HEAP32[$agg$tmp39 >> 2];
    __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($__v, $agg$tmp38$byval_copy, $agg$tmp39$byval_copy);
    $call41 = __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_($this, $__v, $add$ptr) | 0;
    __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEED2Ev($__v);
    $__p$0 = $call41;
    break;
   }
  }
  $sub$ptr$sub12 = $sub$ptr$rhs$cast - $add$ptr | 0;
  $sub$ptr$div13 = $sub$ptr$sub12 >> 4;
  $7 = $3;
  $8 = $7 + ($sub$ptr$div13 << 4) | 0;
  if (($sub$ptr$div$i$i$i | 0) > ($sub$ptr$div13 | 0)) {
   HEAP32[$agg$tmp21 >> 2] = $8;
   HEAP32[$agg$tmp22 >> 2] = $4;
   HEAP32[$agg$tmp38$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2];
   HEAP32[$agg$tmp39$byval_copy >> 2] = HEAP32[$agg$tmp22 >> 2];
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($this, $agg$tmp38$byval_copy, $agg$tmp39$byval_copy, $sub$ptr$div$i$i$i - $sub$ptr$div13 | 0);
   if (($sub$ptr$sub12 | 0) > 0) $__m$sroa$0$045 = $8; else {
    $__p$0 = $add$ptr;
    break;
   }
  } else $__m$sroa$0$045 = $4;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE12__move_rangeEPS1_S5_S5_($this, $add$ptr, $6, $add$ptr + ($sub$ptr$div$i$i$i << 4) | 0);
  $9 = $__m$sroa$0$045;
  $10 = $7;
  $__result$addr$0$i$i = $add$ptr;
  while (1) {
   if (($10 | 0) == ($9 | 0)) {
    $__p$0 = $add$ptr;
    break L1;
   }
   __ZN8DrPointFaSERKS_($__result$addr$0$i$i, $10) | 0;
   $10 = $10 + 16 | 0;
   $__result$addr$0$i$i = $__result$addr$0$i$i + 16 | 0;
  }
 } else $__p$0 = $add$ptr; while (0);
 STACKTOP = sp;
 return $__p$0 | 0;
}

function _HMM_LookAt($agg$result, $Eye, $Center, $Up) {
 $agg$result = $agg$result | 0;
 $Eye = $Eye | 0;
 $Center = $Center | 0;
 $Up = $Up | 0;
 var $Eye$byval_copy6 = 0, $F = 0, $F$byval_copy5 = 0, $Result = 0, $S = 0, $U = 0, $agg$tmp = 0, $agg$tmp1 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $Eye$byval_copy6 = sp + 140 | 0;
 $F$byval_copy5 = sp + 128 | 0;
 $Result = sp + 64 | 0;
 $F = sp + 48 | 0;
 $agg$tmp = sp + 36 | 0;
 $S = sp + 24 | 0;
 $agg$tmp1 = sp + 12 | 0;
 $U = sp;
 HEAP32[$F$byval_copy5 >> 2] = HEAP32[$Center >> 2];
 HEAP32[$F$byval_copy5 + 4 >> 2] = HEAP32[$Center + 4 >> 2];
 HEAP32[$F$byval_copy5 + 8 >> 2] = HEAP32[$Center + 8 >> 2];
 HEAP32[$Eye$byval_copy6 >> 2] = HEAP32[$Eye >> 2];
 HEAP32[$Eye$byval_copy6 + 4 >> 2] = HEAP32[$Eye + 4 >> 2];
 HEAP32[$Eye$byval_copy6 + 8 >> 2] = HEAP32[$Eye + 8 >> 2];
 _HMM_SubtractVec3($agg$tmp, $F$byval_copy5, $Eye$byval_copy6);
 HEAP32[$Eye$byval_copy6 >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$Eye$byval_copy6 + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$Eye$byval_copy6 + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
 _HMM_NormalizeVec3($F, $Eye$byval_copy6);
 HEAP32[$F$byval_copy5 >> 2] = HEAP32[$F >> 2];
 HEAP32[$F$byval_copy5 + 4 >> 2] = HEAP32[$F + 4 >> 2];
 HEAP32[$F$byval_copy5 + 8 >> 2] = HEAP32[$F + 8 >> 2];
 HEAP32[$Eye$byval_copy6 >> 2] = HEAP32[$Up >> 2];
 HEAP32[$Eye$byval_copy6 + 4 >> 2] = HEAP32[$Up + 4 >> 2];
 HEAP32[$Eye$byval_copy6 + 8 >> 2] = HEAP32[$Up + 8 >> 2];
 _HMM_Cross($agg$tmp1, $F$byval_copy5, $Eye$byval_copy6);
 HEAP32[$Eye$byval_copy6 >> 2] = HEAP32[$agg$tmp1 >> 2];
 HEAP32[$Eye$byval_copy6 + 4 >> 2] = HEAP32[$agg$tmp1 + 4 >> 2];
 HEAP32[$Eye$byval_copy6 + 8 >> 2] = HEAP32[$agg$tmp1 + 8 >> 2];
 _HMM_NormalizeVec3($S, $Eye$byval_copy6);
 HEAP32[$F$byval_copy5 >> 2] = HEAP32[$S >> 2];
 HEAP32[$F$byval_copy5 + 4 >> 2] = HEAP32[$S + 4 >> 2];
 HEAP32[$F$byval_copy5 + 8 >> 2] = HEAP32[$S + 8 >> 2];
 HEAP32[$Eye$byval_copy6 >> 2] = HEAP32[$F >> 2];
 HEAP32[$Eye$byval_copy6 + 4 >> 2] = HEAP32[$F + 4 >> 2];
 HEAP32[$Eye$byval_copy6 + 8 >> 2] = HEAP32[$F + 8 >> 2];
 _HMM_Cross($U, $F$byval_copy5, $Eye$byval_copy6);
 HEAPF32[$Result >> 2] = +HEAPF32[$S >> 2];
 HEAPF32[$Result + 4 >> 2] = +HEAPF32[$U >> 2];
 HEAPF32[$Result + 8 >> 2] = -+HEAPF32[$F >> 2];
 HEAPF32[$Result + 12 >> 2] = 0.0;
 HEAPF32[$Result + 16 >> 2] = +HEAPF32[$S + 4 >> 2];
 HEAPF32[$Result + 16 + 4 >> 2] = +HEAPF32[$U + 4 >> 2];
 HEAPF32[$Result + 16 + 8 >> 2] = -+HEAPF32[$F + 4 >> 2];
 HEAPF32[$Result + 16 + 12 >> 2] = 0.0;
 HEAPF32[$Result + 32 >> 2] = +HEAPF32[$S + 8 >> 2];
 HEAPF32[$Result + 32 + 4 >> 2] = +HEAPF32[$U + 8 >> 2];
 HEAPF32[$Result + 32 + 8 >> 2] = -+HEAPF32[$F + 8 >> 2];
 HEAPF32[$Result + 32 + 12 >> 2] = 0.0;
 HEAP32[$F$byval_copy5 >> 2] = HEAP32[$S >> 2];
 HEAP32[$F$byval_copy5 + 4 >> 2] = HEAP32[$S + 4 >> 2];
 HEAP32[$F$byval_copy5 + 8 >> 2] = HEAP32[$S + 8 >> 2];
 HEAP32[$Eye$byval_copy6 >> 2] = HEAP32[$Eye >> 2];
 HEAP32[$Eye$byval_copy6 + 4 >> 2] = HEAP32[$Eye + 4 >> 2];
 HEAP32[$Eye$byval_copy6 + 8 >> 2] = HEAP32[$Eye + 8 >> 2];
 HEAPF32[$Result + 48 >> 2] = -+_HMM_DotVec3($F$byval_copy5, $Eye$byval_copy6);
 HEAP32[$F$byval_copy5 >> 2] = HEAP32[$U >> 2];
 HEAP32[$F$byval_copy5 + 4 >> 2] = HEAP32[$U + 4 >> 2];
 HEAP32[$F$byval_copy5 + 8 >> 2] = HEAP32[$U + 8 >> 2];
 HEAP32[$Eye$byval_copy6 >> 2] = HEAP32[$Eye >> 2];
 HEAP32[$Eye$byval_copy6 + 4 >> 2] = HEAP32[$Eye + 4 >> 2];
 HEAP32[$Eye$byval_copy6 + 8 >> 2] = HEAP32[$Eye + 8 >> 2];
 HEAPF32[$Result + 48 + 4 >> 2] = -+_HMM_DotVec3($F$byval_copy5, $Eye$byval_copy6);
 HEAP32[$F$byval_copy5 >> 2] = HEAP32[$F >> 2];
 HEAP32[$F$byval_copy5 + 4 >> 2] = HEAP32[$F + 4 >> 2];
 HEAP32[$F$byval_copy5 + 8 >> 2] = HEAP32[$F + 8 >> 2];
 HEAP32[$Eye$byval_copy6 >> 2] = HEAP32[$Eye >> 2];
 HEAP32[$Eye$byval_copy6 + 4 >> 2] = HEAP32[$Eye + 4 >> 2];
 HEAP32[$Eye$byval_copy6 + 8 >> 2] = HEAP32[$Eye + 8 >> 2];
 HEAPF32[$Result + 48 + 8 >> 2] = +_HMM_DotVec3($F$byval_copy5, $Eye$byval_copy6);
 HEAPF32[$Result + 48 + 12 >> 2] = 1.0;
 dest = $agg$result;
 src = $Result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $S = 0, $TA = 0, $call19 = 0, $call20 = 0, $call31 = 0, $call40 = 0, $call41 = 0, $call52 = 0, $cmp30 = 0, $cmp51 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $S = sp + 4 | 0;
 $TA = sp;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 76) | 0;
 switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
 case 78:
  {
   $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0;
   break;
  }
 case 90:
  {
   $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0;
   break;
  }
 case 83:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 == 116) label = 13; else {
    $call19 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
    $call20 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call19) | 0;
    HEAP32[$S >> 2] = $call20;
    if (!$call20) $retval$1 = 0; else if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
     $cmp30 = ($State | 0) != 0;
     $call31 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call19, $cmp30) | 0;
     HEAP32[$TA >> 2] = $call31;
     if (!$call31) $retval$0 = 0; else {
      if ($cmp30) HEAP8[$State + 1 >> 0] = 1;
      $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $S, $TA) | 0;
     }
     $retval$1 = $retval$0;
    } else $retval$1 = 0;
    $retval$4 = $retval$1;
   }
   break;
  }
 default:
  label = 13;
 }
 if ((label | 0) == 13) {
  $call40 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call41 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE($call40, $State) | 0;
  HEAP32[$S >> 2] = $call41;
  if (!$call41) $retval$3 = 0; else if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $S);
   $cmp51 = ($State | 0) != 0;
   $call52 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call40, $cmp51) | 0;
   HEAP32[$TA >> 2] = $call52;
   if (!$call52) $retval$2 = 0; else {
    if ($cmp51) HEAP8[$State + 1 >> 0] = 1;
    $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $S, $TA) | 0;
   }
   $retval$3 = $retval$2;
  } else $retval$3 = $call41;
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZN10Delaunator8legalizeEm($this, $a) {
 $this = $this | 0;
 $a = $a | 0;
 var $10 = 0, $12 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $__begin_$i52 = 0, $__begin_$i59 = 0, $__begin_$i65 = 0, $__begin_$i69 = 0, $__end_$i$i$i = 0, $__value_$i$i$i$i = 0, $a$addr$0$ph = 0, $a$addr$0$ph$be$in = 0, $add11 = 0, $add14 = 0, $add2 = 0, $add73 = 0, $arrayidx$i70 = 0, $br = 0, $dec = 0, $dec86 = 0, $e$0 = 0, $hull_start = 0, $i$0 = 0, $i$0$ph = 0, $i$0$ph$be = 0, $m_edge_stack = 0, $mul = 0, $mul22 = 0, $mul29 = 0, $mul36 = 0, $mul43 = 0, $mul8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $br = sp;
 $m_edge_stack = $this + 100 | 0;
 $__end_$i$i$i = $this + 104 | 0;
 HEAP32[$__end_$i$i$i >> 2] = HEAP32[$m_edge_stack >> 2];
 $__begin_$i52 = $this + 16 | 0;
 $__begin_$i59 = $this + 4 | 0;
 $hull_start = $this + 64 | 0;
 $__begin_$i69 = $this + 52 | 0;
 $__begin_$i65 = $this + 28 | 0;
 $__value_$i$i$i$i = $this + 108 | 0;
 $a$addr$0$ph = $a;
 $i$0$ph = 0;
 while (1) {
  $mul = $a$addr$0$ph - (($a$addr$0$ph >>> 0) % 3 | 0) | 0;
  $add2 = $mul + ((($a$addr$0$ph + 2 | 0) >>> 0) % 3 | 0) | 0;
  $add11 = $mul + ((($a$addr$0$ph + 1 | 0) >>> 0) % 3 | 0) | 0;
  $i$0 = $i$0$ph;
  while (1) {
   $3 = HEAP32[(HEAP32[$__begin_$i52 >> 2] | 0) + ($a$addr$0$ph << 2) >> 2] | 0;
   if (($3 | 0) == -1) {
    label = 4;
    break;
   }
   $mul8 = $3 - (($3 >>> 0) % 3 | 0) | 0;
   $add14 = $mul8 + ((($3 + 2 | 0) >>> 0) % 3 | 0) | 0;
   $6 = HEAP32[$__begin_$i59 >> 2] | 0;
   $7 = HEAP32[$6 + ($add2 << 2) >> 2] | 0;
   $10 = HEAP32[$6 + ($add14 << 2) >> 2] | 0;
   $mul22 = $7 << 1;
   $12 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
   $mul29 = HEAP32[$6 + ($a$addr$0$ph << 2) >> 2] << 1;
   $mul36 = HEAP32[$6 + ($add11 << 2) >> 2] << 1;
   $mul43 = $10 << 1;
   if (!(__Z9in_circledddddddd(+HEAPF64[$12 + ($mul22 << 3) >> 3], +HEAPF64[$12 + (($mul22 | 1) << 3) >> 3], +HEAPF64[$12 + ($mul29 << 3) >> 3], +HEAPF64[$12 + (($mul29 | 1) << 3) >> 3], +HEAPF64[$12 + ($mul36 << 3) >> 3], +HEAPF64[$12 + (($mul36 | 1) << 3) >> 3], +HEAPF64[$12 + ($mul43 << 3) >> 3], +HEAPF64[$12 + (($mul43 | 1) << 3) >> 3]) | 0)) {
    label = 18;
    break;
   }
   $21 = HEAP32[$__begin_$i59 >> 2] | 0;
   HEAP32[$21 + ($a$addr$0$ph << 2) >> 2] = $10;
   HEAP32[$21 + ($3 << 2) >> 2] = $7;
   $23 = HEAP32[(HEAP32[$__begin_$i52 >> 2] | 0) + ($add14 << 2) >> 2] | 0;
   L7 : do if (($23 | 0) == -1) {
    $24 = HEAP32[$hull_start >> 2] | 0;
    $25 = HEAP32[$__begin_$i69 >> 2] | 0;
    $e$0 = $24;
    while (1) {
     $arrayidx$i70 = $25 + ($e$0 << 2) | 0;
     if ((HEAP32[$arrayidx$i70 >> 2] | 0) == ($add14 | 0)) break;
     $e$0 = HEAP32[(HEAP32[$__begin_$i65 >> 2] | 0) + ($e$0 << 2) >> 2] | 0;
     if (($e$0 | 0) == ($24 | 0)) break L7;
    }
    HEAP32[$arrayidx$i70 >> 2] = $a$addr$0$ph;
   } while (0);
   __ZN10Delaunator4linkEmm($this, $a$addr$0$ph, $23);
   __ZN10Delaunator4linkEmm($this, $3, HEAP32[(HEAP32[$__begin_$i52 >> 2] | 0) + ($add2 << 2) >> 2] | 0);
   __ZN10Delaunator4linkEmm($this, $add2, $add14);
   $add73 = $mul8 + ((($3 + 1 | 0) >>> 0) % 3 | 0) | 0;
   HEAP32[$br >> 2] = $add73;
   $31 = HEAP32[$__end_$i$i$i >> 2] | 0;
   $32 = HEAP32[$m_edge_stack >> 2] | 0;
   $33 = $31;
   do if ($i$0 >>> 0 < $31 - $32 >> 2 >>> 0) HEAP32[$32 + ($i$0 << 2) >> 2] = $add73; else if ((HEAP32[$__value_$i$i$i$i >> 2] | 0) == ($33 | 0)) {
    __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($m_edge_stack, $br);
    break;
   } else {
    HEAP32[$33 >> 2] = $add73;
    HEAP32[$__end_$i$i$i >> 2] = $33 + 4;
    break;
   } while (0);
   $i$0 = $i$0 + 1 | 0;
  }
  if ((label | 0) == 4) {
   label = 0;
   $dec = $i$0 + -1 | 0;
   if (!$i$0) break;
   $a$addr$0$ph$be$in = (HEAP32[$m_edge_stack >> 2] | 0) + ($dec << 2) | 0;
   $i$0$ph$be = $dec;
  } else if ((label | 0) == 18) {
   label = 0;
   $dec86 = $i$0 + -1 | 0;
   if (!$i$0) break;
   $a$addr$0$ph$be$in = (HEAP32[$m_edge_stack >> 2] | 0) + ($dec86 << 2) | 0;
   $i$0$ph$be = $dec86;
  }
  $a$addr$0$ph = HEAP32[$a$addr$0$ph$be$in >> 2] | 0;
  $i$0$ph = $i$0$ph$be;
 }
 STACKTOP = sp;
 return $add2 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $$pre$phiZ2D = 0, $Names = 0, $Result$1 = 0, $Result$113 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call16 = 0, $call17 = 0, $call18 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
 do if ($call << 24 >> 24 == 85) {
  $Result$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  label = 12;
 } else {
  if (($call + -49 & 255) < 9) {
   $Result$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   label = 12;
   break;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55387);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0)) {
   $Result$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0;
   label = 12;
   break;
  }
  $Names = $this + 8 | 0;
  $call16 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
  while (1) {
   $call17 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
   $call18 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call17) | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = $call18;
   if (!$call18) {
    label = 10;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $agg$tmp$byval_copy);
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
    label = 9;
    break;
   }
  }
  if ((label | 0) == 9) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$tmp$byval_copy, $this, $call16);
   $$pre$phiZ2D = $call17;
   $Result$113 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp$byval_copy) | 0;
   label = 14;
   break;
  } else if ((label | 0) == 10) {
   $retval$2 = 0;
   break;
  }
 } while (0);
 if ((label | 0) == 12) if (!$Result$1) $retval$2 = 0; else {
  $$pre$phiZ2D = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $Result$113 = $Result$1;
  label = 14;
 }
 if ((label | 0) == 14) $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($$pre$phiZ2D, $Result$113) | 0;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __sg_destroy_all_resources($p, $ctx_id) {
 $p = $p | 0;
 $ctx_id = $ctx_id | 0;
 var $ctx_id$addr = 0, $i = 0, $i13 = 0, $i39 = 0, $i65 = 0, $i91 = 0, $p$addr = 0, $state = 0, $state101 = 0, $state23 = 0, $state49 = 0, $state75 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $p$addr = sp + 44 | 0;
 $ctx_id$addr = sp + 40 | 0;
 $i = sp + 36 | 0;
 $state = sp + 32 | 0;
 $i13 = sp + 28 | 0;
 $state23 = sp + 24 | 0;
 $i39 = sp + 20 | 0;
 $state49 = sp + 16 | 0;
 $i65 = sp + 12 | 0;
 $state75 = sp + 8 | 0;
 $i91 = sp + 4 | 0;
 $state101 = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$ctx_id$addr >> 2] = $ctx_id;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 96 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 60 | 0) + 4 >> 2] | 0) == (HEAP32[$ctx_id$addr >> 2] | 0)) {
   HEAP32[$state >> 2] = HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 96 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 60 | 0) + 8 >> 2];
   if ((HEAP32[$state >> 2] | 0) == 2 | (HEAP32[$state >> 2] | 0) == 3) __sg_destroy_buffer((HEAP32[(HEAP32[$p$addr >> 2] | 0) + 96 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 60 | 0) | 0);
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i13 >> 2] = 1;
 while (1) {
  if ((HEAP32[$i13 >> 2] | 0) >= (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 16 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 100 >> 2] | 0) + ((HEAP32[$i13 >> 2] | 0) * 112 | 0) + 4 >> 2] | 0) == (HEAP32[$ctx_id$addr >> 2] | 0)) {
   HEAP32[$state23 >> 2] = HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 100 >> 2] | 0) + ((HEAP32[$i13 >> 2] | 0) * 112 | 0) + 8 >> 2];
   if ((HEAP32[$state23 >> 2] | 0) == 2 | (HEAP32[$state23 >> 2] | 0) == 3) __sg_destroy_image((HEAP32[(HEAP32[$p$addr >> 2] | 0) + 100 >> 2] | 0) + ((HEAP32[$i13 >> 2] | 0) * 112 | 0) | 0);
  }
  HEAP32[$i13 >> 2] = (HEAP32[$i13 >> 2] | 0) + 1;
 }
 HEAP32[$i39 >> 2] = 1;
 while (1) {
  if ((HEAP32[$i39 >> 2] | 0) >= (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 32 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 104 >> 2] | 0) + ((HEAP32[$i39 >> 2] | 0) * 2176 | 0) + 4 >> 2] | 0) == (HEAP32[$ctx_id$addr >> 2] | 0)) {
   HEAP32[$state49 >> 2] = HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 104 >> 2] | 0) + ((HEAP32[$i39 >> 2] | 0) * 2176 | 0) + 8 >> 2];
   if ((HEAP32[$state49 >> 2] | 0) == 2 | (HEAP32[$state49 >> 2] | 0) == 3) __sg_destroy_shader((HEAP32[(HEAP32[$p$addr >> 2] | 0) + 104 >> 2] | 0) + ((HEAP32[$i39 >> 2] | 0) * 2176 | 0) | 0);
  }
  HEAP32[$i39 >> 2] = (HEAP32[$i39 >> 2] | 0) + 1;
 }
 HEAP32[$i65 >> 2] = 1;
 while (1) {
  if ((HEAP32[$i65 >> 2] | 0) >= (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 48 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 108 >> 2] | 0) + ((HEAP32[$i65 >> 2] | 0) * 472 | 0) + 4 >> 2] | 0) == (HEAP32[$ctx_id$addr >> 2] | 0)) {
   HEAP32[$state75 >> 2] = HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 108 >> 2] | 0) + ((HEAP32[$i65 >> 2] | 0) * 472 | 0) + 8 >> 2];
   if ((HEAP32[$state75 >> 2] | 0) == 2 | (HEAP32[$state75 >> 2] | 0) == 3) __sg_destroy_pipeline((HEAP32[(HEAP32[$p$addr >> 2] | 0) + 108 >> 2] | 0) + ((HEAP32[$i65 >> 2] | 0) * 472 | 0) | 0);
  }
  HEAP32[$i65 >> 2] = (HEAP32[$i65 >> 2] | 0) + 1;
 }
 HEAP32[$i91 >> 2] = 1;
 while (1) {
  if ((HEAP32[$i91 >> 2] | 0) >= (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 64 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 112 >> 2] | 0) + ((HEAP32[$i91 >> 2] | 0) * 120 | 0) + 4 >> 2] | 0) == (HEAP32[$ctx_id$addr >> 2] | 0)) {
   HEAP32[$state101 >> 2] = HEAP32[(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 112 >> 2] | 0) + ((HEAP32[$i91 >> 2] | 0) * 120 | 0) + 8 >> 2];
   if ((HEAP32[$state101 >> 2] | 0) == 2 | (HEAP32[$state101 >> 2] | 0) == 3) __sg_destroy_pass((HEAP32[(HEAP32[$p$addr >> 2] | 0) + 112 >> 2] | 0) + ((HEAP32[$i91 >> 2] | 0) * 120 | 0) | 0);
  }
  HEAP32[$i91 >> 2] = (HEAP32[$i91 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($this) {
 $this = $this | 0;
 var $Arg10 = 0, $Names = 0, $call12 = 0, $call29 = 0, $call3 = 0, $call32 = 0, $call4 = 0, $call8 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Arg10 = sp;
 L1 : do switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 | 0) {
 case 88:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   if (!$call3) $retval$5 = 0; else {
    $call4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0;
    STACKTOP = sp;
    return ($call4 ? $call3 : 0) | 0;
   }
   break;
  }
 case 74:
  {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $Names = $this + 8 | 0;
   $call8 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     label = 9;
     break;
    }
    $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$Arg10 >> 2] = $call12;
    if (!$call12) {
     label = 8;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $Arg10);
   }
   if ((label | 0) == 8) {
    $retval$5 = 0;
    break L1;
   } else if ((label | 0) == 9) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Arg10, $this, $call8);
    $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $Arg10) | 0;
    break L1;
   }
   break;
  }
 case 76:
  {
   if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0) << 24 >> 24 != 90) {
    $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    break L1;
   }
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
   $call29 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   if (!$call29) $retval$5 = 0; else {
    $call32 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0;
    $retval$5 = $call32 ? $call29 : 0;
   }
   break;
  }
 default:
  $retval$5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
 } while (0);
 STACKTOP = sp;
 return $retval$5 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $$pre$phiZ2D = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $29 = 0, $3 = 0, $34 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $Init19 = 0, $OperatorName = 0, $OperatorName15 = 0, $PrintPack = 0, $agg$tmp = 0, $agg$tmp14 = 0, $agg$tmp17 = 0, $agg$tmp23 = 0, $agg$tmp7 = 0, $agg$tmp9 = 0, $tmpcast17$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $tmpcast17$byval_copy = sp + 56 | 0;
 $PrintPack = sp + 40 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp7 = sp + 48 | 0;
 $agg$tmp9 = sp + 16 | 0;
 $agg$tmp14 = sp + 8 | 0;
 $agg$tmp17 = sp + 32 | 0;
 $agg$tmp23 = sp;
 HEAP32[$PrintPack >> 2] = $S;
 HEAP32[$PrintPack + 4 >> 2] = $this;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 40);
 if (!(HEAP8[$this + 24 >> 0] | 0)) {
  __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($PrintPack);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
  $OperatorName15 = $this + 16 | 0;
  $23 = $OperatorName15;
  $28 = HEAP32[$23 + 4 >> 2] | 0;
  $29 = $agg$tmp14;
  HEAP32[$29 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$29 + 4 >> 2] = $28;
  HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp14 >> 2];
  HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp14 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 55069);
  HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2];
  HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp17 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
  $Init19 = $this + 12 | 0;
  if (HEAP32[$Init19 >> 2] | 0) {
   __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
   $34 = $OperatorName15;
   $39 = HEAP32[$34 + 4 >> 2] | 0;
   $40 = $agg$tmp23;
   HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$40 + 4 >> 2] = $39;
   HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
   HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp23 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$Init19 >> 2] | 0, $S);
  }
 } else {
  $2 = HEAP32[$this + 12 >> 2] | 0;
  if (!$2) $$pre$phiZ2D = $this + 16 | 0; else {
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2, $S);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
   $OperatorName = $this + 16 | 0;
   $3 = $OperatorName;
   $8 = HEAP32[$3 + 4 >> 2] | 0;
   $9 = $agg$tmp;
   HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$9 + 4 >> 2] = $8;
   HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
   $$pre$phiZ2D = $OperatorName;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 55064);
  HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
  $13 = $$pre$phiZ2D;
  $18 = HEAP32[$13 + 4 >> 2] | 0;
  $19 = $agg$tmp9;
  HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$19 + 4 >> 2] = $18;
  HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
  HEAP32[$tmpcast17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast17$byval_copy);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
  __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($PrintPack);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 41);
 STACKTOP = sp;
 return;
}

function __sg_gl_update_image($img, $data) {
 $img = $img | 0;
 $data = $data | 0;
 var $active_slot = 0, $data$addr = 0, $data_ptr = 0, $face_index = 0, $gl_img_format = 0, $gl_img_target = 0, $gl_img_type = 0, $img$addr = 0, $inc = 0, $mip_height = 0, $mip_index = 0, $mip_width = 0, $num_faces = 0, $num_mips = 0, $shr = 0, $shr49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $img$addr = sp + 44 | 0;
 $data$addr = sp + 40 | 0;
 $gl_img_format = sp + 36 | 0;
 $gl_img_type = sp + 32 | 0;
 $num_faces = sp + 28 | 0;
 $num_mips = sp + 24 | 0;
 $face_index = sp + 20 | 0;
 $mip_index = sp + 16 | 0;
 $gl_img_target = sp + 12 | 0;
 $data_ptr = sp + 8 | 0;
 $mip_width = sp + 4 | 0;
 $mip_height = sp;
 HEAP32[$img$addr >> 2] = $img;
 HEAP32[$data$addr >> 2] = $data;
 if (!((HEAP32[$img$addr >> 2] | 0) != 0 & (HEAP32[$data$addr >> 2] | 0) != 0)) ___assert_fail(41198, 21600, 6984, 41261);
 $active_slot = (HEAP32[$img$addr >> 2] | 0) + 12 + 72 | 0;
 $inc = (HEAP32[$active_slot >> 2] | 0) + 1 | 0;
 HEAP32[$active_slot >> 2] = $inc;
 if (($inc | 0) >= (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 68 >> 2] | 0)) HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 72 >> 2] = 0;
 if ((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 72 >> 2] | 0) >= 2) ___assert_fail(41281, 21600, 6989, 41261);
 if (!(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 + 12 + (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 72 >> 2] << 2) >> 2] | 0)) ___assert_fail(41327, 21600, 6990, 41261);
 __sg_gl_cache_store_texture_binding(0);
 __sg_gl_cache_bind_texture(0, HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2] | 0, HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 + 12 + (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 72 >> 2] << 2) >> 2] | 0);
 HEAP32[$gl_img_format >> 2] = __sg_gl_teximage_format(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
 HEAP32[$gl_img_type >> 2] = __sg_gl_teximage_type(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0;
 HEAP32[$num_faces >> 2] = (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0) == 2 ? 6 : 1;
 HEAP32[$num_mips >> 2] = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 20 >> 2];
 HEAP32[$face_index >> 2] = 0;
 while (1) {
  if ((HEAP32[$face_index >> 2] | 0) >= (HEAP32[$num_faces >> 2] | 0)) break;
  HEAP32[$mip_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$mip_index >> 2] | 0) >= (HEAP32[$num_mips >> 2] | 0)) break;
   HEAP32[$gl_img_target >> 2] = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 >> 2];
   if (2 == (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0)) HEAP32[$gl_img_target >> 2] = __sg_gl_cubeface_target(HEAP32[$face_index >> 2] | 0) | 0;
   HEAP32[$data_ptr >> 2] = HEAP32[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$face_index >> 2] << 7) + (HEAP32[$mip_index >> 2] << 3) >> 2];
   $shr = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 8 >> 2] >> HEAP32[$mip_index >> 2];
   HEAP32[$mip_width >> 2] = $shr;
   HEAP32[$mip_width >> 2] = (HEAP32[$mip_width >> 2] | 0) == 0 ? 1 : $shr;
   $shr49 = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 12 >> 2] >> HEAP32[$mip_index >> 2];
   HEAP32[$mip_height >> 2] = $shr49;
   HEAP32[$mip_height >> 2] = (HEAP32[$mip_height >> 2] | 0) == 0 ? 1 : $shr49;
   if (1 == (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0)) label = 17; else if (2 == (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0)) label = 17;
   if ((label | 0) == 17) {
    label = 0;
    _glTexSubImage2D(HEAP32[$gl_img_target >> 2] | 0, HEAP32[$mip_index >> 2] | 0, 0, 0, HEAP32[$mip_width >> 2] | 0, HEAP32[$mip_height >> 2] | 0, HEAP32[$gl_img_format >> 2] | 0, HEAP32[$gl_img_type >> 2] | 0, HEAP32[$data_ptr >> 2] | 0);
   }
   HEAP32[$mip_index >> 2] = (HEAP32[$mip_index >> 2] | 0) + 1;
  }
  HEAP32[$face_index >> 2] = (HEAP32[$face_index >> 2] | 0) + 1;
 }
 __sg_gl_cache_restore_texture_binding(0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($this, $TagTemplates) {
 $this = $this | 0;
 $TagTemplates = $TagTemplates | 0;
 var $Arg = 0, $Names = 0, $OldParams = 0, $TableEntry = 0, $TemplateParams = 0, $call12 = 0, $call4 = 0, $call44 = 0, $ref$tmp = 0, $retval$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $OldParams = sp + 16 | 0;
 $Arg = sp + 12 | 0;
 $TableEntry = sp + 8 | 0;
 $ref$tmp = sp;
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 73) | 0) {
  $TemplateParams = $this + 288 | 0;
  if ($TagTemplates) __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($TemplateParams);
  $Names = $this + 8 | 0;
  $call4 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
  while (1) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
    label = 16;
    break;
   }
   if ($TagTemplates) {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_($OldParams, $TemplateParams);
    $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$Arg >> 2] = $call12;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_($TemplateParams, $OldParams);
    if (!$call12) {
     label = 12;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $Arg);
    HEAP32[$TableEntry >> 2] = $call12;
    if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call12) | 0) << 24 >> 24 == 28) {
     __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv($ref$tmp, $call12);
     HEAP32[$TableEntry >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $ref$tmp) | 0;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_($TemplateParams, $TableEntry);
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($OldParams);
   } else {
    $call44 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
    HEAP32[$OldParams >> 2] = $call44;
    if (!$call44) {
     label = 15;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $OldParams);
   }
  }
  if ((label | 0) == 12) {
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($OldParams);
   $retval$6 = 0;
   break;
  } else if ((label | 0) == 15) {
   $retval$6 = 0;
   break;
  } else if ((label | 0) == 16) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($OldParams, $this, $call4);
   $retval$6 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $OldParams) | 0;
   break;
  }
 } else $retval$6 = 0; while (0);
 STACKTOP = sp;
 return $retval$6 | 0;
}

function __ZL10load_imagePhi($buffer_ptr, $fetched_size) {
 $buffer_ptr = $buffer_ptr | 0;
 $fetched_size = $fetched_size | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $__cntrl_3$i$i = 0, $agg$tmp = 0, $agg$tmp68 = 0, $agg$tmp71 = 0, $agg$tmp71$byval_copy = 0, $bitmap = 0, $call = 0, $call2 = 0, $conv$i = 0.0, $png_height = 0, $png_width = 0, $pow2$0 = 0, $ref$tmp17 = 0, $ref$tmp18 = 0, $square = 0, $x$0 = 0, $y$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 $agg$tmp71$byval_copy = sp + 968 | 0;
 $png_width = sp + 960 | 0;
 $png_height = sp + 956 | 0;
 $bitmap = sp + 924 | 0;
 $square = sp + 892 | 0;
 $agg$tmp = sp + 976 | 0;
 $ref$tmp17 = sp + 4 | 0;
 $ref$tmp18 = sp;
 $agg$tmp68 = sp + 920 | 0;
 $agg$tmp71 = sp + 888 | 0;
 $call = _stbi_load_from_memory($buffer_ptr, $fetched_size, $png_width, $png_height, sp + 952 | 0, 4) | 0;
 if ($call | 0) {
  $0 = HEAP32[$png_width >> 2] | 0;
  $1 = HEAP32[$png_height >> 2] | 0;
  HEAP32[$agg$tmp71$byval_copy >> 2] = Math_imul($0 << 2, $1) | 0;
  __ZN8DrBitmapC2EPKhRKibii($bitmap, $call, $agg$tmp71$byval_copy, 0, $0, $1);
  $call2 = __ZN2Dr3MaxIiEET_RKS1_S3_($png_width, $png_height) | 0;
  $pow2$0 = 2;
  while (1) {
   if (($pow2$0 | 0) >= ($call2 | 0)) break;
   $conv$i = +($pow2$0 | 0);
   $pow2$0 = ~~($conv$i * $conv$i);
  }
  __ZN8DrBitmapC2Eii13Bitmap_Format($square, $pow2$0, $pow2$0, 4);
  $x$0 = 0;
  while (1) {
   if (($x$0 | 0) >= (HEAP32[$png_width >> 2] | 0)) break;
   $y$0 = 0;
   while (1) {
    if (($y$0 | 0) >= (HEAP32[$png_height >> 2] | 0)) break;
    __ZNK8DrBitmap8getPixelEii($agg$tmp, $bitmap, $x$0, $y$0);
    HEAP8[$agg$tmp71$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
    HEAP8[$agg$tmp71$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
    HEAP8[$agg$tmp71$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
    HEAP8[$agg$tmp71$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
    __ZN8DrBitmap8setPixelEii7DrColor($square, $x$0, $y$0, $agg$tmp71$byval_copy);
    $y$0 = $y$0 + 1 | 0;
   }
   $x$0 = $x$0 + 1 | 0;
  }
  HEAPF32[$ref$tmp18 >> 2] = .25;
  __ZNSt3__210shared_ptrI7DrImageE11make_sharedIJRA7_KcR8DrBitmapfEEES2_DpOT_($ref$tmp17, 45495, $square, $ref$tmp18);
  $3 = HEAP32[$ref$tmp17 >> 2] | 0;
  $__cntrl_3$i$i = $ref$tmp17 + 4 | 0;
  $4 = HEAP32[$__cntrl_3$i$i >> 2] | 0;
  HEAP32[$ref$tmp17 >> 2] = 0;
  HEAP32[$__cntrl_3$i$i >> 2] = 0;
  HEAP32[$agg$tmp71$byval_copy >> 2] = HEAP32[546687];
  HEAP32[546687] = $3;
  HEAP32[$agg$tmp71$byval_copy + 4 >> 2] = HEAP32[546688];
  HEAP32[546688] = $4;
  __ZNSt3__210shared_ptrI7DrImageED2Ev($agg$tmp71$byval_copy);
  __ZNSt3__210shared_ptrI7DrImageED2Ev($ref$tmp17);
  __Z13calculateMeshb(1);
  _memset($ref$tmp17 | 0, 0, 884) | 0;
  HEAP32[$ref$tmp17 + 12 >> 2] = HEAP32[(__ZNK7DrImage9getBitmapEv(HEAP32[546687] | 0) | 0) + 8 >> 2];
  HEAP32[$ref$tmp17 + 16 >> 2] = HEAP32[(__ZNK7DrImage9getBitmapEv(HEAP32[546687] | 0) | 0) + 12 >> 2];
  HEAP32[$ref$tmp17 + 32 >> 2] = 23;
  HEAP32[$ref$tmp17 + 40 >> 2] = 2;
  HEAP32[$ref$tmp17 + 44 >> 2] = 2;
  HEAP32[$ref$tmp17 + 76 >> 2] = HEAP32[(__ZNK7DrImage9getBitmapEv(HEAP32[546687] | 0) | 0) + 16 >> 2];
  HEAP32[$ref$tmp17 + 80 >> 2] = __ZNK8DrBitmap4sizeEv(__ZNK7DrImage9getBitmapEv(HEAP32[546687] | 0) | 0) | 0;
  if (HEAP8[2193732] | 0) {
   HEAP32[$agg$tmp68 >> 2] = HEAP32[15518];
   HEAP32[$agg$tmp71$byval_copy >> 2] = HEAP32[$agg$tmp68 >> 2];
   _sg_uninit_image($agg$tmp71$byval_copy) | 0;
  }
  HEAP32[$agg$tmp71 >> 2] = HEAP32[15518];
  HEAP32[$agg$tmp71$byval_copy >> 2] = HEAP32[$agg$tmp71 >> 2];
  _sg_init_image($agg$tmp71$byval_copy, $ref$tmp17);
  HEAP8[2193732] = 1;
  _stbi_image_free($call);
  __ZN8DrBitmapD2Ev($square);
  __ZN8DrBitmapD2Ev($bitmap);
 }
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__flags = 0, $add$ptr = 0, $found_any_static_type$0 = 0, $found_any_static_type$1$off0$in = 0, $found_any_static_type5 = 0, $found_our_static_ptr$0 = 0, $found_our_static_ptr$1$off0$in = 0, $found_our_static_ptr2 = 0, $or2438 = 0, $or37 = 0, $or5850 = 0, $or6651 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $found_our_static_ptr2 = $info + 52 | 0;
  $1 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $found_any_static_type5 = $info + 53 | 0;
  $2 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $3 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($3 << 3) | 0;
  HEAP8[$found_our_static_ptr2 >> 0] = 0;
  HEAP8[$found_any_static_type5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  $4 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $or37 = $4 | $1;
  $5 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $or2438 = $5 | $2;
  L4 : do if (($3 | 0) > 1) {
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $__flags = $this + 8 | 0;
   $search_done = $info + 54 | 0;
   $12 = $5;
   $9 = $4;
   $found_any_static_type$0 = $or2438;
   $found_our_static_ptr$0 = $or37;
   $p$0 = $this + 24 | 0;
   while (1) {
    $7 = $found_any_static_type$0 & 1;
    $8 = $found_our_static_ptr$0 & 1;
    if (HEAP8[$search_done >> 0] | 0) {
     $found_any_static_type$1$off0$in = $7;
     $found_our_static_ptr$1$off0$in = $8;
     break L4;
    }
    if (!($9 << 24 >> 24)) {
     if ($12 << 24 >> 24) if (!(HEAP32[$__flags >> 2] & 1)) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    } else {
     if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
     if (!(HEAP32[$__flags >> 2] & 2)) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    }
    HEAP8[$found_our_static_ptr2 >> 0] = 0;
    HEAP8[$found_any_static_type5 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $9 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
    $or5850 = $9 | $8;
    $12 = HEAP8[$found_any_static_type5 >> 0] | 0;
    $or6651 = $12 | $7;
    $p$0 = $p$0 + 8 | 0;
    if ($p$0 >>> 0 >= $add$ptr >>> 0) {
     $found_any_static_type$1$off0$in = $or6651;
     $found_our_static_ptr$1$off0$in = $or5850;
     break;
    } else {
     $found_any_static_type$0 = $or6651;
     $found_our_static_ptr$0 = $or5850;
    }
   }
  } else {
   $found_any_static_type$1$off0$in = $or2438;
   $found_our_static_ptr$1$off0$in = $or37;
  } while (0);
  HEAP8[$found_our_static_ptr2 >> 0] = $found_our_static_ptr$1$off0$in << 24 >> 24 != 0 & 1;
  HEAP8[$found_any_static_type5 >> 0] = $found_any_static_type$1$off0$in << 24 >> 24 != 0 & 1;
 }
 return;
}

function _fons__atlasAddSkylineLevel($atlas, $idx, $x, $y, $w, $h) {
 $atlas = $atlas | 0;
 $idx = $idx | 0;
 $x = $x | 0;
 $y = $y | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $75 = 0, $arrayidx35 = 0, $atlas$addr = 0, $h$addr = 0, $i = 0, $idx$addr = 0, $retval = 0, $shrink = 0, $w$addr = 0, $width44 = 0, $width83 = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 32 | 0;
 $atlas$addr = sp + 28 | 0;
 $idx$addr = sp + 24 | 0;
 $x$addr = sp + 20 | 0;
 $y$addr = sp + 16 | 0;
 $w$addr = sp + 12 | 0;
 $h$addr = sp + 8 | 0;
 $i = sp + 4 | 0;
 $shrink = sp;
 HEAP32[$atlas$addr >> 2] = $atlas;
 HEAP32[$idx$addr >> 2] = $idx;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 if (!(_fons__atlasInsertNode(HEAP32[$atlas$addr >> 2] | 0, HEAP32[$idx$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, (HEAP32[$y$addr >> 2] | 0) + (HEAP32[$h$addr >> 2] | 0) | 0, HEAP32[$w$addr >> 2] | 0) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $75 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 HEAP32[$i >> 2] = (HEAP32[$idx$addr >> 2] | 0) + 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 12 >> 2] | 0)) break;
  if ((HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) >> 1] | 0) >= ((HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$i >> 2] | 0) - 1 | 0) * 6 | 0) >> 1] | 0) + (HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$i >> 2] | 0) - 1 | 0) * 6 | 0) + 4 >> 1] | 0) | 0)) break;
  HEAP32[$shrink >> 2] = (HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$i >> 2] | 0) - 1 | 0) * 6 | 0) >> 1] | 0) + (HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$i >> 2] | 0) - 1 | 0) * 6 | 0) + 4 >> 1] | 0) - (HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) >> 1] | 0);
  $arrayidx35 = (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) | 0;
  HEAP16[$arrayidx35 >> 1] = (HEAP16[$arrayidx35 >> 1] | 0) + ((HEAP32[$shrink >> 2] & 65535) << 16 >> 16);
  $width44 = (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) + 4 | 0;
  HEAP16[$width44 >> 1] = (HEAP16[$width44 >> 1] | 0) - ((HEAP32[$shrink >> 2] & 65535) << 16 >> 16);
  if ((HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) + 4 >> 1] | 0) > 0) break;
  _fons__atlasRemoveNode(HEAP32[$atlas$addr >> 2] | 0, HEAP32[$i >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= ((HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 12 >> 2] | 0) - 1 | 0)) break;
  if ((HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) + 2 >> 1] | 0) == (HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$i >> 2] | 0) + 1 | 0) * 6 | 0) + 2 >> 1] | 0)) {
   $width83 = (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) + 4 | 0;
   HEAP16[$width83 >> 1] = (HEAP16[$width83 >> 1] | 0) + (HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$i >> 2] | 0) + 1 | 0) * 6 | 0) + 4 >> 1] | 0);
   _fons__atlasRemoveNode(HEAP32[$atlas$addr >> 2] | 0, (HEAP32[$i >> 2] | 0) + 1 | 0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$retval >> 2] = 1;
 $75 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $75 | 0;
}

function __sfons_render_create($user_ptr, $width, $height) {
 $user_ptr = $user_ptr | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $10 = 0, $coerce = 0, $coerce59 = 0, $coerce83 = 0, $height$addr = 0, $img65$byval_copy = 0, $img81 = 0, $img_desc = 0, $pip57 = 0, $pip_desc = 0, $sfons = 0, $shd_desc = 0, $ub = 0, $user_ptr$addr = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3584 | 0;
 $img65$byval_copy = sp + 3572 | 0;
 $user_ptr$addr = sp + 3568 | 0;
 $width$addr = sp + 3564 | 0;
 $height$addr = sp + 3560 | 0;
 $sfons = sp + 3556 | 0;
 $shd_desc = sp + 1456 | 0;
 $ub = sp + 1452 | 0;
 $coerce = sp + 1448 | 0;
 $pip_desc = sp + 892 | 0;
 $coerce59 = sp + 888 | 0;
 $img_desc = sp + 4 | 0;
 $coerce83 = sp;
 HEAP32[$user_ptr$addr >> 2] = $user_ptr;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 if (!((HEAP32[$user_ptr$addr >> 2] | 0) != 0 & (HEAP32[$width$addr >> 2] | 0) > 8 & (HEAP32[$height$addr >> 2] | 0) > 8)) ___assert_fail(45e3, 28414, 1591, 45040);
 HEAP32[$sfons >> 2] = HEAP32[$user_ptr$addr >> 2];
 if (!(HEAP32[HEAP32[$sfons >> 2] >> 2] | 0)) {
  _memset($shd_desc | 0, 0, 2100) | 0;
  HEAP32[$shd_desc + 4 >> 2] = 23601;
  HEAP32[$shd_desc + 4 + 12 >> 2] = 45589;
  HEAP32[$shd_desc + 4 + 24 >> 2] = 23610;
  HEAP32[$shd_desc + 4 + 4 >> 2] = 23617;
  HEAP32[$shd_desc + 4 + 8 >> 2] = 0;
  HEAP32[$shd_desc + 4 + 12 + 4 >> 2] = 23617;
  HEAP32[$shd_desc + 4 + 12 + 8 >> 2] = 1;
  HEAP32[$shd_desc + 4 + 24 + 4 >> 2] = 23617;
  HEAP32[$shd_desc + 4 + 24 + 8 >> 2] = 2;
  HEAP32[$ub >> 2] = $shd_desc + 196 + 20;
  HEAP32[HEAP32[$ub >> 2] >> 2] = 128;
  HEAP32[(HEAP32[$ub >> 2] | 0) + 4 >> 2] = 45609;
  HEAP32[(HEAP32[$ub >> 2] | 0) + 4 + 4 >> 2] = 4;
  HEAP32[(HEAP32[$ub >> 2] | 0) + 4 + 8 >> 2] = 8;
  HEAP32[$shd_desc + 1144 + 804 >> 2] = 45629;
  HEAP32[$shd_desc + 1144 + 804 + 4 >> 2] = 1;
  HEAP32[$shd_desc + 1144 + 804 + 8 >> 2] = 1;
  HEAP32[$shd_desc + 2092 >> 2] = 45061;
  HEAP32[$shd_desc + 196 >> 2] = 1024;
  HEAP32[$shd_desc + 1144 >> 2] = 1408;
  HEAP32[$shd_desc + 2092 >> 2] = 45084;
  $10 = HEAP32[$sfons >> 2] | 0;
  HEAP32[$coerce >> 2] = _sg_make_shader($shd_desc) | 0;
  HEAP32[$10 >> 2] = HEAP32[$coerce >> 2];
 }
 if (!(HEAP32[(HEAP32[$sfons >> 2] | 0) + 4 >> 2] | 0)) {
  _memset($pip_desc | 0, 0, 556) | 0;
  HEAP32[$pip_desc + 4 >> 2] = HEAP32[HEAP32[$sfons >> 2] >> 2];
  HEAP8[$pip_desc + 364 + 8 >> 0] = 1;
  HEAP32[$pip_desc + 364 + 8 + 4 >> 2] = 5;
  HEAP32[$pip_desc + 364 + 8 + 8 >> 2] = 6;
  $pip57 = (HEAP32[$sfons >> 2] | 0) + 4 | 0;
  HEAP32[$coerce59 >> 2] = _sgl_make_pipeline($pip_desc) | 0;
  HEAP32[$pip57 >> 2] = HEAP32[$coerce59 >> 2];
 }
 if (HEAP32[(HEAP32[$sfons >> 2] | 0) + 8 >> 2] | 0) {
  HEAP32[$img65$byval_copy >> 2] = HEAP32[(HEAP32[$sfons >> 2] | 0) + 8 >> 2];
  _sg_destroy_image($img65$byval_copy);
  HEAP32[(HEAP32[$sfons >> 2] | 0) + 8 >> 2] = 0;
 }
 HEAP32[(HEAP32[$sfons >> 2] | 0) + 12 >> 2] = HEAP32[$width$addr >> 2];
 HEAP32[(HEAP32[$sfons >> 2] | 0) + 16 >> 2] = HEAP32[$height$addr >> 2];
 if (!(HEAP32[(HEAP32[$sfons >> 2] | 0) + 8 >> 2] | 0)) {
  _memset($img_desc | 0, 0, 884) | 0;
  HEAP32[$img_desc + 12 >> 2] = HEAP32[(HEAP32[$sfons >> 2] | 0) + 12 >> 2];
  HEAP32[$img_desc + 16 >> 2] = HEAP32[(HEAP32[$sfons >> 2] | 0) + 16 >> 2];
  HEAP32[$img_desc + 40 >> 2] = 2;
  HEAP32[$img_desc + 44 >> 2] = 2;
  HEAP32[$img_desc + 28 >> 2] = 2;
  HEAP32[$img_desc + 32 >> 2] = 2;
  $img81 = (HEAP32[$sfons >> 2] | 0) + 8 | 0;
  HEAP32[$coerce83 >> 2] = _sg_make_image($img_desc) | 0;
  HEAP32[$img81 >> 2] = HEAP32[$coerce83 >> 2];
  STACKTOP = sp;
  return 1;
 } else ___assert_fail(45097, 28414, 1674, 45040);
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $Encoding = 0, $StringLitName = 0, $call2 = 0, $call22 = 0, $call3 = 0, $call30 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Encoding = sp + 8 | 0;
 $StringLitName = sp;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 90) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call2) | 0;
  HEAP32[$Encoding >> 2] = $call3;
  do if (!$call3) $retval$3 = 0; else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 115) | 0) {
    HEAP32[$this >> 2] = __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_(HEAP32[$this >> 2] | 0, HEAP32[$this + 4 >> 2] | 0) | 0;
    HEAP32[$StringLitName >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, 55583) | 0;
    $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Encoding, $StringLitName) | 0;
    break;
   }
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 100) | 0)) {
    $call30 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call2, $State) | 0;
    HEAP32[$StringLitName >> 2] = $call30;
    if (!$call30) $retval$2 = 0; else {
     HEAP32[$this >> 2] = __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_(HEAP32[$this >> 2] | 0, HEAP32[$this + 4 >> 2] | 0) | 0;
     $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Encoding, $StringLitName) | 0;
    }
    $retval$3 = $retval$2;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($StringLitName, $this, 1);
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
    $call22 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call2, $State) | 0;
    HEAP32[$StringLitName >> 2] = $call22;
    if (!$call22) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $Encoding, $StringLitName) | 0;
    $retval$3 = $retval$1;
   } else $retval$3 = 0;
  } else $retval$3 = 0; while (0);
  $retval$4 = $retval$3;
 } else $retval$4 = 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __sg_gl_init_caps_gles2() {
 var $3 = 0, $8 = 0, $ext = 0, $has_bgra = 0, $has_bptc = 0, $has_colorbuffer_float = 0, $has_colorbuffer_half_float = 0, $has_etc2 = 0, $has_float_blend = 0, $has_instancing = 0, $has_pvrtc = 0, $has_rgtc = 0, $has_s3tc = 0, $has_texture_float = 0, $has_texture_float_linear = 0, $has_texture_half_float = 0, $has_texture_half_float_linear = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $has_s3tc = sp + 21 | 0;
 $has_rgtc = sp + 20 | 0;
 $has_bptc = sp + 19 | 0;
 $has_pvrtc = sp + 18 | 0;
 $has_etc2 = sp + 17 | 0;
 $has_texture_float = sp + 16 | 0;
 $has_texture_float_linear = sp + 15 | 0;
 $has_colorbuffer_float = sp + 14 | 0;
 $has_float_blend = sp + 13 | 0;
 $has_instancing = sp + 12 | 0;
 $ext = sp + 4 | 0;
 $has_bgra = sp + 11 | 0;
 $has_texture_half_float = sp + 10 | 0;
 $has_texture_half_float_linear = sp + 9 | 0;
 $has_colorbuffer_half_float = sp + 8 | 0;
 $i = sp;
 HEAP32[541093] = 1;
 HEAP8[$has_s3tc >> 0] = 0;
 HEAP8[$has_rgtc >> 0] = 0;
 HEAP8[$has_bptc >> 0] = 0;
 HEAP8[$has_pvrtc >> 0] = 0;
 HEAP8[$has_etc2 >> 0] = 0;
 HEAP8[$has_texture_float >> 0] = 0;
 HEAP8[$has_texture_float_linear >> 0] = 0;
 HEAP8[$has_colorbuffer_float >> 0] = 0;
 HEAP8[$has_float_blend >> 0] = 0;
 HEAP8[$has_instancing >> 0] = 0;
 HEAP32[$ext >> 2] = _glGetString(7939) | 0;
 if (HEAP32[$ext >> 2] | 0) {
  if (_strstr(HEAP32[$ext >> 2] | 0, 29527) | 0) $3 = 1; else $3 = (_strstr(HEAP32[$ext >> 2] | 0, 29553) | 0) != 0;
  HEAP8[$has_s3tc >> 0] = $3 & 1;
  HEAP8[$has_rgtc >> 0] = (_strstr(HEAP32[$ext >> 2] | 0, 29578) | 0) != 0 & 1;
  HEAP8[$has_bptc >> 0] = (_strstr(HEAP32[$ext >> 2] | 0, 29604) | 0) != 0 & 1;
  if (_strstr(HEAP32[$ext >> 2] | 0, 29630) | 0) $8 = 1; else $8 = (_strstr(HEAP32[$ext >> 2] | 0, 29657) | 0) != 0;
  HEAP8[$has_pvrtc >> 0] = $8 & 1;
  HEAP8[$has_etc2 >> 0] = (_strstr(HEAP32[$ext >> 2] | 0, 29683) | 0) != 0 & 1;
  HEAP8[$has_texture_float >> 0] = (_strstr(HEAP32[$ext >> 2] | 0, 29707) | 0) != 0 & 1;
  HEAP8[$has_texture_float_linear >> 0] = (_strstr(HEAP32[$ext >> 2] | 0, 29722) | 0) != 0 & 1;
  HEAP8[$has_colorbuffer_float >> 0] = (_strstr(HEAP32[$ext >> 2] | 0, 29744) | 0) != 0 & 1;
  HEAP8[$has_float_blend >> 0] = (_strstr(HEAP32[$ext >> 2] | 0, 29764) | 0) != 0 & 1;
  HEAP8[$has_instancing >> 0] = (_strstr(HEAP32[$ext >> 2] | 0, 29777) | 0) != 0 & 1;
  HEAP8[2165420] = (_strstr(HEAP32[$ext >> 2] | 0, 29795) | 0) != 0 & 1;
 }
 HEAP8[2164377] = 0;
 HEAP8[2164376] = HEAP8[$has_instancing >> 0] & 1;
 HEAP8[2164378] = 0;
 HEAP8[2164379] = 0;
 HEAP8[2164380] = 0;
 HEAP8[2164381] = 0;
 HEAP8[2164382] = 0;
 HEAP8[2164383] = 0;
 HEAP8[2164384] = 0;
 __sg_gl_init_limits();
 HEAP8[$has_bgra >> 0] = 0;
 HEAP8[$has_texture_half_float >> 0] = 0;
 HEAP8[$has_texture_half_float_linear >> 0] = 0;
 HEAP8[$has_colorbuffer_half_float >> 0] = 0;
 __sg_gl_init_pixelformats(0);
 if (HEAP8[$has_texture_float >> 0] & 1) __sg_gl_init_pixelformats_float(HEAP8[$has_colorbuffer_float >> 0] & 1, HEAP8[$has_texture_float_linear >> 0] & 1, HEAP8[$has_float_blend >> 0] & 1);
 if (HEAP8[$has_s3tc >> 0] & 1) __sg_gl_init_pixelformats_s3tc();
 if (HEAP8[$has_rgtc >> 0] & 1) __sg_gl_init_pixelformats_rgtc();
 if (HEAP8[$has_bptc >> 0] & 1) __sg_gl_init_pixelformats_bptc();
 if (HEAP8[$has_pvrtc >> 0] & 1) __sg_gl_init_pixelformats_pvrtc();
 if (HEAP8[$has_etc2 >> 0] & 1) __sg_gl_init_pixelformats_etc2();
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 62) break;
  HEAP8[2164412 + ((HEAP32[$i >> 2] | 0) * 6 | 0) + 4 >> 0] = 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function ___stpncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $0 = 0, $4 = 0, $6 = 0, $7 = 0, $d$addr$0$lcssa = 0, $d$addr$051 = 0, $d$addr$1 = 0, $d$addr$231 = 0, $d$addr$3 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2 = 0, $n$addr$333 = 0, $n$addr$4 = 0, $s$addr$0$lcssa = 0, $s$addr$052 = 0, $s$addr$1 = 0, $s$addr$232 = 0, $sub19 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0, label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  $tobool349 = ($n | 0) != 0;
  if ($tobool349 & ($0 & 3 | 0) != 0) {
   $d$addr$051 = $d;
   $n$addr$053 = $n;
   $s$addr$052 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$052 >> 0] | 0;
    HEAP8[$d$addr$051 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $d$addr$3 = $d$addr$051;
     $n$addr$4 = $n$addr$053;
     break L1;
    }
    $dec = $n$addr$053 + -1 | 0;
    $incdec$ptr = $s$addr$052 + 1 | 0;
    $incdec$ptr5 = $d$addr$051 + 1 | 0;
    $tobool3 = ($dec | 0) != 0;
    if ($tobool3 & ($incdec$ptr & 3 | 0) != 0) {
     $d$addr$051 = $incdec$ptr5;
     $n$addr$053 = $dec;
     $s$addr$052 = $incdec$ptr;
    } else {
     $d$addr$0$lcssa = $incdec$ptr5;
     $n$addr$0$lcssa = $dec;
     $s$addr$0$lcssa = $incdec$ptr;
     $tobool3$lcssa = $tobool3;
     break;
    }
   }
  } else {
   $d$addr$0$lcssa = $d;
   $n$addr$0$lcssa = $n;
   $s$addr$0$lcssa = $s;
   $tobool3$lcssa = $tobool349;
  }
  if ($tobool3$lcssa) if (!(HEAP8[$s$addr$0$lcssa >> 0] | 0)) {
   $d$addr$3 = $d$addr$0$lcssa;
   $n$addr$4 = $n$addr$0$lcssa;
  } else {
   L11 : do if ($n$addr$0$lcssa >>> 0 > 3) {
    $n$addr$138 = $n$addr$0$lcssa;
    $wd$039 = $d$addr$0$lcssa;
    $ws$040 = $s$addr$0$lcssa;
    while (1) {
     $6 = HEAP32[$ws$040 >> 2] | 0;
     if (($6 & -2139062144 ^ -2139062144) & $6 + -16843009 | 0) {
      $n$addr$1$lcssa = $n$addr$138;
      $wd$0$lcssa = $wd$039;
      $ws$0$lcssa = $ws$040;
      break L11;
     }
     HEAP32[$wd$039 >> 2] = $6;
     $sub19 = $n$addr$138 + -4 | 0;
     $incdec$ptr20 = $ws$040 + 4 | 0;
     $incdec$ptr21 = $wd$039 + 4 | 0;
     if ($sub19 >>> 0 > 3) {
      $n$addr$138 = $sub19;
      $wd$039 = $incdec$ptr21;
      $ws$040 = $incdec$ptr20;
     } else {
      $n$addr$1$lcssa = $sub19;
      $wd$0$lcssa = $incdec$ptr21;
      $ws$0$lcssa = $incdec$ptr20;
      break;
     }
    }
   } else {
    $n$addr$1$lcssa = $n$addr$0$lcssa;
    $wd$0$lcssa = $d$addr$0$lcssa;
    $ws$0$lcssa = $s$addr$0$lcssa;
   } while (0);
   $d$addr$1 = $wd$0$lcssa;
   $n$addr$2 = $n$addr$1$lcssa;
   $s$addr$1 = $ws$0$lcssa;
   label = 13;
  } else {
   $d$addr$3 = $d$addr$0$lcssa;
   $n$addr$4 = 0;
  }
 } else {
  $d$addr$1 = $d;
  $n$addr$2 = $n;
  $s$addr$1 = $s;
  label = 13;
 } while (0);
 L17 : do if ((label | 0) == 13) if (!$n$addr$2) {
  $d$addr$3 = $d$addr$1;
  $n$addr$4 = 0;
 } else {
  $d$addr$231 = $d$addr$1;
  $n$addr$333 = $n$addr$2;
  $s$addr$232 = $s$addr$1;
  while (1) {
   $7 = HEAP8[$s$addr$232 >> 0] | 0;
   HEAP8[$d$addr$231 >> 0] = $7;
   if (!($7 << 24 >> 24)) {
    $d$addr$3 = $d$addr$231;
    $n$addr$4 = $n$addr$333;
    break L17;
   }
   $n$addr$333 = $n$addr$333 + -1 | 0;
   $incdec$ptr34 = $d$addr$231 + 1 | 0;
   if (!$n$addr$333) {
    $d$addr$3 = $incdec$ptr34;
    $n$addr$4 = 0;
    break;
   } else {
    $d$addr$231 = $incdec$ptr34;
    $s$addr$232 = $s$addr$232 + 1 | 0;
   }
  }
 } while (0);
 _memset($d$addr$3 | 0, 0, $n$addr$4 | 0) | 0;
 return $d$addr$3 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv($this) {
 $this = $this | 0;
 var $Names = 0, $SaveTemp = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call13 = 0, $call2 = 0, $call24 = 0, $call4 = 0, $call9 = 0, $ref$tmp = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $SaveTemp = sp + 8 | 0;
 $ref$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 54759);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp$byval_copy) | 0) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SaveTemp, $this + 360 | 0, 0);
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2) | 0;
  HEAP32[$agg$tmp$byval_copy >> 2] = $call4;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemp);
  do if (!$call4) $retval$4 = 0; else {
   if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0)) {
    $call24 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2) | 0;
    HEAP32[$SaveTemp >> 2] = $call24;
    if (!$call24) $retval$3 = 0; else {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($ref$tmp, $this, $SaveTemp, $SaveTemp + 4 | 0);
     $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $ref$tmp) | 0;
    }
    $retval$4 = $retval$3;
    break;
   }
   $Names = $this + 8 | 0;
   $call9 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names) | 0;
   while (1) {
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) {
     label = 9;
     break;
    }
    $call13 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2) | 0;
    HEAP32[$SaveTemp >> 2] = $call13;
    if (!$call13) {
     label = 7;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names, $SaveTemp);
   }
   if ((label | 0) == 7) {
    $retval$4 = 0;
    break;
   } else if ((label | 0) == 9) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($SaveTemp, $this, $call9);
    $retval$4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $SaveTemp) | 0;
    break;
   }
  } while (0);
  $retval$5 = $retval$4;
 } else $retval$5 = 0;
 STACKTOP = sp;
 return $retval$5 | 0;
}

function __sg_gl_apply_uniforms($stage_index, $ub_index, $data) {
 $stage_index = $stage_index | 0;
 $ub_index = $ub_index | 0;
 $data = $data | 0;
 var $data$addr = 0, $gl_stage = 0, $gl_ub = 0, $ptr = 0, $stage_index$addr = 0, $u = 0, $u_index = 0, $ub_index$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $stage_index$addr = sp + 28 | 0;
 $ub_index$addr = sp + 24 | 0;
 $data$addr = sp + 20 | 0;
 $gl_stage = sp + 16 | 0;
 $gl_ub = sp + 12 | 0;
 $u_index = sp + 8 | 0;
 $u = sp + 4 | 0;
 $ptr = sp;
 HEAP32[$stage_index$addr >> 2] = $stage_index;
 HEAP32[$ub_index$addr >> 2] = $ub_index;
 HEAP32[$data$addr >> 2] = $data;
 if (!(HEAP32[541353] | 0)) ___assert_fail(40565, 21600, 6868, 40591);
 if ((HEAP32[HEAP32[541353] >> 2] | 0) != (HEAP32[541354] | 0)) ___assert_fail(40613, 21600, 6869, 40591);
 if ((HEAP32[HEAP32[(HEAP32[541353] | 0) + 84 >> 2] >> 2] | 0) != (HEAP32[(HEAP32[541353] | 0) + 12 >> 2] | 0)) ___assert_fail(40683, 21600, 6870, 40591);
 if ((HEAP32[(HEAP32[(HEAP32[541353] | 0) + 84 >> 2] | 0) + 12 + ((HEAP32[$stage_index$addr >> 2] | 0) * 120 | 0) >> 2] | 0) <= (HEAP32[$ub_index$addr >> 2] | 0)) ___assert_fail(40773, 21600, 6871, 40591);
 if ((HEAP32[(HEAP32[(HEAP32[541353] | 0) + 84 >> 2] | 0) + 12 + ((HEAP32[$stage_index$addr >> 2] | 0) * 120 | 0) + 8 + (HEAP32[$ub_index$addr >> 2] << 2) >> 2] | 0) != (HEAP32[(HEAP32[$data$addr >> 2] | 0) + 4 >> 2] | 0)) ___assert_fail(40861, 21600, 6872, 40591);
 HEAP32[$gl_stage >> 2] = (HEAP32[(HEAP32[541353] | 0) + 84 >> 2] | 0) + 252 + 260 + ((HEAP32[$stage_index$addr >> 2] | 0) * 832 | 0);
 HEAP32[$gl_ub >> 2] = (HEAP32[$gl_stage >> 2] | 0) + ((HEAP32[$ub_index$addr >> 2] | 0) * 196 | 0);
 HEAP32[$u_index >> 2] = 0;
 L16 : while (1) {
  if ((HEAP32[$u_index >> 2] | 0) >= (HEAP32[HEAP32[$gl_ub >> 2] >> 2] | 0)) {
   label = 24;
   break;
  }
  HEAP32[$u >> 2] = (HEAP32[$gl_ub >> 2] | 0) + 4 + ((HEAP32[$u_index >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$u >> 2] | 0) + 4 >> 2] | 0)) {
   label = 14;
   break;
  }
  L20 : do if ((HEAP32[HEAP32[$u >> 2] >> 2] | 0) != -1) {
   HEAP32[$ptr >> 2] = (HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) + (HEAPU16[(HEAP32[$u >> 2] | 0) + 10 >> 1] | 0);
   switch (HEAP32[(HEAP32[$u >> 2] | 0) + 4 >> 2] | 0) {
   case 0:
    {
     break L20;
     break;
    }
   case 1:
    {
     _glUniform1fv(HEAP32[HEAP32[$u >> 2] >> 2] | 0, HEAPU8[(HEAP32[$u >> 2] | 0) + 8 >> 0] | 0 | 0, HEAP32[$ptr >> 2] | 0);
     break L20;
     break;
    }
   case 2:
    {
     _glUniform2fv(HEAP32[HEAP32[$u >> 2] >> 2] | 0, HEAPU8[(HEAP32[$u >> 2] | 0) + 8 >> 0] | 0 | 0, HEAP32[$ptr >> 2] | 0);
     break L20;
     break;
    }
   case 3:
    {
     _glUniform3fv(HEAP32[HEAP32[$u >> 2] >> 2] | 0, HEAPU8[(HEAP32[$u >> 2] | 0) + 8 >> 0] | 0 | 0, HEAP32[$ptr >> 2] | 0);
     break L20;
     break;
    }
   case 4:
    {
     _glUniform4fv(HEAP32[HEAP32[$u >> 2] >> 2] | 0, HEAPU8[(HEAP32[$u >> 2] | 0) + 8 >> 0] | 0 | 0, HEAP32[$ptr >> 2] | 0);
     break L20;
     break;
    }
   case 5:
    {
     _glUniformMatrix4fv(HEAP32[HEAP32[$u >> 2] >> 2] | 0, HEAPU8[(HEAP32[$u >> 2] | 0) + 8 >> 0] | 0 | 0, 0, HEAP32[$ptr >> 2] | 0);
     break L20;
     break;
    }
   default:
    {
     label = 22;
     break L16;
    }
   }
  } while (0);
  HEAP32[$u_index >> 2] = (HEAP32[$u_index >> 2] | 0) + 1;
 }
 if ((label | 0) == 14) ___assert_fail(40963, 21600, 6877, 40591); else if ((label | 0) == 22) ___assert_fail(47680, 21600, 6901, 40591); else if ((label | 0) == 24) {
  STACKTOP = sp;
  return;
 }
}

function _meshopt_optimizeOverdraw($destination, $indices, $index_count, $vertex_positions, $vertex_count, $vertex_positions_stride, $threshold) {
 $destination = $destination | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $vertex_positions = $vertex_positions | 0;
 $vertex_count = $vertex_count | 0;
 $vertex_positions_stride = $vertex_positions_stride | 0;
 $threshold = +$threshold;
 var $3 = 0, $add49 = 0, $allocator = 0, $call = 0, $call16 = 0, $call19 = 0, $call22 = 0, $call26 = 0, $call29 = 0, $call32 = 0, $call36 = 0, $call39 = 0, $cond = 0, $div = 0, $indices$addr$0 = 0, $it$0 = 0, $mul48 = 0, $offset$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $allocator = sp;
 $div = ($index_count >>> 0) / 3 | 0;
 if ($index_count - ($div * 3 | 0) | 0) ___assert_fail(47099, 46089, 274, 46176);
 if (($vertex_positions_stride + -1 | 0) >>> 0 >= 256) ___assert_fail(46201, 46089, 275, 46176);
 if ($vertex_positions_stride & 3 | 0) ___assert_fail(46263, 46089, 276, 46176);
 __ZN17meshopt_AllocatorC2Ev($allocator);
 do if (!(($index_count | 0) == 0 | ($vertex_count | 0) == 0)) {
  if (($destination | 0) == ($indices | 0)) {
   $call = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $index_count) | 0;
   _memcpy($call | 0, $destination | 0, $index_count << 2 | 0) | 0;
   $indices$addr$0 = $call;
  } else $indices$addr$0 = $indices;
  $call16 = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $vertex_count) | 0;
  $call19 = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $div) | 0;
  $call22 = __ZN7meshoptL22generateHardBoundariesEPjPKjmmjS0_($call19, $indices$addr$0, $index_count, $vertex_count, $call16) | 0;
  $call26 = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $div + 1 | 0) | 0;
  $call29 = __ZN7meshoptL22generateSoftBoundariesEPjPKjmmS2_mjfS0_($call26, $indices$addr$0, $index_count, $vertex_count, $call19, $call22, $threshold, $call16) | 0;
  $call32 = __ZN17meshopt_Allocator8allocateIfEEPT_m($allocator, $call29) | 0;
  __ZN7meshoptL17calculateSortDataEPfPKjmPKfmS2_m($call32, $indices$addr$0, $index_count, $vertex_positions, $vertex_positions_stride, $call26, $call29);
  $call36 = __ZN17meshopt_Allocator8allocateItEEPT_m($allocator, $call29) | 0;
  $call39 = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $call29) | 0;
  __ZN7meshoptL23calculateSortOrderRadixEPjPKfPtm($call39, $call32, $call36, $call29);
  $it$0 = 0;
  $offset$0 = 0;
  while (1) {
   if ($it$0 >>> 0 >= $call29 >>> 0) {
    label = 12;
    break;
   }
   $3 = HEAP32[$call39 + ($it$0 << 2) >> 2] | 0;
   if ($3 >>> 0 >= $call29 >>> 0) {
    label = 14;
    break;
   }
   $mul48 = (HEAP32[$call26 + ($3 << 2) >> 2] | 0) * 3 | 0;
   $add49 = $3 + 1 | 0;
   if ($add49 >>> 0 < $call29 >>> 0) $cond = (HEAP32[$call26 + ($add49 << 2) >> 2] | 0) * 3 | 0; else $cond = $index_count;
   if ($cond >>> 0 <= $mul48 >>> 0) {
    label = 18;
    break;
   }
   $sub = $cond - $mul48 | 0;
   _memcpy($destination + ($offset$0 << 2) | 0, $indices$addr$0 + ($mul48 << 2) | 0, $sub << 2 | 0) | 0;
   $it$0 = $it$0 + 1 | 0;
   $offset$0 = $sub + $offset$0 | 0;
  }
  if ((label | 0) == 12) {
   if (($offset$0 | 0) == ($index_count | 0)) break;
   ___assert_fail(47033, 46089, 332, 46176);
  } else if ((label | 0) == 14) ___assert_fail(46308, 46089, 322, 46176); else if ((label | 0) == 18) ___assert_fail(46332, 46089, 326, 46176);
 } while (0);
 __ZN17meshopt_AllocatorD2Ev($allocator);
 STACKTOP = sp;
 return;
}

function __ZN7DrImageC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEER8DrBitmapfb($this, $image_name, $bitmap, $lod, $outline) {
 $this = $this | 0;
 $image_name = $image_name | 0;
 $bitmap = $bitmap | 0;
 $lod = +$lod;
 $outline = $outline | 0;
 var $0 = 0, $3 = 0, $__end_$i$i = 0, $__end_$i$i$i$i$i$i = 0, $__end_$i$i3 = 0, $__end_$i$i8 = 0, $__i$0$i$i = 0, $__value_$i$i$i$i4 = 0, $__value_$i$i$i$i9 = 0, $__value_$i$i$i9$i$i$i$i$i = 0, $call16 = 0, $m_bitmap = 0, $m_folder_name = 0, $m_hole_list = 0, $m_poly_list = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$this + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $m_bitmap = $this + 12 | 0;
 __ZN8DrBitmapC2E13Bitmap_Format($m_bitmap, 4);
 $m_poly_list = $this + 40 | 0;
 $__end_$i$i = $this + 44 | 0;
 $m_hole_list = $this + 52 | 0;
 $__end_$i$i3 = $this + 56 | 0;
 $__value_$i$i$i$i4 = $this + 60 | 0;
 $m_folder_name = $this + 68 | 0;
 HEAP32[$m_folder_name >> 2] = 0;
 HEAP32[$m_folder_name + 4 >> 2] = 0;
 HEAP32[$m_folder_name + 8 >> 2] = 0;
 HEAP32[$m_poly_list >> 2] = 0;
 HEAP32[$m_poly_list + 4 >> 2] = 0;
 HEAP32[$m_poly_list + 8 >> 2] = 0;
 HEAP32[$m_poly_list + 12 >> 2] = 0;
 HEAP32[$m_poly_list + 16 >> 2] = 0;
 HEAP32[$m_poly_list + 20 >> 2] = 0;
 HEAP16[$m_poly_list + 24 >> 1] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($m_folder_name, 2193746, __ZNSt3__211char_traitsIcE6lengthEPKc(2193746) | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this, $image_name) | 0;
 __ZN8DrBitmapaSERKS_($m_bitmap, $bitmap) | 0;
 if ($outline) __ZN7DrImage13outlinePointsEf($this, $lod); else {
  __ZNK8DrBitmap7polygonEv($ref$tmp, $bitmap);
  $call16 = __ZN10DrPolygonF6pointsEv($ref$tmp) | 0;
  $0 = HEAP32[$__end_$i$i >> 2] | 0;
  if (($0 | 0) == (HEAP32[$this + 48 >> 2] | 0)) __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($m_poly_list, $call16); else {
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($0, $call16);
   HEAP32[$__end_$i$i >> 2] = (HEAP32[$__end_$i$i >> 2] | 0) + 12;
  }
  __ZN10DrPolygonFD2Ev($ref$tmp);
  HEAP32[$ref$tmp >> 2] = 0;
  $__end_$i$i8 = $ref$tmp + 4 | 0;
  HEAP32[$__end_$i$i8 >> 2] = 0;
  $__value_$i$i$i$i9 = $ref$tmp + 8 | 0;
  HEAP32[$__value_$i$i$i$i9 >> 2] = 0;
  $3 = HEAP32[$__end_$i$i3 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$__value_$i$i$i$i4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = 0;
   $__end_$i$i$i$i$i$i = $3 + 4 | 0;
   HEAP32[$__end_$i$i$i$i$i$i >> 2] = 0;
   $__value_$i$i$i9$i$i$i$i$i = $3 + 8 | 0;
   HEAP32[$__value_$i$i$i9$i$i$i$i$i >> 2] = 0;
   HEAP32[$3 >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__end_$i$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i8 >> 2];
   HEAP32[$__value_$i$i$i9$i$i$i$i$i >> 2] = HEAP32[$__value_$i$i$i$i9 >> 2];
   HEAP32[$__value_$i$i$i$i9 >> 2] = 0;
   HEAP32[$__end_$i$i8 >> 2] = 0;
   HEAP32[$ref$tmp >> 2] = 0;
   HEAP32[$__end_$i$i3 >> 2] = (HEAP32[$__end_$i$i3 >> 2] | 0) + 12;
  } else __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($m_hole_list, $ref$tmp);
  __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($ref$tmp);
 }
 STACKTOP = sp;
 return;
}

function _stbi__jpeg_huff_decode($j, $h) {
 $j = $j | 0;
 $h = $h | 0;
 var $30 = 0, $65 = 0, $c = 0, $code_bits12 = 0, $code_bits26 = 0, $code_bits54 = 0, $code_buffer11 = 0, $code_buffer56 = 0, $h$addr = 0, $j$addr = 0, $k = 0, $retval = 0, $s = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 24 | 0;
 $j$addr = sp + 20 | 0;
 $h$addr = sp + 16 | 0;
 $temp = sp + 12 | 0;
 $c = sp + 8 | 0;
 $k = sp + 4 | 0;
 $s = sp;
 HEAP32[$j$addr >> 2] = $j;
 HEAP32[$h$addr >> 2] = $h;
 if ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$j$addr >> 2] | 0);
 HEAP32[$c >> 2] = (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] | 0) >>> 23 & 511;
 HEAP32[$k >> 2] = HEAPU8[(HEAP32[$h$addr >> 2] | 0) + (HEAP32[$c >> 2] | 0) >> 0];
 if ((HEAP32[$k >> 2] | 0) < 255) {
  HEAP32[$s >> 2] = HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1280 + (HEAP32[$k >> 2] | 0) >> 0];
  if ((HEAP32[$s >> 2] | 0) > (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0)) {
   HEAP32[$retval >> 2] = -1;
   $65 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $65 | 0;
  } else {
   $code_buffer11 = (HEAP32[$j$addr >> 2] | 0) + 18364 | 0;
   HEAP32[$code_buffer11 >> 2] = HEAP32[$code_buffer11 >> 2] << HEAP32[$s >> 2];
   $code_bits12 = (HEAP32[$j$addr >> 2] | 0) + 18368 | 0;
   HEAP32[$code_bits12 >> 2] = (HEAP32[$code_bits12 >> 2] | 0) - (HEAP32[$s >> 2] | 0);
   HEAP32[$retval >> 2] = HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1024 + (HEAP32[$k >> 2] | 0) >> 0];
   $65 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $65 | 0;
  }
 }
 HEAP32[$temp >> 2] = (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] | 0) >>> 16;
 HEAP32[$k >> 2] = 10;
 while (1) {
  $30 = HEAP32[$k >> 2] | 0;
  if ((HEAP32[$temp >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$h$addr >> 2] | 0) + 1540 + (HEAP32[$k >> 2] << 2) >> 2] | 0) >>> 0) break;
  HEAP32[$k >> 2] = $30 + 1;
 }
 if (($30 | 0) == 17) {
  $code_bits26 = (HEAP32[$j$addr >> 2] | 0) + 18368 | 0;
  HEAP32[$code_bits26 >> 2] = (HEAP32[$code_bits26 >> 2] | 0) - 16;
  HEAP32[$retval >> 2] = -1;
  $65 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 }
 if ((HEAP32[$k >> 2] | 0) > (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0)) {
  HEAP32[$retval >> 2] = -1;
  $65 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $65 | 0;
 }
 HEAP32[$c >> 2] = ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] | 0) >>> (32 - (HEAP32[$k >> 2] | 0) | 0) & HEAP32[9760 + (HEAP32[$k >> 2] << 2) >> 2]) + (HEAP32[(HEAP32[$h$addr >> 2] | 0) + 1612 + (HEAP32[$k >> 2] << 2) >> 2] | 0);
 if (((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] | 0) >>> (32 - (HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1280 + (HEAP32[$c >> 2] | 0) >> 0] | 0) | 0) & HEAP32[9760 + ((HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1280 + (HEAP32[$c >> 2] | 0) >> 0] | 0) << 2) >> 2] | 0) != (HEAPU16[(HEAP32[$h$addr >> 2] | 0) + 512 + (HEAP32[$c >> 2] << 1) >> 1] | 0 | 0)) ___assert_fail(49394, 47433, 1952, 49476);
 $code_bits54 = (HEAP32[$j$addr >> 2] | 0) + 18368 | 0;
 HEAP32[$code_bits54 >> 2] = (HEAP32[$code_bits54 >> 2] | 0) - (HEAP32[$k >> 2] | 0);
 $code_buffer56 = (HEAP32[$j$addr >> 2] | 0) + 18364 | 0;
 HEAP32[$code_buffer56 >> 2] = HEAP32[$code_buffer56 >> 2] << HEAP32[$k >> 2];
 HEAP32[$retval >> 2] = HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1024 + (HEAP32[$c >> 2] | 0) >> 0];
 $65 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $65 | 0;
}

function _sgl_draw() {
 var $args = 0, $args18 = 0, $args9 = 0, $cmd = 0, $cur_img_id = 0, $cur_pip_id = 0, $cur_uniform_index = 0, $i = 0, $pip22$byval_copy = 0, $range = 0, $ub_range = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $pip22$byval_copy = sp + 52 | 0;
 $cur_pip_id = sp + 48 | 0;
 $cur_img_id = sp + 44 | 0;
 $cur_uniform_index = sp + 40 | 0;
 $range = sp + 32 | 0;
 $i = sp + 24 | 0;
 $cmd = sp + 20 | 0;
 $args = sp + 16 | 0;
 $args9 = sp + 12 | 0;
 $args18 = sp + 8 | 0;
 $ub_range = sp;
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 3241, 24085);
 if (!((HEAP32[541377] | 0) == 0 & (HEAP32[541369] | 0) > 0 & (HEAP32[541371] | 0) > 0)) {
  __sgl_rewind();
  STACKTOP = sp;
  return;
 }
 HEAP32[$cur_pip_id >> 2] = 0;
 HEAP32[$cur_img_id >> 2] = 0;
 HEAP32[$cur_uniform_index >> 2] = -1;
 _sg_push_debug_group(23491);
 HEAP32[$range >> 2] = HEAP32[541372];
 HEAP32[$range + 4 >> 2] = (HEAP32[541369] | 0) * 24;
 HEAP32[$pip22$byval_copy >> 2] = HEAP32[541385];
 _sg_update_buffer($pip22$byval_copy, $range);
 HEAP32[541389] = HEAP32[541385];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[541371] | 0)) break;
  HEAP32[$cmd >> 2] = (HEAP32[541374] | 0) + ((HEAP32[$i >> 2] | 0) * 24 | 0);
  switch (HEAP32[HEAP32[$cmd >> 2] >> 2] | 0) {
  case 1:
   {
    HEAP32[$args >> 2] = (HEAP32[$cmd >> 2] | 0) + 4;
    _sg_apply_viewport(HEAP32[HEAP32[$args >> 2] >> 2] | 0, HEAP32[(HEAP32[$args >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$args >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$args >> 2] | 0) + 12 >> 2] | 0, HEAP8[(HEAP32[$args >> 2] | 0) + 16 >> 0] & 1);
    break;
   }
  case 2:
   {
    HEAP32[$args9 >> 2] = (HEAP32[$cmd >> 2] | 0) + 4;
    _sg_apply_scissor_rect(HEAP32[HEAP32[$args9 >> 2] >> 2] | 0, HEAP32[(HEAP32[$args9 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$args9 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$args9 >> 2] | 0) + 12 >> 2] | 0, HEAP8[(HEAP32[$args9 >> 2] | 0) + 16 >> 0] & 1);
    break;
   }
  case 0:
   {
    HEAP32[$args18 >> 2] = (HEAP32[$cmd >> 2] | 0) + 4;
    if ((HEAP32[HEAP32[$args18 >> 2] >> 2] | 0) != (HEAP32[$cur_pip_id >> 2] | 0)) {
     HEAP32[$pip22$byval_copy >> 2] = HEAP32[HEAP32[$args18 >> 2] >> 2];
     _sg_apply_pipeline($pip22$byval_copy);
     HEAP32[$cur_pip_id >> 2] = HEAP32[HEAP32[$args18 >> 2] >> 2];
     HEAP32[$cur_img_id >> 2] = 0;
     HEAP32[$cur_uniform_index >> 2] = -1;
    }
    if ((HEAP32[$cur_img_id >> 2] | 0) != (HEAP32[(HEAP32[$args18 >> 2] | 0) + 4 >> 2] | 0)) {
     HEAP32[541419] = HEAP32[(HEAP32[$args18 >> 2] | 0) + 4 >> 2];
     _sg_apply_bindings(2165552);
     HEAP32[$cur_img_id >> 2] = HEAP32[(HEAP32[$args18 >> 2] | 0) + 4 >> 2];
    }
    if ((HEAP32[$cur_uniform_index >> 2] | 0) != (HEAP32[(HEAP32[$args18 >> 2] | 0) + 16 >> 2] | 0)) {
     HEAP32[$ub_range >> 2] = (HEAP32[541373] | 0) + (HEAP32[(HEAP32[$args18 >> 2] | 0) + 16 >> 2] << 7);
     HEAP32[$ub_range + 4 >> 2] = 128;
     _sg_apply_uniforms(0, 0, $ub_range);
     HEAP32[$cur_uniform_index >> 2] = HEAP32[(HEAP32[$args18 >> 2] | 0) + 16 >> 2];
    }
    if ((HEAP32[(HEAP32[$args18 >> 2] | 0) + 12 >> 2] | 0) > 0) _sg_draw(HEAP32[(HEAP32[$args18 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$args18 >> 2] | 0) + 12 >> 2] | 0, 1);
    break;
   }
  default:
   {}
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _sg_pop_debug_group();
 __sgl_rewind();
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE6assignINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__result$addr$0$i$i = 0, $__value_$i$i$i$i$i = 0, $agg$tmp12 = 0, $agg$tmp13 = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp19 = 0, $agg$tmp19$byval_copy = 0, $call$i = 0, $cmp5 = 0, $mul$i = 0, $spec$select = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i$i$i9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp19$byval_copy = sp + 20 | 0;
 $agg$tmp18$byval_copy = sp + 16 | 0;
 $agg$tmp12 = sp + 12 | 0;
 $agg$tmp13 = sp + 8 | 0;
 $agg$tmp18 = sp + 4 | 0;
 $agg$tmp19 = sp;
 $0 = HEAP32[$__first >> 2] | 0;
 $1 = HEAP32[$__last >> 2] | 0;
 $sub$ptr$div$i$i$i = $1 - $0 >> 4;
 $__value_$i$i$i$i$i = $this + 8 | 0;
 $3 = HEAP32[$this >> 2] | 0;
 do if ($sub$ptr$div$i$i$i >>> 0 > (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - $3 >> 4 >>> 0) {
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__vdeallocateEv($this);
  $call$i = __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
  if ($call$i >>> 0 < $sub$ptr$div$i$i$i >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
   $sub$ptr$sub$i$i$i9 = (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0;
   $mul$i = $sub$ptr$sub$i$i$i9 >> 3;
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE11__vallocateEm($this, $sub$ptr$sub$i$i$i9 >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $sub$ptr$div$i$i$i >>> 0 ? $sub$ptr$div$i$i$i : $mul$i) : $call$i);
   HEAP32[$agg$tmp18 >> 2] = $0;
   HEAP32[$agg$tmp19 >> 2] = $1;
   HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
   HEAP32[$agg$tmp19$byval_copy >> 2] = HEAP32[$agg$tmp19 >> 2];
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($this, $agg$tmp18$byval_copy, $agg$tmp19$byval_copy, $sub$ptr$div$i$i$i);
   break;
  }
 } else {
  $__end_$i = $this + 4 | 0;
  $sub$ptr$div$i = (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4;
  $cmp5 = $sub$ptr$div$i$i$i >>> 0 > $sub$ptr$div$i >>> 0;
  $6 = $0;
  $spec$select = $cmp5 ? $6 + ($sub$ptr$div$i << 4) | 0 : $1;
  $8 = $spec$select;
  $9 = $6;
  $__result$addr$0$i$i = $3;
  while (1) {
   if (($9 | 0) == ($8 | 0)) break;
   __ZN8DrPointFaSERKS_($__result$addr$0$i$i, $9) | 0;
   $9 = $9 + 16 | 0;
   $__result$addr$0$i$i = $__result$addr$0$i$i + 16 | 0;
  }
  if ($cmp5) {
   HEAP32[$agg$tmp12 >> 2] = $spec$select;
   HEAP32[$agg$tmp13 >> 2] = $1;
   $sub = $sub$ptr$div$i$i$i - ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) | 0;
   HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
   HEAP32[$agg$tmp19$byval_copy >> 2] = HEAP32[$agg$tmp13 >> 2];
   __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($this, $agg$tmp18$byval_copy, $agg$tmp19$byval_copy, $sub);
   break;
  } else {
   HEAP32[$__end_$i >> 2] = $__result$addr$0$i$i;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _stbi__build_huffman($h, $count) {
 $h = $h | 0;
 $count = $count | 0;
 var $24 = 0, $26 = 0, $56 = 0, $7 = 0, $add = 0, $c = 0, $code = 0, $code28 = 0, $count$addr = 0, $h$addr = 0, $i = 0, $j = 0, $k = 0, $m = 0, $retval = 0, $s = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 36 | 0;
 $h$addr = sp + 32 | 0;
 $count$addr = sp + 28 | 0;
 $i = sp + 24 | 0;
 $j = sp + 20 | 0;
 $k = sp + 16 | 0;
 $code = sp + 12 | 0;
 $s = sp + 8 | 0;
 $c = sp + 4 | 0;
 $m = sp;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$count$addr >> 2] = $count;
 HEAP32[$k >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  HEAP32[$j >> 2] = 0;
  while (1) {
   $add = (HEAP32[$i >> 2] | 0) + 1 | 0;
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[(HEAP32[$count$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0)) break;
   $size = (HEAP32[$h$addr >> 2] | 0) + 1280 | 0;
   $7 = HEAP32[$k >> 2] | 0;
   HEAP32[$k >> 2] = $7 + 1;
   HEAP8[$size + $7 >> 0] = $add;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = $add;
 }
 HEAP8[(HEAP32[$h$addr >> 2] | 0) + 1280 + (HEAP32[$k >> 2] | 0) >> 0] = 0;
 HEAP32[$code >> 2] = 0;
 HEAP32[$k >> 2] = 0;
 HEAP32[$j >> 2] = 1;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) > 16) break;
  HEAP32[(HEAP32[$h$addr >> 2] | 0) + 1612 + (HEAP32[$j >> 2] << 2) >> 2] = (HEAP32[$k >> 2] | 0) - (HEAP32[$code >> 2] | 0);
  if ((HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1280 + (HEAP32[$k >> 2] | 0) >> 0] | 0 | 0) == (HEAP32[$j >> 2] | 0)) {
   while (1) {
    $24 = HEAP32[$code >> 2] | 0;
    if ((HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1280 + (HEAP32[$k >> 2] | 0) >> 0] | 0 | 0) != (HEAP32[$j >> 2] | 0)) break;
    HEAP32[$code >> 2] = $24 + 1;
    $code28 = (HEAP32[$h$addr >> 2] | 0) + 512 | 0;
    $26 = HEAP32[$k >> 2] | 0;
    HEAP32[$k >> 2] = $26 + 1;
    HEAP16[$code28 + ($26 << 1) >> 1] = $24;
   }
   if (($24 - 1 | 0) >>> 0 >= 1 << HEAP32[$j >> 2] >>> 0) {
    label = 14;
    break;
   }
  }
  HEAP32[(HEAP32[$h$addr >> 2] | 0) + 1540 + (HEAP32[$j >> 2] << 2) >> 2] = HEAP32[$code >> 2] << 16 - (HEAP32[$j >> 2] | 0);
  HEAP32[$code >> 2] = HEAP32[$code >> 2] << 1;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 if ((label | 0) == 14) {
  HEAP32[$retval >> 2] = _stbi__err(49271) | 0;
  $56 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $56 | 0;
 }
 HEAP32[(HEAP32[$h$addr >> 2] | 0) + 1540 + (HEAP32[$j >> 2] << 2) >> 2] = -1;
 _memset(HEAP32[$h$addr >> 2] | 0, -1, 512) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$k >> 2] | 0)) break;
  HEAP32[$s >> 2] = HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1280 + (HEAP32[$i >> 2] | 0) >> 0];
  L26 : do if ((HEAP32[$s >> 2] | 0) <= 9) {
   HEAP32[$c >> 2] = (HEAPU16[(HEAP32[$h$addr >> 2] | 0) + 512 + (HEAP32[$i >> 2] << 1) >> 1] | 0) << 9 - (HEAP32[$s >> 2] | 0);
   HEAP32[$m >> 2] = 1 << 9 - (HEAP32[$s >> 2] | 0);
   HEAP32[$j >> 2] = 0;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$m >> 2] | 0)) break L26;
    HEAP8[(HEAP32[$h$addr >> 2] | 0) + ((HEAP32[$c >> 2] | 0) + (HEAP32[$j >> 2] | 0)) >> 0] = HEAP32[$i >> 2];
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$retval >> 2] = 1;
 $56 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $56 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $CVQuals = 0, $ExceptionSpec = 0, $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp17 = 0, $agg$tmp2 = 0, $agg$tmp21 = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp27$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp2 = sp + 40 | 0;
 $agg$tmp4 = sp + 32 | 0;
 $agg$tmp10 = sp + 24 | 0;
 $agg$tmp17 = sp + 16 | 0;
 $agg$tmp21 = sp + 8 | 0;
 $agg$tmp27 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
 HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 12 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 52155);
 HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 127]($0, $S);
 $CVQuals = $this + 20 | 0;
 $2 = HEAP32[$CVQuals >> 2] | 0;
 if (!($2 & 1)) $3 = $2; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 56350);
  HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
  HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
  $3 = HEAP32[$CVQuals >> 2] | 0;
 }
 if (!($3 & 2)) $4 = $3; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 56357);
  HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2];
  HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp10 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
  $4 = HEAP32[$CVQuals >> 2] | 0;
 }
 if ($4 & 4 | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 56367);
  HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2];
  HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp17 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
 }
 switch (HEAP8[$this + 24 >> 0] | 0) {
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 56552);
   HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2];
   HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp21 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27, 56555);
   HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp27 >> 2];
   HEAP32[$agg$tmp27$byval_copy + 4 >> 2] = HEAP32[$agg$tmp27 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp27$byval_copy);
   break;
  }
 default:
  {}
 }
 $ExceptionSpec = $this + 28 | 0;
 if (HEAP32[$ExceptionSpec >> 2] | 0) {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$ExceptionSpec >> 2] | 0, $S);
 }
 STACKTOP = sp;
 return;
}

function __sapp_emsc_mouse_cb($emsc_type, $emsc_event, $user_data) {
 $emsc_type = $emsc_type | 0;
 $emsc_event = $emsc_event | 0;
 $user_data = $user_data | 0;
 var $1 = 0, $emsc_event$addr = 0, $emsc_type$addr = 0, $is_button_event = 0, $new_x = 0, $new_y = 0, $type = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $emsc_type$addr = sp + 20 | 0;
 $emsc_event$addr = sp + 16 | 0;
 $new_x = sp + 8 | 0;
 $new_y = sp + 4 | 0;
 $type = sp;
 $is_button_event = sp + 24 | 0;
 HEAP32[$emsc_type$addr >> 2] = $emsc_type;
 HEAP32[$emsc_event$addr >> 2] = $emsc_event;
 HEAP32[sp + 12 >> 2] = $user_data;
 $1 = HEAP32[$emsc_event$addr >> 2] | 0;
 if (HEAP8[58953] & 1) {
  HEAPF32[14736] = +(HEAP32[$1 + 44 >> 2] | 0);
  HEAPF32[14737] = +(HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 48 >> 2] | 0);
 } else {
  HEAPF32[$new_x >> 2] = +(HEAP32[$1 + 52 >> 2] | 0) * +HEAPF32[14678];
  HEAPF32[$new_y >> 2] = +(HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 56 >> 2] | 0) * +HEAPF32[14678];
  if (HEAP8[58954] & 1) {
   HEAPF32[14736] = +HEAPF32[$new_x >> 2] - +HEAPF32[14734];
   HEAPF32[14737] = +HEAPF32[$new_y >> 2] - +HEAPF32[14735];
  }
  HEAPF32[14734] = +HEAPF32[$new_x >> 2];
  HEAPF32[14735] = +HEAPF32[$new_y >> 2];
  HEAP8[58954] = 1;
 }
 if (!(__sapp_events_enabled() | 0)) {
  __sapp_emsc_update_keyboard_state();
  STACKTOP = sp;
  return 1;
 }
 if ((HEAPU16[(HEAP32[$emsc_event$addr >> 2] | 0) + 40 >> 1] | 0 | 0) < 0) {
  __sapp_emsc_update_keyboard_state();
  STACKTOP = sp;
  return 1;
 }
 if ((HEAPU16[(HEAP32[$emsc_event$addr >> 2] | 0) + 40 >> 1] | 0 | 0) >= 3) {
  __sapp_emsc_update_keyboard_state();
  STACKTOP = sp;
  return 1;
 }
 HEAP8[$is_button_event >> 0] = 0;
 switch (HEAP32[$emsc_type$addr >> 2] | 0) {
 case 5:
  {
   HEAP32[$type >> 2] = 4;
   HEAP8[$is_button_event >> 0] = 1;
   break;
  }
 case 6:
  {
   HEAP32[$type >> 2] = 5;
   HEAP8[$is_button_event >> 0] = 1;
   break;
  }
 case 8:
  {
   HEAP32[$type >> 2] = 7;
   break;
  }
 case 33:
  {
   HEAP32[$type >> 2] = 8;
   break;
  }
 case 34:
  {
   HEAP32[$type >> 2] = 9;
   break;
  }
 default:
  HEAP32[$type >> 2] = 0;
 }
 if (HEAP32[$type >> 2] | 0) {
  __sapp_init_event(HEAP32[$type >> 2] | 0);
  if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 24 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 2;
  if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 28 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 1;
  if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 32 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 4;
  if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 36 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 8;
  L39 : do if (HEAP8[$is_button_event >> 0] & 1) switch (HEAPU16[(HEAP32[$emsc_event$addr >> 2] | 0) + 40 >> 1] | 0 | 0) {
  case 0:
   {
    HEAP32[14689] = 0;
    break L39;
    break;
   }
  case 1:
   {
    HEAP32[14689] = 2;
    break L39;
    break;
   }
  case 2:
   {
    HEAP32[14689] = 1;
    break L39;
    break;
   }
  default:
   {
    HEAP32[14689] = HEAPU16[(HEAP32[$emsc_event$addr >> 2] | 0) + 40 >> 1];
    break L39;
   }
  } else HEAP32[14689] = 256; while (0);
  __sapp_call_event(58728) | 0;
 }
 if (!(HEAP8[$is_button_event >> 0] & 1)) {
  __sapp_emsc_update_keyboard_state();
  STACKTOP = sp;
  return 1;
 }
 __sapp_emsc_update_mouse_lock_state();
 __sapp_emsc_update_keyboard_state();
 STACKTOP = sp;
 return 1;
}

function __sapp_emsc_key_cb($emsc_type, $emsc_event, $user_data) {
 $emsc_type = $emsc_type | 0;
 $emsc_event = $emsc_event | 0;
 $user_data = $user_data | 0;
 var $18 = 0, $emsc_event$addr = 0, $emsc_type$addr = 0, $retval1 = 0, $send_keyup_followup = 0, $type = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $emsc_type$addr = sp + 12 | 0;
 $emsc_event$addr = sp + 8 | 0;
 $retval1 = sp + 17 | 0;
 $type = sp;
 $send_keyup_followup = sp + 16 | 0;
 HEAP32[$emsc_type$addr >> 2] = $emsc_type;
 HEAP32[$emsc_event$addr >> 2] = $emsc_event;
 HEAP32[sp + 4 >> 2] = $user_data;
 HEAP8[$retval1 >> 0] = 1;
 if (__sapp_events_enabled() | 0) {
  switch (HEAP32[$emsc_type$addr >> 2] | 0) {
  case 2:
   {
    HEAP32[$type >> 2] = 1;
    break;
   }
  case 3:
   {
    HEAP32[$type >> 2] = 2;
    break;
   }
  case 1:
   {
    HEAP32[$type >> 2] = 3;
    break;
   }
  default:
   HEAP32[$type >> 2] = 0;
  }
  if (HEAP32[$type >> 2] | 0) {
   HEAP8[$send_keyup_followup >> 0] = 0;
   __sapp_init_event(HEAP32[$type >> 2] | 0);
   HEAP8[58748] = (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 84 >> 2] | 0) != 0 & 1;
   if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 68 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 2;
   if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 72 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 1;
   if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 76 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 4;
   if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 80 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 8;
   $18 = HEAP32[$emsc_event$addr >> 2] | 0;
   L22 : do if ((HEAP32[$type >> 2] | 0) == 3) {
    HEAP32[14686] = HEAP32[$18 + 152 >> 2];
    if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 80 >> 2] | 0) if ((HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 152 >> 2] | 0) == 118) HEAP8[$retval1 >> 0] = 0;
   } else {
    HEAP32[14685] = __sapp_translate_key(HEAP32[$18 + 156 >> 2] | 0) | 0;
    if ((HEAP32[$type >> 2] | 0) == 1 & (HEAP32[14685] | 0) != 343 & (HEAP32[14685] | 0) != 347) if (HEAP32[14688] & 8 | 0) HEAP8[$send_keyup_followup >> 0] = 1;
    switch (HEAP32[14685] | 0) {
    case 348:
    case 347:
    case 346:
    case 345:
    case 344:
    case 343:
    case 342:
    case 341:
    case 340:
    case 314:
    case 313:
    case 312:
    case 311:
    case 310:
    case 309:
    case 308:
    case 307:
    case 306:
    case 305:
    case 304:
    case 303:
    case 302:
    case 301:
    case 300:
    case 299:
    case 298:
    case 297:
    case 296:
    case 295:
    case 294:
    case 293:
    case 292:
    case 291:
    case 290:
    case 284:
    case 283:
    case 282:
    case 281:
    case 280:
    case 269:
    case 268:
    case 267:
    case 266:
    case 265:
    case 264:
    case 263:
    case 262:
    case 261:
    case 260:
    case 259:
    case 258:
    case 257:
    case 256:
    case 162:
    case 161:
     {
      break L22;
      break;
     }
    default:
     {}
    }
    HEAP8[$retval1 >> 0] = 0;
   } while (0);
   if (__sapp_call_event(58728) | 0) HEAP8[$retval1 >> 0] = 1;
   if (HEAP8[$send_keyup_followup >> 0] & 1) {
    HEAP32[14684] = 2;
    if (__sapp_call_event(58728) | 0) HEAP8[$retval1 >> 0] = 1;
   }
  }
 }
 __sapp_emsc_update_keyboard_state();
 __sapp_emsc_update_mouse_lock_state();
 STACKTOP = sp;
 return HEAP8[$retval1 >> 0] & 1 | 0;
}

function _stbi__decode_jpeg_image($j) {
 $j = $j | 0;
 var $1 = 0, $23 = 0, $37 = 0, $Ld = 0, $NL = 0, $call33 = 0, $j$addr = 0, $m = 0, $retval = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 20 | 0;
 $j$addr = sp + 16 | 0;
 $m = sp + 12 | 0;
 $x = sp + 8 | 0;
 $Ld = sp + 4 | 0;
 $NL = sp;
 HEAP32[$j$addr >> 2] = $j;
 HEAP32[$m >> 2] = 0;
 while (1) {
  $1 = HEAP32[$j$addr >> 2] | 0;
  if ((HEAP32[$m >> 2] | 0) >= 4) break;
  HEAP32[$1 + 18076 + ((HEAP32[$m >> 2] | 0) * 72 | 0) + 48 >> 2] = 0;
  HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18076 + ((HEAP32[$m >> 2] | 0) * 72 | 0) + 52 >> 2] = 0;
  HEAP32[$m >> 2] = (HEAP32[$m >> 2] | 0) + 1;
 }
 HEAP32[$1 + 18436 >> 2] = 0;
 if (!(_stbi__decode_jpeg_header(HEAP32[$j$addr >> 2] | 0, 0) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $37 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 }
 HEAP32[$m >> 2] = (_stbi__get_marker(HEAP32[$j$addr >> 2] | 0) | 0) & 255;
 L9 : while (1) {
  if (!((HEAP32[$m >> 2] | 0) == 217 ^ 1)) {
   label = 27;
   break;
  }
  L12 : do if ((HEAP32[$m >> 2] | 0) == 218) {
   if (!(_stbi__process_scan_header(HEAP32[$j$addr >> 2] | 0) | 0)) {
    label = 10;
    break L9;
   }
   if (!(_stbi__parse_entropy_coded_data(HEAP32[$j$addr >> 2] | 0) | 0)) {
    label = 12;
    break L9;
   }
   if ((HEAPU8[(HEAP32[$j$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) == 255) {
    do {
     if (!((_stbi__at_eof(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) | 0) != 0 ^ 1)) break L12;
     HEAP32[$x >> 2] = (_stbi__get8(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) | 0) & 255;
    } while ((HEAP32[$x >> 2] | 0) != 255);
    $call33 = _stbi__get8(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) | 0;
    HEAP8[(HEAP32[$j$addr >> 2] | 0) + 18372 >> 0] = $call33;
   }
  } else {
   $23 = HEAP32[$j$addr >> 2] | 0;
   if ((HEAP32[$m >> 2] | 0) != 220) if (_stbi__process_marker($23, HEAP32[$m >> 2] | 0) | 0) break; else {
    label = 25;
    break L9;
   }
   HEAP32[$Ld >> 2] = _stbi__get16be(HEAP32[$23 >> 2] | 0) | 0;
   HEAP32[$NL >> 2] = _stbi__get16be(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) | 0;
   if ((HEAP32[$Ld >> 2] | 0) != 4) {
    label = 21;
    break L9;
   }
   if ((HEAP32[$NL >> 2] | 0) != (HEAP32[(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) + 4 >> 2] | 0)) {
    label = 23;
    break L9;
   }
  } while (0);
  HEAP32[$m >> 2] = (_stbi__get_marker(HEAP32[$j$addr >> 2] | 0) | 0) & 255;
 }
 if ((label | 0) == 10) {
  HEAP32[$retval >> 2] = 0;
  $37 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 } else if ((label | 0) == 12) {
  HEAP32[$retval >> 2] = 0;
  $37 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 } else if ((label | 0) == 21) {
  HEAP32[$retval >> 2] = _stbi__err(49124) | 0;
  $37 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 } else if ((label | 0) == 23) {
  HEAP32[$retval >> 2] = _stbi__err(49136) | 0;
  $37 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 } else if ((label | 0) == 25) {
  HEAP32[$retval >> 2] = 0;
  $37 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 } else if ((label | 0) == 27) {
  if (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18380 >> 2] | 0) _stbi__jpeg_finish(HEAP32[$j$addr >> 2] | 0);
  HEAP32[$retval >> 2] = 1;
  $37 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $37 | 0;
 }
 return 0;
}

function __ZN7DrImage12setSimpleBoxEv($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $4 = 0, $7 = 0, $__end_$i$i$i = 0, $__end_$i$i$i7 = 0, $__soon_to_be_end$0$i$i$i = 0, $__soon_to_be_end$0$i$i$i8 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i11 = 0, $m_hole_list = 0, $m_poly_list = 0, $one_poly = 0, $ref$tmp = 0, $ref$tmp3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $one_poly = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp3 = sp;
 __ZNK8DrBitmap7polygonEv($ref$tmp, $this + 12 | 0);
 __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($one_poly, __ZN10DrPolygonF6pointsEv($ref$tmp) | 0);
 __ZN10DrPolygonFD2Ev($ref$tmp);
 HEAP32[$ref$tmp3 >> 2] = 0;
 HEAP32[$ref$tmp3 + 4 >> 2] = 0;
 HEAP32[$ref$tmp3 + 8 >> 2] = 0;
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0;
 __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE11__vallocateEm($ref$tmp, 1);
 __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE18__construct_at_endIPKS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m($ref$tmp, $ref$tmp3, $ref$tmp3 + 12 | 0, 1);
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($ref$tmp3);
 __ZN10DrPolygonF24ensureWindingOrientationERNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE19Winding_Orientation($one_poly, 1);
 $m_poly_list = $this + 40 | 0;
 $0 = HEAP32[$m_poly_list >> 2] | 0;
 $__end_$i$i$i = $this + 44 | 0;
 $__soon_to_be_end$0$i$i$i = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($__soon_to_be_end$0$i$i$i | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $__soon_to_be_end$0$i$i$i + -12 | 0;
  __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($incdec$ptr$i$i$i);
  $__soon_to_be_end$0$i$i$i = $incdec$ptr$i$i$i;
 }
 HEAP32[$__end_$i$i$i >> 2] = $0;
 $m_hole_list = $this + 52 | 0;
 $2 = HEAP32[$m_hole_list >> 2] | 0;
 $__end_$i$i$i7 = $this + 56 | 0;
 $__soon_to_be_end$0$i$i$i8 = HEAP32[$__end_$i$i$i7 >> 2] | 0;
 while (1) {
  if (($__soon_to_be_end$0$i$i$i8 | 0) == ($2 | 0)) break;
  $incdec$ptr$i$i$i11 = $__soon_to_be_end$0$i$i$i8 + -12 | 0;
  __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($incdec$ptr$i$i$i11);
  $__soon_to_be_end$0$i$i$i8 = $incdec$ptr$i$i$i11;
 }
 HEAP32[$__end_$i$i$i7 >> 2] = $2;
 $4 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($4 | 0) == (HEAP32[$this + 48 >> 2] | 0)) __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($m_poly_list, $one_poly); else {
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($4, $one_poly);
  HEAP32[$__end_$i$i$i >> 2] = (HEAP32[$__end_$i$i$i >> 2] | 0) + 12;
 }
 $7 = HEAP32[$__end_$i$i$i7 >> 2] | 0;
 if (($7 | 0) == (HEAP32[$this + 60 >> 2] | 0)) __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($m_hole_list, $ref$tmp); else {
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEC2ERKS6_($7, $ref$tmp);
  HEAP32[$__end_$i$i$i7 >> 2] = (HEAP32[$__end_$i$i$i7 >> 2] | 0) + 12;
 }
 HEAP8[$this + 64 >> 0] = 1;
 HEAP8[$this + 65 >> 0] = 0;
 __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($ref$tmp);
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($one_poly);
 STACKTOP = sp;
 return;
}

function _fonsCreateInternal($params) {
 $params = $params | 0;
 var $29 = 0, $64 = 0, $call2 = 0, $call27 = 0, $call32 = 0, $call48 = 0, $params$addr = 0, $retval = 0, $stash = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $params$addr = sp + 4 | 0;
 $stash = sp;
 HEAP32[$params$addr >> 2] = $params;
 HEAP32[$stash >> 2] = 0;
 HEAP32[$stash >> 2] = _malloc(21064) | 0;
 do if (HEAP32[$stash >> 2] | 0) {
  _memset(HEAP32[$stash >> 2] | 0, 0, 21064) | 0;
  dest = HEAP32[$stash >> 2] | 0;
  src = HEAP32[$params$addr >> 2] | 0;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $call2 = _malloc(64e3) | 0;
  HEAP32[(HEAP32[$stash >> 2] | 0) + 20564 >> 2] = $call2;
  if (HEAP32[(HEAP32[$stash >> 2] | 0) + 20564 >> 2] | 0) if (_fons__tt_init(HEAP32[$stash >> 2] | 0) | 0) {
   if (HEAP32[(HEAP32[$stash >> 2] | 0) + 16 >> 2] | 0) if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$stash >> 2] | 0) + 16 >> 2] & 15](HEAP32[(HEAP32[$stash >> 2] | 0) + 12 >> 2] | 0, HEAP32[HEAP32[$stash >> 2] >> 2] | 0, HEAP32[(HEAP32[$stash >> 2] | 0) + 4 >> 2] | 0) | 0)) break;
   $call27 = _fons__allocAtlas(HEAP32[HEAP32[$stash >> 2] >> 2] | 0, HEAP32[(HEAP32[$stash >> 2] | 0) + 4 >> 2] | 0, 256) | 0;
   HEAP32[(HEAP32[$stash >> 2] | 0) + 68 >> 2] = $call27;
   if (HEAP32[(HEAP32[$stash >> 2] | 0) + 68 >> 2] | 0) {
    $call32 = _malloc(16) | 0;
    HEAP32[(HEAP32[$stash >> 2] | 0) + 64 >> 2] = $call32;
    if (HEAP32[(HEAP32[$stash >> 2] | 0) + 64 >> 2] | 0) {
     $29 = HEAP32[(HEAP32[$stash >> 2] | 0) + 64 >> 2] | 0;
     HEAP32[$29 >> 2] = 0;
     HEAP32[$29 + 4 >> 2] = 0;
     HEAP32[$29 + 8 >> 2] = 0;
     HEAP32[$29 + 12 >> 2] = 0;
     HEAP32[(HEAP32[$stash >> 2] | 0) + 72 >> 2] = 4;
     HEAP32[(HEAP32[$stash >> 2] | 0) + 76 >> 2] = 0;
     HEAPF32[(HEAP32[$stash >> 2] | 0) + 36 >> 2] = 1.0 / +(HEAP32[HEAP32[$stash >> 2] >> 2] | 0);
     HEAPF32[(HEAP32[$stash >> 2] | 0) + 40 >> 2] = 1.0 / +(HEAP32[(HEAP32[$stash >> 2] | 0) + 4 >> 2] | 0);
     $call48 = _malloc(Math_imul(HEAP32[HEAP32[$stash >> 2] >> 2] | 0, HEAP32[(HEAP32[$stash >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
     HEAP32[(HEAP32[$stash >> 2] | 0) + 44 >> 2] = $call48;
     if (HEAP32[(HEAP32[$stash >> 2] | 0) + 44 >> 2] | 0) {
      _memset(HEAP32[(HEAP32[$stash >> 2] | 0) + 44 >> 2] | 0, 0, Math_imul(HEAP32[HEAP32[$stash >> 2] >> 2] | 0, HEAP32[(HEAP32[$stash >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
      HEAP32[(HEAP32[$stash >> 2] | 0) + 48 >> 2] = HEAP32[HEAP32[$stash >> 2] >> 2];
      HEAP32[(HEAP32[$stash >> 2] | 0) + 48 + 4 >> 2] = HEAP32[(HEAP32[$stash >> 2] | 0) + 4 >> 2];
      HEAP32[(HEAP32[$stash >> 2] | 0) + 48 + 8 >> 2] = 0;
      HEAP32[(HEAP32[$stash >> 2] | 0) + 48 + 12 >> 2] = 0;
      _fons__addWhiteRect(HEAP32[$stash >> 2] | 0, 2, 2);
      _fonsPushState(HEAP32[$stash >> 2] | 0);
      _fonsClearState(HEAP32[$stash >> 2] | 0);
      HEAP32[$retval >> 2] = HEAP32[$stash >> 2];
      $64 = HEAP32[$retval >> 2] | 0;
      STACKTOP = sp;
      return $64 | 0;
     }
    }
   }
  }
 } while (0);
 _fonsDeleteInternal(HEAP32[$stash >> 2] | 0);
 HEAP32[$retval >> 2] = 0;
 $64 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $64 | 0;
}

function __ZN7meshoptL22generateSoftBoundariesEPjPKjmmS2_mjfS0_($destination, $indices, $index_count, $vertex_count, $clusters, $cluster_count, $threshold, $cache_timestamps) {
 $destination = $destination | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $vertex_count = $vertex_count | 0;
 $clusters = $clusters | 0;
 $cluster_count = $cluster_count | 0;
 $threshold = +$threshold;
 $cache_timestamps = $cache_timestamps | 0;
 var $0 = 0, $add = 0, $add46 = 0, $add47 = 0, $add52 = 0, $cluster_misses$0 = 0, $cond = 0, $div = 0, $i$0 = 0, $i29$0 = 0, $i29$0$ph = 0, $it$0 = 0, $mul11 = 0, $mul24 = 0.0, $mul35 = 0, $result$0 = 0, $result$1$ph = 0, $result$1$ph$in = 0, $running_faces$0 = 0, $running_misses$0 = 0, $timestamp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $timestamp = sp;
 _memset($cache_timestamps | 0, 0, $vertex_count << 2 | 0) | 0;
 HEAP32[$timestamp >> 2] = 0;
 $div = ($index_count >>> 0) / 3 | 0;
 $it$0 = 0;
 $result$0 = 0;
 while (1) {
  if ($it$0 >>> 0 >= $cluster_count >>> 0) break;
  $0 = HEAP32[$clusters + ($it$0 << 2) >> 2] | 0;
  $add = $it$0 + 1 | 0;
  if ($add >>> 0 < $cluster_count >>> 0) $cond = HEAP32[$clusters + ($add << 2) >> 2] | 0; else $cond = $div;
  if ($cond >>> 0 <= $0 >>> 0) {
   label = 7;
   break;
  }
  HEAP32[$timestamp >> 2] = (HEAP32[$timestamp >> 2] | 0) + 17;
  $cluster_misses$0 = 0;
  $i$0 = $0;
  while (1) {
   if ($i$0 >>> 0 >= $cond >>> 0) break;
   $mul11 = $i$0 * 3 | 0;
   $cluster_misses$0 = (__ZN7meshoptL11updateCacheEjjjjPjRj(HEAP32[$indices + ($mul11 << 2) >> 2] | 0, HEAP32[$indices + ($mul11 + 1 << 2) >> 2] | 0, HEAP32[$indices + ($mul11 + 2 << 2) >> 2] | 0, $cache_timestamps, $timestamp) | 0) + $cluster_misses$0 | 0;
   $i$0 = $i$0 + 1 | 0;
  }
  $mul24 = +($cluster_misses$0 >>> 0) / +(($cond - $0 | 0) >>> 0) * $threshold;
  HEAP32[$destination + ($result$0 << 2) >> 2] = $0;
  $i29$0$ph = $0;
  $result$1$ph$in = $result$0;
  L12 : while (1) {
   $result$1$ph = $result$1$ph$in + 1 | 0;
   HEAP32[$timestamp >> 2] = (HEAP32[$timestamp >> 2] | 0) + 17;
   $i29$0 = $i29$0$ph;
   $running_faces$0 = 0;
   $running_misses$0 = 0;
   while (1) {
    if ($i29$0 >>> 0 >= $cond >>> 0) break L12;
    $mul35 = $i29$0 * 3 | 0;
    $add46 = (__ZN7meshoptL11updateCacheEjjjjPjRj(HEAP32[$indices + ($mul35 << 2) >> 2] | 0, HEAP32[$indices + ($mul35 + 1 << 2) >> 2] | 0, HEAP32[$indices + ($mul35 + 2 << 2) >> 2] | 0, $cache_timestamps, $timestamp) | 0) + $running_misses$0 | 0;
    $add47 = $running_faces$0 + 1 | 0;
    if (+($add46 >>> 0) / +($add47 >>> 0) <= $mul24) break;
    $i29$0 = $i29$0 + 1 | 0;
    $running_faces$0 = $add47;
    $running_misses$0 = $add46;
   }
   $add52 = $i29$0 + 1 | 0;
   HEAP32[$destination + ($result$1$ph << 2) >> 2] = $add52;
   $i29$0$ph = $add52;
   $result$1$ph$in = $result$1$ph;
  }
  $it$0 = $add;
  $result$0 = (HEAP32[$destination + ($result$1$ph$in << 2) >> 2] | 0) == ($0 | 0) ? $result$1$ph : $result$1$ph$in;
 }
 if ((label | 0) == 7) ___assert_fail(46566, 46089, 202, 46578);
 if ($result$0 >>> 0 < $cluster_count >>> 0) ___assert_fail(46601, 46089, 262, 46578);
 if ($result$0 >>> 0 > $div >>> 0) ___assert_fail(46625, 46089, 263, 46578); else {
  STACKTOP = sp;
  return $result$0 | 0;
 }
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $Pointee = 0, $agg$tmp = 0, $agg$tmp15 = 0, $agg$tmp18 = 0, $agg$tmp21 = 0, $agg$tmp23 = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp25$byval_copy = sp + 48 | 0;
 $agg$tmp = sp + 40 | 0;
 $agg$tmp15 = sp + 32 | 0;
 $agg$tmp18 = sp + 24 | 0;
 $agg$tmp21 = sp + 16 | 0;
 $agg$tmp23 = sp;
 $agg$tmp25 = sp + 8 | 0;
 $Pointee = $this + 8 | 0;
 $0 = HEAP32[$Pointee >> 2] | 0;
 do if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0) << 24 >> 24 == 10) if (__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($0) | 0) {
  $6 = HEAP32[$Pointee >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 52230);
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp21 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  $7 = $6 + 12 | 0;
  $12 = HEAP32[$7 + 4 >> 2] | 0;
  $13 = $agg$tmp23;
  HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$13 + 4 >> 2] = $12;
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp23 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25, 52234);
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp25 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  break;
 } else {
  $1 = HEAP32[$Pointee >> 2] | 0;
  label = 4;
  break;
 } else {
  $1 = $0;
  label = 4;
 } while (0);
 if ((label | 0) == 4) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 127]($1, $s);
  if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$Pointee >> 2] | 0, $s) | 0) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52157);
   HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  }
  if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$Pointee >> 2] | 0, $s) | 0) label = 8; else if (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$Pointee >> 2] | 0, $s) | 0) label = 8;
  if ((label | 0) == 8) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 52159);
   HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp15 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 52228);
  HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
  HEAP32[$agg$tmp25$byval_copy + 4 >> 2] = HEAP32[$agg$tmp18 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp25$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZN7meshoptL22buildTriangleAdjacencyERNS_17TriangleAdjacencyEPKjmmR17meshopt_Allocator($adjacency, $indices, $index_count, $vertex_count, $allocator) {
 $adjacency = $adjacency | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $vertex_count = $vertex_count | 0;
 $allocator = $allocator | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx40 = 0, $arrayidx45 = 0, $arrayidx50 = 0, $arrayidx62 = 0, $arrayidx7 = 0, $data = 0, $div = 0, $i$0 = 0, $i24$0 = 0, $i56$0 = 0, $i9$0 = 0, $mul29 = 0, $offset$0 = 0, $offsets = 0, label = 0;
 $div = ($index_count >>> 0) / 3 | 0;
 HEAP32[$adjacency >> 2] = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $vertex_count) | 0;
 $offsets = $adjacency + 4 | 0;
 HEAP32[$offsets >> 2] = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $vertex_count) | 0;
 $data = $adjacency + 8 | 0;
 HEAP32[$data >> 2] = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $index_count) | 0;
 _memset(HEAP32[$adjacency >> 2] | 0, 0, $vertex_count << 2 | 0) | 0;
 $1 = HEAP32[$adjacency >> 2] | 0;
 $i$0 = 0;
 while (1) {
  if ($i$0 >>> 0 >= $index_count >>> 0) break;
  $4 = HEAP32[$indices + ($i$0 << 2) >> 2] | 0;
  if ($4 >>> 0 >= $vertex_count >>> 0) {
   label = 5;
   break;
  }
  $arrayidx7 = $1 + ($4 << 2) | 0;
  HEAP32[$arrayidx7 >> 2] = (HEAP32[$arrayidx7 >> 2] | 0) + 1;
  $i$0 = $i$0 + 1 | 0;
 }
 if ((label | 0) == 5) ___assert_fail(46984, 46674, 55, 47010);
 $2 = HEAP32[$offsets >> 2] | 0;
 $3 = HEAP32[$adjacency >> 2] | 0;
 $i9$0 = 0;
 $offset$0 = 0;
 while (1) {
  if (($i9$0 | 0) == ($vertex_count | 0)) break;
  HEAP32[$2 + ($i9$0 << 2) >> 2] = $offset$0;
  $add = (HEAP32[$3 + ($i9$0 << 2) >> 2] | 0) + $offset$0 | 0;
  $i9$0 = $i9$0 + 1 | 0;
  $offset$0 = $add;
 }
 if (($offset$0 | 0) != ($index_count | 0)) ___assert_fail(47033, 46674, 69, 47010);
 $7 = HEAP32[$data >> 2] | 0;
 $8 = HEAP32[$offsets >> 2] | 0;
 $i24$0 = 0;
 while (1) {
  if ($i24$0 >>> 0 >= $div >>> 0) break;
  $mul29 = $i24$0 * 3 | 0;
  $12 = HEAP32[$indices + ($mul29 + 1 << 2) >> 2] | 0;
  $13 = HEAP32[$indices + ($mul29 + 2 << 2) >> 2] | 0;
  $arrayidx40 = $8 + (HEAP32[$indices + ($mul29 << 2) >> 2] << 2) | 0;
  $14 = HEAP32[$arrayidx40 >> 2] | 0;
  HEAP32[$arrayidx40 >> 2] = $14 + 1;
  HEAP32[$7 + ($14 << 2) >> 2] = $i24$0;
  $arrayidx45 = $8 + ($12 << 2) | 0;
  $15 = HEAP32[$arrayidx45 >> 2] | 0;
  HEAP32[$arrayidx45 >> 2] = $15 + 1;
  HEAP32[$7 + ($15 << 2) >> 2] = $i24$0;
  $arrayidx50 = $8 + ($13 << 2) | 0;
  $16 = HEAP32[$arrayidx50 >> 2] | 0;
  HEAP32[$arrayidx50 >> 2] = $16 + 1;
  HEAP32[$7 + ($16 << 2) >> 2] = $i24$0;
  $i24$0 = $i24$0 + 1 | 0;
 }
 $9 = HEAP32[$offsets >> 2] | 0;
 $10 = HEAP32[$adjacency >> 2] | 0;
 $i56$0 = 0;
 while (1) {
  if ($i56$0 >>> 0 >= $vertex_count >>> 0) {
   label = 16;
   break;
  }
  $arrayidx62 = $9 + ($i56$0 << 2) | 0;
  $17 = HEAP32[$arrayidx62 >> 2] | 0;
  $18 = HEAP32[$10 + ($i56$0 << 2) >> 2] | 0;
  if ($17 >>> 0 < $18 >>> 0) {
   label = 18;
   break;
  }
  HEAP32[$arrayidx62 >> 2] = $17 - $18;
  $i56$0 = $i56$0 + 1 | 0;
 }
 if ((label | 0) == 16) return; else if ((label | 0) == 18) ___assert_fail(47055, 46674, 84, 47010);
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $CVQuals = 0, $agg$tmp = 0, $agg$tmp14 = 0, $agg$tmp2 = 0, $agg$tmp21 = 0, $agg$tmp25 = 0, $agg$tmp31 = 0, $agg$tmp31$byval_copy = 0, $agg$tmp7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp31$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp2 = sp + 40 | 0;
 $agg$tmp7 = sp + 32 | 0;
 $agg$tmp14 = sp + 24 | 0;
 $agg$tmp21 = sp + 16 | 0;
 $agg$tmp25 = sp + 8 | 0;
 $agg$tmp31 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
 HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 16 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 52155);
 HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ($0 | 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 127]($0, $S);
 $CVQuals = $this + 28 | 0;
 $2 = HEAP32[$CVQuals >> 2] | 0;
 if (!($2 & 1)) $3 = $2; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 56350);
  HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
  $3 = HEAP32[$CVQuals >> 2] | 0;
 }
 if (!($3 & 2)) $4 = $3; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp14, 56357);
  HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp14 >> 2];
  HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp14 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
  $4 = HEAP32[$CVQuals >> 2] | 0;
 }
 if ($4 & 4 | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 56367);
  HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2];
  HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp21 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
 }
 switch (HEAP8[$this + 32 >> 0] | 0) {
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25, 56552);
   HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2];
   HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp25 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp31, 56555);
   HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp31 >> 2];
   HEAP32[$agg$tmp31$byval_copy + 4 >> 2] = HEAP32[$agg$tmp31 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp31$byval_copy);
   break;
  }
 default:
  {}
 }
 $6 = HEAP32[$this + 24 >> 2] | 0;
 if ($6 | 0) __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($6, $S);
 STACKTOP = sp;
 return;
}

function _sgl_end() {
 var $10 = 0, $35 = 0, $7 = 0, $args57 = 0, $arrayidx60$byval_copy = 0, $call12 = 0, $cmd45 = 0, $coerce = 0, $img = 0, $matrix_dirty = 0, $merge_cmd = 0, $num_vertices = 0, $pip = 0, $prev_cmd = 0, $tm = 0, $uni = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $arrayidx60$byval_copy = sp + 24 | 0;
 $matrix_dirty = sp + 29 | 0;
 $uni = sp + 20 | 0;
 $pip = sp + 16 | 0;
 $img = sp + 12 | 0;
 $prev_cmd = sp + 8 | 0;
 $merge_cmd = sp + 28 | 0;
 $cmd45 = sp + 4 | 0;
 $coerce = sp;
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2954, 23969);
 if (!(HEAP8[2165512] & 1)) ___assert_fail(23977, 23371, 2955, 23969);
 if ((HEAP32[541369] | 0) < (HEAP32[541375] | 0)) ___assert_fail(23991, 23371, 2956, 23969);
 HEAP8[2165512] = 0;
 HEAP8[$matrix_dirty >> 0] = HEAP8[2165537] & 1;
 if (HEAP8[$matrix_dirty >> 0] & 1) {
  HEAP8[2165537] = 0;
  HEAP32[$uni >> 2] = __sgl_next_uniform() | 0;
  if (HEAP32[$uni >> 2] | 0) {
   $7 = HEAP32[$uni >> 2] | 0;
   $call12 = __sgl_matrix_projection() | 0;
   __sgl_matmul4($7, $call12, __sgl_matrix_modelview() | 0);
   $tm = (HEAP32[$uni >> 2] | 0) + 64 | 0;
   dest = $tm;
   src = __sgl_matrix_texture() | 0;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
  }
 }
 $10 = HEAP32[541382] | 0;
 HEAP32[$arrayidx60$byval_copy >> 2] = HEAP32[2165756 + (HEAP32[541438] << 2) >> 2];
 HEAP32[$pip >> 2] = __sgl_get_pipeline($arrayidx60$byval_copy, $10) | 0;
 if (HEAP8[2165536] & 1) HEAP32[$img >> 2] = HEAP32[541383]; else HEAP32[$img >> 2] = HEAP32[541386];
 HEAP32[$prev_cmd >> 2] = __sgl_prev_command() | 0;
 HEAP8[$merge_cmd >> 0] = 0;
 if (HEAP32[$prev_cmd >> 2] | 0) if (((HEAP32[541382] | 0) != 2 ? (HEAP32[HEAP32[$prev_cmd >> 2] >> 2] | 0) == 0 : 0) & (HEAP32[541382] | 0) != 4) if (!(HEAP8[$matrix_dirty >> 0] & 1)) if ((HEAP32[(HEAP32[$prev_cmd >> 2] | 0) + 4 + 4 >> 2] | 0) == (HEAP32[$img >> 2] | 0)) if ((HEAP32[(HEAP32[$prev_cmd >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[$pip >> 2] | 0)) HEAP8[$merge_cmd >> 0] = 1;
 if (HEAP8[$merge_cmd >> 0] & 1) {
  $num_vertices = (HEAP32[$prev_cmd >> 2] | 0) + 4 + 12 | 0;
  HEAP32[$num_vertices >> 2] = (HEAP32[$num_vertices >> 2] | 0) + ((HEAP32[541369] | 0) - (HEAP32[541375] | 0));
  STACKTOP = sp;
  return;
 }
 HEAP32[$cmd45 >> 2] = __sgl_next_command() | 0;
 if (!(HEAP32[$cmd45 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[541370] | 0) <= 0) ___assert_fail(24027, 23371, 2991, 23969);
 HEAP32[HEAP32[$cmd45 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$cmd45 >> 2] | 0) + 4 + 4 >> 2] = HEAP32[$img >> 2];
 $args57 = (HEAP32[$cmd45 >> 2] | 0) + 4 | 0;
 $35 = HEAP32[541382] | 0;
 HEAP32[$arrayidx60$byval_copy >> 2] = HEAP32[2165756 + (HEAP32[541438] << 2) >> 2];
 HEAP32[$coerce >> 2] = __sgl_get_pipeline($arrayidx60$byval_copy, $35) | 0;
 HEAP32[$args57 >> 2] = HEAP32[$coerce >> 2];
 HEAP32[(HEAP32[$cmd45 >> 2] | 0) + 4 + 8 >> 2] = HEAP32[541375];
 HEAP32[(HEAP32[$cmd45 >> 2] | 0) + 4 + 12 >> 2] = (HEAP32[541369] | 0) - (HEAP32[541375] | 0);
 HEAP32[(HEAP32[$cmd45 >> 2] | 0) + 4 + 16 >> 2] = (HEAP32[541370] | 0) - 1;
 STACKTOP = sp;
 return;
}

function __ZL5inputPK10sapp_event($event) {
 $event = $event | 0;
 var $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $3 = 0, $6 = 0, $mul63$sink = 0.0, $ref$tmp = 0, $ref$tmp18 = 0, $sub51$sink = 0.0, $type = 0, $wireframe = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $ref$tmp = sp + 8 | 0;
 $ref$tmp18 = sp;
 $type = $event + 8 | 0;
 _memcpy(1110704 + ((HEAP32[$type >> 2] | 0) * 208 | 0) | 0, $event | 0, 208) | 0;
 L1 : do switch (HEAP32[$type >> 2] | 0) {
 case 1:
  {
   if (!(HEAP8[$event + 20 >> 0] | 0)) {
    $3 = HEAP32[$event + 12 >> 2] | 0;
    switch ($3 | 0) {
    case 57:
    case 56:
    case 55:
    case 54:
    case 53:
    case 52:
    case 51:
    case 50:
    case 49:
     {
      HEAP32[3178] = $3 + -49;
      break L1;
      break;
     }
    case 82:
     {
      __ZN6DrVec23setEff(2186768, 0.0, 0.0);
      __ZN6DrVec23setEff(2186776, 25.0, 25.0);
      __ZN2Dr14IdentityMatrixEv($ref$tmp);
      dest = 2186784;
      src = $ref$tmp;
      stop = dest + 64 | 0;
      do {
       HEAP32[dest >> 2] = HEAP32[src >> 2];
       dest = dest + 4 | 0;
       src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      break L1;
      break;
     }
    case 87:
     {
      $wireframe = (HEAP32[546685] | 0) + 24 | 0;
      $6 = HEAP8[$wireframe >> 0] ^ 1;
      HEAP8[$wireframe >> 0] = $6;
      HEAP8[45278] = $6;
      break L1;
      break;
     }
    default:
     break L1;
    }
   }
   break;
  }
 case 6:
  {
   HEAPF32[3179] = +HEAPF32[3179] - +HEAPF32[$event + 52 >> 2] * .10000000149011612;
   HEAPF32[$ref$tmp >> 2] = .5;
   HEAPF32[$ref$tmp18 >> 2] = 5.0;
   HEAPF32[3179] = +__ZN2Dr5ClampIfEET_RKS1_S3_S3_(12716, $ref$tmp, $ref$tmp18);
   break;
  }
 case 4:
  {
   if (!(HEAP32[$event + 28 >> 2] | 0)) {
    __ZN6DrVec23setEff(2186848, +HEAPF32[$event + 36 >> 2], +HEAPF32[$event + 32 >> 2]);
    HEAP8[2193733] = 1;
   }
   break;
  }
 case 5:
  {
   if (!(HEAP32[$event + 28 >> 2] | 0)) HEAP8[2193733] = 0;
   break;
  }
 case 7:
  {
   if (HEAP8[2193733] | 0) {
    $14 = +HEAPF32[$event + 36 >> 2];
    $15 = +HEAPF32[$event + 32 >> 2];
    $16 = +HEAPF32[546712];
    if ($16 < $14) {
     $sub51$sink = ($14 - $16) * 1.0;
     label = 17;
    } else if ($16 > $14) {
     $sub51$sink = 360.0 - ($16 - $14) * 1.0;
     label = 17;
    }
    if ((label | 0) == 17) HEAPF32[546694] = $sub51$sink;
    $17 = +HEAPF32[546713];
    if ($17 > $15) {
     $mul63$sink = 360.0 - ($17 - $15) * 1.0;
     label = 22;
    } else if ($17 < $15) {
     $mul63$sink = ($15 - $17) * 1.0;
     label = 22;
    }
    if ((label | 0) == 22) HEAPF32[546695] = $mul63$sink;
    HEAPF32[546712] = $14;
    HEAPF32[546713] = $15;
    HEAPF32[546694] = +__ZN2Dr19EqualizeAngle0to360IfEET_RKS1_(2186776);
    HEAPF32[546695] = +__ZN2Dr19EqualizeAngle0to360IfEET_RKS1_(2186780);
   }
   break;
  }
 case 22:
  {
   HEAP32[$ref$tmp >> 2] = HEAP32[3206];
   HEAP32[$ref$tmp + 4 >> 2] = HEAP32[3207];
   HEAP32[$ref$tmp + 8 >> 2] = HEAP32[3208];
   HEAP32[$ref$tmp + 12 >> 2] = HEAP32[3209];
   HEAP32[$ref$tmp + 16 >> 2] = HEAP32[3210];
   _sapp_html5_fetch_dropped_file($ref$tmp);
   break;
  }
 default:
  {}
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE($this, $SoFar, $State) {
 $this = $this | 0;
 $SoFar = $SoFar | 0;
 $State = $State | 0;
 var $0 = 0, $1 = 0, $SSK = 0, $call46 = 0, $call8 = 0, $call9 = 0, $ref$tmp = 0, $retval$1 = 0, $retval$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $SSK = sp;
 $ref$tmp = sp + 4 | 0;
 $0 = HEAP32[$SoFar >> 2] | 0;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0) << 24 >> 24 == 36) {
  $1 = HEAP32[$0 + 8 >> 2] | 0;
  HEAP32[$SSK >> 2] = $1;
  if (($1 + -2 | 0) >>> 0 < 4) HEAP32[$SoFar >> 2] = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $SSK) | 0;
 }
 L7 : do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 67) | 0) {
  $call8 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 73) | 0;
  $call9 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
  switch ($call9 << 24 >> 24) {
  case 53:
  case 51:
  case 50:
  case 49:
   break;
  default:
   {
    $retval$3 = 0;
    break L7;
   }
  }
  HEAP32[$SSK >> 2] = ($call9 << 24 >> 24) + -48;
  HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
  if ($State | 0) HEAP8[$State >> 0] = 1;
  if ($call8) if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0)) $retval$1 = 0; else label = 11; else label = 11;
  if ((label | 0) == 11) {
   HEAP8[$ref$tmp >> 0] = 0;
   $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this, $SoFar, $ref$tmp, $SSK) | 0;
  }
  $retval$3 = $retval$1;
 } else if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 68) {
  $call46 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 1) | 0;
  switch ($call46 << 24 >> 24) {
  case 53:
  case 50:
  case 49:
  case 48:
   break;
  default:
   {
    $retval$3 = 0;
    break L7;
   }
  }
  HEAP32[$SSK >> 2] = ($call46 << 24 >> 24) + -48;
  HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 2;
  if ($State | 0) HEAP8[$State >> 0] = 1;
  HEAP8[$ref$tmp >> 0] = 1;
  $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this, $SoFar, $ref$tmp, $SSK) | 0;
 } else $retval$3 = 0; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function _stbtt__tesselate_curve($points, $num_points, $x0, $y0, $x1, $y1, $x2, $y2, $objspace_flatness_squared, $n) {
 $points = $points | 0;
 $num_points = $num_points | 0;
 $x0 = +$x0;
 $y0 = +$y0;
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 $objspace_flatness_squared = +$objspace_flatness_squared;
 $n = $n | 0;
 var $18 = 0, $19 = 0, $48 = 0, $dx = 0, $dy = 0, $mx = 0, $my = 0, $n$addr = 0, $num_points$addr = 0, $objspace_flatness_squared$addr = 0, $points$addr = 0, $retval = 0, $x0$addr = 0, $x1$addr = 0, $x2$addr = 0, $y0$addr = 0, $y1$addr = 0, $y2$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $retval = sp + 56 | 0;
 $points$addr = sp + 52 | 0;
 $num_points$addr = sp + 48 | 0;
 $x0$addr = sp + 44 | 0;
 $y0$addr = sp + 40 | 0;
 $x1$addr = sp + 36 | 0;
 $y1$addr = sp + 32 | 0;
 $x2$addr = sp + 28 | 0;
 $y2$addr = sp + 24 | 0;
 $objspace_flatness_squared$addr = sp + 20 | 0;
 $n$addr = sp + 16 | 0;
 $mx = sp + 12 | 0;
 $my = sp + 8 | 0;
 $dx = sp + 4 | 0;
 $dy = sp;
 HEAP32[$points$addr >> 2] = $points;
 HEAP32[$num_points$addr >> 2] = $num_points;
 HEAPF32[$x0$addr >> 2] = $x0;
 HEAPF32[$y0$addr >> 2] = $y0;
 HEAPF32[$x1$addr >> 2] = $x1;
 HEAPF32[$y1$addr >> 2] = $y1;
 HEAPF32[$x2$addr >> 2] = $x2;
 HEAPF32[$y2$addr >> 2] = $y2;
 HEAPF32[$objspace_flatness_squared$addr >> 2] = $objspace_flatness_squared;
 HEAP32[$n$addr >> 2] = $n;
 HEAPF32[$mx >> 2] = (+HEAPF32[$x0$addr >> 2] + +HEAPF32[$x1$addr >> 2] * 2.0 + +HEAPF32[$x2$addr >> 2]) / 4.0;
 HEAPF32[$my >> 2] = (+HEAPF32[$y0$addr >> 2] + +HEAPF32[$y1$addr >> 2] * 2.0 + +HEAPF32[$y2$addr >> 2]) / 4.0;
 HEAPF32[$dx >> 2] = (+HEAPF32[$x0$addr >> 2] + +HEAPF32[$x2$addr >> 2]) / 2.0 - +HEAPF32[$mx >> 2];
 HEAPF32[$dy >> 2] = (+HEAPF32[$y0$addr >> 2] + +HEAPF32[$y2$addr >> 2]) / 2.0 - +HEAPF32[$my >> 2];
 if ((HEAP32[$n$addr >> 2] | 0) > 16) {
  HEAP32[$retval >> 2] = 1;
  $48 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $48 | 0;
 }
 $18 = HEAP32[$points$addr >> 2] | 0;
 $19 = HEAP32[$num_points$addr >> 2] | 0;
 if (+HEAPF32[$dx >> 2] * +HEAPF32[$dx >> 2] + +HEAPF32[$dy >> 2] * +HEAPF32[$dy >> 2] > +HEAPF32[$objspace_flatness_squared$addr >> 2]) {
  _stbtt__tesselate_curve($18, $19, +HEAPF32[$x0$addr >> 2], +HEAPF32[$y0$addr >> 2], (+HEAPF32[$x0$addr >> 2] + +HEAPF32[$x1$addr >> 2]) / 2.0, (+HEAPF32[$y0$addr >> 2] + +HEAPF32[$y1$addr >> 2]) / 2.0, +HEAPF32[$mx >> 2], +HEAPF32[$my >> 2], +HEAPF32[$objspace_flatness_squared$addr >> 2], (HEAP32[$n$addr >> 2] | 0) + 1 | 0) | 0;
  _stbtt__tesselate_curve(HEAP32[$points$addr >> 2] | 0, HEAP32[$num_points$addr >> 2] | 0, +HEAPF32[$mx >> 2], +HEAPF32[$my >> 2], (+HEAPF32[$x1$addr >> 2] + +HEAPF32[$x2$addr >> 2]) / 2.0, (+HEAPF32[$y1$addr >> 2] + +HEAPF32[$y2$addr >> 2]) / 2.0, +HEAPF32[$x2$addr >> 2], +HEAPF32[$y2$addr >> 2], +HEAPF32[$objspace_flatness_squared$addr >> 2], (HEAP32[$n$addr >> 2] | 0) + 1 | 0) | 0;
 } else {
  _stbtt__add_point($18, HEAP32[$19 >> 2] | 0, +HEAPF32[$x2$addr >> 2], +HEAPF32[$y2$addr >> 2]);
  HEAP32[HEAP32[$num_points$addr >> 2] >> 2] = (HEAP32[HEAP32[$num_points$addr >> 2] >> 2] | 0) + 1;
 }
 HEAP32[$retval >> 2] = 1;
 $48 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $48 | 0;
}

function _stbi__do_png($p, $x, $y, $n, $req_comp, $ri) {
 $p = $p | 0;
 $x = $x | 0;
 $y = $y | 0;
 $n = $n | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $22 = 0, $71 = 0, $n$addr = 0, $p$addr = 0, $req_comp$addr = 0, $result = 0, $retval = 0, $ri$addr = 0, $tobool = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $p$addr = sp + 24 | 0;
 $x$addr = sp + 20 | 0;
 $y$addr = sp + 16 | 0;
 $n$addr = sp + 12 | 0;
 $req_comp$addr = sp + 8 | 0;
 $ri$addr = sp + 4 | 0;
 $result = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$ri$addr >> 2] = $ri;
 HEAP32[$result >> 2] = 0;
 if ((HEAP32[$req_comp$addr >> 2] | 0) < 0 | (HEAP32[$req_comp$addr >> 2] | 0) > 4) {
  $tobool = (_stbi__err(48224) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 if (_stbi__parse_png_file(HEAP32[$p$addr >> 2] | 0, 0, HEAP32[$req_comp$addr >> 2] | 0) | 0) {
  if ((HEAP32[(HEAP32[$p$addr >> 2] | 0) + 16 >> 2] | 0) < 8) HEAP32[HEAP32[$ri$addr >> 2] >> 2] = 8; else HEAP32[HEAP32[$ri$addr >> 2] >> 2] = HEAP32[(HEAP32[$p$addr >> 2] | 0) + 16 >> 2];
  HEAP32[$result >> 2] = HEAP32[(HEAP32[$p$addr >> 2] | 0) + 12 >> 2];
  HEAP32[(HEAP32[$p$addr >> 2] | 0) + 12 >> 2] = 0;
  if (HEAP32[$req_comp$addr >> 2] | 0) if ((HEAP32[$req_comp$addr >> 2] | 0) != (HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 12 >> 2] | 0)) {
   $22 = HEAP32[$result >> 2] | 0;
   if ((HEAP32[HEAP32[$ri$addr >> 2] >> 2] | 0) == 8) HEAP32[$result >> 2] = _stbi__convert_format($22, HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 12 >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[HEAP32[HEAP32[$p$addr >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 4 >> 2] | 0) | 0; else HEAP32[$result >> 2] = _stbi__convert_format16($22, HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 12 >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[HEAP32[HEAP32[$p$addr >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 4 >> 2] | 0) | 0;
   HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 12 >> 2] = HEAP32[$req_comp$addr >> 2];
   if (!(HEAP32[$result >> 2] | 0)) {
    HEAP32[$retval >> 2] = HEAP32[$result >> 2];
    $71 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $71 | 0;
   }
  }
  HEAP32[HEAP32[$x$addr >> 2] >> 2] = HEAP32[HEAP32[HEAP32[$p$addr >> 2] >> 2] >> 2];
  HEAP32[HEAP32[$y$addr >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 4 >> 2];
  if (HEAP32[$n$addr >> 2] | 0) HEAP32[HEAP32[$n$addr >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 8 >> 2];
 }
 _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 12 >> 2] = 0;
 _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 8 >> 2] = 0;
 _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$retval >> 2] = HEAP32[$result >> 2];
 $71 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $71 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $ExprList = 0, $InitList = 0, $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp15 = 0, $agg$tmp2 = 0, $agg$tmp20 = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $agg$tmp6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp23$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp2 = sp + 40 | 0;
 $agg$tmp6 = sp + 32 | 0;
 $agg$tmp12 = sp + 24 | 0;
 $agg$tmp15 = sp + 16 | 0;
 $agg$tmp20 = sp + 8 | 0;
 $agg$tmp23 = sp;
 if (HEAP8[$this + 28 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53495);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 53507);
 HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 if (HEAP8[$this + 29 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 53511);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
 $ExprList = $this + 8 | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($ExprList) | 0)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 52159);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
  __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($ExprList, $S);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 52155);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp15 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 $InitList = $this + 20 | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($InitList) | 0)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp20, 52159);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp20 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp20 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
  __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($InitList, $S);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp23, 52155);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp23 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp23$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $InfixOperator = 0, $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp12 = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp5 = 0, $agg$tmp7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp18$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp3 = sp + 40 | 0;
 $agg$tmp5 = sp + 32 | 0;
 $agg$tmp7 = sp;
 $agg$tmp10 = sp + 24 | 0;
 $agg$tmp12 = sp + 16 | 0;
 $agg$tmp18 = sp + 8 | 0;
 $InfixOperator = $this + 12 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18$byval_copy, 52234);
 if (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator, $agg$tmp18$byval_copy) | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
  HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 52159);
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5, 54918);
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 $1 = $InfixOperator;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp7;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 54921);
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp10 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 20 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 52155);
 HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
 HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18$byval_copy, 52234);
 if (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator, $agg$tmp18$byval_copy) | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 52155);
  HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
  HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = HEAP32[$agg$tmp18 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp18$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($this) {
 $this = $this | 0;
 var $TA = 0, $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $call12 = 0, $call13 = 0, $call21 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp10$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp10 = sp + 8 | 0;
 $TA = sp;
 do if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10) $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53964);
  HEAP32[$agg$tmp10$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp10$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp10$byval_copy) | 0) {
   $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   break;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 53967);
  HEAP32[$agg$tmp10$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2];
  HEAP32[$agg$tmp10$byval_copy + 4 >> 2] = HEAP32[$agg$tmp10 + 4 >> 2];
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp10$byval_copy) | 0;
  $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call13 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($call12, 0) | 0;
  HEAP32[$agg$tmp10$byval_copy >> 2] = $call13;
  if (!$call13) $retval$1 = 0; else if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
   $call21 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call12, 0) | 0;
   HEAP32[$TA >> 2] = $call21;
   if (!$call21) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $agg$tmp10$byval_copy, $TA) | 0;
   $retval$1 = $retval$0;
  } else $retval$1 = $call13;
  $retval$2 = $retval$1;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $11 = 0, $16 = 0, $17 = 0, $21 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $Type = 0, $Value = 0, $agg$tmp = 0, $agg$tmp11 = 0, $agg$tmp13 = 0, $agg$tmp16 = 0, $agg$tmp24 = 0, $agg$tmp3 = 0, $agg$tmp6 = 0, $tmpcast7$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $tmpcast7$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp3 = sp + 16 | 0;
 $agg$tmp6 = sp + 40 | 0;
 $agg$tmp11 = sp + 32 | 0;
 $agg$tmp13 = sp + 24 | 0;
 $agg$tmp16 = sp + 8 | 0;
 $agg$tmp24 = sp;
 $Type = $this + 8 | 0;
 if ((__ZNK12_GLOBAL__N_110StringView4sizeEv($Type) | 0) >>> 0 > 3) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
  $0 = $Type;
  $5 = HEAP32[$0 + 4 >> 2] | 0;
  $6 = $agg$tmp3;
  HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 52155);
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
 }
 $Value = $this + 16 | 0;
 if ((HEAP8[(__ZNK12_GLOBAL__N_110StringViewixEm($Value) | 0) >> 0] | 0) == 110) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11, 52762);
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp11 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp11 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
  __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$tmp13, $Value, 1);
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp13 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp13 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
 } else {
  $11 = $Value;
  $16 = HEAP32[$11 + 4 >> 2] | 0;
  $17 = $agg$tmp16;
  HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$17 + 4 >> 2] = $16;
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp16 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp16 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
 }
 if ((__ZNK12_GLOBAL__N_110StringView4sizeEv($Type) | 0) >>> 0 < 4) {
  $21 = $Type;
  $26 = HEAP32[$21 + 4 >> 2] | 0;
  $27 = $agg$tmp24;
  HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$27 + 4 >> 2] = $26;
  HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2];
  HEAP32[$tmpcast7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp24 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast7$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZN8DrBitmap4copyER6DrRect($agg$result, $this, $copy_rect) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $copy_rect = $copy_rect | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call18 = 0, $call2 = 0, $call28 = 0, $copy = 0, $height = 0, $height14 = 0, $height56 = 0, $source_x$0 = 0, $source_y$0 = 0, $sub35 = 0, $width = 0, $width12 = 0, $width49 = 0, $x48$0 = 0, $y = 0, $y54$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp$byval_copy = sp + 32 | 0;
 $copy = sp;
 $agg$tmp = sp + 28 | 0;
 $call = __ZN6DrRect4leftEv($copy_rect) | 0;
 $call2 = __ZN6DrRect3topEv($copy_rect) | 0;
 if (($call | 0) < 0) {
  $width = $copy_rect + 8 | 0;
  HEAP32[$width >> 2] = (HEAP32[$width >> 2] | 0) + $call;
  HEAP32[$copy_rect >> 2] = (HEAP32[$copy_rect >> 2] | 0) - $call;
 }
 if (($call2 | 0) < 0) {
  $height = $copy_rect + 12 | 0;
  HEAP32[$height >> 2] = (HEAP32[$height >> 2] | 0) + $call2;
  $y = $copy_rect + 4 | 0;
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) - $call2;
 }
 $width12 = $copy_rect + 8 | 0;
 do if ((HEAP32[$width12 >> 2] | 0) < 1) label = 7; else {
  $height14 = $copy_rect + 12 | 0;
  if ((HEAP32[$height14 >> 2] | 0) < 1) label = 7; else {
   $call18 = __ZN6DrRect5rightEv($copy_rect) | 0;
   $6 = HEAP32[$this + 8 >> 2] | 0;
   if (($call18 | 0) >= ($6 | 0)) HEAP32[$width12 >> 2] = $6 - (__ZN6DrRect4leftEv($copy_rect) | 0);
   $call28 = __ZN6DrRect6bottomEv($copy_rect) | 0;
   $7 = HEAP32[$this + 12 >> 2] | 0;
   if (($call28 | 0) < ($7 | 0)) $9 = HEAP32[$height14 >> 2] | 0; else {
    $sub35 = $7 - (__ZN6DrRect3topEv($copy_rect) | 0) | 0;
    HEAP32[$height14 >> 2] = $sub35;
    $9 = $sub35;
   }
   $8 = HEAP32[$width12 >> 2] | 0;
   if (($8 | 0) < 1 | ($9 | 0) < 1) {
    __ZN8DrBitmapC2Eii13Bitmap_Format($agg$result, 0, 0, 4);
    break;
   }
   __ZN8DrBitmapC2Eii13Bitmap_Format($copy, $8, $9, HEAP32[$this >> 2] | 0);
   $width49 = $copy + 8 | 0;
   $height56 = $copy + 12 | 0;
   $source_x$0 = __ZN6DrRect4leftEv($copy_rect) | 0;
   $x48$0 = 0;
   while (1) {
    if (($x48$0 | 0) >= (HEAP32[$width49 >> 2] | 0)) break;
    $source_y$0 = __ZN6DrRect3topEv($copy_rect) | 0;
    $y54$0 = 0;
    while (1) {
     if (($y54$0 | 0) >= (HEAP32[$height56 >> 2] | 0)) break;
     __ZNK8DrBitmap8getPixelEii($agg$tmp, $this, $source_x$0, $source_y$0);
     HEAP8[$agg$tmp$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
     HEAP8[$agg$tmp$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
     HEAP8[$agg$tmp$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
     HEAP8[$agg$tmp$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
     __ZN8DrBitmap8setPixelEii7DrColor($copy, $x48$0, $y54$0, $agg$tmp$byval_copy);
     $source_y$0 = $source_y$0 + 1 | 0;
     $y54$0 = $y54$0 + 1 | 0;
    }
    $source_x$0 = $source_x$0 + 1 | 0;
    $x48$0 = $x48$0 + 1 | 0;
   }
   __ZN8DrBitmapC2ERKS_13Bitmap_Format($agg$result, $copy, 4);
   __ZN8DrBitmapD2Ev($copy);
  }
 } while (0);
 if ((label | 0) == 7) __ZN8DrBitmapC2Eii13Bitmap_Format($agg$result, 0, 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv($this) {
 $this = $this | 0;
 var $agg$tmp = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp7$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp7 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55118);
 HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp7$byval_copy, $this, 0);
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp7$byval_copy) | 0; else $retval$0 = 0;
  $retval$2 = $retval$0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 55121);
  HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp7$byval_copy, $this, 0);
   if (__ZNK12_GLOBAL__N_110StringView5emptyEv($agg$tmp7$byval_copy) | 0) $retval$2 = 0; else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 112) | 0) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp7$byval_copy, $this, 0);
    if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $agg$tmp7$byval_copy) | 0; else $retval$1 = 0;
    $retval$2 = $retval$1;
   } else $retval$2 = 0;
  } else $retval$2 = 0;
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __saudio_fifo_read($fifo, $ptr, $num_bytes) {
 $fifo = $fifo | 0;
 $ptr = $ptr | 0;
 $num_bytes = $num_bytes | 0;
 var $40 = 0, $41 = 0, $call = 0, $dst = 0, $fifo$addr = 0, $i = 0, $mutex23 = 0, $num_bytes$addr = 0, $num_bytes_copied = 0, $num_packets_needed = 0, $packet_index = 0, $ptr$addr = 0, $src = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $fifo$addr = sp + 32 | 0;
 $ptr$addr = sp + 28 | 0;
 $num_bytes$addr = sp + 24 | 0;
 $num_bytes_copied = sp + 20 | 0;
 $num_packets_needed = sp + 16 | 0;
 $dst = sp + 12 | 0;
 $i = sp + 8 | 0;
 $packet_index = sp + 4 | 0;
 $src = sp;
 HEAP32[$fifo$addr >> 2] = $fifo;
 HEAP32[$ptr$addr >> 2] = $ptr;
 HEAP32[$num_bytes$addr >> 2] = $num_bytes;
 __saudio_mutex_lock((HEAP32[$fifo$addr >> 2] | 0) + 24 | 0);
 HEAP32[$num_bytes_copied >> 2] = 0;
 if (!(HEAP8[HEAP32[$fifo$addr >> 2] >> 0] & 1)) {
  $40 = HEAP32[$fifo$addr >> 2] | 0;
  $mutex23 = $40 + 24 | 0;
  __saudio_mutex_unlock($mutex23);
  $41 = HEAP32[$num_bytes_copied >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 }
 if ((HEAP32[$num_bytes$addr >> 2] | 0) % (HEAP32[(HEAP32[$fifo$addr >> 2] | 0) + 4 >> 2] | 0) | 0) ___assert_fail(43800, 26275, 943, 43837);
 if ((HEAP32[$num_bytes$addr >> 2] | 0) > (Math_imul(HEAP32[(HEAP32[$fifo$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$fifo$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) ___assert_fail(43855, 26275, 944, 43837);
 HEAP32[$num_packets_needed >> 2] = (HEAP32[$num_bytes$addr >> 2] | 0) / (HEAP32[(HEAP32[$fifo$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$dst >> 2] = HEAP32[$ptr$addr >> 2];
 $call = __saudio_ring_count((HEAP32[$fifo$addr >> 2] | 0) + 28 | 0) | 0;
 if (($call | 0) < (HEAP32[$num_packets_needed >> 2] | 0)) {
  $40 = HEAP32[$fifo$addr >> 2] | 0;
  $mutex23 = $40 + 24 | 0;
  __saudio_mutex_unlock($mutex23);
  $41 = HEAP32[$num_bytes_copied >> 2] | 0;
  STACKTOP = sp;
  return $41 | 0;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num_packets_needed >> 2] | 0)) break;
  HEAP32[$packet_index >> 2] = __saudio_ring_dequeue((HEAP32[$fifo$addr >> 2] | 0) + 28 | 0) | 0;
  __saudio_ring_enqueue((HEAP32[$fifo$addr >> 2] | 0) + 4136 | 0, HEAP32[$packet_index >> 2] | 0);
  HEAP32[$src >> 2] = (HEAP32[(HEAP32[$fifo$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$packet_index >> 2] | 0, HEAP32[(HEAP32[$fifo$addr >> 2] | 0) + 4 >> 2] | 0) | 0);
  _memcpy(HEAP32[$dst >> 2] | 0, HEAP32[$src >> 2] | 0, HEAP32[(HEAP32[$fifo$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
  HEAP32[$dst >> 2] = (HEAP32[$dst >> 2] | 0) + (HEAP32[(HEAP32[$fifo$addr >> 2] | 0) + 4 >> 2] | 0);
  HEAP32[$num_bytes_copied >> 2] = (HEAP32[$num_bytes_copied >> 2] | 0) + (HEAP32[(HEAP32[$fifo$addr >> 2] | 0) + 4 >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((HEAP32[$num_bytes$addr >> 2] | 0) != (HEAP32[$num_bytes_copied >> 2] | 0)) ___assert_fail(43908, 26275, 957, 43837);
 $40 = HEAP32[$fifo$addr >> 2] | 0;
 $mutex23 = $40 + 24 | 0;
 __saudio_mutex_unlock($mutex23);
 $41 = HEAP32[$num_bytes_copied >> 2] | 0;
 STACKTOP = sp;
 return $41 | 0;
}

function _stbtt__cid_get_glyph_subrs($agg$result, $info, $glyph_index) {
 $agg$result = $agg$result | 0;
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 var $16 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $cff = 0, $cff$byval_copy = 0, $end = 0, $fdselect = 0, $fdselect1 = 0, $fdselector = 0, $fmt = 0, $fontdicts = 0, $glyph_index$addr = 0, $i = 0, $info$addr = 0, $nranges = 0, $start = 0, $tmp = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $agg$tmp$byval_copy = sp + 84 | 0;
 $cff$byval_copy = sp + 72 | 0;
 $info$addr = sp + 68 | 0;
 $glyph_index$addr = sp + 64 | 0;
 $fdselect = sp + 52 | 0;
 $nranges = sp + 48 | 0;
 $start = sp + 44 | 0;
 $end = sp + 40 | 0;
 $v = sp + 36 | 0;
 $fmt = sp + 32 | 0;
 $fdselector = sp + 28 | 0;
 $i = sp + 24 | 0;
 $tmp = sp + 12 | 0;
 $agg$tmp = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph_index$addr >> 2] = $glyph_index;
 $fdselect1 = (HEAP32[$info$addr >> 2] | 0) + 108 | 0;
 HEAP32[$fdselect >> 2] = HEAP32[$fdselect1 >> 2];
 HEAP32[$fdselect + 4 >> 2] = HEAP32[$fdselect1 + 4 >> 2];
 HEAP32[$fdselect + 8 >> 2] = HEAP32[$fdselect1 + 8 >> 2];
 HEAP32[$fdselector >> 2] = -1;
 _stbtt__buf_seek($fdselect, 0);
 HEAP32[$fmt >> 2] = (_stbtt__buf_get8($fdselect) | 0) & 255;
 L1 : do if (!(HEAP32[$fmt >> 2] | 0)) {
  _stbtt__buf_skip($fdselect, HEAP32[$glyph_index$addr >> 2] | 0);
  HEAP32[$fdselector >> 2] = (_stbtt__buf_get8($fdselect) | 0) & 255;
 } else if ((HEAP32[$fmt >> 2] | 0) == 3) {
  HEAP32[$nranges >> 2] = _stbtt__buf_get($fdselect, 2) | 0;
  HEAP32[$start >> 2] = _stbtt__buf_get($fdselect, 2) | 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$nranges >> 2] | 0)) break L1;
   HEAP32[$v >> 2] = (_stbtt__buf_get8($fdselect) | 0) & 255;
   HEAP32[$end >> 2] = _stbtt__buf_get($fdselect, 2) | 0;
   if ((HEAP32[$glyph_index$addr >> 2] | 0) >= (HEAP32[$start >> 2] | 0)) if ((HEAP32[$glyph_index$addr >> 2] | 0) < (HEAP32[$end >> 2] | 0)) break;
   HEAP32[$start >> 2] = HEAP32[$end >> 2];
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$fdselector >> 2] = HEAP32[$v >> 2];
 } while (0);
 if ((HEAP32[$fdselector >> 2] | 0) == -1) _stbtt__new_buf($tmp, 0, 0);
 $cff = (HEAP32[$info$addr >> 2] | 0) + 48 | 0;
 $fontdicts = (HEAP32[$info$addr >> 2] | 0) + 96 | 0;
 $16 = HEAP32[$fdselector >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$fontdicts >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$fontdicts + 4 >> 2];
 HEAP32[$agg$tmp$byval_copy + 8 >> 2] = HEAP32[$fontdicts + 8 >> 2];
 _stbtt__cff_index_get($agg$tmp, $agg$tmp$byval_copy, $16);
 HEAP32[$cff$byval_copy >> 2] = HEAP32[$cff >> 2];
 HEAP32[$cff$byval_copy + 4 >> 2] = HEAP32[$cff + 4 >> 2];
 HEAP32[$cff$byval_copy + 8 >> 2] = HEAP32[$cff + 8 >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp$byval_copy + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
 _stbtt__get_subrs($agg$result, $cff$byval_copy, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbi__expand_png_palette($a, $palette, $len, $pal_img_n) {
 $a = $a | 0;
 $palette = $palette | 0;
 $len = $len | 0;
 $pal_img_n = $pal_img_n | 0;
 var $59 = 0, $a$addr = 0, $cmp3 = 0, $i = 0, $n = 0, $n18 = 0, $orig = 0, $p = 0, $pal_img_n$addr = 0, $palette$addr = 0, $pixel_count = 0, $retval = 0, $temp_out = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 44 | 0;
 $a$addr = sp + 40 | 0;
 $palette$addr = sp + 36 | 0;
 $pal_img_n$addr = sp + 28 | 0;
 $i = sp + 24 | 0;
 $pixel_count = sp + 20 | 0;
 $p = sp + 16 | 0;
 $temp_out = sp + 12 | 0;
 $orig = sp + 8 | 0;
 $n = sp + 4 | 0;
 $n18 = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$palette$addr >> 2] = $palette;
 HEAP32[sp + 32 >> 2] = $len;
 HEAP32[$pal_img_n$addr >> 2] = $pal_img_n;
 HEAP32[$pixel_count >> 2] = Math_imul(HEAP32[HEAP32[HEAP32[$a$addr >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$orig >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2];
 HEAP32[$p >> 2] = _stbi__malloc_mad2(HEAP32[$pixel_count >> 2] | 0, HEAP32[$pal_img_n$addr >> 2] | 0, 0) | 0;
 if (!(HEAP32[$p >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(47531) | 0;
  $59 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 HEAP32[$temp_out >> 2] = HEAP32[$p >> 2];
 $cmp3 = (HEAP32[$pal_img_n$addr >> 2] | 0) == 3;
 HEAP32[$i >> 2] = 0;
 L5 : do if ($cmp3) while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break L5;
  HEAP32[$n >> 2] = (HEAPU8[(HEAP32[$orig >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) << 2;
  HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + (HEAP32[$n >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n >> 2] | 0) + 1) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n >> 2] | 0) + 2) >> 0] | 0;
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 3;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 } else while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break L5;
  HEAP32[$n18 >> 2] = (HEAPU8[(HEAP32[$orig >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) << 2;
  HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + (HEAP32[$n18 >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n18 >> 2] | 0) + 1) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n18 >> 2] | 0) + 2) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n18 >> 2] | 0) + 3) >> 0] | 0;
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 } while (0);
 _free(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] = HEAP32[$temp_out >> 2];
 HEAP32[$retval >> 2] = 1;
 $59 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $59 | 0;
}

function __ZN6DrMesh12optimizeMeshEv($this) {
 $this = $this | 0;
 var $$cast69 = 0, $$cast70 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $25 = 0, $27 = 0, $7 = 0, $__end_$i58 = 0, $__end_$i61 = 0, $call = 0, $call10 = 0, $i$0 = 0, $i86$0 = 0, $remap = 0, $result = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i31 = 0, $vertices = 0, $vertices18 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $result = sp + 16 | 0;
 $remap = sp;
 __ZN6DrMeshC2Ev($result);
 $call = __ZNK6DrMesh11vertexCountEv($this) | 0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEEC2Em($remap, $call);
 $vertices = $this + 12 | 0;
 $call10 = _meshopt_generateVertexRemap(HEAP32[$remap >> 2] | 0, 0, $call, HEAP32[$vertices >> 2] | 0, $call, 44) | 0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEm($result, $call);
 _meshopt_remapIndexBuffer(HEAP32[$result >> 2] | 0, 0, $call, HEAP32[$remap >> 2] | 0);
 $vertices18 = $result + 12 | 0;
 __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE6resizeEm($vertices18, $call10);
 _meshopt_remapVertexBuffer(HEAP32[$vertices18 >> 2] | 0, HEAP32[$vertices >> 2] | 0, $call, 44, HEAP32[$remap >> 2] | 0);
 $7 = HEAP32[$result >> 2] | 0;
 $__end_$i61 = $result + 4 | 0;
 $__end_$i58 = $result + 16 | 0;
 _meshopt_optimizeVertexCache($7, $7, (HEAP32[$__end_$i61 >> 2] | 0) - $7 >> 2, ((HEAP32[$__end_$i58 >> 2] | 0) - (HEAP32[$vertices18 >> 2] | 0) | 0) / 44 | 0);
 $11 = HEAP32[$result >> 2] | 0;
 $13 = HEAP32[$vertices18 >> 2] | 0;
 _meshopt_optimizeOverdraw($11, $11, (HEAP32[$__end_$i61 >> 2] | 0) - $11 >> 2, $13, ((HEAP32[$__end_$i58 >> 2] | 0) - $13 | 0) / 44 | 0, 44, 1.0499999523162842);
 $15 = HEAP32[$vertices18 >> 2] | 0;
 $16 = HEAP32[$result >> 2] | 0;
 _meshopt_optimizeVertexFetch($15, $16, (HEAP32[$__end_$i61 >> 2] | 0) - $16 >> 2, $15, ((HEAP32[$__end_$i58 >> 2] | 0) - $15 | 0) / 44 | 0, 44) | 0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEm($this, (HEAP32[$__end_$i61 >> 2] | 0) - (HEAP32[$result >> 2] | 0) >> 2);
 __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE6resizeEm($vertices, ((HEAP32[$__end_$i58 >> 2] | 0) - (HEAP32[$vertices18 >> 2] | 0) | 0) / 44 | 0);
 $25 = HEAP32[$result >> 2] | 0;
 $sub$ptr$div$i31 = (HEAP32[$__end_$i61 >> 2] | 0) - $25 >> 2;
 $$cast69 = $25;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == ($sub$ptr$div$i31 | 0)) break;
  HEAP32[(HEAP32[$this >> 2] | 0) + ($i$0 << 2) >> 2] = HEAP32[$$cast69 + ($i$0 << 2) >> 2];
  $i$0 = $i$0 + 1 | 0;
 }
 $27 = HEAP32[$vertices18 >> 2] | 0;
 $sub$ptr$div$i = ((HEAP32[$__end_$i58 >> 2] | 0) - $27 | 0) / 44 | 0;
 $$cast70 = $27;
 $i86$0 = 0;
 while (1) {
  if (($i86$0 | 0) == ($sub$ptr$div$i | 0)) break;
  dest = (HEAP32[$vertices >> 2] | 0) + ($i86$0 * 44 | 0) | 0;
  src = $$cast70 + ($i86$0 * 44 | 0) | 0;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $i86$0 = $i86$0 + 1 | 0;
 }
 __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($remap);
 __ZN6DrMeshD2Ev($result);
 STACKTOP = sp;
 return;
}

function _fonsAddFontMem($stash, $name, $data, $dataSize, $freeData) {
 $stash = $stash | 0;
 $name = $name | 0;
 $data = $data | 0;
 $dataSize = $dataSize | 0;
 $freeData = $freeData | 0;
 var $24 = 0, $40 = 0, $ascent = 0, $data$addr = 0, $dataSize$addr = 0, $descent = 0, $fh = 0, $font = 0, $freeData$addr = 0, $i = 0, $idx = 0, $lineGap = 0, $name$addr = 0, $nfonts = 0, $retval = 0, $stash$addr = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $retval = sp + 48 | 0;
 $stash$addr = sp + 44 | 0;
 $name$addr = sp + 40 | 0;
 $data$addr = sp + 36 | 0;
 $dataSize$addr = sp + 32 | 0;
 $freeData$addr = sp + 28 | 0;
 $i = sp + 24 | 0;
 $ascent = sp + 20 | 0;
 $descent = sp + 16 | 0;
 $fh = sp + 12 | 0;
 $lineGap = sp + 8 | 0;
 $font = sp + 4 | 0;
 $idx = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$name$addr >> 2] = $name;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$dataSize$addr >> 2] = $dataSize;
 HEAP32[$freeData$addr >> 2] = $freeData;
 HEAP32[$idx >> 2] = _fons__allocFont(HEAP32[$stash$addr >> 2] | 0) | 0;
 if ((HEAP32[$idx >> 2] | 0) == -1) {
  HEAP32[$retval >> 2] = -1;
  $40 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 HEAP32[$font >> 2] = HEAP32[(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] | 0) + (HEAP32[$idx >> 2] << 2) >> 2];
 _strncpy((HEAP32[$font >> 2] | 0) + 120 | 0, HEAP32[$name$addr >> 2] | 0, 64) | 0;
 HEAP8[(HEAP32[$font >> 2] | 0) + 120 + 63 >> 0] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 256) break;
  HEAP32[(HEAP32[$font >> 2] | 0) + 220 + (HEAP32[$i >> 2] << 2) >> 2] = -1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$font >> 2] | 0) + 188 >> 2] = HEAP32[$dataSize$addr >> 2];
 HEAP32[(HEAP32[$font >> 2] | 0) + 184 >> 2] = HEAP32[$data$addr >> 2];
 HEAP8[(HEAP32[$font >> 2] | 0) + 192 >> 0] = HEAP32[$freeData$addr >> 2];
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20568 >> 2] = 0;
 $tobool = (_fons__tt_loadFont(HEAP32[$stash$addr >> 2] | 0, HEAP32[$font >> 2] | 0, HEAP32[$data$addr >> 2] | 0, HEAP32[$dataSize$addr >> 2] | 0) | 0) != 0;
 $24 = HEAP32[$font >> 2] | 0;
 if ($tobool) {
  _fons__tt_getFontVMetrics($24, $ascent, $descent, $lineGap);
  HEAP32[$fh >> 2] = (HEAP32[$ascent >> 2] | 0) - (HEAP32[$descent >> 2] | 0);
  HEAPF32[(HEAP32[$font >> 2] | 0) + 196 >> 2] = +(HEAP32[$ascent >> 2] | 0) / +(HEAP32[$fh >> 2] | 0);
  HEAPF32[(HEAP32[$font >> 2] | 0) + 200 >> 2] = +(HEAP32[$descent >> 2] | 0) / +(HEAP32[$fh >> 2] | 0);
  HEAPF32[(HEAP32[$font >> 2] | 0) + 204 >> 2] = +((HEAP32[$fh >> 2] | 0) + (HEAP32[$lineGap >> 2] | 0) | 0) / +(HEAP32[$fh >> 2] | 0);
  HEAP32[$retval >> 2] = HEAP32[$idx >> 2];
  $40 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 } else {
  _fons__freeFont($24);
  $nfonts = (HEAP32[$stash$addr >> 2] | 0) + 76 | 0;
  HEAP32[$nfonts >> 2] = (HEAP32[$nfonts >> 2] | 0) + -1;
  HEAP32[$retval >> 2] = -1;
  $40 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 return 0;
}

function _stbi__out_gif_code($g, $code) {
 $g = $g | 0;
 $code = $code | 0;
 var $c = 0, $code$addr = 0, $cur_x32 = 0, $cur_y39 = 0, $g$addr = 0, $idx = 0, $mul48 = 0, $p = 0, $parse53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $g$addr = sp + 12 | 0;
 $code$addr = sp + 16 | 0;
 $p = sp + 8 | 0;
 $c = sp + 4 | 0;
 $idx = sp;
 HEAP32[$g$addr >> 2] = $g;
 HEAP16[$code$addr >> 1] = $code;
 if ((HEAP16[(HEAP32[$g$addr >> 2] | 0) + 2088 + (HEAPU16[$code$addr >> 1] << 2) >> 1] | 0) >= 0) _stbi__out_gif_code(HEAP32[$g$addr >> 2] | 0, HEAP16[(HEAP32[$g$addr >> 2] | 0) + 2088 + (HEAPU16[$code$addr >> 1] << 2) >> 1] | 0);
 if ((HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34892 >> 2] | 0) >= (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34884 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$idx >> 2] = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34888 >> 2] | 0) + (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34892 >> 2] | 0);
 HEAP32[$p >> 2] = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$idx >> 2] | 0);
 HEAP8[(HEAP32[(HEAP32[$g$addr >> 2] | 0) + 16 >> 2] | 0) + ((HEAP32[$idx >> 2] | 0) / 4 | 0) >> 0] = 1;
 HEAP32[$c >> 2] = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34856 >> 2] | 0) + (HEAPU8[(HEAP32[$g$addr >> 2] | 0) + 2088 + (HEAPU16[$code$addr >> 1] << 2) + 3 >> 0] << 2);
 if ((HEAPU8[(HEAP32[$c >> 2] | 0) + 3 >> 0] | 0) > 128) {
  HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$c >> 2] | 0) + 2 >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$c >> 2] | 0) + 1 >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[HEAP32[$c >> 2] >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[$c >> 2] | 0) + 3 >> 0] | 0;
 }
 $cur_x32 = (HEAP32[$g$addr >> 2] | 0) + 34888 | 0;
 HEAP32[$cur_x32 >> 2] = (HEAP32[$cur_x32 >> 2] | 0) + 4;
 if ((HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34888 >> 2] | 0) < (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34880 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34888 >> 2] = HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34872 >> 2];
 $cur_y39 = (HEAP32[$g$addr >> 2] | 0) + 34892 | 0;
 HEAP32[$cur_y39 >> 2] = (HEAP32[$cur_y39 >> 2] | 0) + (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34864 >> 2] | 0);
 while (1) {
  if ((HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34892 >> 2] | 0) < (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34884 >> 2] | 0)) {
   label = 11;
   break;
  }
  if ((HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34860 >> 2] | 0) <= 0) {
   label = 11;
   break;
  }
  $mul48 = Math_imul(1 << HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34860 >> 2], HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34896 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34864 >> 2] = $mul48;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34892 >> 2] = (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34876 >> 2] | 0) + (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 34864 >> 2] >> 1);
  $parse53 = (HEAP32[$g$addr >> 2] | 0) + 34860 | 0;
  HEAP32[$parse53 >> 2] = (HEAP32[$parse53 >> 2] | 0) + -1;
 }
 if ((label | 0) == 11) {
  STACKTOP = sp;
  return;
 }
}

function _stbi__hdr_to_ldr($data, $x, $y, $comp) {
 $data = $data | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 var $46 = 0, $9 = 0, $comp$addr = 0, $data$addr = 0, $i = 0, $k = 0, $mul12 = 0, $mul28 = 0, $mul35 = 0, $mul50 = 0, $n = 0, $output = 0, $retval = 0, $tobool3 = 0, $x$addr = 0, $y$addr = 0, $z = 0, $z34 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 40 | 0;
 $data$addr = sp + 36 | 0;
 $x$addr = sp + 32 | 0;
 $y$addr = sp + 28 | 0;
 $comp$addr = sp + 24 | 0;
 $i = sp + 20 | 0;
 $k = sp + 16 | 0;
 $n = sp + 12 | 0;
 $output = sp + 8 | 0;
 $z = sp + 4 | 0;
 $z34 = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 if (!(HEAP32[$data$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $46 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $46 | 0;
 }
 HEAP32[$output >> 2] = _stbi__malloc_mad3(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, 0) | 0;
 if (!(HEAP32[$output >> 2] | 0)) {
  _free(HEAP32[$data$addr >> 2] | 0);
  $tobool3 = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool3 ? 0 : 0;
  $46 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $46 | 0;
 }
 $9 = HEAP32[$comp$addr >> 2] | 0;
 if (HEAP32[$comp$addr >> 2] & 1 | 0) HEAP32[$n >> 2] = $9; else HEAP32[$n >> 2] = $9 - 1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0) | 0)) break;
  HEAP32[$k >> 2] = 0;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
   $mul12 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAPF32[$z >> 2] = +Math_pow(+(+HEAPF32[(HEAP32[$data$addr >> 2] | 0) + ($mul12 + (HEAP32[$k >> 2] | 0) << 2) >> 2] * 1.0), +(.45454543828964233)) * 255.0 + .5;
   if (+HEAPF32[$z >> 2] < 0.0) HEAPF32[$z >> 2] = 0.0;
   if (+HEAPF32[$z >> 2] > 255.0) HEAPF32[$z >> 2] = 255.0;
   $mul28 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAP8[(HEAP32[$output >> 2] | 0) + ($mul28 + (HEAP32[$k >> 2] | 0)) >> 0] = ~~+HEAPF32[$z >> 2];
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  if ((HEAP32[$k >> 2] | 0) < (HEAP32[$comp$addr >> 2] | 0)) {
   $mul35 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAPF32[$z34 >> 2] = +HEAPF32[(HEAP32[$data$addr >> 2] | 0) + ($mul35 + (HEAP32[$k >> 2] | 0) << 2) >> 2] * 255.0 + .5;
   if (+HEAPF32[$z34 >> 2] < 0.0) HEAPF32[$z34 >> 2] = 0.0;
   if (+HEAPF32[$z34 >> 2] > 255.0) HEAPF32[$z34 >> 2] = 255.0;
   $mul50 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAP8[(HEAP32[$output >> 2] | 0) + ($mul50 + (HEAP32[$k >> 2] | 0)) >> 0] = ~~+HEAPF32[$z34 >> 2];
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _free(HEAP32[$data$addr >> 2] | 0);
 HEAP32[$retval >> 2] = HEAP32[$output >> 2];
 $46 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $46 | 0;
}

function __ZN13TPPLPartition11AddDiagonalEPNS_14MonotoneVertexEPlllPcPNSt3__221__tree_const_iteratorINS_12ScanLineEdgeEPNS4_11__tree_nodeIS6_PvEElEEPNS4_3setIS6_NS4_4lessIS6_EENS4_9allocatorIS6_EEEES2_($this, $vertices, $numvertices, $index1, $index2, $vertextypes, $edgeTreeIterators, $edgeTree, $helpers) {
 $this = $this | 0;
 $vertices = $vertices | 0;
 $numvertices = $numvertices | 0;
 $index1 = $index1 | 0;
 $index2 = $index2 | 0;
 $vertextypes = $vertextypes | 0;
 $edgeTreeIterators = $edgeTreeIterators | 0;
 $edgeTree = $edgeTree | 0;
 $helpers = $helpers | 0;
 var $0 = 0, $11 = 0, $6 = 0, $__value_$i$i$i$i$i = 0, $arrayidx = 0, $arrayidx3 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $inc = 0, $next = 0, $next13 = 0;
 $0 = HEAP32[$numvertices >> 2] | 0;
 $inc = $0 + 1 | 0;
 HEAP32[$numvertices >> 2] = $0 + 2;
 $arrayidx = $vertices + ($index1 << 5) | 0;
 $arrayidx3 = $vertices + ($0 << 5) | 0;
 HEAP32[$arrayidx3 >> 2] = HEAP32[$arrayidx >> 2];
 HEAP32[$arrayidx3 + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2];
 HEAP32[$arrayidx3 + 8 >> 2] = HEAP32[$arrayidx + 8 >> 2];
 HEAP32[$arrayidx3 + 12 >> 2] = HEAP32[$arrayidx + 12 >> 2];
 HEAP32[$arrayidx3 + 16 >> 2] = HEAP32[$arrayidx + 16 >> 2];
 HEAP32[$arrayidx3 + 20 >> 2] = HEAP32[$arrayidx + 20 >> 2];
 $arrayidx5 = $vertices + ($index2 << 5) | 0;
 $arrayidx7 = $vertices + ($inc << 5) | 0;
 HEAP32[$arrayidx7 >> 2] = HEAP32[$arrayidx5 >> 2];
 HEAP32[$arrayidx7 + 4 >> 2] = HEAP32[$arrayidx5 + 4 >> 2];
 HEAP32[$arrayidx7 + 8 >> 2] = HEAP32[$arrayidx5 + 8 >> 2];
 HEAP32[$arrayidx7 + 12 >> 2] = HEAP32[$arrayidx5 + 12 >> 2];
 HEAP32[$arrayidx7 + 16 >> 2] = HEAP32[$arrayidx5 + 16 >> 2];
 HEAP32[$arrayidx7 + 20 >> 2] = HEAP32[$arrayidx5 + 20 >> 2];
 $next = $vertices + ($index2 << 5) + 28 | 0;
 HEAP32[$vertices + ($inc << 5) + 28 >> 2] = HEAP32[$next >> 2];
 $next13 = $vertices + ($index1 << 5) + 28 | 0;
 HEAP32[$vertices + ($0 << 5) + 28 >> 2] = HEAP32[$next13 >> 2];
 HEAP32[$vertices + (HEAP32[$next >> 2] << 5) + 24 >> 2] = $inc;
 HEAP32[$vertices + (HEAP32[$next13 >> 2] << 5) + 24 >> 2] = $0;
 HEAP32[$next13 >> 2] = $inc;
 HEAP32[$vertices + ($inc << 5) + 24 >> 2] = $index1;
 HEAP32[$next >> 2] = $0;
 HEAP32[$vertices + ($0 << 5) + 24 >> 2] = $index2;
 HEAP8[$vertextypes + $0 >> 0] = HEAP8[$vertextypes + $index1 >> 0] | 0;
 $6 = HEAP32[$edgeTreeIterators + ($index1 << 2) >> 2] | 0;
 HEAP32[$edgeTreeIterators + ($0 << 2) >> 2] = $6;
 HEAP32[$helpers + ($0 << 2) >> 2] = HEAP32[$helpers + ($index1 << 2) >> 2];
 $__value_$i$i$i$i$i = $edgeTree + 4 | 0;
 if (($__value_$i$i$i$i$i | 0) != ($6 | 0)) HEAP32[$6 + 16 >> 2] = $0;
 HEAP8[$vertextypes + $inc >> 0] = HEAP8[$vertextypes + $index2 >> 0] | 0;
 $11 = HEAP32[$edgeTreeIterators + ($index2 << 2) >> 2] | 0;
 HEAP32[$edgeTreeIterators + ($inc << 2) >> 2] = $11;
 HEAP32[$helpers + ($inc << 2) >> 2] = HEAP32[$helpers + ($index2 << 2) >> 2];
 if (($__value_$i$i$i$i$i | 0) != ($11 | 0)) HEAP32[$11 + 16 >> 2] = $inc;
 return;
}

function _meshopt_generateVertexRemap($destination, $indices, $index_count, $vertices, $vertex_count, $vertex_size) {
 $destination = $destination | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $vertices = $vertices | 0;
 $vertex_count = $vertex_count | 0;
 $vertex_size = $vertex_size | 0;
 var $3 = 0, $4 = 0, $allocator = 0, $arrayidx21 = 0, $call = 0, $call12 = 0, $call26 = 0, $cond = 0, $hasher = 0, $i$0 = 0, $index = 0, $next_vertex$0 = 0, $next_vertex$0$sink = 0, $next_vertex$2 = 0, $next_vertex$2$ph = 0, $ref$tmp = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $allocator = sp + 20 | 0;
 $hasher = sp + 8 | 0;
 $index = sp + 4 | 0;
 $ref$tmp = sp;
 $tobool = ($indices | 0) != 0;
 if (!($tobool | ($index_count | 0) == ($vertex_count | 0))) ___assert_fail(45732, 45771, 189, 45855);
 if (($index_count >>> 0) % 3 | 0 | 0) ___assert_fail(47099, 45771, 190, 45855);
 if (($vertex_size + -1 | 0) >>> 0 >= 256) ___assert_fail(47282, 45771, 191, 45855);
 __ZN17meshopt_AllocatorC2Ev($allocator);
 _memset($destination | 0, -1, $vertex_count << 2 | 0) | 0;
 HEAP32[$hasher >> 2] = $vertices;
 HEAP32[$hasher + 4 >> 2] = $vertex_size;
 HEAP32[$hasher + 8 >> 2] = $vertex_size;
 $call = __ZN7meshoptL11hashBucketsEm($vertex_count) | 0;
 $call12 = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $call) | 0;
 _memset($call12 | 0, -1, $call << 2 | 0) | 0;
 $i$0 = 0;
 $next_vertex$0 = 0;
 while (1) {
  if ($i$0 >>> 0 >= $index_count >>> 0) {
   label = 9;
   break;
  }
  if ($tobool) $cond = HEAP32[$indices + ($i$0 << 2) >> 2] | 0; else $cond = $i$0;
  HEAP32[$index >> 2] = $cond;
  if ($cond >>> 0 >= $vertex_count >>> 0) {
   label = 13;
   break;
  }
  $arrayidx21 = $destination + ($cond << 2) | 0;
  if ((HEAP32[$arrayidx21 >> 2] | 0) == -1) {
   HEAP32[$ref$tmp >> 2] = -1;
   $call26 = __ZN7meshoptL10hashLookupIjNS_12VertexHasherEEEPT_S3_mRKT0_RKS2_S8_($call12, $call, $hasher, $index, $ref$tmp) | 0;
   $3 = HEAP32[$call26 >> 2] | 0;
   if (($3 | 0) == -1) {
    HEAP32[$call26 >> 2] = $cond;
    $next_vertex$0$sink = $next_vertex$0;
    $next_vertex$2$ph = $next_vertex$0 + 1 | 0;
   } else {
    $4 = HEAP32[$destination + ($3 << 2) >> 2] | 0;
    if (($4 | 0) == -1) {
     label = 18;
     break;
    } else {
     $next_vertex$0$sink = $4;
     $next_vertex$2$ph = $next_vertex$0;
    }
   }
   HEAP32[$arrayidx21 >> 2] = $next_vertex$0$sink;
   $next_vertex$2 = $next_vertex$2$ph;
  } else $next_vertex$2 = $next_vertex$0;
  $i$0 = $i$0 + 1 | 0;
  $next_vertex$0 = $next_vertex$2;
 }
 if ((label | 0) == 9) if ($next_vertex$0 >>> 0 > $vertex_count >>> 0) ___assert_fail(47226, 45771, 229, 45855); else {
  __ZN17meshopt_AllocatorD2Ev($allocator);
  STACKTOP = sp;
  return $next_vertex$0 | 0;
 } else if ((label | 0) == 13) ___assert_fail(47205, 45771, 208, 45855); else if ((label | 0) == 18) ___assert_fail(45883, 45771, 222, 45855);
 return 0;
}

function __sg_validate_update_image($img, $data) {
 $img = $img | 0;
 $data = $data | 0;
 var $bytes_per_slice = 0, $call41 = 0, $cond19 = 0, $cond29 = 0, $data$addr = 0, $expected_size = 0, $face_index = 0, $img$addr = 0, $mip_height = 0, $mip_index = 0, $mip_width = 0, $num_faces = 0, $num_mips = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $img$addr = sp + 36 | 0;
 $data$addr = sp + 32 | 0;
 $num_faces = sp + 28 | 0;
 $num_mips = sp + 24 | 0;
 $face_index = sp + 20 | 0;
 $mip_index = sp + 16 | 0;
 $mip_width = sp + 12 | 0;
 $mip_height = sp + 8 | 0;
 $bytes_per_slice = sp + 4 | 0;
 $expected_size = sp;
 HEAP32[$img$addr >> 2] = $img;
 HEAP32[$data$addr >> 2] = $data;
 if (!((HEAP32[$img$addr >> 2] | 0) != 0 & (HEAP32[$data$addr >> 2] | 0) != 0)) ___assert_fail(41198, 21600, 13801, 41210);
 __sg_validate_begin();
 __sg_validate((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 24 >> 2] | 0) != 1, 90);
 __sg_validate((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 64 >> 2] | 0) != (HEAP32[541057] | 0), 94);
 __sg_validate((__sg_is_compressed_pixel_format(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0) | 0) ^ 1, 93);
 HEAP32[$num_faces >> 2] = (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 >> 2] | 0) == 2 ? 6 : 1;
 HEAP32[$num_mips >> 2] = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 20 >> 2];
 HEAP32[$face_index >> 2] = 0;
 while (1) {
  if ((HEAP32[$face_index >> 2] | 0) >= (HEAP32[$num_faces >> 2] | 0)) break;
  HEAP32[$mip_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$mip_index >> 2] | 0) >= (HEAP32[$num_mips >> 2] | 0)) break;
   __sg_validate(0 != (HEAP32[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$face_index >> 2] << 7) + (HEAP32[$mip_index >> 2] << 3) >> 2] | 0), 91);
   if ((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 8 >> 2] >> HEAP32[$mip_index >> 2] | 0) > 1) $cond19 = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 8 >> 2] >> HEAP32[$mip_index >> 2]; else $cond19 = 1;
   HEAP32[$mip_width >> 2] = $cond19;
   if ((HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 12 >> 2] >> HEAP32[$mip_index >> 2] | 0) > 1) $cond29 = HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 12 >> 2] >> HEAP32[$mip_index >> 2]; else $cond29 = 1;
   HEAP32[$mip_height >> 2] = $cond29;
   HEAP32[$bytes_per_slice >> 2] = __sg_surface_pitch(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 28 >> 2] | 0, HEAP32[$mip_width >> 2] | 0, HEAP32[$mip_height >> 2] | 0, 1) | 0;
   HEAP32[$expected_size >> 2] = Math_imul(HEAP32[$bytes_per_slice >> 2] | 0, HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 16 >> 2] | 0) | 0;
   __sg_validate((HEAP32[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$face_index >> 2] << 7) + (HEAP32[$mip_index >> 2] << 3) + 4 >> 2] | 0) >>> 0 <= (HEAP32[$expected_size >> 2] | 0) >>> 0, 92);
   HEAP32[$mip_index >> 2] = (HEAP32[$mip_index >> 2] | 0) + 1;
  }
  HEAP32[$face_index >> 2] = (HEAP32[$face_index >> 2] | 0) + 1;
 }
 $call41 = __sg_validate_end() | 0;
 STACKTOP = sp;
 return $call41 | 0;
}

function __sfetch_pool_init($pool, $num_items) {
 $pool = $pool | 0;
 $num_items = $num_items | 0;
 var $34 = 0, $36 = 0, $38 = 0, $42 = 0, $43 = 0, $call = 0, $call11 = 0, $call18 = 0, $free_slots_size = 0, $free_top29 = 0, $gen_ctrs_size = 0, $i = 0, $items_size = 0, $num_items$addr = 0, $pool$addr = 0, $tobool31 = 0, $valid30 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $pool$addr = sp + 20 | 0;
 $num_items$addr = sp + 16 | 0;
 $items_size = sp + 12 | 0;
 $gen_ctrs_size = sp + 8 | 0;
 $free_slots_size = sp + 4 | 0;
 $i = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$num_items$addr >> 2] = $num_items;
 if (!((HEAP32[$pool$addr >> 2] | 0) != 0 & (HEAP32[$num_items$addr >> 2] | 0) >>> 0 > 0 & (HEAP32[$num_items$addr >> 2] | 0) >>> 0 < 65535)) ___assert_fail(42094, 25510, 1376, 42147);
 if (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) ___assert_fail(42165, 25510, 1377, 42147);
 HEAP32[HEAP32[$pool$addr >> 2] >> 2] = (HEAP32[$num_items$addr >> 2] | 0) + 1;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$items_size >> 2] = (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) * 1232;
 $call = _malloc(HEAP32[$items_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] = $call;
 HEAP32[$gen_ctrs_size >> 2] = HEAP32[HEAP32[$pool$addr >> 2] >> 2] << 2;
 $call11 = _malloc(HEAP32[$gen_ctrs_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 16 >> 2] = $call11;
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 16 >> 2] | 0)) ___assert_fail(29495, 25510, 1386, 42147);
 HEAP32[$free_slots_size >> 2] = HEAP32[$num_items$addr >> 2] << 2;
 $call18 = _malloc(HEAP32[$free_slots_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] = $call18;
 if (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) if (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0) {
  _memset(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0, 0, HEAP32[$items_size >> 2] | 0) | 0;
  _memset(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 16 >> 2] | 0, 0, HEAP32[$gen_ctrs_size >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break;
   $34 = HEAP32[$i >> 2] | 0;
   $36 = HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0;
   $free_top29 = (HEAP32[$pool$addr >> 2] | 0) + 4 | 0;
   $38 = HEAP32[$free_top29 >> 2] | 0;
   HEAP32[$free_top29 >> 2] = $38 + 1;
   HEAP32[$36 + ($38 << 2) >> 2] = $34;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  }
  HEAP8[(HEAP32[$pool$addr >> 2] | 0) + 20 >> 0] = 1;
  $42 = HEAP32[$pool$addr >> 2] | 0;
  $valid30 = $42 + 20 | 0;
  $43 = HEAP8[$valid30 >> 0] | 0;
  $tobool31 = $43 & 1;
  STACKTOP = sp;
  return $tobool31 | 0;
 }
 __sfetch_pool_discard(HEAP32[$pool$addr >> 2] | 0);
 $42 = HEAP32[$pool$addr >> 2] | 0;
 $valid30 = $42 + 20 | 0;
 $43 = HEAP8[$valid30 >> 0] | 0;
 $tobool31 = $43 & 1;
 STACKTOP = sp;
 return $tobool31 | 0;
}

function _stbtt_MakeGlyphBitmapSubpixel($info, $output, $out_w, $out_h, $out_stride, $scale_x, $scale_y, $shift_x, $shift_y, $glyph) {
 $info = $info | 0;
 $output = $output | 0;
 $out_w = $out_w | 0;
 $out_h = $out_h | 0;
 $out_stride = $out_stride | 0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $glyph = $glyph | 0;
 var $24 = 0, $25 = 0, $26 = 0, $gbm = 0, $glyph$addr = 0, $info$addr = 0, $ix0 = 0, $iy0 = 0, $num_verts = 0, $out_h$addr = 0, $out_stride$addr = 0, $out_w$addr = 0, $output$addr = 0, $scale_x$addr = 0, $scale_y$addr = 0, $shift_x$addr = 0, $shift_y$addr = 0, $vertices = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $info$addr = sp + 68 | 0;
 $output$addr = sp + 64 | 0;
 $out_w$addr = sp + 60 | 0;
 $out_h$addr = sp + 56 | 0;
 $out_stride$addr = sp + 52 | 0;
 $scale_x$addr = sp + 48 | 0;
 $scale_y$addr = sp + 44 | 0;
 $shift_x$addr = sp + 40 | 0;
 $shift_y$addr = sp + 36 | 0;
 $glyph$addr = sp + 32 | 0;
 $ix0 = sp + 28 | 0;
 $iy0 = sp + 24 | 0;
 $vertices = sp + 20 | 0;
 $num_verts = sp + 16 | 0;
 $gbm = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$output$addr >> 2] = $output;
 HEAP32[$out_w$addr >> 2] = $out_w;
 HEAP32[$out_h$addr >> 2] = $out_h;
 HEAP32[$out_stride$addr >> 2] = $out_stride;
 HEAPF32[$scale_x$addr >> 2] = $scale_x;
 HEAPF32[$scale_y$addr >> 2] = $scale_y;
 HEAPF32[$shift_x$addr >> 2] = $shift_x;
 HEAPF32[$shift_y$addr >> 2] = $shift_y;
 HEAP32[$glyph$addr >> 2] = $glyph;
 HEAP32[$num_verts >> 2] = _stbtt_GetGlyphShape(HEAP32[$info$addr >> 2] | 0, HEAP32[$glyph$addr >> 2] | 0, $vertices) | 0;
 _stbtt_GetGlyphBitmapBoxSubpixel(HEAP32[$info$addr >> 2] | 0, HEAP32[$glyph$addr >> 2] | 0, +HEAPF32[$scale_x$addr >> 2], +HEAPF32[$scale_y$addr >> 2], +HEAPF32[$shift_x$addr >> 2], +HEAPF32[$shift_y$addr >> 2], $ix0, $iy0, 0, 0);
 HEAP32[$gbm + 12 >> 2] = HEAP32[$output$addr >> 2];
 HEAP32[$gbm >> 2] = HEAP32[$out_w$addr >> 2];
 HEAP32[$gbm + 4 >> 2] = HEAP32[$out_h$addr >> 2];
 HEAP32[$gbm + 8 >> 2] = HEAP32[$out_stride$addr >> 2];
 if (!(HEAP32[$gbm >> 2] | 0)) {
  $24 = HEAP32[$vertices >> 2] | 0;
  $25 = HEAP32[$info$addr >> 2] | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  _fons__tmpfree($24, $26);
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$gbm + 4 >> 2] | 0)) {
  $24 = HEAP32[$vertices >> 2] | 0;
  $25 = HEAP32[$info$addr >> 2] | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  _fons__tmpfree($24, $26);
  STACKTOP = sp;
  return;
 }
 _stbtt_Rasterize($gbm, .3499999940395355, HEAP32[$vertices >> 2] | 0, HEAP32[$num_verts >> 2] | 0, +HEAPF32[$scale_x$addr >> 2], +HEAPF32[$scale_y$addr >> 2], +HEAPF32[$shift_x$addr >> 2], +HEAPF32[$shift_y$addr >> 2], HEAP32[$ix0 >> 2] | 0, HEAP32[$iy0 >> 2] | 0, 1, HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0);
 $24 = HEAP32[$vertices >> 2] | 0;
 $25 = HEAP32[$info$addr >> 2] | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 _fons__tmpfree($24, $26);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv($this) {
 $this = $this | 0;
 var $Dimension = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call11 = 0, $call21 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $Dimension = sp;
 $agg$tmp = sp + 8 | 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 65) | 0) {
  __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($Dimension);
  if ((((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp, $this, 0);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($Dimension, $agg$tmp$byval_copy);
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) label = 8; else $retval$2 = 0;
  } else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) label = 8; else {
   $call11 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   if (!$call11) $retval$2 = 0; else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
    __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($Dimension, $call11);
    label = 8;
   } else $retval$2 = 0;
  }
  if ((label | 0) == 8) {
   $call21 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = $call21;
   if (!$call21) $retval$1 = 0; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_($this, $agg$tmp$byval_copy, $Dimension) | 0;
   $retval$2 = $retval$1;
  }
  $retval$3 = $retval$2;
 } else $retval$3 = 0;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function _fons__atlasAddRect($atlas, $rw, $rh, $rx, $ry) {
 $atlas = $atlas | 0;
 $rw = $rw | 0;
 $rh = $rh | 0;
 $rx = $rx | 0;
 $ry = $ry | 0;
 var $47 = 0, $atlas$addr = 0, $besth = 0, $besti = 0, $bestw = 0, $bestx = 0, $besty = 0, $i = 0, $retval = 0, $rh$addr = 0, $rw$addr = 0, $rx$addr = 0, $ry$addr = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $retval = sp + 48 | 0;
 $atlas$addr = sp + 44 | 0;
 $rw$addr = sp + 40 | 0;
 $rh$addr = sp + 36 | 0;
 $rx$addr = sp + 32 | 0;
 $ry$addr = sp + 28 | 0;
 $besth = sp + 24 | 0;
 $bestw = sp + 20 | 0;
 $besti = sp + 16 | 0;
 $bestx = sp + 12 | 0;
 $besty = sp + 8 | 0;
 $i = sp + 4 | 0;
 $y = sp;
 HEAP32[$atlas$addr >> 2] = $atlas;
 HEAP32[$rw$addr >> 2] = $rw;
 HEAP32[$rh$addr >> 2] = $rh;
 HEAP32[$rx$addr >> 2] = $rx;
 HEAP32[$ry$addr >> 2] = $ry;
 HEAP32[$besth >> 2] = HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$bestw >> 2] = HEAP32[HEAP32[$atlas$addr >> 2] >> 2];
 HEAP32[$besti >> 2] = -1;
 HEAP32[$bestx >> 2] = -1;
 HEAP32[$besty >> 2] = -1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 12 >> 2] | 0)) break;
  HEAP32[$y >> 2] = _fons__atlasRectFits(HEAP32[$atlas$addr >> 2] | 0, HEAP32[$i >> 2] | 0, HEAP32[$rw$addr >> 2] | 0, HEAP32[$rh$addr >> 2] | 0) | 0;
  do if ((HEAP32[$y >> 2] | 0) != -1) {
   if (((HEAP32[$y >> 2] | 0) + (HEAP32[$rh$addr >> 2] | 0) | 0) >= (HEAP32[$besth >> 2] | 0)) {
    if (((HEAP32[$y >> 2] | 0) + (HEAP32[$rh$addr >> 2] | 0) | 0) != (HEAP32[$besth >> 2] | 0)) break;
    if ((HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) + 4 >> 1] | 0) >= (HEAP32[$bestw >> 2] | 0)) break;
   }
   HEAP32[$besti >> 2] = HEAP32[$i >> 2];
   HEAP32[$bestw >> 2] = HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) + 4 >> 1];
   HEAP32[$besth >> 2] = (HEAP32[$y >> 2] | 0) + (HEAP32[$rh$addr >> 2] | 0);
   HEAP32[$bestx >> 2] = HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) >> 1];
   HEAP32[$besty >> 2] = HEAP32[$y >> 2];
  } while (0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((HEAP32[$besti >> 2] | 0) == -1) {
  HEAP32[$retval >> 2] = 0;
  $47 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $47 | 0;
 }
 if (!(_fons__atlasAddSkylineLevel(HEAP32[$atlas$addr >> 2] | 0, HEAP32[$besti >> 2] | 0, HEAP32[$bestx >> 2] | 0, HEAP32[$besty >> 2] | 0, HEAP32[$rw$addr >> 2] | 0, HEAP32[$rh$addr >> 2] | 0) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $47 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $47 | 0;
 } else {
  HEAP32[HEAP32[$rx$addr >> 2] >> 2] = HEAP32[$bestx >> 2];
  HEAP32[HEAP32[$ry$addr >> 2] >> 2] = HEAP32[$besty >> 2];
  HEAP32[$retval >> 2] = 1;
  $47 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $47 | 0;
 }
 return 0;
}

function __sapp_emsc_touch_cb($emsc_type, $emsc_event, $user_data) {
 $emsc_type = $emsc_type | 0;
 $emsc_event = $emsc_event | 0;
 $user_data = $user_data | 0;
 var $16 = 0, $38 = 0, $conv32 = 0, $dst = 0, $emsc_event$addr = 0, $emsc_type$addr = 0, $i = 0, $retval1 = 0, $src = 0, $tobool31 = 0, $type = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $emsc_type$addr = sp + 24 | 0;
 $emsc_event$addr = sp + 20 | 0;
 $retval1 = sp + 28 | 0;
 $type = sp + 12 | 0;
 $i = sp + 8 | 0;
 $src = sp + 4 | 0;
 $dst = sp;
 HEAP32[$emsc_type$addr >> 2] = $emsc_type;
 HEAP32[$emsc_event$addr >> 2] = $emsc_event;
 HEAP32[sp + 16 >> 2] = $user_data;
 HEAP8[$retval1 >> 0] = 1;
 if (!(__sapp_events_enabled() | 0)) {
  __sapp_emsc_update_keyboard_state();
  $38 = HEAP8[$retval1 >> 0] | 0;
  $tobool31 = $38 & 1;
  $conv32 = $tobool31 & 1;
  STACKTOP = sp;
  return $conv32 | 0;
 }
 switch (HEAP32[$emsc_type$addr >> 2] | 0) {
 case 22:
  {
   HEAP32[$type >> 2] = 10;
   break;
  }
 case 24:
  {
   HEAP32[$type >> 2] = 11;
   break;
  }
 case 23:
  {
   HEAP32[$type >> 2] = 12;
   break;
  }
 case 25:
  {
   HEAP32[$type >> 2] = 13;
   break;
  }
 default:
  {
   HEAP32[$type >> 2] = 0;
   HEAP8[$retval1 >> 0] = 0;
  }
 }
 if (!(HEAP32[$type >> 2] | 0)) {
  __sapp_emsc_update_keyboard_state();
  $38 = HEAP8[$retval1 >> 0] | 0;
  $tobool31 = $38 & 1;
  $conv32 = $tobool31 & 1;
  STACKTOP = sp;
  return $conv32 | 0;
 }
 __sapp_init_event(HEAP32[$type >> 2] | 0);
 if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 4 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 2;
 if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 8 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 1;
 if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 12 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 4;
 if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 16 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 8;
 $16 = HEAP32[HEAP32[$emsc_event$addr >> 2] >> 2] | 0;
 HEAP32[14696] = $16;
 HEAP32[14696] = (HEAP32[14696] | 0) > 8 ? 8 : $16;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[14696] | 0)) break;
  HEAP32[$src >> 2] = (HEAP32[$emsc_event$addr >> 2] | 0) + 20 + ((HEAP32[$i >> 2] | 0) * 52 | 0);
  HEAP32[$dst >> 2] = 58788 + (HEAP32[$i >> 2] << 4);
  HEAP32[HEAP32[$dst >> 2] >> 2] = HEAP32[HEAP32[$src >> 2] >> 2];
  HEAPF32[(HEAP32[$dst >> 2] | 0) + 4 >> 2] = +(HEAP32[(HEAP32[$src >> 2] | 0) + 36 >> 2] | 0) * +HEAPF32[14678];
  HEAPF32[(HEAP32[$dst >> 2] | 0) + 8 >> 2] = +(HEAP32[(HEAP32[$src >> 2] | 0) + 40 >> 2] | 0) * +HEAPF32[14678];
  HEAP8[(HEAP32[$dst >> 2] | 0) + 12 >> 0] = (HEAP32[(HEAP32[$src >> 2] | 0) + 28 >> 2] | 0) != 0 & 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 __sapp_call_event(58728) | 0;
 __sapp_emsc_update_keyboard_state();
 $38 = HEAP8[$retval1 >> 0] | 0;
 $tobool31 = $38 & 1;
 $conv32 = $tobool31 & 1;
 STACKTOP = sp;
 return $conv32 | 0;
}

function _stbtt_GetGlyphBitmapBoxSubpixel($font, $glyph, $scale_x, $scale_y, $shift_x, $shift_y, $ix0, $iy0, $ix1, $iy1) {
 $font = $font | 0;
 $glyph = $glyph | 0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $ix0 = $ix0 | 0;
 $iy0 = $iy0 | 0;
 $ix1 = $ix1 | 0;
 $iy1 = $iy1 | 0;
 var $conv15 = 0, $conv23 = 0, $conv31 = 0, $conv40 = 0, $font$addr = 0, $glyph$addr = 0, $ix0$addr = 0, $ix1$addr = 0, $iy0$addr = 0, $iy1$addr = 0, $scale_x$addr = 0, $scale_y$addr = 0, $shift_x$addr = 0, $shift_y$addr = 0, $tobool = 0, $tobool12 = 0, $x0 = 0, $x1 = 0, $y0 = 0, $y1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $font$addr = sp + 52 | 0;
 $glyph$addr = sp + 48 | 0;
 $scale_x$addr = sp + 44 | 0;
 $scale_y$addr = sp + 40 | 0;
 $shift_x$addr = sp + 36 | 0;
 $shift_y$addr = sp + 32 | 0;
 $ix0$addr = sp + 28 | 0;
 $iy0$addr = sp + 24 | 0;
 $ix1$addr = sp + 20 | 0;
 $iy1$addr = sp + 16 | 0;
 $x0 = sp + 12 | 0;
 $y0 = sp + 8 | 0;
 $x1 = sp + 4 | 0;
 $y1 = sp;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$glyph$addr >> 2] = $glyph;
 HEAPF32[$scale_x$addr >> 2] = $scale_x;
 HEAPF32[$scale_y$addr >> 2] = $scale_y;
 HEAPF32[$shift_x$addr >> 2] = $shift_x;
 HEAPF32[$shift_y$addr >> 2] = $shift_y;
 HEAP32[$ix0$addr >> 2] = $ix0;
 HEAP32[$iy0$addr >> 2] = $iy0;
 HEAP32[$ix1$addr >> 2] = $ix1;
 HEAP32[$iy1$addr >> 2] = $iy1;
 HEAP32[$x0 >> 2] = 0;
 HEAP32[$y0 >> 2] = 0;
 $tobool = (_stbtt_GetGlyphBox(HEAP32[$font$addr >> 2] | 0, HEAP32[$glyph$addr >> 2] | 0, $x0, $y0, $x1, $y1) | 0) != 0;
 $tobool12 = (HEAP32[$ix0$addr >> 2] | 0) != 0;
 if ($tobool) {
  if ($tobool12) {
   $conv15 = ~~+Math_floor(+(+(HEAP32[$x0 >> 2] | 0) * +HEAPF32[$scale_x$addr >> 2] + +HEAPF32[$shift_x$addr >> 2]));
   HEAP32[HEAP32[$ix0$addr >> 2] >> 2] = $conv15;
  }
  if (HEAP32[$iy0$addr >> 2] | 0) {
   $conv23 = ~~+Math_floor(+(+(0 - (HEAP32[$y1 >> 2] | 0) | 0) * +HEAPF32[$scale_y$addr >> 2] + +HEAPF32[$shift_y$addr >> 2]));
   HEAP32[HEAP32[$iy0$addr >> 2] >> 2] = $conv23;
  }
  if (HEAP32[$ix1$addr >> 2] | 0) {
   $conv31 = ~~+Math_ceil(+(+(HEAP32[$x1 >> 2] | 0) * +HEAPF32[$scale_x$addr >> 2] + +HEAPF32[$shift_x$addr >> 2]));
   HEAP32[HEAP32[$ix1$addr >> 2] >> 2] = $conv31;
  }
  if (!(HEAP32[$iy1$addr >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  $conv40 = ~~+Math_ceil(+(+(0 - (HEAP32[$y0 >> 2] | 0) | 0) * +HEAPF32[$scale_y$addr >> 2] + +HEAPF32[$shift_y$addr >> 2]));
  HEAP32[HEAP32[$iy1$addr >> 2] >> 2] = $conv40;
  STACKTOP = sp;
  return;
 } else {
  if ($tobool12) HEAP32[HEAP32[$ix0$addr >> 2] >> 2] = 0;
  if (HEAP32[$iy0$addr >> 2] | 0) HEAP32[HEAP32[$iy0$addr >> 2] >> 2] = 0;
  if (HEAP32[$ix1$addr >> 2] | 0) HEAP32[HEAP32[$ix1$addr >> 2] >> 2] = 0;
  if (!(HEAP32[$iy1$addr >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[HEAP32[$iy1$addr >> 2] >> 2] = 0;
  STACKTOP = sp;
  return;
 }
}

function _stbi__parse_uncompressed_block($a) {
 $a = $a | 0;
 var $17 = 0, $44 = 0, $49 = 0, $7 = 0, $9 = 0, $a$addr = 0, $call14 = 0, $code_buffer5 = 0, $conv = 0, $header = 0, $k = 0, $len = 0, $nlen = 0, $num_bits6 = 0, $retval = 0, $zout52 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $header = sp + 20 | 0;
 $len = sp + 8 | 0;
 $nlen = sp + 4 | 0;
 $k = sp;
 HEAP32[$a$addr >> 2] = $a;
 if (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 8 >> 2] & 7 | 0) _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, HEAP32[(HEAP32[$a$addr >> 2] | 0) + 8 >> 2] & 7) | 0;
 HEAP32[$k >> 2] = 0;
 while (1) {
  $7 = HEAP32[$a$addr >> 2] | 0;
  if ((HEAP32[(HEAP32[$a$addr >> 2] | 0) + 8 >> 2] | 0) <= 0) break;
  $conv = HEAP32[$7 + 12 >> 2] & 255;
  $9 = HEAP32[$k >> 2] | 0;
  HEAP32[$k >> 2] = $9 + 1;
  HEAP8[$header + $9 >> 0] = $conv;
  $code_buffer5 = (HEAP32[$a$addr >> 2] | 0) + 12 | 0;
  HEAP32[$code_buffer5 >> 2] = (HEAP32[$code_buffer5 >> 2] | 0) >>> 8;
  $num_bits6 = (HEAP32[$a$addr >> 2] | 0) + 8 | 0;
  HEAP32[$num_bits6 >> 2] = (HEAP32[$num_bits6 >> 2] | 0) - 8;
 }
 if (HEAP32[$7 + 8 >> 2] | 0) ___assert_fail(48995, 47433, 4148, 49012);
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 4) break;
  $call14 = _stbi__zget8(HEAP32[$a$addr >> 2] | 0) | 0;
  $17 = HEAP32[$k >> 2] | 0;
  HEAP32[$k >> 2] = $17 + 1;
  HEAP8[$header + $17 >> 0] = $call14;
 }
 HEAP32[$len >> 2] = ((HEAPU8[$header + 1 >> 0] | 0) << 8) + (HEAPU8[$header >> 0] | 0);
 HEAP32[$nlen >> 2] = ((HEAPU8[$header + 3 >> 0] | 0) << 8) + (HEAPU8[$header + 2 >> 0] | 0);
 if ((HEAP32[$nlen >> 2] | 0) != (HEAP32[$len >> 2] ^ 65535 | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(49043) | 0;
  $49 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 if (((HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + (HEAP32[$len >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  HEAP32[$retval >> 2] = _stbi__err(49056) | 0;
  $49 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 if (((HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$len >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 24 >> 2] | 0) >>> 0) if (!(_stbi__zexpand(HEAP32[$a$addr >> 2] | 0, HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] | 0, HEAP32[$len >> 2] | 0) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $49 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 _memcpy(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] | 0, HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0, HEAP32[$len >> 2] | 0) | 0;
 $44 = HEAP32[$a$addr >> 2] | 0;
 HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + (HEAP32[$len >> 2] | 0);
 $zout52 = (HEAP32[$a$addr >> 2] | 0) + 16 | 0;
 HEAP32[$zout52 >> 2] = (HEAP32[$zout52 >> 2] | 0) + (HEAP32[$len >> 2] | 0);
 HEAP32[$retval >> 2] = 1;
 $49 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $49 | 0;
}

function __sg_validate_apply_pipeline($pip_id) {
 $pip_id = $pip_id | 0;
 var $$pre_trunc = 0, $19 = 0, $25 = 0, $39 = 0, $51 = 0, $att_dsimg = 0, $att_img = 0, $i = 0, $pass = 0, $pip = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 20 | 0;
 $pip = sp + 16 | 0;
 $pass = sp + 12 | 0;
 $i = sp + 8 | 0;
 $att_img = sp + 4 | 0;
 $att_dsimg = sp;
 __sg_validate_begin();
 __sg_validate((HEAP32[$pip_id >> 2] | 0) != 0, 53);
 HEAP32[$pip >> 2] = __sg_lookup_pipeline(2164252, HEAP32[$pip_id >> 2] | 0) | 0;
 __sg_validate((HEAP32[$pip >> 2] | 0) != 0, 54);
 if (!(HEAP32[$pip >> 2] | 0)) {
  HEAP8[$retval >> 0] = (__sg_validate_end() | 0) & 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $51 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $51 | 0;
 }
 __sg_validate((HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] | 0) == 2, 55);
 if (!(HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(39953, 21600, 13617, 39965);
 __sg_validate((HEAP32[HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[$pip >> 2] | 0) + 12 >> 2] | 0), 56);
 __sg_validate((HEAP32[(HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] | 0) + 8 >> 2] | 0) == 2, 57);
 HEAP32[$pass >> 2] = __sg_lookup_pass(2164252, HEAP32[541059] | 0) | 0;
 $19 = HEAP32[(HEAP32[$pip >> 2] | 0) + 12 + 16 >> 2] | 0;
 do if (HEAP32[$pass >> 2] | 0) {
  __sg_validate(($19 | 0) == (HEAP32[(HEAP32[$pass >> 2] | 0) + 12 >> 2] | 0), 58);
  HEAP32[$i >> 2] = 0;
  while (1) {
   $25 = HEAP32[$pass >> 2] | 0;
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$pip >> 2] | 0) + 12 + 16 >> 2] | 0)) break;
   HEAP32[$att_img >> 2] = __sg_pass_color_image($25, HEAP32[$i >> 2] | 0) | 0;
   __sg_validate((HEAP32[(HEAP32[$pip >> 2] | 0) + 12 + 20 + (HEAP32[$i >> 2] << 2) >> 2] | 0) == (HEAP32[(HEAP32[$att_img >> 2] | 0) + 12 + 28 >> 2] | 0), 59);
   __sg_validate((HEAP32[(HEAP32[$pip >> 2] | 0) + 12 + 40 >> 2] | 0) == (HEAP32[(HEAP32[$att_img >> 2] | 0) + 12 + 32 >> 2] | 0), 61);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$att_dsimg >> 2] = __sg_pass_ds_image($25) | 0;
  $39 = HEAP32[(HEAP32[$pip >> 2] | 0) + 12 + 36 >> 2] | 0;
  if (HEAP32[$att_dsimg >> 2] | 0) {
   __sg_validate(($39 | 0) == (HEAP32[(HEAP32[$att_dsimg >> 2] | 0) + 12 + 28 >> 2] | 0), 60);
   break;
  } else {
   __sg_validate(($39 | 0) == 1, 60);
   break;
  }
 } else {
  __sg_validate(($19 | 0) == 1, 58);
  __sg_validate((HEAP32[(HEAP32[$pip >> 2] | 0) + 12 + 20 >> 2] | 0) == (HEAP32[541031] | 0), 59);
  __sg_validate((HEAP32[(HEAP32[$pip >> 2] | 0) + 12 + 36 >> 2] | 0) == (HEAP32[541032] | 0), 60);
  __sg_validate((HEAP32[(HEAP32[$pip >> 2] | 0) + 12 + 40 >> 2] | 0) == (HEAP32[541033] | 0), 61);
 } while (0);
 HEAP8[$retval >> 0] = (__sg_validate_end() | 0) & 1;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $51 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $51 | 0;
}

function _stbi__pnm_load($s, $x, $y, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $54 = 0, $comp$addr = 0, $mul = 0, $out = 0, $req_comp$addr = 0, $retval = 0, $s$addr = 0, $tobool14 = 0, $tobool23 = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $s$addr = sp + 24 | 0;
 $x$addr = sp + 20 | 0;
 $y$addr = sp + 16 | 0;
 $comp$addr = sp + 12 | 0;
 $req_comp$addr = sp + 8 | 0;
 $out = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[sp + 4 >> 2] = $ri;
 if (!(_stbi__pnm_info(HEAP32[$s$addr >> 2] | 0, HEAP32[$s$addr >> 2] | 0, (HEAP32[$s$addr >> 2] | 0) + 4 | 0, (HEAP32[$s$addr >> 2] | 0) + 8 | 0) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $54 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 HEAP32[HEAP32[$x$addr >> 2] >> 2] = HEAP32[HEAP32[$s$addr >> 2] >> 2];
 HEAP32[HEAP32[$y$addr >> 2] >> 2] = HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2];
 if (HEAP32[$comp$addr >> 2] | 0) HEAP32[HEAP32[$comp$addr >> 2] >> 2] = HEAP32[(HEAP32[$s$addr >> 2] | 0) + 8 >> 2];
 if (!(_stbi__mad3sizes_valid(HEAP32[(HEAP32[$s$addr >> 2] | 0) + 8 >> 2] | 0, HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0, 0) | 0)) {
  $tobool14 = (_stbi__err(47570) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool14 ? 0 : 0;
  $54 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 HEAP32[$out >> 2] = _stbi__malloc_mad3(HEAP32[(HEAP32[$s$addr >> 2] | 0) + 8 >> 2] | 0, HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0, 0) | 0;
 if (!(HEAP32[$out >> 2] | 0)) {
  $tobool23 = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool23 ? 0 : 0;
  $54 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 $mul = Math_imul(HEAP32[(HEAP32[$s$addr >> 2] | 0) + 8 >> 2] | 0, HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0) | 0;
 _stbi__getn(HEAP32[$s$addr >> 2] | 0, HEAP32[$out >> 2] | 0, Math_imul($mul, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
 if (HEAP32[$req_comp$addr >> 2] | 0) if ((HEAP32[$req_comp$addr >> 2] | 0) != (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP32[$out >> 2] = _stbi__convert_format(HEAP32[$out >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 8 >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[HEAP32[$s$addr >> 2] >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
  if (!(HEAP32[$out >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$out >> 2];
   $54 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $54 | 0;
  }
 }
 HEAP32[$retval >> 2] = HEAP32[$out >> 2];
 $54 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $54 | 0;
}

function _stbtt_Rasterize($result, $flatness_in_pixels, $vertices, $num_verts, $scale_x, $scale_y, $shift_x, $shift_y, $x_off, $y_off, $invert, $userdata) {
 $result = $result | 0;
 $flatness_in_pixels = +$flatness_in_pixels;
 $vertices = $vertices | 0;
 $num_verts = $num_verts | 0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $x_off = $x_off | 0;
 $y_off = $y_off | 0;
 $invert = $invert | 0;
 $userdata = $userdata | 0;
 var $flatness_in_pixels$addr = 0, $invert$addr = 0, $num_verts$addr = 0, $result$addr = 0, $scale = 0, $scale_x$addr = 0, $scale_y$addr = 0, $shift_x$addr = 0, $shift_y$addr = 0, $userdata$addr = 0, $vertices$addr = 0, $winding_count = 0, $winding_lengths = 0, $windings = 0, $x_off$addr = 0, $y_off$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $result$addr = sp + 60 | 0;
 $flatness_in_pixels$addr = sp + 56 | 0;
 $vertices$addr = sp + 52 | 0;
 $num_verts$addr = sp + 48 | 0;
 $scale_x$addr = sp + 44 | 0;
 $scale_y$addr = sp + 40 | 0;
 $shift_x$addr = sp + 36 | 0;
 $shift_y$addr = sp + 32 | 0;
 $x_off$addr = sp + 28 | 0;
 $y_off$addr = sp + 24 | 0;
 $invert$addr = sp + 20 | 0;
 $userdata$addr = sp + 16 | 0;
 $scale = sp + 12 | 0;
 $winding_count = sp + 8 | 0;
 $winding_lengths = sp + 4 | 0;
 $windings = sp;
 HEAP32[$result$addr >> 2] = $result;
 HEAPF32[$flatness_in_pixels$addr >> 2] = $flatness_in_pixels;
 HEAP32[$vertices$addr >> 2] = $vertices;
 HEAP32[$num_verts$addr >> 2] = $num_verts;
 HEAPF32[$scale_x$addr >> 2] = $scale_x;
 HEAPF32[$scale_y$addr >> 2] = $scale_y;
 HEAPF32[$shift_x$addr >> 2] = $shift_x;
 HEAPF32[$shift_y$addr >> 2] = $shift_y;
 HEAP32[$x_off$addr >> 2] = $x_off;
 HEAP32[$y_off$addr >> 2] = $y_off;
 HEAP32[$invert$addr >> 2] = $invert;
 HEAP32[$userdata$addr >> 2] = $userdata;
 HEAPF32[$scale >> 2] = +HEAPF32[$scale_x$addr >> 2] > +HEAPF32[$scale_y$addr >> 2] ? +HEAPF32[$scale_y$addr >> 2] : +HEAPF32[$scale_x$addr >> 2];
 HEAP32[$windings >> 2] = _stbtt_FlattenCurves(HEAP32[$vertices$addr >> 2] | 0, HEAP32[$num_verts$addr >> 2] | 0, +HEAPF32[$flatness_in_pixels$addr >> 2] / +HEAPF32[$scale >> 2], $winding_lengths, $winding_count, HEAP32[$userdata$addr >> 2] | 0) | 0;
 if (!(HEAP32[$windings >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _stbtt__rasterize(HEAP32[$result$addr >> 2] | 0, HEAP32[$windings >> 2] | 0, HEAP32[$winding_lengths >> 2] | 0, HEAP32[$winding_count >> 2] | 0, +HEAPF32[$scale_x$addr >> 2], +HEAPF32[$scale_y$addr >> 2], +HEAPF32[$shift_x$addr >> 2], +HEAPF32[$shift_y$addr >> 2], HEAP32[$x_off$addr >> 2] | 0, HEAP32[$y_off$addr >> 2] | 0, HEAP32[$invert$addr >> 2] | 0, HEAP32[$userdata$addr >> 2] | 0);
 _fons__tmpfree(HEAP32[$winding_lengths >> 2] | 0, HEAP32[$userdata$addr >> 2] | 0);
 _fons__tmpfree(HEAP32[$windings >> 2] | 0, HEAP32[$userdata$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$in = 0, $1 = 0, $5 = 0, $8 = 0, $conv1 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0, $sub22 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0;
 $conv1 = $c & 255;
 $tobool241 = ($n | 0) != 0;
 L1 : do if ($tobool241 & ($src & 3 | 0) != 0) {
  $1 = $c & 255;
  $n$addr$043 = $n;
  $s$044 = $src;
  while (1) {
   if ((HEAP8[$s$044 >> 0] | 0) == $1 << 24 >> 24) {
    $n$addr$0$lcssa52 = $n$addr$043;
    $s$0$lcssa53 = $s$044;
    label = 6;
    break L1;
   }
   $incdec$ptr = $s$044 + 1 | 0;
   $dec = $n$addr$043 + -1 | 0;
   $tobool2 = ($dec | 0) != 0;
   if ($tobool2 & ($incdec$ptr & 3 | 0) != 0) {
    $n$addr$043 = $dec;
    $s$044 = $incdec$ptr;
   } else {
    $n$addr$0$lcssa = $dec;
    $s$0$lcssa = $incdec$ptr;
    $tobool2$lcssa = $tobool2;
    label = 5;
    break;
   }
  }
 } else {
  $n$addr$0$lcssa = $n;
  $s$0$lcssa = $src;
  $tobool2$lcssa = $tobool241;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($tobool2$lcssa) {
  $n$addr$0$lcssa52 = $n$addr$0$lcssa;
  $s$0$lcssa53 = $s$0$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $5 = $c & 255;
  if ((HEAP8[$s$0$lcssa53 >> 0] | 0) == $5 << 24 >> 24) if (!$n$addr$0$lcssa52) {
   label = 16;
   break;
  } else {
   $8 = $s$0$lcssa53;
   break;
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  L13 : do if ($n$addr$0$lcssa52 >>> 0 > 3) {
   $n$addr$133 = $n$addr$0$lcssa52;
   $w$034 = $s$0$lcssa53;
   while (1) {
    $xor = HEAP32[$w$034 >> 2] ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $$in = $w$034;
     $n$addr$1$lcssa55 = $n$addr$133;
     break L13;
    }
    $incdec$ptr21 = $w$034 + 4 | 0;
    $sub22 = $n$addr$133 + -4 | 0;
    if ($sub22 >>> 0 > 3) {
     $n$addr$133 = $sub22;
     $w$034 = $incdec$ptr21;
    } else {
     $n$addr$1$lcssa = $sub22;
     $w$0$lcssa = $incdec$ptr21;
     label = 11;
     break;
    }
   }
  } else {
   $n$addr$1$lcssa = $n$addr$0$lcssa52;
   $w$0$lcssa = $s$0$lcssa53;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$n$addr$1$lcssa) {
   label = 16;
   break;
  } else {
   $$in = $w$0$lcssa;
   $n$addr$1$lcssa55 = $n$addr$1$lcssa;
  }
  $n$addr$227 = $n$addr$1$lcssa55;
  $s$128 = $$in;
  while (1) {
   if ((HEAP8[$s$128 >> 0] | 0) == $5 << 24 >> 24) {
    $8 = $s$128;
    break L8;
   }
   $n$addr$227 = $n$addr$227 + -1 | 0;
   if (!$n$addr$227) {
    label = 16;
    break;
   } else $s$128 = $s$128 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $8 = 0;
 return $8 | 0;
}

function __ZNSt3__227__insertion_sort_incompleteIRN13TPPLPartition12VertexSorterEPlEEbT0_S5_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__count$0 = 0, $__count$1 = 0, $__i$0 = 0, $__j$0 = 0, $__j$0$phi = 0, $__j$1 = 0, $__j$1$phi = 0, $__k$0 = 0, $__k$0$lcssa = 0, $add$ptr16 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $retval$5 = 0;
 L1 : do switch ($__last - $__first >> 2 | 0) {
 case 1:
 case 0:
  {
   $retval$5 = 1;
   break;
  }
 case 2:
  {
   $incdec$ptr = $__last + -4 | 0;
   $0 = HEAP32[$incdec$ptr >> 2] | 0;
   $1 = HEAP32[$__first >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $0, $1) | 0) {
    HEAP32[$__first >> 2] = $0;
    HEAP32[$incdec$ptr >> 2] = $1;
    $retval$5 = 1;
   } else $retval$5 = 1;
   break;
  }
 case 3:
  {
   __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($__first, $__first + 4 | 0, $__last + -4 | 0, $__comp) | 0;
   $retval$5 = 1;
   break;
  }
 case 4:
  {
   __ZNSt3__27__sort4IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_T_($__first, $__first + 4 | 0, $__first + 8 | 0, $__last + -4 | 0, $__comp) | 0;
   $retval$5 = 1;
   break;
  }
 case 5:
  {
   __ZNSt3__27__sort5IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_S5_T_($__first, $__first + 4 | 0, $__first + 8 | 0, $__first + 12 | 0, $__last + -4 | 0, $__comp) | 0;
   $retval$5 = 1;
   break;
  }
 default:
  {
   $add$ptr16 = $__first + 8 | 0;
   __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($__first, $__first + 4 | 0, $add$ptr16, $__comp) | 0;
   $__count$0 = 0;
   $__i$0 = $__first + 12 | 0;
   $__j$0 = $add$ptr16;
   while (1) {
    if (($__i$0 | 0) == ($__last | 0)) {
     $retval$5 = 1;
     break L1;
    }
    $2 = HEAP32[$__i$0 >> 2] | 0;
    $3 = HEAP32[$__j$0 >> 2] | 0;
    if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $2, $3) | 0) {
     $4 = $3;
     $__j$1 = $__i$0;
     $__k$0 = $__j$0;
     while (1) {
      HEAP32[$__j$1 >> 2] = $4;
      if (($__k$0 | 0) == ($__first | 0)) {
       $__k$0$lcssa = $__first;
       break;
      }
      $incdec$ptr25 = $__k$0 + -4 | 0;
      $4 = HEAP32[$incdec$ptr25 >> 2] | 0;
      if (!(__ZN13TPPLPartition12VertexSorterclEll($__comp, $2, $4) | 0)) {
       $__k$0$lcssa = $__k$0;
       break;
      } else {
       $__j$1$phi = $__k$0;
       $__k$0 = $incdec$ptr25;
       $__j$1 = $__j$1$phi;
      }
     }
     HEAP32[$__k$0$lcssa >> 2] = $2;
     $inc = $__count$0 + 1 | 0;
     if (($inc | 0) == 8) break; else $__count$1 = $inc;
    } else $__count$1 = $__count$0;
    $__j$0$phi = $__i$0;
    $__count$0 = $__count$1;
    $__i$0 = $__i$0 + 4 | 0;
    $__j$0 = $__j$0$phi;
   }
   $retval$5 = ($__i$0 + 4 | 0) == ($__last | 0);
  }
 } while (0);
 return $retval$5 | 0;
}

function _pop_arg($arg, $type, $ap, $pop_arg_long_double) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $102 = 0, $103 = 0.0, $12 = 0, $13 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $36 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $77 = 0, $78 = 0, $79 = 0, $82 = 0, $91 = 0, $92 = 0, $93 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$ap >> 2] = $5 + 4;
   HEAP32[$arg >> 2] = $6;
   break L1;
   break;
  }
 case 10:
  {
   $12 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $13 = HEAP32[$12 >> 2] | 0;
   HEAP32[$ap >> 2] = $12 + 4;
   $16 = $arg;
   HEAP32[$16 >> 2] = $13;
   HEAP32[$16 + 4 >> 2] = (($13 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $25 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$ap >> 2] = $25 + 4;
   $27 = $arg;
   HEAP32[$27 >> 2] = $26;
   HEAP32[$27 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $36 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $37 = $36;
   $39 = HEAP32[$37 >> 2] | 0;
   $42 = HEAP32[$37 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $36 + 8;
   $43 = $arg;
   HEAP32[$43 >> 2] = $39;
   HEAP32[$43 + 4 >> 2] = $42;
   break L1;
   break;
  }
 case 13:
  {
   $52 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $53 = HEAP32[$52 >> 2] | 0;
   HEAP32[$ap >> 2] = $52 + 4;
   $54 = ($53 & 65535) << 16 >> 16;
   $57 = $arg;
   HEAP32[$57 >> 2] = $54;
   HEAP32[$57 + 4 >> 2] = (($54 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $66 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $67 = HEAP32[$66 >> 2] | 0;
   HEAP32[$ap >> 2] = $66 + 4;
   $68 = $arg;
   HEAP32[$68 >> 2] = $67 & 65535;
   HEAP32[$68 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $77 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $78 = HEAP32[$77 >> 2] | 0;
   HEAP32[$ap >> 2] = $77 + 4;
   $79 = ($78 & 255) << 24 >> 24;
   $82 = $arg;
   HEAP32[$82 >> 2] = $79;
   HEAP32[$82 + 4 >> 2] = (($79 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP32[$ap >> 2] = $91 + 4;
   $93 = $arg;
   HEAP32[$93 >> 2] = $92 & 255;
   HEAP32[$93 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $102 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $103 = +HEAPF64[$102 >> 3];
   HEAP32[$ap >> 2] = $102 + 8;
   HEAPF64[$arg >> 3] = $103;
   break L1;
   break;
  }
 case 18:
  {
   FUNCTION_TABLE_vii[$pop_arg_long_double & 127]($arg, $ap);
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _sfetch_setup($desc) {
 $desc = $desc | 0;
 var $9 = 0, $cond = 0, $cond28 = 0, $cond38 = 0, $conv = 0, $conv66 = 0, $ctx = 0, $desc$addr = 0, $desc14 = 0, $i = 0, $valid53 = 0, $valid67 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp + 8 | 0;
 $ctx = sp + 4 | 0;
 $i = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 25510, 2337, 25759);
 if (HEAP32[HEAP32[$desc$addr >> 2] >> 2] | 0) ___assert_fail(21678, 25510, 2338, 25759);
 if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2] | 0) ___assert_fail(21678, 25510, 2338, 25759);
 if (HEAP32[544579] | 0) ___assert_fail(25772, 25510, 2339, 25759);
 HEAP32[544579] = _malloc(1264) | 0;
 if (!(HEAP32[544579] | 0)) ___assert_fail(25785, 25510, 2341, 25759);
 _memset(HEAP32[544579] | 0, 0, 1264) | 0;
 HEAP32[$ctx >> 2] = __sfetch_ctx() | 0;
 $desc14 = (HEAP32[$ctx >> 2] | 0) + 4 | 0;
 $9 = HEAP32[$desc$addr >> 2] | 0;
 HEAP32[$desc14 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$desc14 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
 HEAP32[$desc14 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
 HEAP32[$desc14 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
 HEAP32[$desc14 + 16 >> 2] = HEAP32[$9 + 16 >> 2];
 HEAP8[HEAP32[$ctx >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$ctx >> 2] | 0) + 1 >> 0] = 1;
 if (!(HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 4 >> 2] | 0)) $cond = 128; else $cond = HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 4 >> 2] | 0;
 HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 4 >> 2] = $cond;
 if (!(HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 8 >> 2] | 0)) $cond28 = 1; else $cond28 = HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 8 >> 2] | 0;
 HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 8 >> 2] = $cond28;
 if (!(HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 12 >> 2] | 0)) $cond38 = 1; else $cond38 = HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 12 >> 2] | 0;
 HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 12 >> 2] = $cond38;
 if ((HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0 > 16) {
  HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 8 >> 2] = 16;
  _puts(25793) | 0;
 }
 $conv = (__sfetch_pool_init((HEAP32[$ctx >> 2] | 0) + 24 | 0, HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 4 >> 2] | 0) | 0) & 1;
 $valid53 = (HEAP32[$ctx >> 2] | 0) + 1 | 0;
 HEAP8[$valid53 >> 0] = (HEAP8[$valid53 >> 0] & 1 & $conv | 0) != 0 & 1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) break;
  $conv66 = (__sfetch_channel_init((HEAP32[$ctx >> 2] | 0) + 48 + ((HEAP32[$i >> 2] | 0) * 76 | 0) | 0, HEAP32[$ctx >> 2] | 0, HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 4 >> 2] | 0, HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 12 >> 2] | 0, 87) | 0) & 1;
  $valid67 = (HEAP32[$ctx >> 2] | 0) + 1 | 0;
  HEAP8[$valid67 >> 0] = (HEAP8[$valid67 >> 0] & 1 & $conv66 | 0) != 0 & 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __sgl_init_pipeline($pip_id, $in_desc) {
 $pip_id = $pip_id | 0;
 $in_desc = $in_desc | 0;
 var $arrayidx51 = 0, $coerce = 0, $desc = 0, $i = 0, $in_desc$addr = 0, $pip = 0, $pos = 0, $rgba = 0, $uv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 $in_desc$addr = sp + 580 | 0;
 $desc = sp + 24 | 0;
 $pos = sp + 20 | 0;
 $uv = sp + 16 | 0;
 $rgba = sp + 12 | 0;
 $pip = sp + 8 | 0;
 $i = sp + 4 | 0;
 $coerce = sp;
 HEAP32[$in_desc$addr >> 2] = $in_desc;
 if (!((HEAP32[$pip_id >> 2] | 0) != 0 & (HEAP32[$in_desc$addr >> 2] | 0) != 0)) ___assert_fail(41592, 23371, 2233, 41632);
 _memcpy($desc | 0, HEAP32[$in_desc$addr >> 2] | 0, 556) | 0;
 HEAP32[$desc + 8 >> 2] = 24;
 HEAP32[$pos >> 2] = $desc + 8 + 96;
 HEAP32[(HEAP32[$pos >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$pos >> 2] | 0) + 8 >> 2] = 3;
 HEAP32[$uv >> 2] = $desc + 8 + 96 + 12;
 HEAP32[(HEAP32[$uv >> 2] | 0) + 4 >> 2] = 12;
 HEAP32[(HEAP32[$uv >> 2] | 0) + 8 >> 2] = 2;
 HEAP32[$rgba >> 2] = $desc + 8 + 96 + 24;
 HEAP32[(HEAP32[$rgba >> 2] | 0) + 4 >> 2] = 20;
 HEAP32[(HEAP32[$rgba >> 2] | 0) + 8 >> 2] = 8;
 if (!(HEAP32[(HEAP32[$in_desc$addr >> 2] | 0) + 4 >> 2] | 0)) HEAP32[$desc + 4 >> 2] = HEAP32[541387];
 HEAP32[$desc + 512 >> 2] = 1;
 HEAP32[$desc + 524 >> 2] = HEAP32[541364];
 if (!(HEAP32[$desc + 520 >> 2] | 0)) HEAP32[$desc + 520 >> 2] = HEAP32[541365];
 HEAP32[$desc + 296 >> 2] = HEAP32[541363];
 HEAP32[$desc + 364 >> 2] = HEAP32[541362];
 if (!(HEAP32[$desc + 364 + 4 >> 2] | 0)) HEAP32[$desc + 364 + 4 >> 2] = 7;
 HEAP32[$pip >> 2] = __sgl_lookup_pipeline(HEAP32[$pip_id >> 2] | 0) | 0;
 if (!(HEAP32[$pip >> 2] | 0)) ___assert_fail(41651, 23371, 2268, 41632);
 if ((HEAP32[(HEAP32[$pip >> 2] | 0) + 4 >> 2] | 0) != 1) ___assert_fail(41651, 23371, 2268, 41632);
 HEAP32[(HEAP32[$pip >> 2] | 0) + 4 >> 2] = 2;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 6) break;
  switch (HEAP32[$i >> 2] | 0) {
  case 0:
   {
    HEAP32[$desc + 508 >> 2] = 1;
    break;
   }
  case 1:
   {
    HEAP32[$desc + 508 >> 2] = 2;
    break;
   }
  case 2:
   {
    HEAP32[$desc + 508 >> 2] = 3;
    break;
   }
  case 3:
   {
    HEAP32[$desc + 508 >> 2] = 4;
    break;
   }
  case 5:
  case 4:
   {
    HEAP32[$desc + 508 >> 2] = 5;
    break;
   }
  default:
   {}
  }
  $arrayidx51 = (HEAP32[$pip >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) | 0;
  if (5 == (HEAP32[$i >> 2] | 0)) HEAP32[$arrayidx51 >> 2] = HEAP32[(HEAP32[$pip >> 2] | 0) + 8 + 12 >> 2]; else {
   HEAP32[$coerce >> 2] = _sg_make_pipeline($desc) | 0;
   HEAP32[$arrayidx51 >> 2] = HEAP32[$coerce >> 2];
   if (!(HEAP32[(HEAP32[$pip >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) >> 2] | 0)) {
    _puts(41702) | 0;
    HEAP32[(HEAP32[$pip >> 2] | 0) + 4 >> 2] = 3;
   }
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN6DrMesh7extrudeEffffffffi($this, $x1, $y1, $tx1, $ty1, $x2, $y2, $tx2, $ty2, $steps) {
 $this = $this | 0;
 $x1 = +$x1;
 $y1 = +$y1;
 $tx1 = +$tx1;
 $ty1 = +$ty1;
 $x2 = +$x2;
 $y2 = +$y2;
 $tx2 = +$tx2;
 $ty2 = +$ty2;
 $steps = $steps | 0;
 var $back$0 = 0.0, $div = 0.0, $front$0 = 0.0, $i$0 = 0, $mul = 0.0, $mul$pn = 0.0, $n = 0, $ref$tmp = 0, $ref$tmp3 = 0, $ref$tmp4 = 0, $ref$tmp5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $n = sp + 48 | 0;
 $ref$tmp = sp + 36 | 0;
 $ref$tmp3 = sp + 24 | 0;
 $ref$tmp4 = sp + 12 | 0;
 $ref$tmp5 = sp;
 $mul = +HEAPF32[$this + 28 >> 2] * .10000000149011612;
 $div = $mul * 2.0 / +($steps | 0);
 $front$0 = $mul;
 $i$0 = 0;
 $mul$pn = $mul;
 while (1) {
  $back$0 = $mul$pn - $div;
  if (($i$0 | 0) >= ($steps | 0)) break;
  __ZN6DrVec3C2Ev($n);
  __ZN6DrVec3C2Efff($ref$tmp3, $x1, $y1, $front$0);
  __ZN6DrVec3C2Efff($ref$tmp4, $x2, $y2, $front$0);
  __ZN6DrVec3C2Efff($ref$tmp5, $x1, $y1, $back$0);
  __ZN6DrVec314triangleNormalERKS_S1_S1_($ref$tmp, $ref$tmp3, $ref$tmp4, $ref$tmp5);
  HEAP32[$n >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$n + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$n + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  __ZN6DrVec3C2Efff($ref$tmp, $x1, $y1, $front$0);
  __ZN6DrVec2C2Eff($ref$tmp3, $tx1, $ty1);
  __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp3, 0);
  __ZN6DrVec3C2Efff($ref$tmp, $x1, $y1, $back$0);
  __ZN6DrVec2C2Eff($ref$tmp3, $tx1, $ty1);
  __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp3, 1);
  __ZN6DrVec3C2Efff($ref$tmp, $x2, $y2, $front$0);
  __ZN6DrVec2C2Eff($ref$tmp3, $tx2, $ty2);
  __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp3, 2);
  __ZN6DrVec3C2Efff($ref$tmp3, $x2, $y2, $front$0);
  __ZN6DrVec3C2Efff($ref$tmp4, $x2, $y2, $back$0);
  __ZN6DrVec3C2Efff($ref$tmp5, $x1, $y1, $back$0);
  __ZN6DrVec314triangleNormalERKS_S1_S1_($ref$tmp, $ref$tmp3, $ref$tmp4, $ref$tmp5);
  HEAP32[$n >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$n + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$n + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  __ZN6DrVec3C2Efff($ref$tmp, $x2, $y2, $front$0);
  __ZN6DrVec2C2Eff($ref$tmp3, $tx2, $ty2);
  __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp3, 0);
  __ZN6DrVec3C2Efff($ref$tmp, $x1, $y1, $back$0);
  __ZN6DrVec2C2Eff($ref$tmp3, $tx1, $ty1);
  __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp3, 1);
  __ZN6DrVec3C2Efff($ref$tmp, $x2, $y2, $back$0);
  __ZN6DrVec2C2Eff($ref$tmp3, $tx2, $ty2);
  __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp3, 2);
  $front$0 = $front$0 - $div;
  $i$0 = $i$0 + 1 | 0;
  $mul$pn = $back$0;
 }
 STACKTOP = sp;
 return;
}

function __sfetch_channel_init($chn, $ctx, $num_items, $num_lanes, $request_handler) {
 $chn = $chn | 0;
 $ctx = $ctx | 0;
 $num_items = $num_items | 0;
 $num_lanes = $num_lanes | 0;
 $request_handler = $request_handler | 0;
 var $$pre_trunc = 0, $14 = 0, $26 = 0, $27 = 0, $chn$addr = 0, $conv = 0, $conv17 = 0, $conv24 = 0, $conv31 = 0, $ctx$addr = 0, $lane = 0, $num_items$addr = 0, $num_lanes$addr = 0, $request_handler$addr = 0, $retval = 0, $valid7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 25 | 0;
 $chn$addr = sp + 20 | 0;
 $ctx$addr = sp + 16 | 0;
 $num_items$addr = sp + 12 | 0;
 $num_lanes$addr = sp + 8 | 0;
 $request_handler$addr = sp + 4 | 0;
 $valid7 = sp + 24 | 0;
 $lane = sp;
 HEAP32[$chn$addr >> 2] = $chn;
 HEAP32[$ctx$addr >> 2] = $ctx;
 HEAP32[$num_items$addr >> 2] = $num_items;
 HEAP32[$num_lanes$addr >> 2] = $num_lanes;
 HEAP32[$request_handler$addr >> 2] = $request_handler;
 if (!((HEAP32[$chn$addr >> 2] | 0) != 0 & (HEAP32[$num_items$addr >> 2] | 0) >>> 0 > 0 & (HEAP32[$request_handler$addr >> 2] | 0) != 0)) ___assert_fail(42182, 25510, 2113, 42224);
 if (HEAP8[(HEAP32[$chn$addr >> 2] | 0) + 72 >> 0] & 1) ___assert_fail(42245, 25510, 2114, 42224);
 HEAP8[$valid7 >> 0] = 1;
 HEAP32[(HEAP32[$chn$addr >> 2] | 0) + 68 >> 2] = HEAP32[$request_handler$addr >> 2];
 HEAP32[HEAP32[$chn$addr >> 2] >> 2] = HEAP32[$ctx$addr >> 2];
 $conv = (__sfetch_ring_init((HEAP32[$chn$addr >> 2] | 0) + 4 | 0, HEAP32[$num_lanes$addr >> 2] | 0) | 0) & 1;
 HEAP8[$valid7 >> 0] = (HEAP8[$valid7 >> 0] & 1 & $conv | 0) != 0 & 1;
 HEAP32[$lane >> 2] = 0;
 while (1) {
  $14 = HEAP32[$chn$addr >> 2] | 0;
  if ((HEAP32[$lane >> 2] | 0) >>> 0 >= (HEAP32[$num_lanes$addr >> 2] | 0) >>> 0) break;
  __sfetch_ring_enqueue($14 + 4 | 0, HEAP32[$lane >> 2] | 0);
  HEAP32[$lane >> 2] = (HEAP32[$lane >> 2] | 0) + 1;
 }
 $conv17 = (__sfetch_ring_init($14 + 20 | 0, HEAP32[$num_items$addr >> 2] | 0) | 0) & 1;
 HEAP8[$valid7 >> 0] = (HEAP8[$valid7 >> 0] & 1 & $conv17 | 0) != 0 & 1;
 $conv24 = (__sfetch_ring_init((HEAP32[$chn$addr >> 2] | 0) + 36 | 0, HEAP32[$num_lanes$addr >> 2] | 0) | 0) & 1;
 HEAP8[$valid7 >> 0] = (HEAP8[$valid7 >> 0] & 1 & $conv24 | 0) != 0 & 1;
 $conv31 = (__sfetch_ring_init((HEAP32[$chn$addr >> 2] | 0) + 52 | 0, HEAP32[$num_lanes$addr >> 2] | 0) | 0) & 1;
 HEAP8[$valid7 >> 0] = (HEAP8[$valid7 >> 0] & 1 & $conv31 | 0) != 0 & 1;
 $26 = HEAP32[$chn$addr >> 2] | 0;
 if (HEAP8[$valid7 >> 0] & 1) {
  HEAP8[$26 + 72 >> 0] = 1;
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $27 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $27 | 0;
 } else {
  __sfetch_channel_discard($26);
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $27 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $27 | 0;
 }
 return 0;
}

function _stbi__de_iphone($z) {
 $z = $z | 0;
 var $a = 0, $half = 0, $i = 0, $p = 0, $pixel_count = 0, $s = 0, $t = 0, $t13 = 0, $t56 = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $z$addr = sp + 16 | 0;
 $s = sp + 12 | 0;
 $i = sp + 8 | 0;
 $pixel_count = sp + 4 | 0;
 $p = sp;
 $t = sp + 24 | 0;
 $a = sp + 23 | 0;
 $t13 = sp + 22 | 0;
 $half = sp + 21 | 0;
 $t56 = sp + 20 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$z$addr >> 2] >> 2];
 HEAP32[$pixel_count >> 2] = Math_imul(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$p >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2];
 if ((HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) == 3) {
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
   HEAP8[$t >> 0] = HEAP8[HEAP32[$p >> 2] >> 0] | 0;
   HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[$t >> 0] | 0;
   HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 3;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) != 4) ___assert_fail(48488, 47433, 4766, 48506);
 HEAP32[$i >> 2] = 0;
 if (!0) {
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
   HEAP8[$t56 >> 0] = HEAP8[HEAP32[$p >> 2] >> 0] | 0;
   HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[$t56 >> 0] | 0;
   HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
  HEAP8[$a >> 0] = HEAP8[(HEAP32[$p >> 2] | 0) + 3 >> 0] | 0;
  HEAP8[$t13 >> 0] = HEAP8[HEAP32[$p >> 2] >> 0] | 0;
  if (HEAP8[$a >> 0] | 0) {
   HEAP8[$half >> 0] = (HEAPU8[$a >> 0] | 0) / 2 | 0;
   HEAP8[HEAP32[$p >> 2] >> 0] = (((HEAPU8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0) * 255 | 0) + (HEAPU8[$half >> 0] | 0) | 0) / (HEAPU8[$a >> 0] | 0) | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 1 >> 0] = (((HEAPU8[(HEAP32[$p >> 2] | 0) + 1 >> 0] | 0) * 255 | 0) + (HEAPU8[$half >> 0] | 0) | 0) / (HEAPU8[$a >> 0] | 0) | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = (((HEAPU8[$t13 >> 0] | 0) * 255 | 0) + (HEAPU8[$half >> 0] | 0) | 0) / (HEAPU8[$a >> 0] | 0) | 0;
  } else {
   HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[$t13 >> 0] | 0;
  }
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbtt__close_shape($vertices, $num_vertices, $was_off, $start_off, $sx, $sy, $scx, $scy, $cx, $cy) {
 $vertices = $vertices | 0;
 $num_vertices = $num_vertices | 0;
 $was_off = $was_off | 0;
 $start_off = $start_off | 0;
 $sx = $sx | 0;
 $sy = $sy | 0;
 $scx = $scx | 0;
 $scy = $scy | 0;
 $cx = $cx | 0;
 $cy = $cy | 0;
 var $10 = 0, $11 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $3 = 0, $arrayidx10 = 0, $cx$addr = 0, $cy$addr = 0, $num_vertices$addr = 0, $scx$addr = 0, $scy$addr = 0, $start_off$addr = 0, $sx$addr = 0, $sy$addr = 0, $tobool1 = 0, $vertices$addr = 0, $was_off$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vertices$addr = sp + 36 | 0;
 $num_vertices$addr = sp + 32 | 0;
 $was_off$addr = sp + 28 | 0;
 $start_off$addr = sp + 24 | 0;
 $sx$addr = sp + 20 | 0;
 $sy$addr = sp + 16 | 0;
 $scx$addr = sp + 12 | 0;
 $scy$addr = sp + 8 | 0;
 $cx$addr = sp + 4 | 0;
 $cy$addr = sp;
 HEAP32[$vertices$addr >> 2] = $vertices;
 HEAP32[$num_vertices$addr >> 2] = $num_vertices;
 HEAP32[$was_off$addr >> 2] = $was_off;
 HEAP32[$start_off$addr >> 2] = $start_off;
 HEAP32[$sx$addr >> 2] = $sx;
 HEAP32[$sy$addr >> 2] = $sy;
 HEAP32[$scx$addr >> 2] = $scx;
 HEAP32[$scy$addr >> 2] = $scy;
 HEAP32[$cx$addr >> 2] = $cx;
 HEAP32[$cy$addr >> 2] = $cy;
 $tobool1 = (HEAP32[$was_off$addr >> 2] | 0) != 0;
 if (HEAP32[$start_off$addr >> 2] | 0) {
  if ($tobool1) {
   $2 = HEAP32[$vertices$addr >> 2] | 0;
   $3 = HEAP32[$num_vertices$addr >> 2] | 0;
   HEAP32[$num_vertices$addr >> 2] = $3 + 1;
   _stbtt_setvertex($2 + ($3 * 14 | 0) | 0, 3, (HEAP32[$cx$addr >> 2] | 0) + (HEAP32[$scx$addr >> 2] | 0) >> 1, (HEAP32[$cy$addr >> 2] | 0) + (HEAP32[$scy$addr >> 2] | 0) >> 1, HEAP32[$cx$addr >> 2] | 0, HEAP32[$cy$addr >> 2] | 0);
  }
  $10 = HEAP32[$vertices$addr >> 2] | 0;
  $11 = HEAP32[$num_vertices$addr >> 2] | 0;
  HEAP32[$num_vertices$addr >> 2] = $11 + 1;
  _stbtt_setvertex($10 + ($11 * 14 | 0) | 0, 3, HEAP32[$sx$addr >> 2] | 0, HEAP32[$sy$addr >> 2] | 0, HEAP32[$scx$addr >> 2] | 0, HEAP32[$scy$addr >> 2] | 0);
  $22 = HEAP32[$num_vertices$addr >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 $16 = HEAP32[$vertices$addr >> 2] | 0;
 $17 = HEAP32[$num_vertices$addr >> 2] | 0;
 HEAP32[$num_vertices$addr >> 2] = $17 + 1;
 $arrayidx10 = $16 + ($17 * 14 | 0) | 0;
 $18 = HEAP32[$sx$addr >> 2] | 0;
 $19 = HEAP32[$sy$addr >> 2] | 0;
 if ($tobool1) {
  _stbtt_setvertex($arrayidx10, 3, $18, $19, HEAP32[$cx$addr >> 2] | 0, HEAP32[$cy$addr >> 2] | 0);
  $22 = HEAP32[$num_vertices$addr >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 } else {
  _stbtt_setvertex($arrayidx10, 2, $18, $19, 0, 0);
  $22 = HEAP32[$num_vertices$addr >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 return 0;
}

function _stbi__YCbCr_to_RGB_row($out, $y, $pcb, $pcr, $count, $step) {
 $out = $out | 0;
 $y = $y | 0;
 $pcb = $pcb | 0;
 $pcr = $pcr | 0;
 $count = $count | 0;
 $step = $step | 0;
 var $add8 = 0, $b = 0, $cb = 0, $count$addr = 0, $cr = 0, $g = 0, $i = 0, $out$addr = 0, $pcb$addr = 0, $pcr$addr = 0, $r = 0, $step$addr = 0, $y$addr = 0, $y_fixed = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $out$addr = sp + 48 | 0;
 $y$addr = sp + 44 | 0;
 $pcb$addr = sp + 40 | 0;
 $pcr$addr = sp + 36 | 0;
 $count$addr = sp + 32 | 0;
 $step$addr = sp + 28 | 0;
 $i = sp + 24 | 0;
 $y_fixed = sp + 20 | 0;
 $r = sp + 16 | 0;
 $g = sp + 12 | 0;
 $b = sp + 8 | 0;
 $cr = sp + 4 | 0;
 $cb = sp;
 HEAP32[$out$addr >> 2] = $out;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$pcb$addr >> 2] = $pcb;
 HEAP32[$pcr$addr >> 2] = $pcr;
 HEAP32[$count$addr >> 2] = $count;
 HEAP32[$step$addr >> 2] = $step;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$count$addr >> 2] | 0)) break;
  HEAP32[$y_fixed >> 2] = ((HEAPU8[(HEAP32[$y$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) << 20) + 524288;
  HEAP32[$cr >> 2] = (HEAPU8[(HEAP32[$pcr$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) - 128;
  HEAP32[$cb >> 2] = (HEAPU8[(HEAP32[$pcb$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) - 128;
  HEAP32[$r >> 2] = (HEAP32[$y_fixed >> 2] | 0) + (Math_imul(HEAP32[$cr >> 2] | 0, 1470208) | 0);
  $add8 = (HEAP32[$y_fixed >> 2] | 0) + (Math_imul(HEAP32[$cr >> 2] | 0, -748800) | 0) | 0;
  HEAP32[$g >> 2] = $add8 + ((Math_imul(HEAP32[$cb >> 2] | 0, -360960) | 0) & -65536);
  HEAP32[$b >> 2] = (HEAP32[$y_fixed >> 2] | 0) + (Math_imul(HEAP32[$cb >> 2] | 0, 1858048) | 0);
  HEAP32[$r >> 2] = HEAP32[$r >> 2] >> 20;
  HEAP32[$g >> 2] = HEAP32[$g >> 2] >> 20;
  HEAP32[$b >> 2] = HEAP32[$b >> 2] >> 20;
  do if ((HEAP32[$r >> 2] | 0) >>> 0 > 255) if ((HEAP32[$r >> 2] | 0) < 0) {
   HEAP32[$r >> 2] = 0;
   break;
  } else {
   HEAP32[$r >> 2] = 255;
   break;
  } while (0);
  do if ((HEAP32[$g >> 2] | 0) >>> 0 > 255) if ((HEAP32[$g >> 2] | 0) < 0) {
   HEAP32[$g >> 2] = 0;
   break;
  } else {
   HEAP32[$g >> 2] = 255;
   break;
  } while (0);
  do if ((HEAP32[$b >> 2] | 0) >>> 0 > 255) if ((HEAP32[$b >> 2] | 0) < 0) {
   HEAP32[$b >> 2] = 0;
   break;
  } else {
   HEAP32[$b >> 2] = 255;
   break;
  } while (0);
  HEAP8[HEAP32[$out$addr >> 2] >> 0] = HEAP32[$r >> 2];
  HEAP8[(HEAP32[$out$addr >> 2] | 0) + 1 >> 0] = HEAP32[$g >> 2];
  HEAP8[(HEAP32[$out$addr >> 2] | 0) + 2 >> 0] = HEAP32[$b >> 2];
  HEAP8[(HEAP32[$out$addr >> 2] | 0) + 3 >> 0] = -1;
  HEAP32[$out$addr >> 2] = (HEAP32[$out$addr >> 2] | 0) + (HEAP32[$step$addr >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __sg_shader_desc_defaults($agg$result, $desc) {
 $agg$result = $agg$result | 0;
 $desc = $desc | 0;
 var $cond = 0, $cond13 = 0, $cond40 = 0, $cond57 = 0, $def = 0, $desc$addr = 0, $img_desc = 0, $img_index = 0, $stage_desc = 0, $stage_index = 0, $u_desc = 0, $u_index = 0, $ub_desc = 0, $ub_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2144 | 0;
 $desc$addr = sp + 2132 | 0;
 $def = sp + 32 | 0;
 $stage_index = sp + 28 | 0;
 $stage_desc = sp + 24 | 0;
 $ub_index = sp + 20 | 0;
 $ub_desc = sp + 16 | 0;
 $u_index = sp + 12 | 0;
 $u_desc = sp + 8 | 0;
 $img_index = sp + 4 | 0;
 $img_desc = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 _memcpy($def | 0, HEAP32[$desc$addr >> 2] | 0, 2100) | 0;
 if (!(HEAP32[$def + 196 + 12 >> 2] | 0)) $cond = 45604; else $cond = HEAP32[$def + 196 + 12 >> 2] | 0;
 HEAP32[$def + 196 + 12 >> 2] = $cond;
 if (!(HEAP32[$def + 1144 + 12 >> 2] | 0)) $cond13 = 45604; else $cond13 = HEAP32[$def + 1144 + 12 >> 2] | 0;
 HEAP32[$def + 1144 + 12 >> 2] = $cond13;
 HEAP32[$stage_index >> 2] = 0;
 while (1) {
  if ((HEAP32[$stage_index >> 2] | 0) >= 2) break;
  HEAP32[$stage_desc >> 2] = (HEAP32[$stage_index >> 2] | 0) == 0 ? $def + 196 | 0 : $def + 1144 | 0;
  HEAP32[$ub_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$ub_index >> 2] | 0) >= 4) break;
   HEAP32[$ub_desc >> 2] = (HEAP32[$stage_desc >> 2] | 0) + 20 + ((HEAP32[$ub_index >> 2] | 0) * 196 | 0);
   if (!(HEAP32[HEAP32[$ub_desc >> 2] >> 2] | 0)) break;
   HEAP32[$u_index >> 2] = 0;
   while (1) {
    if ((HEAP32[$u_index >> 2] | 0) >= 16) break;
    HEAP32[$u_desc >> 2] = (HEAP32[$ub_desc >> 2] | 0) + 4 + ((HEAP32[$u_index >> 2] | 0) * 12 | 0);
    if (!(HEAP32[(HEAP32[$u_desc >> 2] | 0) + 4 >> 2] | 0)) break;
    if (!(HEAP32[(HEAP32[$u_desc >> 2] | 0) + 8 >> 2] | 0)) $cond40 = 1; else $cond40 = HEAP32[(HEAP32[$u_desc >> 2] | 0) + 8 >> 2] | 0;
    HEAP32[(HEAP32[$u_desc >> 2] | 0) + 8 >> 2] = $cond40;
    HEAP32[$u_index >> 2] = (HEAP32[$u_index >> 2] | 0) + 1;
   }
   HEAP32[$ub_index >> 2] = (HEAP32[$ub_index >> 2] | 0) + 1;
  }
  HEAP32[$img_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$img_index >> 2] | 0) >= 12) break;
   HEAP32[$img_desc >> 2] = (HEAP32[$stage_desc >> 2] | 0) + 804 + ((HEAP32[$img_index >> 2] | 0) * 12 | 0);
   if (!(HEAP32[(HEAP32[$img_desc >> 2] | 0) + 4 >> 2] | 0)) break;
   if (!(HEAP32[(HEAP32[$img_desc >> 2] | 0) + 8 >> 2] | 0)) $cond57 = 1; else $cond57 = HEAP32[(HEAP32[$img_desc >> 2] | 0) + 8 >> 2] | 0;
   HEAP32[(HEAP32[$img_desc >> 2] | 0) + 8 >> 2] = $cond57;
   HEAP32[$img_index >> 2] = (HEAP32[$img_index >> 2] | 0) + 1;
  }
  HEAP32[$stage_index >> 2] = (HEAP32[$stage_index >> 2] | 0) + 1;
 }
 _memcpy($agg$result | 0, $def | 0, 2100) | 0;
 STACKTOP = sp;
 return;
}

function _HMM_Rotate($agg$result, $Angle, $Axis) {
 $agg$result = $agg$result | 0;
 $Angle = +$Angle;
 $Axis = $Axis | 0;
 var $Angle$addr = 0, $Axis$byval_copy = 0, $CosTheta = 0, $CosValue = 0, $Result = 0, $SinTheta = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $Axis$byval_copy = sp + 92 | 0;
 $Angle$addr = sp + 88 | 0;
 $Result = sp + 24 | 0;
 $tmp = sp + 12 | 0;
 $SinTheta = sp + 8 | 0;
 $CosTheta = sp + 4 | 0;
 $CosValue = sp;
 HEAPF32[$Angle$addr >> 2] = $Angle;
 _HMM_Mat4d($Result, 1.0);
 HEAP32[$Axis$byval_copy >> 2] = HEAP32[$Axis >> 2];
 HEAP32[$Axis$byval_copy + 4 >> 2] = HEAP32[$Axis + 4 >> 2];
 HEAP32[$Axis$byval_copy + 8 >> 2] = HEAP32[$Axis + 8 >> 2];
 _HMM_NormalizeVec3($tmp, $Axis$byval_copy);
 HEAP32[$Axis >> 2] = HEAP32[$tmp >> 2];
 HEAP32[$Axis + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
 HEAP32[$Axis + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
 HEAPF32[$SinTheta >> 2] = +_HMM_SinF(+_HMM_ToRadians(+HEAPF32[$Angle$addr >> 2]));
 HEAPF32[$CosTheta >> 2] = +_HMM_CosF(+_HMM_ToRadians(+HEAPF32[$Angle$addr >> 2]));
 HEAPF32[$CosValue >> 2] = 1.0 - +HEAPF32[$CosTheta >> 2];
 HEAPF32[$Result >> 2] = +HEAPF32[$Axis >> 2] * +HEAPF32[$Axis >> 2] * +HEAPF32[$CosValue >> 2] + +HEAPF32[$CosTheta >> 2];
 HEAPF32[$Result + 4 >> 2] = +HEAPF32[$Axis >> 2] * +HEAPF32[$Axis + 4 >> 2] * +HEAPF32[$CosValue >> 2] + +HEAPF32[$Axis + 8 >> 2] * +HEAPF32[$SinTheta >> 2];
 HEAPF32[$Result + 8 >> 2] = +HEAPF32[$Axis >> 2] * +HEAPF32[$Axis + 8 >> 2] * +HEAPF32[$CosValue >> 2] - +HEAPF32[$Axis + 4 >> 2] * +HEAPF32[$SinTheta >> 2];
 HEAPF32[$Result + 16 >> 2] = +HEAPF32[$Axis + 4 >> 2] * +HEAPF32[$Axis >> 2] * +HEAPF32[$CosValue >> 2] - +HEAPF32[$Axis + 8 >> 2] * +HEAPF32[$SinTheta >> 2];
 HEAPF32[$Result + 16 + 4 >> 2] = +HEAPF32[$Axis + 4 >> 2] * +HEAPF32[$Axis + 4 >> 2] * +HEAPF32[$CosValue >> 2] + +HEAPF32[$CosTheta >> 2];
 HEAPF32[$Result + 16 + 8 >> 2] = +HEAPF32[$Axis + 4 >> 2] * +HEAPF32[$Axis + 8 >> 2] * +HEAPF32[$CosValue >> 2] + +HEAPF32[$Axis >> 2] * +HEAPF32[$SinTheta >> 2];
 HEAPF32[$Result + 32 >> 2] = +HEAPF32[$Axis + 8 >> 2] * +HEAPF32[$Axis >> 2] * +HEAPF32[$CosValue >> 2] + +HEAPF32[$Axis + 4 >> 2] * +HEAPF32[$SinTheta >> 2];
 HEAPF32[$Result + 32 + 4 >> 2] = +HEAPF32[$Axis + 8 >> 2] * +HEAPF32[$Axis + 4 >> 2] * +HEAPF32[$CosValue >> 2] - +HEAPF32[$Axis >> 2] * +HEAPF32[$SinTheta >> 2];
 HEAPF32[$Result + 32 + 8 >> 2] = +HEAPF32[$Axis + 8 >> 2] * +HEAPF32[$Axis + 8 >> 2] * +HEAPF32[$CosValue >> 2] + +HEAPF32[$CosTheta >> 2];
 dest = $agg$result;
 src = $Result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __sg_gl_create_buffer($buf, $desc) {
 $buf = $buf | 0;
 $desc = $desc | 0;
 var $buf$addr = 0, $desc$addr = 0, $gl_buf = 0, $gl_target = 0, $gl_usage = 0, $slot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $buf$addr = sp + 20 | 0;
 $desc$addr = sp + 16 | 0;
 $gl_target = sp + 12 | 0;
 $gl_usage = sp + 8 | 0;
 $slot = sp + 4 | 0;
 $gl_buf = sp;
 HEAP32[$buf$addr >> 2] = $buf;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!((HEAP32[$buf$addr >> 2] | 0) != 0 & (HEAP32[$desc$addr >> 2] | 0) != 0)) ___assert_fail(36423, 21600, 5711, 36435);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5712, 36435);
 __sg_buffer_common_init((HEAP32[$buf$addr >> 2] | 0) + 12 | 0, HEAP32[$desc$addr >> 2] | 0);
 HEAP8[(HEAP32[$buf$addr >> 2] | 0) + 48 + 8 >> 0] = 0 != (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 28 >> 2] | 0) & 1;
 HEAP32[$gl_target >> 2] = __sg_gl_buffer_target(HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 12 >> 2] | 0) | 0;
 HEAP32[$gl_usage >> 2] = __sg_gl_usage(HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 16 >> 2] | 0) | 0;
 HEAP32[$slot >> 2] = 0;
 while (1) {
  if ((HEAP32[$slot >> 2] | 0) >= (HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 28 >> 2] | 0)) {
   label = 17;
   break;
  }
  HEAP32[$gl_buf >> 2] = 0;
  if (HEAP8[(HEAP32[$buf$addr >> 2] | 0) + 48 + 8 >> 0] & 1) {
   if (!(HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 28 + (HEAP32[$slot >> 2] << 2) >> 2] | 0)) {
    label = 9;
    break;
   }
   HEAP32[$gl_buf >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 28 + (HEAP32[$slot >> 2] << 2) >> 2];
  } else {
   _glGenBuffers(1, $gl_buf | 0);
   __sg_gl_cache_store_buffer_binding(HEAP32[$gl_target >> 2] | 0);
   __sg_gl_cache_bind_buffer(HEAP32[$gl_target >> 2] | 0, HEAP32[$gl_buf >> 2] | 0);
   _glBufferData(HEAP32[$gl_target >> 2] | 0, HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 >> 2] | 0, 0, HEAP32[$gl_usage >> 2] | 0);
   if ((HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 16 >> 2] | 0) == 1) {
    if (!(HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2] | 0)) {
     label = 13;
     break;
    }
    _glBufferSubData(HEAP32[$gl_target >> 2] | 0, 0, HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2] | 0);
   }
   __sg_gl_cache_restore_buffer_binding(HEAP32[$gl_target >> 2] | 0);
  }
  HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 48 + (HEAP32[$slot >> 2] << 2) >> 2] = HEAP32[$gl_buf >> 2];
  HEAP32[$slot >> 2] = (HEAP32[$slot >> 2] | 0) + 1;
 }
 if ((label | 0) == 9) ___assert_fail(36456, 21600, 5720, 36435); else if ((label | 0) == 13) ___assert_fail(36479, 21600, 5729, 36435); else if ((label | 0) == 17) if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return 2;
 } else ___assert_fail(29811, 21600, 5736, 36435);
 return 0;
}

function _stbi__pic_load($s, $px, $py, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $px = $px | 0;
 $py = $py | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $2 = 0, $38 = 0, $comp$addr = 0, $i = 0, $px$addr = 0, $py$addr = 0, $req_comp$addr = 0, $result = 0, $retval = 0, $s$addr = 0, $tobool13 = 0, $tobool7 = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 44 | 0;
 $s$addr = sp + 40 | 0;
 $px$addr = sp + 36 | 0;
 $py$addr = sp + 32 | 0;
 $comp$addr = sp + 28 | 0;
 $req_comp$addr = sp + 24 | 0;
 $result = sp + 16 | 0;
 $i = sp + 12 | 0;
 $x = sp + 8 | 0;
 $y = sp + 4 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$px$addr >> 2] = $px;
 HEAP32[$py$addr >> 2] = $py;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[sp + 20 >> 2] = $ri;
 if (!(HEAP32[$comp$addr >> 2] | 0)) HEAP32[$comp$addr >> 2] = sp;
 HEAP32[$i >> 2] = 0;
 while (1) {
  $2 = HEAP32[$s$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= 92) break;
  _stbi__get8($2) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$x >> 2] = _stbi__get16be($2) | 0;
 HEAP32[$y >> 2] = _stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0;
 if (_stbi__at_eof(HEAP32[$s$addr >> 2] | 0) | 0) {
  $tobool7 = (_stbi__err(47858) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool7 ? 0 : 0;
  $38 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 }
 if (!(_stbi__mad3sizes_valid(HEAP32[$x >> 2] | 0, HEAP32[$y >> 2] | 0, 4, 0) | 0)) {
  $tobool13 = (_stbi__err(47570) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool13 ? 0 : 0;
  $38 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 }
 _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$result >> 2] = _stbi__malloc_mad3(HEAP32[$x >> 2] | 0, HEAP32[$y >> 2] | 0, 4, 0) | 0;
 _memset(HEAP32[$result >> 2] | 0, -1, (Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$y >> 2] | 0) | 0) << 2 | 0) | 0;
 if (!(_stbi__pic_load_core(HEAP32[$s$addr >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$y >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$result >> 2] | 0) | 0)) {
  _free(HEAP32[$result >> 2] | 0);
  HEAP32[$result >> 2] = 0;
 }
 HEAP32[HEAP32[$px$addr >> 2] >> 2] = HEAP32[$x >> 2];
 HEAP32[HEAP32[$py$addr >> 2] >> 2] = HEAP32[$y >> 2];
 if (!(HEAP32[$req_comp$addr >> 2] | 0)) HEAP32[$req_comp$addr >> 2] = HEAP32[HEAP32[$comp$addr >> 2] >> 2];
 HEAP32[$result >> 2] = _stbi__convert_format(HEAP32[$result >> 2] | 0, 4, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$y >> 2] | 0) | 0;
 HEAP32[$retval >> 2] = HEAP32[$result >> 2];
 $38 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $38 | 0;
}

function __ZNSt3__227__insertion_sort_incompleteIR7comparePmEEbT0_S4_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $2 = 0, $6 = 0, $__count$0 = 0, $__count$1 = 0, $__i$0 = 0, $__j$0 = 0, $__j$0$phi = 0, $__j$1 = 0, $__j$1$phi = 0, $__k$0 = 0, $__k$0$lcssa = 0, $add$ptr16 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $retval$5 = 0;
 L1 : do switch ($__last - $__first >> 2 | 0) {
 case 1:
 case 0:
  {
   $retval$5 = 1;
   break;
  }
 case 2:
  {
   $incdec$ptr = $__last + -4 | 0;
   if (__ZN7compareclEmm($__comp, HEAP32[$incdec$ptr >> 2] | 0, HEAP32[$__first >> 2] | 0) | 0) {
    $2 = HEAP32[$__first >> 2] | 0;
    HEAP32[$__first >> 2] = HEAP32[$incdec$ptr >> 2];
    HEAP32[$incdec$ptr >> 2] = $2;
    $retval$5 = 1;
   } else $retval$5 = 1;
   break;
  }
 case 3:
  {
   __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($__first, $__first + 4 | 0, $__last + -4 | 0, $__comp) | 0;
   $retval$5 = 1;
   break;
  }
 case 4:
  {
   __ZNSt3__27__sort4IR7comparePmEEjT0_S4_S4_S4_T_($__first, $__first + 4 | 0, $__first + 8 | 0, $__last + -4 | 0, $__comp) | 0;
   $retval$5 = 1;
   break;
  }
 case 5:
  {
   __ZNSt3__27__sort5IR7comparePmEEjT0_S4_S4_S4_S4_T_($__first, $__first + 4 | 0, $__first + 8 | 0, $__first + 12 | 0, $__last + -4 | 0, $__comp) | 0;
   $retval$5 = 1;
   break;
  }
 default:
  {
   $add$ptr16 = $__first + 8 | 0;
   __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($__first, $__first + 4 | 0, $add$ptr16, $__comp) | 0;
   $__count$0 = 0;
   $__i$0 = $__first + 12 | 0;
   $__j$0 = $add$ptr16;
   while (1) {
    if (($__i$0 | 0) == ($__last | 0)) {
     $retval$5 = 1;
     break L1;
    }
    if (__ZN7compareclEmm($__comp, HEAP32[$__i$0 >> 2] | 0, HEAP32[$__j$0 >> 2] | 0) | 0) {
     $6 = HEAP32[$__i$0 >> 2] | 0;
     $__j$1 = $__i$0;
     $__k$0 = $__j$0;
     while (1) {
      HEAP32[$__j$1 >> 2] = HEAP32[$__k$0 >> 2];
      if (($__k$0 | 0) == ($__first | 0)) {
       $__k$0$lcssa = $__first;
       break;
      }
      $incdec$ptr25 = $__k$0 + -4 | 0;
      if (__ZN7compareclEmm($__comp, $6, HEAP32[$incdec$ptr25 >> 2] | 0) | 0) {
       $__j$1$phi = $__k$0;
       $__k$0 = $incdec$ptr25;
       $__j$1 = $__j$1$phi;
      } else {
       $__k$0$lcssa = $__k$0;
       break;
      }
     }
     HEAP32[$__k$0$lcssa >> 2] = $6;
     $inc = $__count$0 + 1 | 0;
     if (($inc | 0) == 8) break; else $__count$1 = $inc;
    } else $__count$1 = $__count$0;
    $__j$0$phi = $__i$0;
    $__count$0 = $__count$1;
    $__i$0 = $__i$0 + 4 | 0;
    $__j$0 = $__j$0$phi;
   }
   $retval$5 = ($__i$0 + 4 | 0) == ($__last | 0);
  }
 } while (0);
 return $retval$5 | 0;
}

function _stbi__gif_header($s, $g, $comp, $is_info) {
 $s = $s | 0;
 $g = $g | 0;
 $comp = $comp | 0;
 $is_info = $is_info | 0;
 var $28 = 0, $call34 = 0, $call35 = 0, $comp$addr = 0, $conv37 = 0, $conv39 = 0, $conv41 = 0, $g$addr = 0, $is_info$addr = 0, $retval = 0, $s$addr = 0, $version = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $s$addr = sp + 12 | 0;
 $g$addr = sp + 8 | 0;
 $comp$addr = sp + 4 | 0;
 $is_info$addr = sp;
 $version = sp + 20 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$g$addr >> 2] = $g;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$is_info$addr >> 2] = $is_info;
 if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 71) if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 73) if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 70) if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 56) {
  HEAP8[$version >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
  if ((HEAPU8[$version >> 0] | 0 | 0) != 55) if ((HEAPU8[$version >> 0] | 0 | 0) != 57) {
   HEAP32[$retval >> 2] = _stbi__err(48105) | 0;
   $28 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $28 | 0;
  }
  if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) != 97) {
   HEAP32[$retval >> 2] = _stbi__err(48105) | 0;
   $28 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $28 | 0;
  }
  $call34 = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP32[HEAP32[$g$addr >> 2] >> 2] = $call34;
  $call35 = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 4 >> 2] = $call35;
  $conv37 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 20 >> 2] = $conv37;
  $conv39 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 24 >> 2] = $conv39;
  $conv41 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 28 >> 2] = $conv41;
  HEAP32[(HEAP32[$g$addr >> 2] | 0) + 32 >> 2] = -1;
  if (HEAP32[$comp$addr >> 2] | 0) HEAP32[HEAP32[$comp$addr >> 2] >> 2] = 4;
  if (HEAP32[$is_info$addr >> 2] | 0) {
   HEAP32[$retval >> 2] = 1;
   $28 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $28 | 0;
  }
  if (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 20 >> 2] & 128 | 0) _stbi__gif_parse_colortable(HEAP32[$s$addr >> 2] | 0, (HEAP32[$g$addr >> 2] | 0) + 40 | 0, 2 << (HEAP32[(HEAP32[$g$addr >> 2] | 0) + 20 >> 2] & 7), -1);
  HEAP32[$retval >> 2] = 1;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 HEAP32[$retval >> 2] = _stbi__err(48105) | 0;
 $28 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function __sg_shader_common_init($cmn, $desc) {
 $cmn = $cmn | 0;
 $desc = $desc | 0;
 var $16 = 0, $2 = 0, $cmn$addr = 0, $desc$addr = 0, $img_desc = 0, $img_index = 0, $num_images33 = 0, $stage = 0, $stage_desc = 0, $stage_index = 0, $ub_desc = 0, $ub_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $cmn$addr = sp + 32 | 0;
 $desc$addr = sp + 28 | 0;
 $stage_index = sp + 24 | 0;
 $stage_desc = sp + 20 | 0;
 $stage = sp + 16 | 0;
 $ub_index = sp + 12 | 0;
 $ub_desc = sp + 8 | 0;
 $img_index = sp + 4 | 0;
 $img_desc = sp;
 HEAP32[$cmn$addr >> 2] = $cmn;
 HEAP32[$desc$addr >> 2] = $desc;
 HEAP32[$stage_index >> 2] = 0;
 while (1) {
  if ((HEAP32[$stage_index >> 2] | 0) >= 2) {
   label = 16;
   break;
  }
  $2 = HEAP32[$desc$addr >> 2] | 0;
  HEAP32[$stage_desc >> 2] = (HEAP32[$stage_index >> 2] | 0) == 0 ? $2 + 196 | 0 : $2 + 1144 | 0;
  HEAP32[$stage >> 2] = (HEAP32[$cmn$addr >> 2] | 0) + ((HEAP32[$stage_index >> 2] | 0) * 120 | 0);
  if (HEAP32[HEAP32[$stage >> 2] >> 2] | 0) {
   label = 4;
   break;
  }
  HEAP32[$ub_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$ub_index >> 2] | 0) >= 4) break;
   HEAP32[$ub_desc >> 2] = (HEAP32[$stage_desc >> 2] | 0) + 20 + ((HEAP32[$ub_index >> 2] | 0) * 196 | 0);
   if (!(HEAP32[HEAP32[$ub_desc >> 2] >> 2] | 0)) break;
   HEAP32[(HEAP32[$stage >> 2] | 0) + 8 + (HEAP32[$ub_index >> 2] << 2) >> 2] = HEAP32[HEAP32[$ub_desc >> 2] >> 2];
   $16 = HEAP32[$stage >> 2] | 0;
   HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
   HEAP32[$ub_index >> 2] = (HEAP32[$ub_index >> 2] | 0) + 1;
  }
  if (HEAP32[(HEAP32[$stage >> 2] | 0) + 4 >> 2] | 0) {
   label = 10;
   break;
  }
  HEAP32[$img_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$img_index >> 2] | 0) >= 12) break;
   HEAP32[$img_desc >> 2] = (HEAP32[$stage_desc >> 2] | 0) + 804 + ((HEAP32[$img_index >> 2] | 0) * 12 | 0);
   if (!(HEAP32[(HEAP32[$img_desc >> 2] | 0) + 4 >> 2] | 0)) break;
   HEAP32[(HEAP32[$stage >> 2] | 0) + 24 + (HEAP32[$img_index >> 2] << 3) >> 2] = HEAP32[(HEAP32[$img_desc >> 2] | 0) + 4 >> 2];
   HEAP32[(HEAP32[$stage >> 2] | 0) + 24 + (HEAP32[$img_index >> 2] << 3) + 4 >> 2] = HEAP32[(HEAP32[$img_desc >> 2] | 0) + 8 >> 2];
   $num_images33 = (HEAP32[$stage >> 2] | 0) + 4 | 0;
   HEAP32[$num_images33 >> 2] = (HEAP32[$num_images33 >> 2] | 0) + 1;
   HEAP32[$img_index >> 2] = (HEAP32[$img_index >> 2] | 0) + 1;
  }
  HEAP32[$stage_index >> 2] = (HEAP32[$stage_index >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) ___assert_fail(37897, 21600, 2798, 37928); else if ((label | 0) == 10) ___assert_fail(37951, 21600, 2807, 37928); else if ((label | 0) == 16) {
  STACKTOP = sp;
  return;
 }
}

function _fons__atlasInsertNode($atlas, $idx, $x, $y, $w) {
 $atlas = $atlas | 0;
 $idx = $idx | 0;
 $x = $x | 0;
 $y = $y | 0;
 $w = $w | 0;
 var $41 = 0, $arrayidx = 0, $arrayidx16 = 0, $atlas$addr = 0, $call = 0, $cond = 0, $i = 0, $idx$addr = 0, $nnodes27 = 0, $retval = 0, $w$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 24 | 0;
 $atlas$addr = sp + 20 | 0;
 $idx$addr = sp + 16 | 0;
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $w$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$atlas$addr >> 2] = $atlas;
 HEAP32[$idx$addr >> 2] = $idx;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$w$addr >> 2] = $w;
 if (((HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 12 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 16 >> 2] | 0)) {
  if (!(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 16 >> 2] | 0)) $cond = 8; else $cond = HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 16 >> 2] << 1;
  HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 16 >> 2] = $cond;
  $call = _realloc(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0, (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 16 >> 2] | 0) * 6 | 0) | 0;
  HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] = $call;
  if (!(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0)) {
   HEAP32[$retval >> 2] = 0;
   $41 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $41 | 0;
  }
 }
 HEAP32[$i >> 2] = HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 12 >> 2];
 while (1) {
  if ((HEAP32[$i >> 2] | 0) <= (HEAP32[$idx$addr >> 2] | 0)) break;
  $arrayidx = (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) | 0;
  $arrayidx16 = (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$i >> 2] | 0) - 1 | 0) * 6 | 0) | 0;
  HEAP16[$arrayidx >> 1] = HEAP16[$arrayidx16 >> 1] | 0;
  HEAP16[$arrayidx + 2 >> 1] = HEAP16[$arrayidx16 + 2 >> 1] | 0;
  HEAP16[$arrayidx + 4 >> 1] = HEAP16[$arrayidx16 + 4 >> 1] | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$idx$addr >> 2] | 0) * 6 | 0) >> 1] = HEAP32[$x$addr >> 2];
 HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$idx$addr >> 2] | 0) * 6 | 0) + 2 >> 1] = HEAP32[$y$addr >> 2];
 HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$idx$addr >> 2] | 0) * 6 | 0) + 4 >> 1] = HEAP32[$w$addr >> 2];
 $nnodes27 = (HEAP32[$atlas$addr >> 2] | 0) + 12 | 0;
 HEAP32[$nnodes27 >> 2] = (HEAP32[$nnodes27 >> 2] | 0) + 1;
 HEAP32[$retval >> 2] = 1;
 $41 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $41 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv($this) {
 $this = $this | 0;
 var $ElabSpef = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $call14 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp7$byval_copy = sp + 32 | 0;
 $ElabSpef = sp;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp2 = sp + 16 | 0;
 $agg$tmp7 = sp + 8 | 0;
 __ZN12_GLOBAL__N_110StringViewC2Ev($ElabSpef);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55235);
 HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0) __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef, 55238); else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 55245);
  HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
  HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef, 55248);
   break;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 55254);
  HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$agg$tmp7$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp7$byval_copy) | 0) __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef, 55257);
 } while (0);
 $call14 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, 0) | 0;
 HEAP32[$agg$tmp7$byval_copy >> 2] = $call14;
 if (!$call14) $retval$0 = 0; else if (__ZNK12_GLOBAL__N_110StringView5emptyEv($ElabSpef) | 0) $retval$0 = $call14; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this, $ElabSpef, $agg$tmp7$byval_copy) | 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $2 = 0, $add$ptr = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_to_dst_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $add$ptr = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $2 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
 $path_dst_ptr_to_static_ptr = $info + 24 | 0;
 $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
 $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
 $number_to_dst_ptr = $info + 40 | 0;
 dest = $dst_ptr_leading_to_static_ptr;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
 HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($2, $dst_type, 0) | 0) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 7]($2, $info, $add$ptr, $add$ptr, 1, 0);
  $dst_ptr$0 = (HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1 ? $add$ptr : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 7]($2, $info, $add$ptr, 1, 0);
  switch (HEAP32[$info + 36 >> 2] | 0) {
  case 0:
   {
    $dst_ptr$0 = (HEAP32[$number_to_dst_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1 ? HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $dst_ptr$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) != 1) if (!((HEAP32[$number_to_dst_ptr >> 2] | 0) == 0 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function _fons__getVertAlign($stash, $font, $align, $isize) {
 $stash = $stash | 0;
 $font = $font | 0;
 $align = $align | 0;
 $isize = $isize | 0;
 var $31 = 0.0, $align$addr = 0, $font$addr = 0, $isize$addr = 0, $retval = 0, $stash$addr = 0, $tobool2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 12 | 0;
 $stash$addr = sp + 8 | 0;
 $font$addr = sp + 4 | 0;
 $align$addr = sp;
 $isize$addr = sp + 16 | 0;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$align$addr >> 2] = $align;
 HEAP16[$isize$addr >> 1] = $isize;
 $tobool2 = (HEAP32[$align$addr >> 2] & 8 | 0) != 0;
 if (HEAPU8[(HEAP32[$stash$addr >> 2] | 0) + 8 >> 0] & 1 | 0) {
  if ($tobool2) {
   HEAPF32[$retval >> 2] = +HEAPF32[(HEAP32[$font$addr >> 2] | 0) + 196 >> 2] * +(HEAP16[$isize$addr >> 1] | 0) / 10.0;
   $31 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$31;
  }
  if (HEAP32[$align$addr >> 2] & 16 | 0) {
   HEAPF32[$retval >> 2] = (+HEAPF32[(HEAP32[$font$addr >> 2] | 0) + 196 >> 2] + +HEAPF32[(HEAP32[$font$addr >> 2] | 0) + 200 >> 2]) / 2.0 * +(HEAP16[$isize$addr >> 1] | 0) / 10.0;
   $31 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$31;
  }
  if (HEAP32[$align$addr >> 2] & 64 | 0) {
   HEAPF32[$retval >> 2] = 0.0;
   $31 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$31;
  }
  if (HEAP32[$align$addr >> 2] & 32 | 0) {
   HEAPF32[$retval >> 2] = +HEAPF32[(HEAP32[$font$addr >> 2] | 0) + 200 >> 2] * +(HEAP16[$isize$addr >> 1] | 0) / 10.0;
   $31 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$31;
  }
 } else {
  if ($tobool2) {
   HEAPF32[$retval >> 2] = -+HEAPF32[(HEAP32[$font$addr >> 2] | 0) + 196 >> 2] * +(HEAP16[$isize$addr >> 1] | 0) / 10.0;
   $31 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$31;
  }
  if (HEAP32[$align$addr >> 2] & 16 | 0) {
   HEAPF32[$retval >> 2] = -(+HEAPF32[(HEAP32[$font$addr >> 2] | 0) + 196 >> 2] + +HEAPF32[(HEAP32[$font$addr >> 2] | 0) + 200 >> 2]) / 2.0 * +(HEAP16[$isize$addr >> 1] | 0) / 10.0;
   $31 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$31;
  }
  if (HEAP32[$align$addr >> 2] & 64 | 0) {
   HEAPF32[$retval >> 2] = 0.0;
   $31 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$31;
  }
  if (HEAP32[$align$addr >> 2] & 32 | 0) {
   HEAPF32[$retval >> 2] = -+HEAPF32[(HEAP32[$font$addr >> 2] | 0) + 200 >> 2] * +(HEAP16[$isize$addr >> 1] | 0) / 10.0;
   $31 = +HEAPF32[$retval >> 2];
   STACKTOP = sp;
   return +$31;
  }
 }
 HEAPF32[$retval >> 2] = 0.0;
 $31 = +HEAPF32[$retval >> 2];
 STACKTOP = sp;
 return +$31;
}

function _stbtt_GetGlyphHMetrics($info, $glyph_index, $advanceWidth, $leftSideBearing) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $advanceWidth = $advanceWidth | 0;
 $leftSideBearing = $leftSideBearing | 0;
 var $advanceWidth$addr = 0, $conv18 = 0, $conv29 = 0, $conv44 = 0, $conv8 = 0, $glyph_index$addr = 0, $info$addr = 0, $leftSideBearing$addr = 0, $numOfLongHorMetrics = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $info$addr = sp + 12 | 0;
 $glyph_index$addr = sp + 8 | 0;
 $advanceWidth$addr = sp + 4 | 0;
 $leftSideBearing$addr = sp;
 $numOfLongHorMetrics = sp + 16 | 0;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph_index$addr >> 2] = $glyph_index;
 HEAP32[$advanceWidth$addr >> 2] = $advanceWidth;
 HEAP32[$leftSideBearing$addr >> 2] = $leftSideBearing;
 HEAP16[$numOfLongHorMetrics >> 1] = _ttUSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] | 0) + 34 | 0) | 0;
 $tobool = (HEAP32[$advanceWidth$addr >> 2] | 0) != 0;
 if ((HEAP32[$glyph_index$addr >> 2] | 0) < (HEAPU16[$numOfLongHorMetrics >> 1] | 0 | 0)) {
  if ($tobool) {
   $conv8 = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[$glyph_index$addr >> 2] << 2) | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$advanceWidth$addr >> 2] >> 2] = $conv8;
  }
  if (!(HEAP32[$leftSideBearing$addr >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  $conv18 = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[$glyph_index$addr >> 2] << 2) + 2 | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[$leftSideBearing$addr >> 2] >> 2] = $conv18;
  STACKTOP = sp;
  return;
 } else {
  if ($tobool) {
   $conv29 = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 32 >> 2] | 0) + ((HEAPU16[$numOfLongHorMetrics >> 1] | 0) - 1 << 2) | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$advanceWidth$addr >> 2] >> 2] = $conv29;
  }
  if (!(HEAP32[$leftSideBearing$addr >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  $conv44 = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 32 >> 2] | 0) + ((HEAPU16[$numOfLongHorMetrics >> 1] | 0) << 2) + ((HEAP32[$glyph_index$addr >> 2] | 0) - (HEAPU16[$numOfLongHorMetrics >> 1] | 0) << 1) | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[$leftSideBearing$addr >> 2] >> 2] = $conv44;
  STACKTOP = sp;
  return;
 }
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $4 = 0, $6 = 0, $9 = 0, $add = 0, $call741 = 0, $call746 = 0, $cmp24 = 0, $cnt$0 = 0, $fd = 0, $iov$043 = 0, $iov$1 = 0, $iov_len36 = 0, $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$044 = 0, $retval$0 = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $iovs = sp;
 $wbase = $f + 28 | 0;
 $0 = HEAP32[$wbase >> 2] | 0;
 HEAP32[$iovs >> 2] = $0;
 $wpos = $f + 20 | 0;
 $sub$ptr$sub = (HEAP32[$wpos >> 2] | 0) - $0 | 0;
 HEAP32[$iovs + 4 >> 2] = $sub$ptr$sub;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $add = $sub$ptr$sub + $len | 0;
 $fd = $f + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$fd >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $iovs;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $call741 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($add | 0) == ($call741 | 0)) label = 3; else {
  $call746 = $call741;
  $iov$043 = $iovs;
  $iovcnt$045 = 2;
  $rem$044 = $add;
  while (1) {
   if (($call746 | 0) < 0) break;
   $rem$044 = $rem$044 - $call746 | 0;
   $9 = HEAP32[$iov$043 + 4 >> 2] | 0;
   $cmp24 = $call746 >>> 0 > $9 >>> 0;
   $iov$1 = $cmp24 ? $iov$043 + 8 | 0 : $iov$043;
   $iovcnt$1 = $iovcnt$045 + ($cmp24 << 31 >> 31) | 0;
   $cnt$0 = $call746 - ($cmp24 ? $9 : 0) | 0;
   HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$0;
   $iov_len36 = $iov$1 + 4 | 0;
   HEAP32[$iov_len36 >> 2] = (HEAP32[$iov_len36 >> 2] | 0) - $cnt$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$fd >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $iov$1;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $iovcnt$1;
   $call746 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($rem$044 | 0) == ($call746 | 0)) {
    label = 3;
    break L1;
   } else {
    $iov$043 = $iov$1;
    $iovcnt$045 = $iovcnt$1;
   }
  }
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$045 | 0) == 2) $retval$0 = 0; else $retval$0 = $len - (HEAP32[$iov$043 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $4 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $4 + (HEAP32[$f + 48 >> 2] | 0);
  $6 = $4;
  HEAP32[$wbase >> 2] = $6;
  HEAP32[$wpos >> 2] = $6;
  $retval$0 = $len;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbi__psd_decode_rle($s, $p, $pixelCount) {
 $s = $s | 0;
 $p = $p | 0;
 $pixelCount = $pixelCount | 0;
 var $26 = 0, $5 = 0, $call11 = 0, $count = 0, $len = 0, $nleft = 0, $p$addr = 0, $pixelCount$addr = 0, $retval = 0, $s$addr = 0, $sub = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 24 | 0;
 $s$addr = sp + 20 | 0;
 $p$addr = sp + 16 | 0;
 $pixelCount$addr = sp + 12 | 0;
 $count = sp + 8 | 0;
 $nleft = sp + 4 | 0;
 $len = sp;
 $val = sp + 28 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$pixelCount$addr >> 2] = $pixelCount;
 HEAP32[$count >> 2] = 0;
 L1 : while (1) {
  $sub = (HEAP32[$pixelCount$addr >> 2] | 0) - (HEAP32[$count >> 2] | 0) | 0;
  HEAP32[$nleft >> 2] = $sub;
  if (($sub | 0) <= 0) {
   label = 17;
   break;
  }
  HEAP32[$len >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  L4 : do if ((HEAP32[$len >> 2] | 0) != 128) {
   $5 = HEAP32[$len >> 2] | 0;
   if ((HEAP32[$len >> 2] | 0) < 128) {
    HEAP32[$len >> 2] = $5 + 1;
    if ((HEAP32[$len >> 2] | 0) > (HEAP32[$nleft >> 2] | 0)) {
     label = 6;
     break L1;
    }
    HEAP32[$count >> 2] = (HEAP32[$count >> 2] | 0) + (HEAP32[$len >> 2] | 0);
    while (1) {
     if (!(HEAP32[$len >> 2] | 0)) break L4;
     $call11 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
     HEAP8[HEAP32[$p$addr >> 2] >> 0] = $call11;
     HEAP32[$p$addr >> 2] = (HEAP32[$p$addr >> 2] | 0) + 4;
     HEAP32[$len >> 2] = (HEAP32[$len >> 2] | 0) + -1;
    }
   }
   if (($5 | 0) > 128) {
    HEAP32[$len >> 2] = 257 - (HEAP32[$len >> 2] | 0);
    if ((HEAP32[$len >> 2] | 0) > (HEAP32[$nleft >> 2] | 0)) {
     label = 12;
     break L1;
    }
    HEAP8[$val >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
    HEAP32[$count >> 2] = (HEAP32[$count >> 2] | 0) + (HEAP32[$len >> 2] | 0);
    while (1) {
     if (!(HEAP32[$len >> 2] | 0)) break L4;
     HEAP8[HEAP32[$p$addr >> 2] >> 0] = HEAP8[$val >> 0] | 0;
     HEAP32[$p$addr >> 2] = (HEAP32[$p$addr >> 2] | 0) + 4;
     HEAP32[$len >> 2] = (HEAP32[$len >> 2] | 0) + -1;
    }
   }
  } while (0);
 }
 if ((label | 0) == 6) {
  HEAP32[$retval >> 2] = 0;
  $26 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 } else if ((label | 0) == 12) {
  HEAP32[$retval >> 2] = 0;
  $26 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 } else if ((label | 0) == 17) {
  HEAP32[$retval >> 2] = 1;
  $26 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $5 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $tobool19 = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $12 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 7]($12, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    do if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
     $found_our_static_ptr = $info + 52 | 0;
     HEAP8[$found_our_static_ptr >> 0] = 0;
     $found_any_static_type = $info + 53 | 0;
     HEAP8[$found_any_static_type >> 0] = 0;
     $5 = HEAP32[$this + 8 >> 2] | 0;
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 7]($5, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
      HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
      break;
     } else {
      $tobool19 = (HEAP8[$found_our_static_ptr >> 0] | 0) == 0;
      HEAP32[$is_dst_type_derived_from_static_type >> 2] = 3;
      if ($tobool19) break; else break L1;
     }
    } while (0);
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
    if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
    HEAP8[$info + 54 >> 0] = 1;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZN6DrMesh8triangleEffffffffffff($this, $x1, $y1, $tx1, $ty1, $x2, $y2, $tx2, $ty2, $x3, $y3, $tx3, $ty3) {
 $this = $this | 0;
 $x1 = +$x1;
 $y1 = +$y1;
 $tx1 = +$tx1;
 $ty1 = +$ty1;
 $x2 = +$x2;
 $y2 = +$y2;
 $tx2 = +$tx2;
 $ty2 = +$ty2;
 $x3 = +$x3;
 $y3 = +$y3;
 $tx3 = +$tx3;
 $ty3 = +$ty3;
 var $mul = 0.0, $n = 0, $ref$tmp = 0, $ref$tmp2 = 0, $ref$tmp3 = 0, $ref$tmp4 = 0, $sub = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $n = sp + 48 | 0;
 $ref$tmp = sp + 36 | 0;
 $ref$tmp2 = sp + 24 | 0;
 $ref$tmp3 = sp + 12 | 0;
 $ref$tmp4 = sp;
 __ZN6DrVec3C2Ev($n);
 __ZN6DrVec3C2Efff($ref$tmp2, $x1, $y1, 0.0);
 __ZN6DrVec3C2Efff($ref$tmp3, $x3, $y3, 0.0);
 __ZN6DrVec3C2Efff($ref$tmp4, $x2, $y2, 0.0);
 __ZN6DrVec314triangleNormalERKS_S1_S1_($ref$tmp, $ref$tmp2, $ref$tmp3, $ref$tmp4);
 HEAP32[$n >> 2] = HEAP32[$ref$tmp >> 2];
 HEAP32[$n + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
 HEAP32[$n + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
 $mul = +HEAPF32[$this + 28 >> 2] * .10000000149011612;
 __ZN6DrVec3C2Efff($ref$tmp, $x1, $y1, $mul);
 __ZN6DrVec2C2Eff($ref$tmp2, $tx1, $ty1);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp2, 0);
 __ZN6DrVec3C2Efff($ref$tmp, $x2, $y2, $mul);
 __ZN6DrVec2C2Eff($ref$tmp2, $tx2, $ty2);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp2, 1);
 __ZN6DrVec3C2Efff($ref$tmp, $x3, $y3, $mul);
 __ZN6DrVec2C2Eff($ref$tmp2, $tx3, $ty3);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp2, 2);
 __ZN6DrVec3C2Efff($ref$tmp2, $x1, $y1, 0.0);
 __ZN6DrVec3C2Efff($ref$tmp3, $x2, $y2, 0.0);
 __ZN6DrVec3C2Efff($ref$tmp4, $x3, $y3, 0.0);
 __ZN6DrVec314triangleNormalERKS_S1_S1_($ref$tmp, $ref$tmp2, $ref$tmp3, $ref$tmp4);
 HEAP32[$n >> 2] = HEAP32[$ref$tmp >> 2];
 HEAP32[$n + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
 HEAP32[$n + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
 $sub = -$mul;
 __ZN6DrVec3C2Efff($ref$tmp, $x1, $y1, $sub);
 __ZN6DrVec2C2Eff($ref$tmp2, $tx1, $ty1);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp2, 0);
 __ZN6DrVec3C2Efff($ref$tmp, $x3, $y3, $sub);
 __ZN6DrVec2C2Eff($ref$tmp2, $tx3, $ty3);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp2, 1);
 __ZN6DrVec3C2Efff($ref$tmp, $x2, $y2, $sub);
 __ZN6DrVec2C2Eff($ref$tmp2, $tx2, $ty2);
 __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $ref$tmp, $n, $ref$tmp2, 2);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE($this, $Data_) {
 $this = $this | 0;
 $Data_ = $Data_ | 0;
 var $0 = 0, $5 = 0, $6 = 0, $ArrayCache = 0, $Data = 0, $FunctionCache = 0, $RHSComponentCache = 0, $__first$addr$0$i = 0, $__first$addr$0$i1 = 0, $__first$addr$0$i8 = 0, $call = 0, $call11 = 0, $call14 = 0, $call23 = 0, $call26 = 0, $call5 = 0, label = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 27, 1, 1, 1);
 HEAP32[$this >> 2] = 13640;
 $Data = $this + 8 | 0;
 $0 = $Data_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $Data;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $RHSComponentCache = $this + 5 | 0;
 HEAP8[$RHSComponentCache >> 0] = 2;
 $FunctionCache = $this + 7 | 0;
 HEAP8[$FunctionCache >> 0] = 2;
 $ArrayCache = $this + 6 | 0;
 HEAP8[$ArrayCache >> 0] = 2;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data) | 0;
 $call5 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data) | 0;
 $__first$addr$0$i = $call;
 while (1) {
  if (($__first$addr$0$i | 0) == ($call5 | 0)) {
   label = 4;
   break;
  }
  if (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_(HEAP32[$__first$addr$0$i >> 2] | 0) | 0) $__first$addr$0$i = $__first$addr$0$i + 4 | 0; else break;
 }
 if ((label | 0) == 4) HEAP8[$ArrayCache >> 0] = 1;
 $call11 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data) | 0;
 $call14 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data) | 0;
 $__first$addr$0$i1 = $call11;
 while (1) {
  if (($__first$addr$0$i1 | 0) == ($call14 | 0)) {
   label = 8;
   break;
  }
  if (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_(HEAP32[$__first$addr$0$i1 >> 2] | 0) | 0) $__first$addr$0$i1 = $__first$addr$0$i1 + 4 | 0; else break;
 }
 if ((label | 0) == 8) HEAP8[$FunctionCache >> 0] = 1;
 $call23 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data) | 0;
 $call26 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data) | 0;
 $__first$addr$0$i8 = $call23;
 while (1) {
  if (($__first$addr$0$i8 | 0) == ($call26 | 0)) {
   label = 12;
   break;
  }
  if (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_(HEAP32[$__first$addr$0$i8 >> 2] | 0) | 0) $__first$addr$0$i8 = $__first$addr$0$i8 + 4 | 0; else break;
 }
 if ((label | 0) == 12) HEAP8[$RHSComponentCache >> 0] = 1;
 return;
}

function __sg_validate_pipeline_desc($desc) {
 $desc = $desc | 0;
 var $a_desc = 0, $attr_index = 0, $attrs_cont = 0, $buf_index = 0, $call38 = 0, $desc$addr = 0, $l_desc = 0, $layout = 0, $shd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $desc$addr = sp + 20 | 0;
 $buf_index = sp + 16 | 0;
 $l_desc = sp + 12 | 0;
 $shd = sp + 8 | 0;
 $attrs_cont = sp + 24 | 0;
 $attr_index = sp + 4 | 0;
 $a_desc = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 13467, 38281);
 __sg_validate_begin();
 __sg_validate((HEAP32[HEAP32[$desc$addr >> 2] >> 2] | 0) == 0, 32);
 __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 552 >> 2] | 0) == 0, 32);
 __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0) != 0, 33);
 HEAP32[$buf_index >> 2] = 0;
 while (1) {
  $layout = (HEAP32[$desc$addr >> 2] | 0) + 8 | 0;
  if ((HEAP32[$buf_index >> 2] | 0) >= 8) break;
  HEAP32[$l_desc >> 2] = $layout + ((HEAP32[$buf_index >> 2] | 0) * 12 | 0);
  if (HEAP32[HEAP32[$l_desc >> 2] >> 2] | 0) __sg_validate((HEAP32[HEAP32[$l_desc >> 2] >> 2] & 3 | 0) == 0, 35);
  HEAP32[$buf_index >> 2] = (HEAP32[$buf_index >> 2] | 0) + 1;
 }
 __sg_validate((HEAP32[$layout + 96 + 8 >> 2] | 0) != 0, 34);
 HEAP32[$shd >> 2] = __sg_lookup_shader(2164252, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
 __sg_validate(0 != (HEAP32[$shd >> 2] | 0), 33);
 if (!(HEAP32[$shd >> 2] | 0)) {
  $call38 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $call38 | 0;
 }
 __sg_validate((HEAP32[(HEAP32[$shd >> 2] | 0) + 8 >> 2] | 0) == 2, 33);
 HEAP8[$attrs_cont >> 0] = 1;
 HEAP32[$attr_index >> 2] = 0;
 while (1) {
  if ((HEAP32[$attr_index >> 2] | 0) >= 16) {
   label = 17;
   break;
  }
  HEAP32[$a_desc >> 2] = (HEAP32[$desc$addr >> 2] | 0) + 8 + 96 + ((HEAP32[$attr_index >> 2] | 0) * 12 | 0);
  if (!(HEAP32[(HEAP32[$a_desc >> 2] | 0) + 8 >> 2] | 0)) HEAP8[$attrs_cont >> 0] = 0; else {
   __sg_validate(HEAP8[$attrs_cont >> 0] & 1, 34);
   if ((HEAP32[HEAP32[$a_desc >> 2] >> 2] | 0) >= 8) {
    label = 14;
    break;
   }
   __sg_validate((__sg_strempty((HEAP32[$shd >> 2] | 0) + 252 + 4 + (HEAP32[$attr_index >> 2] << 4) | 0) | 0) ^ 1, 36);
  }
  HEAP32[$attr_index >> 2] = (HEAP32[$attr_index >> 2] | 0) + 1;
 }
 if ((label | 0) == 14) ___assert_fail(38035, 21600, 13492, 38281); else if ((label | 0) == 17) {
  $call38 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $call38 | 0;
 }
 return 0;
}

function __sgl_vtx($x, $y, $z, $u, $v, $rgba) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $u = +$u;
 $v = +$v;
 $rgba = $rgba | 0;
 var $22 = 0, $4 = 0, $7 = 0, $add$ptr = 0, $add$ptr7 = 0, $inc = 0, $rgba$addr = 0, $u$addr = 0, $v$addr = 0, $vtx = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $x$addr = sp + 24 | 0;
 $y$addr = sp + 20 | 0;
 $z$addr = sp + 16 | 0;
 $u$addr = sp + 12 | 0;
 $v$addr = sp + 8 | 0;
 $rgba$addr = sp + 4 | 0;
 $vtx = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 HEAPF32[$u$addr >> 2] = $u;
 HEAPF32[$v$addr >> 2] = $v;
 HEAP32[$rgba$addr >> 2] = $rgba;
 if (!(HEAP8[2165512] & 1)) ___assert_fail(23977, 23371, 2413, 41924);
 if ((HEAP32[541382] | 0) == 5) if ((HEAP32[541376] & 3 | 0) == 3) {
  HEAP32[$vtx >> 2] = __sgl_next_vertex() | 0;
  if (HEAP32[$vtx >> 2] | 0) {
   $4 = HEAP32[$vtx >> 2] | 0;
   $add$ptr = (HEAP32[$vtx >> 2] | 0) + -72 | 0;
   HEAP32[$4 >> 2] = HEAP32[$add$ptr >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$add$ptr + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$add$ptr + 8 >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$add$ptr + 12 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$add$ptr + 16 >> 2];
   HEAP32[$4 + 20 >> 2] = HEAP32[$add$ptr + 20 >> 2];
  }
  HEAP32[$vtx >> 2] = __sgl_next_vertex() | 0;
  if (HEAP32[$vtx >> 2] | 0) {
   $7 = HEAP32[$vtx >> 2] | 0;
   $add$ptr7 = (HEAP32[$vtx >> 2] | 0) + -48 | 0;
   HEAP32[$7 >> 2] = HEAP32[$add$ptr7 >> 2];
   HEAP32[$7 + 4 >> 2] = HEAP32[$add$ptr7 + 4 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[$add$ptr7 + 8 >> 2];
   HEAP32[$7 + 12 >> 2] = HEAP32[$add$ptr7 + 12 >> 2];
   HEAP32[$7 + 16 >> 2] = HEAP32[$add$ptr7 + 16 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$add$ptr7 + 20 >> 2];
  }
 }
 HEAP32[$vtx >> 2] = __sgl_next_vertex() | 0;
 if (!(HEAP32[$vtx >> 2] | 0)) {
  $22 = HEAP32[541376] | 0;
  $inc = $22 + 1 | 0;
  HEAP32[541376] = $inc;
  STACKTOP = sp;
  return;
 }
 HEAPF32[HEAP32[$vtx >> 2] >> 2] = +HEAPF32[$x$addr >> 2];
 HEAPF32[(HEAP32[$vtx >> 2] | 0) + 4 >> 2] = +HEAPF32[$y$addr >> 2];
 HEAPF32[(HEAP32[$vtx >> 2] | 0) + 8 >> 2] = +HEAPF32[$z$addr >> 2];
 HEAPF32[(HEAP32[$vtx >> 2] | 0) + 12 >> 2] = +HEAPF32[$u$addr >> 2];
 HEAPF32[(HEAP32[$vtx >> 2] | 0) + 12 + 4 >> 2] = +HEAPF32[$v$addr >> 2];
 HEAP32[(HEAP32[$vtx >> 2] | 0) + 20 >> 2] = HEAP32[$rgba$addr >> 2];
 $22 = HEAP32[541376] | 0;
 $inc = $22 + 1 | 0;
 HEAP32[541376] = $inc;
 STACKTOP = sp;
 return;
}

function __sgl_matmul4($p, $a, $b) {
 $p = $p | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $a$addr = 0, $ai0 = 0, $ai1 = 0, $ai2 = 0, $ai3 = 0, $b$addr = 0, $p$addr = 0, $r = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $p$addr = sp + 28 | 0;
 $a$addr = sp + 24 | 0;
 $b$addr = sp + 20 | 0;
 $r = sp + 16 | 0;
 $ai0 = sp + 12 | 0;
 $ai1 = sp + 8 | 0;
 $ai2 = sp + 4 | 0;
 $ai3 = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$r >> 2] = 0;
 while (1) {
  if ((HEAP32[$r >> 2] | 0) >= 4) break;
  HEAPF32[$ai0 >> 2] = +HEAPF32[(HEAP32[$a$addr >> 2] | 0) + (HEAP32[$r >> 2] << 2) >> 2];
  HEAPF32[$ai1 >> 2] = +HEAPF32[(HEAP32[$a$addr >> 2] | 0) + 16 + (HEAP32[$r >> 2] << 2) >> 2];
  HEAPF32[$ai2 >> 2] = +HEAPF32[(HEAP32[$a$addr >> 2] | 0) + 32 + (HEAP32[$r >> 2] << 2) >> 2];
  HEAPF32[$ai3 >> 2] = +HEAPF32[(HEAP32[$a$addr >> 2] | 0) + 48 + (HEAP32[$r >> 2] << 2) >> 2];
  HEAPF32[(HEAP32[$p$addr >> 2] | 0) + (HEAP32[$r >> 2] << 2) >> 2] = +HEAPF32[$ai0 >> 2] * +HEAPF32[HEAP32[$b$addr >> 2] >> 2] + +HEAPF32[$ai1 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 4 >> 2] + +HEAPF32[$ai2 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] + +HEAPF32[$ai3 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 12 >> 2];
  HEAPF32[(HEAP32[$p$addr >> 2] | 0) + 16 + (HEAP32[$r >> 2] << 2) >> 2] = +HEAPF32[$ai0 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 16 >> 2] + +HEAPF32[$ai1 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 16 + 4 >> 2] + +HEAPF32[$ai2 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 16 + 8 >> 2] + +HEAPF32[$ai3 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 16 + 12 >> 2];
  HEAPF32[(HEAP32[$p$addr >> 2] | 0) + 32 + (HEAP32[$r >> 2] << 2) >> 2] = +HEAPF32[$ai0 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 32 >> 2] + +HEAPF32[$ai1 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 32 + 4 >> 2] + +HEAPF32[$ai2 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 32 + 8 >> 2] + +HEAPF32[$ai3 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 32 + 12 >> 2];
  HEAPF32[(HEAP32[$p$addr >> 2] | 0) + 48 + (HEAP32[$r >> 2] << 2) >> 2] = +HEAPF32[$ai0 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 48 >> 2] + +HEAPF32[$ai1 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 48 + 4 >> 2] + +HEAPF32[$ai2 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 48 + 8 >> 2] + +HEAPF32[$ai3 >> 2] * +HEAPF32[(HEAP32[$b$addr >> 2] | 0) + 48 + 12 >> 2];
  HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbtt__csctx_v($c, $type, $x, $y, $cx, $cy, $cx1, $cy1) {
 $c = $c | 0;
 $type = $type | 0;
 $x = $x | 0;
 $y = $y | 0;
 $cx = $cx | 0;
 $cy = $cy | 0;
 $cx1 = $cx1 | 0;
 $cy1 = $cy1 | 0;
 var $2 = 0, $30 = 0, $31 = 0, $c$addr = 0, $cx$addr = 0, $cx1$addr = 0, $cy$addr = 0, $cy1$addr = 0, $inc = 0, $num_vertices14 = 0, $type$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $c$addr = sp + 24 | 0;
 $type$addr = sp + 28 | 0;
 $x$addr = sp + 20 | 0;
 $y$addr = sp + 16 | 0;
 $cx$addr = sp + 12 | 0;
 $cy$addr = sp + 8 | 0;
 $cx1$addr = sp + 4 | 0;
 $cy1$addr = sp;
 HEAP32[$c$addr >> 2] = $c;
 HEAP8[$type$addr >> 0] = $type;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$cx$addr >> 2] = $cx;
 HEAP32[$cy$addr >> 2] = $cy;
 HEAP32[$cx1$addr >> 2] = $cx1;
 HEAP32[$cy1$addr >> 2] = $cy1;
 $2 = HEAP32[$c$addr >> 2] | 0;
 if (!(HEAP32[HEAP32[$c$addr >> 2] >> 2] | 0)) {
  _stbtt_setvertex((HEAP32[$2 + 40 >> 2] | 0) + ((HEAP32[(HEAP32[$c$addr >> 2] | 0) + 44 >> 2] | 0) * 14 | 0) | 0, HEAP8[$type$addr >> 0] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$cx$addr >> 2] | 0, HEAP32[$cy$addr >> 2] | 0);
  HEAP16[(HEAP32[(HEAP32[$c$addr >> 2] | 0) + 40 >> 2] | 0) + ((HEAP32[(HEAP32[$c$addr >> 2] | 0) + 44 >> 2] | 0) * 14 | 0) + 8 >> 1] = HEAP32[$cx1$addr >> 2];
  HEAP16[(HEAP32[(HEAP32[$c$addr >> 2] | 0) + 40 >> 2] | 0) + ((HEAP32[(HEAP32[$c$addr >> 2] | 0) + 44 >> 2] | 0) * 14 | 0) + 10 >> 1] = HEAP32[$cy1$addr >> 2];
  $30 = HEAP32[$c$addr >> 2] | 0;
  $num_vertices14 = $30 + 44 | 0;
  $31 = HEAP32[$num_vertices14 >> 2] | 0;
  $inc = $31 + 1 | 0;
  HEAP32[$num_vertices14 >> 2] = $inc;
  STACKTOP = sp;
  return;
 }
 _stbtt__track_vertex($2, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0);
 if ((HEAPU8[$type$addr >> 0] | 0 | 0) != 4) {
  $30 = HEAP32[$c$addr >> 2] | 0;
  $num_vertices14 = $30 + 44 | 0;
  $31 = HEAP32[$num_vertices14 >> 2] | 0;
  $inc = $31 + 1 | 0;
  HEAP32[$num_vertices14 >> 2] = $inc;
  STACKTOP = sp;
  return;
 }
 _stbtt__track_vertex(HEAP32[$c$addr >> 2] | 0, HEAP32[$cx$addr >> 2] | 0, HEAP32[$cy$addr >> 2] | 0);
 _stbtt__track_vertex(HEAP32[$c$addr >> 2] | 0, HEAP32[$cx1$addr >> 2] | 0, HEAP32[$cy1$addr >> 2] | 0);
 $30 = HEAP32[$c$addr >> 2] | 0;
 $num_vertices14 = $30 + 44 | 0;
 $31 = HEAP32[$num_vertices14 >> 2] | 0;
 $inc = $31 + 1 | 0;
 HEAP32[$num_vertices14 >> 2] = $inc;
 STACKTOP = sp;
 return;
}

function _stbtt_GetGlyphKernAdvance($info, $glyph1, $glyph2) {
 $info = $info | 0;
 $glyph1 = $glyph1 | 0;
 $glyph2 = $glyph2 | 0;
 var $25 = 0, $data = 0, $glyph1$addr = 0, $glyph2$addr = 0, $info$addr = 0, $l = 0, $m = 0, $needle = 0, $r = 0, $retval = 0, $straw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 36 | 0;
 $info$addr = sp + 32 | 0;
 $glyph1$addr = sp + 28 | 0;
 $glyph2$addr = sp + 24 | 0;
 $data = sp + 20 | 0;
 $needle = sp + 16 | 0;
 $straw = sp + 12 | 0;
 $l = sp + 8 | 0;
 $r = sp + 4 | 0;
 $m = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph1$addr >> 2] = $glyph1;
 HEAP32[$glyph2$addr >> 2] = $glyph2;
 HEAP32[$data >> 2] = (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 36 >> 2] | 0);
 if (!(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 36 >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $25 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 if (((_ttUSHORT((HEAP32[$data >> 2] | 0) + 2 | 0) | 0) & 65535 | 0) < 1) {
  HEAP32[$retval >> 2] = 0;
  $25 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 if (((_ttUSHORT((HEAP32[$data >> 2] | 0) + 8 | 0) | 0) & 65535 | 0) != 1) {
  HEAP32[$retval >> 2] = 0;
  $25 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 HEAP32[$l >> 2] = 0;
 HEAP32[$r >> 2] = ((_ttUSHORT((HEAP32[$data >> 2] | 0) + 10 | 0) | 0) & 65535) - 1;
 HEAP32[$needle >> 2] = HEAP32[$glyph1$addr >> 2] << 16 | HEAP32[$glyph2$addr >> 2];
 while (1) {
  if ((HEAP32[$l >> 2] | 0) > (HEAP32[$r >> 2] | 0)) {
   label = 15;
   break;
  }
  HEAP32[$m >> 2] = (HEAP32[$l >> 2] | 0) + (HEAP32[$r >> 2] | 0) >> 1;
  HEAP32[$straw >> 2] = _ttULONG((HEAP32[$data >> 2] | 0) + 18 + ((HEAP32[$m >> 2] | 0) * 6 | 0) | 0) | 0;
  if ((HEAP32[$needle >> 2] | 0) >>> 0 < (HEAP32[$straw >> 2] | 0) >>> 0) HEAP32[$r >> 2] = (HEAP32[$m >> 2] | 0) - 1; else {
   if ((HEAP32[$needle >> 2] | 0) >>> 0 <= (HEAP32[$straw >> 2] | 0) >>> 0) {
    label = 13;
    break;
   }
   HEAP32[$l >> 2] = (HEAP32[$m >> 2] | 0) + 1;
  }
 }
 if ((label | 0) == 13) {
  HEAP32[$retval >> 2] = (_ttSHORT((HEAP32[$data >> 2] | 0) + 22 + ((HEAP32[$m >> 2] | 0) * 6 | 0) | 0) | 0) << 16 >> 16;
  $25 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 } else if ((label | 0) == 15) {
  HEAP32[$retval >> 2] = 0;
  $25 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp6 = 0, $agg$tmp9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp15$byval_copy = sp + 48 | 0;
 $agg$tmp = sp + 40 | 0;
 $agg$tmp3 = sp + 32 | 0;
 $agg$tmp6 = sp + 24 | 0;
 $agg$tmp9 = sp + 16 | 0;
 $agg$tmp12 = sp + 8 | 0;
 $agg$tmp15 = sp;
 switch (HEAP32[$this + 8 >> 2] | 0) {
 case 0:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 51937);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 51952);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 55739);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 3:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 55810);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 4:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 55860);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 5:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 55910);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp15 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 default:
  {}
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp6 = 0, $agg$tmp9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp15$byval_copy = sp + 48 | 0;
 $agg$tmp = sp + 40 | 0;
 $agg$tmp3 = sp + 32 | 0;
 $agg$tmp6 = sp + 24 | 0;
 $agg$tmp9 = sp + 16 | 0;
 $agg$tmp12 = sp + 8 | 0;
 $agg$tmp15 = sp;
 switch (HEAP32[$this + 8 >> 2] | 0) {
 case 0:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 51937);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 51952);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 51970);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 3:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 51982);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 4:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 51995);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 case 5:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 52008);
   HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   HEAP32[$agg$tmp15$byval_copy + 4 >> 2] = HEAP32[$agg$tmp15 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp15$byval_copy);
   break;
  }
 default:
  {}
 }
 STACKTOP = sp;
 return;
}

function ___embind_register_native_and_builtin_types() {
 __embind_register_void(__ZN10emscripten8internal6TypeIDIvvE3getEv() | 0, 51525);
 __embind_register_bool(__ZN10emscripten8internal6TypeIDIbvE3getEv() | 0, 51530, 1, 1, 0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc(51535);
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc(51540);
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc(51552);
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc(51566);
 __ZN12_GLOBAL__N_116register_integerItEEvPKc(51572);
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc(51587);
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc(51591);
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc(51604);
 __ZN12_GLOBAL__N_116register_integerImEEvPKc(51609);
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc(51660);
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc(56314);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE3getEv() | 0, 51970);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEvE3getEv() | 0, 49800);
 __embind_register_std_wstring(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEvE3getEv() | 0, 4, 49833);
 __embind_register_emval(__ZN10emscripten8internal6TypeIDINS_3valEvE3getEv() | 0, 49846);
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc(49862);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(49892);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(49929);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(49968);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(49999);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(50039);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(50068);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc(50106);
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc(50136);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(50175);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(50207);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(50240);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(50273);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(50307);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(50340);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc(50374);
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc(50405);
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc(50437);
 return;
}

function __sfetch_item_init($item, $slot_id, $request) {
 $item = $item | 0;
 $slot_id = $slot_id | 0;
 $request = $request | 0;
 var $item$addr = 0, $path13 = 0, $request$addr = 0, $slot_id$addr = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $item$addr = sp + 8 | 0;
 $slot_id$addr = sp + 4 | 0;
 $request$addr = sp;
 $tmp = sp + 16 | 0;
 HEAP32[$item$addr >> 2] = $item;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 HEAP32[$request$addr >> 2] = $request;
 if (!(HEAP32[$item$addr >> 2] | 0)) ___assert_fail(42986, 25510, 1327, 43017);
 if (HEAP32[HEAP32[$item$addr >> 2] >> 2] | 0) ___assert_fail(42986, 25510, 1327, 43017);
 if (!(HEAP32[$request$addr >> 2] | 0)) ___assert_fail(43035, 25510, 1328, 43017);
 if (!(HEAP32[(HEAP32[$request$addr >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(43035, 25510, 1328, 43017);
 _memset(HEAP32[$item$addr >> 2] | 0, 0, 1232) | 0;
 HEAP32[HEAP32[$item$addr >> 2] >> 2] = HEAP32[$slot_id$addr >> 2];
 HEAP32[(HEAP32[$item$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$item$addr >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$request$addr >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$item$addr >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$request$addr >> 2] | 0) + 24 >> 2];
 HEAP32[(HEAP32[$item$addr >> 2] | 0) + 12 >> 2] = -1;
 HEAP32[(HEAP32[$item$addr >> 2] | 0) + 20 >> 2] = HEAP32[(HEAP32[$request$addr >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[$item$addr >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[$request$addr >> 2] | 0) + 16 >> 2];
 HEAP32[(HEAP32[$item$addr >> 2] | 0) + 24 + 4 >> 2] = HEAP32[(HEAP32[$request$addr >> 2] | 0) + 20 >> 2];
 $path13 = (HEAP32[$item$addr >> 2] | 0) + 208 | 0;
 __sfetch_path_make($tmp, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 8 >> 2] | 0);
 _memcpy($path13 | 0, $tmp | 0, 1024) | 0;
 if (!(HEAP32[(HEAP32[$request$addr >> 2] | 0) + 28 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$request$addr >> 2] | 0) + 32 >> 2] | 0) >>> 0 <= 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$request$addr >> 2] | 0) + 32 >> 2] | 0) >>> 0 > 128) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$item$addr >> 2] | 0) + 56 + 20 >> 2] = HEAP32[(HEAP32[$request$addr >> 2] | 0) + 32 >> 2];
 _memcpy((HEAP32[$item$addr >> 2] | 0) + 56 + 24 | 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 28 >> 2] | 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 32 >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($this) {
 $this = $this | 0;
 var $3 = 0, $Index = 0, $TemplateParams = 0, $call16 = 0, $inc = 0, $ref$tmp = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Index = sp + 4 | 0;
 $ref$tmp = sp;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 84) | 0) {
  HEAP32[$Index >> 2] = 0;
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
   $3 = 0;
   label = 5;
  } else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this, $Index) | 0) $retval$1 = 0; else {
   $inc = (HEAP32[$Index >> 2] | 0) + 1 | 0;
   HEAP32[$Index >> 2] = $inc;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
    $3 = $inc;
    label = 5;
   } else $retval$1 = 0;
  }
  do if ((label | 0) == 5) {
   if (HEAP8[$this + 362 >> 0] | 0) {
    $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, 51752) | 0;
    break;
   }
   if (HEAP8[$this + 361 >> 0] | 0) {
    $call16 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_($this, $Index) | 0;
    HEAP32[$ref$tmp >> 2] = $call16;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_($this + 332 | 0, $ref$tmp);
    $retval$1 = $call16;
    break;
   }
   $TemplateParams = $this + 288 | 0;
   if ($3 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($TemplateParams) | 0) >>> 0) $retval$1 = HEAP32[(__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($TemplateParams, $3) | 0) >> 2] | 0; else $retval$1 = 0;
  } while (0);
  $retval$2 = $retval$1;
 } else $retval$2 = 0;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$pre = 0, $0 = 0, $14 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $64 = 0, $66 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $retval$0 = 0, $rpos33$phi$trans$insert = 0, $shcnt30 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0;
 $shlim = $f + 112 | 0;
 $0 = $shlim;
 $2 = HEAP32[$0 >> 2] | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 if (($2 | 0) == 0 & ($5 | 0) == 0) label = 3; else {
  $9 = $f + 120 | 0;
  $14 = HEAP32[$9 + 4 >> 2] | 0;
  if (($14 | 0) < ($5 | 0) | (($14 | 0) == ($5 | 0) ? (HEAP32[$9 >> 2] | 0) >>> 0 < $2 >>> 0 : 0)) label = 3; else label = 4;
 }
 if ((label | 0) == 3) {
  $call = ___uflow($f) | 0;
  if (($call | 0) < 0) label = 4; else {
   $20 = $shlim;
   $22 = HEAP32[$20 >> 2] | 0;
   $25 = HEAP32[$20 + 4 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (($22 | 0) == 0 & ($25 | 0) == 0) {
    $66 = $$pre;
    label = 9;
   } else {
    $30 = HEAP32[$f + 4 >> 2] | 0;
    $sub$ptr$sub = $$pre - $30 | 0;
    $32 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
    $33 = $f + 120 | 0;
    $39 = _i64Subtract($22 | 0, $25 | 0, HEAP32[$33 >> 2] | 0, HEAP32[$33 + 4 >> 2] | 0) | 0;
    $40 = getTempRet0() | 0;
    $46 = $$pre;
    if (($40 | 0) > ($32 | 0) | ($40 | 0) == ($32 | 0) & $39 >>> 0 > $sub$ptr$sub >>> 0) {
     $66 = $46;
     label = 9;
    } else {
     HEAP32[$f + 104 >> 2] = $30 + ($39 + -1);
     $47 = $46;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 104 >> 2] = $$pre;
    $47 = $66;
   }
   $rpos33$phi$trans$insert = $f + 4 | 0;
   if (!$47) $64 = HEAP32[$rpos33$phi$trans$insert >> 2] | 0; else {
    $48 = HEAP32[$rpos33$phi$trans$insert >> 2] | 0;
    $add = $47 + 1 - $48 | 0;
    $shcnt30 = $f + 120 | 0;
    $51 = $shcnt30;
    $57 = _i64Add(HEAP32[$51 >> 2] | 0, HEAP32[$51 + 4 >> 2] | 0, $add | 0, (($add | 0) < 0) << 31 >> 31 | 0) | 0;
    $58 = getTempRet0() | 0;
    $59 = $shcnt30;
    HEAP32[$59 >> 2] = $57;
    HEAP32[$59 + 4 >> 2] = $58;
    $64 = $48;
   }
   $arrayidx = $64 + -1 | 0;
   if (($call | 0) == (HEAPU8[$arrayidx >> 0] | 0 | 0)) $retval$0 = $call; else {
    HEAP8[$arrayidx >> 0] = $call;
    $retval$0 = $call;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 104 >> 2] = 0;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function _stbi__resample_row_h_2($out, $in_near, $in_far, $w, $hs) {
 $out = $out | 0;
 $in_near = $in_near | 0;
 $in_far = $in_far | 0;
 $w = $w | 0;
 $hs = $hs | 0;
 var $14 = 0, $3 = 0, $4 = 0, $43 = 0, $i = 0, $in_near$addr = 0, $input = 0, $n = 0, $out$addr = 0, $retval = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 32 | 0;
 $out$addr = sp + 28 | 0;
 $in_near$addr = sp + 24 | 0;
 $w$addr = sp + 16 | 0;
 $i = sp + 8 | 0;
 $input = sp + 4 | 0;
 $n = sp;
 HEAP32[$out$addr >> 2] = $out;
 HEAP32[$in_near$addr >> 2] = $in_near;
 HEAP32[sp + 20 >> 2] = $in_far;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[sp + 12 >> 2] = $hs;
 HEAP32[$input >> 2] = HEAP32[$in_near$addr >> 2];
 $3 = HEAP8[HEAP32[$input >> 2] >> 0] | 0;
 $4 = HEAP32[$out$addr >> 2] | 0;
 if ((HEAP32[$w$addr >> 2] | 0) == 1) {
  HEAP8[$4 + 1 >> 0] = $3;
  HEAP8[HEAP32[$out$addr >> 2] >> 0] = $3;
  HEAP32[$retval >> 2] = HEAP32[$out$addr >> 2];
  $43 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 HEAP8[$4 >> 0] = $3;
 HEAP8[(HEAP32[$out$addr >> 2] | 0) + 1 >> 0] = ((HEAPU8[HEAP32[$input >> 2] >> 0] | 0) * 3 | 0) + (HEAPU8[(HEAP32[$input >> 2] | 0) + 1 >> 0] | 0) + 2 >> 2;
 HEAP32[$i >> 2] = 1;
 while (1) {
  $14 = HEAP32[$input >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= ((HEAP32[$w$addr >> 2] | 0) - 1 | 0)) break;
  HEAP32[$n >> 2] = ((HEAPU8[$14 + (HEAP32[$i >> 2] | 0) >> 0] | 0) * 3 | 0) + 2;
  HEAP8[(HEAP32[$out$addr >> 2] | 0) + ((HEAP32[$i >> 2] << 1) + 0) >> 0] = (HEAP32[$n >> 2] | 0) + (HEAPU8[(HEAP32[$input >> 2] | 0) + ((HEAP32[$i >> 2] | 0) - 1) >> 0] | 0) >> 2;
  HEAP8[(HEAP32[$out$addr >> 2] | 0) + ((HEAP32[$i >> 2] << 1) + 1) >> 0] = (HEAP32[$n >> 2] | 0) + (HEAPU8[(HEAP32[$input >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 1) >> 0] | 0) >> 2;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP8[(HEAP32[$out$addr >> 2] | 0) + ((HEAP32[$i >> 2] << 1) + 0) >> 0] = ((HEAPU8[$14 + ((HEAP32[$w$addr >> 2] | 0) - 2) >> 0] | 0) * 3 | 0) + (HEAPU8[(HEAP32[$input >> 2] | 0) + ((HEAP32[$w$addr >> 2] | 0) - 1) >> 0] | 0) + 2 >> 2;
 HEAP8[(HEAP32[$out$addr >> 2] | 0) + ((HEAP32[$i >> 2] << 1) + 1) >> 0] = HEAP8[(HEAP32[$input >> 2] | 0) + ((HEAP32[$w$addr >> 2] | 0) - 1) >> 0] | 0;
 HEAP32[$retval >> 2] = HEAP32[$out$addr >> 2];
 $43 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $43 | 0;
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE6assignINS_21__list_const_iteratorIS1_PvEEEEvT_S9_PNS_9enable_ifIXsr19__is_input_iteratorIS9_EE5valueEvE4typeE($this, $__f, $__l, $0) {
 $this = $this | 0;
 $__f = $__f | 0;
 $__l = $__l | 0;
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $12 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__i$sroa$0$0 = 0, $__i$sroa$0$0$in$in = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp13 = 0, $agg$tmp16 = 0, $agg$tmp16$byval_copy = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp17$byval_copy = sp + 28 | 0;
 $agg$tmp16$byval_copy = sp + 24 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 20 | 0;
 $agg$tmp12 = sp + 12 | 0;
 $agg$tmp13 = sp + 8 | 0;
 $agg$tmp16 = sp + 4 | 0;
 $agg$tmp17 = sp;
 $1 = $this;
 $2 = HEAP32[$__l >> 2] | 0;
 $$pre = HEAP32[$__f >> 2] | 0;
 $4 = $2;
 $12 = $$pre;
 $5 = $$pre;
 $7 = $$pre;
 $__i$sroa$0$0$in$in = $this + 4 | 0;
 while (1) {
  $__i$sroa$0$0 = HEAP32[$__i$sroa$0$0$in$in >> 2] | 0;
  if (($5 | 0) == ($2 | 0)) break;
  $6 = $__i$sroa$0$0;
  if (($this | 0) == ($6 | 0)) break;
  __ZN8TPPLPolyaSERKS_($__i$sroa$0$0 + 8 | 0, $7 + 8 | 0) | 0;
  $9 = HEAP32[$5 + 4 >> 2] | 0;
  HEAP32[$__f >> 2] = $9;
  $12 = $9;
  $5 = $9;
  $7 = $9;
  $__i$sroa$0$0$in$in = $6 + 4 | 0;
 }
 if (($this | 0) == ($__i$sroa$0$0 | 0)) {
  HEAP32[$agg$tmp >> 2] = $1;
  HEAP32[$agg$tmp12 >> 2] = $12;
  HEAP32[$agg$tmp13 >> 2] = $4;
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp16$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
  HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp13 >> 2];
  __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE6insertINS_21__list_const_iteratorIS1_PvEEEENS_15__list_iteratorIS1_S7_EES8_T_SB_PNS_9enable_ifIXsr19__is_input_iteratorISB_EE5valueEvE4typeE($this, $agg$tmp$byval_copy, $agg$tmp16$byval_copy, $agg$tmp17$byval_copy, 0) | 0;
 } else {
  HEAP32[$agg$tmp16 >> 2] = $__i$sroa$0$0;
  HEAP32[$agg$tmp17 >> 2] = $1;
  HEAP32[$agg$tmp16$byval_copy >> 2] = HEAP32[$agg$tmp16 >> 2];
  HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2];
  __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEES7_($this, $agg$tmp16$byval_copy, $agg$tmp17$byval_copy) | 0;
 }
 STACKTOP = sp;
 return;
}

function _sfetch_send($request) {
 $request = $request | 0;
 var $26 = 0, $ctx = 0, $invalid_handle = 0, $request$addr = 0, $retval = 0, $slot_id = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $request$addr = sp + 12 | 0;
 $ctx = sp + 8 | 0;
 $invalid_handle = sp + 4 | 0;
 $slot_id = sp;
 HEAP32[$request$addr >> 2] = $request;
 HEAP32[$ctx >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$ctx >> 2] | 0)) ___assert_fail(25852, 25510, 2413, 25886);
 if (!(HEAP8[HEAP32[$ctx >> 2] >> 0] & 1)) ___assert_fail(25852, 25510, 2413, 25886);
 if (!(HEAP32[$request$addr >> 2] | 0)) ___assert_fail(25898, 25510, 2414, 25886);
 if (HEAP32[HEAP32[$request$addr >> 2] >> 2] | 0) ___assert_fail(25898, 25510, 2414, 25886);
 if (HEAP32[(HEAP32[$request$addr >> 2] | 0) + 36 >> 2] | 0) ___assert_fail(25898, 25510, 2414, 25886);
 HEAP32[$invalid_handle >> 2] = __sfetch_make_handle(0) | 0;
 if (!(HEAP8[(HEAP32[$ctx >> 2] | 0) + 1 >> 0] & 1)) {
  HEAP32[$retval >> 2] = HEAP32[$invalid_handle >> 2];
  $26 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 if (!(__sfetch_validate_request(HEAP32[$ctx >> 2] | 0, HEAP32[$request$addr >> 2] | 0) | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$invalid_handle >> 2];
  $26 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 if ((HEAP32[(HEAP32[$request$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) ___assert_fail(25970, 25510, 2423, 25886);
 HEAP32[$slot_id >> 2] = __sfetch_pool_item_alloc((HEAP32[$ctx >> 2] | 0) + 24 | 0, HEAP32[$request$addr >> 2] | 0) | 0;
 if (!(HEAP32[$slot_id >> 2] | 0)) {
  _puts(26012) | 0;
  HEAP32[$retval >> 2] = HEAP32[$invalid_handle >> 2];
  $26 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 if (__sfetch_channel_send((HEAP32[$ctx >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$request$addr >> 2] | 0) + 4 >> 2] | 0) * 76 | 0) | 0, HEAP32[$slot_id >> 2] | 0) | 0) {
  HEAP32[$retval >> 2] = __sfetch_make_handle(HEAP32[$slot_id >> 2] | 0) | 0;
  $26 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 } else {
  __sfetch_pool_item_free((HEAP32[$ctx >> 2] | 0) + 24 | 0, HEAP32[$slot_id >> 2] | 0);
  HEAP32[$retval >> 2] = HEAP32[$invalid_handle >> 2];
  $26 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 return 0;
}

function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root, $__x) {
 $__root = $__root | 0;
 $__x = $__x | 0;
 var $$pre = 0, $$pre74 = 0, $0 = 0, $11 = 0, $2 = 0, $3 = 0, $5 = 0, $8 = 0, $__is_black_11 = 0, $__is_black_2 = 0, $__is_black_29$pre$phiZ2D = 0, $__is_black_41 = 0, $__is_black_41$sink = 0, $__is_black_61$pre$phiZ2D = 0, $__x$addr$0 = 0, label = 0;
 HEAP8[$__x + 12 >> 0] = ($__x | 0) == ($__root | 0) & 1;
 $__x$addr$0 = $__x;
 while (1) {
  if (($__x$addr$0 | 0) == ($__root | 0)) break;
  $0 = HEAP32[$__x$addr$0 + 8 >> 2] | 0;
  $__is_black_2 = $0 + 12 | 0;
  if (HEAP8[$__is_black_2 >> 0] | 0) break;
  $2 = HEAP32[$0 + 8 >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if (($3 | 0) == ($0 | 0)) {
   $5 = HEAP32[$2 + 4 >> 2] | 0;
   if (!$5) {
    label = 7;
    break;
   }
   $__is_black_11 = $5 + 12 | 0;
   if (!(HEAP8[$__is_black_11 >> 0] | 0)) $__is_black_41$sink = $__is_black_11; else {
    label = 7;
    break;
   }
  } else {
   if (!$3) {
    label = 12;
    break;
   }
   $__is_black_41 = $3 + 12 | 0;
   if (!(HEAP8[$__is_black_41 >> 0] | 0)) $__is_black_41$sink = $__is_black_41; else {
    label = 12;
    break;
   }
  }
  HEAP8[$__is_black_2 >> 0] = 1;
  HEAP8[$2 + 12 >> 0] = ($2 | 0) == ($__root | 0) & 1;
  HEAP8[$__is_black_41$sink >> 0] = 1;
  $__x$addr$0 = $2;
 }
 if ((label | 0) == 7) {
  if ((HEAP32[$0 >> 2] | 0) == ($__x$addr$0 | 0)) {
   $8 = $2;
   $__is_black_29$pre$phiZ2D = $__is_black_2;
  } else {
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0);
   $$pre74 = HEAP32[$0 + 8 >> 2] | 0;
   $8 = HEAP32[$$pre74 + 8 >> 2] | 0;
   $__is_black_29$pre$phiZ2D = $$pre74 + 12 | 0;
  }
  HEAP8[$__is_black_29$pre$phiZ2D >> 0] = 1;
  HEAP8[$8 + 12 >> 0] = 0;
  __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($8);
 } else if ((label | 0) == 12) {
  if ((HEAP32[$0 >> 2] | 0) == ($__x$addr$0 | 0)) {
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0);
   $$pre = HEAP32[$0 + 8 >> 2] | 0;
   $11 = HEAP32[$$pre + 8 >> 2] | 0;
   $__is_black_61$pre$phiZ2D = $$pre + 12 | 0;
  } else {
   $11 = $2;
   $__is_black_61$pre$phiZ2D = $__is_black_2;
  }
  HEAP8[$__is_black_61$pre$phiZ2D >> 0] = 1;
  HEAP8[$11 + 12 >> 0] = 0;
  __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($11);
 }
 return;
}

function _stbi__hdr_convert($output, $input, $req_comp) {
 $output = $output | 0;
 $input = $input | 0;
 $req_comp = $req_comp | 0;
 var $conv9 = 0, $f1 = 0, $input$addr = 0, $output$addr = 0, $req_comp$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $output$addr = sp + 12 | 0;
 $input$addr = sp + 8 | 0;
 $req_comp$addr = sp + 4 | 0;
 $f1 = sp;
 HEAP32[$output$addr >> 2] = $output;
 HEAP32[$input$addr >> 2] = $input;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 if (!(HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 3 >> 0] | 0)) {
  switch (HEAP32[$req_comp$addr >> 2] | 0) {
  case 4:
   {
    HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 12 >> 2] = 1.0;
    label = 11;
    break;
   }
  case 3:
   {
    label = 11;
    break;
   }
  case 2:
   {
    HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 4 >> 2] = 1.0;
    label = 13;
    break;
   }
  case 1:
   {
    label = 13;
    break;
   }
  default:
   {
    STACKTOP = sp;
    return;
   }
  }
  if ((label | 0) == 11) {
   HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 8 >> 2] = 0.0;
   HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 4 >> 2] = 0.0;
   HEAPF32[HEAP32[$output$addr >> 2] >> 2] = 0.0;
   STACKTOP = sp;
   return;
  } else if ((label | 0) == 13) {
   HEAPF32[HEAP32[$output$addr >> 2] >> 2] = 0.0;
   STACKTOP = sp;
   return;
  }
 }
 HEAPF32[$f1 >> 2] = +_ldexp(1.0, (HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 3 >> 0] | 0) - 136 | 0);
 $conv9 = HEAPU8[HEAP32[$input$addr >> 2] >> 0] | 0;
 if ((HEAP32[$req_comp$addr >> 2] | 0) <= 2) HEAPF32[HEAP32[$output$addr >> 2] >> 2] = +($conv9 + (HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 1 >> 0] | 0) + (HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 2 >> 0] | 0) | 0) * +HEAPF32[$f1 >> 2] / 3.0; else {
  HEAPF32[HEAP32[$output$addr >> 2] >> 2] = +($conv9 | 0) * +HEAPF32[$f1 >> 2];
  HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 4 >> 2] = +(HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 1 >> 0] | 0 | 0) * +HEAPF32[$f1 >> 2];
  HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 8 >> 2] = +(HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 2 >> 0] | 0 | 0) * +HEAPF32[$f1 >> 2];
 }
 if ((HEAP32[$req_comp$addr >> 2] | 0) == 2) HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 4 >> 2] = 1.0;
 if ((HEAP32[$req_comp$addr >> 2] | 0) != 4) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 12 >> 2] = 1.0;
 STACKTOP = sp;
 return;
}

function _stbi__decode_jpeg_header($z, $scan) {
 $z = $z | 0;
 $scan = $scan | 0;
 var $10 = 0, $22 = 0, $m = 0, $retval = 0, $scan$addr = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $z$addr = sp + 8 | 0;
 $scan$addr = sp + 4 | 0;
 $m = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$scan$addr >> 2] = $scan;
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18404 >> 2] = 0;
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18408 >> 2] = -1;
 HEAP8[(HEAP32[$z$addr >> 2] | 0) + 18372 >> 0] = -1;
 HEAP32[$m >> 2] = (_stbi__get_marker(HEAP32[$z$addr >> 2] | 0) | 0) & 255;
 if ((HEAP32[$m >> 2] | 0) != 216) {
  HEAP32[$retval >> 2] = _stbi__err(49567) | 0;
  $22 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 if ((HEAP32[$scan$addr >> 2] | 0) == 1) {
  HEAP32[$retval >> 2] = 1;
  $22 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 HEAP32[$m >> 2] = (_stbi__get_marker(HEAP32[$z$addr >> 2] | 0) | 0) & 255;
 L9 : while (1) {
  if ((HEAP32[$m >> 2] | 0) == 192 | (HEAP32[$m >> 2] | 0) == 193) $10 = 1; else $10 = (HEAP32[$m >> 2] | 0) == 194;
  if (!($10 ^ 1)) {
   label = 17;
   break;
  }
  if (!(_stbi__process_marker(HEAP32[$z$addr >> 2] | 0, HEAP32[$m >> 2] | 0) | 0)) {
   label = 10;
   break;
  }
  HEAP32[$m >> 2] = (_stbi__get_marker(HEAP32[$z$addr >> 2] | 0) | 0) & 255;
  while (1) {
   if ((HEAP32[$m >> 2] | 0) != 255) break;
   if (_stbi__at_eof(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) | 0) {
    label = 14;
    break L9;
   }
   HEAP32[$m >> 2] = (_stbi__get_marker(HEAP32[$z$addr >> 2] | 0) | 0) & 255;
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$retval >> 2] = 0;
  $22 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 } else if ((label | 0) == 14) {
  HEAP32[$retval >> 2] = _stbi__err(49574) | 0;
  $22 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $22 | 0;
 } else if ((label | 0) == 17) {
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18380 >> 2] = (HEAP32[$m >> 2] | 0) == 194 & 1;
  if (_stbi__process_frame_header(HEAP32[$z$addr >> 2] | 0, HEAP32[$scan$addr >> 2] | 0) | 0) {
   HEAP32[$retval >> 2] = 1;
   $22 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $22 | 0;
  } else {
   HEAP32[$retval >> 2] = 0;
   $22 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $22 | 0;
  }
 }
 return 0;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $1 = 0, $2 = 0, $__end_$i = 0, $__value_$i$i$i$i$i = 0, $call$i = 0, $cmp4 = 0, $mul$i = 0, $spec$select = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i$i$i = 0, $sub$ptr$sub$i$i18 = 0;
 $sub$ptr$rhs$cast$i$i = $__first;
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 $__value_$i$i$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $2 = $1;
 do if ($sub$ptr$sub$i$i >>> 0 > ((HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - $1 | 0) >>> 0) {
  __ZNSt3__26vectorIhNS_9allocatorIhEEE13__vdeallocateEv($this);
  $call$i = __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($this) | 0;
  if ($call$i >>> 0 < $sub$ptr$sub$i$i >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
   $sub$ptr$sub$i$i$i = (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0;
   $mul$i = $sub$ptr$sub$i$i$i << 1;
   __ZNSt3__26vectorIhNS_9allocatorIhEEE11__vallocateEm($this, $sub$ptr$sub$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $sub$ptr$sub$i$i >>> 0 ? $sub$ptr$sub$i$i : $mul$i) : $call$i);
   __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($this, $__first, $__last, $sub$ptr$sub$i$i);
   break;
  }
 } else {
  $__end_$i = $this + 4 | 0;
  $sub$ptr$sub$i = (HEAP32[$__end_$i >> 2] | 0) - $1 | 0;
  $cmp4 = $sub$ptr$sub$i$i >>> 0 > $sub$ptr$sub$i >>> 0;
  $spec$select = $cmp4 ? $__first + $sub$ptr$sub$i | 0 : $__last;
  $sub$ptr$sub$i$i18 = $spec$select - $sub$ptr$rhs$cast$i$i | 0;
  if ($sub$ptr$sub$i$i18 | 0) _memmove($2 | 0, $__first | 0, $sub$ptr$sub$i$i18 | 0) | 0;
  if ($cmp4) {
   __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($this, $spec$select, $__last, $sub$ptr$sub$i$i - (HEAP32[$__end_$i >> 2] | 0) + (HEAP32[$this >> 2] | 0) | 0);
   break;
  } else {
   HEAP32[$__end_$i >> 2] = $2 + $sub$ptr$sub$i$i18;
   break;
  }
 } while (0);
 return;
}

function _stbtt__sort_edges_ins_sort($p, $n) {
 $p = $p | 0;
 $n = $n | 0;
 var $a = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $b = 0, $c = 0, $i = 0, $j = 0, $n$addr = 0, $p$addr = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $p$addr = sp + 44 | 0;
 $n$addr = sp + 40 | 0;
 $i = sp + 36 | 0;
 $j = sp + 32 | 0;
 $t = sp + 12 | 0;
 $a = sp + 8 | 0;
 $b = sp + 4 | 0;
 $c = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$n$addr >> 2] | 0)) break;
  $arrayidx = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 20 | 0) | 0;
  HEAP32[$t >> 2] = HEAP32[$arrayidx >> 2];
  HEAP32[$t + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2];
  HEAP32[$t + 8 >> 2] = HEAP32[$arrayidx + 8 >> 2];
  HEAP32[$t + 12 >> 2] = HEAP32[$arrayidx + 12 >> 2];
  HEAP32[$t + 16 >> 2] = HEAP32[$arrayidx + 16 >> 2];
  HEAP32[$a >> 2] = $t;
  HEAP32[$j >> 2] = HEAP32[$i >> 2];
  while (1) {
   if ((HEAP32[$j >> 2] | 0) <= 0) break;
   HEAP32[$b >> 2] = (HEAP32[$p$addr >> 2] | 0) + (((HEAP32[$j >> 2] | 0) - 1 | 0) * 20 | 0);
   HEAP32[$c >> 2] = +HEAPF32[(HEAP32[$a >> 2] | 0) + 4 >> 2] < +HEAPF32[(HEAP32[$b >> 2] | 0) + 4 >> 2] & 1;
   if (!(HEAP32[$c >> 2] | 0)) break;
   $arrayidx5 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$j >> 2] | 0) * 20 | 0) | 0;
   $arrayidx7 = (HEAP32[$p$addr >> 2] | 0) + (((HEAP32[$j >> 2] | 0) - 1 | 0) * 20 | 0) | 0;
   HEAP32[$arrayidx5 >> 2] = HEAP32[$arrayidx7 >> 2];
   HEAP32[$arrayidx5 + 4 >> 2] = HEAP32[$arrayidx7 + 4 >> 2];
   HEAP32[$arrayidx5 + 8 >> 2] = HEAP32[$arrayidx7 + 8 >> 2];
   HEAP32[$arrayidx5 + 12 >> 2] = HEAP32[$arrayidx7 + 12 >> 2];
   HEAP32[$arrayidx5 + 16 >> 2] = HEAP32[$arrayidx7 + 16 >> 2];
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
  }
  if ((HEAP32[$i >> 2] | 0) != (HEAP32[$j >> 2] | 0)) {
   $arrayidx11 = (HEAP32[$p$addr >> 2] | 0) + ((HEAP32[$j >> 2] | 0) * 20 | 0) | 0;
   HEAP32[$arrayidx11 >> 2] = HEAP32[$t >> 2];
   HEAP32[$arrayidx11 + 4 >> 2] = HEAP32[$t + 4 >> 2];
   HEAP32[$arrayidx11 + 8 >> 2] = HEAP32[$t + 8 >> 2];
   HEAP32[$arrayidx11 + 12 >> 2] = HEAP32[$t + 12 >> 2];
   HEAP32[$arrayidx11 + 16 >> 2] = HEAP32[$t + 16 >> 2];
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbi__parse_zlib($a, $parse_header) {
 $a = $a | 0;
 $parse_header = $parse_header | 0;
 var $10 = 0, $a$addr = 0, $final = 0, $parse_header$addr = 0, $retval = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $parse_header$addr = sp + 8 | 0;
 $final = sp + 4 | 0;
 $type = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$parse_header$addr >> 2] = $parse_header;
 if (HEAP32[$parse_header$addr >> 2] | 0) if (_stbi__parse_zlib_header(HEAP32[$a$addr >> 2] | 0) | 0) label = 4; else HEAP32[$retval >> 2] = 0; else label = 4;
 do if ((label | 0) == 4) {
  HEAP32[(HEAP32[$a$addr >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] = 0;
  while (1) {
   HEAP32[$final >> 2] = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 1) | 0;
   HEAP32[$type >> 2] = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 2) | 0;
   if (!(HEAP32[$type >> 2] | 0)) {
    if (!(_stbi__parse_uncompressed_block(HEAP32[$a$addr >> 2] | 0) | 0)) {
     label = 7;
     break;
    }
   } else {
    if ((HEAP32[$type >> 2] | 0) == 3) {
     label = 9;
     break;
    }
    $10 = HEAP32[$a$addr >> 2] | 0;
    if ((HEAP32[$type >> 2] | 0) == 1) {
     if (!(_stbi__zbuild_huffman($10 + 32 | 0, 8816, 288) | 0)) {
      label = 12;
      break;
     }
     if (!(_stbi__zbuild_huffman((HEAP32[$a$addr >> 2] | 0) + 2052 | 0, 9104, 32) | 0)) {
      label = 14;
      break;
     }
    } else if (!(_stbi__compute_huffman_codes($10) | 0)) {
     label = 16;
     break;
    }
    if (!(_stbi__parse_huffman_block(HEAP32[$a$addr >> 2] | 0) | 0)) {
     label = 18;
     break;
    }
   }
   if (!((HEAP32[$final >> 2] | 0) != 0 ^ 1)) {
    label = 20;
    break;
   }
  }
  if ((label | 0) == 7) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 9) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 12) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 14) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 16) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 18) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 20) {
   HEAP32[$retval >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function _fons__blurRows($dst, $w, $h, $dstStride, $alpha) {
 $dst = $dst | 0;
 $w = $w | 0;
 $h = $h | 0;
 $dstStride = $dstStride | 0;
 $alpha = $alpha | 0;
 var $alpha$addr = 0, $dst$addr = 0, $dstStride$addr = 0, $h$addr = 0, $shr = 0, $shr23 = 0, $w$addr = 0, $x = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $dst$addr = sp + 28 | 0;
 $w$addr = sp + 24 | 0;
 $h$addr = sp + 20 | 0;
 $dstStride$addr = sp + 16 | 0;
 $alpha$addr = sp + 12 | 0;
 $x = sp + 8 | 0;
 $y = sp + 4 | 0;
 $z = sp;
 HEAP32[$dst$addr >> 2] = $dst;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$dstStride$addr >> 2] = $dstStride;
 HEAP32[$alpha$addr >> 2] = $alpha;
 HEAP32[$x >> 2] = 0;
 while (1) {
  if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$w$addr >> 2] | 0)) break;
  HEAP32[$z >> 2] = 0;
  HEAP32[$y >> 2] = HEAP32[$dstStride$addr >> 2];
  while (1) {
   if ((HEAP32[$y >> 2] | 0) >= (Math_imul(HEAP32[$h$addr >> 2] | 0, HEAP32[$dstStride$addr >> 2] | 0) | 0)) break;
   $shr = (Math_imul(HEAP32[$alpha$addr >> 2] | 0, ((HEAPU8[(HEAP32[$dst$addr >> 2] | 0) + (HEAP32[$y >> 2] | 0) >> 0] | 0) << 7) - (HEAP32[$z >> 2] | 0) | 0) | 0) >> 16;
   HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) + $shr;
   HEAP8[(HEAP32[$dst$addr >> 2] | 0) + (HEAP32[$y >> 2] | 0) >> 0] = HEAP32[$z >> 2] >> 7;
   HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + (HEAP32[$dstStride$addr >> 2] | 0);
  }
  HEAP8[(HEAP32[$dst$addr >> 2] | 0) + (Math_imul((HEAP32[$h$addr >> 2] | 0) - 1 | 0, HEAP32[$dstStride$addr >> 2] | 0) | 0) >> 0] = 0;
  HEAP32[$z >> 2] = 0;
  HEAP32[$y >> 2] = Math_imul((HEAP32[$h$addr >> 2] | 0) - 2 | 0, HEAP32[$dstStride$addr >> 2] | 0) | 0;
  while (1) {
   if ((HEAP32[$y >> 2] | 0) < 0) break;
   $shr23 = (Math_imul(HEAP32[$alpha$addr >> 2] | 0, ((HEAPU8[(HEAP32[$dst$addr >> 2] | 0) + (HEAP32[$y >> 2] | 0) >> 0] | 0) << 7) - (HEAP32[$z >> 2] | 0) | 0) | 0) >> 16;
   HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) + $shr23;
   HEAP8[(HEAP32[$dst$addr >> 2] | 0) + (HEAP32[$y >> 2] | 0) >> 0] = HEAP32[$z >> 2] >> 7;
   HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) - (HEAP32[$dstStride$addr >> 2] | 0);
  }
  HEAP8[HEAP32[$dst$addr >> 2] >> 0] = 0;
  HEAP32[$dst$addr >> 2] = (HEAP32[$dst$addr >> 2] | 0) + 1;
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _fons__atlasRectFits($atlas, $i, $w, $h) {
 $atlas = $atlas | 0;
 $i = $i | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $33 = 0, $atlas$addr = 0, $h$addr = 0, $i$addr = 0, $retval = 0, $spaceLeft = 0, $w$addr = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $atlas$addr = sp + 24 | 0;
 $i$addr = sp + 20 | 0;
 $w$addr = sp + 16 | 0;
 $h$addr = sp + 12 | 0;
 $x = sp + 8 | 0;
 $y = sp + 4 | 0;
 $spaceLeft = sp;
 HEAP32[$atlas$addr >> 2] = $atlas;
 HEAP32[$i$addr >> 2] = $i;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$x >> 2] = HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i$addr >> 2] | 0) * 6 | 0) >> 1];
 HEAP32[$y >> 2] = HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i$addr >> 2] | 0) * 6 | 0) + 2 >> 1];
 if (((HEAP32[$x >> 2] | 0) + (HEAP32[$w$addr >> 2] | 0) | 0) > (HEAP32[HEAP32[$atlas$addr >> 2] >> 2] | 0)) {
  HEAP32[$retval >> 2] = -1;
  $33 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 HEAP32[$spaceLeft >> 2] = HEAP32[$w$addr >> 2];
 while (1) {
  if ((HEAP32[$spaceLeft >> 2] | 0) <= 0) {
   label = 10;
   break;
  }
  if ((HEAP32[$i$addr >> 2] | 0) == (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 12 >> 2] | 0)) {
   label = 6;
   break;
  }
  HEAP32[$y >> 2] = _fons__maxi(HEAP32[$y >> 2] | 0, HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i$addr >> 2] | 0) * 6 | 0) + 2 >> 1] | 0) | 0;
  if (((HEAP32[$y >> 2] | 0) + (HEAP32[$h$addr >> 2] | 0) | 0) > (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 4 >> 2] | 0)) {
   label = 8;
   break;
  }
  HEAP32[$spaceLeft >> 2] = (HEAP32[$spaceLeft >> 2] | 0) - (HEAP16[(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$i$addr >> 2] | 0) * 6 | 0) + 4 >> 1] | 0);
  HEAP32[$i$addr >> 2] = (HEAP32[$i$addr >> 2] | 0) + 1;
 }
 if ((label | 0) == 6) {
  HEAP32[$retval >> 2] = -1;
  $33 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 } else if ((label | 0) == 8) {
  HEAP32[$retval >> 2] = -1;
  $33 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 } else if ((label | 0) == 10) {
  HEAP32[$retval >> 2] = HEAP32[$y >> 2];
  $33 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 return 0;
}

function _stbtt_GetGlyphBox($info, $glyph_index, $x0, $y0, $x1, $y1) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $x0 = $x0 | 0;
 $y0 = $y0 | 0;
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 var $2 = 0, $29 = 0, $3 = 0, $conv = 0, $conv14 = 0, $conv22 = 0, $conv30 = 0, $g = 0, $glyph_index$addr = 0, $info$addr = 0, $retval = 0, $x0$addr = 0, $x1$addr = 0, $y0$addr = 0, $y1$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $info$addr = sp + 24 | 0;
 $glyph_index$addr = sp + 20 | 0;
 $x0$addr = sp + 16 | 0;
 $y0$addr = sp + 12 | 0;
 $x1$addr = sp + 8 | 0;
 $y1$addr = sp + 4 | 0;
 $g = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph_index$addr >> 2] = $glyph_index;
 HEAP32[$x0$addr >> 2] = $x0;
 HEAP32[$y0$addr >> 2] = $y0;
 HEAP32[$x1$addr >> 2] = $x1;
 HEAP32[$y1$addr >> 2] = $y1;
 $2 = HEAP32[$info$addr >> 2] | 0;
 $3 = HEAP32[$glyph_index$addr >> 2] | 0;
 if (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 48 + 8 >> 2] | 0) _stbtt__GetGlyphInfoT2($2, $3, HEAP32[$x0$addr >> 2] | 0, HEAP32[$y0$addr >> 2] | 0, HEAP32[$x1$addr >> 2] | 0, HEAP32[$y1$addr >> 2] | 0) | 0; else {
  HEAP32[$g >> 2] = _stbtt__GetGlyfOffset($2, $3) | 0;
  if ((HEAP32[$g >> 2] | 0) < 0) {
   HEAP32[$retval >> 2] = 0;
   $29 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $29 | 0;
  }
  if (HEAP32[$x0$addr >> 2] | 0) {
   $conv = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$g >> 2] | 0) + 2 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$x0$addr >> 2] >> 2] = $conv;
  }
  if (HEAP32[$y0$addr >> 2] | 0) {
   $conv14 = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$g >> 2] | 0) + 4 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$y0$addr >> 2] >> 2] = $conv14;
  }
  if (HEAP32[$x1$addr >> 2] | 0) {
   $conv22 = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$g >> 2] | 0) + 6 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$x1$addr >> 2] >> 2] = $conv22;
  }
  if (HEAP32[$y1$addr >> 2] | 0) {
   $conv30 = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$g >> 2] | 0) + 8 | 0) | 0) << 16 >> 16;
   HEAP32[HEAP32[$y1$addr >> 2] >> 2] = $conv30;
  }
 }
 HEAP32[$retval >> 2] = 1;
 $29 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $29 | 0;
}

function __ZN13TPPLPartition12UpdateVertexEPNS_15PartitionVertexES1_l($this, $v, $vertices, $numvertices) {
 $this = $this | 0;
 $v = $v | 0;
 $vertices = $vertices | 0;
 $numvertices = $numvertices | 0;
 var $0 = 0, $1 = 0, $3 = 0.0, $i$0 = 0, $isConvex = 0, $isEar = 0, $p = 0, $p15 = 0, $p2 = 0, $p3 = 0, $ref$tmp = 0, $ref$tmp4 = 0, $vec1$sroa$0$0$copyload = 0.0, $vec1$sroa$4$0$copyload = 0.0, $y24 = 0, $y38 = 0, $y53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $ref$tmp = sp + 24 | 0;
 $ref$tmp4 = sp;
 $0 = HEAP32[$v + 40 >> 2] | 0;
 $1 = HEAP32[$v + 44 >> 2] | 0;
 $p = $0 + 8 | 0;
 $p2 = $v + 8 | 0;
 $p3 = $1 + 8 | 0;
 $isConvex = $v + 1 | 0;
 HEAP8[$isConvex >> 0] = (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $p, $p2, $p3) | 0) & 1;
 __ZNK9TPPLPointmiERKS_($ref$tmp4, $p, $p2);
 __ZN13TPPLPartition9NormalizeERK9TPPLPoint($ref$tmp, 0, $ref$tmp4);
 $vec1$sroa$0$0$copyload = +HEAPF64[$ref$tmp >> 3];
 $vec1$sroa$4$0$copyload = +HEAPF64[$ref$tmp + 8 >> 3];
 __ZNK9TPPLPointmiERKS_($ref$tmp4, $p3, $p2);
 __ZN13TPPLPartition9NormalizeERK9TPPLPoint($ref$tmp, 0, $ref$tmp4);
 HEAPF64[$v + 32 >> 3] = $vec1$sroa$0$0$copyload * +HEAPF64[$ref$tmp >> 3] + $vec1$sroa$4$0$copyload * +HEAPF64[$ref$tmp + 8 >> 3];
 $isEar = $v + 2 | 0;
 L1 : do if (!(HEAP8[$isConvex >> 0] | 0)) label = 12; else {
  HEAP8[$isEar >> 0] = 1;
  $y24 = $v + 16 | 0;
  $y38 = $0 + 16 | 0;
  $y53 = $1 + 16 | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= ($numvertices | 0)) break L1;
   $p15 = $vertices + ($i$0 * 48 | 0) + 8 | 0;
   $3 = +HEAPF64[$p15 >> 3];
   if ($3 == +HEAPF64[$p2 >> 3]) {
    if (!(+HEAPF64[$vertices + ($i$0 * 48 | 0) + 16 >> 3] == +HEAPF64[$y24 >> 3])) label = 6;
   } else label = 6;
   do if ((label | 0) == 6) {
    label = 0;
    if ($3 == +HEAPF64[$p >> 3]) if (+HEAPF64[$vertices + ($i$0 * 48 | 0) + 16 >> 3] == +HEAPF64[$y38 >> 3]) break;
    if ($3 == +HEAPF64[$p3 >> 3]) if (+HEAPF64[$vertices + ($i$0 * 48 | 0) + 16 >> 3] == +HEAPF64[$y53 >> 3]) break;
    if (__ZN13TPPLPartition8IsInsideER9TPPLPointS1_S1_S1_(0, $p, $p2, $p3, $p15) | 0) {
     label = 12;
     break L1;
    }
   } while (0);
   $i$0 = $i$0 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 12) HEAP8[$isEar >> 0] = 0;
 STACKTOP = sp;
 return;
}

function _stbi__vertical_flip($image, $w, $h, $bytes_per_pixel) {
 $image = $image | 0;
 $w = $w | 0;
 $h = $h | 0;
 $bytes_per_pixel = $bytes_per_pixel | 0;
 var $bytes = 0, $bytes_copy = 0, $bytes_left = 0, $bytes_per_pixel$addr = 0, $bytes_per_row = 0, $h$addr = 0, $image$addr = 0, $row = 0, $row0 = 0, $row1 = 0, $temp = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096 | 0;
 $image$addr = sp + 2088 | 0;
 $w$addr = sp + 2084 | 0;
 $h$addr = sp + 2080 | 0;
 $bytes_per_pixel$addr = sp + 2076 | 0;
 $row = sp + 2072 | 0;
 $bytes_per_row = sp + 2068 | 0;
 $temp = sp;
 $bytes = sp + 2064 | 0;
 $row0 = sp + 2060 | 0;
 $row1 = sp + 2056 | 0;
 $bytes_left = sp + 2052 | 0;
 $bytes_copy = sp + 2048 | 0;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$bytes_per_pixel$addr >> 2] = $bytes_per_pixel;
 HEAP32[$bytes_per_row >> 2] = Math_imul(HEAP32[$w$addr >> 2] | 0, HEAP32[$bytes_per_pixel$addr >> 2] | 0) | 0;
 HEAP32[$bytes >> 2] = HEAP32[$image$addr >> 2];
 HEAP32[$row >> 2] = 0;
 while (1) {
  if ((HEAP32[$row >> 2] | 0) >= (HEAP32[$h$addr >> 2] >> 1 | 0)) break;
  HEAP32[$row0 >> 2] = (HEAP32[$bytes >> 2] | 0) + (Math_imul(HEAP32[$row >> 2] | 0, HEAP32[$bytes_per_row >> 2] | 0) | 0);
  HEAP32[$row1 >> 2] = (HEAP32[$bytes >> 2] | 0) + (Math_imul((HEAP32[$h$addr >> 2] | 0) - (HEAP32[$row >> 2] | 0) - 1 | 0, HEAP32[$bytes_per_row >> 2] | 0) | 0);
  HEAP32[$bytes_left >> 2] = HEAP32[$bytes_per_row >> 2];
  while (1) {
   if (!(HEAP32[$bytes_left >> 2] | 0)) break;
   HEAP32[$bytes_copy >> 2] = (HEAP32[$bytes_left >> 2] | 0) >>> 0 < 2048 ? HEAP32[$bytes_left >> 2] | 0 : 2048;
   _memcpy($temp | 0, HEAP32[$row0 >> 2] | 0, HEAP32[$bytes_copy >> 2] | 0) | 0;
   _memcpy(HEAP32[$row0 >> 2] | 0, HEAP32[$row1 >> 2] | 0, HEAP32[$bytes_copy >> 2] | 0) | 0;
   _memcpy(HEAP32[$row1 >> 2] | 0, $temp | 0, HEAP32[$bytes_copy >> 2] | 0) | 0;
   HEAP32[$row0 >> 2] = (HEAP32[$row0 >> 2] | 0) + (HEAP32[$bytes_copy >> 2] | 0);
   HEAP32[$row1 >> 2] = (HEAP32[$row1 >> 2] | 0) + (HEAP32[$bytes_copy >> 2] | 0);
   HEAP32[$bytes_left >> 2] = (HEAP32[$bytes_left >> 2] | 0) - (HEAP32[$bytes_copy >> 2] | 0);
  }
  HEAP32[$row >> 2] = (HEAP32[$row >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __sg_gl_reset_state_cache() {
 var $attr = 0, $i = 0, $i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $i = sp + 8 | 0;
 $attr = sp + 4 | 0;
 $i22 = sp;
 if (!(HEAP32[541199] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5559, 30498);
 _memset(2164808, 0, 612) | 0;
 __sg_gl_cache_clear_buffer_bindings(1);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5568, 30498);
 __sg_gl_cache_clear_texture_bindings(1);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5570, 30498);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[541102] | 0)) break;
  HEAP32[$attr >> 2] = 2164952 + ((HEAP32[$i >> 2] | 0) * 20 | 0);
  HEAP8[HEAP32[$attr >> 2] >> 0] = -1;
  HEAP8[(HEAP32[$attr >> 2] | 0) + 1 >> 0] = -1;
  _glDisableVertexAttribArray(HEAP32[$i >> 2] | 0);
  if (_glGetError() | 0) {
   label = 11;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 11) ___assert_fail(29811, 21600, 5576, 30498);
 HEAP32[541350] = 4;
 _glGetIntegerv(35725, 2165288);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5582, 30498);
 HEAP32[541203] = 8;
 HEAP32[541209] = 8;
 HEAP32[541210] = 1;
 HEAP32[541211] = 1;
 HEAP32[541212] = 1;
 HEAP32[541213] = 8;
 HEAP32[541214] = 1;
 HEAP32[541215] = 1;
 HEAP32[541216] = 1;
 _glEnable(2929);
 _glDepthFunc(519);
 _glDepthMask(0);
 _glDisable(2960);
 _glStencilFunc(519, 0, 0);
 _glStencilOp(7680, 7680, 7680);
 _glStencilMask(0);
 HEAP32[541219] = 2;
 HEAP32[541220] = 1;
 HEAP32[541221] = 1;
 HEAP32[541222] = 2;
 HEAP32[541223] = 1;
 HEAP32[541224] = 1;
 _glDisable(3042);
 _glBlendFuncSeparate(1, 0, 1, 0);
 _glBlendEquationSeparate(32774, 32774);
 _glBlendColor(0.0, 0.0, 0.0, 0.0);
 HEAP32[$i22 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i22 >> 2] | 0) >= 4) break;
  HEAP32[2164900 + (HEAP32[$i22 >> 2] << 2) >> 2] = 15;
  HEAP32[$i22 >> 2] = (HEAP32[$i22 >> 2] | 0) + 1;
 }
 HEAP32[541229] = 1;
 HEAP32[541230] = 2;
 HEAP32[541232] = 1;
 _glColorMask(1, 1, 1, 1);
 _glPolygonOffset(0.0, 0.0);
 _glDisable(32823);
 _glDisable(2884);
 _glFrontFace(2304);
 _glCullFace(1029);
 _glEnable(3089);
 _glDisable(32926);
 _glEnable(3024);
 _glDisable(32823);
 STACKTOP = sp;
 return;
}

function _stbtt__new_active($hh, $e, $off_x, $start_point, $userdata) {
 $hh = $hh | 0;
 $e = $e | 0;
 $off_x = $off_x | 0;
 $start_point = +$start_point;
 $userdata = $userdata | 0;
 var $39 = 0, $cond = 0.0, $dxdy = 0, $e$addr = 0, $fx7 = 0, $hh$addr = 0, $off_x$addr = 0, $retval = 0, $start_point$addr = 0, $userdata$addr = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $hh$addr = sp + 24 | 0;
 $e$addr = sp + 20 | 0;
 $off_x$addr = sp + 16 | 0;
 $start_point$addr = sp + 12 | 0;
 $userdata$addr = sp + 8 | 0;
 $z = sp + 4 | 0;
 $dxdy = sp;
 HEAP32[$hh$addr >> 2] = $hh;
 HEAP32[$e$addr >> 2] = $e;
 HEAP32[$off_x$addr >> 2] = $off_x;
 HEAPF32[$start_point$addr >> 2] = $start_point;
 HEAP32[$userdata$addr >> 2] = $userdata;
 HEAP32[$z >> 2] = _stbtt__hheap_alloc(HEAP32[$hh$addr >> 2] | 0, 28, HEAP32[$userdata$addr >> 2] | 0) | 0;
 HEAPF32[$dxdy >> 2] = (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 8 >> 2] - +HEAPF32[HEAP32[$e$addr >> 2] >> 2]) / (+HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 12 >> 2] - +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 4 >> 2]);
 if (!(HEAP32[$z >> 2] | 0)) ___assert_fail(44696, 44131, 2451, 44712);
 if (!(HEAP32[$z >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$z >> 2];
  $39 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 }
 HEAPF32[(HEAP32[$z >> 2] | 0) + 8 >> 2] = +HEAPF32[$dxdy >> 2];
 if (+HEAPF32[$dxdy >> 2] != 0.0) $cond = 1.0 / +HEAPF32[$dxdy >> 2]; else $cond = 0.0;
 HEAPF32[(HEAP32[$z >> 2] | 0) + 12 >> 2] = $cond;
 HEAPF32[(HEAP32[$z >> 2] | 0) + 4 >> 2] = +HEAPF32[HEAP32[$e$addr >> 2] >> 2] + +HEAPF32[$dxdy >> 2] * (+HEAPF32[$start_point$addr >> 2] - +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 4 >> 2]);
 $fx7 = (HEAP32[$z >> 2] | 0) + 4 | 0;
 HEAPF32[$fx7 >> 2] = +HEAPF32[$fx7 >> 2] - +(HEAP32[$off_x$addr >> 2] | 0);
 HEAPF32[(HEAP32[$z >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$e$addr >> 2] | 0) + 16 >> 2] | 0 ? 1.0 : -1.0;
 HEAPF32[(HEAP32[$z >> 2] | 0) + 20 >> 2] = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 4 >> 2];
 HEAPF32[(HEAP32[$z >> 2] | 0) + 24 >> 2] = +HEAPF32[(HEAP32[$e$addr >> 2] | 0) + 12 >> 2];
 HEAP32[HEAP32[$z >> 2] >> 2] = 0;
 HEAP32[$retval >> 2] = HEAP32[$z >> 2];
 $39 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $39 | 0;
}

function _meshopt_optimizeVertexFetch($destination, $indices, $index_count, $vertices, $vertex_count, $vertex_size) {
 $destination = $destination | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $vertices = $vertices | 0;
 $vertex_count = $vertex_count | 0;
 $vertex_size = $vertex_size | 0;
 var $1 = 0, $2 = 0, $3 = 0, $allocator = 0, $arrayidx = 0, $arrayidx17 = 0, $call = 0, $call9 = 0, $i$0 = 0, $mul = 0, $next_vertex$0 = 0, $next_vertex$1 = 0, $vertices$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $allocator = sp;
 if (($index_count >>> 0) % 3 | 0 | 0) ___assert_fail(47099, 47120, 33, 47254);
 if (($vertex_size + -1 | 0) >>> 0 >= 256) ___assert_fail(47282, 47120, 34, 47254);
 __ZN17meshopt_AllocatorC2Ev($allocator);
 if (($destination | 0) == ($vertices | 0)) {
  $mul = Math_imul($vertex_size, $vertex_count) | 0;
  $call = __ZN17meshopt_Allocator8allocateIhEEPT_m($allocator, $mul) | 0;
  _memcpy($call | 0, $destination | 0, $mul | 0) | 0;
  $vertices$addr$0 = $call;
 } else $vertices$addr$0 = $vertices;
 $call9 = __ZN17meshopt_Allocator8allocateIjEEPT_m($allocator, $vertex_count) | 0;
 _memset($call9 | 0, -1, $vertex_count << 2 | 0) | 0;
 $i$0 = 0;
 $next_vertex$0 = 0;
 while (1) {
  if ($i$0 >>> 0 >= $index_count >>> 0) break;
  $arrayidx = $indices + ($i$0 << 2) | 0;
  $1 = HEAP32[$arrayidx >> 2] | 0;
  if ($1 >>> 0 >= $vertex_count >>> 0) {
   label = 11;
   break;
  }
  $arrayidx17 = $call9 + ($1 << 2) | 0;
  $2 = HEAP32[$arrayidx17 >> 2] | 0;
  if (($2 | 0) == -1) {
   _memcpy($destination + (Math_imul($next_vertex$0, $vertex_size) | 0) | 0, $vertices$addr$0 + (Math_imul($1, $vertex_size) | 0) | 0, $vertex_size | 0) | 0;
   HEAP32[$arrayidx17 >> 2] = $next_vertex$0;
   $3 = $next_vertex$0;
   $next_vertex$1 = $next_vertex$0 + 1 | 0;
  } else {
   $3 = $2;
   $next_vertex$1 = $next_vertex$0;
  }
  HEAP32[$arrayidx >> 2] = $3;
  $i$0 = $i$0 + 1 | 0;
  $next_vertex$0 = $next_vertex$1;
 }
 if ((label | 0) == 11) ___assert_fail(47205, 47120, 55, 47254);
 if ($next_vertex$0 >>> 0 > $vertex_count >>> 0) ___assert_fail(47226, 47120, 71, 47254); else {
  __ZN17meshopt_AllocatorD2Ev($allocator);
  STACKTOP = sp;
  return $next_vertex$0 | 0;
 }
 return 0;
}

function __sg_pipeline_common_init($cmn, $desc) {
 $cmn = $cmn | 0;
 $desc = $desc | 0;
 var $17 = 0, $blend_color = 0, $blend_color19 = 0, $cmn$addr = 0, $desc$addr = 0, $i = 0, $i4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cmn$addr = sp + 12 | 0;
 $desc$addr = sp + 8 | 0;
 $i = sp + 4 | 0;
 $i4 = sp;
 HEAP32[$cmn$addr >> 2] = $cmn;
 HEAP32[$desc$addr >> 2] = $desc;
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 360 >> 2] | 0) >= 4) ___assert_fail(38622, 21600, 2835, 38667);
 HEAP32[HEAP32[$cmn$addr >> 2] >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 512 >> 2];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 8) break;
  HEAP8[(HEAP32[$cmn$addr >> 2] | 0) + 8 + (HEAP32[$i >> 2] | 0) >> 0] = 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 360 >> 2];
 HEAP32[$i4 >> 2] = 0;
 while (1) {
  $17 = HEAP32[$desc$addr >> 2] | 0;
  if ((HEAP32[$i4 >> 2] | 0) >= (HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 16 >> 2] | 0)) break;
  HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 20 + (HEAP32[$i4 >> 2] << 2) >> 2] = HEAP32[$17 + 364 + ((HEAP32[$i4 >> 2] | 0) * 36 | 0) >> 2];
  HEAP32[$i4 >> 2] = (HEAP32[$i4 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 36 >> 2] = HEAP32[$17 + 296 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 40 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 524 >> 2];
 HEAPF32[(HEAP32[$cmn$addr >> 2] | 0) + 44 >> 2] = +HEAPF32[(HEAP32[$desc$addr >> 2] | 0) + 296 + 12 >> 2];
 HEAPF32[(HEAP32[$cmn$addr >> 2] | 0) + 48 >> 2] = +HEAPF32[(HEAP32[$desc$addr >> 2] | 0) + 296 + 16 >> 2];
 HEAPF32[(HEAP32[$cmn$addr >> 2] | 0) + 52 >> 2] = +HEAPF32[(HEAP32[$desc$addr >> 2] | 0) + 296 + 20 >> 2];
 $blend_color = (HEAP32[$cmn$addr >> 2] | 0) + 56 | 0;
 $blend_color19 = (HEAP32[$desc$addr >> 2] | 0) + 528 | 0;
 HEAP32[$blend_color >> 2] = HEAP32[$blend_color19 >> 2];
 HEAP32[$blend_color + 4 >> 2] = HEAP32[$blend_color19 + 4 >> 2];
 HEAP32[$blend_color + 8 >> 2] = HEAP32[$blend_color19 + 8 >> 2];
 HEAP32[$blend_color + 12 >> 2] = HEAP32[$blend_color19 + 12 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call5 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55321);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp2$byval_copy) | 0) label = 3; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 55325);
  HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
  HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
  if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $agg$tmp2$byval_copy) | 0) label = 3; else $retval$1 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0;
 }
 if ((label | 0) == 3) {
  $call5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0, $State) | 0;
  HEAP32[$agg$tmp2$byval_copy >> 2] = $call5;
  if (!$call5) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $agg$tmp2$byval_copy) | 0;
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __Z24averageTransparentPixelsRK8DrBitmapRK8DrPointFRKd($bitmap, $at_point, $alpha_tolerance) {
 $bitmap = $bitmap | 0;
 $at_point = $at_point | 0;
 $alpha_tolerance = $alpha_tolerance | 0;
 var $call = 0, $call43 = 0.0, $call8 = 0, $cond18 = 0, $cond24 = 0, $cond34 = 0, $height = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp2 = 0, $sub11 = 0, $sub26 = 0, $total_count$0 = 0.0, $total_count$1 = 0.0, $transparent_count$0 = 0.0, $transparent_count$1 = 0.0, $width = 0, $x35$0 = 0, $y37$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp + 8 | 0;
 $ref$tmp1 = sp + 4 | 0;
 $ref$tmp2 = sp;
 HEAP32[$ref$tmp >> 2] = ~~+_llvm_round_f64(+(+HEAPF64[$at_point >> 3]));
 HEAP32[$ref$tmp1 >> 2] = 0;
 $width = $bitmap + 8 | 0;
 HEAP32[$ref$tmp2 >> 2] = (HEAP32[$width >> 2] | 0) + -1;
 $call = __ZN2Dr5ClampIiEET_RKS1_S3_S3_($ref$tmp, $ref$tmp1, $ref$tmp2) | 0;
 HEAP32[$ref$tmp >> 2] = ~~+_llvm_round_f64(+(+HEAPF64[$at_point + 8 >> 3]));
 HEAP32[$ref$tmp1 >> 2] = 0;
 $height = $bitmap + 12 | 0;
 HEAP32[$ref$tmp2 >> 2] = (HEAP32[$height >> 2] | 0) + -1;
 $call8 = __ZN2Dr5ClampIiEET_RKS1_S3_S3_($ref$tmp, $ref$tmp1, $ref$tmp2) | 0;
 $sub11 = (HEAP32[$width >> 2] | 0) + -1 | 0;
 $cond18 = ($call | 0) < ($sub11 | 0) ? $call + 1 | 0 : $sub11;
 $cond24 = ($call8 | 0) > 0 ? $call8 + -1 | 0 : 0;
 $sub26 = (HEAP32[$height >> 2] | 0) + -1 | 0;
 $cond34 = ($call8 | 0) < ($sub26 | 0) ? $call8 + 1 | 0 : $sub26;
 $total_count$0 = 0.0;
 $transparent_count$0 = 0.0;
 $x35$0 = ($call | 0) > 0 ? $call + -1 | 0 : 0;
 while (1) {
  if (($x35$0 | 0) > ($cond18 | 0)) break;
  $total_count$1 = $total_count$0;
  $transparent_count$1 = $transparent_count$0;
  $y37$0 = $cond24;
  while (1) {
   if (($y37$0 | 0) > ($cond34 | 0)) break;
   __ZNK8DrBitmap8getPixelEii($ref$tmp, $bitmap, $x35$0, $y37$0);
   $call43 = +__ZNK7DrColor6alphaFEv($ref$tmp);
   $total_count$1 = $total_count$1 + 1.0;
   $transparent_count$1 = $call43 < +HEAPF64[$alpha_tolerance >> 3] ? $transparent_count$1 + 1.0 : $transparent_count$1;
   $y37$0 = $y37$0 + 1 | 0;
  }
  $total_count$0 = $total_count$1;
  $transparent_count$0 = $transparent_count$1;
  $x35$0 = $x35$0 + 1 | 0;
 }
 STACKTOP = sp;
 return +($transparent_count$0 / $total_count$0);
}

function __ZNK8DrBitmap7polygonEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $agg$tmp = 0, $agg$tmp14 = 0, $agg$tmp14$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp6 = 0, $height = 0, $width = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $agg$tmp14$byval_copy = sp + 64 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp3 = sp + 32 | 0;
 $agg$tmp6 = sp + 16 | 0;
 $agg$tmp14 = sp;
 __ZN10DrPolygonFC2Ev($agg$result);
 __ZN8DrPointFC2Edd($agg$tmp, 0.0, 0.0);
 HEAP32[$agg$tmp14$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp14$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 12 >> 2] = HEAP32[$agg$tmp + 12 >> 2];
 __ZN10DrPolygonF8addPointE8DrPointF($agg$result, $agg$tmp14$byval_copy);
 $width = $this + 8 | 0;
 __ZN8DrPointFC2Edd($agg$tmp3, +((HEAP32[$width >> 2] | 0) + -1 | 0), 0.0);
 HEAP32[$agg$tmp14$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 8 >> 2] = HEAP32[$agg$tmp3 + 8 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 12 >> 2] = HEAP32[$agg$tmp3 + 12 >> 2];
 __ZN10DrPolygonF8addPointE8DrPointF($agg$result, $agg$tmp14$byval_copy);
 $height = $this + 12 | 0;
 __ZN8DrPointFC2Edd($agg$tmp6, +((HEAP32[$width >> 2] | 0) + -1 | 0), +((HEAP32[$height >> 2] | 0) + -1 | 0));
 HEAP32[$agg$tmp14$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 8 >> 2] = HEAP32[$agg$tmp6 + 8 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 12 >> 2] = HEAP32[$agg$tmp6 + 12 >> 2];
 __ZN10DrPolygonF8addPointE8DrPointF($agg$result, $agg$tmp14$byval_copy);
 __ZN8DrPointFC2Edd($agg$tmp14, 0.0, +((HEAP32[$height >> 2] | 0) + -1 | 0));
 HEAP32[$agg$tmp14$byval_copy >> 2] = HEAP32[$agg$tmp14 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 4 >> 2] = HEAP32[$agg$tmp14 + 4 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 8 >> 2] = HEAP32[$agg$tmp14 + 8 >> 2];
 HEAP32[$agg$tmp14$byval_copy + 12 >> 2] = HEAP32[$agg$tmp14 + 12 >> 2];
 __ZN10DrPolygonF8addPointE8DrPointF($agg$result, $agg$tmp14$byval_copy);
 STACKTOP = sp;
 return;
}

function __sapp_emsc_keytable_init() {
 HEAP32[14949] = 259;
 HEAP32[14950] = 258;
 HEAP32[14954] = 257;
 HEAP32[14957] = 340;
 HEAP32[14958] = 341;
 HEAP32[14959] = 342;
 HEAP32[14960] = 284;
 HEAP32[14968] = 256;
 HEAP32[14973] = 32;
 HEAP32[14974] = 266;
 HEAP32[14975] = 267;
 HEAP32[14976] = 269;
 HEAP32[14977] = 268;
 HEAP32[14978] = 263;
 HEAP32[14979] = 265;
 HEAP32[14980] = 262;
 HEAP32[14981] = 264;
 HEAP32[14986] = 260;
 HEAP32[14987] = 261;
 HEAP32[14989] = 48;
 HEAP32[14990] = 49;
 HEAP32[14991] = 50;
 HEAP32[14992] = 51;
 HEAP32[14993] = 52;
 HEAP32[14994] = 53;
 HEAP32[14995] = 54;
 HEAP32[14996] = 55;
 HEAP32[14997] = 56;
 HEAP32[14998] = 57;
 HEAP32[15e3] = 59;
 HEAP32[15005] = 61;
 HEAP32[15006] = 65;
 HEAP32[15007] = 66;
 HEAP32[15008] = 67;
 HEAP32[15009] = 68;
 HEAP32[15010] = 69;
 HEAP32[15011] = 70;
 HEAP32[15012] = 71;
 HEAP32[15013] = 72;
 HEAP32[15014] = 73;
 HEAP32[15015] = 74;
 HEAP32[15016] = 75;
 HEAP32[15017] = 76;
 HEAP32[15018] = 77;
 HEAP32[15019] = 78;
 HEAP32[15020] = 79;
 HEAP32[15021] = 80;
 HEAP32[15022] = 81;
 HEAP32[15023] = 82;
 HEAP32[15024] = 83;
 HEAP32[15025] = 84;
 HEAP32[15026] = 85;
 HEAP32[15027] = 86;
 HEAP32[15028] = 87;
 HEAP32[15029] = 88;
 HEAP32[15030] = 89;
 HEAP32[15031] = 90;
 HEAP32[15032] = 343;
 HEAP32[15034] = 348;
 HEAP32[15037] = 320;
 HEAP32[15038] = 321;
 HEAP32[15039] = 322;
 HEAP32[15040] = 323;
 HEAP32[15041] = 324;
 HEAP32[15042] = 325;
 HEAP32[15043] = 326;
 HEAP32[15044] = 327;
 HEAP32[15045] = 328;
 HEAP32[15046] = 329;
 HEAP32[15047] = 332;
 HEAP32[15048] = 334;
 HEAP32[15050] = 333;
 HEAP32[15051] = 330;
 HEAP32[15052] = 331;
 HEAP32[15053] = 290;
 HEAP32[15054] = 291;
 HEAP32[15055] = 292;
 HEAP32[15056] = 293;
 HEAP32[15057] = 294;
 HEAP32[15058] = 295;
 HEAP32[15059] = 296;
 HEAP32[15060] = 297;
 HEAP32[15061] = 298;
 HEAP32[15062] = 299;
 HEAP32[15063] = 300;
 HEAP32[15064] = 301;
 HEAP32[15085] = 282;
 HEAP32[15086] = 281;
 HEAP32[15114] = 45;
 HEAP32[15127] = 59;
 HEAP32[15128] = 61;
 HEAP32[15129] = 44;
 HEAP32[15130] = 45;
 HEAP32[15131] = 46;
 HEAP32[15132] = 47;
 HEAP32[15133] = 96;
 HEAP32[15160] = 91;
 HEAP32[15161] = 92;
 HEAP32[15162] = 93;
 HEAP32[15163] = 39;
 HEAP32[15165] = 343;
 return;
}

function __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__end_$i$i$i$i = 0, $__end_$i$i$i$i$i = 0, $__v = 0, $__value_$i$i$i8$i$i$i$i = 0, $__value_$i$i$i9$i$i$i$i = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 12 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEEC2EmmS9_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 12 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  $__end_$i$i$i$i$i = $5 + 4 | 0;
  HEAP32[$__end_$i$i$i$i$i >> 2] = 0;
  $__value_$i$i$i9$i$i$i$i = $5 + 8 | 0;
  HEAP32[$__value_$i$i$i9$i$i$i$i >> 2] = 0;
  HEAP32[$5 >> 2] = HEAP32[$__x >> 2];
  $__end_$i$i$i$i = $__x + 4 | 0;
  HEAP32[$__end_$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i$i >> 2];
  $__value_$i$i$i8$i$i$i$i = $__x + 8 | 0;
  HEAP32[$__value_$i$i$i9$i$i$i$i >> 2] = HEAP32[$__value_$i$i$i8$i$i$i$i >> 2];
  HEAP32[$__value_$i$i$i8$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i$i >> 2] = 0;
  HEAP32[$__x >> 2] = 0;
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 12;
  __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $3 = 0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $conv = 0, $conv10 = 0, $e$0 = 0, $incdec$ptr$i$i = 0, $num = 0, $scevgep = 0, $t$0$idx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp$byval_copy = sp + 40 | 0;
 $0 = sp + 32 | 0;
 $num = sp;
 $agg$tmp = sp + 48 | 0;
 $Contents = $this + 8 | 0;
 $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Contents) | 0;
 if (((__ZNK12_GLOBAL__N_110StringView3endEv($Contents) | 0) + 1 - $call | 0) >>> 0 > 16) {
  $scevgep = $0 + 8 | 0;
  $e$0 = $0;
  $t$0$idx = 0;
  while (1) {
   if (($t$0$idx | 0) == 16) break;
   $conv = HEAP8[$call + $t$0$idx >> 0] | 0;
   $conv10 = HEAP8[$call + ($t$0$idx | 1) >> 0] | 0;
   HEAP8[$e$0 >> 0] = (($conv10 + -48 | 0) >>> 0 < 10 ? 208 : 169) + $conv10 + ((($conv + -48 | 0) >>> 0 < 10 ? 0 : 9) + $conv << 4);
   $e$0 = $e$0 + 1 | 0;
   $t$0$idx = $t$0$idx + 2 | 0;
  }
  $__first$addr$0$i$i = $0;
  $__last$addr$0$i$i = $scevgep;
  while (1) {
   $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
   if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break;
   $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
   HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
   HEAP8[$incdec$ptr$i$i >> 0] = $3;
   $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
   $__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  HEAP32[$num >> 2] = 0;
  HEAP32[$num + 4 >> 2] = 0;
  HEAP32[$num + 8 >> 2] = 0;
  HEAP32[$num + 12 >> 2] = 0;
  HEAP32[$num + 16 >> 2] = 0;
  HEAP32[$num + 20 >> 2] = 0;
  HEAP32[$num + 24 >> 2] = 0;
  HEAP32[$num + 28 >> 2] = 0;
  HEAPF64[$agg$tmp$byval_copy >> 3] = +HEAPF64[$0 >> 3];
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp, $num, $num + (_snprintf($num, 32, 52588, $agg$tmp$byval_copy) | 0) | 0);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function ___vfprintf_internal($f, $fmt, $ap, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $1 = 0, $4 = 0, $7 = 0, $and = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call21 = 0, $cond = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 208 | 0;
 $nl_type = sp + 160 | 0;
 $nl_arg = sp + 80 | 0;
 $internal_buf = sp;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0) < 0) $retval$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
  $1 = HEAP32[$f >> 2] | 0;
  $and = $1 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $1 & -33;
  $buf_size = $f + 48 | 0;
  if (!(HEAP32[$buf_size >> 2] | 0)) {
   $buf = $f + 44 | 0;
   $4 = HEAP32[$buf >> 2] | 0;
   HEAP32[$buf >> 2] = $internal_buf;
   $wbase = $f + 28 | 0;
   HEAP32[$wbase >> 2] = $internal_buf;
   $wpos = $f + 20 | 0;
   HEAP32[$wpos >> 2] = $internal_buf;
   HEAP32[$buf_size >> 2] = 80;
   $wend = $f + 16 | 0;
   HEAP32[$wend >> 2] = $internal_buf + 80;
   $call21 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
   if (!$4) $ret$1 = $call21; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
    $spec$select = (HEAP32[$wpos >> 2] | 0) == 0 ? -1 : $call21;
    HEAP32[$buf >> 2] = $4;
    HEAP32[$buf_size >> 2] = 0;
    HEAP32[$wend >> 2] = 0;
    HEAP32[$wbase >> 2] = 0;
    HEAP32[$wpos >> 2] = 0;
    $ret$1 = $spec$select;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $7 | $and;
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = ($7 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _stbi__pnm_info($s, $x, $y, $comp) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 var $22 = 0, $c = 0, $call21 = 0, $call22 = 0, $comp$addr = 0, $dummy = 0, $maxv = 0, $p = 0, $retval = 0, $s$addr = 0, $t = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 24 | 0;
 $s$addr = sp + 20 | 0;
 $x$addr = sp + 16 | 0;
 $y$addr = sp + 12 | 0;
 $comp$addr = sp + 8 | 0;
 $maxv = sp + 4 | 0;
 $dummy = sp;
 $c = sp + 30 | 0;
 $p = sp + 29 | 0;
 $t = sp + 28 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 if (!(HEAP32[$x$addr >> 2] | 0)) HEAP32[$x$addr >> 2] = $dummy;
 if (!(HEAP32[$y$addr >> 2] | 0)) HEAP32[$y$addr >> 2] = $dummy;
 if (!(HEAP32[$comp$addr >> 2] | 0)) HEAP32[$comp$addr >> 2] = $dummy;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 HEAP8[$p >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP8[$t >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
 do if ((HEAP8[$p >> 0] | 0) == 80) {
  if ((HEAP8[$t >> 0] | 0) != 53) if ((HEAP8[$t >> 0] | 0) != 54) break;
  HEAP32[HEAP32[$comp$addr >> 2] >> 2] = (HEAP8[$t >> 0] | 0) == 54 ? 3 : 1;
  HEAP8[$c >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
  _stbi__pnm_skip_whitespace(HEAP32[$s$addr >> 2] | 0, $c);
  $call21 = _stbi__pnm_getinteger(HEAP32[$s$addr >> 2] | 0, $c) | 0;
  HEAP32[HEAP32[$x$addr >> 2] >> 2] = $call21;
  _stbi__pnm_skip_whitespace(HEAP32[$s$addr >> 2] | 0, $c);
  $call22 = _stbi__pnm_getinteger(HEAP32[$s$addr >> 2] | 0, $c) | 0;
  HEAP32[HEAP32[$y$addr >> 2] >> 2] = $call22;
  _stbi__pnm_skip_whitespace(HEAP32[$s$addr >> 2] | 0, $c);
  HEAP32[$maxv >> 2] = _stbi__pnm_getinteger(HEAP32[$s$addr >> 2] | 0, $c) | 0;
  if ((HEAP32[$maxv >> 2] | 0) > 255) {
   HEAP32[$retval >> 2] = _stbi__err(47842) | 0;
   $22 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $22 | 0;
  } else {
   HEAP32[$retval >> 2] = 1;
   $22 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $22 | 0;
  }
 } while (0);
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 HEAP32[$retval >> 2] = 0;
 $22 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $22 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $1 = 0, $Collapsed = 0, $Printing = 0, $SavePrinting = 0, $agg$tmp = 0, $agg$tmp18 = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp23$byval_copy = sp + 40 | 0;
 $SavePrinting = sp + 24 | 0;
 $Collapsed = sp + 8 | 0;
 $agg$tmp = sp + 32 | 0;
 $agg$tmp18 = sp + 16 | 0;
 $agg$tmp23 = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($Collapsed, $this, $s);
  $1 = HEAP32[$Collapsed + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 127]($1, $s);
  if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1, $s) | 0) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52157);
   HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp23$byval_copy);
  }
  if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1, $s) | 0) label = 6; else if (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1, $s) | 0) label = 6;
  if ((label | 0) == 6) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 52159);
   HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
   HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp18 + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp23$byval_copy);
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp23, (HEAP32[$Collapsed >> 2] | 0) == 0 ? 52161 : 52163);
  HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
  HEAP32[$agg$tmp23$byval_copy + 4 >> 2] = HEAP32[$agg$tmp23 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp23$byval_copy);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;
 return;
}

function _stbi__jpeg_finish($z) {
 $z = $z | 0;
 var $add$ptr27 = 0, $data = 0, $h = 0, $i = 0, $j = 0, $n = 0, $w = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $z$addr = sp + 24 | 0;
 $i = sp + 20 | 0;
 $j = sp + 16 | 0;
 $n = sp + 12 | 0;
 $w = sp + 8 | 0;
 $h = sp + 4 | 0;
 $data = sp;
 HEAP32[$z$addr >> 2] = $z;
 if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18380 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$n >> 2] = 0;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= (HEAP32[(HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) + 8 >> 2] | 0)) break;
  HEAP32[$w >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 28 >> 2] | 0) + 7 >> 3;
  HEAP32[$h >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 32 >> 2] | 0) + 7 >> 3;
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$h >> 2] | 0)) break;
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$w >> 2] | 0)) break;
    HEAP32[$data >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 60 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + (Math_imul(HEAP32[$j >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 64 >> 2] | 0) | 0) << 6 << 1);
    _stbi__jpeg_dequantize(HEAP32[$data >> 2] | 0, (HEAP32[$z$addr >> 2] | 0) + 13444 + (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 12 >> 2] << 7) | 0);
    $add$ptr27 = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 44 >> 2] | 0) + ((Math_imul(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[$j >> 2] | 0) | 0) << 3) | 0;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18444 >> 2] & 3]($add$ptr27 + (HEAP32[$i >> 2] << 3) | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$n >> 2] | 0) * 72 | 0) + 36 >> 2] | 0, HEAP32[$data >> 2] | 0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _fons__addWhiteRect($stash, $w, $h) {
 $stash = $stash | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $call12 = 0, $call17 = 0, $call23 = 0, $call29 = 0, $dst = 0, $gx = 0, $gy = 0, $h$addr = 0, $stash$addr = 0, $w$addr = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $stash$addr = sp + 28 | 0;
 $w$addr = sp + 24 | 0;
 $h$addr = sp + 20 | 0;
 $x = sp + 16 | 0;
 $y = sp + 12 | 0;
 $gx = sp + 8 | 0;
 $gy = sp + 4 | 0;
 $dst = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 if (!(_fons__atlasAddRect(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 68 >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0, $gx, $gy) | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$dst >> 2] = (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 44 >> 2] | 0) + ((HEAP32[$gx >> 2] | 0) + (Math_imul(HEAP32[$gy >> 2] | 0, HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0) | 0));
 HEAP32[$y >> 2] = 0;
 while (1) {
  if ((HEAP32[$y >> 2] | 0) >= (HEAP32[$h$addr >> 2] | 0)) break;
  HEAP32[$x >> 2] = 0;
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$w$addr >> 2] | 0)) break;
   HEAP8[(HEAP32[$dst >> 2] | 0) + (HEAP32[$x >> 2] | 0) >> 0] = -1;
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
  HEAP32[$dst >> 2] = (HEAP32[$dst >> 2] | 0) + (HEAP32[HEAP32[$stash$addr >> 2] >> 2] | 0);
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 1;
 }
 $call12 = _fons__mini(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 >> 2] | 0, HEAP32[$gx >> 2] | 0) | 0;
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 >> 2] = $call12;
 $call17 = _fons__mini(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 4 >> 2] | 0, HEAP32[$gy >> 2] | 0) | 0;
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 4 >> 2] = $call17;
 $call23 = _fons__maxi(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 8 >> 2] | 0, (HEAP32[$gx >> 2] | 0) + (HEAP32[$w$addr >> 2] | 0) | 0) | 0;
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 8 >> 2] = $call23;
 $call29 = _fons__maxi(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 12 >> 2] | 0, (HEAP32[$gy >> 2] | 0) + (HEAP32[$h$addr >> 2] | 0) | 0) | 0;
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 12 >> 2] = $call29;
 STACKTOP = sp;
 return;
}

function _stbi__getn($s, $buffer, $n) {
 $s = $s | 0;
 $buffer = $buffer | 0;
 $n = $n | 0;
 var $39 = 0, $blen = 0, $buffer$addr = 0, $count = 0, $img_buffer17 = 0, $n$addr = 0, $res = 0, $retval = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 24 | 0;
 $s$addr = sp + 20 | 0;
 $buffer$addr = sp + 16 | 0;
 $n$addr = sp + 12 | 0;
 $blen = sp + 8 | 0;
 $res = sp + 4 | 0;
 $count = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$n$addr >> 2] = $n;
 if (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 >> 2] | 0) {
  HEAP32[$blen >> 2] = (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] | 0) - (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0);
  if ((HEAP32[$blen >> 2] | 0) < (HEAP32[$n$addr >> 2] | 0)) {
   _memcpy(HEAP32[$buffer$addr >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0, HEAP32[$blen >> 2] | 0) | 0;
   HEAP32[$count >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 >> 2] & 15](HEAP32[(HEAP32[$s$addr >> 2] | 0) + 28 >> 2] | 0, (HEAP32[$buffer$addr >> 2] | 0) + (HEAP32[$blen >> 2] | 0) | 0, (HEAP32[$n$addr >> 2] | 0) - (HEAP32[$blen >> 2] | 0) | 0) | 0;
   HEAP32[$res >> 2] = (HEAP32[$count >> 2] | 0) == ((HEAP32[$n$addr >> 2] | 0) - (HEAP32[$blen >> 2] | 0) | 0) & 1;
   HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] = HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2];
   HEAP32[$retval >> 2] = HEAP32[$res >> 2];
   $39 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $39 | 0;
  }
 }
 if (((HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0) + (HEAP32[$n$addr >> 2] | 0) | 0) >>> 0 <= (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] | 0) >>> 0) {
  _memcpy(HEAP32[$buffer$addr >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0;
  $img_buffer17 = (HEAP32[$s$addr >> 2] | 0) + 168 | 0;
  HEAP32[$img_buffer17 >> 2] = (HEAP32[$img_buffer17 >> 2] | 0) + (HEAP32[$n$addr >> 2] | 0);
  HEAP32[$retval >> 2] = 1;
  $39 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $39 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0;
}

function __sfetch_pool_item_free($pool, $slot_id) {
 $pool = $pool | 0;
 $slot_id = $slot_id | 0;
 var $16 = 0, $24 = 0, $26 = 0, $28 = 0, $free_top20 = 0, $i = 0, $pool$addr = 0, $slot_id$addr = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp + 12 | 0;
 $slot_id$addr = sp + 8 | 0;
 $slot_index = sp + 4 | 0;
 $i = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(41933, 25510, 1423, 43155);
 if (!(HEAP8[(HEAP32[$pool$addr >> 2] | 0) + 20 >> 0] & 1)) ___assert_fail(41933, 25510, 1423, 43155);
 HEAP32[$slot_index >> 2] = __sfetch_slot_index(HEAP32[$slot_id$addr >> 2] | 0) | 0;
 if ((HEAP32[$slot_index >> 2] | 0) >>> 0 <= 0) ___assert_fail(30109, 25510, 1425, 43155);
 if ((HEAP32[$slot_index >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) >>> 0) ___assert_fail(30109, 25510, 1425, 43155);
 if ((HEAP32[(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 1232 | 0) >> 2] | 0) != (HEAP32[$slot_id$addr >> 2] | 0)) ___assert_fail(43178, 25510, 1426, 43155);
 HEAP32[$i >> 2] = 0;
 while (1) {
  $16 = HEAP32[$pool$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0) break;
  if ((HEAP32[(HEAP32[$16 + 12 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) == (HEAP32[$slot_index >> 2] | 0)) {
   label = 12;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 12) ___assert_fail(43223, 25510, 1430, 43155);
 __sfetch_item_discard((HEAP32[$16 + 8 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 1232 | 0) | 0);
 $24 = HEAP32[$slot_index >> 2] | 0;
 $26 = HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0;
 $free_top20 = (HEAP32[$pool$addr >> 2] | 0) + 4 | 0;
 $28 = HEAP32[$free_top20 >> 2] | 0;
 HEAP32[$free_top20 >> 2] = $28 + 1;
 HEAP32[$26 + ($28 << 2) >> 2] = $24;
 if ((HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= ((HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) - 1 | 0) >>> 0) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(43257, 25510, 1435, 43155);
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
  return dest | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function _stbtt__GetGlyfOffset($info, $glyph_index) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 var $10 = 0, $15 = 0, $17 = 0, $24 = 0, $33 = 0, $add$ptr = 0, $g1 = 0, $g2 = 0, $glyph_index$addr = 0, $info$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $info$addr = sp + 12 | 0;
 $glyph_index$addr = sp + 8 | 0;
 $g1 = sp + 4 | 0;
 $g2 = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph_index$addr >> 2] = $glyph_index;
 if (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 48 + 8 >> 2] | 0) ___assert_fail(44500, 44131, 1517, 44516);
 if ((HEAP32[$glyph_index$addr >> 2] | 0) >= (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[$retval >> 2] = -1;
  $33 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 44 >> 2] | 0) >= 2) {
  HEAP32[$retval >> 2] = -1;
  $33 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $33 | 0;
 }
 $10 = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] | 0;
 $add$ptr = (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] | 0) | 0;
 $15 = HEAP32[$glyph_index$addr >> 2] | 0;
 if (!(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 44 >> 2] | 0)) {
  HEAP32[$g1 >> 2] = $10 + (((_ttUSHORT($add$ptr + ($15 << 1) | 0) | 0) & 65535) << 1);
  $17 = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$g2 >> 2] = $17 + (((_ttUSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$glyph_index$addr >> 2] << 1) + 2 | 0) | 0) & 65535) << 1);
 } else {
  HEAP32[$g1 >> 2] = $10 + (_ttULONG($add$ptr + ($15 << 2) | 0) | 0);
  $24 = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$g2 >> 2] = $24 + (_ttULONG((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$glyph_index$addr >> 2] << 2) + 4 | 0) | 0);
 }
 HEAP32[$retval >> 2] = (HEAP32[$g1 >> 2] | 0) == (HEAP32[$g2 >> 2] | 0) ? -1 : HEAP32[$g1 >> 2] | 0;
 $33 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $33 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Dimension = 0, $agg$tmp = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp17$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp3 = sp + 16 | 0;
 $agg$tmp7 = sp + 8 | 0;
 $agg$tmp17 = sp;
 if ((__ZNK12_GLOBAL__N_112OutputStream4backEv($S) | 0) << 24 >> 24 != 93) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52157);
  HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp17$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 56132);
 HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
 HEAP32[$agg$tmp17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp17$byval_copy);
 $Dimension = $this + 12 | 0;
 if (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($Dimension) | 0) {
  __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp7, $Dimension);
  HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
  HEAP32[$agg$tmp17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp7 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp17$byval_copy);
 } else if (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($Dimension) | 0) __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($Dimension) | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 51793);
 HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2];
 HEAP32[$agg$tmp17$byval_copy + 4 >> 2] = HEAP32[$agg$tmp17 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp17$byval_copy);
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 127]($0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $3 = 0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $conv = 0, $conv10 = 0, $e$0 = 0, $incdec$ptr$i$i = 0, $num = 0, $scevgep = 0, $t$0$idx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp$byval_copy = sp + 24 | 0;
 $0 = sp + 40 | 0;
 $num = sp;
 $agg$tmp = sp + 32 | 0;
 $Contents = $this + 8 | 0;
 $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Contents) | 0;
 if (((__ZNK12_GLOBAL__N_110StringView3endEv($Contents) | 0) + 1 - $call | 0) >>> 0 > 8) {
  $scevgep = $0 + 4 | 0;
  $e$0 = $0;
  $t$0$idx = 0;
  while (1) {
   if (($t$0$idx | 0) == 8) break;
   $conv = HEAP8[$call + $t$0$idx >> 0] | 0;
   $conv10 = HEAP8[$call + ($t$0$idx | 1) >> 0] | 0;
   HEAP8[$e$0 >> 0] = (($conv10 + -48 | 0) >>> 0 < 10 ? 208 : 169) + $conv10 + ((($conv + -48 | 0) >>> 0 < 10 ? 0 : 9) + $conv << 4);
   $e$0 = $e$0 + 1 | 0;
   $t$0$idx = $t$0$idx + 2 | 0;
  }
  $__first$addr$0$i$i = $0;
  $__last$addr$0$i$i = $scevgep;
  while (1) {
   $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
   if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break;
   $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
   HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
   HEAP8[$incdec$ptr$i$i >> 0] = $3;
   $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
   $__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  HEAP32[$num >> 2] = 0;
  HEAP32[$num + 4 >> 2] = 0;
  HEAP32[$num + 8 >> 2] = 0;
  HEAP32[$num + 12 >> 2] = 0;
  HEAP32[$num + 16 >> 2] = 0;
  HEAP32[$num + 20 >> 2] = 0;
  HEAPF64[$agg$tmp$byval_copy >> 3] = +HEAPF32[$0 >> 2];
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp, $num, $num + (_snprintf($num, 24, 52647, $agg$tmp$byval_copy) | 0) | 0);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $3 = 0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $conv = 0, $conv10 = 0, $e$0 = 0, $incdec$ptr$i$i = 0, $num = 0, $scevgep = 0, $t$0$idx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp$byval_copy = sp + 48 | 0;
 $0 = sp + 40 | 0;
 $num = sp;
 $agg$tmp = sp + 56 | 0;
 $Contents = $this + 8 | 0;
 $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Contents) | 0;
 if (((__ZNK12_GLOBAL__N_110StringView3endEv($Contents) | 0) + 1 - $call | 0) >>> 0 > 20) {
  $scevgep = $0 + 8 | 0;
  $e$0 = $0;
  $t$0$idx = 0;
  while (1) {
   if (($t$0$idx | 0) == 20) break;
   $conv = HEAP8[$call + $t$0$idx >> 0] | 0;
   $conv10 = HEAP8[$call + ($t$0$idx | 1) >> 0] | 0;
   HEAP8[$e$0 >> 0] = (($conv10 + -48 | 0) >>> 0 < 10 ? 208 : 169) + $conv10 + ((($conv + -48 | 0) >>> 0 < 10 ? 0 : 9) + $conv << 4);
   $e$0 = $e$0 + 1 | 0;
   $t$0$idx = $t$0$idx + 2 | 0;
  }
  $__first$addr$0$i$i = $0;
  $__last$addr$0$i$i = $scevgep + 2 | 0;
  while (1) {
   $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
   if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break;
   $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
   HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
   HEAP8[$incdec$ptr$i$i >> 0] = $3;
   $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
   $__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  dest = $num;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAPF64[$agg$tmp$byval_copy >> 3] = +HEAPF64[$0 >> 3];
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp, $num, $num + (_snprintf($num, 40, 52527, $agg$tmp$byval_copy) | 0) | 0);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __sg_gl_draw($base_element, $num_elements, $num_instances) {
 $base_element = $base_element | 0;
 $num_elements = $num_elements | 0;
 $num_instances = $num_instances | 0;
 var $base_element$addr = 0, $i_size = 0, $i_type = 0, $ib_offset = 0, $indices = 0, $mul = 0, $num_elements$addr = 0, $num_instances$addr = 0, $p_type = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $base_element$addr = sp + 28 | 0;
 $num_elements$addr = sp + 24 | 0;
 $num_instances$addr = sp + 20 | 0;
 $i_type = sp + 16 | 0;
 $p_type = sp + 12 | 0;
 $i_size = sp + 8 | 0;
 $ib_offset = sp + 4 | 0;
 $indices = sp;
 HEAP32[$base_element$addr >> 2] = $base_element;
 HEAP32[$num_elements$addr >> 2] = $num_elements;
 HEAP32[$num_instances$addr >> 2] = $num_instances;
 HEAP32[$i_type >> 2] = HEAP32[541351];
 HEAP32[$p_type >> 2] = HEAP32[541350];
 if (HEAP32[$i_type >> 2] | 0) {
  HEAP32[$i_size >> 2] = (HEAP32[$i_type >> 2] | 0) == 5123 ? 2 : 4;
  HEAP32[$ib_offset >> 2] = HEAP32[541349];
  $mul = Math_imul(HEAP32[$base_element$addr >> 2] | 0, HEAP32[$i_size >> 2] | 0) | 0;
  HEAP32[$indices >> 2] = $mul + (HEAP32[$ib_offset >> 2] | 0);
  if ((HEAP32[$num_instances$addr >> 2] | 0) == 1) {
   _glDrawElements(HEAP32[$p_type >> 2] | 0, HEAP32[$num_elements$addr >> 2] | 0, HEAP32[$i_type >> 2] | 0, HEAP32[$indices >> 2] | 0);
   STACKTOP = sp;
   return;
  }
  if (!(HEAP8[2164376] & 1)) {
   STACKTOP = sp;
   return;
  }
  _glDrawElementsInstancedANGLE(HEAP32[$p_type >> 2] | 0, HEAP32[$num_elements$addr >> 2] | 0, HEAP32[$i_type >> 2] | 0, HEAP32[$indices >> 2] | 0, HEAP32[$num_instances$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  if ((HEAP32[$num_instances$addr >> 2] | 0) == 1) {
   _glDrawArrays(HEAP32[$p_type >> 2] | 0, HEAP32[$base_element$addr >> 2] | 0, HEAP32[$num_elements$addr >> 2] | 0);
   STACKTOP = sp;
   return;
  }
  if (!(HEAP8[2164376] & 1)) {
   STACKTOP = sp;
   return;
  }
  _glDrawArraysInstancedANGLE(HEAP32[$p_type >> 2] | 0, HEAP32[$base_element$addr >> 2] | 0, HEAP32[$num_elements$addr >> 2] | 0, HEAP32[$num_instances$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $Child = 0, $CurrentPackIndex = 0, $CurrentPackMax = 0, $I$0 = 0, $SavePackIdx = 0, $SavePackMax = 0, $agg$tmp = 0, $agg$tmp16 = 0, $agg$tmp16$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $agg$tmp16$byval_copy = sp + 48 | 0;
 $SavePackIdx = sp + 32 | 0;
 $SavePackMax = sp + 8 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp16 = sp;
 $CurrentPackIndex = $S + 12 | 0;
 __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($SavePackIdx, $CurrentPackIndex);
 $CurrentPackMax = $S + 16 | 0;
 __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($SavePackMax, $CurrentPackMax);
 $call = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
 $Child = $this + 8 | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$Child >> 2] | 0, $S);
 $1 = HEAP32[$CurrentPackMax >> 2] | 0;
 L1 : do switch ($1 | 0) {
 case -1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 51689);
   HEAP32[$agg$tmp16$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp16$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp16$byval_copy);
   break;
  }
 case 0:
  {
   __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S, $call);
   break;
  }
 default:
  {
   $I$0 = 1;
   while (1) {
    if ($I$0 >>> 0 >= $1 >>> 0) break L1;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp16, 52343);
    HEAP32[$agg$tmp16$byval_copy >> 2] = HEAP32[$agg$tmp16 >> 2];
    HEAP32[$agg$tmp16$byval_copy + 4 >> 2] = HEAP32[$agg$tmp16 + 4 >> 2];
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp16$byval_copy);
    HEAP32[$CurrentPackIndex >> 2] = $I$0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$Child >> 2] | 0, $S);
    $I$0 = $I$0 + 1 | 0;
   }
  }
 } while (0);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackMax);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackIdx);
 STACKTOP = sp;
 return;
}

function _stbi__resample_row_hv_2($out, $in_near, $in_far, $w, $hs) {
 $out = $out | 0;
 $in_near = $in_near | 0;
 $in_far = $in_far | 0;
 $w = $w | 0;
 $hs = $hs | 0;
 var $12 = 0, $31 = 0, $add = 0, $conv4 = 0, $i = 0, $in_far$addr = 0, $in_near$addr = 0, $out$addr = 0, $retval = 0, $t0 = 0, $t1 = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 32 | 0;
 $out$addr = sp + 28 | 0;
 $in_near$addr = sp + 24 | 0;
 $in_far$addr = sp + 20 | 0;
 $w$addr = sp + 16 | 0;
 $i = sp + 8 | 0;
 $t0 = sp + 4 | 0;
 $t1 = sp;
 HEAP32[$out$addr >> 2] = $out;
 HEAP32[$in_near$addr >> 2] = $in_near;
 HEAP32[$in_far$addr >> 2] = $in_far;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[sp + 12 >> 2] = $hs;
 $add = ((HEAPU8[HEAP32[$in_near$addr >> 2] >> 0] | 0) * 3 | 0) + (HEAPU8[HEAP32[$in_far$addr >> 2] >> 0] | 0) | 0;
 if ((HEAP32[$w$addr >> 2] | 0) == 1) {
  $conv4 = $add + 2 >> 2 & 255;
  HEAP8[(HEAP32[$out$addr >> 2] | 0) + 1 >> 0] = $conv4;
  HEAP8[HEAP32[$out$addr >> 2] >> 0] = $conv4;
  HEAP32[$retval >> 2] = HEAP32[$out$addr >> 2];
  $31 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 HEAP32[$t1 >> 2] = $add;
 HEAP8[HEAP32[$out$addr >> 2] >> 0] = (HEAP32[$t1 >> 2] | 0) + 2 >> 2;
 HEAP32[$i >> 2] = 1;
 while (1) {
  $12 = HEAP32[$t1 >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$w$addr >> 2] | 0)) break;
  HEAP32[$t0 >> 2] = $12;
  HEAP32[$t1 >> 2] = ((HEAPU8[(HEAP32[$in_near$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) * 3 | 0) + (HEAPU8[(HEAP32[$in_far$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0);
  HEAP8[(HEAP32[$out$addr >> 2] | 0) + ((HEAP32[$i >> 2] << 1) - 1) >> 0] = ((HEAP32[$t0 >> 2] | 0) * 3 | 0) + (HEAP32[$t1 >> 2] | 0) + 8 >> 4;
  HEAP8[(HEAP32[$out$addr >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 0] = ((HEAP32[$t1 >> 2] | 0) * 3 | 0) + (HEAP32[$t0 >> 2] | 0) + 8 >> 4;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP8[(HEAP32[$out$addr >> 2] | 0) + ((HEAP32[$w$addr >> 2] << 1) - 1) >> 0] = $12 + 2 >> 2;
 HEAP32[$retval >> 2] = HEAP32[$out$addr >> 2];
 $31 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $31 | 0;
}

function _stbi__jpeg_decode_block_prog_dc($j, $data, $hdc, $b) {
 $j = $j | 0;
 $data = $data | 0;
 $hdc = $hdc | 0;
 $b = $b | 0;
 var $27 = 0, $29 = 0, $b$addr = 0, $cond = 0, $data$addr = 0, $dc = 0, $diff = 0, $hdc$addr = 0, $j$addr = 0, $retval = 0, $t = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $j$addr = sp + 24 | 0;
 $data$addr = sp + 20 | 0;
 $hdc$addr = sp + 16 | 0;
 $b$addr = sp + 12 | 0;
 $diff = sp + 8 | 0;
 $dc = sp + 4 | 0;
 $t = sp;
 HEAP32[$j$addr >> 2] = $j;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$hdc$addr >> 2] = $hdc;
 HEAP32[$b$addr >> 2] = $b;
 if (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18388 >> 2] | 0) {
  HEAP32[$retval >> 2] = _stbi__err(49288) | 0;
  $29 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $29 | 0;
 }
 if ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0) < 16) _stbi__grow_buffer_unsafe(HEAP32[$j$addr >> 2] | 0);
 if (!(HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18392 >> 2] | 0)) {
  dest = HEAP32[$data$addr >> 2] | 0;
  stop = dest + 128 | 0;
  do {
   HEAP16[dest >> 1] = 0;
   dest = dest + 2 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$t >> 2] = _stbi__jpeg_huff_decode(HEAP32[$j$addr >> 2] | 0, HEAP32[$hdc$addr >> 2] | 0) | 0;
  if (HEAP32[$t >> 2] | 0) $cond = _stbi__extend_receive(HEAP32[$j$addr >> 2] | 0, HEAP32[$t >> 2] | 0) | 0; else $cond = 0;
  HEAP32[$diff >> 2] = $cond;
  HEAP32[$dc >> 2] = (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18076 + ((HEAP32[$b$addr >> 2] | 0) * 72 | 0) + 24 >> 2] | 0) + (HEAP32[$diff >> 2] | 0);
  HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18076 + ((HEAP32[$b$addr >> 2] | 0) * 72 | 0) + 24 >> 2] = HEAP32[$dc >> 2];
  HEAP16[HEAP32[$data$addr >> 2] >> 1] = HEAP32[$dc >> 2] << HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18396 >> 2];
 } else if (_stbi__jpeg_get_bit(HEAP32[$j$addr >> 2] | 0) | 0) {
  $27 = HEAP32[$data$addr >> 2] | 0;
  HEAP16[$27 >> 1] = (HEAP16[$27 >> 1] | 0) + ((1 << HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18396 >> 2] & 65535) << 16 >> 16);
 }
 HEAP32[$retval >> 2] = 1;
 $29 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $29 | 0;
}

function __sg_image_common_init($cmn, $desc) {
 $cmn = $cmn | 0;
 $desc = $desc | 0;
 var $cmn$addr = 0, $desc$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cmn$addr = sp + 4 | 0;
 $desc$addr = sp;
 HEAP32[$cmn$addr >> 2] = $cmn;
 HEAP32[$desc$addr >> 2] = $desc;
 HEAP32[HEAP32[$cmn$addr >> 2] >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2];
 HEAP8[(HEAP32[$cmn$addr >> 2] | 0) + 4 >> 0] = HEAP8[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 0] & 1;
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 20 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 20 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 24 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 28 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 28 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 32 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 32 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 36 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 36 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 40 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 40 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 44 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 44 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 48 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 48 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 52 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 52 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 56 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 56 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 60 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 60 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 64 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 64 >> 2] = 0;
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 68 >> 2] = (HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 24 >> 2] | 0) == 1 ? 1 : 2;
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 72 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZN6DrMesh23initializeExtrudedImageEP7DrImagei($this, $image, $quality) {
 $this = $this | 0;
 $image = $image | 0;
 $quality = $quality | 0;
 var $0 = 0, $1 = 0, $3 = 0, $5 = 0, $9 = 0, $__begin$sroa$0$0 = 0, $__begin_$i30 = 0, $__end_$i = 0, $add = 0, $arrayidx$i = 0, $arrayidx$i31 = 0, $call9 = 0, $cond = 0.0, $m_outline_processed = 0, $m_poly_list = 0, $or$cond = 0, $poly_number$0 = 0, $wireframe = 0;
 $0 = HEAP32[(__ZNK7DrImage9getBitmapEv($image) | 0) + 8 >> 2] | 0;
 $1 = HEAP32[(__ZNK7DrImage9getBitmapEv($image) | 0) + 12 >> 2] | 0;
 $m_poly_list = $image + 40 | 0;
 $__end_$i = $image + 44 | 0;
 $or$cond = ($0 | 0) < 1 | ($1 | 0) < 1;
 $__begin_$i30 = $image + 52 | 0;
 $m_outline_processed = $image + 65 | 0;
 $wireframe = $this + 24 | 0;
 $add = (($quality | 0) / 3 | 0) + 1 | 0;
 $poly_number$0 = 0;
 while (1) {
  $3 = HEAP32[$m_poly_list >> 2] | 0;
  if (($poly_number$0 | 0) >= (((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 12 | 0 | 0)) break;
  L4 : do if (!$or$cond) {
   $arrayidx$i = $3 + ($poly_number$0 * 12 | 0) | 0;
   $5 = HEAP32[$__begin_$i30 >> 2] | 0;
   $arrayidx$i31 = $5 + ($poly_number$0 * 12 | 0) | 0;
   $cond = (HEAP8[$m_outline_processed >> 0] | 0) == 0 ? 0.0 : .875;
   $call9 = __ZNK7DrImage9getBitmapEv($image) | 0;
   __ZN6DrMesh15triangulateFaceERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEERKNS1_IS5_NS3_IS5_EEEERK8DrBitmapb14Trianglulationd($this, $arrayidx$i, $arrayidx$i31, $call9, (HEAP8[$wireframe >> 0] | 0) != 0, 1, $cond);
   __ZN6DrMesh18extrudeFacePolygonERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEiiib($this, $arrayidx$i, $0, $1, $add, 0);
   $9 = HEAP32[$5 + ($poly_number$0 * 12 | 0) + 4 >> 2] | 0;
   $__begin$sroa$0$0 = HEAP32[$arrayidx$i31 >> 2] | 0;
   while (1) {
    if (($__begin$sroa$0$0 | 0) == ($9 | 0)) break L4;
    __ZN6DrMesh18extrudeFacePolygonERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEiiib($this, $__begin$sroa$0$0, $0, $1, $add, 0);
    $__begin$sroa$0$0 = $__begin$sroa$0$0 + 12 | 0;
   }
  } while (0);
  $poly_number$0 = $poly_number$0 + 1 | 0;
 }
 __ZN6DrMesh12optimizeMeshEv($this);
 return;
}

function __sg_row_pitch($fmt, $width, $row_align) {
 $fmt = $fmt | 0;
 $width = $width | 0;
 $row_align = $row_align | 0;
 var $fmt$addr = 0, $pitch = 0, $row_align$addr = 0, $width$addr = 0, $width_blocks = 0, $width_blocks21 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $fmt$addr = sp + 36 | 0;
 $width$addr = sp + 32 | 0;
 $row_align$addr = sp + 28 | 0;
 $pitch = sp + 24 | 0;
 $width_blocks = sp + 12 | 0;
 $width_blocks21 = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$row_align$addr >> 2] = $row_align;
 switch (HEAP32[$fmt$addr >> 2] | 0) {
 case 58:
 case 57:
 case 47:
 case 46:
 case 43:
  {
   HEAP32[$pitch >> 2] = (((HEAP32[$width$addr >> 2] | 0) + 3 | 0) / 4 | 0) << 3;
   HEAP32[$pitch >> 2] = (HEAP32[$pitch >> 2] | 0) < 8 ? 8 : HEAP32[$pitch >> 2] | 0;
   break;
  }
 case 61:
 case 60:
 case 59:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
 case 45:
 case 44:
  {
   HEAP32[$pitch >> 2] = (((HEAP32[$width$addr >> 2] | 0) + 3 | 0) / 4 | 0) << 4;
   HEAP32[$pitch >> 2] = (HEAP32[$pitch >> 2] | 0) < 16 ? 16 : HEAP32[$pitch >> 2] | 0;
   break;
  }
 case 56:
 case 54:
  {
   HEAP32[sp + 20 >> 2] = 16;
   HEAP32[sp + 16 >> 2] = 4;
   HEAP32[$width_blocks >> 2] = (HEAP32[$width$addr >> 2] | 0) / 4 | 0;
   HEAP32[$width_blocks >> 2] = (HEAP32[$width_blocks >> 2] | 0) < 2 ? 2 : HEAP32[$width_blocks >> 2] | 0;
   HEAP32[$pitch >> 2] = HEAP32[$width_blocks >> 2] << 3;
   break;
  }
 case 55:
 case 53:
  {
   HEAP32[sp + 8 >> 2] = 32;
   HEAP32[sp + 4 >> 2] = 2;
   HEAP32[$width_blocks21 >> 2] = (HEAP32[$width$addr >> 2] | 0) / 4 | 0;
   HEAP32[$width_blocks21 >> 2] = (HEAP32[$width_blocks21 >> 2] | 0) < 2 ? 2 : HEAP32[$width_blocks21 >> 2] | 0;
   HEAP32[$pitch >> 2] = HEAP32[$width_blocks21 >> 2] << 3;
   break;
  }
 default:
  HEAP32[$pitch >> 2] = Math_imul(HEAP32[$width$addr >> 2] | 0, __sg_pixelformat_bytesize(HEAP32[$fmt$addr >> 2] | 0) | 0) | 0;
 }
 HEAP32[$pitch >> 2] = __sg_roundup(HEAP32[$pitch >> 2] | 0, HEAP32[$row_align$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$pitch >> 2] | 0;
}

function __ZN13TPPLPartition10IntersectsER9TPPLPointS1_S1_S1_($this, $p11, $p12, $p21, $p22) {
 $this = $this | 0;
 $p11 = $p11 | 0;
 $p12 = $p12 | 0;
 $p21 = $p21 | 0;
 $p22 = $p22 | 0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $4 = 0.0, $7 = 0.0, $add67 = 0.0, $ref$tmp = 0, $retval$1 = 0, $sub = 0.0, $sub37 = 0.0, $sub41 = 0.0, $sub45 = 0.0, $v$sroa$0$0$copyload = 0.0, $v$sroa$0$0$copyload9 = 0.0, $v$sroa$10$0$copyload = 0.0, $v$sroa$10$0$copyload17 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $ref$tmp = sp;
 $0 = +HEAPF64[$p11 >> 3];
 $1 = +HEAPF64[$p21 >> 3];
 if ($0 == $1) if (+HEAPF64[$p11 + 8 >> 3] == +HEAPF64[$p21 + 8 >> 3]) $retval$1 = 0; else label = 3; else label = 3;
 do if ((label | 0) == 3) {
  $4 = +HEAPF64[$p22 >> 3];
  if ($0 == $4) if (+HEAPF64[$p11 + 8 >> 3] == +HEAPF64[$p22 + 8 >> 3]) {
   $retval$1 = 0;
   break;
  }
  $7 = +HEAPF64[$p12 >> 3];
  if ($7 == $1) if (+HEAPF64[$p12 + 8 >> 3] == +HEAPF64[$p21 + 8 >> 3]) {
   $retval$1 = 0;
   break;
  }
  $10 = +HEAPF64[$p12 + 8 >> 3];
  $11 = +HEAPF64[$p22 + 8 >> 3];
  if ($7 == $4 & $10 == $11) $retval$1 = 0; else {
   $sub = $10 - +HEAPF64[$p11 + 8 >> 3];
   $sub37 = $0 - $7;
   $sub41 = $11 - +HEAPF64[$p21 + 8 >> 3];
   $sub45 = $1 - $4;
   __ZNK9TPPLPointmiERKS_($ref$tmp, $p21, $p11);
   $v$sroa$0$0$copyload = +HEAPF64[$ref$tmp >> 3];
   $v$sroa$10$0$copyload = +HEAPF64[$ref$tmp + 8 >> 3];
   __ZNK9TPPLPointmiERKS_($ref$tmp, $p22, $p11);
   $v$sroa$0$0$copyload9 = +HEAPF64[$ref$tmp >> 3];
   $v$sroa$10$0$copyload17 = +HEAPF64[$ref$tmp + 8 >> 3];
   __ZNK9TPPLPointmiERKS_($ref$tmp, $p11, $p21);
   $add67 = $sub41 * +HEAPF64[$ref$tmp >> 3] + $sub45 * +HEAPF64[$ref$tmp + 8 >> 3];
   __ZNK9TPPLPointmiERKS_($ref$tmp, $p12, $p21);
   if ($add67 * ($sub41 * +HEAPF64[$ref$tmp >> 3] + $sub45 * +HEAPF64[$ref$tmp + 8 >> 3]) > 0.0) $retval$1 = 0; else $retval$1 = !(($sub * $v$sroa$0$0$copyload + $sub37 * $v$sroa$10$0$copyload) * ($sub * $v$sroa$0$0$copyload9 + $sub37 * $v$sroa$10$0$copyload17) > 0.0) & 1;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN7meshoptL23calculateSortOrderRadixEPjPKfPtm($sort_order, $sort_data, $sort_keys, $cluster_count) {
 $sort_order = $sort_order | 0;
 $sort_data = $sort_data | 0;
 $sort_keys = $sort_keys | 0;
 $cluster_count = $cluster_count | 0;
 var $1 = 0.0, $5 = 0, $7 = 0, $arrayidx18 = 0, $arrayidx28 = 0, $arrayidx41 = 0, $histogram = 0, $histogram_sum$0 = 0, $i$0 = 0, $i12$0 = 0, $i2$0 = 0, $i23$0 = 0, $i34$0 = 0, $sort_data_max$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8192 | 0;
 $histogram = sp;
 $i$0 = 0;
 $sort_data_max$0 = 1.0000000474974513e-03;
 while (1) {
  if (($i$0 | 0) == ($cluster_count | 0)) break;
  $1 = +Math_abs(+(+HEAPF32[$sort_data + ($i$0 << 2) >> 2]));
  $i$0 = $i$0 + 1 | 0;
  $sort_data_max$0 = $sort_data_max$0 < $1 ? $1 : $sort_data_max$0;
 }
 $i2$0 = 0;
 while (1) {
  if (($i2$0 | 0) == ($cluster_count | 0)) break;
  HEAP16[$sort_keys + ($i2$0 << 1) >> 1] = (__Z21meshopt_quantizeUnormfi(.5 - +HEAPF32[$sort_data + ($i2$0 << 2) >> 2] / $sort_data_max$0 * .5, 11) | 0) & 2047;
  $i2$0 = $i2$0 + 1 | 0;
 }
 _memset($histogram | 0, 0, 8192) | 0;
 $i12$0 = 0;
 while (1) {
  if (($i12$0 | 0) == ($cluster_count | 0)) break;
  $arrayidx18 = $histogram + ((HEAPU16[$sort_keys + ($i12$0 << 1) >> 1] | 0) << 2) | 0;
  HEAP32[$arrayidx18 >> 2] = (HEAP32[$arrayidx18 >> 2] | 0) + 1;
  $i12$0 = $i12$0 + 1 | 0;
 }
 $histogram_sum$0 = 0;
 $i23$0 = 0;
 while (1) {
  if (($i23$0 | 0) == 2048) break;
  $arrayidx28 = $histogram + ($i23$0 << 2) | 0;
  $5 = HEAP32[$arrayidx28 >> 2] | 0;
  HEAP32[$arrayidx28 >> 2] = $histogram_sum$0;
  $histogram_sum$0 = $5 + $histogram_sum$0 | 0;
  $i23$0 = $i23$0 + 1 | 0;
 }
 if (($histogram_sum$0 | 0) != ($cluster_count | 0)) ___assert_fail(46360, 46089, 126, 46391);
 $i34$0 = 0;
 while (1) {
  if (($i34$0 | 0) == ($cluster_count | 0)) break;
  $arrayidx41 = $histogram + ((HEAPU16[$sort_keys + ($i34$0 << 1) >> 1] | 0) << 2) | 0;
  $7 = HEAP32[$arrayidx41 >> 2] | 0;
  HEAP32[$arrayidx41 >> 2] = $7 + 1;
  HEAP32[$sort_order + ($7 << 2) >> 2] = $i34$0;
  $i34$0 = $i34$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _fons__blurCols($dst, $w, $h, $dstStride, $alpha) {
 $dst = $dst | 0;
 $w = $w | 0;
 $h = $h | 0;
 $dstStride = $dstStride | 0;
 $alpha = $alpha | 0;
 var $alpha$addr = 0, $dst$addr = 0, $dstStride$addr = 0, $h$addr = 0, $shr = 0, $shr19 = 0, $w$addr = 0, $x = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $dst$addr = sp + 28 | 0;
 $w$addr = sp + 24 | 0;
 $h$addr = sp + 20 | 0;
 $dstStride$addr = sp + 16 | 0;
 $alpha$addr = sp + 12 | 0;
 $x = sp + 8 | 0;
 $y = sp + 4 | 0;
 $z = sp;
 HEAP32[$dst$addr >> 2] = $dst;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$dstStride$addr >> 2] = $dstStride;
 HEAP32[$alpha$addr >> 2] = $alpha;
 HEAP32[$y >> 2] = 0;
 while (1) {
  if ((HEAP32[$y >> 2] | 0) >= (HEAP32[$h$addr >> 2] | 0)) break;
  HEAP32[$z >> 2] = 0;
  HEAP32[$x >> 2] = 1;
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$w$addr >> 2] | 0)) break;
   $shr = (Math_imul(HEAP32[$alpha$addr >> 2] | 0, ((HEAPU8[(HEAP32[$dst$addr >> 2] | 0) + (HEAP32[$x >> 2] | 0) >> 0] | 0) << 7) - (HEAP32[$z >> 2] | 0) | 0) | 0) >> 16;
   HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) + $shr;
   HEAP8[(HEAP32[$dst$addr >> 2] | 0) + (HEAP32[$x >> 2] | 0) >> 0] = HEAP32[$z >> 2] >> 7;
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
  HEAP8[(HEAP32[$dst$addr >> 2] | 0) + ((HEAP32[$w$addr >> 2] | 0) - 1) >> 0] = 0;
  HEAP32[$z >> 2] = 0;
  HEAP32[$x >> 2] = (HEAP32[$w$addr >> 2] | 0) - 2;
  while (1) {
   if ((HEAP32[$x >> 2] | 0) < 0) break;
   $shr19 = (Math_imul(HEAP32[$alpha$addr >> 2] | 0, ((HEAPU8[(HEAP32[$dst$addr >> 2] | 0) + (HEAP32[$x >> 2] | 0) >> 0] | 0) << 7) - (HEAP32[$z >> 2] | 0) | 0) | 0) >> 16;
   HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) + $shr19;
   HEAP8[(HEAP32[$dst$addr >> 2] | 0) + (HEAP32[$x >> 2] | 0) >> 0] = HEAP32[$z >> 2] >> 7;
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + -1;
  }
  HEAP8[HEAP32[$dst$addr >> 2] >> 0] = 0;
  HEAP32[$dst$addr >> 2] = (HEAP32[$dst$addr >> 2] | 0) + (HEAP32[$dstStride$addr >> 2] | 0);
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_($this, $Other) {
 $this = $this | 0;
 $Other = $Other | 0;
 var $10 = 0, $2 = 0, $6 = 0, $8 = 0, $Cap23 = 0, $Cap24 = 0, $Last21 = 0, $Last22 = 0, $call = 0, $call2 = 0, $call4 = 0, $sub$ptr$sub$i$i = 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($Other) | 0;
 $call2 = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) | 0;
 do if ($call) {
  if (!$call2) {
   _free(HEAP32[$this >> 2] | 0);
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($this);
  }
  $call4 = __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($Other) | 0;
  $sub$ptr$sub$i$i = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($Other) | 0) - $call4 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove(HEAP32[$this >> 2] | 0, $call4 | 0, $sub$ptr$sub$i$i | 0) | 0;
  $2 = HEAP32[$this >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $2 + ((__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($Other) | 0) << 2);
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
 } else if ($call2) {
  HEAP32[$this >> 2] = HEAP32[$Other >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$Other + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$Other + 8 >> 2];
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($Other);
  break;
 } else {
  $6 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = HEAP32[$Other >> 2];
  HEAP32[$Other >> 2] = $6;
  $Last21 = $this + 4 | 0;
  $Last22 = $Other + 4 | 0;
  $8 = HEAP32[$Last21 >> 2] | 0;
  HEAP32[$Last21 >> 2] = HEAP32[$Last22 >> 2];
  HEAP32[$Last22 >> 2] = $8;
  $Cap23 = $this + 8 | 0;
  $Cap24 = $Other + 8 | 0;
  $10 = HEAP32[$Cap23 >> 2] | 0;
  HEAP32[$Cap23 >> 2] = HEAP32[$Cap24 >> 2];
  HEAP32[$Cap24 >> 2] = $10;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
  break;
 } while (0);
 return;
}

function __sfetch_pool_item_alloc($pool, $request) {
 $pool = $pool | 0;
 $request = $request | 0;
 var $14 = 0, $28 = 0, $6 = 0, $arrayidx9 = 0, $dec = 0, $free_top2 = 0, $inc = 0, $pool$addr = 0, $request$addr = 0, $retval = 0, $slot_id = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $pool$addr = sp + 12 | 0;
 $request$addr = sp + 8 | 0;
 $slot_index = sp + 4 | 0;
 $slot_id = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$request$addr >> 2] = $request;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(41933, 25510, 1407, 42962);
 if (!(HEAP8[(HEAP32[$pool$addr >> 2] | 0) + 20 >> 0] & 1)) ___assert_fail(41933, 25510, 1407, 42962);
 if ((HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 0) {
  HEAP32[$retval >> 2] = __sfetch_make_id(0, 0) | 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 $6 = HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0;
 $free_top2 = (HEAP32[$pool$addr >> 2] | 0) + 4 | 0;
 $dec = (HEAP32[$free_top2 >> 2] | 0) + -1 | 0;
 HEAP32[$free_top2 >> 2] = $dec;
 HEAP32[$slot_index >> 2] = HEAP32[$6 + ($dec << 2) >> 2];
 if ((HEAP32[$slot_index >> 2] | 0) >>> 0 <= 0) ___assert_fail(30109, 25510, 1410, 42962);
 if ((HEAP32[$slot_index >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) >>> 0) ___assert_fail(30109, 25510, 1410, 42962);
 $14 = HEAP32[$slot_index >> 2] | 0;
 $arrayidx9 = (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$slot_index >> 2] << 2) | 0;
 $inc = (HEAP32[$arrayidx9 >> 2] | 0) + 1 | 0;
 HEAP32[$arrayidx9 >> 2] = $inc;
 HEAP32[$slot_id >> 2] = __sfetch_make_id($14, $inc) | 0;
 __sfetch_item_init((HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 1232 | 0) | 0, HEAP32[$slot_id >> 2] | 0, HEAP32[$request$addr >> 2] | 0);
 HEAP32[(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 1232 | 0) + 4 >> 2] = 1;
 HEAP32[$retval >> 2] = HEAP32[$slot_id >> 2];
 $28 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function __sfons_render_draw($user_ptr, $verts, $tcoords, $colors, $nverts) {
 $user_ptr = $user_ptr | 0;
 $verts = $verts | 0;
 $tcoords = $tcoords | 0;
 $colors = $colors | 0;
 $nverts = $nverts | 0;
 var $colors$addr = 0, $i = 0, $nverts$addr = 0, $pip$byval_copy = 0, $sfons = 0, $tcoords$addr = 0, $user_ptr$addr = 0, $verts$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $pip$byval_copy = sp + 28 | 0;
 $user_ptr$addr = sp + 24 | 0;
 $verts$addr = sp + 20 | 0;
 $tcoords$addr = sp + 16 | 0;
 $colors$addr = sp + 12 | 0;
 $nverts$addr = sp + 8 | 0;
 $sfons = sp + 4 | 0;
 $i = sp;
 HEAP32[$user_ptr$addr >> 2] = $user_ptr;
 HEAP32[$verts$addr >> 2] = $verts;
 HEAP32[$tcoords$addr >> 2] = $tcoords;
 HEAP32[$colors$addr >> 2] = $colors;
 HEAP32[$nverts$addr >> 2] = $nverts;
 if (!((HEAP32[$user_ptr$addr >> 2] | 0) != 0 & (HEAP32[$verts$addr >> 2] | 0) != 0 & (HEAP32[$tcoords$addr >> 2] | 0) != 0 & (HEAP32[$colors$addr >> 2] | 0) != 0 & (HEAP32[$nverts$addr >> 2] | 0) > 0)) ___assert_fail(45174, 28414, 1700, 45229);
 HEAP32[$sfons >> 2] = HEAP32[$user_ptr$addr >> 2];
 _sgl_enable_texture();
 HEAP32[$pip$byval_copy >> 2] = HEAP32[(HEAP32[$sfons >> 2] | 0) + 8 >> 2];
 _sgl_texture($pip$byval_copy);
 _sgl_push_pipeline();
 HEAP32[$pip$byval_copy >> 2] = HEAP32[(HEAP32[$sfons >> 2] | 0) + 4 >> 2];
 _sgl_load_pipeline($pip$byval_copy);
 _sgl_begin_triangles();
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$nverts$addr >> 2] | 0)) break;
  _sgl_v2f_t2f_c1i(+HEAPF32[(HEAP32[$verts$addr >> 2] | 0) + ((HEAP32[$i >> 2] << 1) + 0 << 2) >> 2], +HEAPF32[(HEAP32[$verts$addr >> 2] | 0) + ((HEAP32[$i >> 2] << 1) + 1 << 2) >> 2], +HEAPF32[(HEAP32[$tcoords$addr >> 2] | 0) + ((HEAP32[$i >> 2] << 1) + 0 << 2) >> 2], +HEAPF32[(HEAP32[$tcoords$addr >> 2] | 0) + ((HEAP32[$i >> 2] << 1) + 1 << 2) >> 2], HEAP32[(HEAP32[$colors$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _sgl_end();
 _sgl_pop_pipeline();
 _sgl_disable_texture();
 STACKTOP = sp;
 return;
}

function _stbtt__hheap_alloc($hh, $size, $userdata) {
 $hh = $hh | 0;
 $size = $size | 0;
 $userdata = $userdata | 0;
 var $2 = 0, $29 = 0, $add = 0, $c = 0, $cond6 = 0, $count = 0, $hh$addr = 0, $num_remaining_in_head_chunk12 = 0, $p = 0, $retval = 0, $size$addr = 0, $userdata$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 24 | 0;
 $hh$addr = sp + 20 | 0;
 $size$addr = sp + 16 | 0;
 $userdata$addr = sp + 12 | 0;
 $p = sp + 8 | 0;
 $count = sp + 4 | 0;
 $c = sp;
 HEAP32[$hh$addr >> 2] = $hh;
 HEAP32[$size$addr >> 2] = $size;
 HEAP32[$userdata$addr >> 2] = $userdata;
 $2 = HEAP32[$hh$addr >> 2] | 0;
 if (HEAP32[(HEAP32[$hh$addr >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$p >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[(HEAP32[$hh$addr >> 2] | 0) + 4 >> 2] = HEAP32[HEAP32[$p >> 2] >> 2];
  HEAP32[$retval >> 2] = HEAP32[$p >> 2];
  $29 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $29 | 0;
 }
 do if (!(HEAP32[$2 + 8 >> 2] | 0)) {
  if ((HEAP32[$size$addr >> 2] | 0) >>> 0 < 32) $cond6 = 2e3; else $cond6 = (HEAP32[$size$addr >> 2] | 0) >>> 0 < 128 ? 800 : 100;
  HEAP32[$count >> 2] = $cond6;
  $add = 4 + (Math_imul(HEAP32[$size$addr >> 2] | 0, HEAP32[$count >> 2] | 0) | 0) | 0;
  HEAP32[$c >> 2] = _fons__tmpalloc($add, HEAP32[$userdata$addr >> 2] | 0) | 0;
  if (HEAP32[$c >> 2] | 0) {
   HEAP32[HEAP32[$c >> 2] >> 2] = HEAP32[HEAP32[$hh$addr >> 2] >> 2];
   HEAP32[HEAP32[$hh$addr >> 2] >> 2] = HEAP32[$c >> 2];
   HEAP32[(HEAP32[$hh$addr >> 2] | 0) + 8 >> 2] = HEAP32[$count >> 2];
   break;
  }
  HEAP32[$retval >> 2] = 0;
  $29 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $29 | 0;
 } while (0);
 $num_remaining_in_head_chunk12 = (HEAP32[$hh$addr >> 2] | 0) + 8 | 0;
 HEAP32[$num_remaining_in_head_chunk12 >> 2] = (HEAP32[$num_remaining_in_head_chunk12 >> 2] | 0) + -1;
 HEAP32[$retval >> 2] = (HEAP32[HEAP32[$hh$addr >> 2] >> 2] | 0) + (Math_imul(HEAP32[$size$addr >> 2] | 0, HEAP32[(HEAP32[$hh$addr >> 2] | 0) + 8 >> 2] | 0) | 0);
 $29 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $29 | 0;
}

function __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $11 = 0, $2 = 0, $7 = 0, $9 = 0, $__begin_2 = 0, $__end1$addr$0$i = 0, $__end_ = 0, $__end_$i$i$i$i$i = 0, $__end_$i$i$i$i$i$i = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $__value_$i$i$i8$i$i$i$i$i = 0, $__value_$i$i$i9$i$i$i$i$i = 0, $add$ptr$i = 0, $incdec$ptr$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $__end1$addr$0$i = HEAP32[$__end_ >> 2] | 0;
 while (1) {
  if (($__end1$addr$0$i | 0) == ($0 | 0)) break;
  $2 = HEAP32[$__begin_2 >> 2] | 0;
  $add$ptr$i = $2 + -12 | 0;
  $incdec$ptr$i = $__end1$addr$0$i + -12 | 0;
  HEAP32[$add$ptr$i >> 2] = 0;
  $__end_$i$i$i$i$i$i = $2 + -8 | 0;
  HEAP32[$__end_$i$i$i$i$i$i >> 2] = 0;
  $__value_$i$i$i9$i$i$i$i$i = $2 + -4 | 0;
  HEAP32[$__value_$i$i$i9$i$i$i$i$i >> 2] = 0;
  HEAP32[$add$ptr$i >> 2] = HEAP32[$incdec$ptr$i >> 2];
  $__end_$i$i$i$i$i = $__end1$addr$0$i + -8 | 0;
  HEAP32[$__end_$i$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i$i$i >> 2];
  $__value_$i$i$i8$i$i$i$i$i = $__end1$addr$0$i + -4 | 0;
  HEAP32[$__value_$i$i$i9$i$i$i$i$i >> 2] = HEAP32[$__value_$i$i$i8$i$i$i$i$i >> 2];
  HEAP32[$__value_$i$i$i8$i$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i$i$i >> 2] = 0;
  HEAP32[$incdec$ptr$i >> 2] = 0;
  HEAP32[$__begin_2 >> 2] = (HEAP32[$__begin_2 >> 2] | 0) + -12;
  $__end1$addr$0$i = $incdec$ptr$i;
 }
 $7 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$__begin_2 >> 2];
 HEAP32[$__begin_2 >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $9 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $9;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $11 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $11;
 HEAP32[$__v >> 2] = HEAP32[$__begin_2 >> 2];
 return;
}

function __sg_image_desc_defaults($agg$result, $desc) {
 $agg$result = $agg$result | 0;
 $desc = $desc | 0;
 var $cmp24 = 0, $def = 0, $desc$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896 | 0;
 $desc$addr = sp + 884 | 0;
 $def = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 _memcpy($def | 0, HEAP32[$desc$addr >> 2] | 0, 884) | 0;
 HEAP32[$def + 4 >> 2] = (HEAP32[$def + 4 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 4 >> 2] | 0;
 HEAP32[$def + 20 >> 2] = (HEAP32[$def + 20 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 20 >> 2] | 0;
 HEAP32[$def + 24 >> 2] = (HEAP32[$def + 24 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 24 >> 2] | 0;
 HEAP32[$def + 28 >> 2] = (HEAP32[$def + 28 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 28 >> 2] | 0;
 $cmp24 = (HEAP32[$def + 32 >> 2] | 0) == 0;
 if (HEAP8[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 0] & 1) {
  HEAP32[$def + 32 >> 2] = $cmp24 ? HEAP32[541031] | 0 : HEAP32[$def + 32 >> 2] | 0;
  HEAP32[$def + 36 >> 2] = (HEAP32[$def + 36 >> 2] | 0) == 0 ? HEAP32[541033] | 0 : HEAP32[$def + 36 >> 2] | 0;
 } else {
  HEAP32[$def + 32 >> 2] = $cmp24 ? 23 : HEAP32[$def + 32 >> 2] | 0;
  HEAP32[$def + 36 >> 2] = (HEAP32[$def + 36 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 36 >> 2] | 0;
 }
 HEAP32[$def + 40 >> 2] = (HEAP32[$def + 40 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 40 >> 2] | 0;
 HEAP32[$def + 44 >> 2] = (HEAP32[$def + 44 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 44 >> 2] | 0;
 HEAP32[$def + 48 >> 2] = (HEAP32[$def + 48 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 48 >> 2] | 0;
 HEAP32[$def + 52 >> 2] = (HEAP32[$def + 52 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 52 >> 2] | 0;
 HEAP32[$def + 56 >> 2] = (HEAP32[$def + 56 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 56 >> 2] | 0;
 HEAP32[$def + 60 >> 2] = (HEAP32[$def + 60 >> 2] | 0) == 0 ? 2 : HEAP32[$def + 60 >> 2] | 0;
 HEAP32[$def + 64 >> 2] = (HEAP32[$def + 64 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 64 >> 2] | 0;
 HEAPF32[$def + 72 >> 2] = +HEAPF32[$def + 72 >> 2] == 0.0 ? 3402823466385288598117041.0e14 : +HEAPF32[$def + 72 >> 2];
 _memcpy($agg$result | 0, $def | 0, 884) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $11 = 0, $2 = 0, $7 = 0, $9 = 0, $__begin_2 = 0, $__end1$addr$0$i = 0, $__end_ = 0, $__end_$i$i$i$i$i = 0, $__end_$i$i$i$i$i$i = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $__value_$i$i$i8$i$i$i$i$i = 0, $__value_$i$i$i9$i$i$i$i$i = 0, $add$ptr$i = 0, $incdec$ptr$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $__end1$addr$0$i = HEAP32[$__end_ >> 2] | 0;
 while (1) {
  if (($__end1$addr$0$i | 0) == ($0 | 0)) break;
  $2 = HEAP32[$__begin_2 >> 2] | 0;
  $add$ptr$i = $2 + -12 | 0;
  $incdec$ptr$i = $__end1$addr$0$i + -12 | 0;
  HEAP32[$add$ptr$i >> 2] = 0;
  $__end_$i$i$i$i$i$i = $2 + -8 | 0;
  HEAP32[$__end_$i$i$i$i$i$i >> 2] = 0;
  $__value_$i$i$i9$i$i$i$i$i = $2 + -4 | 0;
  HEAP32[$__value_$i$i$i9$i$i$i$i$i >> 2] = 0;
  HEAP32[$add$ptr$i >> 2] = HEAP32[$incdec$ptr$i >> 2];
  $__end_$i$i$i$i$i = $__end1$addr$0$i + -8 | 0;
  HEAP32[$__end_$i$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i$i$i >> 2];
  $__value_$i$i$i8$i$i$i$i$i = $__end1$addr$0$i + -4 | 0;
  HEAP32[$__value_$i$i$i9$i$i$i$i$i >> 2] = HEAP32[$__value_$i$i$i8$i$i$i$i$i >> 2];
  HEAP32[$__value_$i$i$i8$i$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i$i$i >> 2] = 0;
  HEAP32[$incdec$ptr$i >> 2] = 0;
  HEAP32[$__begin_2 >> 2] = (HEAP32[$__begin_2 >> 2] | 0) + -12;
  $__end1$addr$0$i = $incdec$ptr$i;
 }
 $7 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$__begin_2 >> 2];
 HEAP32[$__begin_2 >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $9 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $9;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $11 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $11;
 HEAP32[$__v >> 2] = HEAP32[$__begin_2 >> 2];
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sroa$speculated = 0, $add = 0, $add40 = 0, $add48 = 0, $call$i$i$i = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $ref$tmp49 = 0, $sub28 = 0, $sub29 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp49 = sp;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond40 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond40 = -17;
 $call$i$i$i = __Znwm($cond40) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 if ($__n_add | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy | 0, $__p_new_stuff, $__n_add) | 0;
 $sub28 = $__old_sz - $__n_del | 0;
 $sub29 = $sub28 - $__n_copy | 0;
 if ($sub29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy + $__n_add | 0, $cond$i + $__n_copy + $__n_del | 0, $sub29) | 0;
 $add40 = $__old_cap + 1 | 0;
 if (($add40 | 0) != 11) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add40);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = $cond40 | -2147483648;
 $add48 = $sub28 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $add48;
 HEAP8[$ref$tmp49 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + $add48 | 0, $ref$tmp49);
 STACKTOP = sp;
 return;
}

function __ZL28demangling_terminate_handlerv() {
 var $0 = 0, $1 = 0, $13 = 0, $2 = 0, $8 = 0, $__type_name$i = 0, $buf = 0, $call = 0, $call17 = 0, $call9 = 0, $cond = 0, $len = 0, $name$0 = 0, $status = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072 | 0;
 $vararg_buffer10 = sp + 1056 | 0;
 $vararg_buffer7 = sp + 1048 | 0;
 $vararg_buffer3 = sp + 1040 | 0;
 $vararg_buffer = sp + 1024 | 0;
 $thrown_object = sp + 1068 | 0;
 $status = sp + 1064 | 0;
 $buf = sp;
 $len = sp + 1060 | 0;
 $call = ___cxa_get_globals_fast() | 0;
 if ($call | 0) {
  $0 = HEAP32[$call >> 2] | 0;
  if ($0 | 0) {
   $1 = $0 + 48 | 0;
   if (!(__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($1) | 0)) {
    HEAP32[$vararg_buffer7 >> 2] = 51290;
    _abort_message(51240, $vararg_buffer7);
   }
   $2 = __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($1) | 0;
   if (($2 | 0) == 1126902529 & (getTempRet0() | 0) == 1129074247) $cond = HEAP32[$0 + 44 >> 2] | 0; else $cond = $0 + 80 | 0;
   HEAP32[$thrown_object >> 2] = $cond;
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[$len >> 2] = 1024;
   $__type_name$i = $8 + 4 | 0;
   $call9 = ___cxa_demangle(HEAP32[$__type_name$i >> 2] | 0, $buf, $len, $status) | 0;
   if (!(HEAP32[$status >> 2] | 0)) $name$0 = $call9; else $name$0 = HEAP32[$__type_name$i >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[2834] | 0) + 16 >> 2] & 15](11336, $8, $thrown_object) | 0) {
    $13 = HEAP32[$thrown_object >> 2] | 0;
    $call17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2] & 3]($13) | 0;
    HEAP32[$vararg_buffer >> 2] = 51290;
    HEAP32[$vararg_buffer + 4 >> 2] = $name$0;
    HEAP32[$vararg_buffer + 8 >> 2] = $call17;
    _abort_message(51154, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = 51290;
    HEAP32[$vararg_buffer3 + 4 >> 2] = $name$0;
    _abort_message(51199, $vararg_buffer3);
   }
  }
 }
 _abort_message(51278, $vararg_buffer10);
}

function __ZN10Delaunator12add_triangleEmmmmmm($this, $i0, $i1, $i2, $a, $b, $c) {
 $this = $this | 0;
 $i0 = $i0 | 0;
 $i1 = $i1 | 0;
 $i2 = $i2 | 0;
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $$cast = 0, $0 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $__value_$i$i$i$i = 0, $i0$addr = 0, $i1$addr = 0, $i2$addr = 0, $incdec$ptr$i = 0, $incdec$ptr$i9 = 0, $sub$ptr$div$i = 0, $triangles = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $i0$addr = sp + 8 | 0;
 $i1$addr = sp + 4 | 0;
 $i2$addr = sp;
 HEAP32[$i0$addr >> 2] = $i0;
 HEAP32[$i1$addr >> 2] = $i1;
 HEAP32[$i2$addr >> 2] = $i2;
 $triangles = $this + 4 | 0;
 $__end_$i = $this + 8 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $sub$ptr$div$i = $0 - (HEAP32[$triangles >> 2] | 0) >> 2;
 $$cast = $0;
 $__value_$i$i$i$i = $this + 12 | 0;
 $2 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 if (($2 | 0) == ($$cast | 0)) {
  __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($triangles, $i0$addr);
  $3 = HEAP32[$__end_$i >> 2] | 0;
  $4 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 } else {
  HEAP32[$$cast >> 2] = $i0;
  $incdec$ptr$i = $$cast + 4 | 0;
  HEAP32[$__end_$i >> 2] = $incdec$ptr$i;
  $3 = $incdec$ptr$i;
  $4 = $2;
 }
 if (($3 | 0) == ($4 | 0)) {
  __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($triangles, $i1$addr);
  $6 = HEAP32[$__end_$i >> 2] | 0;
  $7 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 } else {
  HEAP32[$3 >> 2] = HEAP32[$i1$addr >> 2];
  $incdec$ptr$i9 = $3 + 4 | 0;
  HEAP32[$__end_$i >> 2] = $incdec$ptr$i9;
  $6 = $incdec$ptr$i9;
  $7 = $4;
 }
 if (($6 | 0) == ($7 | 0)) __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($triangles, $i2$addr); else {
  HEAP32[$6 >> 2] = HEAP32[$i2$addr >> 2];
  HEAP32[$__end_$i >> 2] = $6 + 4;
 }
 __ZN10Delaunator4linkEmm($this, $sub$ptr$div$i, $a);
 __ZN10Delaunator4linkEmm($this, $sub$ptr$div$i + 1 | 0, $b);
 __ZN10Delaunator4linkEmm($this, $sub$ptr$div$i + 2 | 0, $c);
 STACKTOP = sp;
 return $sub$ptr$div$i | 0;
}

function __sfetch_emsc_get_response($slot_id, $range_fetched_size, $content_fetched_size) {
 $slot_id = $slot_id | 0;
 $range_fetched_size = $range_fetched_size | 0;
 $content_fetched_size = $content_fetched_size | 0;
 var $content_fetched_size$addr = 0, $ctx = 0, $http_range_offset = 0, $item = 0, $range_fetched_size$addr = 0, $slot_id$addr = 0, $thread5 = 0, $thread9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $slot_id$addr = sp + 16 | 0;
 $range_fetched_size$addr = sp + 12 | 0;
 $content_fetched_size$addr = sp + 8 | 0;
 $ctx = sp + 4 | 0;
 $item = sp;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 HEAP32[$range_fetched_size$addr >> 2] = $range_fetched_size;
 HEAP32[$content_fetched_size$addr >> 2] = $content_fetched_size;
 HEAP32[$ctx >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$ctx >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$ctx >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$item >> 2] = __sfetch_pool_item_lookup((HEAP32[$ctx >> 2] | 0) + 24 | 0, HEAP32[$slot_id$addr >> 2] | 0) | 0;
 if (!(HEAP32[$item >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$item >> 2] | 0) + 32 + 4 >> 2] = HEAP32[$content_fetched_size$addr >> 2];
 $thread5 = (HEAP32[$item >> 2] | 0) + 32 | 0;
 HEAP32[$thread5 >> 2] = (HEAP32[$thread5 >> 2] | 0) + (HEAP32[$content_fetched_size$addr >> 2] | 0);
 $http_range_offset = (HEAP32[$item >> 2] | 0) + 32 + 16 | 0;
 HEAP32[$http_range_offset >> 2] = (HEAP32[$http_range_offset >> 2] | 0) + (HEAP32[$range_fetched_size$addr >> 2] | 0);
 $thread9 = (HEAP32[$item >> 2] | 0) + 32 | 0;
 if (!(HEAP32[(HEAP32[$item >> 2] | 0) + 16 >> 2] | 0)) HEAP8[$thread9 + 13 >> 0] = 1; else if ((HEAP32[$thread9 + 16 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$item >> 2] | 0) + 32 + 20 >> 2] | 0) >>> 0) HEAP8[(HEAP32[$item >> 2] | 0) + 32 + 13 >> 0] = 1;
 __sfetch_ring_enqueue((HEAP32[$ctx >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$item >> 2] | 0) + 8 >> 2] | 0) * 76 | 0) + 52 | 0, HEAP32[$slot_id$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _fons__allocFont($stash) {
 $stash = $stash | 0;
 var $23 = 0, $25 = 0, $27 = 0, $31 = 0, $call = 0, $call16 = 0, $cond = 0, $font = 0, $nfonts22 = 0, $retval = 0, $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $stash$addr = sp + 4 | 0;
 $font = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$font >> 2] = 0;
 if (((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 76 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 72 >> 2] | 0)) {
  if (!(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 72 >> 2] | 0)) $cond = 8; else $cond = HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 72 >> 2] << 1;
  HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 72 >> 2] = $cond;
  $call = _realloc(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] | 0, HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 72 >> 2] << 2) | 0;
  HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] = $call;
  if (!(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] | 0)) {
   HEAP32[$retval >> 2] = -1;
   $31 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $31 | 0;
  }
 }
 HEAP32[$font >> 2] = _malloc(1328) | 0;
 if (HEAP32[$font >> 2] | 0) {
  _memset(HEAP32[$font >> 2] | 0, 0, 1328) | 0;
  $call16 = _malloc(8192) | 0;
  HEAP32[(HEAP32[$font >> 2] | 0) + 208 >> 2] = $call16;
  if (HEAP32[(HEAP32[$font >> 2] | 0) + 208 >> 2] | 0) {
   HEAP32[(HEAP32[$font >> 2] | 0) + 212 >> 2] = 256;
   HEAP32[(HEAP32[$font >> 2] | 0) + 216 >> 2] = 0;
   $23 = HEAP32[$font >> 2] | 0;
   $25 = HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] | 0;
   $nfonts22 = (HEAP32[$stash$addr >> 2] | 0) + 76 | 0;
   $27 = HEAP32[$nfonts22 >> 2] | 0;
   HEAP32[$nfonts22 >> 2] = $27 + 1;
   HEAP32[$25 + ($27 << 2) >> 2] = $23;
   HEAP32[$retval >> 2] = (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 76 >> 2] | 0) - 1;
   $31 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $31 | 0;
  }
 }
 _fons__freeFont(HEAP32[$font >> 2] | 0);
 HEAP32[$retval >> 2] = -1;
 $31 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $31 | 0;
}

function _stbi__load_and_postprocess_8bit($s, $x, $y, $comp, $req_comp) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 var $28 = 0, $channels = 0, $comp$addr = 0, $cond = 0, $cond14 = 0, $req_comp$addr = 0, $result = 0, $retval = 0, $ri = 0, $s$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $retval = sp + 40 | 0;
 $s$addr = sp + 36 | 0;
 $x$addr = sp + 32 | 0;
 $y$addr = sp + 28 | 0;
 $comp$addr = sp + 24 | 0;
 $req_comp$addr = sp + 20 | 0;
 $ri = sp + 8 | 0;
 $result = sp + 4 | 0;
 $channels = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$result >> 2] = _stbi__load_main(HEAP32[$s$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, $ri, 8) | 0;
 if (!(HEAP32[$result >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 if ((HEAP32[$ri >> 2] | 0) != 8) {
  if ((HEAP32[$ri >> 2] | 0) != 16) ___assert_fail(47407, 47433, 1128, 47499);
  if (!(HEAP32[$req_comp$addr >> 2] | 0)) $cond = HEAP32[HEAP32[$comp$addr >> 2] >> 2] | 0; else $cond = HEAP32[$req_comp$addr >> 2] | 0;
  HEAP32[$result >> 2] = _stbi__convert_16_to_8(HEAP32[$result >> 2] | 0, HEAP32[HEAP32[$x$addr >> 2] >> 2] | 0, HEAP32[HEAP32[$y$addr >> 2] >> 2] | 0, $cond) | 0;
  HEAP32[$ri >> 2] = 8;
 }
 if (0) {
  if (HEAP32[$req_comp$addr >> 2] | 0) $cond14 = HEAP32[$req_comp$addr >> 2] | 0; else $cond14 = HEAP32[HEAP32[$comp$addr >> 2] >> 2] | 0;
  HEAP32[$channels >> 2] = $cond14;
  _stbi__vertical_flip(HEAP32[$result >> 2] | 0, HEAP32[HEAP32[$x$addr >> 2] >> 2] | 0, HEAP32[HEAP32[$y$addr >> 2] >> 2] | 0, HEAP32[$channels >> 2] | 0);
 }
 HEAP32[$retval >> 2] = HEAP32[$result >> 2];
 $28 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function _stbtt__find_table($data, $fontstart, $tag) {
 $data = $data | 0;
 $fontstart = $fontstart | 0;
 $tag = $tag | 0;
 var $30 = 0, $data$addr = 0, $fontstart$addr = 0, $i = 0, $loc = 0, $num_tables = 0, $retval = 0, $tabledir = 0, $tag$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $data$addr = sp + 24 | 0;
 $fontstart$addr = sp + 20 | 0;
 $tag$addr = sp + 16 | 0;
 $num_tables = sp + 12 | 0;
 $tabledir = sp + 8 | 0;
 $i = sp + 4 | 0;
 $loc = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$fontstart$addr >> 2] = $fontstart;
 HEAP32[$tag$addr >> 2] = $tag;
 HEAP32[$num_tables >> 2] = (_ttUSHORT((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$fontstart$addr >> 2] | 0) + 4 | 0) | 0) & 65535;
 HEAP32[$tabledir >> 2] = (HEAP32[$fontstart$addr >> 2] | 0) + 12;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num_tables >> 2] | 0)) {
   label = 9;
   break;
  }
  HEAP32[$loc >> 2] = (HEAP32[$tabledir >> 2] | 0) + (HEAP32[$i >> 2] << 4);
  if ((HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$loc >> 2] | 0) >> 0] | 0) == (HEAP8[HEAP32[$tag$addr >> 2] >> 0] | 0)) if ((HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$loc >> 2] | 0) + 1 >> 0] | 0) == (HEAP8[(HEAP32[$tag$addr >> 2] | 0) + 1 >> 0] | 0)) if ((HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$loc >> 2] | 0) + 2 >> 0] | 0) == (HEAP8[(HEAP32[$tag$addr >> 2] | 0) + 2 >> 0] | 0)) if ((HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$loc >> 2] | 0) + 3 >> 0] | 0) == (HEAP8[(HEAP32[$tag$addr >> 2] | 0) + 3 >> 0] | 0)) {
   label = 7;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  HEAP32[$retval >> 2] = _ttULONG((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$loc >> 2] | 0) + 8 | 0) | 0;
  $30 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $30 | 0;
 } else if ((label | 0) == 9) {
  HEAP32[$retval >> 2] = 0;
  $30 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $30 | 0;
 }
 return 0;
}

function __sfetch_emsc_send_get_request($slot_id, $item) {
 $slot_id = $slot_id | 0;
 $item = $item | 0;
 var $bytes_to_read = 0, $item$addr = 0, $offset = 0, $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $slot_id$addr = sp + 12 | 0;
 $item$addr = sp + 8 | 0;
 $offset = sp + 4 | 0;
 $bytes_to_read = sp;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 HEAP32[$item$addr >> 2] = $item;
 if (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 24 >> 2] | 0) if (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 24 + 4 >> 2] | 0) {
  HEAP32[$offset >> 2] = 0;
  HEAP32[$bytes_to_read >> 2] = 0;
  do if ((HEAP32[(HEAP32[$item$addr >> 2] | 0) + 16 >> 2] | 0) >>> 0 > 0) {
   if ((HEAP32[(HEAP32[$item$addr >> 2] | 0) + 32 + 20 >> 2] | 0) >>> 0 <= 0) ___assert_fail(25480, 25510, 1982, 25581);
   if ((HEAP32[(HEAP32[$item$addr >> 2] | 0) + 32 + 16 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 32 + 20 >> 2] | 0) >>> 0) ___assert_fail(25611, 25510, 1983, 25581);
   HEAP32[$bytes_to_read >> 2] = (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 32 + 20 >> 2] | 0) - (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 32 + 16 >> 2] | 0);
   if ((HEAP32[$bytes_to_read >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 16 >> 2] | 0) >>> 0) HEAP32[$bytes_to_read >> 2] = HEAP32[(HEAP32[$item$addr >> 2] | 0) + 16 >> 2];
   if ((HEAP32[$bytes_to_read >> 2] | 0) >>> 0 > 0) {
    HEAP32[$offset >> 2] = HEAP32[(HEAP32[$item$addr >> 2] | 0) + 32 + 16 >> 2];
    break;
   } else ___assert_fail(25670, 25510, 1988, 25581);
  } while (0);
  _sfetch_js_send_get_request(HEAP32[$slot_id$addr >> 2] | 0, (HEAP32[$item$addr >> 2] | 0) + 208 | 0, HEAP32[$offset >> 2] | 0, HEAP32[$bytes_to_read >> 2] | 0, HEAP32[(HEAP32[$item$addr >> 2] | 0) + 24 >> 2] | 0, HEAP32[(HEAP32[$item$addr >> 2] | 0) + 24 + 4 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$item$addr >> 2] | 0) + 32 + 8 >> 2] = 2;
 HEAP8[(HEAP32[$item$addr >> 2] | 0) + 32 + 12 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZN10Delaunator4linkEmm($this, $a, $b) {
 $this = $this | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $a$addr = 0, $b$addr = 0, $exception = 0, $exception22 = 0, $halfedges = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i19 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $a$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 $halfedges = $this + 16 | 0;
 $__end_$i = $this + 20 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$halfedges >> 2] | 0;
 $sub$ptr$div$i = $0 - $1 >> 2;
 $2 = $1;
 $3 = $0;
 do if (($sub$ptr$div$i | 0) == ($a | 0)) if ((HEAP32[$this + 24 >> 2] | 0) == ($3 | 0)) {
  __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($halfedges, $b$addr);
  break;
 } else {
  HEAP32[$3 >> 2] = $b;
  HEAP32[$__end_$i >> 2] = $3 + 4;
  break;
 } else if ($sub$ptr$div$i >>> 0 > $a >>> 0) {
  HEAP32[$2 + ($a << 2) >> 2] = $b;
  break;
 } else {
  $exception = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc($exception, 45715);
  ___cxa_throw($exception | 0, 12496, 86);
 } while (0);
 $5 = HEAP32[$b$addr >> 2] | 0;
 do if (($5 | 0) != -1) {
  $6 = HEAP32[$__end_$i >> 2] | 0;
  $7 = HEAP32[$halfedges >> 2] | 0;
  $sub$ptr$div$i19 = $6 - $7 >> 2;
  $8 = $7;
  $9 = $6;
  if (($5 | 0) == ($sub$ptr$div$i19 | 0)) if ((HEAP32[$this + 24 >> 2] | 0) == ($9 | 0)) {
   __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($halfedges, $a$addr);
   break;
  } else {
   HEAP32[$9 >> 2] = HEAP32[$a$addr >> 2];
   HEAP32[$__end_$i >> 2] = $9 + 4;
   break;
  } else if ($5 >>> 0 < $sub$ptr$div$i19 >>> 0) {
   HEAP32[$8 + ($5 << 2) >> 2] = HEAP32[$a$addr >> 2];
   break;
  } else {
   $exception22 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc($exception22, 45715);
   ___cxa_throw($exception22 | 0, 12496, 86);
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _sapp_html5_fetch_dropped_file($request) {
 $request = $request | 0;
 var $17 = 0, $call = 0, $error_code = 0, $index = 0, $request$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $request$addr = sp + 8 | 0;
 $index = sp + 4 | 0;
 $error_code = sp;
 HEAP32[$request$addr >> 2] = $request;
 if (!(HEAP8[58968] & 1)) ___assert_fail(21055, 16477, 10401, 21172);
 if (!(HEAP32[$request$addr >> 2] | 0)) ___assert_fail(21202, 16477, 10402, 21172);
 if (!(HEAP32[(HEAP32[$request$addr >> 2] | 0) + 4 >> 2] | 0)) ___assert_fail(21210, 16477, 10403, 21172);
 if (!(HEAP32[(HEAP32[$request$addr >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(21228, 16477, 10404, 21172);
 if ((HEAP32[(HEAP32[$request$addr >> 2] | 0) + 12 >> 2] | 0) >>> 0 <= 0) ___assert_fail(21248, 16477, 10405, 21172);
 HEAP32[$index >> 2] = HEAP32[HEAP32[$request$addr >> 2] >> 2];
 HEAP32[$error_code >> 2] = 0;
 if ((HEAP32[$index >> 2] | 0) < 0) label = 13; else if ((HEAP32[$index >> 2] | 0) >= (HEAP32[14745] | 0)) label = 13;
 if ((label | 0) == 13) HEAP32[$error_code >> 2] = 2;
 $call = _sapp_html5_get_dropped_file_size(HEAP32[$index >> 2] | 0) | 0;
 if ($call >>> 0 > (HEAP32[(HEAP32[$request$addr >> 2] | 0) + 12 >> 2] | 0) >>> 0) HEAP32[$error_code >> 2] = 1;
 $17 = HEAP32[$index >> 2] | 0;
 if (HEAP32[$error_code >> 2] | 0) {
  __sapp_emsc_invoke_fetch_cb($17, 0, HEAP32[$error_code >> 2] | 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 4 >> 2] | 0, 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 16 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  _sapp_js_fetch_dropped_file($17 | 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$request$addr >> 2] | 0) + 16 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __sapp_emsc_invoke_fetch_cb($index, $success, $error_code, $callback, $fetched_size, $buf_ptr, $buf_size, $user_data) {
 $index = $index | 0;
 $success = $success | 0;
 $error_code = $error_code | 0;
 $callback = $callback | 0;
 $fetched_size = $fetched_size | 0;
 $buf_ptr = $buf_ptr | 0;
 $buf_size = $buf_size | 0;
 $user_data = $user_data | 0;
 var $buf_ptr$addr = 0, $buf_size$addr = 0, $callback$addr = 0, $error_code$addr = 0, $fetched_size$addr = 0, $index$addr = 0, $response = 0, $success$addr = 0, $user_data$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $index$addr = sp + 56 | 0;
 $success$addr = sp + 52 | 0;
 $error_code$addr = sp + 48 | 0;
 $callback$addr = sp + 44 | 0;
 $fetched_size$addr = sp + 40 | 0;
 $buf_ptr$addr = sp + 36 | 0;
 $buf_size$addr = sp + 32 | 0;
 $user_data$addr = sp + 28 | 0;
 $response = sp;
 HEAP32[$index$addr >> 2] = $index;
 HEAP32[$success$addr >> 2] = $success;
 HEAP32[$error_code$addr >> 2] = $error_code;
 HEAP32[$callback$addr >> 2] = $callback;
 HEAP32[$fetched_size$addr >> 2] = $fetched_size;
 HEAP32[$buf_ptr$addr >> 2] = $buf_ptr;
 HEAP32[$buf_size$addr >> 2] = $buf_size;
 HEAP32[$user_data$addr >> 2] = $user_data;
 HEAP32[$response >> 2] = 0;
 HEAP32[$response + 4 >> 2] = 0;
 HEAP32[$response + 8 >> 2] = 0;
 HEAP32[$response + 12 >> 2] = 0;
 HEAP32[$response + 16 >> 2] = 0;
 HEAP32[$response + 20 >> 2] = 0;
 HEAP32[$response + 24 >> 2] = 0;
 HEAP8[$response >> 0] = 0 != (HEAP32[$success$addr >> 2] | 0) & 1;
 HEAP32[$response + 4 >> 2] = HEAP32[$error_code$addr >> 2];
 HEAP32[$response + 8 >> 2] = HEAP32[$index$addr >> 2];
 HEAP32[$response + 12 >> 2] = HEAP32[$fetched_size$addr >> 2];
 HEAP32[$response + 16 >> 2] = HEAP32[$buf_ptr$addr >> 2];
 HEAP32[$response + 20 >> 2] = HEAP32[$buf_size$addr >> 2];
 HEAP32[$response + 24 >> 2] = HEAP32[$user_data$addr >> 2];
 FUNCTION_TABLE_vi[HEAP32[$callback$addr >> 2] & 127]($response);
 STACKTOP = sp;
 return;
}

function __sg_gl_update_buffer($buf, $data) {
 $buf = $buf | 0;
 $data = $data | 0;
 var $active_slot = 0, $buf$addr = 0, $data$addr = 0, $gl_buf = 0, $gl_tgt = 0, $inc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf$addr = sp + 12 | 0;
 $data$addr = sp + 8 | 0;
 $gl_tgt = sp + 4 | 0;
 $gl_buf = sp;
 HEAP32[$buf$addr >> 2] = $buf;
 HEAP32[$data$addr >> 2] = $data;
 if (!((HEAP32[$buf$addr >> 2] | 0) != 0 & (HEAP32[$data$addr >> 2] | 0) != 0)) ___assert_fail(41079, 21600, 6945, 41124);
 if (!(HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0)) ___assert_fail(41079, 21600, 6945, 41124);
 if ((HEAP32[(HEAP32[$data$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(41079, 21600, 6945, 41124);
 $active_slot = (HEAP32[$buf$addr >> 2] | 0) + 12 + 32 | 0;
 $inc = (HEAP32[$active_slot >> 2] | 0) + 1 | 0;
 HEAP32[$active_slot >> 2] = $inc;
 if (($inc | 0) >= (HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 28 >> 2] | 0)) HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 32 >> 2] = 0;
 HEAP32[$gl_tgt >> 2] = __sg_gl_buffer_target(HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 12 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 32 >> 2] | 0) >= 2) ___assert_fail(41145, 21600, 6951, 41124);
 HEAP32[$gl_buf >> 2] = HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 48 + (HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 32 >> 2] << 2) >> 2];
 if (!(HEAP32[$gl_buf >> 2] | 0)) ___assert_fail(41191, 21600, 6953, 41124);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6954, 41124);
 __sg_gl_cache_store_buffer_binding(HEAP32[$gl_tgt >> 2] | 0);
 __sg_gl_cache_bind_buffer(HEAP32[$gl_tgt >> 2] | 0, HEAP32[$gl_buf >> 2] | 0);
 _glBufferSubData(HEAP32[$gl_tgt >> 2] | 0, 0, HEAP32[(HEAP32[$data$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0);
 __sg_gl_cache_restore_buffer_binding(HEAP32[$gl_tgt >> 2] | 0);
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(29811, 21600, 6959, 41124);
}

function __sg_gl_teximage_format($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 do switch (HEAP32[$fmt$addr >> 2] | 0) {
 case 17:
 case 10:
 case 7:
 case 6:
 case 3:
 case 2:
  {
   HEAP32[$retval >> 2] = 6409;
   break;
  }
 case 28:
 case 40:
 case 37:
 case 34:
 case 33:
 case 24:
 case 23:
  {
   HEAP32[$retval >> 2] = 6408;
   break;
  }
 case 29:
  {
   HEAP32[$retval >> 2] = 6407;
   break;
  }
 case 41:
  {
   HEAP32[$retval >> 2] = 6402;
   break;
  }
 case 42:
  {
   HEAP32[$retval >> 2] = 34041;
   break;
  }
 case 43:
  {
   HEAP32[$retval >> 2] = 33777;
   break;
  }
 case 44:
  {
   HEAP32[$retval >> 2] = 33778;
   break;
  }
 case 45:
  {
   HEAP32[$retval >> 2] = 33779;
   break;
  }
 case 46:
  {
   HEAP32[$retval >> 2] = 36283;
   break;
  }
 case 47:
  {
   HEAP32[$retval >> 2] = 36284;
   break;
  }
 case 48:
  {
   HEAP32[$retval >> 2] = 36285;
   break;
  }
 case 49:
  {
   HEAP32[$retval >> 2] = 36286;
   break;
  }
 case 50:
  {
   HEAP32[$retval >> 2] = 36494;
   break;
  }
 case 51:
  {
   HEAP32[$retval >> 2] = 36495;
   break;
  }
 case 52:
  {
   HEAP32[$retval >> 2] = 36492;
   break;
  }
 case 53:
  {
   HEAP32[$retval >> 2] = 35841;
   break;
  }
 case 54:
  {
   HEAP32[$retval >> 2] = 35840;
   break;
  }
 case 55:
  {
   HEAP32[$retval >> 2] = 35843;
   break;
  }
 case 56:
  {
   HEAP32[$retval >> 2] = 35842;
   break;
  }
 case 57:
  {
   HEAP32[$retval >> 2] = 37492;
   break;
  }
 case 58:
  {
   HEAP32[$retval >> 2] = 37494;
   break;
  }
 case 59:
  {
   HEAP32[$retval >> 2] = 37496;
   break;
  }
 case 60:
  {
   HEAP32[$retval >> 2] = 37490;
   break;
  }
 case 61:
  {
   HEAP32[$retval >> 2] = 37491;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4754, 37281);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZN6DrMesh18extrudeFacePolygonERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEEiiib($this, $outline_points, $width, $height, $steps, $reverse) {
 $this = $this | 0;
 $outline_points = $outline_points | 0;
 $width = $width | 0;
 $height = $height | 0;
 $steps = $steps | 0;
 $reverse = $reverse | 0;
 var $0 = 0.0, $1 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $__end_$i = 0, $add = 0, $conv = 0.0, $conv15 = 0.0, $conv2 = 0.0, $conv20 = 0.0, $conv33 = 0.0, $conv38 = 0.0, $conv39 = 0.0, $conv43 = 0.0, $div48 = 0.0, $div50 = 0.0, $i$0 = 0, $spec$select = 0, $sub$ptr$div$i = 0, $x1$0 = 0.0, $x2$0 = 0.0, $y1$0 = 0.0, $y2$0 = 0.0;
 $conv = +($width | 0);
 $conv2 = +($height | 0);
 $__end_$i = $outline_points + 4 | 0;
 $conv39 = $conv * .5;
 $conv43 = $conv2 * .5;
 $div48 = 1.0 / +($width | 0);
 $div50 = 1.0 / +($height | 0);
 $0 = -$div48;
 $1 = -$div50;
 $i$0 = 0;
 while (1) {
  $3 = HEAP32[$outline_points >> 2] | 0;
  $sub$ptr$div$i = (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4;
  $4 = $3;
  if (($i$0 | 0) >= ($sub$ptr$div$i | 0)) break;
  $add = $i$0 + 1 | 0;
  $spec$select = ($add | 0) < ($sub$ptr$div$i | 0) ? $add : 0;
  $5 = +HEAPF64[$4 + ($spec$select << 4) >> 3];
  $6 = +HEAPF64[$4 + ($spec$select << 4) + 8 >> 3];
  $conv15 = $5 / $conv;
  $conv20 = $6 / $conv2;
  $7 = +HEAPF64[$4 + ($i$0 << 4) >> 3];
  $8 = +HEAPF64[$4 + ($i$0 << 4) + 8 >> 3];
  $conv33 = $7 / $conv;
  $conv38 = $8 / $conv2;
  $x1$0 = $5 - $conv39 + ($conv15 > .5 ? $0 : $div48);
  $x2$0 = $7 - $conv39 + ($conv33 > .5 ? $0 : $div48);
  $y1$0 = $conv2 - $6 - $conv43 + ($conv20 > .5 ? $1 : $div50);
  $y2$0 = $conv2 - $8 - $conv43 + ($conv38 > .5 ? $1 : $div50);
  if ($reverse) __ZN6DrMesh7extrudeEffffffffi($this, $x2$0, $y2$0, $conv33, $conv38, $x1$0, $y1$0, $conv15, $conv20, $steps); else __ZN6DrMesh7extrudeEffffffffi($this, $x1$0, $y1$0, $conv15, $conv20, $x2$0, $y2$0, $conv33, $conv38, $steps);
  $i$0 = $add;
 }
 return;
}

function __sgl_ortho($dst, $left, $right, $bottom, $top, $znear, $zfar) {
 $dst = $dst | 0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $znear = +$znear;
 $zfar = +$zfar;
 var $bottom$addr = 0, $dst$addr = 0, $left$addr = 0, $m = 0, $right$addr = 0, $top$addr = 0, $zfar$addr = 0, $znear$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $dst$addr = sp + 88 | 0;
 $left$addr = sp + 84 | 0;
 $right$addr = sp + 80 | 0;
 $bottom$addr = sp + 76 | 0;
 $top$addr = sp + 72 | 0;
 $znear$addr = sp + 68 | 0;
 $zfar$addr = sp + 64 | 0;
 $m = sp;
 HEAP32[$dst$addr >> 2] = $dst;
 HEAPF32[$left$addr >> 2] = $left;
 HEAPF32[$right$addr >> 2] = $right;
 HEAPF32[$bottom$addr >> 2] = $bottom;
 HEAPF32[$top$addr >> 2] = $top;
 HEAPF32[$znear$addr >> 2] = $znear;
 HEAPF32[$zfar$addr >> 2] = $zfar;
 HEAPF32[$m >> 2] = 2.0 / (+HEAPF32[$right$addr >> 2] - +HEAPF32[$left$addr >> 2]);
 HEAPF32[$m + 16 >> 2] = 0.0;
 HEAPF32[$m + 32 >> 2] = 0.0;
 HEAPF32[$m + 48 >> 2] = -(+HEAPF32[$right$addr >> 2] + +HEAPF32[$left$addr >> 2]) / (+HEAPF32[$right$addr >> 2] - +HEAPF32[$left$addr >> 2]);
 HEAPF32[$m + 4 >> 2] = 0.0;
 HEAPF32[$m + 16 + 4 >> 2] = 2.0 / (+HEAPF32[$top$addr >> 2] - +HEAPF32[$bottom$addr >> 2]);
 HEAPF32[$m + 32 + 4 >> 2] = 0.0;
 HEAPF32[$m + 48 + 4 >> 2] = -(+HEAPF32[$top$addr >> 2] + +HEAPF32[$bottom$addr >> 2]) / (+HEAPF32[$top$addr >> 2] - +HEAPF32[$bottom$addr >> 2]);
 HEAPF32[$m + 8 >> 2] = 0.0;
 HEAPF32[$m + 16 + 8 >> 2] = 0.0;
 HEAPF32[$m + 32 + 8 >> 2] = -2.0 / (+HEAPF32[$zfar$addr >> 2] - +HEAPF32[$znear$addr >> 2]);
 HEAPF32[$m + 48 + 8 >> 2] = -(+HEAPF32[$zfar$addr >> 2] + +HEAPF32[$znear$addr >> 2]) / (+HEAPF32[$zfar$addr >> 2] - +HEAPF32[$znear$addr >> 2]);
 HEAPF32[$m + 12 >> 2] = 0.0;
 HEAPF32[$m + 16 + 12 >> 2] = 0.0;
 HEAPF32[$m + 32 + 12 >> 2] = 0.0;
 HEAPF32[$m + 48 + 12 >> 2] = 1.0;
 __sgl_mul(HEAP32[$dst$addr >> 2] | 0, $m);
 STACKTOP = sp;
 return;
}

function _stbi__compute_transparency16($z, $tc, $out_n) {
 $z = $z | 0;
 $tc = $tc | 0;
 $out_n = $out_n | 0;
 var $cmp3 = 0, $i = 0, $out_n$addr = 0, $p = 0, $pixel_count = 0, $s = 0, $tc$addr = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $z$addr = sp + 24 | 0;
 $tc$addr = sp + 20 | 0;
 $out_n$addr = sp + 16 | 0;
 $s = sp + 12 | 0;
 $i = sp + 8 | 0;
 $pixel_count = sp + 4 | 0;
 $p = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$tc$addr >> 2] = $tc;
 HEAP32[$out_n$addr >> 2] = $out_n;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$z$addr >> 2] >> 2];
 HEAP32[$pixel_count >> 2] = Math_imul(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$p >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2];
 if (!((HEAP32[$out_n$addr >> 2] | 0) == 2 | (HEAP32[$out_n$addr >> 2] | 0) == 4)) ___assert_fail(48522, 47433, 4685, 48574);
 $cmp3 = (HEAP32[$out_n$addr >> 2] | 0) == 2;
 HEAP32[$i >> 2] = 0;
 if ($cmp3) {
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
   HEAP16[(HEAP32[$p >> 2] | 0) + 2 >> 1] = (HEAPU16[HEAP32[$p >> 2] >> 1] | 0 | 0) == (HEAPU16[HEAP32[$tc$addr >> 2] >> 1] | 0 | 0) ? 0 : 65535;
   HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return 1;
 }
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
  if ((HEAPU16[HEAP32[$p >> 2] >> 1] | 0 | 0) == (HEAPU16[HEAP32[$tc$addr >> 2] >> 1] | 0 | 0)) if ((HEAPU16[(HEAP32[$p >> 2] | 0) + 2 >> 1] | 0 | 0) == (HEAPU16[(HEAP32[$tc$addr >> 2] | 0) + 2 >> 1] | 0 | 0)) if ((HEAPU16[(HEAP32[$p >> 2] | 0) + 4 >> 1] | 0 | 0) == (HEAPU16[(HEAP32[$tc$addr >> 2] | 0) + 4 >> 1] | 0 | 0)) HEAP16[(HEAP32[$p >> 2] | 0) + 6 >> 1] = 0;
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 8;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return 1;
}

function __ZL21extrude3D_shader_desc10sg_backend($backend) {
 $backend = $backend | 0;
 var $retval$0 = 0;
 switch ($backend | 0) {
 case 0:
  {
   if (!(HEAP8[2193734] | 0)) {
    HEAP8[2193734] = 1;
    HEAP32[546715] = 45580;
    HEAP32[546718] = 45584;
    HEAP32[546721] = 45589;
    HEAP32[546724] = 45599;
    HEAP32[546763] = 1824;
    HEAP32[546766] = 45604;
    HEAP32[546768] = 128;
    HEAP32[546769] = 45609;
    HEAP32[546770] = 4;
    HEAP32[546771] = 8;
    HEAP32[547e3] = 2400;
    HEAP32[547003] = 45604;
    HEAP32[547005] = 16;
    HEAP32[547006] = 45619;
    HEAP32[547007] = 4;
    HEAP32[547008] = 1;
    HEAP32[547201] = 45629;
    HEAP32[547202] = 1;
    HEAP32[547203] = 1;
    HEAP32[547237] = 45633;
    $retval$0 = 2186856;
   } else $retval$0 = 2186856;
   break;
  }
 case 1:
  {
   if (!(HEAP8[2193735] | 0)) {
    HEAP8[2193735] = 1;
    HEAP32[547240] = 45580;
    HEAP32[547243] = 45584;
    HEAP32[547246] = 45589;
    HEAP32[547249] = 45599;
    HEAP32[547288] = 3696;
    HEAP32[547291] = 45604;
    HEAP32[547293] = 128;
    HEAP32[547294] = 45609;
    HEAP32[547295] = 4;
    HEAP32[547296] = 8;
    HEAP32[547525] = 4240;
    HEAP32[547528] = 45604;
    HEAP32[547530] = 16;
    HEAP32[547531] = 45619;
    HEAP32[547532] = 4;
    HEAP32[547533] = 1;
    HEAP32[547726] = 45629;
    HEAP32[547727] = 1;
    HEAP32[547728] = 1;
    HEAP32[547762] = 45633;
    $retval$0 = 2188956;
   } else $retval$0 = 2188956;
   break;
  }
 case 5:
  {
   if (!(HEAP8[2193736] | 0)) {
    HEAP8[2193736] = 1;
    HEAP32[547813] = 5696;
    HEAP32[547816] = 45650;
    HEAP32[547818] = 128;
    HEAP32[548050] = 6656;
    HEAP32[548053] = 45650;
    HEAP32[548055] = 16;
    HEAP32[548251] = 45629;
    HEAP32[548252] = 1;
    HEAP32[548253] = 1;
    HEAP32[548287] = 45633;
    $retval$0 = 2191056;
   } else $retval$0 = 2191056;
   break;
  }
 default:
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($this) {
 $this = $this | 0;
 var $TP = 0, $call12 = 0, $call3 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $TP = sp;
 switch ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) {
 case 84:
  {
   $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$TP >> 2] = $call3;
   if (!$call3) $retval$0 = 0; else {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $TP);
    $retval$0 = $call3;
   }
   $retval$2 = $retval$0;
   break;
  }
 case 68:
  {
   $call12 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
   HEAP32[$TP >> 2] = $call12;
   if (!$call12) $retval$1 = 0; else {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this + 148 | 0, $TP);
    $retval$1 = $call12;
   }
   $retval$2 = $retval$1;
   break;
  }
 default:
  $retval$2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __sg_validate_apply_uniforms($stage_index, $ub_index, $data) {
 $stage_index = $stage_index | 0;
 $ub_index = $ub_index | 0;
 $data = $data | 0;
 var $call30 = 0, $data$addr = 0, $pip = 0, $stage = 0, $stage_index$addr = 0, $ub_index$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $stage_index$addr = sp + 16 | 0;
 $ub_index$addr = sp + 12 | 0;
 $data$addr = sp + 8 | 0;
 $pip = sp + 4 | 0;
 $stage = sp;
 HEAP32[$stage_index$addr >> 2] = $stage_index;
 HEAP32[$ub_index$addr >> 2] = $ub_index;
 HEAP32[$data$addr >> 2] = $data;
 if (!((HEAP32[$stage_index$addr >> 2] | 0) == 0 | (HEAP32[$stage_index$addr >> 2] | 0) == 1)) ___assert_fail(40419, 21600, 13745, 40492);
 if (!((HEAP32[$ub_index$addr >> 2] | 0) >= 0 & (HEAP32[$ub_index$addr >> 2] | 0) < 4)) ___assert_fail(22897, 21600, 13746, 40492);
 __sg_validate_begin();
 __sg_validate((HEAP32[541060] | 0) != 0, 80);
 HEAP32[$pip >> 2] = __sg_lookup_pipeline(2164252, HEAP32[541060] | 0) | 0;
 if (!(HEAP32[$pip >> 2] | 0)) ___assert_fail(40520, 21600, 13750, 40492);
 if ((HEAP32[HEAP32[$pip >> 2] >> 2] | 0) != (HEAP32[541060] | 0)) ___assert_fail(40520, 21600, 13750, 40492);
 if (!(HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(22635, 21600, 13751, 40492);
 if ((HEAP32[HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[$pip >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[$stage >> 2] = (HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] | 0) + 12 + ((HEAP32[$stage_index$addr >> 2] | 0) * 120 | 0);
  __sg_validate((HEAP32[$ub_index$addr >> 2] | 0) < (HEAP32[HEAP32[$stage >> 2] >> 2] | 0), 81);
  __sg_validate((HEAP32[(HEAP32[$data$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= (HEAP32[(HEAP32[$stage >> 2] | 0) + 8 + (HEAP32[$ub_index$addr >> 2] << 2) >> 2] | 0) >>> 0, 82);
  $call30 = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $call30 | 0;
 } else ___assert_fail(22635, 21600, 13751, 40492);
 return 0;
}

function _fons__allocAtlas($w, $h, $nnodes) {
 $w = $w | 0;
 $h = $h | 0;
 $nnodes = $nnodes | 0;
 var $1 = 0, $28 = 0, $atlas = 0, $call1 = 0, $h$addr = 0, $nnodes$addr = 0, $nnodes15 = 0, $retval = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $w$addr = sp + 12 | 0;
 $h$addr = sp + 8 | 0;
 $nnodes$addr = sp + 4 | 0;
 $atlas = sp;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$nnodes$addr >> 2] = $nnodes;
 HEAP32[$atlas >> 2] = 0;
 HEAP32[$atlas >> 2] = _malloc(20) | 0;
 if (HEAP32[$atlas >> 2] | 0) {
  $1 = HEAP32[$atlas >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[HEAP32[$atlas >> 2] >> 2] = HEAP32[$w$addr >> 2];
  HEAP32[(HEAP32[$atlas >> 2] | 0) + 4 >> 2] = HEAP32[$h$addr >> 2];
  $call1 = _malloc((HEAP32[$nnodes$addr >> 2] | 0) * 6 | 0) | 0;
  HEAP32[(HEAP32[$atlas >> 2] | 0) + 8 >> 2] = $call1;
  if (HEAP32[(HEAP32[$atlas >> 2] | 0) + 8 >> 2] | 0) {
   _memset(HEAP32[(HEAP32[$atlas >> 2] | 0) + 8 >> 2] | 0, 0, (HEAP32[$nnodes$addr >> 2] | 0) * 6 | 0) | 0;
   HEAP32[(HEAP32[$atlas >> 2] | 0) + 12 >> 2] = 0;
   HEAP32[(HEAP32[$atlas >> 2] | 0) + 16 >> 2] = HEAP32[$nnodes$addr >> 2];
   HEAP16[HEAP32[(HEAP32[$atlas >> 2] | 0) + 8 >> 2] >> 1] = 0;
   HEAP16[(HEAP32[(HEAP32[$atlas >> 2] | 0) + 8 >> 2] | 0) + 2 >> 1] = 0;
   HEAP16[(HEAP32[(HEAP32[$atlas >> 2] | 0) + 8 >> 2] | 0) + 4 >> 1] = HEAP32[$w$addr >> 2];
   $nnodes15 = (HEAP32[$atlas >> 2] | 0) + 12 | 0;
   HEAP32[$nnodes15 >> 2] = (HEAP32[$nnodes15 >> 2] | 0) + 1;
   HEAP32[$retval >> 2] = HEAP32[$atlas >> 2];
   $28 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $28 | 0;
  }
 }
 if (HEAP32[$atlas >> 2] | 0) _fons__deleteAtlas(HEAP32[$atlas >> 2] | 0);
 HEAP32[$retval >> 2] = 0;
 $28 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function __ZN2Dr22BlackAndWhiteFromAlphaERK8DrBitmapdb13Bitmap_Format($agg$result, $bitmap, $alpha_tolerance, $inverse, $desired_format) {
 $agg$result = $agg$result | 0;
 $bitmap = $bitmap | 0;
 $alpha_tolerance = +$alpha_tolerance;
 $inverse = $inverse | 0;
 $desired_format = $desired_format | 0;
 var $agg$tmp = 0, $cmp7 = 0, $color1 = 0, $color2 = 0, $cond$lvalue2D = 0, $conv = 0, $height = 0, $ref$tmp = 0, $tmpcast$byval_copy = 0, $width = 0, $x$0 = 0, $y$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $color1 = sp + 12 | 0;
 $color2 = sp + 8 | 0;
 $agg$tmp = sp;
 $ref$tmp = sp + 4 | 0;
 __ZN7DrColorC2Ej($color1, 0);
 __ZN7DrColorC2Ej($color2, -1);
 if ($inverse) __ZN2Dr4SwapI7DrColorEEvRT_S3_($color1, $color2);
 __ZN8DrBitmapC2ERKS_13Bitmap_Format($agg$result, $bitmap, $desired_format);
 $conv = ~~($alpha_tolerance * 255.0);
 $width = $bitmap + 8 | 0;
 $height = $bitmap + 12 | 0;
 $x$0 = 0;
 while (1) {
  if (($x$0 | 0) >= (HEAP32[$width >> 2] | 0)) break;
  $y$0 = 0;
  while (1) {
   if (($y$0 | 0) >= (HEAP32[$height >> 2] | 0)) break;
   __ZNK8DrBitmap8getPixelEii($ref$tmp, $bitmap, $x$0, $y$0);
   $cmp7 = (HEAPU8[(__ZNK7DrColor5alphaEv($ref$tmp) | 0) >> 0] | 0 | 0) < ($conv | 0);
   $cond$lvalue2D = $cmp7 ? $color1 : $color2;
   HEAP32[$agg$tmp >> 2] = HEAPU8[$cond$lvalue2D >> 0] | HEAPU8[$cond$lvalue2D + 1 >> 0] << 8 | HEAPU8[$cond$lvalue2D + 2 >> 0] << 16 | HEAPU8[$cond$lvalue2D + 3 >> 0] << 24;
   HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
   HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
   __ZN8DrBitmap8setPixelEii7DrColor($agg$result, $x$0, $y$0, $tmpcast$byval_copy);
   $y$0 = $y$0 + 1 | 0;
  }
  $x$0 = $x$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _stbi__compute_transparency($z, $tc, $out_n) {
 $z = $z | 0;
 $tc = $tc | 0;
 $out_n = $out_n | 0;
 var $cmp3 = 0, $i = 0, $out_n$addr = 0, $p = 0, $pixel_count = 0, $s = 0, $tc$addr = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $z$addr = sp + 24 | 0;
 $tc$addr = sp + 20 | 0;
 $out_n$addr = sp + 16 | 0;
 $s = sp + 12 | 0;
 $i = sp + 8 | 0;
 $pixel_count = sp + 4 | 0;
 $p = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$tc$addr >> 2] = $tc;
 HEAP32[$out_n$addr >> 2] = $out_n;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$z$addr >> 2] >> 2];
 HEAP32[$pixel_count >> 2] = Math_imul(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$p >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2];
 if (!((HEAP32[$out_n$addr >> 2] | 0) == 2 | (HEAP32[$out_n$addr >> 2] | 0) == 4)) ___assert_fail(48522, 47433, 4660, 48547);
 $cmp3 = (HEAP32[$out_n$addr >> 2] | 0) == 2;
 HEAP32[$i >> 2] = 0;
 if ($cmp3) {
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
   HEAP8[(HEAP32[$p >> 2] | 0) + 1 >> 0] = (HEAPU8[HEAP32[$p >> 2] >> 0] | 0 | 0) == (HEAPU8[HEAP32[$tc$addr >> 2] >> 0] | 0 | 0) ? 0 : 255;
   HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 2;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return 1;
 }
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
  if ((HEAPU8[HEAP32[$p >> 2] >> 0] | 0 | 0) == (HEAPU8[HEAP32[$tc$addr >> 2] >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[$p >> 2] | 0) + 1 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[$tc$addr >> 2] | 0) + 1 >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[$tc$addr >> 2] | 0) + 2 >> 0] | 0 | 0)) HEAP8[(HEAP32[$p >> 2] | 0) + 3 >> 0] = 0;
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return 1;
}

function _stbtt__GetGlyphInfoT2($info, $glyph_index, $x0, $y0, $x1, $y1) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $x0 = $x0 | 0;
 $y0 = $y0 | 0;
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 var $15 = 0, $16 = 0, $c = 0, $cond21 = 0, $glyph_index$addr = 0, $info$addr = 0, $num_vertices = 0, $r = 0, $tobool17 = 0, $x0$addr = 0, $x1$addr = 0, $y0$addr = 0, $y1$addr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $info$addr = sp + 76 | 0;
 $glyph_index$addr = sp + 72 | 0;
 $x0$addr = sp + 68 | 0;
 $y0$addr = sp + 64 | 0;
 $x1$addr = sp + 60 | 0;
 $y1$addr = sp + 56 | 0;
 $c = sp + 8 | 0;
 $r = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph_index$addr >> 2] = $glyph_index;
 HEAP32[$x0$addr >> 2] = $x0;
 HEAP32[$y0$addr >> 2] = $y0;
 HEAP32[$x1$addr >> 2] = $x1;
 HEAP32[$y1$addr >> 2] = $y1;
 dest = $c;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$c >> 2] = 1;
 HEAP32[$r >> 2] = _stbtt__run_charstring(HEAP32[$info$addr >> 2] | 0, HEAP32[$glyph_index$addr >> 2] | 0, $c) | 0;
 if (!(HEAP32[$x0$addr >> 2] | 0)) {
  $15 = HEAP32[$r >> 2] | 0;
  $tobool17 = ($15 | 0) != 0;
  $num_vertices = $c + 44 | 0;
  $16 = HEAP32[$num_vertices >> 2] | 0;
  $cond21 = $tobool17 ? $16 : 0;
  STACKTOP = sp;
  return $cond21 | 0;
 }
 HEAP32[HEAP32[$x0$addr >> 2] >> 2] = HEAP32[$r >> 2] | 0 ? HEAP32[$c + 24 >> 2] | 0 : 0;
 HEAP32[HEAP32[$y0$addr >> 2] >> 2] = HEAP32[$r >> 2] | 0 ? HEAP32[$c + 32 >> 2] | 0 : 0;
 HEAP32[HEAP32[$x1$addr >> 2] >> 2] = HEAP32[$r >> 2] | 0 ? HEAP32[$c + 28 >> 2] | 0 : 0;
 HEAP32[HEAP32[$y1$addr >> 2] >> 2] = HEAP32[$r >> 2] | 0 ? HEAP32[$c + 36 >> 2] | 0 : 0;
 $15 = HEAP32[$r >> 2] | 0;
 $tobool17 = ($15 | 0) != 0;
 $num_vertices = $c + 44 | 0;
 $16 = HEAP32[$num_vertices >> 2] | 0;
 $cond21 = $tobool17 ? $16 : 0;
 STACKTOP = sp;
 return $cond21 | 0;
}

function _stbi__zexpand($z, $zout, $n) {
 $z = $z | 0;
 $zout = $zout | 0;
 $n = $n | 0;
 var $28 = 0, $cur = 0, $limit = 0, $n$addr = 0, $q = 0, $retval = 0, $sub$ptr$sub6 = 0, $z$addr = 0, $zout$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $z$addr = sp + 24 | 0;
 $zout$addr = sp + 20 | 0;
 $n$addr = sp + 16 | 0;
 $q = sp + 12 | 0;
 $cur = sp + 8 | 0;
 $limit = sp + 4 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$zout$addr >> 2] = $zout;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] = HEAP32[$zout$addr >> 2];
 if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 28 >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(48784) | 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 HEAP32[$cur >> 2] = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) - (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 20 >> 2] | 0);
 $sub$ptr$sub6 = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 24 >> 2] | 0) - (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 20 >> 2] | 0) | 0;
 HEAP32[sp >> 2] = $sub$ptr$sub6;
 HEAP32[$limit >> 2] = $sub$ptr$sub6;
 while (1) {
  if (((HEAP32[$cur >> 2] | 0) + (HEAP32[$n$addr >> 2] | 0) | 0) <= (HEAP32[$limit >> 2] | 0)) break;
  HEAP32[$limit >> 2] = HEAP32[$limit >> 2] << 1;
 }
 HEAP32[$q >> 2] = _realloc(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 20 >> 2] | 0, HEAP32[$limit >> 2] | 0) | 0;
 if (!(HEAP32[$q >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(47531) | 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 } else {
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 20 >> 2] = HEAP32[$q >> 2];
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] = (HEAP32[$q >> 2] | 0) + (HEAP32[$cur >> 2] | 0);
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 24 >> 2] = (HEAP32[$q >> 2] | 0) + (HEAP32[$limit >> 2] | 0);
  HEAP32[$retval >> 2] = 1;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) {
 $this = $this | 0;
 var $$ph = 0, $0 = 0, $1 = 0, $ref$tmp = 0, $ref$tmp10 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp + 8 | 0;
 $ref$tmp10 = sp;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 104) | 0) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp, $this, 1);
  if (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp) | 0) $0 = 1; else $0 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) ^ 1;
  $retval$0 = $0;
 } else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 118) | 0) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp, $this, 1);
  if (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp) | 0) $1 = 1; else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp10, $this, 1);
   if (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp10) | 0) $$ph = 1; else $$ph = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 95) | 0) ^ 1;
   $1 = $$ph;
  } else $1 = 1;
  $retval$0 = $1;
 } else $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __sfetch_invoke_response_callback($item) {
 $item = $item | 0;
 var $item$addr = 0, $response = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $item$addr = sp + 48 | 0;
 $response = sp;
 HEAP32[$item$addr >> 2] = $item;
 dest = $response;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$response >> 2] = HEAP32[HEAP32[$item$addr >> 2] >> 2];
 HEAP8[$response + 4 >> 0] = (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 4 >> 2] | 0) == 2 & 1;
 HEAP8[$response + 5 >> 0] = (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 4 >> 2] | 0) == 4 & 1;
 HEAP8[$response + 6 >> 0] = (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 4 >> 2] | 0) == 5 & 1;
 HEAP8[$response + 7 >> 0] = HEAP8[(HEAP32[$item$addr >> 2] | 0) + 56 + 16 >> 0] & 1;
 HEAP8[$response + 8 >> 0] = (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 4 >> 2] | 0) == 6 & 1;
 HEAP8[$response + 9 >> 0] = HEAP8[(HEAP32[$item$addr >> 2] | 0) + 56 + 2 >> 0] & 1;
 HEAP32[$response + 12 >> 2] = HEAP32[(HEAP32[$item$addr >> 2] | 0) + 56 + 12 >> 2];
 HEAP32[$response + 16 >> 2] = HEAP32[(HEAP32[$item$addr >> 2] | 0) + 8 >> 2];
 HEAP32[$response + 20 >> 2] = HEAP32[(HEAP32[$item$addr >> 2] | 0) + 12 >> 2];
 HEAP32[$response + 24 >> 2] = (HEAP32[$item$addr >> 2] | 0) + 208;
 HEAP32[$response + 28 >> 2] = (HEAP32[$item$addr >> 2] | 0) + 56 + 24;
 HEAP32[$response + 32 >> 2] = (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 56 + 4 >> 2] | 0) - (HEAP32[(HEAP32[$item$addr >> 2] | 0) + 56 + 8 >> 2] | 0);
 HEAP32[$response + 36 >> 2] = HEAP32[(HEAP32[$item$addr >> 2] | 0) + 56 + 8 >> 2];
 HEAP32[$response + 40 >> 2] = HEAP32[(HEAP32[$item$addr >> 2] | 0) + 24 >> 2];
 HEAP32[$response + 44 >> 2] = HEAP32[(HEAP32[$item$addr >> 2] | 0) + 24 + 4 >> 2];
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$item$addr >> 2] | 0) + 20 >> 2] & 127]($response);
 STACKTOP = sp;
 return;
}

function __sg_pool_free_index($pool, $slot_index) {
 $pool = $pool | 0;
 $slot_index = $slot_index | 0;
 var $20 = 0, $22 = 0, $24 = 0, $i = 0, $pool$addr = 0, $queue_top22 = 0, $slot_index$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp + 8 | 0;
 $slot_index$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$slot_index$addr >> 2] = $slot_index;
 if ((HEAP32[$slot_index$addr >> 2] | 0) <= 0) ___assert_fail(30193, 21600, 12807, 30543);
 if ((HEAP32[$slot_index$addr >> 2] | 0) >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0)) ___assert_fail(30193, 21600, 12807, 30543);
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(30066, 21600, 12808, 30543);
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(29510, 21600, 12809, 30543);
 if ((HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0)) ___assert_fail(30563, 21600, 12810, 30543);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) == (HEAP32[$slot_index$addr >> 2] | 0)) {
   label = 13;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) ___assert_fail(30592, 21600, 12814, 30543);
 $20 = HEAP32[$slot_index$addr >> 2] | 0;
 $22 = HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0;
 $queue_top22 = (HEAP32[$pool$addr >> 2] | 0) + 4 | 0;
 $24 = HEAP32[$queue_top22 >> 2] | 0;
 HEAP32[$queue_top22 >> 2] = $24 + 1;
 HEAP32[$22 + ($24 << 2) >> 2] = $20;
 if ((HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0) <= ((HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) - 1 | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(30626, 21600, 12818, 30543);
}

function _stbi__build_fast_ac($fast_ac, $h) {
 $fast_ac = $fast_ac | 0;
 $h = $h | 0;
 var $fast = 0, $fast_ac$addr = 0, $h$addr = 0, $i = 0, $k = 0, $len = 0, $m = 0, $magbits = 0, $rs = 0, $run = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $fast_ac$addr = sp + 32 | 0;
 $h$addr = sp + 28 | 0;
 $i = sp + 24 | 0;
 $fast = sp + 36 | 0;
 $rs = sp + 20 | 0;
 $run = sp + 16 | 0;
 $magbits = sp + 12 | 0;
 $len = sp + 8 | 0;
 $k = sp + 4 | 0;
 $m = sp;
 HEAP32[$fast_ac$addr >> 2] = $fast_ac;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 512) break;
  HEAP8[$fast >> 0] = HEAP8[(HEAP32[$h$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
  HEAP16[(HEAP32[$fast_ac$addr >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] = 0;
  if ((HEAPU8[$fast >> 0] | 0 | 0) < 255) {
   HEAP32[$rs >> 2] = HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1024 + (HEAPU8[$fast >> 0] | 0) >> 0];
   HEAP32[$run >> 2] = HEAP32[$rs >> 2] >> 4 & 15;
   HEAP32[$magbits >> 2] = HEAP32[$rs >> 2] & 15;
   HEAP32[$len >> 2] = HEAPU8[(HEAP32[$h$addr >> 2] | 0) + 1280 + (HEAPU8[$fast >> 0] | 0) >> 0];
   if (HEAP32[$magbits >> 2] | 0) if (((HEAP32[$len >> 2] | 0) + (HEAP32[$magbits >> 2] | 0) | 0) <= 9) {
    HEAP32[$k >> 2] = (HEAP32[$i >> 2] << HEAP32[$len >> 2] & 511) >> 9 - (HEAP32[$magbits >> 2] | 0);
    HEAP32[$m >> 2] = 1 << (HEAP32[$magbits >> 2] | 0) - 1;
    if ((HEAP32[$k >> 2] | 0) < (HEAP32[$m >> 2] | 0)) HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + ((-1 << HEAP32[$magbits >> 2]) + 1);
    if ((HEAP32[$k >> 2] | 0) >= -128 & (HEAP32[$k >> 2] | 0) <= 127) HEAP16[(HEAP32[$fast_ac$addr >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] = (HEAP32[$k >> 2] << 8) + (HEAP32[$run >> 2] << 4) + ((HEAP32[$len >> 2] | 0) + (HEAP32[$magbits >> 2] | 0));
   }
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN8DrBitmapC2ERKS_13Bitmap_Format($this, $bitmap, $desired_format) {
 $this = $this | 0;
 $bitmap = $bitmap | 0;
 $desired_format = $desired_format | 0;
 var $5 = 0, $6 = 0, $8 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $channels = 0, $data = 0, $height = 0, $mul = 0, $width = 0, $x$0 = 0, $y$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $width = $bitmap + 8 | 0;
 $height = $bitmap + 12 | 0;
 __ZN8DrBitmapC2Eii13Bitmap_Format($this, HEAP32[$width >> 2] | 0, HEAP32[$height >> 2] | 0, $desired_format);
 L1 : do if ((HEAP32[$bitmap >> 2] | 0) == (HEAP32[$this >> 2] | 0)) {
  $channels = $bitmap + 4 | 0;
  HEAP32[$this + 4 >> 2] = HEAP32[$channels >> 2];
  $5 = HEAP32[$width >> 2] | 0;
  HEAP32[$this + 8 >> 2] = $5;
  $6 = HEAP32[$height >> 2] | 0;
  HEAP32[$this + 12 >> 2] = $6;
  $data = $this + 16 | 0;
  $mul = Math_imul($6, $5) | 0;
  __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($data, Math_imul($mul, HEAP32[$channels >> 2] | 0) | 0);
  $8 = HEAP32[$data >> 2] | 0;
  _memcpy($8 | 0, HEAP32[$bitmap + 16 >> 2] | 0, (HEAP32[$this + 20 >> 2] | 0) - $8 | 0) | 0;
 } else {
  $x$0 = 0;
  while (1) {
   if (($x$0 | 0) >= (HEAP32[$width >> 2] | 0)) break L1;
   $y$0 = 0;
   while (1) {
    if (($y$0 | 0) >= (HEAP32[$height >> 2] | 0)) break;
    __ZNK8DrBitmap8getPixelEii($agg$tmp, $bitmap, $x$0, $y$0);
    HEAP8[$agg$tmp$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
    HEAP8[$agg$tmp$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
    HEAP8[$agg$tmp$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
    HEAP8[$agg$tmp$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
    __ZN8DrBitmap8setPixelEii7DrColor($this, $x$0, $y$0, $agg$tmp$byval_copy);
    $y$0 = $y$0 + 1 | 0;
   }
   $x$0 = $x$0 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __sgl_pool_free_index($pool, $slot_index) {
 $pool = $pool | 0;
 $slot_index = $slot_index | 0;
 var $20 = 0, $22 = 0, $24 = 0, $i = 0, $pool$addr = 0, $queue_top22 = 0, $slot_index$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp + 8 | 0;
 $slot_index$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$slot_index$addr >> 2] = $slot_index;
 if ((HEAP32[$slot_index$addr >> 2] | 0) <= 0) ___assert_fail(30193, 23371, 2130, 41885);
 if ((HEAP32[$slot_index$addr >> 2] | 0) >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0)) ___assert_fail(30193, 23371, 2130, 41885);
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(30066, 23371, 2131, 41885);
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(29510, 23371, 2132, 41885);
 if ((HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0)) ___assert_fail(30563, 23371, 2133, 41885);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) == (HEAP32[$slot_index$addr >> 2] | 0)) {
   label = 13;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) ___assert_fail(30592, 23371, 2137, 41885);
 $20 = HEAP32[$slot_index$addr >> 2] | 0;
 $22 = HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0;
 $queue_top22 = (HEAP32[$pool$addr >> 2] | 0) + 4 | 0;
 $24 = HEAP32[$queue_top22 >> 2] | 0;
 HEAP32[$queue_top22 >> 2] = $24 + 1;
 HEAP32[$22 + ($24 << 2) >> 2] = $20;
 if ((HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0) <= ((HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) - 1 | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(30626, 23371, 2141, 41885);
}

function __ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $10 = 0, $12 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp8$byval_copy = sp + 32 | 0;
 $agg$tmp = sp;
 $agg$tmp2 = sp + 24 | 0;
 $agg$tmp4 = sp + 16 | 0;
 $agg$tmp8 = sp + 8 | 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp8$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 52341);
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp8$byval_copy);
 $10 = HEAP32[$this + 16 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 127]($10, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 53347);
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp8$byval_copy);
 $12 = HEAP32[$this + 20 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, 52155);
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return;
}

function ___cxa_demangle($MangledName, $Buf, $N, $Status) {
 $MangledName = $MangledName | 0;
 $Buf = $Buf | 0;
 $N = $N | 0;
 $Status = $Status | 0;
 var $Buf$addr$0 = 0, $InternalStatus$0 = 0, $Parser = 0, $S = 0, $call5 = 0, $cmp2 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4496 | 0;
 $Parser = sp;
 $S = sp + 4472 | 0;
 if (!$MangledName) label = 3; else {
  $cmp2 = ($N | 0) == 0;
  if (($Buf | 0) != 0 & $cmp2) label = 3; else {
   __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_($Parser, $MangledName, $MangledName + (_strlen($MangledName) | 0) | 0);
   __ZN12_GLOBAL__N_112OutputStreamC2Ev($S);
   $call5 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv($Parser) | 0;
   if (!$call5) {
    $Buf$addr$0 = $Buf;
    $InternalStatus$0 = -2;
   } else if (__ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm($Buf, $N, $S) | 0) {
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($call5, $S);
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 0);
    if (!$cmp2) HEAP32[$N >> 2] = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
    $Buf$addr$0 = __ZN12_GLOBAL__N_112OutputStream9getBufferEv($S) | 0;
    $InternalStatus$0 = 0;
   } else {
    $Buf$addr$0 = $Buf;
    $InternalStatus$0 = -1;
   }
   if ($Status | 0) HEAP32[$Status >> 2] = $InternalStatus$0;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev($Parser);
   $retval$0 = ($InternalStatus$0 | 0) == 0 ? $Buf$addr$0 : 0;
  }
 }
 if ((label | 0) == 3) if (!$Status) $retval$0 = 0; else {
  HEAP32[$Status >> 2] = -3;
  $retval$0 = 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __sapp_init_state($desc) {
 $desc = $desc | 0;
 var $20 = 0, $21 = 0, $desc$addr = 0, $frombool13 = 0, $tmp = 0, $tobool12 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $desc$addr = sp + 100 | 0;
 $tmp = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 _memset(58576, 0, 3240) | 0;
 __sapp_desc_defaults($tmp, HEAP32[$desc$addr >> 2] | 0);
 dest = 58576;
 src = $tmp;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[58679] = 1;
 HEAP32[14672] = HEAP32[14655];
 HEAP32[14673] = HEAP32[14656];
 HEAP32[14674] = HEAP32[14672];
 HEAP32[14675] = HEAP32[14673];
 HEAP32[14676] = HEAP32[14657];
 HEAP32[14677] = HEAP32[14658];
 HEAP8[58996] = 35;
 __sapp_strcpy(HEAP32[14666] | 0, 58997, 127) | 0;
 HEAP32[14666] = 58997;
 HEAP8[58685] = HEAP8[58671] & 1;
 HEAP8[58956] = HEAP8[58645] & 1;
 if (HEAP8[58956] & 1) {
  HEAP32[14740] = HEAP32[14662];
  HEAP32[14741] = _calloc(1, HEAP32[14740] | 0) | 0;
 }
 HEAP8[58968] = HEAP8[58652] & 1;
 if (!(HEAP8[58968] & 1)) {
  $20 = HEAP32[14660] | 0;
  __sapp_strcpy($20, 59124, 128) | 0;
  HEAP32[14660] = 59124;
  HEAPF32[14678] = 1.0;
  $21 = HEAP8[58637] | 0;
  $tobool12 = $21 & 1;
  $frombool13 = $tobool12 & 1;
  HEAP8[58677] = $frombool13;
  HEAP8[58952] = 1;
  STACKTOP = sp;
  return;
 }
 HEAP32[14743] = HEAP32[14664];
 HEAP32[14744] = HEAP32[14665];
 HEAP32[14746] = Math_imul(HEAP32[14743] | 0, HEAP32[14744] | 0) | 0;
 HEAP32[14747] = _calloc(1, HEAP32[14746] | 0) | 0;
 $20 = HEAP32[14660] | 0;
 __sapp_strcpy($20, 59124, 128) | 0;
 HEAP32[14660] = 59124;
 HEAPF32[14678] = 1.0;
 $21 = HEAP8[58637] | 0;
 $tobool12 = $21 & 1;
 $frombool13 = $tobool12 & 1;
 HEAP8[58677] = $frombool13;
 HEAP8[58952] = 1;
 STACKTOP = sp;
 return;
}

function _stbtt__GetGlyphShapeT2($info, $glyph_index, $pvertices) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $pvertices = $pvertices | 0;
 var $14 = 0, $call1 = 0, $count_ctx = 0, $glyph_index$addr = 0, $info$addr = 0, $output_ctx = 0, $pvertices$addr = 0, $retval = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $retval = sp + 108 | 0;
 $info$addr = sp + 104 | 0;
 $glyph_index$addr = sp + 100 | 0;
 $pvertices$addr = sp + 96 | 0;
 $count_ctx = sp + 48 | 0;
 $output_ctx = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph_index$addr >> 2] = $glyph_index;
 HEAP32[$pvertices$addr >> 2] = $pvertices;
 dest = $count_ctx;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$count_ctx >> 2] = 1;
 dest = $output_ctx;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (_stbtt__run_charstring(HEAP32[$info$addr >> 2] | 0, HEAP32[$glyph_index$addr >> 2] | 0, $count_ctx) | 0) {
  $call1 = _fons__tmpalloc((HEAP32[$count_ctx + 44 >> 2] | 0) * 14 | 0, HEAP32[HEAP32[$info$addr >> 2] >> 2] | 0) | 0;
  HEAP32[HEAP32[$pvertices$addr >> 2] >> 2] = $call1;
  HEAP32[$output_ctx + 40 >> 2] = HEAP32[HEAP32[$pvertices$addr >> 2] >> 2];
  if (_stbtt__run_charstring(HEAP32[$info$addr >> 2] | 0, HEAP32[$glyph_index$addr >> 2] | 0, $output_ctx) | 0) {
   if ((HEAP32[$output_ctx + 44 >> 2] | 0) != (HEAP32[$count_ctx + 44 >> 2] | 0)) ___assert_fail(44560, 44131, 2191, 44610);
   HEAP32[$retval >> 2] = HEAP32[$output_ctx + 44 >> 2];
   $14 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $14 | 0;
  }
 }
 HEAP32[HEAP32[$pvertices$addr >> 2] >> 2] = 0;
 HEAP32[$retval >> 2] = 0;
 $14 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm($this, $__pos, $__s, $__n) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__s$addr$1 = 0, $__size_$i$i = 0, $add = 0, $add$ptr = 0, $cond$i = 0, $cond$i42 = 0, $cond$i48 = 0, $ref$tmp = 0, $sub8 = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 if ($cond$i >>> 0 < $__pos >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
 if ($tobool$i$i) $cond$i42 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i42 = 10;
 if (($cond$i42 - $cond$i | 0) >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i42, $cond$i + $__n - $cond$i42 | 0, $cond$i, $__pos, 0, $__n, $__s); else if ($__n | 0) {
  if ($tobool$i$i) $cond$i48 = HEAP32[$this >> 2] | 0; else $cond$i48 = $this;
  $sub8 = $cond$i - $__pos | 0;
  $add$ptr = $cond$i48 + $__pos | 0;
  if (!$sub8) $__s$addr$1 = $__s; else {
   __ZNSt3__211char_traitsIcE4moveEPcPKcm($add$ptr + $__n | 0, $add$ptr, $sub8) | 0;
   $__s$addr$1 = $add$ptr >>> 0 <= $__s >>> 0 & ($cond$i48 + $cond$i | 0) >>> 0 > $__s >>> 0 ? $__s + $__n | 0 : $__s;
  }
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($add$ptr, $__s$addr$1, $__n) | 0;
  $add = $cond$i + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i48 + $add | 0, $ref$tmp);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp6$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp2 = sp + 16 | 0;
 $agg$tmp4 = sp + 8 | 0;
 $agg$tmp6 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 53411);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 53417);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 52155);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($this) {
 $this = $this | 0;
 var $0 = 0, $3 = 0, $Length = 0, $Name = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call2 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp$byval_copy = sp + 24 | 0;
 $Length = sp + 16 | 0;
 $Name = sp + 8 | 0;
 $agg$tmp = sp;
 HEAP32[$Length >> 2] = 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this, $Length) | 0) $retval$1 = 0; else {
  $call2 = __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0;
  $0 = HEAP32[$Length >> 2] | 0;
  if (($0 + -1 | 0) >>> 0 < $call2 >>> 0) {
   $3 = HEAP32[$this >> 2] | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Name, $3, $3 + $0 | 0);
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + $0;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53714);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   if (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($Name, $agg$tmp$byval_copy) | 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_($this) | 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Name) | 0;
   $retval$1 = $retval$0;
  } else $retval$1 = 0;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _stbi__tga_test($s) {
 $s = $s | 0;
 var $5 = 0, $res = 0, $s$addr = 0, $sz = 0, $tga_color_type = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 12 | 0;
 $res = sp + 8 | 0;
 $sz = sp + 4 | 0;
 $tga_color_type = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$res >> 2] = 0;
 _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$tga_color_type >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 do if ((HEAP32[$tga_color_type >> 2] | 0) <= 1) {
  HEAP32[$sz >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  $5 = HEAP32[$sz >> 2] | 0;
  if ((HEAP32[$tga_color_type >> 2] | 0) == 1) {
   if (($5 | 0) != 1 & (HEAP32[$sz >> 2] | 0) != 9) break;
   _stbi__skip(HEAP32[$s$addr >> 2] | 0, 4);
   HEAP32[$sz >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   if ((HEAP32[$sz >> 2] | 0) != 8 & (HEAP32[$sz >> 2] | 0) != 15 & (HEAP32[$sz >> 2] | 0) != 16 & (HEAP32[$sz >> 2] | 0) != 24 & (HEAP32[$sz >> 2] | 0) != 32) break;
   _stbi__skip(HEAP32[$s$addr >> 2] | 0, 4);
  } else {
   if (($5 | 0) != 2 & (HEAP32[$sz >> 2] | 0) != 3 & (HEAP32[$sz >> 2] | 0) != 10 & (HEAP32[$sz >> 2] | 0) != 11) break;
   _stbi__skip(HEAP32[$s$addr >> 2] | 0, 9);
  }
  if ((_stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0) >= 1) if ((_stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0) >= 1) {
   HEAP32[$sz >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   if (!((HEAP32[$tga_color_type >> 2] | 0) == 1 & (HEAP32[$sz >> 2] | 0) != 8 & (HEAP32[$sz >> 2] | 0) != 16)) if (!((HEAP32[$sz >> 2] | 0) != 8 & (HEAP32[$sz >> 2] | 0) != 15 & (HEAP32[$sz >> 2] | 0) != 16 & (HEAP32[$sz >> 2] | 0) != 24 & (HEAP32[$sz >> 2] | 0) != 32)) HEAP32[$res >> 2] = 1;
  }
 } while (0);
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$res >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $MemberType = 0, $agg$tmp = 0, $agg$tmp6 = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp6 = sp + 8 | 0;
 $agg$tmp8 = sp;
 $MemberType = $this + 12 | 0;
 $0 = HEAP32[$MemberType >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 127]($0, $s);
 if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$MemberType >> 2] | 0, $s) | 0) label = 3; else if (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$MemberType >> 2] | 0, $s) | 0) label = 3; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 52157);
  HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp8$byval_copy);
 }
 if ((label | 0) == 3) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
  HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp8$byval_copy);
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $s);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, 56072);
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN6DrMesh3addERK6DrVec3S2_RK6DrVec214Triangle_Point($this, $vertex, $normal, $text_coord, $point_number) {
 $this = $this | 0;
 $vertex = $vertex | 0;
 $normal = $normal | 0;
 $text_coord = $text_coord | 0;
 $point_number = $point_number | 0;
 var $$sink = 0.0, $$sink6 = 0.0, $$sink7 = 0.0, $8 = 0, $__end_$i = 0, $v = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $v = sp;
 HEAP32[$v >> 2] = HEAP32[$vertex >> 2];
 HEAP32[$v + 4 >> 2] = HEAP32[$vertex + 4 >> 2];
 HEAP32[$v + 8 >> 2] = HEAP32[$vertex + 8 >> 2];
 HEAP32[$v + 12 >> 2] = HEAP32[$normal >> 2];
 HEAP32[$v + 16 >> 2] = HEAP32[$normal + 4 >> 2];
 HEAP32[$v + 20 >> 2] = HEAP32[$normal + 8 >> 2];
 HEAP32[$v + 24 >> 2] = HEAP32[$text_coord >> 2];
 HEAP32[$v + 28 >> 2] = HEAP32[$text_coord + 4 >> 2];
 switch ($point_number | 0) {
 case 0:
  {
   $$sink = 0.0;
   $$sink6 = 0.0;
   $$sink7 = 1.0;
   label = 4;
   break;
  }
 case 1:
  {
   $$sink = 0.0;
   $$sink6 = 1.0;
   $$sink7 = 0.0;
   label = 4;
   break;
  }
 case 2:
  {
   $$sink = 1.0;
   $$sink6 = 0.0;
   $$sink7 = 0.0;
   label = 4;
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 4) {
  HEAPF32[$v + 32 >> 2] = $$sink7;
  HEAPF32[$v + 36 >> 2] = $$sink6;
  HEAPF32[$v + 40 >> 2] = $$sink;
 }
 $__end_$i = $this + 16 | 0;
 $8 = HEAP32[$__end_$i >> 2] | 0;
 if (($8 | 0) == (HEAP32[$this + 20 >> 2] | 0)) __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this + 12 | 0, $v); else {
  dest = $8;
  src = $v;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 44;
 }
 STACKTOP = sp;
 return;
}

function __sg_resolve_default_pass_action($from, $to) {
 $from = $from | 0;
 $to = $to | 0;
 var $5 = 0, $from$addr = 0, $i = 0, $to$addr = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $from$addr = sp + 8 | 0;
 $to$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$from$addr >> 2] = $from;
 HEAP32[$to$addr >> 2] = $to;
 if (!((HEAP32[$from$addr >> 2] | 0) != 0 & (HEAP32[$to$addr >> 2] | 0) != 0)) ___assert_fail(39671, 21600, 4125, 39682);
 dest = HEAP32[$to$addr >> 2] | 0;
 src = HEAP32[$from$addr >> 2] | 0;
 stop = dest + 104 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$i >> 2] = 0;
 while (1) {
  $5 = HEAP32[$to$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= 4) break;
  if (!(HEAP32[$5 + 4 + ((HEAP32[$i >> 2] | 0) * 20 | 0) >> 2] | 0)) {
   HEAP32[(HEAP32[$to$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 20 | 0) >> 2] = 1;
   HEAPF32[(HEAP32[$to$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 20 | 0) + 4 >> 2] = .5;
   HEAPF32[(HEAP32[$to$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 20 | 0) + 4 + 4 >> 2] = .5;
   HEAPF32[(HEAP32[$to$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 20 | 0) + 4 + 8 >> 2] = .5;
   HEAPF32[(HEAP32[$to$addr >> 2] | 0) + 4 + ((HEAP32[$i >> 2] | 0) * 20 | 0) + 4 + 12 >> 2] = 1.0;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (!(HEAP32[$5 + 84 >> 2] | 0)) {
  HEAP32[(HEAP32[$to$addr >> 2] | 0) + 84 >> 2] = 1;
  HEAPF32[(HEAP32[$to$addr >> 2] | 0) + 84 + 4 >> 2] = 1.0;
 }
 if (HEAP32[(HEAP32[$to$addr >> 2] | 0) + 92 >> 2] | 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$to$addr >> 2] | 0) + 92 >> 2] = 1;
 HEAP8[(HEAP32[$to$addr >> 2] | 0) + 92 + 4 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISC_EERKT_($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__nd$0 = 0, $__nd$1$in = 0, $__nd_ptr$0 = 0, $__nd_ptr$1 = 0, $__value_ = 0, $__value_$i$i$i$i = 0, $call2 = 0, $retval$0 = 0, label = 0;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 $call2 = __ZNKSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE10__root_ptrEv($this) | 0;
 do if (!$0) {
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i;
  $retval$0 = $__value_$i$i$i$i;
 } else {
  $__nd$0 = $0;
  $__nd_ptr$0 = $call2;
  while (1) {
   $__value_ = $__nd$0 + 16 | 0;
   if (__ZNK13TPPLPartition12ScanLineEdgeltERKS0_($__v, $__value_) | 0) {
    $1 = HEAP32[$__nd$0 >> 2] | 0;
    if (!$1) {
     label = 5;
     break;
    } else {
     $__nd$1$in = $1;
     $__nd_ptr$1 = $__nd$0;
    }
   } else {
    if (!(__ZNK13TPPLPartition12ScanLineEdgeltERKS0_($__value_, $__v) | 0)) {
     label = 9;
     break;
    }
    $2 = $__nd$0 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (!$3) {
     label = 8;
     break;
    } else {
     $__nd$1$in = $3;
     $__nd_ptr$1 = $2;
    }
   }
   $__nd$0 = $__nd$1$in;
   $__nd_ptr$0 = $__nd_ptr$1;
  }
  if ((label | 0) == 5) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd$0;
   break;
  } else if ((label | 0) == 8) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $2;
   break;
  } else if ((label | 0) == 9) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd_ptr$0;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __sg_init_pool($pool, $num) {
 $pool = $pool | 0;
 $num = $num | 0;
 var $21 = 0, $23 = 0, $25 = 0, $call = 0, $call9 = 0, $gen_ctrs_size = 0, $i = 0, $num$addr = 0, $pool$addr = 0, $queue_top18 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp + 12 | 0;
 $num$addr = sp + 8 | 0;
 $gen_ctrs_size = sp + 4 | 0;
 $i = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$num$addr >> 2] = $num;
 if (!((HEAP32[$pool$addr >> 2] | 0) != 0 & (HEAP32[$num$addr >> 2] | 0) >= 1)) ___assert_fail(29462, 21600, 12762, 29481);
 HEAP32[HEAP32[$pool$addr >> 2] >> 2] = (HEAP32[$num$addr >> 2] | 0) + 1;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$gen_ctrs_size >> 2] = HEAP32[HEAP32[$pool$addr >> 2] >> 2] << 2;
 $call = _malloc(HEAP32[$gen_ctrs_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] = $call;
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(29495, 21600, 12769, 29481);
 _memset(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0, 0, HEAP32[$gen_ctrs_size >> 2] | 0) | 0;
 $call9 = _malloc(HEAP32[$num$addr >> 2] << 2) | 0;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] = $call9;
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(29510, 21600, 12773, 29481);
 HEAP32[$i >> 2] = (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) < 1) break;
  $21 = HEAP32[$i >> 2] | 0;
  $23 = HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0;
  $queue_top18 = (HEAP32[$pool$addr >> 2] | 0) + 4 | 0;
  $25 = HEAP32[$queue_top18 >> 2] | 0;
  HEAP32[$queue_top18 >> 2] = $25 + 1;
  HEAP32[$23 + ($25 << 2) >> 2] = $21;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 STACKTOP = sp;
 return;
}

function __sgl_init_pool($pool, $num) {
 $pool = $pool | 0;
 $num = $num | 0;
 var $21 = 0, $23 = 0, $25 = 0, $call = 0, $call9 = 0, $gen_ctrs_size = 0, $i = 0, $num$addr = 0, $pool$addr = 0, $queue_top18 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp + 12 | 0;
 $num$addr = sp + 8 | 0;
 $gen_ctrs_size = sp + 4 | 0;
 $i = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$num$addr >> 2] = $num;
 if (!((HEAP32[$pool$addr >> 2] | 0) != 0 & (HEAP32[$num$addr >> 2] | 0) >= 1)) ___assert_fail(29462, 23371, 2085, 41483);
 HEAP32[HEAP32[$pool$addr >> 2] >> 2] = (HEAP32[$num$addr >> 2] | 0) + 1;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$gen_ctrs_size >> 2] = HEAP32[HEAP32[$pool$addr >> 2] >> 2] << 2;
 $call = _malloc(HEAP32[$gen_ctrs_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] = $call;
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(29495, 23371, 2092, 41483);
 _memset(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0, 0, HEAP32[$gen_ctrs_size >> 2] | 0) | 0;
 $call9 = _malloc(HEAP32[$num$addr >> 2] << 2) | 0;
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] = $call9;
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(29510, 23371, 2096, 41483);
 HEAP32[$i >> 2] = (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) < 1) break;
  $21 = HEAP32[$i >> 2] | 0;
  $23 = HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0;
  $queue_top18 = (HEAP32[$pool$addr >> 2] | 0) + 4 | 0;
  $25 = HEAP32[$queue_top18 >> 2] | 0;
  HEAP32[$queue_top18 >> 2] = $25 + 1;
  HEAP32[$23 + ($25 << 2) >> 2] = $21;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 STACKTOP = sp;
 return;
}

function __sfetch_validate_request($ctx, $req) {
 $ctx = $ctx | 0;
 $req = $req | 0;
 var $ctx$addr = 0, $req$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $ctx$addr = sp + 4 | 0;
 $req$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 HEAP32[$req$addr >> 2] = $req;
 do if ((HEAP32[(HEAP32[$req$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$ctx$addr >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) {
  _puts(42380) | 0;
  HEAP8[$retval >> 0] = 0;
 } else {
  if (!(HEAP32[(HEAP32[$req$addr >> 2] | 0) + 8 >> 2] | 0)) {
   _puts(42431) | 0;
   HEAP8[$retval >> 0] = 0;
   break;
  }
  if ((_strlen(HEAP32[(HEAP32[$req$addr >> 2] | 0) + 8 >> 2] | 0) | 0) >>> 0 >= 1023) {
   _puts(42479) | 0;
   HEAP8[$retval >> 0] = 0;
   break;
  }
  if (!(HEAP32[(HEAP32[$req$addr >> 2] | 0) + 12 >> 2] | 0)) {
   _puts(42560) | 0;
   HEAP8[$retval >> 0] = 0;
   break;
  }
  if ((HEAP32[(HEAP32[$req$addr >> 2] | 0) + 24 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$req$addr >> 2] | 0) + 20 >> 2] | 0) >>> 0) {
   _puts(42611) | 0;
   HEAP8[$retval >> 0] = 0;
   break;
  }
  if (HEAP32[(HEAP32[$req$addr >> 2] | 0) + 28 >> 2] | 0) if (!(HEAP32[(HEAP32[$req$addr >> 2] | 0) + 32 >> 2] | 0)) {
   _puts(42688) | 0;
   HEAP8[$retval >> 0] = 0;
   break;
  }
  if (!(HEAP32[(HEAP32[$req$addr >> 2] | 0) + 28 >> 2] | 0)) if ((HEAP32[(HEAP32[$req$addr >> 2] | 0) + 32 >> 2] | 0) >>> 0 > 0) {
   _puts(42779) | 0;
   HEAP8[$retval >> 0] = 0;
   break;
  }
  if ((HEAP32[(HEAP32[$req$addr >> 2] | 0) + 32 >> 2] | 0) >>> 0 > 128) {
   _puts(42870) | 0;
   HEAP8[$retval >> 0] = 0;
   break;
  } else {
   HEAP8[$retval >> 0] = 1;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP8[$retval >> 0] & 1 | 0;
}

function _stbi_zlib_decode_malloc_guesssize_headerflag($buffer, $len, $initial_size, $outlen, $parse_header) {
 $buffer = $buffer | 0;
 $len = $len | 0;
 $initial_size = $initial_size | 0;
 $outlen = $outlen | 0;
 $parse_header = $parse_header | 0;
 var $14 = 0, $a = 0, $buffer$addr = 0, $initial_size$addr = 0, $len$addr = 0, $outlen$addr = 0, $p = 0, $parse_header$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 $retval = sp + 4100 | 0;
 $buffer$addr = sp + 4096 | 0;
 $len$addr = sp + 4092 | 0;
 $initial_size$addr = sp + 4088 | 0;
 $outlen$addr = sp + 4084 | 0;
 $parse_header$addr = sp + 4080 | 0;
 $a = sp + 8 | 0;
 $p = sp;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$len$addr >> 2] = $len;
 HEAP32[$initial_size$addr >> 2] = $initial_size;
 HEAP32[$outlen$addr >> 2] = $outlen;
 HEAP32[$parse_header$addr >> 2] = $parse_header;
 HEAP32[$p >> 2] = _stbi__malloc(HEAP32[$initial_size$addr >> 2] | 0) | 0;
 if (!(HEAP32[$p >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $14 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 HEAP32[$a >> 2] = HEAP32[$buffer$addr >> 2];
 HEAP32[$a + 4 >> 2] = (HEAP32[$buffer$addr >> 2] | 0) + (HEAP32[$len$addr >> 2] | 0);
 if (!(_stbi__do_zlib($a, HEAP32[$p >> 2] | 0, HEAP32[$initial_size$addr >> 2] | 0, 1, HEAP32[$parse_header$addr >> 2] | 0) | 0)) {
  _free(HEAP32[$a + 20 >> 2] | 0);
  HEAP32[$retval >> 2] = 0;
  $14 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 if (HEAP32[$outlen$addr >> 2] | 0) HEAP32[HEAP32[$outlen$addr >> 2] >> 2] = (HEAP32[$a + 16 >> 2] | 0) - (HEAP32[$a + 20 >> 2] | 0);
 HEAP32[$retval >> 2] = HEAP32[$a + 20 >> 2];
 $14 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $Dimension = 0, $agg$tmp = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp12$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp8 = sp + 8 | 0;
 $agg$tmp12 = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56182);
 HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp12$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp12$byval_copy);
 $Dimension = $this + 12 | 0;
 if (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($Dimension) | 0) __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($Dimension) | 0, $S); else if (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($Dimension) | 0) {
  __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp8, $Dimension);
  HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
  HEAP32[$agg$tmp12$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp12$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 51793);
 HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
 HEAP32[$agg$tmp12$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp12$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbi__free_jpeg_components($z, $ncomp, $why) {
 $z = $z | 0;
 $ncomp = $ncomp | 0;
 $why = $why | 0;
 var $i = 0, $ncomp$addr = 0, $why$addr = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $z$addr = sp + 12 | 0;
 $ncomp$addr = sp + 8 | 0;
 $why$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$ncomp$addr >> 2] = $ncomp;
 HEAP32[$why$addr >> 2] = $why;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$ncomp$addr >> 2] | 0)) break;
  if (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 48 >> 2] | 0) {
   _free(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 48 >> 2] | 0);
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 48 >> 2] = 0;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 44 >> 2] = 0;
  }
  if (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 52 >> 2] | 0) {
   _free(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 52 >> 2] | 0);
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 52 >> 2] = 0;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 60 >> 2] = 0;
  }
  if (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 56 >> 2] | 0) {
   _free(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 56 >> 2] | 0);
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 18076 + ((HEAP32[$i >> 2] | 0) * 72 | 0) + 56 >> 2] = 0;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$why$addr >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp6$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 16 | 0;
 $agg$tmp6 = sp + 8 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55457);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 $0 = $this + 16 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp2;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 55465);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 52155);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 STACKTOP = sp;
 return;
}

function __sg_gl_compile_shader($stage, $src) {
 $stage = $stage | 0;
 $src = $src | 0;
 var $compile_status = 0, $gl_shd = 0, $log_buf = 0, $log_len = 0, $src$addr = 0, $stage$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $stage$addr = sp + 20 | 0;
 $src$addr = sp + 16 | 0;
 $gl_shd = sp + 12 | 0;
 $compile_status = sp + 8 | 0;
 $log_len = sp + 4 | 0;
 $log_buf = sp;
 HEAP32[$stage$addr >> 2] = $stage;
 HEAP32[$src$addr >> 2] = $src;
 if (!(HEAP32[$src$addr >> 2] | 0)) ___assert_fail(37989, 21600, 5966, 37993);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5967, 37993);
 HEAP32[$gl_shd >> 2] = _glCreateShader(__sg_gl_shader_stage(HEAP32[$stage$addr >> 2] | 0) | 0) | 0;
 _glShaderSource(HEAP32[$gl_shd >> 2] | 0, 1, $src$addr | 0, 0);
 _glCompileShader(HEAP32[$gl_shd >> 2] | 0);
 HEAP32[$compile_status >> 2] = 0;
 _glGetShaderiv(HEAP32[$gl_shd >> 2] | 0, 35713, $compile_status | 0);
 if (!(HEAP32[$compile_status >> 2] | 0)) {
  HEAP32[$log_len >> 2] = 0;
  _glGetShaderiv(HEAP32[$gl_shd >> 2] | 0, 35716, $log_len | 0);
  do if ((HEAP32[$log_len >> 2] | 0) > 0) {
   HEAP32[$log_buf >> 2] = _malloc(HEAP32[$log_len >> 2] | 0) | 0;
   _glGetShaderInfoLog(HEAP32[$gl_shd >> 2] | 0, HEAP32[$log_len >> 2] | 0, $log_len | 0, HEAP32[$log_buf >> 2] | 0);
   if (HEAP32[$log_buf >> 2] | 0) {
    _puts(HEAP32[$log_buf >> 2] | 0) | 0;
    _free(HEAP32[$log_buf >> 2] | 0);
    break;
   } else ___assert_fail(37759, 21600, 5980, 37993);
  } while (0);
  _glDeleteShader(HEAP32[$gl_shd >> 2] | 0);
  HEAP32[$gl_shd >> 2] = 0;
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return HEAP32[$gl_shd >> 2] | 0;
 } else ___assert_fail(29811, 21600, 5986, 37993);
 return 0;
}

function __sg_apply_bindings($pip, $vbs, $vb_offsets, $num_vbs, $ib, $ib_offset, $vs_imgs, $num_vs_imgs, $fs_imgs, $num_fs_imgs) {
 $pip = $pip | 0;
 $vbs = $vbs | 0;
 $vb_offsets = $vb_offsets | 0;
 $num_vbs = $num_vbs | 0;
 $ib = $ib | 0;
 $ib_offset = $ib_offset | 0;
 $vs_imgs = $vs_imgs | 0;
 $num_vs_imgs = $num_vs_imgs | 0;
 $fs_imgs = $fs_imgs | 0;
 $num_fs_imgs = $num_fs_imgs | 0;
 var $fs_imgs$addr = 0, $ib$addr = 0, $ib_offset$addr = 0, $num_fs_imgs$addr = 0, $num_vbs$addr = 0, $num_vs_imgs$addr = 0, $pip$addr = 0, $vb_offsets$addr = 0, $vbs$addr = 0, $vs_imgs$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $pip$addr = sp + 36 | 0;
 $vbs$addr = sp + 32 | 0;
 $vb_offsets$addr = sp + 28 | 0;
 $num_vbs$addr = sp + 24 | 0;
 $ib$addr = sp + 20 | 0;
 $ib_offset$addr = sp + 16 | 0;
 $vs_imgs$addr = sp + 12 | 0;
 $num_vs_imgs$addr = sp + 8 | 0;
 $fs_imgs$addr = sp + 4 | 0;
 $num_fs_imgs$addr = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 HEAP32[$vbs$addr >> 2] = $vbs;
 HEAP32[$vb_offsets$addr >> 2] = $vb_offsets;
 HEAP32[$num_vbs$addr >> 2] = $num_vbs;
 HEAP32[$ib$addr >> 2] = $ib;
 HEAP32[$ib_offset$addr >> 2] = $ib_offset;
 HEAP32[$vs_imgs$addr >> 2] = $vs_imgs;
 HEAP32[$num_vs_imgs$addr >> 2] = $num_vs_imgs;
 HEAP32[$fs_imgs$addr >> 2] = $fs_imgs;
 HEAP32[$num_fs_imgs$addr >> 2] = $num_fs_imgs;
 __sg_gl_apply_bindings(HEAP32[$pip$addr >> 2] | 0, HEAP32[$vbs$addr >> 2] | 0, HEAP32[$vb_offsets$addr >> 2] | 0, HEAP32[$num_vbs$addr >> 2] | 0, HEAP32[$ib$addr >> 2] | 0, HEAP32[$ib_offset$addr >> 2] | 0, HEAP32[$vs_imgs$addr >> 2] | 0, HEAP32[$num_vs_imgs$addr >> 2] | 0, HEAP32[$fs_imgs$addr >> 2] | 0, HEAP32[$num_fs_imgs$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $conv1 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $mul = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0;
 $conv1 = $c & 255;
 L1 : do if (!$conv1) $retval$0 = $s + (_strlen($s) | 0) | 0; else {
  if (!($s & 3)) $s$addr$0$lcssa = $s; else {
   $1 = $c & 255;
   $s$addr$036 = $s;
   while (1) {
    $2 = HEAP8[$s$addr$036 >> 0] | 0;
    if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 == $1 << 24 >> 24) {
     $retval$0 = $s$addr$036;
     break L1;
    }
    $incdec$ptr = $s$addr$036 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else $s$addr$036 = $incdec$ptr;
   }
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  $4 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  L10 : do if (!(($4 & -2139062144 ^ -2139062144) & $4 + -16843009)) {
   $5 = $4;
   $w$032 = $s$addr$0$lcssa;
   while (1) {
    $xor = $5 ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $w$0$lcssa = $w$032;
     break L10;
    }
    $incdec$ptr19 = $w$032 + 4 | 0;
    $5 = HEAP32[$incdec$ptr19 >> 2] | 0;
    if (($5 & -2139062144 ^ -2139062144) & $5 + -16843009 | 0) {
     $w$0$lcssa = $incdec$ptr19;
     break;
    } else $w$032 = $incdec$ptr19;
   }
  } else $w$0$lcssa = $s$addr$0$lcssa; while (0);
  $7 = $c & 255;
  $s$addr$1 = $w$0$lcssa;
  while (1) {
   $8 = HEAP8[$s$addr$1 >> 0] | 0;
   if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $7 << 24 >> 24) {
    $retval$0 = $s$addr$1;
    break;
   } else $s$addr$1 = $s$addr$1 + 1 | 0;
  }
 } while (0);
 return $retval$0 | 0;
}

function _stbi__zhuffman_decode_slowpath($a, $z) {
 $a = $a | 0;
 $z = $z | 0;
 var $28 = 0, $6 = 0, $a$addr = 0, $b = 0, $code_buffer12 = 0, $k = 0, $num_bits = 0, $retval = 0, $s = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 20 | 0;
 $a$addr = sp + 16 | 0;
 $z$addr = sp + 12 | 0;
 $b = sp + 8 | 0;
 $s = sp + 4 | 0;
 $k = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$k >> 2] = _stbi__bit_reverse(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0, 16) | 0;
 HEAP32[$s >> 2] = 10;
 while (1) {
  $6 = HEAP32[$s >> 2] | 0;
  if ((HEAP32[$k >> 2] | 0) < (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 1056 + (HEAP32[$s >> 2] << 2) >> 2] | 0)) break;
  HEAP32[$s >> 2] = $6 + 1;
 }
 if (($6 | 0) == 16) {
  HEAP32[$retval >> 2] = -1;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 HEAP32[$b >> 2] = (HEAP32[$k >> 2] >> 16 - (HEAP32[$s >> 2] | 0)) - (HEAPU16[(HEAP32[$z$addr >> 2] | 0) + 1024 + (HEAP32[$s >> 2] << 1) >> 1] | 0) + (HEAPU16[(HEAP32[$z$addr >> 2] | 0) + 1124 + (HEAP32[$s >> 2] << 1) >> 1] | 0);
 if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 1156 + (HEAP32[$b >> 2] | 0) >> 0] | 0 | 0) != (HEAP32[$s >> 2] | 0)) ___assert_fail(48804, 47433, 3991, 48820);
 $code_buffer12 = (HEAP32[$a$addr >> 2] | 0) + 12 | 0;
 HEAP32[$code_buffer12 >> 2] = (HEAP32[$code_buffer12 >> 2] | 0) >>> (HEAP32[$s >> 2] | 0);
 $num_bits = (HEAP32[$a$addr >> 2] | 0) + 8 | 0;
 HEAP32[$num_bits >> 2] = (HEAP32[$num_bits >> 2] | 0) - (HEAP32[$s >> 2] | 0);
 HEAP32[$retval >> 2] = HEAPU16[(HEAP32[$z$addr >> 2] | 0) + 1444 + (HEAP32[$b >> 2] << 1) >> 1];
 $28 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function _stbtt__csctx_rccurve_to($ctx, $dx1, $dy1, $dx2, $dy2, $dx3, $dy3) {
 $ctx = $ctx | 0;
 $dx1 = +$dx1;
 $dy1 = +$dy1;
 $dx2 = +$dx2;
 $dy2 = +$dy2;
 $dx3 = +$dx3;
 $dy3 = +$dy3;
 var $ctx$addr = 0, $cx1 = 0, $cx2 = 0, $cy1 = 0, $cy2 = 0, $dx1$addr = 0, $dx2$addr = 0, $dx3$addr = 0, $dy1$addr = 0, $dy2$addr = 0, $dy3$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $ctx$addr = sp + 40 | 0;
 $dx1$addr = sp + 36 | 0;
 $dy1$addr = sp + 32 | 0;
 $dx2$addr = sp + 28 | 0;
 $dy2$addr = sp + 24 | 0;
 $dx3$addr = sp + 20 | 0;
 $dy3$addr = sp + 16 | 0;
 $cx1 = sp + 12 | 0;
 $cy1 = sp + 8 | 0;
 $cx2 = sp + 4 | 0;
 $cy2 = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 HEAPF32[$dx1$addr >> 2] = $dx1;
 HEAPF32[$dy1$addr >> 2] = $dy1;
 HEAPF32[$dx2$addr >> 2] = $dx2;
 HEAPF32[$dy2$addr >> 2] = $dy2;
 HEAPF32[$dx3$addr >> 2] = $dx3;
 HEAPF32[$dy3$addr >> 2] = $dy3;
 HEAPF32[$cx1 >> 2] = +HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 16 >> 2] + +HEAPF32[$dx1$addr >> 2];
 HEAPF32[$cy1 >> 2] = +HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 20 >> 2] + +HEAPF32[$dy1$addr >> 2];
 HEAPF32[$cx2 >> 2] = +HEAPF32[$cx1 >> 2] + +HEAPF32[$dx2$addr >> 2];
 HEAPF32[$cy2 >> 2] = +HEAPF32[$cy1 >> 2] + +HEAPF32[$dy2$addr >> 2];
 HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 16 >> 2] = +HEAPF32[$cx2 >> 2] + +HEAPF32[$dx3$addr >> 2];
 HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 20 >> 2] = +HEAPF32[$cy2 >> 2] + +HEAPF32[$dy3$addr >> 2];
 _stbtt__csctx_v(HEAP32[$ctx$addr >> 2] | 0, 4, ~~+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 16 >> 2], ~~+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 20 >> 2], ~~+HEAPF32[$cx1 >> 2], ~~+HEAPF32[$cy1 >> 2], ~~+HEAPF32[$cx2 >> 2], ~~+HEAPF32[$cy2 >> 2]);
 STACKTOP = sp;
 return;
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE6insertINS_21__list_const_iteratorIS1_PvEEEENS_15__list_iteratorIS1_S7_EES8_T_SB_PNS_9enable_ifIXsr19__is_input_iteratorISB_EE5valueEvE4typeE($this, $__p, $__f, $__l, $0) {
 $this = $this | 0;
 $__p = $__p | 0;
 $__f = $__f | 0;
 $__l = $__l | 0;
 $0 = $0 | 0;
 var $$in = 0, $$pre$phiZ2D = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $__ds$0 = 0, $__e$sroa$0$0$in = 0, $__value_$i$i$i21 = 0, $call$i$i$i$i = 0, $call$i$i$i44 = 0;
 $1 = HEAP32[$__p >> 2] | 0;
 $2 = HEAP32[$__f >> 2] | 0;
 $3 = HEAP32[$__l >> 2] | 0;
 if (($2 | 0) == ($3 | 0)) $$pre$phiZ2D = $1; else {
  $call$i$i$i$i = __Znwm(20) | 0;
  HEAP32[$call$i$i$i$i >> 2] = 0;
  __ZN8TPPLPolyC2ERKS_($call$i$i$i$i + 8 | 0, $2 + 8 | 0);
  $4 = HEAP32[$2 + 4 >> 2] | 0;
  HEAP32[$__f >> 2] = $4;
  $$in = $4;
  $__ds$0 = 1;
  $__e$sroa$0$0$in = $call$i$i$i$i;
  while (1) {
   $5 = $$in;
   if (($3 | 0) == ($5 | 0)) break;
   $call$i$i$i44 = __Znwm(20) | 0;
   __ZN8TPPLPolyC2ERKS_($call$i$i$i44 + 8 | 0, $$in + 8 | 0);
   HEAP32[$__e$sroa$0$0$in + 4 >> 2] = $call$i$i$i44;
   HEAP32[$call$i$i$i44 >> 2] = $__e$sroa$0$0$in;
   $7 = HEAP32[$5 + 4 >> 2] | 0;
   HEAP32[$__f >> 2] = $7;
   $$in = $7;
   $__ds$0 = $__ds$0 + 1 | 0;
   $__e$sroa$0$0$in = $call$i$i$i44;
  }
  $8 = HEAP32[$1 >> 2] | 0;
  HEAP32[$8 + 4 >> 2] = $call$i$i$i$i;
  HEAP32[$call$i$i$i$i >> 2] = $8;
  HEAP32[$1 >> 2] = $__e$sroa$0$0$in;
  HEAP32[$__e$sroa$0$0$in + 4 >> 2] = $1;
  $__value_$i$i$i21 = $this + 8 | 0;
  HEAP32[$__value_$i$i$i21 >> 2] = (HEAP32[$__value_$i$i$i21 >> 2] | 0) + $__ds$0;
  $$pre$phiZ2D = $call$i$i$i$i;
 }
 return $$pre$phiZ2D | 0;
}

function __sapp_emsc_wheel_cb($emsc_type, $emsc_event, $user_data) {
 $emsc_type = $emsc_type | 0;
 $emsc_event = $emsc_event | 0;
 $user_data = $user_data | 0;
 var $emsc_event$addr = 0, $scale = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $emsc_event$addr = sp + 8 | 0;
 $scale = sp;
 HEAP32[sp + 12 >> 2] = $emsc_type;
 HEAP32[$emsc_event$addr >> 2] = $emsc_event;
 HEAP32[sp + 4 >> 2] = $user_data;
 if (!(__sapp_events_enabled() | 0)) {
  __sapp_emsc_update_keyboard_state();
  __sapp_emsc_update_mouse_lock_state();
  STACKTOP = sp;
  return 1;
 }
 __sapp_init_event(6);
 if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 24 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 2;
 if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 28 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 1;
 if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 32 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 4;
 if (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 36 >> 2] | 0) HEAP32[14688] = HEAP32[14688] | 8;
 switch (HEAP32[(HEAP32[$emsc_event$addr >> 2] | 0) + 96 >> 2] | 0) {
 case 0:
  {
   HEAPF32[$scale >> 2] = -.03999999910593033;
   break;
  }
 case 1:
  {
   HEAPF32[$scale >> 2] = -1.3300000429153442;
   break;
  }
 case 2:
  {
   HEAPF32[$scale >> 2] = -10.0;
   break;
  }
 default:
  HEAPF32[$scale >> 2] = -.10000000149011612;
 }
 HEAPF32[14694] = +HEAPF32[$scale >> 2] * +HEAPF64[(HEAP32[$emsc_event$addr >> 2] | 0) + 72 >> 3];
 HEAPF32[14695] = +HEAPF32[$scale >> 2] * +HEAPF64[(HEAP32[$emsc_event$addr >> 2] | 0) + 80 >> 3];
 __sapp_call_event(58728) | 0;
 __sapp_emsc_update_keyboard_state();
 __sapp_emsc_update_mouse_lock_state();
 STACKTOP = sp;
 return 1;
}

function _sg_setup($desc) {
 $desc = $desc | 0;
 var $desc$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp + 4 | 0;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 14287, 21669);
 if (HEAP32[HEAP32[$desc$addr >> 2] >> 2] | 0) ___assert_fail(21678, 21600, 14288, 21669);
 if (!(HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 140 >> 2] | 0)) {
  _memset(2164080, 0, 1352) | 0;
  _memcpy(2164084, HEAP32[$desc$addr >> 2] | 0, 144) | 0;
  HEAP32[541031] = (HEAP32[541031] | 0) == 0 ? 23 : HEAP32[541031] | 0;
  HEAP32[541032] = (HEAP32[541032] | 0) == 0 ? 42 : HEAP32[541032] | 0;
  HEAP32[541033] = (HEAP32[541033] | 0) == 0 ? 1 : HEAP32[541033] | 0;
  HEAP32[541022] = (HEAP32[541022] | 0) == 0 ? 128 : HEAP32[541022] | 0;
  HEAP32[541023] = (HEAP32[541023] | 0) == 0 ? 128 : HEAP32[541023] | 0;
  HEAP32[541024] = (HEAP32[541024] | 0) == 0 ? 32 : HEAP32[541024] | 0;
  HEAP32[541025] = (HEAP32[541025] | 0) == 0 ? 64 : HEAP32[541025] | 0;
  HEAP32[541026] = (HEAP32[541026] | 0) == 0 ? 16 : HEAP32[541026] | 0;
  HEAP32[541027] = (HEAP32[541027] | 0) == 0 ? 16 : HEAP32[541027] | 0;
  HEAP32[541028] = (HEAP32[541028] | 0) == 0 ? 4194304 : HEAP32[541028] | 0;
  HEAP32[541029] = (HEAP32[541029] | 0) == 0 ? 8388608 : HEAP32[541029] | 0;
  HEAP32[541030] = (HEAP32[541030] | 0) == 0 ? 64 : HEAP32[541030] | 0;
  __sg_setup_pools(2164252, 2164084);
  HEAP32[541057] = 1;
  __sg_setup_backend(2164084);
  HEAP8[2164080] = 1;
  HEAP32[sp >> 2] = _sg_setup_context() | 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(21678, 21600, 14288, 21669);
}

function _fons__blur($stash, $dst, $w, $h, $dstStride, $blur) {
 $stash = $stash | 0;
 $dst = $dst | 0;
 $w = $w | 0;
 $h = $h | 0;
 $dstStride = $dstStride | 0;
 $blur = $blur | 0;
 var $alpha = 0, $blur$addr = 0, $dst$addr = 0, $dstStride$addr = 0, $h$addr = 0, $sigma = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $dst$addr = sp + 24 | 0;
 $w$addr = sp + 20 | 0;
 $h$addr = sp + 16 | 0;
 $dstStride$addr = sp + 12 | 0;
 $blur$addr = sp + 8 | 0;
 $alpha = sp + 4 | 0;
 $sigma = sp;
 HEAP32[sp + 28 >> 2] = $stash;
 HEAP32[$dst$addr >> 2] = $dst;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$dstStride$addr >> 2] = $dstStride;
 HEAP32[$blur$addr >> 2] = $blur;
 if ((HEAP32[$blur$addr >> 2] | 0) < 1) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[$sigma >> 2] = +(HEAP32[$blur$addr >> 2] | 0) * .5773500204086304;
 HEAP32[$alpha >> 2] = ~~((1.0 - +Math_exp(+(-2.299999952316284 / (+HEAPF32[$sigma >> 2] + 1.0)))) * 65536.0);
 _fons__blurRows(HEAP32[$dst$addr >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0, HEAP32[$dstStride$addr >> 2] | 0, HEAP32[$alpha >> 2] | 0);
 _fons__blurCols(HEAP32[$dst$addr >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0, HEAP32[$dstStride$addr >> 2] | 0, HEAP32[$alpha >> 2] | 0);
 _fons__blurRows(HEAP32[$dst$addr >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0, HEAP32[$dstStride$addr >> 2] | 0, HEAP32[$alpha >> 2] | 0);
 _fons__blurCols(HEAP32[$dst$addr >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0, HEAP32[$dstStride$addr >> 2] | 0, HEAP32[$alpha >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sapp_desc_defaults($agg$result, $in_desc) {
 $agg$result = $agg$result | 0;
 $in_desc = $in_desc | 0;
 var $desc = 0, $in_desc$addr = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $in_desc$addr = sp + 100 | 0;
 $desc = sp;
 HEAP32[$in_desc$addr >> 2] = $in_desc;
 dest = $desc;
 src = HEAP32[$in_desc$addr >> 2] | 0;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$desc + 44 >> 2] = (HEAP32[$desc + 44 >> 2] | 0) == 0 ? 640 : HEAP32[$desc + 44 >> 2] | 0;
 HEAP32[$desc + 48 >> 2] = (HEAP32[$desc + 48 >> 2] | 0) == 0 ? 480 : HEAP32[$desc + 48 >> 2] | 0;
 HEAP32[$desc + 52 >> 2] = (HEAP32[$desc + 52 >> 2] | 0) == 0 ? 1 : HEAP32[$desc + 52 >> 2] | 0;
 HEAP32[$desc + 56 >> 2] = (HEAP32[$desc + 56 >> 2] | 0) == 0 ? 1 : HEAP32[$desc + 56 >> 2] | 0;
 HEAP32[$desc + 88 >> 2] = (HEAP32[$desc + 88 >> 2] | 0) == 0 ? 28729 : HEAP32[$desc + 88 >> 2] | 0;
 HEAP32[$desc + 72 >> 2] = (HEAP32[$desc + 72 >> 2] | 0) == 0 ? 8192 : HEAP32[$desc + 72 >> 2] | 0;
 HEAP32[$desc + 80 >> 2] = (HEAP32[$desc + 80 >> 2] | 0) == 0 ? 1 : HEAP32[$desc + 80 >> 2] | 0;
 HEAP32[$desc + 84 >> 2] = (HEAP32[$desc + 84 >> 2] | 0) == 0 ? 2048 : HEAP32[$desc + 84 >> 2] | 0;
 HEAP32[$desc + 64 >> 2] = (HEAP32[$desc + 64 >> 2] | 0) == 0 ? 28736 : HEAP32[$desc + 64 >> 2] | 0;
 dest = $agg$result;
 src = $desc;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $1 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0) $retval$2 = 1; else if (!$thrown_type) $retval$2 = 0; else {
  $1 = ___dynamic_cast($thrown_type, 11360, 11344, 0) | 0;
  if (!$1) $retval$2 = 0; else {
   HEAP32[$info >> 2] = $1;
   HEAP32[$info + 4 >> 2] = 0;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $number_of_dst_type = $info + 48 | 0;
   dest = $dst_ptr_leading_to_static_ptr;
   stop = dest + 36 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
   HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
   HEAP32[$number_of_dst_type >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 3]($1, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$dst_ptr_leading_to_static_ptr >> 2];
    $retval$0 = 1;
   } else $retval$0 = 0;
   $retval$2 = $retval$0;
  }
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _sg_update_buffer($buf_id, $data) {
 $buf_id = $buf_id | 0;
 $data = $data | 0;
 var $buf = 0, $data$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $data$addr = sp + 4 | 0;
 $buf = sp;
 HEAP32[$data$addr >> 2] = $data;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 15010, 23120);
 if (!(HEAP32[$data$addr >> 2] | 0)) ___assert_fail(22952, 21600, 15011, 23120);
 if (!(HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0)) ___assert_fail(22952, 21600, 15011, 23120);
 if ((HEAP32[(HEAP32[$data$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(22952, 21600, 15011, 23120);
 HEAP32[$buf >> 2] = __sg_lookup_buffer(2164252, HEAP32[$buf_id >> 2] | 0) | 0;
 if (!(HEAP32[$buf >> 2] | 0 ? (HEAP32[(HEAP32[$data$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 0 : 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$buf >> 2] | 0) + 8 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 if (!(__sg_validate_update_buffer(HEAP32[$buf >> 2] | 0, HEAP32[$data$addr >> 2] | 0) | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$data$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$buf >> 2] | 0) + 12 >> 2] | 0) >>> 0) ___assert_fail(23137, 21600, 15015, 23120);
 if ((HEAP32[(HEAP32[$buf >> 2] | 0) + 12 + 20 >> 2] | 0) == (HEAP32[541057] | 0)) ___assert_fail(23173, 21600, 15017, 23120);
 if ((HEAP32[(HEAP32[$buf >> 2] | 0) + 12 + 24 >> 2] | 0) == (HEAP32[541057] | 0)) ___assert_fail(23220, 21600, 15019, 23120);
 __sg_update_buffer(HEAP32[$buf >> 2] | 0, HEAP32[$data$addr >> 2] | 0);
 HEAP32[(HEAP32[$buf >> 2] | 0) + 12 + 20 >> 2] = HEAP32[541057];
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 12 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEEC2EmmS9_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 12 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEC2ERKS6_(HEAP32[$__end_ >> 2] | 0, $__x);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 12;
  __ZNSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __sapp_emsc_register_eventhandlers() {
 _emscripten_set_mousedown_callback_on_thread(58996, 0, 1, 9, 2) | 0;
 _emscripten_set_mouseup_callback_on_thread(58996, 0, 1, 9, 2) | 0;
 _emscripten_set_mousemove_callback_on_thread(58996, 0, 1, 9, 2) | 0;
 _emscripten_set_mouseenter_callback_on_thread(58996, 0, 1, 9, 2) | 0;
 _emscripten_set_mouseleave_callback_on_thread(58996, 0, 1, 9, 2) | 0;
 _emscripten_set_wheel_callback_on_thread(58996, 0, 1, 10, 2) | 0;
 _emscripten_set_keydown_callback_on_thread(2, 0, 1, 11, 2) | 0;
 _emscripten_set_keyup_callback_on_thread(2, 0, 1, 11, 2) | 0;
 _emscripten_set_keypress_callback_on_thread(2, 0, 1, 11, 2) | 0;
 _emscripten_set_touchstart_callback_on_thread(58996, 0, 1, 12, 2) | 0;
 _emscripten_set_touchmove_callback_on_thread(58996, 0, 1, 12, 2) | 0;
 _emscripten_set_touchend_callback_on_thread(58996, 0, 1, 12, 2) | 0;
 _emscripten_set_touchcancel_callback_on_thread(58996, 0, 1, 12, 2) | 0;
 _emscripten_set_pointerlockchange_callback_on_thread(1, 0, 1, 13, 2) | 0;
 _emscripten_set_pointerlockerror_callback_on_thread(1, 0, 1, 14, 2) | 0;
 _sapp_js_add_beforeunload_listener();
 if (HEAP8[58956] & 1) _sapp_js_add_clipboard_listener();
 if (!(HEAP8[58968] & 1)) {
  _emscripten_set_webglcontextlost_callback_on_thread(58996, 0, 1, 15, 2) | 0;
  _emscripten_set_webglcontextrestored_callback_on_thread(58996, 0, 1, 15, 2) | 0;
  return;
 }
 _sapp_js_add_dragndrop_listeners(58997);
 _emscripten_set_webglcontextlost_callback_on_thread(58996, 0, 1, 15, 2) | 0;
 _emscripten_set_webglcontextrestored_callback_on_thread(58996, 0, 1, 15, 2) | 0;
 return;
}

function __ZN2Dr11IsSameColorERK7DrColorS2_d($color1, $color2, $tolerance) {
 $color1 = $color1 | 0;
 $color2 = $color2 | 0;
 $tolerance = +$tolerance;
 var $0 = 0, $1 = 0, $2 = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp11 = 0, $ref$tmp14 = 0, $ref$tmp18 = 0, $ref$tmp21 = 0, $ref$tmp4 = 0, $ref$tmp6 = 0, $tolerance$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $tolerance$addr = sp + 56 | 0;
 $ref$tmp = sp + 64 | 0;
 $ref$tmp1 = sp + 48 | 0;
 $ref$tmp4 = sp + 40 | 0;
 $ref$tmp6 = sp + 32 | 0;
 $ref$tmp11 = sp + 24 | 0;
 $ref$tmp14 = sp + 16 | 0;
 $ref$tmp18 = sp + 8 | 0;
 $ref$tmp21 = sp;
 HEAPF64[$tolerance$addr >> 3] = $tolerance;
 HEAPF64[$ref$tmp >> 3] = +__ZNK7DrColor4redFEv($color1);
 HEAPF64[$ref$tmp1 >> 3] = +__ZNK7DrColor4redFEv($color2);
 if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($ref$tmp, $ref$tmp1, $tolerance$addr) | 0) {
  HEAPF64[$ref$tmp4 >> 3] = +__ZNK7DrColor6greenFEv($color1);
  HEAPF64[$ref$tmp6 >> 3] = +__ZNK7DrColor6greenFEv($color2);
  if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($ref$tmp4, $ref$tmp6, $tolerance$addr) | 0) {
   HEAPF64[$ref$tmp11 >> 3] = +__ZNK7DrColor5blueFEv($color1);
   HEAPF64[$ref$tmp14 >> 3] = +__ZNK7DrColor5blueFEv($color2);
   if (__ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($ref$tmp11, $ref$tmp14, $tolerance$addr) | 0) {
    HEAPF64[$ref$tmp18 >> 3] = +__ZNK7DrColor6alphaFEv($color1);
    HEAPF64[$ref$tmp21 >> 3] = +__ZNK7DrColor6alphaFEv($color2);
    $2 = __ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($ref$tmp18, $ref$tmp21, $tolerance$addr) | 0;
   } else $2 = 0;
   $1 = $2;
  } else $1 = 0;
  $0 = $1;
 } else $0 = 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _stbi__mad4sizes_valid($a, $b, $c, $d, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $d = $d | 0;
 $add = $add | 0;
 var $14 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $c$addr = 0, $d$addr = 0, $land$ext = 0, $mul = 0, $mul10 = 0, $mul4 = 0, $mul5 = 0, $mul8 = 0, $mul9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $a$addr = sp + 16 | 0;
 $b$addr = sp + 12 | 0;
 $c$addr = sp + 8 | 0;
 $d$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$d$addr >> 2] = $d;
 HEAP32[$add$addr >> 2] = $add;
 if (!(_stbi__mul2sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0)) {
  $14 = 0;
  $land$ext = $14 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid($mul, HEAP32[$c$addr >> 2] | 0) | 0)) {
  $14 = 0;
  $land$ext = $14 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul4 = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 $mul5 = Math_imul($mul4, HEAP32[$c$addr >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid($mul5, HEAP32[$d$addr >> 2] | 0) | 0)) {
  $14 = 0;
  $land$ext = $14 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul8 = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 $mul9 = Math_imul($mul8, HEAP32[$c$addr >> 2] | 0) | 0;
 $mul10 = Math_imul($mul9, HEAP32[$d$addr >> 2] | 0) | 0;
 $14 = (_stbi__addsizes_valid($mul10, HEAP32[$add$addr >> 2] | 0) | 0) != 0;
 $land$ext = $14 & 1;
 STACKTOP = sp;
 return $land$ext | 0;
}

function __sapp_strcpy($src, $dst, $max_len) {
 $src = $src | 0;
 $dst = $dst | 0;
 $max_len = $max_len | 0;
 var $$pre_trunc = 0, $11 = 0, $12 = 0, $16 = 0, $c = 0, $dst$addr = 0, $end = 0, $i = 0, $max_len$addr = 0, $retval = 0, $src$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 21 | 0;
 $src$addr = sp + 16 | 0;
 $dst$addr = sp + 12 | 0;
 $max_len$addr = sp + 8 | 0;
 $end = sp + 4 | 0;
 $c = sp + 20 | 0;
 $i = sp;
 HEAP32[$src$addr >> 2] = $src;
 HEAP32[$dst$addr >> 2] = $dst;
 HEAP32[$max_len$addr >> 2] = $max_len;
 if (!((HEAP32[$src$addr >> 2] | 0) != 0 & (HEAP32[$dst$addr >> 2] | 0) != 0 & (HEAP32[$max_len$addr >> 2] | 0) > 0)) ___assert_fail(28559, 16477, 2521, 28587);
 HEAP32[$end >> 2] = (HEAP32[$dst$addr >> 2] | 0) + ((HEAP32[$max_len$addr >> 2] | 0) - 1);
 HEAP8[$c >> 0] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$max_len$addr >> 2] | 0)) break;
  HEAP8[$c >> 0] = HEAP8[HEAP32[$src$addr >> 2] >> 0] | 0;
  if (HEAP8[$c >> 0] | 0) HEAP32[$src$addr >> 2] = (HEAP32[$src$addr >> 2] | 0) + 1;
  $11 = HEAP8[$c >> 0] | 0;
  $12 = HEAP32[$dst$addr >> 2] | 0;
  HEAP32[$dst$addr >> 2] = $12 + 1;
  HEAP8[$12 >> 0] = $11;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (HEAP8[$c >> 0] | 0) {
  HEAP8[HEAP32[$end >> 2] >> 0] = 0;
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $16 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $16 | 0;
 } else {
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $16 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $16 | 0;
 }
 return 0;
}

function __sapp_emsc_unregister_eventhandlers() {
 _emscripten_set_mousedown_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_mouseup_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_mousemove_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_mouseenter_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_mouseleave_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_wheel_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_keydown_callback_on_thread(2, 0, 1, 0, 2) | 0;
 _emscripten_set_keyup_callback_on_thread(2, 0, 1, 0, 2) | 0;
 _emscripten_set_keypress_callback_on_thread(2, 0, 1, 0, 2) | 0;
 _emscripten_set_touchstart_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_touchmove_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_touchend_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_touchcancel_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_pointerlockchange_callback_on_thread(1, 0, 1, 0, 2) | 0;
 _emscripten_set_pointerlockerror_callback_on_thread(1, 0, 1, 0, 2) | 0;
 _sapp_js_remove_beforeunload_listener();
 if (HEAP8[58956] & 1) _sapp_js_remove_clipboard_listener();
 if (!(HEAP8[58968] & 1)) {
  _emscripten_set_webglcontextlost_callback_on_thread(58996, 0, 1, 0, 2) | 0;
  _emscripten_set_webglcontextrestored_callback_on_thread(58996, 0, 1, 0, 2) | 0;
  return;
 }
 _sapp_js_remove_dragndrop_listeners(58997);
 _emscripten_set_webglcontextlost_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 _emscripten_set_webglcontextrestored_callback_on_thread(58996, 0, 1, 0, 2) | 0;
 return;
}

function _fons__flush($stash) {
 $stash = $stash | 0;
 var $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 if ((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 >> 2] | 0) < (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 8 >> 2] | 0)) if ((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 4 >> 2] | 0) < (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 12 >> 2] | 0)) {
  if (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 24 >> 2] | 0) FUNCTION_TABLE_viii[HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 24 >> 2] & 3](HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 12 >> 2] | 0, (HEAP32[$stash$addr >> 2] | 0) + 48 | 0, HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 44 >> 2] | 0);
  HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 >> 2] = HEAP32[HEAP32[$stash$addr >> 2] >> 2];
  HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 4 >> 2] = HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 4 >> 2];
  HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 8 >> 2] = 0;
  HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 48 + 12 >> 2] = 0;
 }
 if ((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20560 >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 28 >> 2] | 0) FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 28 >> 2] & 7](HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 12 >> 2] | 0, (HEAP32[$stash$addr >> 2] | 0) + 80 | 0, (HEAP32[$stash$addr >> 2] | 0) + 8272 | 0, (HEAP32[$stash$addr >> 2] | 0) + 16464 | 0, HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20560 >> 2] | 0);
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20560 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_($this, $__v, $__p) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, $5 = 0, $7 = 0, $9 = 0, $__begin_ = 0, $__end_ = 0, $__end_5 = 0, $__value_$i$i$i = 0, $__value_$i$i$i10 = 0, $add$ptr$i16 = 0, $sub$ptr$lhs$cast$i12 = 0, $sub$ptr$sub$i11 = 0, $sub$ptr$sub$i14 = 0;
 $__begin_ = $__v + 4 | 0;
 $0 = HEAP32[$__begin_ >> 2] | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$lhs$cast$i12 = $__p;
 $sub$ptr$sub$i14 = $sub$ptr$lhs$cast$i12 - $1 | 0;
 $add$ptr$i16 = $0 + (0 - ($sub$ptr$sub$i14 >> 4) << 4) | 0;
 HEAP32[$__begin_ >> 2] = $add$ptr$i16;
 if (($sub$ptr$sub$i14 | 0) > 0) _memcpy($add$ptr$i16 | 0, $1 | 0, $sub$ptr$sub$i14 | 0) | 0;
 $__end_ = $this + 4 | 0;
 $__end_5 = $__v + 8 | 0;
 $sub$ptr$sub$i11 = (HEAP32[$__end_ >> 2] | 0) - $sub$ptr$lhs$cast$i12 | 0;
 if (($sub$ptr$sub$i11 | 0) > 0) {
  _memcpy(HEAP32[$__end_5 >> 2] | 0, $__p | 0, $sub$ptr$sub$i11 | 0) | 0;
  HEAP32[$__end_5 >> 2] = (HEAP32[$__end_5 >> 2] | 0) + ($sub$ptr$sub$i11 >>> 4 << 4);
 }
 $5 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$__begin_ >> 2];
 HEAP32[$__begin_ >> 2] = $5;
 $7 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_5 >> 2];
 HEAP32[$__end_5 >> 2] = $7;
 $__value_$i$i$i10 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $9 = HEAP32[$__value_$i$i$i10 >> 2] | 0;
 HEAP32[$__value_$i$i$i10 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $9;
 HEAP32[$__v >> 2] = HEAP32[$__begin_ >> 2];
 return $0 | 0;
}

function _stbtt__track_vertex($c, $x, $y) {
 $c = $c | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $28 = 0, $c$addr = 0, $started23 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c$addr = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 $y$addr = sp;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 if ((HEAP32[$x$addr >> 2] | 0) > (HEAP32[(HEAP32[$c$addr >> 2] | 0) + 28 >> 2] | 0)) label = 3; else if (!(HEAP32[(HEAP32[$c$addr >> 2] | 0) + 4 >> 2] | 0)) label = 3;
 if ((label | 0) == 3) HEAP32[(HEAP32[$c$addr >> 2] | 0) + 28 >> 2] = HEAP32[$x$addr >> 2];
 if ((HEAP32[$y$addr >> 2] | 0) > (HEAP32[(HEAP32[$c$addr >> 2] | 0) + 36 >> 2] | 0)) label = 6; else if (!(HEAP32[(HEAP32[$c$addr >> 2] | 0) + 4 >> 2] | 0)) label = 6;
 if ((label | 0) == 6) HEAP32[(HEAP32[$c$addr >> 2] | 0) + 36 >> 2] = HEAP32[$y$addr >> 2];
 if ((HEAP32[$x$addr >> 2] | 0) < (HEAP32[(HEAP32[$c$addr >> 2] | 0) + 24 >> 2] | 0)) label = 9; else if (!(HEAP32[(HEAP32[$c$addr >> 2] | 0) + 4 >> 2] | 0)) label = 9;
 if ((label | 0) == 9) HEAP32[(HEAP32[$c$addr >> 2] | 0) + 24 >> 2] = HEAP32[$x$addr >> 2];
 if ((HEAP32[$y$addr >> 2] | 0) >= (HEAP32[(HEAP32[$c$addr >> 2] | 0) + 32 >> 2] | 0)) if (HEAP32[(HEAP32[$c$addr >> 2] | 0) + 4 >> 2] | 0) {
  $28 = HEAP32[$c$addr >> 2] | 0;
  $started23 = $28 + 4 | 0;
  HEAP32[$started23 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$c$addr >> 2] | 0) + 32 >> 2] = HEAP32[$y$addr >> 2];
 $28 = HEAP32[$c$addr >> 2] | 0;
 $started23 = $28 + 4 | 0;
 HEAP32[$started23 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczElEET_T0_SD_PKNSD_10value_typeET1_($agg$result, $s, $a) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 $a = $a | 0;
 var $0 = 0, $2 = 0, $__i$0$i$i = 0, $__size_$i$i = 0, $available$0 = 0, $available$2 = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $__size_$i$i = $s + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 if ($0 << 24 >> 24 < 0) $cond$i = HEAP32[$s + 4 >> 2] | 0; else $cond$i = $0 & 255;
 $2 = $0;
 $available$0 = $cond$i;
 while (1) {
  if ($2 << 24 >> 24 < 0) $cond$i$i = HEAP32[$s >> 2] | 0; else $cond$i$i = $s;
  HEAP32[$vararg_buffer >> 2] = $a;
  $call2 = _snprintf($cond$i$i, $available$0 + 1 | 0, 51150, $vararg_buffer) | 0;
  if (($call2 | 0) > -1) if ($call2 >>> 0 > $available$0 >>> 0) $available$2 = $call2; else break; else $available$2 = $available$0 << 1 | 1;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($s, $available$2, 0);
  $2 = HEAP8[$__size_$i$i >> 0] | 0;
  $available$0 = $available$2;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($s, $call2, 0);
 HEAP32[$agg$result >> 2] = HEAP32[$s >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$s + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$s + 8 >> 2];
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$s + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_($agg$result, $s, $a) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 $a = $a | 0;
 var $0 = 0, $2 = 0, $__i$0$i$i = 0, $__size_$i$i = 0, $available$0 = 0, $available$2 = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $__size_$i$i = $s + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 if ($0 << 24 >> 24 < 0) $cond$i = HEAP32[$s + 4 >> 2] | 0; else $cond$i = $0 & 255;
 $2 = $0;
 $available$0 = $cond$i;
 while (1) {
  if ($2 << 24 >> 24 < 0) $cond$i$i = HEAP32[$s >> 2] | 0; else $cond$i$i = $s;
  HEAP32[$vararg_buffer >> 2] = $a;
  $call2 = _snprintf($cond$i$i, $available$0 + 1 | 0, 51147, $vararg_buffer) | 0;
  if (($call2 | 0) > -1) if ($call2 >>> 0 > $available$0 >>> 0) $available$2 = $call2; else break; else $available$2 = $available$0 << 1 | 1;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($s, $available$2, 0);
  $2 = HEAP8[$__size_$i$i >> 0] | 0;
  $available$0 = $available$2;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($s, $call2, 0);
 HEAP32[$agg$result >> 2] = HEAP32[$s >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$s + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$s + 8 >> 2];
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$s + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($this) {
 $this = $this | 0;
 var $E = 0, $call7 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $E = sp;
 do if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 68) | 0) {
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 116) | 0)) if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 84) | 0)) {
   $retval$1 = 0;
   break;
  }
  $call7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
  HEAP32[$E >> 2] = $call7;
  if (!$call7) $retval$0 = 0; else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, 56304, $E) | 0; else $retval$0 = 0;
  $retval$1 = $retval$0;
 } else $retval$1 = 0; while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE8__appendEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $4 = 0, $__end_ = 0, $__v = 0, $__value_$i$i$i = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__value_$i$i$i = $this + 8 | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 do if ((((HEAP32[$__value_$i$i$i >> 2] | 0) - $1 | 0) / 44 | 0) >>> 0 < $__n >>> 0) {
  $add = (($1 - (HEAP32[$this >> 2] | 0) | 0) / 44 | 0) + $__n | 0;
  $call$i = __ZNKSt3__26vectorI6VertexNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
  if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
   $4 = HEAP32[$this >> 2] | 0;
   $sub$ptr$div$i$i$i = ((HEAP32[$__value_$i$i$i >> 2] | 0) - $4 | 0) / 44 | 0;
   $mul$i = $sub$ptr$div$i$i$i << 1;
   __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_ >> 2] | 0) - $4 | 0) / 44 | 0, $this + 8 | 0);
   __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEE18__construct_at_endEm($__v, $__n);
   __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
   __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEED2Ev($__v);
   break;
  }
 } else __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE18__construct_at_endEm($this, $__n); while (0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 var $0 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp12 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, $tobool = 0, $tobool16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast1$byval_copy = sp + 24 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp12 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 32) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = HEAP32[$args1 >> 2] | 0;
 $11 = $args3;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $agg$tmp12;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 $tobool = (HEAP8[$args5 >> 0] | 0) != 0;
 $tobool16 = (HEAP8[$args7 >> 0] | 0) != 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
 HEAP32[$tmpcast1$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($call, $tmpcast$byval_copy, $10, $tmpcast1$byval_copy, $tobool, $tobool16);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 var $0 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp12 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, $tobool = 0, $tobool16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast1$byval_copy = sp + 24 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp12 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 32) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = HEAP32[$args1 >> 2] | 0;
 $11 = $args3;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $agg$tmp12;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 $tobool = (HEAP8[$args5 >> 0] | 0) != 0;
 $tobool16 = (HEAP8[$args7 >> 0] | 0) != 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2];
 HEAP32[$tmpcast1$byval_copy + 4 >> 2] = HEAP32[$agg$tmp12 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($call, $tmpcast$byval_copy, $10, $tmpcast1$byval_copy, $tobool, $tobool16);
 STACKTOP = sp;
 return $call | 0;
}

function _stm_diff($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $35 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $8 = 0, $new_ticks$addr = 0, $old_ticks$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $new_ticks$addr = sp + 8 | 0;
 $old_ticks$addr = sp;
 $4 = $new_ticks$addr;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $1;
 $8 = $old_ticks$addr;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$8 + 4 >> 2] = $3;
 $12 = $new_ticks$addr;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $old_ticks$addr;
 $23 = HEAP32[$18 + 4 >> 2] | 0;
 if ($17 >>> 0 > $23 >>> 0 | (($17 | 0) == ($23 | 0) ? (HEAP32[$12 >> 2] | 0) >>> 0 > (HEAP32[$18 >> 2] | 0) >>> 0 : 0)) {
  $29 = $new_ticks$addr;
  $35 = $old_ticks$addr;
  $41 = _i64Subtract(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, HEAP32[$35 >> 2] | 0, HEAP32[$35 + 4 >> 2] | 0) | 0;
  $42 = getTempRet0() | 0;
  $43 = $retval;
  HEAP32[$43 >> 2] = $41;
  HEAP32[$43 + 4 >> 2] = $42;
  $51 = $retval;
  $52 = $51;
  $53 = HEAP32[$52 >> 2] | 0;
  $54 = $51 + 4 | 0;
  $55 = $54;
  $56 = HEAP32[$55 >> 2] | 0;
  setTempRet0($56 | 0);
  STACKTOP = sp;
  return $53 | 0;
 } else {
  $47 = $retval;
  HEAP32[$47 >> 2] = 1;
  HEAP32[$47 + 4 >> 2] = 0;
  $51 = $retval;
  $52 = $51;
  $53 = HEAP32[$52 >> 2] | 0;
  $54 = $51 + 4 | 0;
  $55 = $54;
  $56 = HEAP32[$55 >> 2] | 0;
  setTempRet0($56 | 0);
  STACKTOP = sp;
  return $53 | 0;
 }
 return 0;
}

function __sg_slot_alloc($pool, $slot, $slot_index) {
 $pool = $pool | 0;
 $slot = $slot | 0;
 $slot_index = $slot_index | 0;
 var $arrayidx = 0, $ctr = 0, $inc = 0, $pool$addr = 0, $slot$addr = 0, $slot_index$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp + 12 | 0;
 $slot$addr = sp + 8 | 0;
 $slot_index$addr = sp + 4 | 0;
 $ctr = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$slot$addr >> 2] = $slot;
 HEAP32[$slot_index$addr >> 2] = $slot_index;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(30155, 21600, 12949, 30178);
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(30155, 21600, 12949, 30178);
 if ((HEAP32[$slot_index$addr >> 2] | 0) <= 0) ___assert_fail(30193, 21600, 12950, 30178);
 if ((HEAP32[$slot_index$addr >> 2] | 0) >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0)) ___assert_fail(30193, 21600, 12950, 30178);
 if (HEAP32[(HEAP32[$slot$addr >> 2] | 0) + 8 >> 2] | 0) ___assert_fail(30241, 21600, 12951, 30178);
 if (!(HEAP32[HEAP32[$slot$addr >> 2] >> 2] | 0)) {
  $arrayidx = (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$slot_index$addr >> 2] << 2) | 0;
  $inc = (HEAP32[$arrayidx >> 2] | 0) + 1 | 0;
  HEAP32[$arrayidx >> 2] = $inc;
  HEAP32[$ctr >> 2] = $inc;
  HEAP32[HEAP32[$slot$addr >> 2] >> 2] = HEAP32[$ctr >> 2] << 16 | HEAP32[$slot_index$addr >> 2] & 65535;
  HEAP32[(HEAP32[$slot$addr >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return HEAP32[HEAP32[$slot$addr >> 2] >> 2] | 0;
 } else ___assert_fail(30241, 21600, 12951, 30178);
 return 0;
}

function _stbi__gif_load($s, $x, $y, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $call = 0, $comp$addr = 0, $g = 0, $req_comp$addr = 0, $s$addr = 0, $u = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 34944 | 0;
 $s$addr = sp + 34928 | 0;
 $x$addr = sp + 34924 | 0;
 $y$addr = sp + 34920 | 0;
 $comp$addr = sp + 34916 | 0;
 $req_comp$addr = sp + 34912 | 0;
 $u = sp + 34904 | 0;
 $g = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[sp + 34908 >> 2] = $ri;
 HEAP32[$u >> 2] = 0;
 _memset($g | 0, 0, 34904) | 0;
 $call = _stbi__gif_load_next(HEAP32[$s$addr >> 2] | 0, $g, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, 0) | 0;
 HEAP32[$u >> 2] = $call;
 HEAP32[$u >> 2] = (HEAP32[$u >> 2] | 0) == (HEAP32[$s$addr >> 2] | 0) ? 0 : $call;
 if (HEAP32[$u >> 2] | 0) {
  HEAP32[HEAP32[$x$addr >> 2] >> 2] = HEAP32[$g >> 2];
  HEAP32[HEAP32[$y$addr >> 2] >> 2] = HEAP32[$g + 4 >> 2];
  if ((HEAP32[$req_comp$addr >> 2] | 0) != 0 & (HEAP32[$req_comp$addr >> 2] | 0) != 4) HEAP32[$u >> 2] = _stbi__convert_format(HEAP32[$u >> 2] | 0, 4, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$g >> 2] | 0, HEAP32[$g + 4 >> 2] | 0) | 0;
 } else if (HEAP32[$g + 8 >> 2] | 0) _free(HEAP32[$g + 8 >> 2] | 0);
 _free(HEAP32[$g + 16 >> 2] | 0);
 _free(HEAP32[$g + 12 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$u >> 2] | 0;
}

function __sgl_slot_alloc($pool, $slot, $slot_index) {
 $pool = $pool | 0;
 $slot = $slot | 0;
 $slot_index = $slot_index | 0;
 var $arrayidx = 0, $ctr = 0, $inc = 0, $pool$addr = 0, $slot$addr = 0, $slot_index$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp + 12 | 0;
 $slot$addr = sp + 8 | 0;
 $slot_index$addr = sp + 4 | 0;
 $ctr = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$slot$addr >> 2] = $slot;
 HEAP32[$slot_index$addr >> 2] = $slot_index;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(30155, 23371, 2177, 41576);
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(30155, 23371, 2177, 41576);
 if ((HEAP32[$slot_index$addr >> 2] | 0) <= 0) ___assert_fail(30193, 23371, 2178, 41576);
 if ((HEAP32[$slot_index$addr >> 2] | 0) >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0)) ___assert_fail(30193, 23371, 2178, 41576);
 if (HEAP32[(HEAP32[$slot$addr >> 2] | 0) + 4 >> 2] | 0) ___assert_fail(30241, 23371, 2179, 41576);
 if (!(HEAP32[HEAP32[$slot$addr >> 2] >> 2] | 0)) {
  $arrayidx = (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$slot_index$addr >> 2] << 2) | 0;
  $inc = (HEAP32[$arrayidx >> 2] | 0) + 1 | 0;
  HEAP32[$arrayidx >> 2] = $inc;
  HEAP32[$ctr >> 2] = $inc;
  HEAP32[HEAP32[$slot$addr >> 2] >> 2] = HEAP32[$ctr >> 2] << 16 | HEAP32[$slot_index$addr >> 2] & 65535;
  HEAP32[(HEAP32[$slot$addr >> 2] | 0) + 4 >> 2] = 1;
  STACKTOP = sp;
  return HEAP32[HEAP32[$slot$addr >> 2] >> 2] | 0;
 } else ___assert_fail(30241, 23371, 2179, 41576);
 return 0;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 44 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorI6VertexNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 44 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 44 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  dest = $5;
  src = $__x;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$__end_ >> 2] = $5 + 44;
  __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZN8DrBitmap14loadFromMemoryEPKhRKibii($this, $from_data, $number_of_bytes, $compressed, $width_, $height_) {
 $this = $this | 0;
 $from_data = $from_data | 0;
 $number_of_bytes = $number_of_bytes | 0;
 $compressed = $compressed | 0;
 $width_ = $width_ | 0;
 $height_ = $height_ | 0;
 var $5 = 0, $6 = 0, $8 = 0, $call6 = 0, $channels = 0, $data = 0, $data16 = 0, $height4 = 0, $mul = 0, $width3 = 0, label = 0;
 if (!$compressed) {
  HEAP32[$this + 8 >> 2] = $width_;
  HEAP32[$this + 12 >> 2] = $height_;
  $data = $this + 16 | 0;
  __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($data, HEAP32[$number_of_bytes >> 2] | 0);
  _memcpy(HEAP32[$data >> 2] | 0, $from_data | 0, HEAP32[$number_of_bytes >> 2] | 0) | 0;
  return;
 }
 $width3 = $this + 8 | 0;
 $height4 = $this + 12 | 0;
 $channels = $this + 4 | 0;
 $call6 = _stbi_load_from_memory($from_data, HEAP32[$number_of_bytes >> 2] | 0, $width3, $height4, $channels, HEAP32[$channels >> 2] | 0) | 0;
 if (!$call6) label = 6; else {
  $5 = HEAP32[$width3 >> 2] | 0;
  if (!$5) label = 6; else {
   $6 = HEAP32[$height4 >> 2] | 0;
   if (!$6) label = 6; else {
    $data16 = $this + 16 | 0;
    $mul = Math_imul($6, $5) | 0;
    __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($data16, Math_imul($mul, HEAP32[$channels >> 2] | 0) | 0);
    $8 = HEAP32[$data16 >> 2] | 0;
    _memcpy($8 | 0, $call6 | 0, (HEAP32[$this + 20 >> 2] | 0) - $8 | 0) | 0;
    _stbi_image_free($call6);
   }
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$width3 >> 2] = 0;
  HEAP32[$height4 >> 2] = 0;
 }
 return;
}

function __sg_validate_buffer_desc($desc) {
 $desc = $desc | 0;
 var $15 = 0, $23 = 0, $call = 0, $desc$addr = 0, $injected = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp;
 $injected = sp + 4 | 0;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 13283, 30911);
 __sg_validate_begin();
 __sg_validate((HEAP32[HEAP32[$desc$addr >> 2] >> 2] | 0) == 0, 1);
 __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 52 >> 2] | 0) == 0, 1);
 __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 0, 2);
 if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 28 >> 2] | 0) $15 = 1; else if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 36 >> 2] | 0) $15 = 1; else if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 44 >> 2] | 0) $15 = 1; else $15 = 0 != (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 48 >> 2] | 0);
 HEAP8[$injected >> 0] = $15 & 1;
 if (!(HEAP8[$injected >> 0] & 1)) if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 12 >> 2] | 0) == 1) {
  if (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2] | 0) $23 = (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 + 4 >> 2] | 0) >>> 0 > 0; else $23 = 0;
  __sg_validate($23, 3);
  __sg_validate((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 + 4 >> 2] | 0), 4);
  $call = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $call | 0;
 }
 __sg_validate(0 == (HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 16 >> 2] | 0), 5);
 $call = __sg_validate_end() | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _sfons_create($width, $height, $flags) {
 $width = $width | 0;
 $height = $height | 0;
 $flags = $flags | 0;
 var $2 = 0, $ctx = 0, $flags$addr = 0, $height$addr = 0, $params = 0, $sfons = 0, $width$addr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $width$addr = sp + 52 | 0;
 $height$addr = sp + 48 | 0;
 $flags$addr = sp + 44 | 0;
 $params = sp + 8 | 0;
 $sfons = sp + 4 | 0;
 $ctx = sp;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$flags$addr >> 2] = $flags;
 if ((HEAP32[$width$addr >> 2] | 0) > 0 & (HEAP32[$height$addr >> 2] | 0) > 0) {
  HEAP32[$sfons >> 2] = _malloc(24) | 0;
  $2 = HEAP32[$sfons >> 2] | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  dest = $params;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$params >> 2] = HEAP32[$width$addr >> 2];
  HEAP32[$params + 4 >> 2] = HEAP32[$height$addr >> 2];
  HEAP8[$params + 8 >> 0] = HEAP32[$flags$addr >> 2];
  HEAP32[$params + 16 >> 2] = 7;
  HEAP32[$params + 20 >> 2] = 8;
  HEAP32[$params + 24 >> 2] = 1;
  HEAP32[$params + 28 >> 2] = 4;
  HEAP32[$params + 32 >> 2] = 92;
  HEAP32[$params + 12 >> 2] = HEAP32[$sfons >> 2];
  HEAP32[$ctx >> 2] = _fonsCreateInternal($params) | 0;
  STACKTOP = sp;
  return HEAP32[$ctx >> 2] | 0;
 } else ___assert_fail(28386, 28414, 1744, 28489);
 return 0;
}

function _stbtt__dict_get($agg$result, $b, $key) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $key = $key | 0;
 var $5 = 0, $8 = 0, $b$addr = 0, $cmp3 = 0, $end = 0, $key$addr = 0, $op = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $b$addr = sp + 16 | 0;
 $key$addr = sp + 12 | 0;
 $start = sp + 8 | 0;
 $end = sp + 4 | 0;
 $op = sp;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$key$addr >> 2] = $key;
 _stbtt__buf_seek(HEAP32[$b$addr >> 2] | 0, 0);
 while (1) {
  $5 = HEAP32[$b$addr >> 2] | 0;
  if ((HEAP32[(HEAP32[$b$addr >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] | 0)) {
   label = 11;
   break;
  }
  HEAP32[$start >> 2] = HEAP32[$5 + 4 >> 2];
  while (1) {
   $cmp3 = ((_stbtt__buf_peek8(HEAP32[$b$addr >> 2] | 0) | 0) & 255 | 0) >= 28;
   $8 = HEAP32[$b$addr >> 2] | 0;
   if (!$cmp3) break;
   _stbtt__cff_skip_operand($8);
  }
  HEAP32[$end >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$op >> 2] = (_stbtt__buf_get8(HEAP32[$b$addr >> 2] | 0) | 0) & 255;
  if ((HEAP32[$op >> 2] | 0) == 12) HEAP32[$op >> 2] = (_stbtt__buf_get8(HEAP32[$b$addr >> 2] | 0) | 0) & 255 | 256;
  if ((HEAP32[$op >> 2] | 0) == (HEAP32[$key$addr >> 2] | 0)) {
   label = 9;
   break;
  }
 }
 if ((label | 0) == 9) {
  _stbtt__buf_range($agg$result, HEAP32[$b$addr >> 2] | 0, HEAP32[$start >> 2] | 0, (HEAP32[$end >> 2] | 0) - (HEAP32[$start >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 11) {
  _stbtt__buf_range($agg$result, $5, 0, 0);
  STACKTOP = sp;
  return;
 }
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $call16 = 0, $i$033 = 0, $i$1 = 0, $l$addr$1 = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $wend = 0, $wpos = 0, label = 0;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $3 = HEAP32[$wend >> 2] | 0;
  label = 5;
 } else $retval$1 = 0; else {
  $3 = $0;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $wpos = $f + 20 | 0;
  $2 = HEAP32[$wpos >> 2] | 0;
  $4 = $2;
  if (($3 - $2 | 0) >>> 0 < $l >>> 0) {
   $retval$1 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) < 0 | ($l | 0) == 0) {
   $9 = $4;
   $i$1 = 0;
   $l$addr$1 = $l;
   $s$addr$1 = $s;
  } else {
   $i$033 = $l;
   while (1) {
    $sub = $i$033 + -1 | 0;
    if ((HEAP8[$s + $sub >> 0] | 0) == 10) break;
    if (!$sub) {
     $9 = $4;
     $i$1 = 0;
     $l$addr$1 = $l;
     $s$addr$1 = $s;
     break L10;
    } else $i$033 = $sub;
   }
   $call16 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $i$033) | 0;
   if ($call16 >>> 0 < $i$033 >>> 0) {
    $retval$1 = $call16;
    break L5;
   }
   $9 = HEAP32[$wpos >> 2] | 0;
   $i$1 = $i$033;
   $l$addr$1 = $l - $i$033 | 0;
   $s$addr$1 = $s + $i$033 | 0;
  } while (0);
  _memcpy($9 | 0, $s$addr$1 | 0, $l$addr$1 | 0) | 0;
  HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $l$addr$1;
  $retval$1 = $i$1 + $l$addr$1 | 0;
 } while (0);
 return $retval$1 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv($this) {
 $this = $this | 0;
 var $0 = 0, $Data = 0, $__begin$0 = 0, $call3 = 0, $call4 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Data = sp;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) >>> 0 < 21) $retval$4 = 0; else {
  $0 = HEAP32[$this >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data, $0, $0 + 20 | 0);
  $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Data) | 0;
  $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Data) | 0;
  $__begin$0 = $call3;
  while (1) {
   if (($__begin$0 | 0) == ($call4 | 0)) {
    label = 5;
    break;
   }
   if (!(_isxdigit(HEAP8[$__begin$0 >> 0] | 0) | 0)) {
    $retval$3 = 0;
    break;
   } else $__begin$0 = $__begin$0 + 1 | 0;
  }
  if ((label | 0) == 5) {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 20;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Data) | 0; else $retval$3 = 0;
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv($this) {
 $this = $this | 0;
 var $0 = 0, $Data = 0, $__begin$0 = 0, $call3 = 0, $call4 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Data = sp;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) >>> 0 < 17) $retval$4 = 0; else {
  $0 = HEAP32[$this >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data, $0, $0 + 16 | 0);
  $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Data) | 0;
  $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Data) | 0;
  $__begin$0 = $call3;
  while (1) {
   if (($__begin$0 | 0) == ($call4 | 0)) {
    label = 5;
    break;
   }
   if (!(_isxdigit(HEAP8[$__begin$0 >> 0] | 0) | 0)) {
    $retval$3 = 0;
    break;
   } else $__begin$0 = $__begin$0 + 1 | 0;
  }
  if ((label | 0) == 5) {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 16;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Data) | 0; else $retval$3 = 0;
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv($this) {
 $this = $this | 0;
 var $0 = 0, $Data = 0, $__begin$0 = 0, $call3 = 0, $call4 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Data = sp;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0) >>> 0 < 9) $retval$4 = 0; else {
  $0 = HEAP32[$this >> 2] | 0;
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data, $0, $0 + 8 | 0);
  $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Data) | 0;
  $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Data) | 0;
  $__begin$0 = $call3;
  while (1) {
   if (($__begin$0 | 0) == ($call4 | 0)) {
    label = 5;
    break;
   }
   if (!(_isxdigit(HEAP8[$__begin$0 >> 0] | 0) | 0)) {
    $retval$3 = 0;
    break;
   } else $__begin$0 = $__begin$0 + 1 | 0;
  }
  if ((label | 0) == 5) {
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 8;
   if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) $retval$3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $Data) | 0; else $retval$3 = 0;
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __sg_init_pipeline($pip_id, $desc) {
 $pip_id = $pip_id | 0;
 $desc = $desc | 0;
 var $call18 = 0, $desc$addr = 0, $pip = 0, $shd = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp + 8 | 0;
 $pip = sp + 4 | 0;
 $shd = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!((HEAP32[$pip_id >> 2] | 0) != 0 & (HEAP32[$desc$addr >> 2] | 0) != 0)) ___assert_fail(38138, 21600, 14139, 38173);
 HEAP32[$pip >> 2] = __sg_lookup_pipeline(2164252, HEAP32[$pip_id >> 2] | 0) | 0;
 if (!(HEAP32[$pip >> 2] | 0)) ___assert_fail(22190, 21600, 14141, 38173);
 if ((HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] | 0) != 1) ___assert_fail(22190, 21600, 14141, 38173);
 HEAP32[(HEAP32[$pip >> 2] | 0) + 4 >> 2] = HEAP32[541058];
 do if (__sg_validate_pipeline_desc(HEAP32[$desc$addr >> 2] | 0) | 0) {
  HEAP32[$shd >> 2] = __sg_lookup_shader(2164252, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
  if (HEAP32[$shd >> 2] | 0) if ((HEAP32[(HEAP32[$shd >> 2] | 0) + 8 >> 2] | 0) == 2) {
   $call18 = __sg_create_pipeline(HEAP32[$pip >> 2] | 0, HEAP32[$shd >> 2] | 0, HEAP32[$desc$addr >> 2] | 0) | 0;
   HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] = $call18;
   break;
  }
  HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] = 3;
 } else HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] = 3; while (0);
 if ((HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] | 0) == 3) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(38191, 21600, 14155, 38173);
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$__x >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$__x + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$__x + 8 >> 2];
  HEAP32[$5 + 12 >> 2] = HEAP32[$__x + 12 >> 2];
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$__x >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$__x + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$__x + 8 >> 2];
  HEAP32[$5 + 12 >> 2] = HEAP32[$__x + 12 >> 2];
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _stbi__convert_16_to_8($orig, $w, $h, $channels) {
 $orig = $orig | 0;
 $w = $w | 0;
 $h = $h | 0;
 $channels = $channels | 0;
 var $16 = 0, $9 = 0, $channels$addr = 0, $h$addr = 0, $i = 0, $img_len = 0, $mul = 0, $orig$addr = 0, $reduced = 0, $retval = 0, $tobool = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $orig$addr = sp + 24 | 0;
 $w$addr = sp + 20 | 0;
 $h$addr = sp + 16 | 0;
 $channels$addr = sp + 12 | 0;
 $i = sp + 8 | 0;
 $img_len = sp + 4 | 0;
 $reduced = sp;
 HEAP32[$orig$addr >> 2] = $orig;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$channels$addr >> 2] = $channels;
 $mul = Math_imul(HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0) | 0;
 HEAP32[$img_len >> 2] = Math_imul($mul, HEAP32[$channels$addr >> 2] | 0) | 0;
 HEAP32[$reduced >> 2] = _stbi__malloc(HEAP32[$img_len >> 2] | 0) | 0;
 if (!(HEAP32[$reduced >> 2] | 0)) {
  $tobool = (_stbi__err(47531) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $16 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $16 | 0;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $9 = HEAP32[$orig$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$img_len >> 2] | 0)) break;
  HEAP8[(HEAP32[$reduced >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = (HEAPU16[$9 + (HEAP32[$i >> 2] << 1) >> 1] | 0) >> 8;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _free($9);
 HEAP32[$retval >> 2] = HEAP32[$reduced >> 2];
 $16 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $16 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $$sroa$speculated = 0, $add = 0, $add33 = 0, $call$i$i$i = 0, $cond$i = 0, $cond30 = 0, $mul = 0, $sub23 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond30 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond30 = -17;
 $call$i$i$i = __Znwm($cond30) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 $sub23 = $__old_sz - $__n_del - $__n_copy | 0;
 if ($sub23 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy + $__n_add | 0, $cond$i + $__n_copy + $__n_del | 0, $sub23) | 0;
 $add33 = $__old_cap + 1 | 0;
 if (($add33 | 0) != 11) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add33);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = $cond30 | -2147483648;
 return;
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 12 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferINS_6vectorI8DrPointFNS_9allocatorIS2_EEEERNS3_IS5_EEEC2EmmS7_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 12 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_(HEAP32[$__end_ >> 2] | 0, $__x);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 12;
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS5_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_6vectorI8DrPointFNS_9allocatorIS2_EEEERNS3_IS5_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __sfetch_ring_init($rb, $num_slots) {
 $rb = $rb | 0;
 $num_slots = $num_slots | 0;
 var $$pre_trunc = 0, $14 = 0, $17 = 0, $call = 0, $num_slots$addr = 0, $queue_size = 0, $rb$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $rb$addr = sp + 8 | 0;
 $num_slots$addr = sp + 4 | 0;
 $queue_size = sp;
 HEAP32[$rb$addr >> 2] = $rb;
 HEAP32[$num_slots$addr >> 2] = $num_slots;
 if (!((HEAP32[$rb$addr >> 2] | 0) != 0 & (HEAP32[$num_slots$addr >> 2] | 0) >>> 0 > 0)) ___assert_fail(42257, 25510, 1259, 42279);
 if (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0) ___assert_fail(42297, 25510, 1260, 42279);
 HEAP32[HEAP32[$rb$addr >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 8 >> 2] = (HEAP32[$num_slots$addr >> 2] | 0) + 1;
 HEAP32[$queue_size >> 2] = HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 8 >> 2] << 2;
 $call = _malloc(HEAP32[$queue_size >> 2] | 0) | 0;
 HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] = $call;
 $14 = HEAP32[$rb$addr >> 2] | 0;
 if (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0) {
  _memset(HEAP32[$14 + 12 >> 2] | 0, 0, HEAP32[$queue_size >> 2] | 0) | 0;
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $17 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  __sfetch_ring_discard($14);
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $17 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}

function __sg_gl_cache_bind_texture($slot_index, $target, $texture) {
 $slot_index = $slot_index | 0;
 $target = $target | 0;
 $texture = $texture | 0;
 var $slot = 0, $slot_index$addr = 0, $target$addr = 0, $texture$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $slot_index$addr = sp + 12 | 0;
 $target$addr = sp + 8 | 0;
 $texture$addr = sp + 4 | 0;
 $slot = sp;
 HEAP32[$slot_index$addr >> 2] = $slot_index;
 HEAP32[$target$addr >> 2] = $target;
 HEAP32[$texture$addr >> 2] = $texture;
 if ((HEAP32[$slot_index$addr >> 2] | 0) >= 12) ___assert_fail(37304, 21600, 5495, 37378);
 if ((HEAP32[$slot_index$addr >> 2] | 0) >= (HEAP32[541357] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$slot >> 2] = 2165292 + (HEAP32[$slot_index$addr >> 2] << 3);
 if ((HEAP32[HEAP32[$slot >> 2] >> 2] | 0) == (HEAP32[$target$addr >> 2] | 0)) if ((HEAP32[(HEAP32[$slot >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[$texture$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __sg_gl_cache_active_texture(33984 + (HEAP32[$slot_index$addr >> 2] | 0) | 0);
 if ((HEAP32[$target$addr >> 2] | 0) != (HEAP32[HEAP32[$slot >> 2] >> 2] | 0)) if (HEAP32[HEAP32[$slot >> 2] >> 2] | 0) _glBindTexture(HEAP32[HEAP32[$slot >> 2] >> 2] | 0, 0);
 if (HEAP32[$target$addr >> 2] | 0) _glBindTexture(HEAP32[$target$addr >> 2] | 0, HEAP32[$texture$addr >> 2] | 0);
 HEAP32[HEAP32[$slot >> 2] >> 2] = HEAP32[$target$addr >> 2];
 HEAP32[(HEAP32[$slot >> 2] | 0) + 4 >> 2] = HEAP32[$texture$addr >> 2];
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $2 = 0, $3 = 0, $Init = 0, $agg$tmp = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp9$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp9 = sp;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 91);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53605);
 HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp9$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
 $Init = $this + 16 | 0;
 $2 = HEAP32[$Init >> 2] | 0;
 if (((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($2) | 0) + -65 & 255) < 2) $3 = $2; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 53611);
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
  HEAP32[$agg$tmp9$byval_copy + 4 >> 2] = HEAP32[$agg$tmp9 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp9$byval_copy);
  $3 = HEAP32[$Init >> 2] | 0;
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($3, $S);
 STACKTOP = sp;
 return;
}

function _fons__vertex($stash, $x, $y, $s, $t, $c) {
 $stash = $stash | 0;
 $x = +$x;
 $y = +$y;
 $s = +$s;
 $t = +$t;
 $c = $c | 0;
 var $c$addr = 0, $nverts17 = 0, $s$addr = 0, $stash$addr = 0, $t$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $stash$addr = sp + 20 | 0;
 $x$addr = sp + 16 | 0;
 $y$addr = sp + 12 | 0;
 $s$addr = sp + 8 | 0;
 $t$addr = sp + 4 | 0;
 $c$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$s$addr >> 2] = $s;
 HEAPF32[$t$addr >> 2] = $t;
 HEAP32[$c$addr >> 2] = $c;
 HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 80 + ((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20560 >> 2] << 1) + 0 << 2) >> 2] = +HEAPF32[$x$addr >> 2];
 HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 80 + ((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20560 >> 2] << 1) + 1 << 2) >> 2] = +HEAPF32[$y$addr >> 2];
 HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 8272 + ((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20560 >> 2] << 1) + 0 << 2) >> 2] = +HEAPF32[$s$addr >> 2];
 HEAPF32[(HEAP32[$stash$addr >> 2] | 0) + 8272 + ((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20560 >> 2] << 1) + 1 << 2) >> 2] = +HEAPF32[$t$addr >> 2];
 HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 16464 + (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20560 >> 2] << 2) >> 2] = HEAP32[$c$addr >> 2];
 $nverts17 = (HEAP32[$stash$addr >> 2] | 0) + 20560 | 0;
 HEAP32[$nverts17 >> 2] = (HEAP32[$nverts17 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $3 = 0, $5 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr26 = 0, $path_dst_ptr_to_static_ptr12 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
  $1 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
  if (!$1) {
   HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($1 | 0) != ($dst_ptr | 0)) {
   $number_to_static_ptr26 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr26 >> 2] = (HEAP32[$number_to_static_ptr26 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr12 = $info + 24 | 0;
  $3 = HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] | 0;
  if (($3 | 0) == 2) {
   HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = $path_below;
   $5 = $path_below;
  } else $5 = $3;
  if (($5 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $FirstElement$0$off0 = 0, $FirstElement$1$off0 = 0, $Idx$0 = 0, $NumElements = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $NumElements = $this + 4 | 0;
 $FirstElement$0$off0 = 1;
 $Idx$0 = 0;
 while (1) {
  if (($Idx$0 | 0) == (HEAP32[$NumElements >> 2] | 0)) break;
  $call = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
  if (!$FirstElement$0$off0) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52343);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
  }
  $call3 = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[(HEAP32[$this >> 2] | 0) + ($Idx$0 << 2) >> 2] | 0, $S);
  if (($call3 | 0) == (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0)) {
   __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S, $call);
   $FirstElement$1$off0 = $FirstElement$0$off0;
  } else $FirstElement$1$off0 = 0;
  $FirstElement$0$off0 = $FirstElement$1$off0;
  $Idx$0 = $Idx$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE8__appendEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $4 = 0, $__end_ = 0, $__v = 0, $__value_$i$i$i = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__value_$i$i$i = $this + 8 | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 do if ((HEAP32[$__value_$i$i$i >> 2] | 0) - $1 >> 2 >>> 0 < $__n >>> 0) {
  $add = ($1 - (HEAP32[$this >> 2] | 0) >> 2) + $__n | 0;
  $call$i = __ZNKSt3__26vectorImNS_9allocatorImEEE8max_sizeEv($this) | 0;
  if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
   $4 = HEAP32[$this >> 2] | 0;
   $sub$ptr$sub$i$i$i = (HEAP32[$__value_$i$i$i >> 2] | 0) - $4 | 0;
   $mul$i = $sub$ptr$sub$i$i$i >> 1;
   __ZNSt3__214__split_bufferImRNS_9allocatorImEEEC2EmmS3_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_ >> 2] | 0) - $4 >> 2, $this + 8 | 0);
   __ZNSt3__214__split_bufferImRNS_9allocatorImEEE18__construct_at_endEm($__v, $__n);
   __ZNSt3__26vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE($this, $__v);
   __ZNSt3__214__split_bufferImRNS_9allocatorImEEED2Ev($__v);
   break;
  }
 } else __ZNSt3__26vectorImNS_9allocatorImEEE18__construct_at_endEm($this, $__n); while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE8__appendEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $4 = 0, $__end_ = 0, $__v = 0, $__value_$i$i$i = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__value_$i$i$i = $this + 8 | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 do if ((HEAP32[$__value_$i$i$i >> 2] | 0) - $1 >> 2 >>> 0 < $__n >>> 0) {
  $add = ($1 - (HEAP32[$this >> 2] | 0) >> 2) + $__n | 0;
  $call$i = __ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($this) | 0;
  if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
   $4 = HEAP32[$this >> 2] | 0;
   $sub$ptr$sub$i$i$i = (HEAP32[$__value_$i$i$i >> 2] | 0) - $4 | 0;
   $mul$i = $sub$ptr$sub$i$i$i >> 1;
   __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EmmS3_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_ >> 2] | 0) - $4 >> 2, $this + 8 | 0);
   __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEm($__v, $__n);
   __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this, $__v);
   __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
   break;
  }
 } else __ZNSt3__26vectorIjNS_9allocatorIjEEE18__construct_at_endEm($this, $__n); while (0);
 STACKTOP = sp;
 return;
}

function _fons__tt_buildGlyphBitmap($font, $glyph, $size, $scale, $advance, $lsb, $x0, $y0, $x1, $y1) {
 $font = $font | 0;
 $glyph = $glyph | 0;
 $size = +$size;
 $scale = +$scale;
 $advance = $advance | 0;
 $lsb = $lsb | 0;
 $x0 = $x0 | 0;
 $y0 = $y0 | 0;
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 var $advance$addr = 0, $font$addr = 0, $glyph$addr = 0, $lsb$addr = 0, $scale$addr = 0, $x0$addr = 0, $x1$addr = 0, $y0$addr = 0, $y1$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $font$addr = sp + 36 | 0;
 $glyph$addr = sp + 32 | 0;
 $scale$addr = sp + 24 | 0;
 $advance$addr = sp + 20 | 0;
 $lsb$addr = sp + 16 | 0;
 $x0$addr = sp + 12 | 0;
 $y0$addr = sp + 8 | 0;
 $x1$addr = sp + 4 | 0;
 $y1$addr = sp;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$glyph$addr >> 2] = $glyph;
 HEAPF32[sp + 28 >> 2] = $size;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAP32[$advance$addr >> 2] = $advance;
 HEAP32[$lsb$addr >> 2] = $lsb;
 HEAP32[$x0$addr >> 2] = $x0;
 HEAP32[$y0$addr >> 2] = $y0;
 HEAP32[$x1$addr >> 2] = $x1;
 HEAP32[$y1$addr >> 2] = $y1;
 _stbtt_GetGlyphHMetrics(HEAP32[$font$addr >> 2] | 0, HEAP32[$glyph$addr >> 2] | 0, HEAP32[$advance$addr >> 2] | 0, HEAP32[$lsb$addr >> 2] | 0);
 _stbtt_GetGlyphBitmapBox(HEAP32[$font$addr >> 2] | 0, HEAP32[$glyph$addr >> 2] | 0, +HEAPF32[$scale$addr >> 2], +HEAPF32[$scale$addr >> 2], HEAP32[$x0$addr >> 2] | 0, HEAP32[$y0$addr >> 2] | 0, HEAP32[$x1$addr >> 2] | 0, HEAP32[$y1$addr >> 2] | 0);
 STACKTOP = sp;
 return 1;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $11 = 0, $13 = 0, $7 = 0, $8 = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, $7$looptemp = 0, $8$looptemp = 0, $y$010$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $7 = $0;
  $8 = $1;
  $s$addr$013 = $s;
  do {
   $7$looptemp = $7;
   $7 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $8$looptemp = $8;
   $8 = getTempRet0() | 0;
   $11 = ___muldi3($7 | 0, $8 | 0, 10, 0) | 0;
   $13 = _i64Subtract($7$looptemp | 0, $8$looptemp | 0, $11 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $s$addr$013 = $s$addr$013 + -1 | 0;
   HEAP8[$s$addr$013 >> 0] = $13 & 255 | 48;
  } while ($8$looptemp >>> 0 > 9 | ($8$looptemp | 0) == 9 & $7$looptemp >>> 0 > 4294967295);
  $s$addr$0$lcssa = $s$addr$013;
  $x$addr$0$lcssa$off0 = $7;
 } else {
  $s$addr$0$lcssa = $s;
  $x$addr$0$lcssa$off0 = $0;
 }
 if (!$x$addr$0$lcssa$off0) $s$addr$1$lcssa = $s$addr$0$lcssa; else {
  $s$addr$19 = $s$addr$0$lcssa;
  $y$010 = $x$addr$0$lcssa$off0;
  while (1) {
   $y$010$looptemp = $y$010;
   $y$010 = ($y$010 >>> 0) / 10 | 0;
   $incdec$ptr7 = $s$addr$19 + -1 | 0;
   HEAP8[$incdec$ptr7 >> 0] = $y$010$looptemp - ($y$010 * 10 | 0) | 48;
   if ($y$010$looptemp >>> 0 < 10) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else $s$addr$19 = $incdec$ptr7;
  }
 }
 return $s$addr$1$lcssa | 0;
}

function __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $11 = 0, $12 = 0, $3 = 0, $6 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 3) + 1 | 0;
 $call$i = __ZNKSt3__26vectorI7DrPointNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 2;
  __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$sub$i$i$i >> 3 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 3, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $6 = $__x;
  $11 = HEAP32[$6 + 4 >> 2] | 0;
  $12 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$12 + 4 >> 2] = $11;
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 8;
  __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv($this) {
 $this = $this | 0;
 var $ClassType = 0, $MemberType = 0, $call2 = 0, $call3 = 0, $call7 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ClassType = sp + 4 | 0;
 $MemberType = sp;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 77) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2) | 0;
  HEAP32[$ClassType >> 2] = $call3;
  if (!$call3) $retval$1 = 0; else {
   $call7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2) | 0;
   HEAP32[$MemberType >> 2] = $call7;
   if (!$call7) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $ClassType, $MemberType) | 0;
   $retval$1 = $retval$0;
  }
  $retval$2 = $retval$1;
 } else $retval$2 = 0;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $1 = 0, $2 = 0, $Quals = 0, $agg$tmp = 0, $agg$tmp13 = 0, $agg$tmp13$byval_copy = 0, $agg$tmp6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp13$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp6 = sp + 8 | 0;
 $agg$tmp13 = sp;
 $Quals = $this + 8 | 0;
 $0 = HEAP32[$Quals >> 2] | 0;
 if (!($0 & 1)) $1 = $0; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56350);
  HEAP32[$agg$tmp13$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp13$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp13$byval_copy);
  $1 = HEAP32[$Quals >> 2] | 0;
 }
 if (!($1 & 2)) $2 = $1; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 56357);
  HEAP32[$agg$tmp13$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp13$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp13$byval_copy);
  $2 = HEAP32[$Quals >> 2] | 0;
 }
 if ($2 & 4 | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp13, 56367);
  HEAP32[$agg$tmp13$byval_copy >> 2] = HEAP32[$agg$tmp13 >> 2];
  HEAP32[$agg$tmp13$byval_copy + 4 >> 2] = HEAP32[$agg$tmp13 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp13$byval_copy);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $11 = 0, $12 = 0, $3 = 0, $6 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 3) + 1 | 0;
 $call$i = __ZNKSt3__26vectorI7DrPointNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 2;
  __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$sub$i$i$i >> 3 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 3, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $6 = $__x;
  $11 = HEAP32[$6 + 4 >> 2] | 0;
  $12 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$12 + 4 >> 2] = $11;
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 8;
  __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $4 = 0, $__end_ = 0, $__v = 0, $__value_$i$i$i = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__value_$i$i$i = $this + 8 | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 do if (((HEAP32[$__value_$i$i$i >> 2] | 0) - $1 | 0) >>> 0 < $__n >>> 0) {
  $add = $1 - (HEAP32[$this >> 2] | 0) + $__n | 0;
  $call$i = __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($this) | 0;
  if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
   $4 = HEAP32[$this >> 2] | 0;
   $sub$ptr$sub$i$i$i = (HEAP32[$__value_$i$i$i >> 2] | 0) - $4 | 0;
   $mul$i = $sub$ptr$sub$i$i$i << 1;
   __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_($__v, $sub$ptr$sub$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_ >> 2] | 0) - $4 | 0, $this + 8 | 0);
   __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEm($__v, $__n);
   __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($this, $__v);
   __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
   break;
  }
 } else __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEm($this, $__n); while (0);
 STACKTOP = sp;
 return;
}

function _stbtt__cff_int($b) {
 $b = $b | 0;
 var $13 = 0, $3 = 0, $5 = 0, $8 = 0, $b$addr = 0, $b0 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $b$addr = sp + 4 | 0;
 $b0 = sp;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$b0 >> 2] = (_stbtt__buf_get8(HEAP32[$b$addr >> 2] | 0) | 0) & 255;
 $3 = HEAP32[$b0 >> 2] | 0;
 if ((HEAP32[$b0 >> 2] | 0) >= 32 & (HEAP32[$b0 >> 2] | 0) <= 246) {
  HEAP32[$retval >> 2] = $3 - 139;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 $5 = HEAP32[$b0 >> 2] | 0;
 if (($3 | 0) >= 247 & (HEAP32[$b0 >> 2] | 0) <= 250) {
  HEAP32[$retval >> 2] = ($5 - 247 << 8) + ((_stbtt__buf_get8(HEAP32[$b$addr >> 2] | 0) | 0) & 255) + 108;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 $8 = HEAP32[$b0 >> 2] | 0;
 if (($5 | 0) >= 251 & (HEAP32[$b0 >> 2] | 0) <= 254) {
  HEAP32[$retval >> 2] = (0 - ($8 - 251) << 8) - ((_stbtt__buf_get8(HEAP32[$b$addr >> 2] | 0) | 0) & 255) - 108;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 if (($8 | 0) == 28) {
  HEAP32[$retval >> 2] = _stbtt__buf_get(HEAP32[$b$addr >> 2] | 0, 2) | 0;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 if ((HEAP32[$b0 >> 2] | 0) != 29) ___assert_fail(47680, 44131, 1141, 44408);
 HEAP32[$retval >> 2] = _stbtt__buf_get(HEAP32[$b$addr >> 2] | 0, 4) | 0;
 $13 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function _HMM_MultiplyMat4($agg$result, $Left, $Right) {
 $agg$result = $agg$result | 0;
 $Left = $Left | 0;
 $Right = $Right | 0;
 var $Columns = 0, $CurrentMatrice = 0, $Result = 0, $Rows = 0, $Sum = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $Result = sp + 16 | 0;
 $Columns = sp + 12 | 0;
 $Rows = sp + 8 | 0;
 $Sum = sp + 4 | 0;
 $CurrentMatrice = sp;
 HEAP32[$Columns >> 2] = 0;
 while (1) {
  if ((HEAP32[$Columns >> 2] | 0) >= 4) break;
  HEAP32[$Rows >> 2] = 0;
  while (1) {
   if ((HEAP32[$Rows >> 2] | 0) >= 4) break;
   HEAPF32[$Sum >> 2] = 0.0;
   HEAP32[$CurrentMatrice >> 2] = 0;
   while (1) {
    if ((HEAP32[$CurrentMatrice >> 2] | 0) >= 4) break;
    HEAPF32[$Sum >> 2] = +HEAPF32[$Sum >> 2] + +HEAPF32[$Left + (HEAP32[$CurrentMatrice >> 2] << 4) + (HEAP32[$Rows >> 2] << 2) >> 2] * +HEAPF32[$Right + (HEAP32[$Columns >> 2] << 4) + (HEAP32[$CurrentMatrice >> 2] << 2) >> 2];
    HEAP32[$CurrentMatrice >> 2] = (HEAP32[$CurrentMatrice >> 2] | 0) + 1;
   }
   HEAPF32[$Result + (HEAP32[$Columns >> 2] << 4) + (HEAP32[$Rows >> 2] << 2) >> 2] = +HEAPF32[$Sum >> 2];
   HEAP32[$Rows >> 2] = (HEAP32[$Rows >> 2] | 0) + 1;
  }
  HEAP32[$Columns >> 2] = (HEAP32[$Columns >> 2] | 0) + 1;
 }
 dest = $agg$result;
 src = $Result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _fonsPushState($stash) {
 $stash = $stash | 0;
 var $2 = 0, $arrayidx = 0, $arrayidx10 = 0, $nstates12 = 0, $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 $2 = HEAP32[$stash$addr >> 2] | 0;
 if ((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 21052 >> 2] | 0) >= 20) {
  if (!(HEAP32[$2 + 21056 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 21056 >> 2] & 3](HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 21060 >> 2] | 0, 3, 0);
  STACKTOP = sp;
  return;
 } else {
  if ((HEAP32[$2 + 21052 >> 2] | 0) > 0) {
   $arrayidx = (HEAP32[$stash$addr >> 2] | 0) + 20572 + ((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 21052 >> 2] | 0) * 24 | 0) | 0;
   $arrayidx10 = (HEAP32[$stash$addr >> 2] | 0) + 20572 + (((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 21052 >> 2] | 0) - 1 | 0) * 24 | 0) | 0;
   HEAP32[$arrayidx >> 2] = HEAP32[$arrayidx10 >> 2];
   HEAP32[$arrayidx + 4 >> 2] = HEAP32[$arrayidx10 + 4 >> 2];
   HEAP32[$arrayidx + 8 >> 2] = HEAP32[$arrayidx10 + 8 >> 2];
   HEAP32[$arrayidx + 12 >> 2] = HEAP32[$arrayidx10 + 12 >> 2];
   HEAP32[$arrayidx + 16 >> 2] = HEAP32[$arrayidx10 + 16 >> 2];
   HEAP32[$arrayidx + 20 >> 2] = HEAP32[$arrayidx10 + 20 >> 2];
  }
  $nstates12 = (HEAP32[$stash$addr >> 2] | 0) + 21052 | 0;
  HEAP32[$nstates12 >> 2] = (HEAP32[$nstates12 >> 2] | 0) + 1;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2INS_11__wrap_iterIPKS1_EEEET_NS_9enable_ifIXaasr21__is_forward_iteratorISA_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueESA_E4typeE($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp5 = 0, $agg$tmp5$byval_copy = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp5$byval_copy = sp + 12 | 0;
 $agg$tmp4$byval_copy = sp + 8 | 0;
 $agg$tmp4 = sp + 4 | 0;
 $agg$tmp5 = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $0 = HEAP32[$__first >> 2] | 0;
 $1 = HEAP32[$__last >> 2] | 0;
 $sub$ptr$sub$i$i$i = $1 - $0 | 0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 4;
 if ($sub$ptr$sub$i$i$i | 0) {
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE11__vallocateEm($this, $sub$ptr$div$i$i$i);
  HEAP32[$agg$tmp4 >> 2] = $0;
  HEAP32[$agg$tmp5 >> 2] = $1;
  HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
  HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPKS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m($this, $agg$tmp4$byval_copy, $agg$tmp5$byval_copy, $sub$ptr$div$i$i$i);
 }
 STACKTOP = sp;
 return;
}

function _sg_apply_uniforms($stage, $ub_index, $data) {
 $stage = $stage | 0;
 $ub_index = $ub_index | 0;
 $data = $data | 0;
 var $data$addr = 0, $stage$addr = 0, $ub_index$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stage$addr = sp + 8 | 0;
 $ub_index$addr = sp + 4 | 0;
 $data$addr = sp;
 HEAP32[$stage$addr >> 2] = $stage;
 HEAP32[$ub_index$addr >> 2] = $ub_index;
 HEAP32[$data$addr >> 2] = $data;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14930, 22818);
 if (!((HEAP32[$stage$addr >> 2] | 0) == 0 | (HEAP32[$stage$addr >> 2] | 0) == 1)) ___assert_fail(22836, 21600, 14931, 22818);
 if (!((HEAP32[$ub_index$addr >> 2] | 0) >= 0 & (HEAP32[$ub_index$addr >> 2] | 0) < 4)) ___assert_fail(22897, 21600, 14932, 22818);
 if (!(HEAP32[$data$addr >> 2] | 0)) ___assert_fail(22952, 21600, 14933, 22818);
 if (!(HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0)) ___assert_fail(22952, 21600, 14933, 22818);
 if ((HEAP32[(HEAP32[$data$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(22952, 21600, 14933, 22818);
 if (!(__sg_validate_apply_uniforms(HEAP32[$stage$addr >> 2] | 0, HEAP32[$ub_index$addr >> 2] | 0, HEAP32[$data$addr >> 2] | 0) | 0)) {
  HEAP8[2164246] = 0;
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[2164244] & 1)) {
  STACKTOP = sp;
  return;
 }
 __sg_apply_uniforms(HEAP32[$stage$addr >> 2] | 0, HEAP32[$ub_index$addr >> 2] | 0, HEAP32[$data$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN7DrColorC2ERKhS1_S1_S1_($this, $r_, $g_, $b_, $a_) {
 $this = $this | 0;
 $r_ = $r_ | 0;
 $g_ = $g_ | 0;
 $b_ = $b_ | 0;
 $a_ = $a_ | 0;
 var $a = 0, $b = 0, $g = 0, $ref$tmp = 0, $ref$tmp2 = 0, $ref$tmp3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp + 2 | 0;
 $ref$tmp2 = sp + 1 | 0;
 $ref$tmp3 = sp;
 HEAP8[$this >> 0] = 0;
 $g = $this + 1 | 0;
 HEAP8[$g >> 0] = 0;
 $b = $this + 2 | 0;
 HEAP8[$b >> 0] = 0;
 $a = $this + 3 | 0;
 HEAP8[$a >> 0] = -1;
 HEAP8[$ref$tmp >> 0] = HEAP8[$r_ >> 0] | 0;
 HEAP8[$ref$tmp2 >> 0] = __Zli3_ucy(0, 0) | 0;
 HEAP8[$ref$tmp3 >> 0] = __Zli3_ucy(255, 0) | 0;
 HEAP8[$this >> 0] = __ZN2Dr5ClampIhEET_RKS1_S3_S3_($ref$tmp, $ref$tmp2, $ref$tmp3) | 0;
 HEAP8[$ref$tmp >> 0] = HEAP8[$g_ >> 0] | 0;
 HEAP8[$ref$tmp2 >> 0] = __Zli3_ucy(0, 0) | 0;
 HEAP8[$ref$tmp3 >> 0] = __Zli3_ucy(255, 0) | 0;
 HEAP8[$g >> 0] = __ZN2Dr5ClampIhEET_RKS1_S3_S3_($ref$tmp, $ref$tmp2, $ref$tmp3) | 0;
 HEAP8[$ref$tmp >> 0] = HEAP8[$b_ >> 0] | 0;
 HEAP8[$ref$tmp2 >> 0] = __Zli3_ucy(0, 0) | 0;
 HEAP8[$ref$tmp3 >> 0] = __Zli3_ucy(255, 0) | 0;
 HEAP8[$b >> 0] = __ZN2Dr5ClampIhEET_RKS1_S3_S3_($ref$tmp, $ref$tmp2, $ref$tmp3) | 0;
 HEAP8[$ref$tmp >> 0] = HEAP8[$a_ >> 0] | 0;
 HEAP8[$ref$tmp2 >> 0] = __Zli3_ucy(0, 0) | 0;
 HEAP8[$ref$tmp3 >> 0] = __Zli3_ucy(255, 0) | 0;
 HEAP8[$a >> 0] = __ZN2Dr5ClampIhEET_RKS1_S3_S3_($ref$tmp, $ref$tmp2, $ref$tmp3) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__27__sort5IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_S5_T_($__x1, $__x2, $__x3, $__x4, $__x5, $__c) {
 $__x1 = $__x1 | 0;
 $__x2 = $__x2 | 0;
 $__x3 = $__x3 | 0;
 $__x4 = $__x4 | 0;
 $__x5 = $__x5 | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__r$0 = 0, $call = 0, $inc = 0, $inc4 = 0;
 $call = __ZNSt3__27__sort4IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_T_($__x1, $__x2, $__x3, $__x4, $__c) | 0;
 $0 = HEAP32[$__x5 >> 2] | 0;
 $1 = HEAP32[$__x4 >> 2] | 0;
 if (__ZN13TPPLPartition12VertexSorterclEll($__c, $0, $1) | 0) {
  HEAP32[$__x4 >> 2] = $0;
  HEAP32[$__x5 >> 2] = $1;
  $inc = $call + 1 | 0;
  $2 = HEAP32[$__x4 >> 2] | 0;
  $3 = HEAP32[$__x3 >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($__c, $2, $3) | 0) {
   HEAP32[$__x3 >> 2] = $2;
   HEAP32[$__x4 >> 2] = $3;
   $inc4 = $call + 2 | 0;
   $4 = HEAP32[$__x3 >> 2] | 0;
   $5 = HEAP32[$__x2 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($__c, $4, $5) | 0) {
    HEAP32[$__x2 >> 2] = $4;
    HEAP32[$__x3 >> 2] = $5;
    $6 = HEAP32[$__x2 >> 2] | 0;
    $7 = HEAP32[$__x1 >> 2] | 0;
    if (__ZN13TPPLPartition12VertexSorterclEll($__c, $6, $7) | 0) {
     HEAP32[$__x1 >> 2] = $6;
     HEAP32[$__x2 >> 2] = $7;
     $__r$0 = $call + 4 | 0;
    } else $__r$0 = $call + 3 | 0;
   } else $__r$0 = $inc4;
  } else $__r$0 = $inc;
 } else $__r$0 = $call;
 return $__r$0 | 0;
}

function _meshopt_remapVertexBuffer($destination, $vertices, $vertex_count, $vertex_size, $remap) {
 $destination = $destination | 0;
 $vertices = $vertices | 0;
 $vertex_count = $vertex_count | 0;
 $vertex_size = $vertex_size | 0;
 $remap = $remap | 0;
 var $1 = 0, $allocator = 0, $call = 0, $i$0 = 0, $mul = 0, $vertices$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $allocator = sp;
 if (($vertex_size + -1 | 0) >>> 0 >= 256) ___assert_fail(47282, 45771, 291, 45994);
 __ZN17meshopt_AllocatorC2Ev($allocator);
 if (($destination | 0) == ($vertices | 0)) {
  $mul = Math_imul($vertex_size, $vertex_count) | 0;
  $call = __ZN17meshopt_Allocator8allocateIhEEPT_m($allocator, $mul) | 0;
  _memcpy($call | 0, $destination | 0, $mul | 0) | 0;
  $vertices$addr$0 = $call;
 } else $vertices$addr$0 = $vertices;
 $i$0 = 0;
 while (1) {
  if ($i$0 >>> 0 >= $vertex_count >>> 0) {
   label = 7;
   break;
  }
  $1 = HEAP32[$remap + ($i$0 << 2) >> 2] | 0;
  if (($1 | 0) != -1) {
   if ($1 >>> 0 >= $vertex_count >>> 0) {
    label = 10;
    break;
   }
   _memcpy($destination + (Math_imul($1, $vertex_size) | 0) | 0, $vertices$addr$0 + (Math_imul($i$0, $vertex_size) | 0) | 0, $vertex_size | 0) | 0;
  }
  $i$0 = $i$0 + 1 | 0;
 }
 if ((label | 0) == 7) {
  __ZN17meshopt_AllocatorD2Ev($allocator);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 10) ___assert_fail(46020, 45771, 307, 45994);
}

function __ZNSt3__210shared_ptrI7DrImageE11make_sharedIJRA7_KcR8DrBitmapfEEES2_DpOT_($agg$result, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $__value_$i$i$i12 = 0, $agg$tmp$i$i$i = 0, $call$i$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $agg$tmp$i$i$i = sp + 8 | 0;
 $call$i$i = __Znwm(92) | 0;
 HEAP32[$call$i$i + 4 >> 2] = 0;
 HEAP32[$call$i$i + 8 >> 2] = 0;
 HEAP32[$call$i$i >> 2] = 12804;
 HEAP32[$agg$tmp$i$i$i >> 2] = 0;
 HEAP32[$agg$tmp$i$i$i + 4 >> 2] = 0;
 HEAP32[$agg$tmp$i$i$i + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp$i$i$i, $__args, __ZNSt3__211char_traitsIcE6lengthEPKc($__args) | 0);
 $__value_$i$i$i12 = $call$i$i + 12 | 0;
 __ZN7DrImageC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEER8DrBitmapfb($__value_$i$i$i12, $agg$tmp$i$i$i, $__args1, +HEAPF32[$__args3 >> 2], 1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp$i$i$i);
 HEAP32[$agg$result >> 2] = $__value_$i$i$i12;
 HEAP32[$agg$result + 4 >> 2] = $call$i$i;
 HEAP32[$vararg_buffer >> 2] = $__value_$i$i$i12;
 HEAP32[$vararg_buffer + 4 >> 2] = $__value_$i$i$i12;
 __ZNSt3__210shared_ptrI7DrImageE18__enable_weak_thisEz($agg$result, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_($agg$result, $this, $__k, $__args) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 var $0 = 0, $__h = 0, $__inserted$0 = 0, $__parent = 0, $__r$0 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__parent = sp + 12 | 0;
 $__h = sp;
 $call = __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISC_EERKT_($this, $__parent, $__k) | 0;
 $0 = HEAP32[$call >> 2] | 0;
 if (!$0) {
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_($__h, $this, $__args);
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSC_SC_($this, HEAP32[$__parent >> 2] | 0, $call, HEAP32[$__h >> 2] | 0);
  $__inserted$0 = 1;
  $__r$0 = HEAP32[$__h >> 2] | 0;
 } else {
  $__inserted$0 = 0;
  $__r$0 = $0;
 }
 HEAP32[$agg$result >> 2] = $__r$0;
 HEAP8[$agg$result + 4 >> 0] = $__inserted$0;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $2 = 0, $7 = 0, $8 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8 | 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 127]($0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 51787);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 $2 = $this + 12 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $agg$tmp2;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 51793);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 53791);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 51793);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function _sg_draw($base_element, $num_elements, $num_instances) {
 $base_element = $base_element | 0;
 $num_elements = $num_elements | 0;
 $num_instances = $num_instances | 0;
 var $base_element$addr = 0, $num_elements$addr = 0, $num_instances$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $base_element$addr = sp + 8 | 0;
 $num_elements$addr = sp + 4 | 0;
 $num_instances$addr = sp;
 HEAP32[$base_element$addr >> 2] = $base_element;
 HEAP32[$num_elements$addr >> 2] = $num_elements;
 HEAP32[$num_instances$addr >> 2] = $num_instances;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14951, 22990);
 if ((HEAP32[$base_element$addr >> 2] | 0) < 0) ___assert_fail(22998, 21600, 14952, 22990);
 if ((HEAP32[$num_elements$addr >> 2] | 0) < 0) ___assert_fail(23016, 21600, 14953, 22990);
 if ((HEAP32[$num_instances$addr >> 2] | 0) < 0) ___assert_fail(23034, 21600, 14954, 22990);
 if (!(HEAP8[2164245] & 1)) _puts(23053) | 0;
 if (!(HEAP8[2164244] & 1)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[2164246] & 1)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[2164245] & 1)) {
  STACKTOP = sp;
  return;
 }
 if (0 == (HEAP32[$num_elements$addr >> 2] | 0) | 0 == (HEAP32[$num_instances$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __sg_draw(HEAP32[$base_element$addr >> 2] | 0, HEAP32[$num_elements$addr >> 2] | 0, HEAP32[$num_instances$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 54762);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 12 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 52155);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $first$addr$2 = 0, $first$pn = 0, $t1$0 = 0;
 L1 : do if (($first | 0) == ($last | 0)) $first$addr$2 = $first; else {
  $0 = HEAP8[$first >> 0] | 0;
  if ($0 << 24 >> 24 != 95) {
   if ((($0 << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
    $first$addr$2 = $first;
    break;
   }
   $first$pn = $first;
   while (1) {
    $first$pn = $first$pn + 1 | 0;
    if (($first$pn | 0) == ($last | 0)) {
     $first$addr$2 = $last;
     break L1;
    }
    if (((HEAP8[$first$pn >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $first$addr$2 = $first;
     break L1;
    }
   }
  }
  $add$ptr = $first + 1 | 0;
  if (($add$ptr | 0) == ($last | 0)) $first$addr$2 = $first; else {
   $1 = HEAP8[$add$ptr >> 0] | 0;
   if ((($1 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
    $first$addr$2 = $first + 2 | 0;
    break;
   }
   if ($1 << 24 >> 24 == 95) {
    $t1$0 = $first + 2 | 0;
    while (1) {
     if (($t1$0 | 0) == ($last | 0)) {
      $first$addr$2 = $first;
      break L1;
     }
     $2 = HEAP8[$t1$0 >> 0] | 0;
     if ((($2 << 24 >> 24) + -48 | 0) >>> 0 >= 10) break;
     $t1$0 = $t1$0 + 1 | 0;
    }
    return ($2 << 24 >> 24 == 95 ? $t1$0 + 1 | 0 : $first) | 0;
   } else $first$addr$2 = $first;
  }
 } while (0);
 return $first$addr$2 | 0;
}

function _stbi__grow_buffer_unsafe($j) {
 $j = $j | 0;
 var $b = 0, $c = 0, $code_bits16 = 0, $code_buffer = 0, $cond = 0, $j$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $j$addr = sp + 8 | 0;
 $b = sp + 4 | 0;
 $c = sp;
 HEAP32[$j$addr >> 2] = $j;
 while (1) {
  if (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18376 >> 2] | 0) $cond = 0; else $cond = (_stbi__get8(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) | 0) & 255;
  HEAP32[$b >> 2] = $cond;
  if ((HEAP32[$b >> 2] | 0) == 255) {
   HEAP32[$c >> 2] = (_stbi__get8(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) | 0) & 255;
   while (1) {
    if ((HEAP32[$c >> 2] | 0) != 255) break;
    HEAP32[$c >> 2] = (_stbi__get8(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) | 0) & 255;
   }
   if (HEAP32[$c >> 2] | 0) break;
  }
  $code_buffer = (HEAP32[$j$addr >> 2] | 0) + 18364 | 0;
  HEAP32[$code_buffer >> 2] = HEAP32[$code_buffer >> 2] | HEAP32[$b >> 2] << 24 - (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0);
  $code_bits16 = (HEAP32[$j$addr >> 2] | 0) + 18368 | 0;
  HEAP32[$code_bits16 >> 2] = (HEAP32[$code_bits16 >> 2] | 0) + 8;
  if ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0) > 24) {
   label = 11;
   break;
  }
 }
 if ((label | 0) == 11) {
  STACKTOP = sp;
  return;
 }
 HEAP8[(HEAP32[$j$addr >> 2] | 0) + 18372 >> 0] = HEAP32[$c >> 2];
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18376 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 28 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 28 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferI8DrBitmapRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 28 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN8DrBitmapC2ERKS_13Bitmap_Format(HEAP32[$__end_ >> 2] | 0, $__x, 4);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 28;
  __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferI8DrBitmapRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _stbi__paeth($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $18 = 0, $a$addr = 0, $b$addr = 0, $c$addr = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 28 | 0;
 $a$addr = sp + 24 | 0;
 $b$addr = sp + 20 | 0;
 $c$addr = sp + 16 | 0;
 $p = sp + 12 | 0;
 $pa = sp + 8 | 0;
 $pb = sp + 4 | 0;
 $pc = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$p >> 2] = (HEAP32[$a$addr >> 2] | 0) + (HEAP32[$b$addr >> 2] | 0) - (HEAP32[$c$addr >> 2] | 0);
 HEAP32[$pa >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$a$addr >> 2] | 0) | 0) | 0;
 HEAP32[$pb >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$b$addr >> 2] | 0) | 0) | 0;
 HEAP32[$pc >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$c$addr >> 2] | 0) | 0) | 0;
 if ((HEAP32[$pa >> 2] | 0) <= (HEAP32[$pb >> 2] | 0)) if ((HEAP32[$pa >> 2] | 0) <= (HEAP32[$pc >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$a$addr >> 2];
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 if ((HEAP32[$pb >> 2] | 0) <= (HEAP32[$pc >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$b$addr >> 2];
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  HEAP32[$retval >> 2] = HEAP32[$c$addr >> 2];
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8 | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52341);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp2;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 52234);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp;
 $agg$tmp2 = sp + 16 | 0;
 $agg$tmp4 = sp + 8 | 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 52159);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 52155);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbtt_GetFontVMetrics($info, $ascent, $descent, $lineGap) {
 $info = $info | 0;
 $ascent = $ascent | 0;
 $descent = $descent | 0;
 $lineGap = $lineGap | 0;
 var $ascent$addr = 0, $conv = 0, $conv18 = 0, $conv9 = 0, $descent$addr = 0, $info$addr = 0, $lineGap$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $info$addr = sp + 12 | 0;
 $ascent$addr = sp + 8 | 0;
 $descent$addr = sp + 4 | 0;
 $lineGap$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$ascent$addr >> 2] = $ascent;
 HEAP32[$descent$addr >> 2] = $descent;
 HEAP32[$lineGap$addr >> 2] = $lineGap;
 if (HEAP32[$ascent$addr >> 2] | 0) {
  $conv = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] | 0) + 4 | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[$ascent$addr >> 2] >> 2] = $conv;
 }
 if (HEAP32[$descent$addr >> 2] | 0) {
  $conv9 = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] | 0) + 6 | 0) | 0) << 16 >> 16;
  HEAP32[HEAP32[$descent$addr >> 2] >> 2] = $conv9;
 }
 if (!(HEAP32[$lineGap$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $conv18 = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] | 0) + 8 | 0) | 0) << 16 >> 16;
 HEAP32[HEAP32[$lineGap$addr >> 2] >> 2] = $conv18;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8 | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $s);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 54921);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp4$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp2;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 52155);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE($this, $State) {
 $this = $this | 0;
 $State = $State | 0;
 var $0 = 0, $1 = 0, $2 = 0, $ForwardTemplateRefs = 0, $I$0 = 0, $TemplateParams = 0, $call = 0, $retval$2 = 0, label = 0;
 $0 = HEAP32[$State + 12 >> 2] | 0;
 $ForwardTemplateRefs = $this + 332 | 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($ForwardTemplateRefs) | 0;
 $TemplateParams = $this + 288 | 0;
 $I$0 = $0;
 while (1) {
  if ($I$0 >>> 0 >= $call >>> 0) {
   label = 5;
   break;
  }
  $1 = HEAP32[(__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm($ForwardTemplateRefs, $I$0) | 0) >> 2] | 0;
  $2 = HEAP32[$1 + 8 >> 2] | 0;
  if ($2 >>> 0 >= (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($TemplateParams) | 0) >>> 0) {
   $retval$2 = 1;
   break;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[(__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($TemplateParams, $2) | 0) >> 2];
  $I$0 = $I$0 + 1 | 0;
 }
 if ((label | 0) == 5) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm($ForwardTemplateRefs, $0);
  $retval$2 = 0;
 }
 return $retval$2 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($this) {
 $this = $this | 0;
 var $SN = 0, $TA = 0, $call = 0, $call2 = 0, $call7 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $SN = sp + 4 | 0;
 $TA = sp;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
 $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call) | 0;
 HEAP32[$SN >> 2] = $call2;
 if (!$call2) $retval$1 = 0; else if ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24 == 73) {
  $call7 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call, 0) | 0;
  HEAP32[$TA >> 2] = $call7;
  if (!$call7) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $SN, $TA) | 0;
  $retval$1 = $retval$0;
 } else $retval$1 = $call2;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __sfetch_pool_discard($pool) {
 $pool = $pool | 0;
 var $16 = 0, $17 = 0, $18 = 0, $free_top = 0, $pool$addr = 0, $valid = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(30066, 25510, 1357, 42359);
 if (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0);
  HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] = 0;
 }
 if (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 16 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 16 >> 2] | 0);
  HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 16 >> 2] = 0;
 }
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0)) {
  $16 = HEAP32[$pool$addr >> 2] | 0;
  HEAP32[$16 >> 2] = 0;
  $17 = HEAP32[$pool$addr >> 2] | 0;
  $free_top = $17 + 4 | 0;
  HEAP32[$free_top >> 2] = 0;
  $18 = HEAP32[$pool$addr >> 2] | 0;
  $valid = $18 + 20 | 0;
  HEAP8[$valid >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] = 0;
 $16 = HEAP32[$pool$addr >> 2] | 0;
 HEAP32[$16 >> 2] = 0;
 $17 = HEAP32[$pool$addr >> 2] | 0;
 $free_top = $17 + 4 | 0;
 HEAP32[$free_top >> 2] = 0;
 $18 = HEAP32[$pool$addr >> 2] | 0;
 $valid = $18 + 20 | 0;
 HEAP8[$valid >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 52155);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp4;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 52155);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp4;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp3 = 0, $agg$tmp5 = 0, $agg$tmp5$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp5$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp3 = sp + 8 | 0;
 $agg$tmp5 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52341);
 HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp5$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp5$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 if ((__ZNK12_GLOBAL__N_112OutputStream4backEv($S) | 0) << 24 >> 24 == 62) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 52157);
  HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
  HEAP32[$agg$tmp5$byval_copy + 4 >> 2] = HEAP32[$agg$tmp3 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp5$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5, 52234);
 HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$agg$tmp5$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp5$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbi__readval($s, $channel, $dest) {
 $s = $s | 0;
 $channel = $channel | 0;
 $dest = $dest | 0;
 var $12 = 0, $call5 = 0, $channel$addr = 0, $dest$addr = 0, $i = 0, $mask = 0, $retval = 0, $s$addr = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 20 | 0;
 $s$addr = sp + 16 | 0;
 $channel$addr = sp + 12 | 0;
 $dest$addr = sp + 8 | 0;
 $mask = sp + 4 | 0;
 $i = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$channel$addr >> 2] = $channel;
 HEAP32[$dest$addr >> 2] = $dest;
 HEAP32[$mask >> 2] = 128;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 4) {
   label = 8;
   break;
  }
  if (HEAP32[$channel$addr >> 2] & HEAP32[$mask >> 2] | 0) {
   if (_stbi__at_eof(HEAP32[$s$addr >> 2] | 0) | 0) {
    label = 5;
    break;
   }
   $call5 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP8[(HEAP32[$dest$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = $call5;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  HEAP32[$mask >> 2] = HEAP32[$mask >> 2] >> 1;
 }
 if ((label | 0) == 5) {
  $tobool4 = (_stbi__err(47858) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool4 ? 0 : 0;
  $12 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $12 | 0;
 } else if ((label | 0) == 8) {
  HEAP32[$retval >> 2] = HEAP32[$dest$addr >> 2];
  $12 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $1 = 0, $Collapsed = 0, $Printing = 0, $SavePrinting = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp$byval_copy = sp + 24 | 0;
 $SavePrinting = sp + 16 | 0;
 $Collapsed = sp + 8 | 0;
 $agg$tmp = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($Collapsed, $this, $s);
  $1 = HEAP32[$Collapsed + 4 >> 2] | 0;
  if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1, $s) | 0) label = 4; else if (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1, $s) | 0) label = 4;
  if ((label | 0) == 4) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52155);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 127]($1, $s);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp6$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp6 = sp;
 if (HEAP8[$this + 12 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53905);
  HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 54701);
 HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 if (HEAP8[$this + 13 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 54708);
  HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2];
  HEAP32[$agg$tmp6$byval_copy + 4 >> 2] = HEAP32[$agg$tmp6 + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp6$byval_copy);
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNSt3__27__sort5IR7comparePmEEjT0_S4_S4_S4_S4_T_($__x1, $__x2, $__x3, $__x4, $__x5, $__c) {
 $__x1 = $__x1 | 0;
 $__x2 = $__x2 | 0;
 $__x3 = $__x3 | 0;
 $__x4 = $__x4 | 0;
 $__x5 = $__x5 | 0;
 $__c = $__c | 0;
 var $10 = 0, $14 = 0, $2 = 0, $6 = 0, $__r$0 = 0, $call = 0, $inc = 0, $inc4 = 0;
 $call = __ZNSt3__27__sort4IR7comparePmEEjT0_S4_S4_S4_T_($__x1, $__x2, $__x3, $__x4, $__c) | 0;
 if (__ZN7compareclEmm($__c, HEAP32[$__x5 >> 2] | 0, HEAP32[$__x4 >> 2] | 0) | 0) {
  $2 = HEAP32[$__x4 >> 2] | 0;
  HEAP32[$__x4 >> 2] = HEAP32[$__x5 >> 2];
  HEAP32[$__x5 >> 2] = $2;
  $inc = $call + 1 | 0;
  if (__ZN7compareclEmm($__c, HEAP32[$__x4 >> 2] | 0, HEAP32[$__x3 >> 2] | 0) | 0) {
   $6 = HEAP32[$__x3 >> 2] | 0;
   HEAP32[$__x3 >> 2] = HEAP32[$__x4 >> 2];
   HEAP32[$__x4 >> 2] = $6;
   $inc4 = $call + 2 | 0;
   if (__ZN7compareclEmm($__c, HEAP32[$__x3 >> 2] | 0, HEAP32[$__x2 >> 2] | 0) | 0) {
    $10 = HEAP32[$__x2 >> 2] | 0;
    HEAP32[$__x2 >> 2] = HEAP32[$__x3 >> 2];
    HEAP32[$__x3 >> 2] = $10;
    if (__ZN7compareclEmm($__c, HEAP32[$__x2 >> 2] | 0, HEAP32[$__x1 >> 2] | 0) | 0) {
     $14 = HEAP32[$__x1 >> 2] | 0;
     HEAP32[$__x1 >> 2] = HEAP32[$__x2 >> 2];
     HEAP32[$__x2 >> 2] = $14;
     $__r$0 = $call + 4 | 0;
    } else $__r$0 = $call + 3 | 0;
   } else $__r$0 = $inc4;
  } else $__r$0 = $inc;
 } else $__r$0 = $call;
 return $__r$0 | 0;
}

function __ZN8DrBitmap8setPixelEii7DrColor($this, $x, $y, $color) {
 $this = $this | 0;
 $x = $x | 0;
 $y = $y | 0;
 $color = $color | 0;
 var $$sink = 0, $3 = 0, $5 = 0, $7 = 0, $__begin_$i9 = 0, $__begin_$i9$sink = 0, $add = 0, $add27$sink = 0, $mul = 0, label = 0;
 $mul = Math_imul(HEAP32[$this + 8 >> 2] | 0, $y) | 0;
 $add = Math_imul($mul + $x | 0, HEAP32[$this + 4 >> 2] | 0) | 0;
 switch (HEAP32[$this >> 2] | 0) {
 case 1:
  {
   $$sink = ~~(+__ZNK7DrColor4redFEv($color) * .2126 + +__ZNK7DrColor6greenFEv($color) * .7152 + +__ZNK7DrColor5blueFEv($color) * .0722) & 255;
   $__begin_$i9$sink = $this + 16 | 0;
   $add27$sink = $add;
   label = 4;
   break;
  }
 case 4:
  {
   $3 = HEAP8[(__ZNK7DrColor4blueEv($color) | 0) >> 0] | 0;
   $__begin_$i9 = $this + 16 | 0;
   HEAP8[(HEAP32[$__begin_$i9 >> 2] | 0) + $add >> 0] = $3;
   $5 = HEAP8[(__ZNK7DrColor5greenEv($color) | 0) >> 0] | 0;
   HEAP8[(HEAP32[$__begin_$i9 >> 2] | 0) + ($add + 1) >> 0] = $5;
   $7 = HEAP8[(__ZNK7DrColor3redEv($color) | 0) >> 0] | 0;
   HEAP8[(HEAP32[$__begin_$i9 >> 2] | 0) + ($add + 2) >> 0] = $7;
   $$sink = HEAP8[(__ZNK7DrColor5alphaEv($color) | 0) >> 0] | 0;
   $__begin_$i9$sink = $__begin_$i9;
   $add27$sink = $add + 3 | 0;
   label = 4;
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 4) HEAP8[(HEAP32[$__begin_$i9$sink >> 2] | 0) + $add27$sink >> 0] = $$sink;
 return;
}

function _fons__tmpalloc($size, $up) {
 $size = $size | 0;
 $up = $up | 0;
 var $21 = 0, $5 = 0, $nscratch8 = 0, $ptr = 0, $retval = 0, $size$addr = 0, $stash = 0, $up$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $size$addr = sp + 12 | 0;
 $up$addr = sp + 8 | 0;
 $ptr = sp + 4 | 0;
 $stash = sp;
 HEAP32[$size$addr >> 2] = $size;
 HEAP32[$up$addr >> 2] = $up;
 HEAP32[$stash >> 2] = HEAP32[$up$addr >> 2];
 HEAP32[$size$addr >> 2] = (HEAP32[$size$addr >> 2] | 0) + 15 & -16;
 $5 = HEAP32[$stash >> 2] | 0;
 if (((HEAP32[(HEAP32[$stash >> 2] | 0) + 20568 >> 2] | 0) + (HEAP32[$size$addr >> 2] | 0) | 0) <= 64e3) {
  HEAP32[$ptr >> 2] = (HEAP32[$5 + 20564 >> 2] | 0) + (HEAP32[(HEAP32[$stash >> 2] | 0) + 20568 >> 2] | 0);
  $nscratch8 = (HEAP32[$stash >> 2] | 0) + 20568 | 0;
  HEAP32[$nscratch8 >> 2] = (HEAP32[$nscratch8 >> 2] | 0) + (HEAP32[$size$addr >> 2] | 0);
  HEAP32[$retval >> 2] = HEAP32[$ptr >> 2];
  $21 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 if (HEAP32[$5 + 21056 >> 2] | 0) FUNCTION_TABLE_viii[HEAP32[(HEAP32[$stash >> 2] | 0) + 21056 >> 2] & 3](HEAP32[(HEAP32[$stash >> 2] | 0) + 21060 >> 2] | 0, 2, (HEAP32[(HEAP32[$stash >> 2] | 0) + 20568 >> 2] | 0) + (HEAP32[$size$addr >> 2] | 0) | 0);
 HEAP32[$retval >> 2] = 0;
 $21 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $21 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $dst_ptr_not_leading_to_static_ptr = 0, $number_to_dst_ptr = 0;
 do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $3 = 0, $Pointee = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $Pointee = $this + 8 | 0;
 $0 = HEAP32[$Pointee >> 2] | 0;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0) << 24 >> 24 == 10) {
  if (!(__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($0) | 0)) {
   $1 = HEAP32[$Pointee >> 2] | 0;
   label = 4;
  }
 } else {
  $1 = $0;
  label = 4;
 }
 if ((label | 0) == 4) {
  if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1, $s) | 0) label = 6; else if (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$Pointee >> 2] | 0, $s) | 0) label = 6;
  if ((label | 0) == 6) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52155);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
  }
  $3 = HEAP32[$Pointee >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 127]($3, $s);
 }
 STACKTOP = sp;
 return;
}

function _fons__tt_renderGlyphBitmap($font, $output, $outWidth, $outHeight, $outStride, $scaleX, $scaleY, $glyph) {
 $font = $font | 0;
 $output = $output | 0;
 $outWidth = $outWidth | 0;
 $outHeight = $outHeight | 0;
 $outStride = $outStride | 0;
 $scaleX = +$scaleX;
 $scaleY = +$scaleY;
 $glyph = $glyph | 0;
 var $font$addr = 0, $glyph$addr = 0, $outHeight$addr = 0, $outStride$addr = 0, $outWidth$addr = 0, $output$addr = 0, $scaleX$addr = 0, $scaleY$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $font$addr = sp + 28 | 0;
 $output$addr = sp + 24 | 0;
 $outWidth$addr = sp + 20 | 0;
 $outHeight$addr = sp + 16 | 0;
 $outStride$addr = sp + 12 | 0;
 $scaleX$addr = sp + 8 | 0;
 $scaleY$addr = sp + 4 | 0;
 $glyph$addr = sp;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$output$addr >> 2] = $output;
 HEAP32[$outWidth$addr >> 2] = $outWidth;
 HEAP32[$outHeight$addr >> 2] = $outHeight;
 HEAP32[$outStride$addr >> 2] = $outStride;
 HEAPF32[$scaleX$addr >> 2] = $scaleX;
 HEAPF32[$scaleY$addr >> 2] = $scaleY;
 HEAP32[$glyph$addr >> 2] = $glyph;
 _stbtt_MakeGlyphBitmap(HEAP32[$font$addr >> 2] | 0, HEAP32[$output$addr >> 2] | 0, HEAP32[$outWidth$addr >> 2] | 0, HEAP32[$outHeight$addr >> 2] | 0, HEAP32[$outStride$addr >> 2] | 0, +HEAPF32[$scaleX$addr >> 2], +HEAPF32[$scaleY$addr >> 2], HEAP32[$glyph$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $3 = 0, $__size_$i$i = 0, $add8 = 0, $cond$i22 = 0, $cond$i32 = 0, $cond$i33 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ($__n | 0) {
  $__size_$i$i = $this + 11 | 0;
  $0 = HEAP8[$__size_$i$i >> 0] | 0;
  if ($0 << 24 >> 24 < 0) {
   $cond$i22 = HEAP32[$this + 4 >> 2] | 0;
   $cond$i33 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  } else {
   $cond$i22 = $0 & 255;
   $cond$i33 = 10;
  }
  if (($cond$i33 - $cond$i22 | 0) >>> 0 < $__n >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $cond$i33, $cond$i22 + $__n - $cond$i33 | 0, $cond$i22, $cond$i22, 0, 0);
   $3 = HEAP8[$__size_$i$i >> 0] | 0;
  } else $3 = $0;
  if ($3 << 24 >> 24 < 0) $cond$i32 = HEAP32[$this >> 2] | 0; else $cond$i32 = $this;
  __ZNSt3__211char_traitsIcE6assignEPcmc($cond$i32 + $cond$i22 | 0, $__n, $__c) | 0;
  $add8 = $cond$i22 + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add8; else HEAP8[$__size_$i$i >> 0] = $add8;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i32 + $add8 | 0, $ref$tmp);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZN10DrPolygonF24ensureWindingOrientationERNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE19Winding_Orientation($points, $direction_desired) {
 $points = $points | 0;
 $direction_desired = $direction_desired | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__t$i$i$i$i = 0, $call = 0, $incdec$ptr$i4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__t$i$i$i$i = sp;
 $call = __ZN10DrPolygonF22findWindingOrientationERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE($points) | 0;
 if (($direction_desired | 0) == 1 & ($call | 0) == 0) label = 3; else if (($direction_desired | 0) == 0 & ($call | 0) == 1) label = 3;
 L3 : do if ((label | 0) == 3) {
  $0 = HEAP32[$points >> 2] | 0;
  $1 = HEAP32[$points + 4 >> 2] | 0;
  if (($0 | 0) != ($1 | 0)) {
   $2 = $1;
   $3 = $0;
   while (1) {
    $incdec$ptr$i4$i$i = $2 + -16 | 0;
    if ($3 >>> 0 >= $incdec$ptr$i4$i$i >>> 0) break L3;
    HEAP32[$__t$i$i$i$i >> 2] = HEAP32[$3 >> 2];
    HEAP32[$__t$i$i$i$i + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$__t$i$i$i$i + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP32[$__t$i$i$i$i + 12 >> 2] = HEAP32[$3 + 12 >> 2];
    __ZN8DrPointFaSERKS_($3, $incdec$ptr$i4$i$i) | 0;
    __ZN8DrPointFaSERKS_($incdec$ptr$i4$i$i, $__t$i$i$i$i) | 0;
    $2 = $incdec$ptr$i4$i$i;
    $3 = $3 + 16 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _stbi__extend_receive($j, $n) {
 $j = $j | 0;
 $n = $n | 0;
 var $code_bits9 = 0, $j$addr = 0, $k = 0, $n$addr = 0, $sgn = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $j$addr = sp + 12 | 0;
 $n$addr = sp + 8 | 0;
 $k = sp + 4 | 0;
 $sgn = sp;
 HEAP32[$j$addr >> 2] = $j;
 HEAP32[$n$addr >> 2] = $n;
 if ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0) < (HEAP32[$n$addr >> 2] | 0)) _stbi__grow_buffer_unsafe(HEAP32[$j$addr >> 2] | 0);
 HEAP32[$sgn >> 2] = HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] >> 31;
 HEAP32[$k >> 2] = HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] << HEAP32[$n$addr >> 2] | (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] | 0) >>> (32 - (HEAP32[$n$addr >> 2] | 0) | 0);
 if ((HEAP32[$n$addr >> 2] | 0) >= 0 & (HEAP32[$n$addr >> 2] | 0) < 17) {
  HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] = HEAP32[$k >> 2] & ~HEAP32[9760 + (HEAP32[$n$addr >> 2] << 2) >> 2];
  HEAP32[$k >> 2] = HEAP32[$k >> 2] & HEAP32[9760 + (HEAP32[$n$addr >> 2] << 2) >> 2];
  $code_bits9 = (HEAP32[$j$addr >> 2] | 0) + 18368 | 0;
  HEAP32[$code_bits9 >> 2] = (HEAP32[$code_bits9 >> 2] | 0) - (HEAP32[$n$addr >> 2] | 0);
  STACKTOP = sp;
  return (HEAP32[$k >> 2] | 0) + (HEAP32[9840 + (HEAP32[$n$addr >> 2] << 2) >> 2] & ~HEAP32[$sgn >> 2]) | 0;
 } else ___assert_fail(49310, 47433, 1973, 49373);
 return 0;
}

function __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorI6DrRectNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN6DrRectC2ERKS_(HEAP32[$__end_ >> 2] | 0, $__x);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _stbtt_MakeGlyphBitmap($info, $output, $out_w, $out_h, $out_stride, $scale_x, $scale_y, $glyph) {
 $info = $info | 0;
 $output = $output | 0;
 $out_w = $out_w | 0;
 $out_h = $out_h | 0;
 $out_stride = $out_stride | 0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $glyph = $glyph | 0;
 var $glyph$addr = 0, $info$addr = 0, $out_h$addr = 0, $out_stride$addr = 0, $out_w$addr = 0, $output$addr = 0, $scale_x$addr = 0, $scale_y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $info$addr = sp + 28 | 0;
 $output$addr = sp + 24 | 0;
 $out_w$addr = sp + 20 | 0;
 $out_h$addr = sp + 16 | 0;
 $out_stride$addr = sp + 12 | 0;
 $scale_x$addr = sp + 8 | 0;
 $scale_y$addr = sp + 4 | 0;
 $glyph$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$output$addr >> 2] = $output;
 HEAP32[$out_w$addr >> 2] = $out_w;
 HEAP32[$out_h$addr >> 2] = $out_h;
 HEAP32[$out_stride$addr >> 2] = $out_stride;
 HEAPF32[$scale_x$addr >> 2] = $scale_x;
 HEAPF32[$scale_y$addr >> 2] = $scale_y;
 HEAP32[$glyph$addr >> 2] = $glyph;
 _stbtt_MakeGlyphBitmapSubpixel(HEAP32[$info$addr >> 2] | 0, HEAP32[$output$addr >> 2] | 0, HEAP32[$out_w$addr >> 2] | 0, HEAP32[$out_h$addr >> 2] | 0, HEAP32[$out_stride$addr >> 2] | 0, +HEAPF32[$scale_x$addr >> 2], +HEAPF32[$scale_y$addr >> 2], 0.0, 0.0, HEAP32[$glyph$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorI6DrRectNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEEC2EmmS4_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN6DrRectC2ERKS_(HEAP32[$__end_ >> 2] | 0, $__x);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__218__insertion_sort_3IRN13TPPLPartition12VertexSorterEPlEEvT0_S5_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__i$0 = 0, $__j$0 = 0, $__j$0$phi = 0, $__j$1 = 0, $__j$1$phi = 0, $__k$0 = 0, $__k$0$lcssa = 0, $add$ptr = 0, $incdec$ptr = 0;
 $add$ptr = $__first + 8 | 0;
 __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($__first, $__first + 4 | 0, $add$ptr, $__comp) | 0;
 $__i$0 = $__first + 12 | 0;
 $__j$0 = $add$ptr;
 while (1) {
  if (($__i$0 | 0) == ($__last | 0)) break;
  $0 = HEAP32[$__i$0 >> 2] | 0;
  $1 = HEAP32[$__j$0 >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($__comp, $0, $1) | 0) {
   $2 = $1;
   $__j$1 = $__i$0;
   $__k$0 = $__j$0;
   while (1) {
    HEAP32[$__j$1 >> 2] = $2;
    if (($__k$0 | 0) == ($__first | 0)) {
     $__k$0$lcssa = $__first;
     break;
    }
    $incdec$ptr = $__k$0 + -4 | 0;
    $2 = HEAP32[$incdec$ptr >> 2] | 0;
    if (!(__ZN13TPPLPartition12VertexSorterclEll($__comp, $0, $2) | 0)) {
     $__k$0$lcssa = $__k$0;
     break;
    } else {
     $__j$1$phi = $__k$0;
     $__k$0 = $incdec$ptr;
     $__j$1 = $__j$1$phi;
    }
   }
   HEAP32[$__k$0$lcssa >> 2] = $0;
  }
  $__j$0$phi = $__i$0;
  $__i$0 = $__i$0 + 4 | 0;
  $__j$0 = $__j$0$phi;
 }
 return;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + ((($sub$ptr$sub$i7 | 0) / -44 | 0) * 44 | 0) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __sapp_emsc_size_changed($event_type, $ui_event, $user_data) {
 $event_type = $event_type | 0;
 $ui_event = $ui_event | 0;
 $user_data = $user_data | 0;
 var $h = 0, $ui_event$addr = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $ui_event$addr = sp + 20 | 0;
 $w = sp + 8 | 0;
 $h = sp;
 HEAP32[sp + 24 >> 2] = $event_type;
 HEAP32[$ui_event$addr >> 2] = $ui_event;
 HEAP32[sp + 16 >> 2] = $user_data;
 _emscripten_get_element_css_size(58996, $w | 0, $h | 0) | 0;
 if (+HEAPF64[$w >> 3] < 1.0) HEAPF64[$w >> 3] = +(HEAP32[(HEAP32[$ui_event$addr >> 2] | 0) + 12 >> 2] | 0); else HEAP32[14672] = ~~+HEAPF64[$w >> 3];
 if (+HEAPF64[$h >> 3] < 1.0) HEAPF64[$h >> 3] = +(HEAP32[(HEAP32[$ui_event$addr >> 2] | 0) + 16 >> 2] | 0); else HEAP32[14673] = ~~+HEAPF64[$h >> 3];
 if (HEAP8[58636] & 1) HEAPF32[14678] = +_emscripten_get_device_pixel_ratio();
 HEAP32[14674] = ~~(+HEAPF64[$w >> 3] * +HEAPF32[14678]);
 HEAP32[14675] = ~~(+HEAPF64[$h >> 3] * +HEAPF32[14678]);
 if (!((HEAP32[14674] | 0) > 0 & (HEAP32[14675] | 0) > 0)) ___assert_fail(28746, 16477, 4145, 28810);
 _emscripten_set_canvas_element_size(58996, HEAP32[14674] | 0, HEAP32[14675] | 0) | 0;
 if (!(__sapp_events_enabled() | 0)) {
  STACKTOP = sp;
  return 1;
 }
 __sapp_init_event(14);
 __sapp_call_event(58728) | 0;
 STACKTOP = sp;
 return 1;
}

function _stbi__gif_parse_colortable($s, $pal, $num_entries, $transp) {
 $s = $s | 0;
 $pal = $pal | 0;
 $num_entries = $num_entries | 0;
 $transp = $transp | 0;
 var $call = 0, $call2 = 0, $call5 = 0, $i = 0, $num_entries$addr = 0, $pal$addr = 0, $s$addr = 0, $transp$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $s$addr = sp + 16 | 0;
 $pal$addr = sp + 12 | 0;
 $num_entries$addr = sp + 8 | 0;
 $transp$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$pal$addr >> 2] = $pal;
 HEAP32[$num_entries$addr >> 2] = $num_entries;
 HEAP32[$transp$addr >> 2] = $transp;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num_entries$addr >> 2] | 0)) break;
  $call = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP8[(HEAP32[$pal$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $call;
  $call2 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP8[(HEAP32[$pal$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $call2;
  $call5 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP8[(HEAP32[$pal$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $call5;
  HEAP8[(HEAP32[$pal$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = (HEAP32[$transp$addr >> 2] | 0) == (HEAP32[$i >> 2] | 0) ? 0 : 255;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbtt__cff_index_get($agg$result, $b, $i) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $i = $i | 0;
 var $add16 = 0, $count = 0, $end = 0, $i$addr = 0, $offsize = 0, $start = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $i$addr = sp + 16 | 0;
 $count = sp + 12 | 0;
 $offsize = sp + 8 | 0;
 $start = sp + 4 | 0;
 $end = sp;
 HEAP32[$i$addr >> 2] = $i;
 _stbtt__buf_seek($b, 0);
 HEAP32[$count >> 2] = _stbtt__buf_get($b, 2) | 0;
 HEAP32[$offsize >> 2] = (_stbtt__buf_get8($b) | 0) & 255;
 if ((HEAP32[$i$addr >> 2] | 0) < 0) ___assert_fail(44334, 44131, 1195, 44354);
 if ((HEAP32[$i$addr >> 2] | 0) >= (HEAP32[$count >> 2] | 0)) ___assert_fail(44334, 44131, 1195, 44354);
 if ((HEAP32[$offsize >> 2] | 0) >= 1 & (HEAP32[$offsize >> 2] | 0) <= 4) {
  _stbtt__buf_skip($b, Math_imul(HEAP32[$i$addr >> 2] | 0, HEAP32[$offsize >> 2] | 0) | 0);
  HEAP32[$start >> 2] = _stbtt__buf_get($b, HEAP32[$offsize >> 2] | 0) | 0;
  HEAP32[$end >> 2] = _stbtt__buf_get($b, HEAP32[$offsize >> 2] | 0) | 0;
  $add16 = 2 + (Math_imul((HEAP32[$count >> 2] | 0) + 1 | 0, HEAP32[$offsize >> 2] | 0) | 0) | 0;
  _stbtt__buf_range($agg$result, $b, $add16 + (HEAP32[$start >> 2] | 0) | 0, (HEAP32[$end >> 2] | 0) - (HEAP32[$start >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(44252, 44131, 1196, 44354);
}

function _fonsDeleteInternal($stash) {
 $stash = $stash | 0;
 var $10 = 0, $i = 0, $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 if (!(HEAP32[$stash$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 32 >> 2] | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 32 >> 2] & 127](HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[$i >> 2] = 0;
 while (1) {
  $10 = HEAP32[$stash$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 76 >> 2] | 0)) break;
  _fons__freeFont(HEAP32[(HEAP32[$10 + 64 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (HEAP32[$10 + 68 >> 2] | 0) _fons__deleteAtlas(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 68 >> 2] | 0);
 if (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] | 0) _free(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 64 >> 2] | 0);
 if (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 44 >> 2] | 0) _free(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 44 >> 2] | 0);
 if (HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20564 >> 2] | 0) _free(HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 20564 >> 2] | 0);
 _free(HEAP32[$stash$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 4) << 4) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE12__move_rangeEPS1_S5_S5_($this, $__from_s, $__from_e, $__to) {
 $this = $this | 0;
 $__from_s = $__from_s | 0;
 $__from_e = $__from_e | 0;
 $__to = $__to | 0;
 var $$in = 0, $0 = 0, $__end_ = 0, $__i$0 = 0, $__last$addr$0$i$i = 0, $__result$addr$0$i$i = 0, $add$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr1$i$i = 0, $incdec$ptr6 = 0;
 $__end_ = $this + 4 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $add$ptr = $__from_s + ($0 - $__to >> 4 << 4) | 0;
 $$in = $0;
 $__i$0 = $add$ptr;
 while (1) {
  if ($__i$0 >>> 0 >= $__from_e >>> 0) break;
  HEAP32[$$in >> 2] = HEAP32[$__i$0 >> 2];
  HEAP32[$$in + 4 >> 2] = HEAP32[$__i$0 + 4 >> 2];
  HEAP32[$$in + 8 >> 2] = HEAP32[$__i$0 + 8 >> 2];
  HEAP32[$$in + 12 >> 2] = HEAP32[$__i$0 + 12 >> 2];
  $incdec$ptr6 = (HEAP32[$__end_ >> 2] | 0) + 16 | 0;
  HEAP32[$__end_ >> 2] = $incdec$ptr6;
  $$in = $incdec$ptr6;
  $__i$0 = $__i$0 + 16 | 0;
 }
 $__last$addr$0$i$i = $add$ptr;
 $__result$addr$0$i$i = $0;
 while (1) {
  if (($__last$addr$0$i$i | 0) == ($__from_s | 0)) break;
  $incdec$ptr$i$i = $__last$addr$0$i$i + -16 | 0;
  $incdec$ptr1$i$i = $__result$addr$0$i$i + -16 | 0;
  __ZN8DrPointFaSERKS_($incdec$ptr1$i$i, $incdec$ptr$i$i) | 0;
  $__last$addr$0$i$i = $incdec$ptr$i$i;
  $__result$addr$0$i$i = $incdec$ptr1$i$i;
 }
 return;
}

function __ZNSt3__26vectorI7DrPointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 3) << 3) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_($this, $args, $args1, $args3, $args5, $args7, $args9) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 $args9 = $args9 | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $7 = 0, $8 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 36) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = HEAP32[$args1 >> 2] | 0;
 $2 = $args3;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $agg$tmp;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 $12 = HEAP32[$args5 >> 2] | 0;
 $13 = HEAP32[$args7 >> 2] | 0;
 $14 = HEAP8[$args9 >> 0] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE($call, $0, $1, $tmpcast$byval_copy, $12, $13, $14);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 2) << 2) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 2) << 2) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 3) << 3) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast1$byval_copy = sp + 24 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp5 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $args1;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $agg$tmp5;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$tmpcast1$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE($call, $tmpcast$byval_copy, $tmpcast1$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 3) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 2;
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($__v, $sub$ptr$sub$i$i$i >> 3 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 3, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAPF64[$5 >> 3] = +HEAPF64[$__x >> 3];
  HEAP32[$__end_ >> 2] = $5 + 8;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this, $__v);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - $sub$ptr$sub$i7) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 3) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 2;
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($__v, $sub$ptr$sub$i$i$i >> 3 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 3, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAPF64[$5 >> 3] = +HEAPF64[$__x >> 3];
  HEAP32[$__end_ >> 2] = $5 + 8;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this, $__v);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorImNS_9allocatorImEEE21__push_back_slow_pathIRKmEEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2) + 1 | 0;
 $call$i = __ZNKSt3__26vectorImNS_9allocatorImEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 1;
  __ZNSt3__214__split_bufferImRNS_9allocatorImEEEC2EmmS3_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 2, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$__x >> 2];
  HEAP32[$__end_ >> 2] = $5 + 4;
  __ZNSt3__26vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE($this, $__v);
  __ZNSt3__214__split_bufferImRNS_9allocatorImEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __sg_gl_destroy_image($img) {
 $img = $img | 0;
 var $gl = 0, $img$addr = 0, $slot = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $img$addr = sp + 4 | 0;
 $slot = sp;
 HEAP32[$img$addr >> 2] = $img;
 if (!(HEAP32[$img$addr >> 2] | 0)) ___assert_fail(22569, 21600, 5946, 29893);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5947, 29893);
 HEAP32[$slot >> 2] = 0;
 while (1) {
  $gl = (HEAP32[$img$addr >> 2] | 0) + 88 | 0;
  if ((HEAP32[$slot >> 2] | 0) >= (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 12 + 68 >> 2] | 0)) break;
  if (HEAP32[$gl + 12 + (HEAP32[$slot >> 2] << 2) >> 2] | 0) {
   __sg_gl_cache_invalidate_texture(HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 + 12 + (HEAP32[$slot >> 2] << 2) >> 2] | 0);
   if (!(HEAP8[(HEAP32[$img$addr >> 2] | 0) + 88 + 20 >> 0] & 1)) _glDeleteTextures(1, (HEAP32[$img$addr >> 2] | 0) + 88 + 12 + (HEAP32[$slot >> 2] << 2) | 0);
  }
  HEAP32[$slot >> 2] = (HEAP32[$slot >> 2] | 0) + 1;
 }
 if (HEAP32[$gl + 4 >> 2] | 0) _glDeleteRenderbuffers(1, (HEAP32[$img$addr >> 2] | 0) + 88 + 4 | 0);
 if (HEAP32[(HEAP32[$img$addr >> 2] | 0) + 88 + 8 >> 2] | 0) _glDeleteRenderbuffers(1, (HEAP32[$img$addr >> 2] | 0) + 88 + 8 | 0);
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(29811, 21600, 5962, 29893);
}

function __ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8 | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55520);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp2;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 55529);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function _fons__allocGlyph($font) {
 $font = $font | 0;
 var $22 = 0, $call = 0, $cond = 0, $font$addr = 0, $nglyphs12 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $font$addr = sp;
 HEAP32[$font$addr >> 2] = $font;
 if (((HEAP32[(HEAP32[$font$addr >> 2] | 0) + 216 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$font$addr >> 2] | 0) + 212 >> 2] | 0)) {
  if (!(HEAP32[(HEAP32[$font$addr >> 2] | 0) + 212 >> 2] | 0)) $cond = 8; else $cond = HEAP32[(HEAP32[$font$addr >> 2] | 0) + 212 >> 2] << 1;
  HEAP32[(HEAP32[$font$addr >> 2] | 0) + 212 >> 2] = $cond;
  $call = _realloc(HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] | 0, HEAP32[(HEAP32[$font$addr >> 2] | 0) + 212 >> 2] << 5) | 0;
  HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] = $call;
  if (!(HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] | 0)) {
   HEAP32[$retval >> 2] = 0;
   $22 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $22 | 0;
  }
 }
 $nglyphs12 = (HEAP32[$font$addr >> 2] | 0) + 216 | 0;
 HEAP32[$nglyphs12 >> 2] = (HEAP32[$nglyphs12 >> 2] | 0) + 1;
 HEAP32[$retval >> 2] = (HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] | 0) + ((HEAP32[(HEAP32[$font$addr >> 2] | 0) + 216 >> 2] | 0) - 1 << 5);
 $22 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $22 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 do if ($cond$i >>> 0 < $__n >>> 0) {
  if ($tobool$i$i) $cond$i25 = HEAP32[$this + 4 >> 2] | 0; else $cond$i25 = $0 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i, $__n - $cond$i | 0, $cond$i25, 0, $cond$i25, $__n, $__s);
 } else {
  if ($tobool$i$i) $cond$i19 = HEAP32[$this >> 2] | 0; else $cond$i19 = $this;
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($cond$i19, $__s, $__n) | 0;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i19 + $__n | 0, $ref$tmp);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $__n;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function _HMM_NormalizeVec3($agg$result, $A) {
 $agg$result = $agg$result | 0;
 $A = $A | 0;
 var $A$byval_copy = 0, $Result = 0, $VectorLength = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $A$byval_copy = sp + 16 | 0;
 $Result = sp + 4 | 0;
 $VectorLength = sp;
 HEAP32[$Result >> 2] = 0;
 HEAP32[$Result + 4 >> 2] = 0;
 HEAP32[$Result + 8 >> 2] = 0;
 HEAP32[$A$byval_copy >> 2] = HEAP32[$A >> 2];
 HEAP32[$A$byval_copy + 4 >> 2] = HEAP32[$A + 4 >> 2];
 HEAP32[$A$byval_copy + 8 >> 2] = HEAP32[$A + 8 >> 2];
 HEAPF32[$VectorLength >> 2] = +_HMM_LengthVec3($A$byval_copy);
 if (!(+HEAPF32[$VectorLength >> 2] != 0.0)) {
  HEAP32[$agg$result >> 2] = HEAP32[$Result >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$Result + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$Result + 8 >> 2];
  STACKTOP = sp;
  return;
 }
 HEAPF32[$Result >> 2] = +HEAPF32[$A >> 2] * (1.0 / +HEAPF32[$VectorLength >> 2]);
 HEAPF32[$Result + 4 >> 2] = +HEAPF32[$A + 4 >> 2] * (1.0 / +HEAPF32[$VectorLength >> 2]);
 HEAPF32[$Result + 8 >> 2] = +HEAPF32[$A + 8 >> 2] * (1.0 / +HEAPF32[$VectorLength >> 2]);
 HEAP32[$agg$result >> 2] = HEAP32[$Result >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$Result + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$Result + 8 >> 2];
 STACKTOP = sp;
 return;
}

function __sg_discard_pools($p) {
 $p = $p | 0;
 var $p$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp;
 HEAP32[$p$addr >> 2] = $p;
 if (HEAP32[$p$addr >> 2] | 0) {
  _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 116 >> 2] | 0);
  HEAP32[(HEAP32[$p$addr >> 2] | 0) + 116 >> 2] = 0;
  _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 112 >> 2] | 0);
  HEAP32[(HEAP32[$p$addr >> 2] | 0) + 112 >> 2] = 0;
  _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 108 >> 2] | 0);
  HEAP32[(HEAP32[$p$addr >> 2] | 0) + 108 >> 2] = 0;
  _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 104 >> 2] | 0);
  HEAP32[(HEAP32[$p$addr >> 2] | 0) + 104 >> 2] = 0;
  _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 100 >> 2] | 0);
  HEAP32[(HEAP32[$p$addr >> 2] | 0) + 100 >> 2] = 0;
  _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 96 >> 2] | 0);
  HEAP32[(HEAP32[$p$addr >> 2] | 0) + 96 >> 2] = 0;
  __sg_discard_pool((HEAP32[$p$addr >> 2] | 0) + 80 | 0);
  __sg_discard_pool((HEAP32[$p$addr >> 2] | 0) + 64 | 0);
  __sg_discard_pool((HEAP32[$p$addr >> 2] | 0) + 48 | 0);
  __sg_discard_pool((HEAP32[$p$addr >> 2] | 0) + 32 | 0);
  __sg_discard_pool((HEAP32[$p$addr >> 2] | 0) + 16 | 0);
  __sg_discard_pool(HEAP32[$p$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(28915, 21600, 12922, 30048);
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv($this) {
 $this = $this | 0;
 var $Result = 0, $call3 = 0, $isdigit = 0, $retval$0 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Result = sp;
 $isdigit = (((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) << 24 >> 24) + -48 | 0) >>> 0 < 10;
 $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
 if ($isdigit) $storemerge = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call3) | 0; else $storemerge = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call3) | 0;
 HEAP32[$Result >> 2] = $storemerge;
 if (!$storemerge) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $Result) | 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __sg_vertexformat_bytesize($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 do switch (HEAP32[$fmt$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 8;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 12;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 16;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 6:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 7:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 8:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 9:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 10:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 11:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 12:
  {
   HEAP32[$retval >> 2] = 8;
   break;
  }
 case 13:
  {
   HEAP32[$retval >> 2] = 8;
   break;
  }
 case 14:
  {
   HEAP32[$retval >> 2] = 8;
   break;
  }
 case 15:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 0:
  {
   HEAP32[$retval >> 2] = 0;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 3834, 38112);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function _stbi__zhuffman_decode($a, $z) {
 $a = $a | 0;
 $z = $z | 0;
 var $18 = 0, $a$addr = 0, $b = 0, $code_buffer2 = 0, $num_bits4 = 0, $retval = 0, $s = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $z$addr = sp + 8 | 0;
 $b = sp + 4 | 0;
 $s = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$z$addr >> 2] = $z;
 if ((HEAP32[(HEAP32[$a$addr >> 2] | 0) + 8 >> 2] | 0) < 16) _stbi__fill_bits(HEAP32[$a$addr >> 2] | 0);
 HEAP32[$b >> 2] = HEAPU16[(HEAP32[$z$addr >> 2] | 0) + ((HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] & 511) << 1) >> 1];
 if (HEAP32[$b >> 2] | 0) {
  HEAP32[$s >> 2] = HEAP32[$b >> 2] >> 9;
  $code_buffer2 = (HEAP32[$a$addr >> 2] | 0) + 12 | 0;
  HEAP32[$code_buffer2 >> 2] = (HEAP32[$code_buffer2 >> 2] | 0) >>> (HEAP32[$s >> 2] | 0);
  $num_bits4 = (HEAP32[$a$addr >> 2] | 0) + 8 | 0;
  HEAP32[$num_bits4 >> 2] = (HEAP32[$num_bits4 >> 2] | 0) - (HEAP32[$s >> 2] | 0);
  HEAP32[$retval >> 2] = HEAP32[$b >> 2] & 511;
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  HEAP32[$retval >> 2] = _stbi__zhuffman_decode_slowpath(HEAP32[$a$addr >> 2] | 0, HEAP32[$z$addr >> 2] | 0) | 0;
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function _sgl_shutdown() {
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $i = 0, $pip = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 12 | 0;
 $i = sp + 8 | 0;
 $pip = sp + 4 | 0;
 $agg$tmp = sp;
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2771, 23699);
 _free(HEAP32[541372] | 0);
 HEAP32[541372] = 0;
 _free(HEAP32[541373] | 0);
 HEAP32[541373] = 0;
 _free(HEAP32[541374] | 0);
 HEAP32[541374] = 0;
 _sg_push_debug_group(23491);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[541385];
 _sg_destroy_buffer($agg$tmp$byval_copy);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[541386];
 _sg_destroy_image($agg$tmp$byval_copy);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[541387];
 _sg_destroy_shader($agg$tmp$byval_copy);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[541433] | 0)) break;
  HEAP32[$pip >> 2] = (HEAP32[541437] | 0) + (HEAP32[$i >> 2] << 5);
  HEAP32[$agg$tmp >> 2] = __sgl_make_pip_id(HEAP32[HEAP32[$pip >> 2] >> 2] | 0) | 0;
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  __sgl_destroy_pipeline($agg$tmp$byval_copy);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _sg_pop_debug_group();
 __sgl_discard_pipeline_pool();
 HEAP32[541358] = 0;
 STACKTOP = sp;
 return;
}

function __sg_gl_init_pixelformats_float($has_colorbuffer_float, $has_texture_float_linear, $has_float_blend) {
 $has_colorbuffer_float = $has_colorbuffer_float | 0;
 $has_texture_float_linear = $has_texture_float_linear | 0;
 $has_float_blend = $has_float_blend | 0;
 var $has_colorbuffer_float$addr = 0, $has_float_blend$addr = 0, $has_texture_float_linear$addr = 0, $tobool3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $has_colorbuffer_float$addr = sp + 2 | 0;
 $has_texture_float_linear$addr = sp + 1 | 0;
 $has_float_blend$addr = sp;
 HEAP8[$has_colorbuffer_float$addr >> 0] = $has_colorbuffer_float & 1;
 HEAP8[$has_texture_float_linear$addr >> 0] = $has_texture_float_linear & 1;
 HEAP8[$has_float_blend$addr >> 0] = $has_float_blend & 1;
 $tobool3 = HEAP8[$has_colorbuffer_float$addr >> 0] & 1;
 if (!(HEAP8[$has_texture_float_linear$addr >> 0] & 1)) {
  if ($tobool3) __sg_pixelformat_sbrm(2164652); else __sg_pixelformat_s(2164652);
  __sg_pixelformat_s(2164514);
  STACKTOP = sp;
  return;
 }
 do if ($tobool3) if (HEAP8[$has_float_blend$addr >> 0] & 1) {
  __sg_pixelformat_all(2164652);
  break;
 } else {
  __sg_pixelformat_sfrm(2164652);
  break;
 } else __sg_pixelformat_sf(2164652); while (0);
 __sg_pixelformat_sf(2164514);
 STACKTOP = sp;
 return;
}

function _stbi__high_bit($z) {
 $z = $z | 0;
 var $17 = 0, $n = 0, $retval = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $z$addr = sp + 4 | 0;
 $n = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$n >> 2] = 0;
 if (!(HEAP32[$z$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = -1;
  $17 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 if ((HEAP32[$z$addr >> 2] | 0) >>> 0 >= 65536) {
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 16;
  HEAP32[$z$addr >> 2] = (HEAP32[$z$addr >> 2] | 0) >>> 16;
 }
 if ((HEAP32[$z$addr >> 2] | 0) >>> 0 >= 256) {
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 8;
  HEAP32[$z$addr >> 2] = (HEAP32[$z$addr >> 2] | 0) >>> 8;
 }
 if ((HEAP32[$z$addr >> 2] | 0) >>> 0 >= 16) {
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 4;
  HEAP32[$z$addr >> 2] = (HEAP32[$z$addr >> 2] | 0) >>> 4;
 }
 if ((HEAP32[$z$addr >> 2] | 0) >>> 0 >= 4) {
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 2;
  HEAP32[$z$addr >> 2] = (HEAP32[$z$addr >> 2] | 0) >>> 2;
 }
 if ((HEAP32[$z$addr >> 2] | 0) >>> 0 >= 2) {
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  HEAP32[$z$addr >> 2] = (HEAP32[$z$addr >> 2] | 0) >>> 1;
 }
 HEAP32[$retval >> 2] = HEAP32[$n >> 2];
 $17 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $17 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $add$ptr = 0, $b = 0, $call10 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub3 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $b = sp + 144 | 0;
 $f = sp;
 _memcpy($f | 0, 10976, 144) | 0;
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $n$addr$0 = 1;
  $s$addr$0 = $b;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $retval$0 = -1;
 } else {
  $n$addr$0 = $n;
  $s$addr$0 = $s;
  label = 4;
 }
 if ((label | 0) == 4) {
  $sub3 = -2 - $s$addr$0 | 0;
  $spec$select = $n$addr$0 >>> 0 > $sub3 >>> 0 ? $sub3 : $n$addr$0;
  HEAP32[$f + 48 >> 2] = $spec$select;
  $wpos = $f + 20 | 0;
  HEAP32[$wpos >> 2] = $s$addr$0;
  HEAP32[$f + 44 >> 2] = $s$addr$0;
  $add$ptr = $s$addr$0 + $spec$select | 0;
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = $add$ptr;
  HEAP32[$f + 28 >> 2] = $add$ptr;
  $call10 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$spec$select) $retval$0 = $call10; else {
   $0 = HEAP32[$wpos >> 2] | 0;
   HEAP8[$0 + ((($0 | 0) == (HEAP32[$wend >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __sfetch_emsc_failed_http_status($slot_id, $http_status) {
 $slot_id = $slot_id | 0;
 $http_status = $http_status | 0;
 var $ctx = 0, $error_code = 0, $http_status$addr = 0, $item = 0, $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $slot_id$addr = sp + 12 | 0;
 $http_status$addr = sp + 8 | 0;
 $ctx = sp + 4 | 0;
 $item = sp;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 HEAP32[$http_status$addr >> 2] = $http_status;
 HEAP32[$ctx >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$ctx >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$ctx >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$item >> 2] = __sfetch_pool_item_lookup((HEAP32[$ctx >> 2] | 0) + 24 | 0, HEAP32[$slot_id$addr >> 2] | 0) | 0;
 if (!(HEAP32[$item >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $error_code = (HEAP32[$item >> 2] | 0) + 32 + 8 | 0;
 if ((HEAP32[$http_status$addr >> 2] | 0) == 404) HEAP32[$error_code >> 2] = 1; else HEAP32[$error_code >> 2] = 5;
 HEAP8[(HEAP32[$item >> 2] | 0) + 32 + 12 >> 0] = 1;
 HEAP8[(HEAP32[$item >> 2] | 0) + 32 + 13 >> 0] = 1;
 __sfetch_ring_enqueue((HEAP32[$ctx >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$item >> 2] | 0) + 8 >> 2] | 0) * 76 | 0) + 52 | 0, HEAP32[$slot_id$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast1$byval_copy = sp + 24 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp5 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $args1;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $agg$tmp5;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$tmpcast1$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_($call, $tmpcast$byval_copy, $tmpcast1$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $4 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$0$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $incdec$ptr$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $__end1$addr$0$i = HEAP32[$__end_ >> 2] | 0;
 while (1) {
  if (($__end1$addr$0$i | 0) == ($0 | 0)) break;
  $incdec$ptr$i = $__end1$addr$0$i + -28 | 0;
  __ZN8DrBitmapC2ERKS_13Bitmap_Format((HEAP32[$__begin_2 >> 2] | 0) + -28 | 0, $incdec$ptr$i, 4);
  HEAP32[$__begin_2 >> 2] = (HEAP32[$__begin_2 >> 2] | 0) + -28;
  $__end1$addr$0$i = $incdec$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$__begin_2 >> 2];
 HEAP32[$__begin_2 >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$__begin_2 >> 2];
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $3 = 0, $4 = 0, $Init = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 if (!(HEAP8[$this + 16 >> 0] | 0)) {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 46);
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 } else {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 91);
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
 }
 $Init = $this + 12 | 0;
 $3 = HEAP32[$Init >> 2] | 0;
 if (((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($3) | 0) + -65 & 255) < 2) $4 = $3; else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53611);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
  $4 = HEAP32[$Init >> 2] | 0;
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($4, $S);
 STACKTOP = sp;
 return;
}

function __ZN7meshoptL11updateCacheEjjjjPjRj($a, $b, $c, $cache_timestamps, $timestamp) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $cache_timestamps = $cache_timestamps | 0;
 $timestamp = $timestamp | 0;
 var $0 = 0, $3 = 0, $5 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx3 = 0, $cache_misses$0 = 0, $cache_misses$1 = 0, $cache_misses$2 = 0;
 $0 = HEAP32[$timestamp >> 2] | 0;
 $arrayidx = $cache_timestamps + ($a << 2) | 0;
 if (($0 - (HEAP32[$arrayidx >> 2] | 0) | 0) >>> 0 > 16) {
  HEAP32[$timestamp >> 2] = $0 + 1;
  HEAP32[$arrayidx >> 2] = $0;
  $3 = HEAP32[$timestamp >> 2] | 0;
  $cache_misses$0 = 1;
 } else {
  $3 = $0;
  $cache_misses$0 = 0;
 }
 $arrayidx3 = $cache_timestamps + ($b << 2) | 0;
 if (($3 - (HEAP32[$arrayidx3 >> 2] | 0) | 0) >>> 0 > 16) {
  HEAP32[$timestamp >> 2] = $3 + 1;
  HEAP32[$arrayidx3 >> 2] = $3;
  $5 = HEAP32[$timestamp >> 2] | 0;
  $cache_misses$1 = $cache_misses$0 + 1 | 0;
 } else {
  $5 = $3;
  $cache_misses$1 = $cache_misses$0;
 }
 $arrayidx11 = $cache_timestamps + ($c << 2) | 0;
 if (($5 - (HEAP32[$arrayidx11 >> 2] | 0) | 0) >>> 0 > 16) {
  HEAP32[$timestamp >> 2] = $5 + 1;
  HEAP32[$arrayidx11 >> 2] = $5;
  $cache_misses$2 = $cache_misses$1 + 1 | 0;
 } else $cache_misses$2 = $cache_misses$1;
 return $cache_misses$2 | 0;
}

function __sfetch_request_handler($ctx, $slot_id) {
 $ctx = $ctx | 0;
 $slot_id = $slot_id | 0;
 var $ctx$addr = 0, $item = 0, $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp + 8 | 0;
 $slot_id$addr = sp + 4 | 0;
 $item = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 HEAP32[$item >> 2] = __sfetch_pool_item_lookup((HEAP32[$ctx$addr >> 2] | 0) + 24 | 0, HEAP32[$slot_id$addr >> 2] | 0) | 0;
 if (!(HEAP32[$item >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 do if ((HEAP32[(HEAP32[$item >> 2] | 0) + 4 >> 2] | 0) == 3) {
  if ((HEAP32[(HEAP32[$item >> 2] | 0) + 16 >> 2] | 0) >>> 0 > 0) if (!(HEAP32[(HEAP32[$item >> 2] | 0) + 32 + 20 >> 2] | 0)) {
   _sfetch_js_send_head_request(HEAP32[$slot_id$addr >> 2] | 0, (HEAP32[$item >> 2] | 0) + 208 | 0);
   break;
  }
  __sfetch_emsc_send_get_request(HEAP32[$slot_id$addr >> 2] | 0, HEAP32[$item >> 2] | 0);
 } else __sfetch_ring_enqueue((HEAP32[$ctx$addr >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$item >> 2] | 0) + 8 >> 2] | 0) * 76 | 0) + 52 | 0, HEAP32[$slot_id$addr >> 2] | 0); while (0);
 if (!(HEAP8[(HEAP32[$item >> 2] | 0) + 32 + 12 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[(HEAP32[$item >> 2] | 0) + 32 + 13 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  block_aligned_end = aligned_end - 64 | 0;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, $N) {
 $this = $this | 0;
 $N = $N | 0;
 var $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $BlockList = 0, $Current = 0, $Current7$phi$trans$insert = 0, $Current7$pre$phiZ2D = 0, $add2 = 0, $add8$pre$phiZ2D = 0, $and = 0, $retval$0 = 0, label = 0;
 $and = $N + 15 & -16;
 $BlockList = $this + 4096 | 0;
 $0 = HEAP32[$BlockList >> 2] | 0;
 $Current = $0 + 4 | 0;
 $1 = HEAP32[$Current >> 2] | 0;
 $add2 = $1 + $and | 0;
 do if ($add2 >>> 0 > 4087) if ($and >>> 0 > 4088) {
  $retval$0 = __ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm($this, $and) | 0;
  break;
 } else {
  __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this);
  $$pre = HEAP32[$BlockList >> 2] | 0;
  $Current7$phi$trans$insert = $$pre + 4 | 0;
  $$pre6 = HEAP32[$Current7$phi$trans$insert >> 2] | 0;
  $2 = $$pre;
  $3 = $$pre6;
  $Current7$pre$phiZ2D = $Current7$phi$trans$insert;
  $add8$pre$phiZ2D = $$pre6 + $and | 0;
  label = 5;
  break;
 } else {
  $2 = $0;
  $3 = $1;
  $Current7$pre$phiZ2D = $Current;
  $add8$pre$phiZ2D = $add2;
  label = 5;
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$Current7$pre$phiZ2D >> 2] = $add8$pre$phiZ2D;
  $retval$0 = $2 + 8 + $3 | 0;
 }
 return $retval$0 | 0;
}

function __sg_gl_teximage_type($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 do switch (HEAP32[$fmt$addr >> 2] | 0) {
 case 27:
 case 25:
 case 23:
 case 13:
 case 11:
 case 4:
 case 2:
  {
   HEAP32[$retval >> 2] = 5121;
   break;
  }
 case 26:
 case 24:
 case 14:
 case 12:
 case 5:
 case 3:
  {
   HEAP32[$retval >> 2] = 5120;
   break;
  }
 case 35:
 case 33:
 case 20:
 case 18:
 case 8:
 case 6:
  {
   HEAP32[$retval >> 2] = 5123;
   break;
  }
 case 36:
 case 34:
 case 21:
 case 19:
 case 9:
 case 7:
  {
   HEAP32[$retval >> 2] = 5122;
   break;
  }
 case 37:
 case 22:
 case 10:
  {
   HEAP32[$retval >> 2] = 5131;
   break;
  }
 case 38:
 case 30:
 case 15:
  {
   HEAP32[$retval >> 2] = 5125;
   break;
  }
 case 39:
 case 31:
 case 16:
  {
   HEAP32[$retval >> 2] = 5124;
   break;
  }
 case 40:
 case 32:
 case 17:
  {
   HEAP32[$retval >> 2] = 5126;
   break;
  }
 case 41:
  {
   HEAP32[$retval >> 2] = 5123;
   break;
  }
 case 42:
  {
   HEAP32[$retval >> 2] = 34042;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4647, 37453);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$result, $this, $AllowNegative) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $AllowNegative = $AllowNegative | 0;
 var $0 = 0, $1 = 0, $4 = 0, $incdec$ptr = 0, label = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($AllowNegative) __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 110) | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0)) label = 6; else {
  $1 = HEAP32[$this >> 2] | 0;
  if (((HEAP8[$1 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
   $4 = $1;
   while (1) {
    if (!(__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0)) break;
    if (((HEAP8[$4 >> 0] | 0) + -48 | 0) >>> 0 >= 10) break;
    $incdec$ptr = $4 + 1 | 0;
    HEAP32[$this >> 2] = $incdec$ptr;
    $4 = $incdec$ptr;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result, $0, $4);
  } else label = 6;
 }
 if ((label | 0) == 6) __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 return;
}

function __ZNSt3__26vectorI6DrRectNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $4 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$0$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $incdec$ptr$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $__end1$addr$0$i = HEAP32[$__end_ >> 2] | 0;
 while (1) {
  if (($__end1$addr$0$i | 0) == ($0 | 0)) break;
  $incdec$ptr$i = $__end1$addr$0$i + -16 | 0;
  __ZN6DrRectC2ERKS_((HEAP32[$__begin_2 >> 2] | 0) + -16 | 0, $incdec$ptr$i);
  HEAP32[$__begin_2 >> 2] = (HEAP32[$__begin_2 >> 2] | 0) + -16;
  $__end1$addr$0$i = $incdec$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$__begin_2 >> 2];
 HEAP32[$__begin_2 >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$__begin_2 >> 2];
 return;
}

function __ZN8TPPLPoly8TriangleER9TPPLPointS1_S1_($this, $p1, $p2, $p3) {
 $this = $this | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $p3 = $p3 | 0;
 var $0 = 0, $arrayidx3 = 0, $arrayidx5 = 0;
 __ZN8TPPLPoly4InitEl($this, 3);
 $0 = HEAP32[$this >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$p1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$p1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$p1 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$p1 + 12 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$p1 + 16 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$p1 + 20 >> 2];
 $arrayidx3 = (HEAP32[$this >> 2] | 0) + 24 | 0;
 HEAP32[$arrayidx3 >> 2] = HEAP32[$p2 >> 2];
 HEAP32[$arrayidx3 + 4 >> 2] = HEAP32[$p2 + 4 >> 2];
 HEAP32[$arrayidx3 + 8 >> 2] = HEAP32[$p2 + 8 >> 2];
 HEAP32[$arrayidx3 + 12 >> 2] = HEAP32[$p2 + 12 >> 2];
 HEAP32[$arrayidx3 + 16 >> 2] = HEAP32[$p2 + 16 >> 2];
 HEAP32[$arrayidx3 + 20 >> 2] = HEAP32[$p2 + 20 >> 2];
 $arrayidx5 = (HEAP32[$this >> 2] | 0) + 48 | 0;
 HEAP32[$arrayidx5 >> 2] = HEAP32[$p3 >> 2];
 HEAP32[$arrayidx5 + 4 >> 2] = HEAP32[$p3 + 4 >> 2];
 HEAP32[$arrayidx5 + 8 >> 2] = HEAP32[$p3 + 8 >> 2];
 HEAP32[$arrayidx5 + 12 >> 2] = HEAP32[$p3 + 12 >> 2];
 HEAP32[$arrayidx5 + 16 >> 2] = HEAP32[$p3 + 16 >> 2];
 HEAP32[$arrayidx5 + 20 >> 2] = HEAP32[$p3 + 20 >> 2];
 return;
}

function __ZN13TPPLPartition16Triangulate_MONOEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($this, $inpolys, $triangles) {
 $this = $this | 0;
 $inpolys = $inpolys | 0;
 $triangles = $triangles | 0;
 var $0 = 0, $__next_$i$i$i = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$0$in$in = 0, $monotone = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $monotone = sp;
 HEAP32[$monotone >> 2] = $monotone;
 $__next_$i$i$i = $monotone + 4 | 0;
 HEAP32[$__next_$i$i$i >> 2] = $monotone;
 HEAP32[$monotone + 8 >> 2] = 0;
 L1 : do if (!(__ZN13TPPLPartition17MonotonePartitionEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($this, $inpolys, $monotone) | 0)) $retval$0 = 0; else {
  $iter$sroa$0$0$in$in = $__next_$i$i$i;
  while (1) {
   $iter$sroa$0$0 = HEAP32[$iter$sroa$0$0$in$in >> 2] | 0;
   $0 = $iter$sroa$0$0;
   if (($monotone | 0) == ($0 | 0)) {
    $retval$0 = 1;
    break L1;
   }
   if (!(__ZN13TPPLPartition19TriangulateMonotoneEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE(0, $iter$sroa$0$0 + 8 | 0, $triangles) | 0)) {
    $retval$0 = 0;
    break;
   } else $iter$sroa$0$0$in$in = $0 + 4 | 0;
  }
 } while (0);
 __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($monotone);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __sfons_render_delete($user_ptr) {
 $user_ptr = $user_ptr | 0;
 var $14 = 0, $sfons = 0, $shd14$byval_copy = 0, $user_ptr$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $shd14$byval_copy = sp + 8 | 0;
 $user_ptr$addr = sp + 4 | 0;
 $sfons = sp;
 HEAP32[$user_ptr$addr >> 2] = $user_ptr;
 if (!(HEAP32[$user_ptr$addr >> 2] | 0)) ___assert_fail(45248, 28414, 1716, 45257);
 HEAP32[$sfons >> 2] = HEAP32[$user_ptr$addr >> 2];
 if (HEAP32[(HEAP32[$sfons >> 2] | 0) + 8 >> 2] | 0) {
  HEAP32[$shd14$byval_copy >> 2] = HEAP32[(HEAP32[$sfons >> 2] | 0) + 8 >> 2];
  _sg_destroy_image($shd14$byval_copy);
  HEAP32[(HEAP32[$sfons >> 2] | 0) + 8 >> 2] = 0;
 }
 if (HEAP32[(HEAP32[$sfons >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$shd14$byval_copy >> 2] = HEAP32[(HEAP32[$sfons >> 2] | 0) + 4 >> 2];
  _sgl_destroy_pipeline($shd14$byval_copy);
  HEAP32[(HEAP32[$sfons >> 2] | 0) + 4 >> 2] = 0;
 }
 if (!(HEAP32[HEAP32[$sfons >> 2] >> 2] | 0)) {
  $14 = HEAP32[$sfons >> 2] | 0;
  _free($14);
  STACKTOP = sp;
  return;
 }
 HEAP32[$shd14$byval_copy >> 2] = HEAP32[HEAP32[$sfons >> 2] >> 2];
 _sg_destroy_shader($shd14$byval_copy);
 HEAP32[HEAP32[$sfons >> 2] >> 2] = 0;
 $14 = HEAP32[$sfons >> 2] | 0;
 _free($14);
 STACKTOP = sp;
 return;
}

function _stbi__jpeg_reset($j) {
 $j = $j | 0;
 var $12 = 0, $13 = 0, $cond = 0, $eob_run = 0, $j$addr = 0, $todo = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $j$addr = sp;
 HEAP32[$j$addr >> 2] = $j;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] = 0;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] = 0;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18376 >> 2] = 0;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18076 + 216 + 24 >> 2] = 0;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18076 + 144 + 24 >> 2] = 0;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18076 + 72 + 24 >> 2] = 0;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18076 + 24 >> 2] = 0;
 HEAP8[(HEAP32[$j$addr >> 2] | 0) + 18372 >> 0] = -1;
 if (!(HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18436 >> 2] | 0)) {
  $cond = 2147483647;
  $12 = HEAP32[$j$addr >> 2] | 0;
  $todo = $12 + 18440 | 0;
  HEAP32[$todo >> 2] = $cond;
  $13 = HEAP32[$j$addr >> 2] | 0;
  $eob_run = $13 + 18400 | 0;
  HEAP32[$eob_run >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $cond = HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18436 >> 2] | 0;
 $12 = HEAP32[$j$addr >> 2] | 0;
 $todo = $12 + 18440 | 0;
 HEAP32[$todo >> 2] = $cond;
 $13 = HEAP32[$j$addr >> 2] | 0;
 $eob_run = $13 + 18400 | 0;
 HEAP32[$eob_run >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZN7meshoptL22generateHardBoundariesEPjPKjmmjS0_($destination, $indices, $index_count, $vertex_count, $cache_timestamps) {
 $destination = $destination | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $vertex_count = $vertex_count | 0;
 $cache_timestamps = $cache_timestamps | 0;
 var $div = 0, $i$0 = 0, $mul1 = 0, $result$0 = 0, $result$1 = 0, $timestamp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $timestamp = sp;
 _memset($cache_timestamps | 0, 0, $vertex_count << 2 | 0) | 0;
 HEAP32[$timestamp >> 2] = 17;
 $div = ($index_count >>> 0) / 3 | 0;
 $i$0 = 0;
 $result$0 = 0;
 while (1) {
  if ($i$0 >>> 0 >= $div >>> 0) break;
  $mul1 = $i$0 * 3 | 0;
  if (($i$0 | 0) == 0 | (__ZN7meshoptL11updateCacheEjjjjPjRj(HEAP32[$indices + ($mul1 << 2) >> 2] | 0, HEAP32[$indices + ($mul1 + 1 << 2) >> 2] | 0, HEAP32[$indices + ($mul1 + 2 << 2) >> 2] | 0, $cache_timestamps, $timestamp) | 0) == 3) {
   HEAP32[$destination + ($result$0 << 2) >> 2] = $i$0;
   $result$1 = $result$0 + 1 | 0;
  } else $result$1 = $result$0;
  $i$0 = $i$0 + 1 | 0;
  $result$0 = $result$1;
 }
 if ($result$0 >>> 0 > $div >>> 0) ___assert_fail(46625, 46089, 185, 46651); else {
  STACKTOP = sp;
  return $result$0 | 0;
 }
 return 0;
}

function __sg_pool_alloc_index($pool) {
 $pool = $pool | 0;
 var $15 = 0, $6 = 0, $dec = 0, $pool$addr = 0, $queue_top6 = 0, $retval = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $pool$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(30066, 21600, 12793, 30088);
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(29510, 21600, 12794, 30088);
 if ((HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0) <= 0) {
  HEAP32[$retval >> 2] = 0;
  $15 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 $6 = HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0;
 $queue_top6 = (HEAP32[$pool$addr >> 2] | 0) + 4 | 0;
 $dec = (HEAP32[$queue_top6 >> 2] | 0) + -1 | 0;
 HEAP32[$queue_top6 >> 2] = $dec;
 HEAP32[$slot_index >> 2] = HEAP32[$6 + ($dec << 2) >> 2];
 if ((HEAP32[$slot_index >> 2] | 0) <= 0) ___assert_fail(30109, 21600, 12797, 30088);
 if ((HEAP32[$slot_index >> 2] | 0) >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0)) ___assert_fail(30109, 21600, 12797, 30088);
 HEAP32[$retval >> 2] = HEAP32[$slot_index >> 2];
 $15 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $15 | 0;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEE($this, $__p) {
 $this = $this | 0;
 $__p = $__p | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $__value_$i$i$i4$i = 0, $__x$addr$0$i$i$i = 0, $__x$addr$0$i$i$i$i = 0, $retval$0$i$i$i = 0;
 $0 = HEAP32[$__p >> 2] | 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!$2) {
  $__x$addr$0$i$i$i = $0;
  while (1) {
   $4 = HEAP32[$__x$addr$0$i$i$i + 8 >> 2] | 0;
   if ((HEAP32[$4 >> 2] | 0) == ($__x$addr$0$i$i$i | 0)) {
    $retval$0$i$i$i = $4;
    break L1;
   }
   $__x$addr$0$i$i$i = $4;
  }
 } else {
  $__x$addr$0$i$i$i$i = $2;
  while (1) {
   $3 = HEAP32[$__x$addr$0$i$i$i$i >> 2] | 0;
   if (!$3) break; else $__x$addr$0$i$i$i$i = $3;
  }
  $retval$0$i$i$i = $__x$addr$0$i$i$i$i;
 } while (0);
 if ((HEAP32[$this >> 2] | 0) == ($0 | 0)) HEAP32[$this >> 2] = $retval$0$i$i$i;
 $__value_$i$i$i4$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i4$i >> 2] = (HEAP32[$__value_$i$i$i4$i >> 2] | 0) + -1;
 __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[$this + 4 >> 2] | 0, $0);
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, 72);
 return $retval$0$i$i$i | 0;
}

function _stbi__tga_get_comp($bits_per_pixel, $is_grey, $is_rgb16) {
 $bits_per_pixel = $bits_per_pixel | 0;
 $is_grey = $is_grey | 0;
 $is_rgb16 = $is_rgb16 | 0;
 var $bits_per_pixel$addr = 0, $is_grey$addr = 0, $is_rgb16$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $bits_per_pixel$addr = sp + 8 | 0;
 $is_grey$addr = sp + 4 | 0;
 $is_rgb16$addr = sp;
 HEAP32[$bits_per_pixel$addr >> 2] = $bits_per_pixel;
 HEAP32[$is_grey$addr >> 2] = $is_grey;
 HEAP32[$is_rgb16$addr >> 2] = $is_rgb16;
 if (HEAP32[$is_rgb16$addr >> 2] | 0) HEAP32[HEAP32[$is_rgb16$addr >> 2] >> 2] = 0;
 switch (HEAP32[$bits_per_pixel$addr >> 2] | 0) {
 case 8:
  {
   HEAP32[$retval >> 2] = 1;
   break;
  }
 case 16:
  {
   if (HEAP32[$is_grey$addr >> 2] | 0) HEAP32[$retval >> 2] = 2; else label = 7;
   break;
  }
 case 15:
  {
   label = 7;
   break;
  }
 case 32:
 case 24:
  {
   HEAP32[$retval >> 2] = (HEAP32[$bits_per_pixel$addr >> 2] | 0) / 8 | 0;
   break;
  }
 default:
  HEAP32[$retval >> 2] = 0;
 }
 if ((label | 0) == 7) {
  if (HEAP32[$is_rgb16$addr >> 2] | 0) HEAP32[HEAP32[$is_rgb16$addr >> 2] >> 2] = 1;
  HEAP32[$retval >> 2] = 3;
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __sgl_pool_alloc_index($pool) {
 $pool = $pool | 0;
 var $15 = 0, $6 = 0, $dec = 0, $pool$addr = 0, $queue_top6 = 0, $retval = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $pool$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(30066, 23371, 2116, 41554);
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(29510, 23371, 2117, 41554);
 if ((HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] | 0) <= 0) {
  HEAP32[$retval >> 2] = 0;
  $15 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 $6 = HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0;
 $queue_top6 = (HEAP32[$pool$addr >> 2] | 0) + 4 | 0;
 $dec = (HEAP32[$queue_top6 >> 2] | 0) + -1 | 0;
 HEAP32[$queue_top6 >> 2] = $dec;
 HEAP32[$slot_index >> 2] = HEAP32[$6 + ($dec << 2) >> 2];
 if ((HEAP32[$slot_index >> 2] | 0) <= 0) ___assert_fail(30109, 23371, 2120, 41554);
 if ((HEAP32[$slot_index >> 2] | 0) >= (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0)) ___assert_fail(30109, 23371, 2120, 41554);
 HEAP32[$retval >> 2] = HEAP32[$slot_index >> 2];
 $15 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $15 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($this, $Kind) {
 $this = $this | 0;
 $Kind = $Kind | 0;
 var $LHS = 0, $RHS = 0, $call = 0, $call2 = 0, $call4 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $LHS = sp + 4 | 0;
 $RHS = sp;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0;
 $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call) | 0;
 HEAP32[$LHS >> 2] = $call2;
 if (!$call2) $retval$1 = 0; else {
  $call4 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call) | 0;
  HEAP32[$RHS >> 2] = $call4;
  if (!$call4) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_($this, $LHS, $Kind, $RHS) | 0;
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($__x, $__y, $__z, $__c) {
 $__x = $__x | 0;
 $__y = $__y | 0;
 $__z = $__z | 0;
 $__c = $__c | 0;
 var $10 = 0, $14 = 0, $4 = 0, $8 = 0, $call = 0, $call7 = 0, $retval$0 = 0;
 $call = __ZN7compareclEmm($__c, HEAP32[$__y >> 2] | 0, HEAP32[$__x >> 2] | 0) | 0;
 $call7 = __ZN7compareclEmm($__c, HEAP32[$__z >> 2] | 0, HEAP32[$__y >> 2] | 0) | 0;
 do if ($call) {
  $10 = HEAP32[$__x >> 2] | 0;
  if ($call7) {
   HEAP32[$__x >> 2] = HEAP32[$__z >> 2];
   HEAP32[$__z >> 2] = $10;
   $retval$0 = 1;
   break;
  }
  HEAP32[$__x >> 2] = HEAP32[$__y >> 2];
  HEAP32[$__y >> 2] = $10;
  if (__ZN7compareclEmm($__c, HEAP32[$__z >> 2] | 0, $10) | 0) {
   $14 = HEAP32[$__y >> 2] | 0;
   HEAP32[$__y >> 2] = HEAP32[$__z >> 2];
   HEAP32[$__z >> 2] = $14;
   $retval$0 = 2;
  } else $retval$0 = 1;
 } else if ($call7) {
  $4 = HEAP32[$__y >> 2] | 0;
  HEAP32[$__y >> 2] = HEAP32[$__z >> 2];
  HEAP32[$__z >> 2] = $4;
  if (__ZN7compareclEmm($__c, HEAP32[$__y >> 2] | 0, HEAP32[$__x >> 2] | 0) | 0) {
   $8 = HEAP32[$__x >> 2] | 0;
   HEAP32[$__x >> 2] = HEAP32[$__y >> 2];
   HEAP32[$__y >> 2] = $8;
   $retval$0 = 2;
  } else $retval$0 = 1;
 } else $retval$0 = 0; while (0);
 return $retval$0 | 0;
}

function __ZN13TPPLPartition14Triangulate_ECEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($this, $inpolys, $triangles) {
 $this = $this | 0;
 $inpolys = $inpolys | 0;
 $triangles = $triangles | 0;
 var $0 = 0, $__next_$i$i$i = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$0$in$in = 0, $outpolys = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $outpolys = sp;
 HEAP32[$outpolys >> 2] = $outpolys;
 $__next_$i$i$i = $outpolys + 4 | 0;
 HEAP32[$__next_$i$i$i >> 2] = $outpolys;
 HEAP32[$outpolys + 8 >> 2] = 0;
 L1 : do if (!(__ZN13TPPLPartition11RemoveHolesEPNSt3__24listI8TPPLPolyNS0_9allocatorIS2_EEEES6_($this, $inpolys, $outpolys) | 0)) $retval$0 = 0; else {
  $iter$sroa$0$0$in$in = $__next_$i$i$i;
  while (1) {
   $iter$sroa$0$0 = HEAP32[$iter$sroa$0$0$in$in >> 2] | 0;
   $0 = $iter$sroa$0$0;
   if (($outpolys | 0) == ($0 | 0)) {
    $retval$0 = 1;
    break L1;
   }
   if (!(__ZN13TPPLPartition14Triangulate_ECEP8TPPLPolyPNSt3__24listIS0_NS2_9allocatorIS0_EEEE(0, $iter$sroa$0$0 + 8 | 0, $triangles) | 0)) {
    $retval$0 = 0;
    break;
   } else $iter$sroa$0$0$in$in = $0 + 4 | 0;
  }
 } while (0);
 __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($outpolys);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __sg_gl_blend_factor($f) {
 $f = $f | 0;
 var $f$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $f$addr = sp;
 HEAP32[$f$addr >> 2] = $f;
 do switch (HEAP32[$f$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 0;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 1;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 768;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 769;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = 770;
   break;
  }
 case 6:
  {
   HEAP32[$retval >> 2] = 771;
   break;
  }
 case 7:
  {
   HEAP32[$retval >> 2] = 774;
   break;
  }
 case 8:
  {
   HEAP32[$retval >> 2] = 775;
   break;
  }
 case 9:
  {
   HEAP32[$retval >> 2] = 772;
   break;
  }
 case 10:
  {
   HEAP32[$retval >> 2] = 773;
   break;
  }
 case 11:
  {
   HEAP32[$retval >> 2] = 776;
   break;
  }
 case 12:
  {
   HEAP32[$retval >> 2] = 32769;
   break;
  }
 case 13:
  {
   HEAP32[$retval >> 2] = 32770;
   break;
  }
 case 14:
  {
   HEAP32[$retval >> 2] = 32771;
   break;
  }
 case 15:
  {
   HEAP32[$retval >> 2] = 32772;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4550, 40156);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZNSt3__218__insertion_sort_3IR7comparePmEEvT0_S4_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $2 = 0, $__i$0 = 0, $__j$0 = 0, $__j$0$phi = 0, $__j$1 = 0, $__j$1$phi = 0, $__k$0 = 0, $__k$0$lcssa = 0, $add$ptr = 0, $incdec$ptr = 0;
 $add$ptr = $__first + 8 | 0;
 __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($__first, $__first + 4 | 0, $add$ptr, $__comp) | 0;
 $__i$0 = $__first + 12 | 0;
 $__j$0 = $add$ptr;
 while (1) {
  if (($__i$0 | 0) == ($__last | 0)) break;
  if (__ZN7compareclEmm($__comp, HEAP32[$__i$0 >> 2] | 0, HEAP32[$__j$0 >> 2] | 0) | 0) {
   $2 = HEAP32[$__i$0 >> 2] | 0;
   $__j$1 = $__i$0;
   $__k$0 = $__j$0;
   while (1) {
    HEAP32[$__j$1 >> 2] = HEAP32[$__k$0 >> 2];
    if (($__k$0 | 0) == ($__first | 0)) {
     $__k$0$lcssa = $__first;
     break;
    }
    $incdec$ptr = $__k$0 + -4 | 0;
    if (__ZN7compareclEmm($__comp, $2, HEAP32[$incdec$ptr >> 2] | 0) | 0) {
     $__j$1$phi = $__k$0;
     $__k$0 = $incdec$ptr;
     $__j$1 = $__j$1$phi;
    } else {
     $__k$0$lcssa = $__k$0;
     break;
    }
   }
   HEAP32[$__k$0$lcssa >> 2] = $2;
  }
  $__j$0$phi = $__i$0;
  $__i$0 = $__i$0 + 4 | 0;
  $__j$0 = $__j$0$phi;
 }
 return;
}

function _stbtt_GetGlyphBitmapBox($font, $glyph, $scale_x, $scale_y, $ix0, $iy0, $ix1, $iy1) {
 $font = $font | 0;
 $glyph = $glyph | 0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $ix0 = $ix0 | 0;
 $iy0 = $iy0 | 0;
 $ix1 = $ix1 | 0;
 $iy1 = $iy1 | 0;
 var $font$addr = 0, $glyph$addr = 0, $ix0$addr = 0, $ix1$addr = 0, $iy0$addr = 0, $iy1$addr = 0, $scale_x$addr = 0, $scale_y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $font$addr = sp + 28 | 0;
 $glyph$addr = sp + 24 | 0;
 $scale_x$addr = sp + 20 | 0;
 $scale_y$addr = sp + 16 | 0;
 $ix0$addr = sp + 12 | 0;
 $iy0$addr = sp + 8 | 0;
 $ix1$addr = sp + 4 | 0;
 $iy1$addr = sp;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$glyph$addr >> 2] = $glyph;
 HEAPF32[$scale_x$addr >> 2] = $scale_x;
 HEAPF32[$scale_y$addr >> 2] = $scale_y;
 HEAP32[$ix0$addr >> 2] = $ix0;
 HEAP32[$iy0$addr >> 2] = $iy0;
 HEAP32[$ix1$addr >> 2] = $ix1;
 HEAP32[$iy1$addr >> 2] = $iy1;
 _stbtt_GetGlyphBitmapBoxSubpixel(HEAP32[$font$addr >> 2] | 0, HEAP32[$glyph$addr >> 2] | 0, +HEAPF32[$scale_x$addr >> 2], +HEAPF32[$scale_y$addr >> 2], 0.0, 0.0, HEAP32[$ix0$addr >> 2] | 0, HEAP32[$iy0$addr >> 2] | 0, HEAP32[$ix1$addr >> 2] | 0, HEAP32[$iy1$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sfetch_emsc_head_response($slot_id, $content_length) {
 $slot_id = $slot_id | 0;
 $content_length = $content_length | 0;
 var $content_length$addr = 0, $ctx = 0, $item = 0, $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $slot_id$addr = sp + 12 | 0;
 $content_length$addr = sp + 8 | 0;
 $ctx = sp + 4 | 0;
 $item = sp;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 HEAP32[$content_length$addr >> 2] = $content_length;
 HEAP32[$ctx >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$ctx >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$ctx >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$item >> 2] = __sfetch_pool_item_lookup((HEAP32[$ctx >> 2] | 0) + 24 | 0, HEAP32[$slot_id$addr >> 2] | 0) | 0;
 if (!(HEAP32[$item >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$item >> 2] | 0) + 24 >> 2] | 0)) ___assert_fail(25688, 25510, 2001, 25732);
 if ((HEAP32[(HEAP32[$item >> 2] | 0) + 24 + 4 >> 2] | 0) >>> 0 <= 0) ___assert_fail(25688, 25510, 2001, 25732);
 HEAP32[(HEAP32[$item >> 2] | 0) + 32 + 20 >> 2] = HEAP32[$content_length$addr >> 2];
 __sfetch_emsc_send_get_request(HEAP32[$slot_id$addr >> 2] | 0, HEAP32[$item >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp4$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp2 = sp + 8 | 0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56238);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp2, $this + 8 | 0);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 51793);
 HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
 HEAP32[$agg$tmp4$byval_copy + 4 >> 2] = HEAP32[$agg$tmp4 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp4$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 32) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $11 = HEAP32[$args3 >> 2] | 0;
 $12 = HEAP8[$args5 >> 0] | 0;
 $13 = HEAP32[$args7 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_($call, $0, $tmpcast$byval_copy, $11, $12, $13);
 STACKTOP = sp;
 return $call | 0;
}

function __sg_gl_vertexformat_size($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 do switch (HEAP32[$fmt$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 1;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 2;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 3;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 6:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 7:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 8:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 9:
  {
   HEAP32[$retval >> 2] = 2;
   break;
  }
 case 10:
  {
   HEAP32[$retval >> 2] = 2;
   break;
  }
 case 11:
  {
   HEAP32[$retval >> 2] = 2;
   break;
  }
 case 12:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 13:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 14:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 15:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4438, 38692);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function _stbtt__get_subrs($agg$result, $cff, $fontdict) {
 $agg$result = $agg$result | 0;
 $cff = $cff | 0;
 $fontdict = $fontdict | 0;
 var $pdict = 0, $private_loc = 0, $subrsoff = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $subrsoff = sp + 32 | 0;
 $private_loc = sp + 24 | 0;
 $pdict = sp + 12 | 0;
 $tmp = sp;
 HEAP32[$subrsoff >> 2] = 0;
 HEAP32[$private_loc >> 2] = 0;
 HEAP32[$private_loc + 4 >> 2] = 0;
 _stbtt__dict_get_ints($fontdict, 18, 2, $private_loc);
 if (HEAP32[$private_loc + 4 >> 2] | 0) if (HEAP32[$private_loc >> 2] | 0) {
  _stbtt__buf_range($tmp, $cff, HEAP32[$private_loc + 4 >> 2] | 0, HEAP32[$private_loc >> 2] | 0);
  HEAP32[$pdict >> 2] = HEAP32[$tmp >> 2];
  HEAP32[$pdict + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
  HEAP32[$pdict + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
  _stbtt__dict_get_ints($pdict, 19, 1, $subrsoff);
  if (HEAP32[$subrsoff >> 2] | 0) {
   _stbtt__buf_seek($cff, (HEAP32[$private_loc + 4 >> 2] | 0) + (HEAP32[$subrsoff >> 2] | 0) | 0);
   _stbtt__cff_get_index($agg$result, $cff);
   STACKTOP = sp;
   return;
  } else {
   _stbtt__new_buf($agg$result, 0, 0);
   STACKTOP = sp;
   return;
  }
 }
 _stbtt__new_buf($agg$result, 0, 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm($this, $NewCap) {
 $this = $this | 0;
 $NewCap = $NewCap | 0;
 var $$in = 0, $0 = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $call = 0, $call3 = 0, $call9 = 0, $sub$ptr$sub$i$i = 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this) | 0;
 do if (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this) | 0) {
  $call3 = _malloc($NewCap << 2) | 0;
  if (!$call3) __ZSt9terminatev();
  $0 = HEAP32[$this >> 2] | 0;
  $Last = $this + 4 | 0;
  $sub$ptr$sub$i$i = (HEAP32[$Last >> 2] | 0) - $0 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove($call3 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  HEAP32[$this >> 2] = $call3;
  $$in = $call3;
  $Last17$pre$phiZ2D = $Last;
 } else {
  $call9 = _realloc(HEAP32[$this >> 2] | 0, $NewCap << 2) | 0;
  HEAP32[$this >> 2] = $call9;
  if (!$call9) __ZSt9terminatev(); else {
   $$in = $call9;
   $Last17$pre$phiZ2D = $this + 4 | 0;
   break;
  }
 } while (0);
 HEAP32[$Last17$pre$phiZ2D >> 2] = $$in + ($call << 2);
 HEAP32[$this + 8 >> 2] = $$in + ($NewCap << 2);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_($this, $Other) {
 $this = $this | 0;
 $Other = $Other | 0;
 var $1 = 0, $call3 = 0, $sub$ptr$sub$i$i = 0;
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this);
 if (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($Other) | 0) {
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($Other) | 0;
  $sub$ptr$sub$i$i = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($Other) | 0) - $call3 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove(HEAP32[$this >> 2] | 0, $call3 | 0, $sub$ptr$sub$i$i | 0) | 0;
  $1 = HEAP32[$this >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $1 + ((__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($Other) | 0) << 2);
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
 } else {
  HEAP32[$this >> 2] = HEAP32[$Other >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$Other + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$Other + 8 >> 2];
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($Other);
 }
 return;
}

function _stbi__malloc_mad4($a, $b, $c, $d, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $d = $d | 0;
 $add = $add | 0;
 var $10 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $c$addr = 0, $d$addr = 0, $mul = 0, $mul1 = 0, $mul2 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 20 | 0;
 $a$addr = sp + 16 | 0;
 $b$addr = sp + 12 | 0;
 $c$addr = sp + 8 | 0;
 $d$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$d$addr >> 2] = $d;
 HEAP32[$add$addr >> 2] = $add;
 if (_stbi__mad4sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$c$addr >> 2] | 0, HEAP32[$d$addr >> 2] | 0, HEAP32[$add$addr >> 2] | 0) | 0) {
  $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
  $mul1 = Math_imul($mul, HEAP32[$c$addr >> 2] | 0) | 0;
  $mul2 = Math_imul($mul1, HEAP32[$d$addr >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = _stbi__malloc($mul2 + (HEAP32[$add$addr >> 2] | 0) | 0) | 0;
  $10 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $10 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $10 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 return 0;
}

function _sg_setup_context() {
 var $11 = 0, $call4 = 0, $ctx = 0, $res = 0, $retval = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $res = sp + 8 | 0;
 $slot_index = sp + 4 | 0;
 $ctx = sp;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14371, 21831);
 HEAP32[$slot_index >> 2] = __sg_pool_alloc_index(2164332) | 0;
 if (!(HEAP32[$slot_index >> 2] | 0)) {
  HEAP32[$res >> 2] = 0;
  HEAP32[541058] = HEAP32[$res >> 2];
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $11 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $11 | 0;
 }
 HEAP32[$res >> 2] = __sg_slot_alloc(2164332, (HEAP32[541092] | 0) + (HEAP32[$slot_index >> 2] << 4) | 0, HEAP32[$slot_index >> 2] | 0) | 0;
 HEAP32[$ctx >> 2] = __sg_context_at(2164252, HEAP32[$res >> 2] | 0) | 0;
 $call4 = __sg_create_context(HEAP32[$ctx >> 2] | 0) | 0;
 HEAP32[(HEAP32[$ctx >> 2] | 0) + 8 >> 2] = $call4;
 if ((HEAP32[(HEAP32[$ctx >> 2] | 0) + 8 >> 2] | 0) != 2) ___assert_fail(21848, 21600, 14378, 21831);
 __sg_activate_context(HEAP32[$ctx >> 2] | 0);
 HEAP32[541058] = HEAP32[$res >> 2];
 HEAP32[$retval >> 2] = HEAP32[$res >> 2];
 $11 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function __sg_init_shader($shd_id, $desc) {
 $shd_id = $shd_id | 0;
 $desc = $desc | 0;
 var $9 = 0, $call10 = 0, $call9 = 0, $desc$addr = 0, $shd = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp + 4 | 0;
 $shd = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!((HEAP32[$shd_id >> 2] | 0) != 0 & (HEAP32[$desc$addr >> 2] | 0) != 0)) ___assert_fail(37529, 21600, 14125, 37564);
 HEAP32[$shd >> 2] = __sg_lookup_shader(2164252, HEAP32[$shd_id >> 2] | 0) | 0;
 if (!(HEAP32[$shd >> 2] | 0)) ___assert_fail(22114, 21600, 14127, 37564);
 if ((HEAP32[(HEAP32[$shd >> 2] | 0) + 8 >> 2] | 0) != 1) ___assert_fail(22114, 21600, 14127, 37564);
 HEAP32[(HEAP32[$shd >> 2] | 0) + 4 >> 2] = HEAP32[541058];
 $call9 = __sg_validate_shader_desc(HEAP32[$desc$addr >> 2] | 0) | 0;
 $9 = HEAP32[$shd >> 2] | 0;
 if ($call9) {
  $call10 = __sg_create_shader($9, HEAP32[$desc$addr >> 2] | 0) | 0;
  HEAP32[(HEAP32[$shd >> 2] | 0) + 8 >> 2] = $call10;
 } else HEAP32[$9 + 8 >> 2] = 3;
 if ((HEAP32[(HEAP32[$shd >> 2] | 0) + 8 >> 2] | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$shd >> 2] | 0) + 8 >> 2] | 0) == 3) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(37580, 21600, 14135, 37564);
}

function __sg_init_buffer($buf_id, $desc) {
 $buf_id = $buf_id | 0;
 $desc = $desc | 0;
 var $9 = 0, $buf = 0, $call10 = 0, $call9 = 0, $desc$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp + 4 | 0;
 $buf = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!((HEAP32[$buf_id >> 2] | 0) != 0 & (HEAP32[$desc$addr >> 2] | 0) != 0)) ___assert_fail(30770, 21600, 14097, 30805);
 HEAP32[$buf >> 2] = __sg_lookup_buffer(2164252, HEAP32[$buf_id >> 2] | 0) | 0;
 if (!(HEAP32[$buf >> 2] | 0)) ___assert_fail(21962, 21600, 14099, 30805);
 if ((HEAP32[(HEAP32[$buf >> 2] | 0) + 8 >> 2] | 0) != 1) ___assert_fail(21962, 21600, 14099, 30805);
 HEAP32[(HEAP32[$buf >> 2] | 0) + 4 >> 2] = HEAP32[541058];
 $call9 = __sg_validate_buffer_desc(HEAP32[$desc$addr >> 2] | 0) | 0;
 $9 = HEAP32[$buf >> 2] | 0;
 if ($call9) {
  $call10 = __sg_create_buffer($9, HEAP32[$desc$addr >> 2] | 0) | 0;
  HEAP32[(HEAP32[$buf >> 2] | 0) + 8 >> 2] = $call10;
 } else HEAP32[$9 + 8 >> 2] = 3;
 if ((HEAP32[(HEAP32[$buf >> 2] | 0) + 8 >> 2] | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$buf >> 2] | 0) + 8 >> 2] | 0) == 3) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(30821, 21600, 14107, 30805);
}

function __sg_init_image($img_id, $desc) {
 $img_id = $img_id | 0;
 $desc = $desc | 0;
 var $9 = 0, $call10 = 0, $call9 = 0, $desc$addr = 0, $img = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp + 4 | 0;
 $img = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!((HEAP32[$img_id >> 2] | 0) != 0 & (HEAP32[$desc$addr >> 2] | 0) != 0)) ___assert_fail(36594, 21600, 14111, 36629);
 HEAP32[$img >> 2] = __sg_lookup_image(2164252, HEAP32[$img_id >> 2] | 0) | 0;
 if (!(HEAP32[$img >> 2] | 0)) ___assert_fail(22038, 21600, 14113, 36629);
 if ((HEAP32[(HEAP32[$img >> 2] | 0) + 8 >> 2] | 0) != 1) ___assert_fail(22038, 21600, 14113, 36629);
 HEAP32[(HEAP32[$img >> 2] | 0) + 4 >> 2] = HEAP32[541058];
 $call9 = __sg_validate_image_desc(HEAP32[$desc$addr >> 2] | 0) | 0;
 $9 = HEAP32[$img >> 2] | 0;
 if ($call9) {
  $call10 = __sg_create_image($9, HEAP32[$desc$addr >> 2] | 0) | 0;
  HEAP32[(HEAP32[$img >> 2] | 0) + 8 >> 2] = $call10;
 } else HEAP32[$9 + 8 >> 2] = 3;
 if ((HEAP32[(HEAP32[$img >> 2] | 0) + 8 >> 2] | 0) == 2) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$img >> 2] | 0) + 8 >> 2] | 0) == 3) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(36644, 21600, 14121, 36629);
}

function _sapp_sgcontext($agg$result) {
 $agg$result = $agg$result | 0;
 var $desc = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $desc = sp;
 dest = $desc;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$desc >> 2] = _sapp_color_format() | 0;
 HEAP32[$desc + 4 >> 2] = _sapp_depth_format() | 0;
 HEAP32[$desc + 8 >> 2] = _sapp_sample_count() | 0;
 HEAP8[$desc + 12 >> 0] = (_sapp_gles2() | 0) & 1;
 HEAP32[$desc + 16 >> 2] = _sapp_metal_get_device() | 0;
 HEAP32[$desc + 16 + 4 >> 2] = 1;
 HEAP32[$desc + 16 + 12 >> 2] = 2;
 HEAP32[$desc + 40 >> 2] = _sapp_d3d11_get_device() | 0;
 HEAP32[$desc + 40 + 4 >> 2] = _sapp_d3d11_get_device_context() | 0;
 HEAP32[$desc + 40 + 8 >> 2] = 3;
 HEAP32[$desc + 40 + 16 >> 2] = 4;
 HEAP32[$desc + 68 >> 2] = _sapp_wgpu_get_device() | 0;
 HEAP32[$desc + 68 + 4 >> 2] = 5;
 HEAP32[$desc + 68 + 12 >> 2] = 6;
 HEAP32[$desc + 68 + 20 >> 2] = 7;
 dest = $agg$result;
 src = $desc;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _stbi__hdr_gettoken($z, $buffer) {
 $z = $z | 0;
 $buffer = $buffer | 0;
 var $3 = 0, $4 = 0, $5 = 0, $buffer$addr = 0, $c = 0, $len = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $z$addr = sp + 8 | 0;
 $buffer$addr = sp + 4 | 0;
 $len = sp;
 $c = sp + 12 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$len >> 2] = 0;
 HEAP8[$c >> 0] = 0;
 HEAP8[$c >> 0] = _stbi__get8(HEAP32[$z$addr >> 2] | 0) | 0;
 while (1) {
  if (_stbi__at_eof(HEAP32[$z$addr >> 2] | 0) | 0) break;
  if ((HEAP8[$c >> 0] | 0) == 10) break;
  $3 = HEAP8[$c >> 0] | 0;
  $4 = HEAP32[$buffer$addr >> 2] | 0;
  $5 = HEAP32[$len >> 2] | 0;
  HEAP32[$len >> 2] = $5 + 1;
  HEAP8[$4 + $5 >> 0] = $3;
  if ((HEAP32[$len >> 2] | 0) == 1023) {
   label = 5;
   break;
  }
  HEAP8[$c >> 0] = _stbi__get8(HEAP32[$z$addr >> 2] | 0) | 0;
 }
 L6 : do if ((label | 0) == 5) while (1) {
  if (_stbi__at_eof(HEAP32[$z$addr >> 2] | 0) | 0) break L6;
  if (((_stbi__get8(HEAP32[$z$addr >> 2] | 0) | 0) & 255 | 0) == 10) break L6;
 } while (0);
 HEAP8[(HEAP32[$buffer$addr >> 2] | 0) + (HEAP32[$len >> 2] | 0) >> 0] = 0;
 STACKTOP = sp;
 return HEAP32[$buffer$addr >> 2] | 0;
}

function _stbtt__buf_range($agg$result, $b, $o, $s) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 $o = $o | 0;
 $s = $s | 0;
 var $b$addr = 0, $o$addr = 0, $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $b$addr = sp + 20 | 0;
 $o$addr = sp + 16 | 0;
 $s$addr = sp + 12 | 0;
 $r = sp;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$o$addr >> 2] = $o;
 HEAP32[$s$addr >> 2] = $s;
 _stbtt__new_buf($r, 0, 0);
 if (!((HEAP32[$o$addr >> 2] | 0) < 0 | (HEAP32[$s$addr >> 2] | 0) < 0)) if ((HEAP32[$o$addr >> 2] | 0) <= (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] | 0)) if ((HEAP32[$s$addr >> 2] | 0) <= ((HEAP32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] | 0) - (HEAP32[$o$addr >> 2] | 0) | 0)) {
  HEAP32[$r >> 2] = (HEAP32[HEAP32[$b$addr >> 2] >> 2] | 0) + (HEAP32[$o$addr >> 2] | 0);
  HEAP32[$r + 8 >> 2] = HEAP32[$s$addr >> 2];
  HEAP32[$agg$result >> 2] = HEAP32[$r >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$r + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$r + 8 >> 2];
  STACKTOP = sp;
  return;
 };
 HEAP32[$agg$result >> 2] = HEAP32[$r >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$r + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$r + 8 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($__x, $__y, $__z, $__c) {
 $__x = $__x | 0;
 $__y = $__y | 0;
 $__z = $__z | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call7 = 0, $retval$0 = 0;
 $0 = HEAP32[$__y >> 2] | 0;
 $1 = HEAP32[$__x >> 2] | 0;
 $call = __ZN13TPPLPartition12VertexSorterclEll($__c, $0, $1) | 0;
 $2 = HEAP32[$__z >> 2] | 0;
 $call7 = __ZN13TPPLPartition12VertexSorterclEll($__c, $2, $0) | 0;
 do if ($call) {
  if ($call7) {
   HEAP32[$__x >> 2] = $2;
   HEAP32[$__z >> 2] = $1;
   $retval$0 = 1;
   break;
  }
  HEAP32[$__x >> 2] = $0;
  HEAP32[$__y >> 2] = $1;
  $5 = HEAP32[$__z >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($__c, $5, $1) | 0) {
   HEAP32[$__y >> 2] = $5;
   HEAP32[$__z >> 2] = $1;
   $retval$0 = 2;
  } else $retval$0 = 1;
 } else if ($call7) {
  HEAP32[$__y >> 2] = $2;
  HEAP32[$__z >> 2] = $0;
  $3 = HEAP32[$__y >> 2] | 0;
  $4 = HEAP32[$__x >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($__c, $3, $4) | 0) {
   HEAP32[$__x >> 2] = $3;
   HEAP32[$__y >> 2] = $4;
   $retval$0 = 2;
  } else $retval$0 = 1;
 } else $retval$0 = 0; while (0);
 return $retval$0 | 0;
}

function _fons__atlasRemoveNode($atlas, $idx) {
 $atlas = $atlas | 0;
 $idx = $idx | 0;
 var $6 = 0, $arrayidx = 0, $arrayidx4 = 0, $atlas$addr = 0, $i = 0, $idx$addr = 0, $nnodes5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $atlas$addr = sp + 8 | 0;
 $idx$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$atlas$addr >> 2] = $atlas;
 HEAP32[$idx$addr >> 2] = $idx;
 if (!(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 12 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$i >> 2] = HEAP32[$idx$addr >> 2];
 while (1) {
  $6 = HEAP32[$atlas$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= ((HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 12 >> 2] | 0) - 1 | 0)) break;
  $arrayidx = (HEAP32[$6 + 8 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 6 | 0) | 0;
  $arrayidx4 = (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) + (((HEAP32[$i >> 2] | 0) + 1 | 0) * 6 | 0) | 0;
  HEAP16[$arrayidx >> 1] = HEAP16[$arrayidx4 >> 1] | 0;
  HEAP16[$arrayidx + 2 >> 1] = HEAP16[$arrayidx4 + 2 >> 1] | 0;
  HEAP16[$arrayidx + 4 >> 1] = HEAP16[$arrayidx4 + 4 >> 1] | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $nnodes5 = $6 + 12 | 0;
 HEAP32[$nnodes5 >> 2] = (HEAP32[$nnodes5 >> 2] | 0) + -1;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $11 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $tmpcast3$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast3$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast3$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast3$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast3$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 $11 = $this + 20 | 0;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $agg$tmp2;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 HEAP32[$tmpcast3$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast3$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast3$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $8 = 0, $9 = 0, $Int = 0, $R = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Int = sp + 8 | 0;
 $R = sp;
 HEAP32[$Int >> 2] = 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this, $Int) | 0) label = 3; else {
  $call2 = __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) | 0;
  $0 = HEAP32[$Int >> 2] | 0;
  if ($call2 >>> 0 < $0 >>> 0) label = 3; else {
   $1 = HEAP32[$this >> 2] | 0;
   __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($R, $1, $1 + $0 | 0);
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + $0;
   $3 = $R;
   $8 = HEAP32[$3 + 4 >> 2] | 0;
   $9 = $agg$result;
   HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$9 + 4 >> 2] = $8;
  }
 }
 if ((label | 0) == 3) __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 STACKTOP = sp;
 return;
}

function _stbi__resample_row_generic($out, $in_near, $in_far, $w, $hs) {
 $out = $out | 0;
 $in_near = $in_near | 0;
 $in_far = $in_far | 0;
 $w = $w | 0;
 $hs = $hs | 0;
 var $hs$addr = 0, $i = 0, $in_near$addr = 0, $j = 0, $mul = 0, $out$addr = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $out$addr = sp + 24 | 0;
 $in_near$addr = sp + 20 | 0;
 $w$addr = sp + 12 | 0;
 $hs$addr = sp + 8 | 0;
 $i = sp + 4 | 0;
 $j = sp;
 HEAP32[$out$addr >> 2] = $out;
 HEAP32[$in_near$addr >> 2] = $in_near;
 HEAP32[sp + 16 >> 2] = $in_far;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$hs$addr >> 2] = $hs;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$w$addr >> 2] | 0)) break;
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$hs$addr >> 2] | 0)) break;
   $mul = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$hs$addr >> 2] | 0) | 0;
   HEAP8[(HEAP32[$out$addr >> 2] | 0) + ($mul + (HEAP32[$j >> 2] | 0)) >> 0] = HEAP8[(HEAP32[$in_near$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$out$addr >> 2] | 0;
}

function _stbi__skip($s, $n) {
 $s = $s | 0;
 $n = $n | 0;
 var $1 = 0, $blen = 0, $img_buffer11 = 0, $n$addr = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 8 | 0;
 $n$addr = sp + 4 | 0;
 $blen = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$n$addr >> 2] = $n;
 $1 = HEAP32[$s$addr >> 2] | 0;
 if ((HEAP32[$n$addr >> 2] | 0) < 0) {
  HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] = HEAP32[$1 + 172 >> 2];
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$1 + 16 >> 2] | 0) {
  HEAP32[$blen >> 2] = (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] | 0) - (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0);
  if ((HEAP32[$blen >> 2] | 0) < (HEAP32[$n$addr >> 2] | 0)) {
   HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] = HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2];
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 + 4 >> 2] & 127](HEAP32[(HEAP32[$s$addr >> 2] | 0) + 28 >> 2] | 0, (HEAP32[$n$addr >> 2] | 0) - (HEAP32[$blen >> 2] | 0) | 0);
   STACKTOP = sp;
   return;
  }
 }
 $img_buffer11 = (HEAP32[$s$addr >> 2] | 0) + 168 | 0;
 HEAP32[$img_buffer11 >> 2] = (HEAP32[$img_buffer11 >> 2] | 0) + (HEAP32[$n$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp5 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp5 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp5;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp, $agg$tmp$byval_copy);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp5 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp5 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp5;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp5 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp, $agg$tmp$byval_copy);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _stbtt__cff_get_index($agg$result, $b) {
 $agg$result = $agg$result | 0;
 $b = $b | 0;
 var $10 = 0, $b$addr = 0, $count = 0, $offsize = 0, $start = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $b$addr = sp + 12 | 0;
 $count = sp + 8 | 0;
 $start = sp + 4 | 0;
 $offsize = sp;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$start >> 2] = HEAP32[(HEAP32[$b$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$count >> 2] = _stbtt__buf_get(HEAP32[$b$addr >> 2] | 0, 2) | 0;
 do if (HEAP32[$count >> 2] | 0) {
  HEAP32[$offsize >> 2] = (_stbtt__buf_get8(HEAP32[$b$addr >> 2] | 0) | 0) & 255;
  if ((HEAP32[$offsize >> 2] | 0) >= 1 & (HEAP32[$offsize >> 2] | 0) <= 4) {
   _stbtt__buf_skip(HEAP32[$b$addr >> 2] | 0, Math_imul(HEAP32[$offsize >> 2] | 0, HEAP32[$count >> 2] | 0) | 0);
   $10 = HEAP32[$b$addr >> 2] | 0;
   _stbtt__buf_skip($10, (_stbtt__buf_get(HEAP32[$b$addr >> 2] | 0, HEAP32[$offsize >> 2] | 0) | 0) - 1 | 0);
   break;
  } else ___assert_fail(44252, 44131, 1126, 44281);
 } while (0);
 _stbtt__buf_range($agg$result, HEAP32[$b$addr >> 2] | 0, HEAP32[$start >> 2] | 0, (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[$start >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $retval$0 = 0;
 do if (!$s) $retval$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_423() | 0) + 188 >> 2] >> 2] | 0)) if (($wc & -128 | 0) == 57216) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $retval$0 = -1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $retval$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $retval$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $retval$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $retval$0 = -1;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function _stbi__bmp_test_raw($s) {
 $s = $s | 0;
 var $12 = 0, $14 = 0, $r = 0, $retval = 0, $s$addr = 0, $sz = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $s$addr = sp + 8 | 0;
 $r = sp + 4 | 0;
 $sz = sp;
 HEAP32[$s$addr >> 2] = $s;
 if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) != 66) {
  HEAP32[$retval >> 2] = 0;
  $14 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) != 77) {
  HEAP32[$retval >> 2] = 0;
  $14 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$sz >> 2] = _stbi__get32le(HEAP32[$s$addr >> 2] | 0) | 0;
 if ((HEAP32[$sz >> 2] | 0) == 12 | (HEAP32[$sz >> 2] | 0) == 40 | (HEAP32[$sz >> 2] | 0) == 56 | (HEAP32[$sz >> 2] | 0) == 108) $12 = 1; else $12 = (HEAP32[$sz >> 2] | 0) == 124;
 HEAP32[$r >> 2] = $12 & 1;
 HEAP32[$retval >> 2] = HEAP32[$r >> 2];
 $14 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp8 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call, $agg$tmp$byval_copy, $0, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp8 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call, $agg$tmp$byval_copy, $0, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp8 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call, $agg$tmp$byval_copy, $0, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp8$byval_copy = sp + 24 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp8 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
 HEAP32[$agg$tmp8$byval_copy + 4 >> 2] = HEAP32[$agg$tmp8 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call, $agg$tmp$byval_copy, $0, $agg$tmp8$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN7meshoptL10hashLookupIjNS_12VertexHasherEEEPT_S3_mRKT0_RKS2_S8_($table, $buckets, $hash, $key, $empty) {
 $table = $table | 0;
 $buckets = $buckets | 0;
 $hash = $hash | 0;
 $key = $key | 0;
 $empty = $empty | 0;
 var $1 = 0, $add = 0, $arrayidx = 0, $bucket$0 = 0, $call$pn = 0, $probe$0 = 0, $sub = 0, label = 0;
 if (!$buckets) ___assert_fail(45910, 45771, 139, 45922);
 $sub = $buckets + -1 | 0;
 if ($sub & $buckets | 0) ___assert_fail(45933, 45771, 140, 45922);
 $call$pn = __ZNK7meshopt12VertexHasher4hashEj($hash, HEAP32[$key >> 2] | 0) | 0;
 $probe$0 = 0;
 while (1) {
  $bucket$0 = $call$pn & $sub;
  if ($probe$0 >>> 0 > $sub >>> 0) {
   label = 10;
   break;
  }
  $arrayidx = $table + ($bucket$0 << 2) | 0;
  $1 = HEAP32[$arrayidx >> 2] | 0;
  if (($1 | 0) == (HEAP32[$empty >> 2] | 0)) {
   label = 11;
   break;
  }
  if (__ZNK7meshopt12VertexHasher5equalEjj($hash, $1, HEAP32[$key >> 2] | 0) | 0) {
   label = 11;
   break;
  }
  $add = $probe$0 + 1 | 0;
  $call$pn = $add + $bucket$0 | 0;
  $probe$0 = $add;
 }
 if ((label | 0) == 10) ___assert_fail(45964, 45771, 159, 45922); else if ((label | 0) == 11) return $arrayidx | 0;
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($this, $N) {
 $this = $this | 0;
 $N = $N | 0;
 var $0 = 0, $N$addr = 0, $SN = 0, $call3 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $N$addr = sp;
 $SN = sp + 8 | 0;
 HEAP32[$N$addr >> 2] = $N;
 $0 = $N;
 while (1) {
  if (!(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 66) | 0)) {
   $retval$2 = $0;
   break;
  }
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($SN, $this);
  if (__ZNK12_GLOBAL__N_110StringView5emptyEv($SN) | 0) {
   label = 5;
   break;
  }
  $call3 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $N$addr, $SN) | 0;
  HEAP32[$N$addr >> 2] = $call3;
  $0 = $call3;
 }
 if ((label | 0) == 5) $retval$2 = 0;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm($this, $NewCap) {
 $this = $this | 0;
 $NewCap = $NewCap | 0;
 var $$in = 0, $0 = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $call = 0, $call3 = 0, $call9 = 0, $sub$ptr$sub$i$i = 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this) | 0;
 do if (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this) | 0) {
  $call3 = _malloc($NewCap << 2) | 0;
  if (!$call3) __ZSt9terminatev();
  $0 = HEAP32[$this >> 2] | 0;
  $Last = $this + 4 | 0;
  $sub$ptr$sub$i$i = (HEAP32[$Last >> 2] | 0) - $0 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove($call3 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  HEAP32[$this >> 2] = $call3;
  $$in = $call3;
  $Last17$pre$phiZ2D = $Last;
 } else {
  $call9 = _realloc(HEAP32[$this >> 2] | 0, $NewCap << 2) | 0;
  HEAP32[$this >> 2] = $call9;
  if (!$call9) __ZSt9terminatev(); else {
   $$in = $call9;
   $Last17$pre$phiZ2D = $this + 4 | 0;
   break;
  }
 } while (0);
 HEAP32[$Last17$pre$phiZ2D >> 2] = $$in + ($call << 2);
 HEAP32[$this + 8 >> 2] = $$in + ($NewCap << 2);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm($this, $NewCap) {
 $this = $this | 0;
 $NewCap = $NewCap | 0;
 var $$in = 0, $0 = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $call = 0, $call3 = 0, $call9 = 0, $sub$ptr$sub$i$i = 0;
 $call = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this) | 0;
 do if (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) | 0) {
  $call3 = _malloc($NewCap << 2) | 0;
  if (!$call3) __ZSt9terminatev();
  $0 = HEAP32[$this >> 2] | 0;
  $Last = $this + 4 | 0;
  $sub$ptr$sub$i$i = (HEAP32[$Last >> 2] | 0) - $0 | 0;
  if ($sub$ptr$sub$i$i | 0) _memmove($call3 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
  HEAP32[$this >> 2] = $call3;
  $$in = $call3;
  $Last17$pre$phiZ2D = $Last;
 } else {
  $call9 = _realloc(HEAP32[$this >> 2] | 0, $NewCap << 2) | 0;
  HEAP32[$this >> 2] = $call9;
  if (!$call9) __ZSt9terminatev(); else {
   $$in = $call9;
   $Last17$pre$phiZ2D = $this + 4 | 0;
   break;
  }
 } while (0);
 HEAP32[$Last17$pre$phiZ2D >> 2] = $$in + ($call << 2);
 HEAP32[$this + 8 >> 2] = $$in + ($NewCap << 2);
 return;
}

function __sg_gl_init_limits() {
 var $gl_int = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $gl_int = sp;
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5083, 29829);
 _glGetIntegerv(3379, $gl_int | 0);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5086, 29829);
 HEAP32[541097] = HEAP32[$gl_int >> 2];
 HEAP32[541100] = HEAP32[$gl_int >> 2];
 _glGetIntegerv(34076, $gl_int | 0);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5090, 29829);
 HEAP32[541098] = HEAP32[$gl_int >> 2];
 _glGetIntegerv(34921, $gl_int | 0);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5093, 29829);
 if ((HEAP32[$gl_int >> 2] | 0) > 16) HEAP32[$gl_int >> 2] = 16;
 HEAP32[541102] = HEAP32[$gl_int >> 2];
 do if (HEAP8[2165420] & 1) {
  _glGetIntegerv(34047, $gl_int | 0);
  if (!(_glGetError() | 0)) {
   HEAP32[541356] = HEAP32[$gl_int >> 2];
   break;
  } else ___assert_fail(29811, 21600, 5110, 29829);
 } else HEAP32[541356] = 1; while (0);
 _glGetIntegerv(35661, $gl_int | 0);
 if (!(_glGetError() | 0)) {
  HEAP32[541357] = HEAP32[$gl_int >> 2];
  STACKTOP = sp;
  return;
 } else ___assert_fail(29811, 21600, 5117, 29829);
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $add$ptr = 0, $p$0 = 0, $search_done = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($1 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($1 | 0) > 1) {
   $search_done = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$search_done >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $add$ptr >>> 0);
  }
 } while (0);
 return;
}

function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $2 = 0, $5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0, $retval$0 = 0, $wpos = 0, $wpos18 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($f) | 0)) label = 3; else {
  $conv11 = $c & 255;
  $conv12 = $c & 255;
  if (($conv12 | 0) == (HEAP8[$f + 75 >> 0] | 0)) label = 10; else {
   $wpos18 = $f + 20 | 0;
   $5 = HEAP32[$wpos18 >> 2] | 0;
   if ($5 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos18 >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $conv11;
    $cond30 = $conv12;
   } else label = 10;
  }
  if ((label | 0) == 10) $cond30 = ___overflow($f, $c) | 0;
  ___unlockfile($f);
  $retval$0 = $cond30;
 }
 do if ((label | 0) == 3) {
  $conv = $c & 255;
  $conv1 = $c & 255;
  if (($conv1 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
   $wpos = $f + 20 | 0;
   $2 = HEAP32[$wpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos >> 2] = $2 + 1;
    HEAP8[$2 >> 0] = $conv;
    $retval$0 = $conv1;
    break;
   }
  }
  $retval$0 = ___overflow($f, $c) | 0;
 } while (0);
 return $retval$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $PPE = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $agg$tmp2$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 24 | 0;
 $PPE = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53209);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($PPE, HEAP32[$this + 8 >> 2] | 0);
 __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE($PPE, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 52155);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 STACKTOP = sp;
 return;
}

function _fourbyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $7 = 0, $8 = 0, $arrayidx22 = 0, $h$addr$0$lcssa = 0, $h$addr$018 = 0, $hw$019 = 0, $incdec$ptr = 0, $or10 = 0, $or24 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool15 = 0;
 $or10 = (HEAPU8[$n + 1 >> 0] | 0) << 16 | (HEAPU8[$n >> 0] | 0) << 24 | (HEAPU8[$n + 2 >> 0] | 0) << 8 | (HEAPU8[$n + 3 >> 0] | 0);
 $arrayidx22 = $h + 3 | 0;
 $7 = HEAP8[$arrayidx22 >> 0] | 0;
 $or24 = (HEAPU8[$h + 1 >> 0] | 0) << 16 | (HEAPU8[$h >> 0] | 0) << 24 | (HEAPU8[$h + 2 >> 0] | 0) << 8 | $7 & 255;
 $tobool15 = $7 << 24 >> 24 == 0;
 if (($or24 | 0) == ($or10 | 0) | $tobool15) {
  $h$addr$0$lcssa = $arrayidx22;
  $tobool$lcssa = $tobool15;
 } else {
  $h$addr$018 = $arrayidx22;
  $hw$019 = $or24;
  while (1) {
   $incdec$ptr = $h$addr$018 + 1 | 0;
   $8 = HEAP8[$incdec$ptr >> 0] | 0;
   $hw$019 = $hw$019 << 8 | $8 & 255;
   $tobool = $8 << 24 >> 24 == 0;
   if (($hw$019 | 0) == ($or10 | 0) | $tobool) {
    $h$addr$0$lcssa = $incdec$ptr;
    $tobool$lcssa = $tobool;
    break;
   } else $h$addr$018 = $incdec$ptr;
  }
 }
 return ($tobool$lcssa ? 0 : $h$addr$0$lcssa + -3 | 0) | 0;
}

function _stbi__mad3sizes_valid($a, $b, $c, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $add = $add | 0;
 var $9 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $c$addr = 0, $land$ext = 0, $mul = 0, $mul3 = 0, $mul4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $a$addr = sp + 12 | 0;
 $b$addr = sp + 8 | 0;
 $c$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$add$addr >> 2] = $add;
 if (!(_stbi__mul2sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0)) {
  $9 = 0;
  $land$ext = $9 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid($mul, HEAP32[$c$addr >> 2] | 0) | 0)) {
  $9 = 0;
  $land$ext = $9 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul3 = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 $mul4 = Math_imul($mul3, HEAP32[$c$addr >> 2] | 0) | 0;
 $9 = (_stbi__addsizes_valid($mul4, HEAP32[$add$addr >> 2] | 0) | 0) != 0;
 $land$ext = $9 & 1;
 STACKTOP = sp;
 return $land$ext | 0;
}

function __sapp_emsc_webgl_init() {
 var $5 = 0, $6 = 0, $attrs = 0, $ctx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $attrs = sp + 8 | 0;
 $ctx = sp;
 _emscripten_webgl_init_context_attributes($attrs | 0);
 HEAP32[$attrs >> 2] = HEAP8[58638] & 1;
 HEAP32[$attrs + 4 >> 2] = 1;
 HEAP32[$attrs + 8 >> 2] = 1;
 HEAP32[$attrs + 12 >> 2] = (HEAP32[14676] | 0) > 1 & 1;
 HEAP32[$attrs + 16 >> 2] = HEAP8[58670] & 1;
 HEAP32[$attrs + 20 >> 2] = HEAP8[58669] & 1;
 HEAP32[$attrs + 40 >> 2] = 1;
 HEAP32[$ctx >> 2] = _emscripten_webgl_create_context(58996, $attrs | 0) | 0;
 if (HEAP32[$ctx >> 2] | 0) {
  $5 = HEAP32[$ctx >> 2] | 0;
  _emscripten_webgl_make_context_current($5 | 0) | 0;
  $6 = HEAP32[$ctx >> 2] | 0;
  _emscripten_webgl_enable_extension($6 | 0, 28834) | 0;
  STACKTOP = sp;
  return;
 }
 HEAP32[$attrs + 32 >> 2] = 1;
 HEAP32[$ctx >> 2] = _emscripten_webgl_create_context(58996, $attrs | 0) | 0;
 HEAP8[58678] = 1;
 $5 = HEAP32[$ctx >> 2] | 0;
 _emscripten_webgl_make_context_current($5 | 0) | 0;
 $6 = HEAP32[$ctx >> 2] | 0;
 _emscripten_webgl_enable_extension($6 | 0, 28834) | 0;
 STACKTOP = sp;
 return;
}

function _sg_apply_pipeline($pip_id) {
 $pip_id = $pip_id | 0;
 var $pip = 0, $pip_id$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip_id$byval_copy = sp + 4 | 0;
 $pip = sp;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14837, 22613);
 HEAP8[2164245] = 0;
 HEAP32[$pip_id$byval_copy >> 2] = HEAP32[$pip_id >> 2];
 if (!(__sg_validate_apply_pipeline($pip_id$byval_copy) | 0)) {
  HEAP8[2164246] = 0;
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[2164244] & 1)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[541060] = HEAP32[$pip_id >> 2];
 HEAP32[$pip >> 2] = __sg_lookup_pipeline(2164252, HEAP32[$pip_id >> 2] | 0) | 0;
 if (!(HEAP32[$pip >> 2] | 0)) ___assert_fail(22631, 21600, 14850, 22613);
 HEAP8[2164246] = 2 == (HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] | 0) & 1;
 if (!(HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(22635, 21600, 14852, 22613);
 if ((HEAP32[HEAP32[(HEAP32[$pip >> 2] | 0) + 84 >> 2] >> 2] | 0) != (HEAP32[(HEAP32[$pip >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(22635, 21600, 14852, 22613);
 __sg_apply_pipeline(HEAP32[$pip >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbi__gif_test_raw($s) {
 $s = $s | 0;
 var $8 = 0, $retval = 0, $s$addr = 0, $sz = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $s$addr = sp + 4 | 0;
 $sz = sp;
 HEAP32[$s$addr >> 2] = $s;
 if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 71) if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 73) if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 70) if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) == 56) {
  HEAP32[$sz >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  if ((HEAP32[$sz >> 2] | 0) != 57 & (HEAP32[$sz >> 2] | 0) != 55) {
   HEAP32[$retval >> 2] = 0;
   $8 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $8 | 0;
  }
  if (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255 | 0) != 97) {
   HEAP32[$retval >> 2] = 0;
   $8 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $8 | 0;
  } else {
   HEAP32[$retval >> 2] = 1;
   $8 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $8 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $8 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _strlen($s) {
 $s = $s | 0;
 var $$pn = 0, $$pn24 = 0, $0 = 0, $3 = 0, $5 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $s$addr$1$lcssa = 0, $w$0 = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $s$addr$0$lcssa = $s;
  label = 5;
 } else {
  $5 = $0;
  $s$addr$015 = $s;
  while (1) {
   if (!(HEAP8[$s$addr$015 >> 0] | 0)) {
    $$pn = $5;
    break L1;
   }
   $incdec$ptr = $s$addr$015 + 1 | 0;
   $5 = $incdec$ptr;
   if (!($5 & 3)) {
    $s$addr$0$lcssa = $incdec$ptr;
    label = 5;
    break;
   } else $s$addr$015 = $incdec$ptr;
  }
 } while (0);
 if ((label | 0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while (1) {
   $3 = HEAP32[$w$0 >> 2] | 0;
   if (!(($3 & -2139062144 ^ -2139062144) & $3 + -16843009)) $w$0 = $w$0 + 4 | 0; else break;
  }
  if (!(($3 & 255) << 24 >> 24)) $s$addr$1$lcssa = $w$0; else {
   $$pn24 = $w$0;
   while (1) {
    $incdec$ptr1323 = $$pn24 + 1 | 0;
    if (!(HEAP8[$incdec$ptr1323 >> 0] | 0)) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else $$pn24 = $incdec$ptr1323;
   }
  }
  $$pn = $s$addr$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function _stbtt__dict_get_ints($b, $key, $outcount, $out) {
 $b = $b | 0;
 $key = $key | 0;
 $outcount = $outcount | 0;
 $out = $out | 0;
 var $b$addr = 0, $call = 0, $i = 0, $key$addr = 0, $operands = 0, $out$addr = 0, $outcount$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $b$addr = sp + 28 | 0;
 $key$addr = sp + 24 | 0;
 $outcount$addr = sp + 20 | 0;
 $out$addr = sp + 16 | 0;
 $i = sp + 12 | 0;
 $operands = sp;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$key$addr >> 2] = $key;
 HEAP32[$outcount$addr >> 2] = $outcount;
 HEAP32[$out$addr >> 2] = $out;
 _stbtt__dict_get($operands, HEAP32[$b$addr >> 2] | 0, HEAP32[$key$addr >> 2] | 0);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$outcount$addr >> 2] | 0)) {
   label = 5;
   break;
  }
  if ((HEAP32[$operands + 4 >> 2] | 0) >= (HEAP32[$operands + 8 >> 2] | 0)) {
   label = 5;
   break;
  }
  $call = _stbtt__cff_int($operands) | 0;
  HEAP32[(HEAP32[$out$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $call;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return;
 }
}

function __saudio_emsc_pull($num_frames) {
 $num_frames = $num_frames | 0;
 var $15 = 0, $num_bytes = 0, $num_frames$addr = 0, $res = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $num_frames$addr = sp + 8 | 0;
 $num_bytes = sp + 4 | 0;
 $res = sp;
 HEAP32[$num_frames$addr >> 2] = $num_frames;
 if (!(HEAP32[546659] | 0)) ___assert_fail(26252, 26275, 1441, 26346);
 if ((HEAP32[$num_frames$addr >> 2] | 0) != (HEAP32[544585] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $15 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 if (__saudio_has_callback() | 0) __saudio_stream_callback(HEAP32[546659] | 0, HEAP32[$num_frames$addr >> 2] | 0, HEAP32[544589] | 0); else {
  HEAP32[$num_bytes >> 2] = Math_imul(HEAP32[$num_frames$addr >> 2] | 0, HEAP32[544586] | 0) | 0;
  if (!(__saudio_fifo_read(2178392, HEAP32[546659] | 0, HEAP32[$num_bytes >> 2] | 0) | 0)) _memset(HEAP32[546659] | 0, 0, HEAP32[$num_bytes >> 2] | 0) | 0;
 }
 HEAP32[$res >> 2] = HEAP32[546659];
 HEAP32[$retval >> 2] = HEAP32[$res >> 2];
 $15 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $15 | 0;
}

function __ZN2Dr24DifferenceBetween2AnglesEdd($angle1, $angle2) {
 $angle1 = +$angle1;
 $angle2 = +$angle2;
 var $angle1$addr$0 = 0.0, $angle1$addr$1 = 0.0, $angle2$addr$0 = 0.0, $angle2$addr$1 = 0.0, $diff$0 = 0.0, $sub16 = 0.0, $sub21 = 0.0;
 $angle1$addr$0 = $angle1;
 while (1) {
  if (!($angle1$addr$0 < 0.0)) break;
  $angle1$addr$0 = $angle1$addr$0 + 360.0;
 }
 $angle2$addr$0 = $angle2;
 while (1) {
  if (!($angle2$addr$0 < 0.0)) break;
  $angle2$addr$0 = $angle2$addr$0 + 360.0;
 }
 $angle1$addr$1 = $angle1$addr$0;
 while (1) {
  if (!($angle1$addr$1 >= 360.0)) break;
  $angle1$addr$1 = $angle1$addr$1 + -360.0;
 }
 $angle2$addr$1 = $angle2$addr$0;
 while (1) {
  if (!($angle2$addr$1 >= 360.0)) break;
  $angle2$addr$1 = $angle2$addr$1 + -360.0;
 }
 if ($angle1$addr$1 > $angle2$addr$1) {
  $sub16 = $angle1$addr$1 - $angle2$addr$1;
  if ($sub16 > 180.0) $diff$0 = $angle2$addr$1 - ($angle1$addr$1 + -360.0); else $diff$0 = $sub16;
 } else {
  $sub21 = $angle2$addr$1 - $angle1$addr$1;
  if ($sub21 > 180.0) $diff$0 = $angle1$addr$1 - ($angle2$addr$1 + -360.0); else $diff$0 = $sub21;
 }
 return +$diff$0;
}

function _stbtt__get_subr($agg$result, $idx, $n) {
 $agg$result = $agg$result | 0;
 $idx = $idx | 0;
 $n = $n | 0;
 var $7 = 0, $bias = 0, $count = 0, $idx$byval_copy = 0, $n$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $idx$byval_copy = sp + 12 | 0;
 $n$addr = sp + 8 | 0;
 $count = sp + 4 | 0;
 $bias = sp;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$count >> 2] = _stbtt__cff_index_count($idx) | 0;
 HEAP32[$bias >> 2] = 107;
 if ((HEAP32[$count >> 2] | 0) >= 33900) HEAP32[$bias >> 2] = 32768; else if ((HEAP32[$count >> 2] | 0) >= 1240) HEAP32[$bias >> 2] = 1131;
 HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] | 0) + (HEAP32[$bias >> 2] | 0);
 if ((HEAP32[$n$addr >> 2] | 0) >= 0) if ((HEAP32[$n$addr >> 2] | 0) < (HEAP32[$count >> 2] | 0)) {
  $7 = HEAP32[$n$addr >> 2] | 0;
  HEAP32[$idx$byval_copy >> 2] = HEAP32[$idx >> 2];
  HEAP32[$idx$byval_copy + 4 >> 2] = HEAP32[$idx + 4 >> 2];
  HEAP32[$idx$byval_copy + 8 >> 2] = HEAP32[$idx + 8 >> 2];
  _stbtt__cff_index_get($agg$result, $idx$byval_copy, $7);
  STACKTOP = sp;
  return;
 }
 _stbtt__new_buf($agg$result, 0, 0);
 STACKTOP = sp;
 return;
}

function _sg_begin_default_pass($pass_action, $width, $height) {
 $pass_action = $pass_action | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $pa = 0, $pass_action$addr = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $pass_action$addr = sp + 112 | 0;
 $width$addr = sp + 108 | 0;
 $height$addr = sp + 104 | 0;
 $pa = sp;
 HEAP32[$pass_action$addr >> 2] = $pass_action;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14770, 22466);
 if (!(HEAP32[$pass_action$addr >> 2] | 0)) ___assert_fail(22488, 21600, 14771, 22466);
 if (HEAP32[HEAP32[$pass_action$addr >> 2] >> 2] | 0) ___assert_fail(22500, 21600, 14772, 22466);
 if (!(HEAP32[(HEAP32[$pass_action$addr >> 2] | 0) + 100 >> 2] | 0)) {
  __sg_resolve_default_pass_action(HEAP32[$pass_action$addr >> 2] | 0, $pa);
  HEAP32[541059] = 0;
  HEAP8[2164244] = 1;
  __sg_begin_pass(0, $pa, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(22500, 21600, 14772, 22466);
}

function __ZNSt3__27__sort4IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_S5_T_($__x1, $__x2, $__x3, $__x4, $__c) {
 $__x1 = $__x1 | 0;
 $__x2 = $__x2 | 0;
 $__x3 = $__x3 | 0;
 $__x4 = $__x4 | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__r$0 = 0, $call = 0, $inc = 0;
 $call = __ZNSt3__27__sort3IRN13TPPLPartition12VertexSorterEPlEEjT0_S5_S5_T_($__x1, $__x2, $__x3, $__c) | 0;
 $0 = HEAP32[$__x4 >> 2] | 0;
 $1 = HEAP32[$__x3 >> 2] | 0;
 if (__ZN13TPPLPartition12VertexSorterclEll($__c, $0, $1) | 0) {
  HEAP32[$__x3 >> 2] = $0;
  HEAP32[$__x4 >> 2] = $1;
  $inc = $call + 1 | 0;
  $2 = HEAP32[$__x3 >> 2] | 0;
  $3 = HEAP32[$__x2 >> 2] | 0;
  if (__ZN13TPPLPartition12VertexSorterclEll($__c, $2, $3) | 0) {
   HEAP32[$__x2 >> 2] = $2;
   HEAP32[$__x3 >> 2] = $3;
   $4 = HEAP32[$__x2 >> 2] | 0;
   $5 = HEAP32[$__x1 >> 2] | 0;
   if (__ZN13TPPLPartition12VertexSorterclEll($__c, $4, $5) | 0) {
    HEAP32[$__x1 >> 2] = $4;
    HEAP32[$__x2 >> 2] = $5;
    $__r$0 = $call + 3 | 0;
   } else $__r$0 = $call + 2 | 0;
  } else $__r$0 = $inc;
 } else $__r$0 = $call;
 return $__r$0 | 0;
}

function _stbi__pnm_skip_whitespace($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $14 = 0, $3 = 0, $c$addr = 0, $call19 = 0, $call3 = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $c$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$c$addr >> 2] = $c;
 while (1) {
  while (1) {
   if (_stbi__at_eof(HEAP32[$s$addr >> 2] | 0) | 0) $14 = 0; else $14 = (_stbi__pnm_isspace(HEAP8[HEAP32[$c$addr >> 2] >> 0] | 0) | 0) != 0;
   $3 = HEAP32[$s$addr >> 2] | 0;
   if (!$14) break;
   $call3 = _stbi__get8($3) | 0;
   HEAP8[HEAP32[$c$addr >> 2] >> 0] = $call3;
  }
  if (_stbi__at_eof($3) | 0) {
   label = 15;
   break;
  }
  if ((HEAP8[HEAP32[$c$addr >> 2] >> 0] | 0) != 35) {
   label = 15;
   break;
  }
  while (1) {
   if (_stbi__at_eof(HEAP32[$s$addr >> 2] | 0) | 0) break;
   if ((HEAP8[HEAP32[$c$addr >> 2] >> 0] | 0) == 10) break;
   if ((HEAP8[HEAP32[$c$addr >> 2] >> 0] | 0) == 13) break;
   $call19 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
   HEAP8[HEAP32[$c$addr >> 2] >> 0] = $call19;
  }
 }
 if ((label | 0) == 15) {
  STACKTOP = sp;
  return;
 }
}

function _stbi__shiftsigned($v, $shift, $bits) {
 $v = $v | 0;
 $shift = $shift | 0;
 $bits = $bits | 0;
 var $1 = 0, $bits$addr = 0, $mul = 0, $shift$addr = 0, $v$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $v$addr = sp + 8 | 0;
 $shift$addr = sp + 4 | 0;
 $bits$addr = sp;
 HEAP32[$v$addr >> 2] = $v;
 HEAP32[$shift$addr >> 2] = $shift;
 HEAP32[$bits$addr >> 2] = $bits;
 $1 = HEAP32[$shift$addr >> 2] | 0;
 if ((HEAP32[$shift$addr >> 2] | 0) < 0) HEAP32[$v$addr >> 2] = HEAP32[$v$addr >> 2] << 0 - $1; else HEAP32[$v$addr >> 2] = (HEAP32[$v$addr >> 2] | 0) >>> $1;
 if ((HEAP32[$v$addr >> 2] | 0) >>> 0 >= 256) ___assert_fail(48139, 47433, 5113, 48147);
 HEAP32[$v$addr >> 2] = (HEAP32[$v$addr >> 2] | 0) >>> (8 - (HEAP32[$bits$addr >> 2] | 0) | 0);
 if ((HEAP32[$bits$addr >> 2] | 0) >= 0 & (HEAP32[$bits$addr >> 2] | 0) <= 8) {
  $mul = Math_imul(HEAP32[$v$addr >> 2] | 0, HEAP32[8560 + (HEAP32[$bits$addr >> 2] << 2) >> 2] | 0) | 0;
  STACKTOP = sp;
  return $mul >> HEAP32[8608 + (HEAP32[$bits$addr >> 2] << 2) >> 2] | 0;
 } else ___assert_fail(48165, 47433, 5115, 48147);
 return 0;
}

function _stbi__parse_zlib_header($a) {
 $a = $a | 0;
 var $7 = 0, $a$addr = 0, $cm = 0, $cmf = 0, $flg = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $cmf = sp + 8 | 0;
 $cm = sp + 4 | 0;
 $flg = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$cmf >> 2] = (_stbi__zget8(HEAP32[$a$addr >> 2] | 0) | 0) & 255;
 HEAP32[$cm >> 2] = HEAP32[$cmf >> 2] & 15;
 HEAP32[$flg >> 2] = (_stbi__zget8(HEAP32[$a$addr >> 2] | 0) | 0) & 255;
 if (((HEAP32[$cmf >> 2] << 8) + (HEAP32[$flg >> 2] | 0) | 0) % 31 | 0 | 0) {
  HEAP32[$retval >> 2] = _stbi__err(49073) | 0;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 if (HEAP32[$flg >> 2] & 32 | 0) {
  HEAP32[$retval >> 2] = _stbi__err(49089) | 0;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 if ((HEAP32[$cm >> 2] | 0) != 8) {
  HEAP32[$retval >> 2] = _stbi__err(47960) | 0;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 } else {
  HEAP32[$retval >> 2] = 1;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 return 0;
}

function __sapp_emsc_run($desc) {
 $desc = $desc | 0;
 var $desc$addr = 0, $h = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $desc$addr = sp + 16 | 0;
 $w = sp + 8 | 0;
 $h = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 __sapp_init_state(HEAP32[$desc$addr >> 2] | 0);
 _sapp_js_pointer_init(58997);
 __sapp_emsc_keytable_init();
 if (HEAP8[58668] & 1) {
  HEAPF64[$w >> 3] = +(HEAP32[14655] | 0);
  HEAPF64[$h >> 3] = +(HEAP32[14656] | 0);
 } else {
  _emscripten_get_element_css_size(58996, $w | 0, $h | 0) | 0;
  _emscripten_set_resize_callback_on_thread(2, 0, 0, 6, 2) | 0;
 }
 if (HEAP8[58636] & 1) HEAPF32[14678] = +_emscripten_get_device_pixel_ratio();
 HEAP32[14672] = ~~+HEAPF64[$w >> 3];
 HEAP32[14673] = ~~+HEAPF64[$h >> 3];
 HEAP32[14674] = ~~(+HEAPF64[$w >> 3] * +HEAPF32[14678]);
 HEAP32[14675] = ~~(+HEAPF64[$h >> 3] * +HEAPF32[14678]);
 _emscripten_set_canvas_element_size(58996, HEAP32[14674] | 0, HEAP32[14675] | 0) | 0;
 __sapp_emsc_webgl_init();
 HEAP8[58676] = 1;
 __sapp_emsc_register_eventhandlers();
 _emscripten_request_animation_frame_loop(1, 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp2;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp, $agg$tmp$byval_copy);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 57113);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 57138);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __sg_gl_cache_clear_texture_bindings($force) {
 $force = $force | 0;
 var $force$addr = 0, $gl_texture_slot = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $force$addr = sp + 8 | 0;
 $i = sp + 4 | 0;
 $gl_texture_slot = sp;
 HEAP8[$force$addr >> 0] = $force & 1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 12) {
   label = 8;
   break;
  }
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[541357] | 0)) {
   label = 8;
   break;
  }
  if (HEAP8[$force$addr >> 0] & 1) label = 6; else if (HEAP32[2165292 + (HEAP32[$i >> 2] << 3) + 4 >> 2] | 0) label = 6;
  if ((label | 0) == 6) {
   label = 0;
   HEAP32[$gl_texture_slot >> 2] = 33984 + (HEAP32[$i >> 2] | 0);
   _glActiveTexture(HEAP32[$gl_texture_slot >> 2] | 0);
   _glBindTexture(3553, 0);
   _glBindTexture(34067, 0);
   HEAP32[2165292 + (HEAP32[$i >> 2] << 3) >> 2] = 0;
   HEAP32[2165292 + (HEAP32[$i >> 2] << 3) + 4 >> 2] = 0;
   HEAP32[541352] = HEAP32[$gl_texture_slot >> 2];
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 8) {
  STACKTOP = sp;
  return;
 }
}

function _stbi__do_zlib($a, $obuf, $olen, $exp, $parse_header) {
 $a = $a | 0;
 $obuf = $obuf | 0;
 $olen = $olen | 0;
 $exp = $exp | 0;
 $parse_header = $parse_header | 0;
 var $a$addr = 0, $call = 0, $exp$addr = 0, $obuf$addr = 0, $olen$addr = 0, $parse_header$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $a$addr = sp + 16 | 0;
 $obuf$addr = sp + 12 | 0;
 $olen$addr = sp + 8 | 0;
 $exp$addr = sp + 4 | 0;
 $parse_header$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$obuf$addr >> 2] = $obuf;
 HEAP32[$olen$addr >> 2] = $olen;
 HEAP32[$exp$addr >> 2] = $exp;
 HEAP32[$parse_header$addr >> 2] = $parse_header;
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 20 >> 2] = HEAP32[$obuf$addr >> 2];
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] = HEAP32[$obuf$addr >> 2];
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 24 >> 2] = (HEAP32[$obuf$addr >> 2] | 0) + (HEAP32[$olen$addr >> 2] | 0);
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 28 >> 2] = HEAP32[$exp$addr >> 2];
 $call = _stbi__parse_zlib(HEAP32[$a$addr >> 2] | 0, HEAP32[$parse_header$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3, $args5) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
 $tobool = (HEAP8[$args >> 0] | 0) != 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $11 = HEAP32[$args3 >> 2] | 0;
 $12 = HEAP32[$args5 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_($call, $tobool, $tmpcast$byval_copy, $11, $12);
 STACKTOP = sp;
 return $call | 0;
}

function _stbi__get8($s) {
 $s = $s | 0;
 var $10 = 0, $12 = 0, $4 = 0, $5 = 0, $img_buffer1 = 0, $img_buffer3 = 0, $retval = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $s$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 $4 = HEAP32[$s$addr >> 2] | 0;
 if ((HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] | 0) >>> 0) {
  $img_buffer1 = $4 + 168 | 0;
  $5 = HEAP32[$img_buffer1 >> 2] | 0;
  HEAP32[$img_buffer1 >> 2] = $5 + 1;
  HEAP8[$retval >> 0] = HEAP8[$5 >> 0] | 0;
  $12 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 if (HEAP32[$4 + 32 >> 2] | 0) {
  _stbi__refill_buffer(HEAP32[$s$addr >> 2] | 0);
  $img_buffer3 = (HEAP32[$s$addr >> 2] | 0) + 168 | 0;
  $10 = HEAP32[$img_buffer3 >> 2] | 0;
  HEAP32[$img_buffer3 >> 2] = $10 + 1;
  HEAP8[$retval >> 0] = HEAP8[$10 >> 0] | 0;
  $12 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $12 | 0;
 } else {
  HEAP8[$retval >> 0] = 0;
  $12 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52159);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 12 | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 52155);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbi__hdr_test_core($s, $signature) {
 $s = $s | 0;
 $signature = $signature | 0;
 var $3 = 0, $8 = 0, $conv = 0, $i = 0, $retval = 0, $s$addr = 0, $signature$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $s$addr = sp + 8 | 0;
 $signature$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$signature$addr >> 2] = $signature;
 HEAP32[$i >> 2] = 0;
 while (1) {
  $3 = HEAP32[$s$addr >> 2] | 0;
  if (!(HEAP8[(HEAP32[$signature$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0)) {
   label = 6;
   break;
  }
  $conv = (_stbi__get8($3) | 0) & 255;
  if (($conv | 0) != (HEAP8[(HEAP32[$signature$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0)) {
   label = 4;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) {
  HEAP32[$retval >> 2] = 0;
  $8 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 } else if ((label | 0) == 6) {
  _stbi__rewind($3);
  HEAP32[$retval >> 2] = 1;
  $8 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0;
}

function _sfetch_dowork() {
 var $chn_index = 0, $ctx = 0, $pass = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx = sp + 8 | 0;
 $pass = sp + 4 | 0;
 $chn_index = sp;
 HEAP32[$ctx >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$ctx >> 2] | 0)) ___assert_fail(25852, 25510, 2440, 26075);
 if (!(HEAP8[HEAP32[$ctx >> 2] >> 0] & 1)) ___assert_fail(25852, 25510, 2440, 26075);
 if (!(HEAP8[(HEAP32[$ctx >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[(HEAP32[$ctx >> 2] | 0) + 2 >> 0] = 1;
 HEAP32[$pass >> 2] = 0;
 while (1) {
  if ((HEAP32[$pass >> 2] | 0) >= 2) break;
  HEAP32[$chn_index >> 2] = 0;
  while (1) {
   if ((HEAP32[$chn_index >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) break;
   __sfetch_channel_dowork((HEAP32[$ctx >> 2] | 0) + 48 + ((HEAP32[$chn_index >> 2] | 0) * 76 | 0) | 0, (HEAP32[$ctx >> 2] | 0) + 24 | 0);
   HEAP32[$chn_index >> 2] = (HEAP32[$chn_index >> 2] | 0) + 1;
  }
  HEAP32[$pass >> 2] = (HEAP32[$pass >> 2] | 0) + 1;
 }
 HEAP8[(HEAP32[$ctx >> 2] | 0) + 2 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52157);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp2;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function _threebyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $5 = 0, $6 = 0, $arrayidx15 = 0, $h$addr$0$lcssa = 0, $h$addr$016 = 0, $hw$017 = 0, $incdec$ptr = 0, $or18 = 0, $or7 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool13 = 0;
 $or7 = (HEAPU8[$n + 1 >> 0] | 0) << 16 | (HEAPU8[$n >> 0] | 0) << 24 | (HEAPU8[$n + 2 >> 0] | 0) << 8;
 $arrayidx15 = $h + 2 | 0;
 $5 = HEAP8[$arrayidx15 >> 0] | 0;
 $or18 = (HEAPU8[$h + 1 >> 0] | 0) << 16 | (HEAPU8[$h >> 0] | 0) << 24 | ($5 & 255) << 8;
 $tobool13 = $5 << 24 >> 24 == 0;
 if (($or18 | 0) == ($or7 | 0) | $tobool13) {
  $h$addr$0$lcssa = $arrayidx15;
  $tobool$lcssa = $tobool13;
 } else {
  $h$addr$016 = $arrayidx15;
  $hw$017 = $or18;
  while (1) {
   $incdec$ptr = $h$addr$016 + 1 | 0;
   $6 = HEAP8[$incdec$ptr >> 0] | 0;
   $hw$017 = ($hw$017 | $6 & 255) << 8;
   $tobool = $6 << 24 >> 24 == 0;
   if (($hw$017 | 0) == ($or7 | 0) | $tobool) {
    $h$addr$0$lcssa = $incdec$ptr;
    $tobool$lcssa = $tobool;
    break;
   } else $h$addr$016 = $incdec$ptr;
  }
 }
 return ($tobool$lcssa ? 0 : $h$addr$0$lcssa + -2 | 0) | 0;
}

function __sfetch_ring_enqueue($rb, $slot_id) {
 $rb = $rb | 0;
 $slot_id = $slot_id | 0;
 var $call11 = 0, $rb$addr = 0, $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rb$addr = sp + 4 | 0;
 $slot_id$addr = sp;
 HEAP32[$rb$addr >> 2] = $rb;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 if (!(HEAP32[$rb$addr >> 2] | 0)) ___assert_fail(41999, 25510, 1301, 42013);
 if (!(HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(41999, 25510, 1301, 42013);
 if (__sfetch_ring_full(HEAP32[$rb$addr >> 2] | 0) | 0) ___assert_fail(42034, 25510, 1302, 42013);
 if ((HEAP32[HEAP32[$rb$addr >> 2] >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 8 >> 2] | 0) >>> 0) {
  HEAP32[(HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[HEAP32[$rb$addr >> 2] >> 2] << 2) >> 2] = HEAP32[$slot_id$addr >> 2];
  $call11 = __sfetch_ring_wrap(HEAP32[$rb$addr >> 2] | 0, (HEAP32[HEAP32[$rb$addr >> 2] >> 2] | 0) + 1 | 0) | 0;
  HEAP32[HEAP32[$rb$addr >> 2] >> 2] = $call11;
  STACKTOP = sp;
  return;
 } else ___assert_fail(42057, 25510, 1303, 42013);
}

function __sfetch_ring_peek($rb, $index) {
 $rb = $rb | 0;
 $index = $index | 0;
 var $4 = 0, $index$addr = 0, $rb$addr = 0, $rb_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rb$addr = sp + 8 | 0;
 $index$addr = sp + 4 | 0;
 $rb_index = sp;
 HEAP32[$rb$addr >> 2] = $rb;
 HEAP32[$index$addr >> 2] = $index;
 if (!(HEAP32[$rb$addr >> 2] | 0)) ___assert_fail(41999, 25510, 1318, 43732);
 if (!(HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(41999, 25510, 1318, 43732);
 if (__sfetch_ring_empty(HEAP32[$rb$addr >> 2] | 0) | 0) ___assert_fail(43689, 25510, 1319, 43732);
 $4 = HEAP32[$index$addr >> 2] | 0;
 if ($4 >>> 0 < (__sfetch_ring_count(HEAP32[$rb$addr >> 2] | 0) | 0) >>> 0) {
  HEAP32[$rb_index >> 2] = __sfetch_ring_wrap(HEAP32[$rb$addr >> 2] | 0, (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$index$addr >> 2] | 0) | 0) | 0;
  STACKTOP = sp;
  return HEAP32[(HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$rb_index >> 2] << 2) >> 2] | 0;
 } else ___assert_fail(43750, 25510, 1320, 43732);
 return 0;
}

function _stbi__jpeg_load($s, $x, $y, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $comp$addr = 0, $j = 0, $req_comp$addr = 0, $result = 0, $s$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $s$addr = sp + 28 | 0;
 $x$addr = sp + 24 | 0;
 $y$addr = sp + 20 | 0;
 $comp$addr = sp + 16 | 0;
 $req_comp$addr = sp + 12 | 0;
 $result = sp + 4 | 0;
 $j = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[sp + 8 >> 2] = $ri;
 HEAP32[$j >> 2] = _stbi__malloc(18456) | 0;
 HEAP32[HEAP32[$j >> 2] >> 2] = HEAP32[$s$addr >> 2];
 _stbi__setup_jpeg(HEAP32[$j >> 2] | 0);
 HEAP32[$result >> 2] = _load_jpeg_image(HEAP32[$j >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0) | 0;
 _free(HEAP32[$j >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$result >> 2] | 0;
}

function _sfons_flush($ctx) {
 $ctx = $ctx | 0;
 var $ctx$addr = 0, $data = 0, $img$byval_copy = 0, $sfons = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 $img$byval_copy = sp + 776 | 0;
 $ctx$addr = sp + 772 | 0;
 $sfons = sp + 768 | 0;
 $data = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 if (!(HEAP32[$ctx$addr >> 2] | 0)) ___assert_fail(28520, 28414, 1769, 28547);
 if (!(HEAP32[(HEAP32[$ctx$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(28520, 28414, 1769, 28547);
 HEAP32[$sfons >> 2] = HEAP32[(HEAP32[$ctx$addr >> 2] | 0) + 12 >> 2];
 if (!(HEAP8[(HEAP32[$sfons >> 2] | 0) + 20 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[(HEAP32[$sfons >> 2] | 0) + 20 >> 0] = 0;
 _memset($data | 0, 0, 768) | 0;
 HEAP32[$data >> 2] = HEAP32[(HEAP32[$ctx$addr >> 2] | 0) + 44 >> 2];
 HEAP32[$data + 4 >> 2] = Math_imul(HEAP32[(HEAP32[$sfons >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$sfons >> 2] | 0) + 16 >> 2] | 0) | 0;
 HEAP32[$img$byval_copy >> 2] = HEAP32[(HEAP32[$sfons >> 2] | 0) + 8 >> 2];
 _sg_update_image($img$byval_copy, $data);
 STACKTOP = sp;
 return;
}

function __sfetch_ring_dequeue($rb) {
 $rb = $rb | 0;
 var $call11 = 0, $rb$addr = 0, $slot_id = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rb$addr = sp + 4 | 0;
 $slot_id = sp;
 HEAP32[$rb$addr >> 2] = $rb;
 if (!(HEAP32[$rb$addr >> 2] | 0)) ___assert_fail(41999, 25510, 1309, 43668);
 if (!(HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(41999, 25510, 1309, 43668);
 if (__sfetch_ring_empty(HEAP32[$rb$addr >> 2] | 0) | 0) ___assert_fail(43689, 25510, 1310, 43668);
 if ((HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 8 >> 2] | 0) >>> 0) {
  HEAP32[$slot_id >> 2] = HEAP32[(HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] << 2) >> 2];
  $call11 = __sfetch_ring_wrap(HEAP32[$rb$addr >> 2] | 0, (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] | 0) + 1 | 0) | 0;
  HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] = $call11;
  STACKTOP = sp;
  return HEAP32[$slot_id >> 2] | 0;
 } else ___assert_fail(43713, 25510, 1311, 43668);
 return 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $__size_$i$i = 0, $add$ptr$i = 0, $cond$i = 0, $ref$tmp$i = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp$i = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 do if ($cond$i >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this, $__n - $cond$i | 0, $__c) | 0; else if ($tobool$i$i) {
  $add$ptr$i = (HEAP32[$this >> 2] | 0) + $__n | 0;
  HEAP8[$ref$tmp$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($add$ptr$i, $ref$tmp$i);
  HEAP32[$this + 4 >> 2] = $__n;
  break;
 } else {
  HEAP8[$ref$tmp$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($this + $__n | 0, $ref$tmp$i);
  HEAP8[$__size_$i$i >> 0] = $__n;
  break;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $2 = 0, $7 = 0, $8 = 0, $agg$tmp = 0, $call2 = 0, $ref$tmp = 0, $retval$0 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $ref$tmp = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp, HEAP32[$this >> 2] | 0, HEAP32[$this + 4 >> 2] | 0);
 $2 = $S;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $agg$tmp;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 if (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($ref$tmp, $tmpcast$byval_copy) | 0) {
  $call2 = __ZNK12_GLOBAL__N_110StringView4sizeEv($S) | 0;
  HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + $call2;
  $retval$0 = 1;
 } else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr6 = 0;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 do if (!$0) {
  HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } else {
  if (($0 | 0) != ($adjustedPtr | 0)) {
   $number_to_static_ptr11 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr11 >> 2] = (HEAP32[$number_to_static_ptr11 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr6 = $info + 24 | 0;
  if ((HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] | 0) == 2) HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] = $path_below;
 } while (0);
 return;
}

function __sg_buffer_desc_defaults($agg$result, $desc) {
 $agg$result = $agg$result | 0;
 $desc = $desc | 0;
 var $6 = 0, $def = 0, $desc$addr = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $desc$addr = sp + 56 | 0;
 $def = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 dest = $def;
 src = HEAP32[$desc$addr >> 2] | 0;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$def + 8 >> 2] = (HEAP32[$def + 8 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 8 >> 2] | 0;
 HEAP32[$def + 12 >> 2] = (HEAP32[$def + 12 >> 2] | 0) == 0 ? 1 : HEAP32[$def + 12 >> 2] | 0;
 $6 = HEAP32[$def + 16 + 4 >> 2] | 0;
 if (!(HEAP32[$def + 4 >> 2] | 0)) HEAP32[$def + 4 >> 2] = $6; else if (!$6) HEAP32[$def + 16 + 4 >> 2] = HEAP32[$def + 4 >> 2];
 dest = $agg$result;
 src = $def;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__27__sort4IR7comparePmEEjT0_S4_S4_S4_T_($__x1, $__x2, $__x3, $__x4, $__c) {
 $__x1 = $__x1 | 0;
 $__x2 = $__x2 | 0;
 $__x3 = $__x3 | 0;
 $__x4 = $__x4 | 0;
 $__c = $__c | 0;
 var $10 = 0, $2 = 0, $6 = 0, $__r$0 = 0, $call = 0, $inc = 0;
 $call = __ZNSt3__27__sort3IR7comparePmEEjT0_S4_S4_T_($__x1, $__x2, $__x3, $__c) | 0;
 if (__ZN7compareclEmm($__c, HEAP32[$__x4 >> 2] | 0, HEAP32[$__x3 >> 2] | 0) | 0) {
  $2 = HEAP32[$__x3 >> 2] | 0;
  HEAP32[$__x3 >> 2] = HEAP32[$__x4 >> 2];
  HEAP32[$__x4 >> 2] = $2;
  $inc = $call + 1 | 0;
  if (__ZN7compareclEmm($__c, HEAP32[$__x3 >> 2] | 0, HEAP32[$__x2 >> 2] | 0) | 0) {
   $6 = HEAP32[$__x2 >> 2] | 0;
   HEAP32[$__x2 >> 2] = HEAP32[$__x3 >> 2];
   HEAP32[$__x3 >> 2] = $6;
   if (__ZN7compareclEmm($__c, HEAP32[$__x2 >> 2] | 0, HEAP32[$__x1 >> 2] | 0) | 0) {
    $10 = HEAP32[$__x1 >> 2] | 0;
    HEAP32[$__x1 >> 2] = HEAP32[$__x2 >> 2];
    HEAP32[$__x2 >> 2] = $10;
    $__r$0 = $call + 3 | 0;
   } else $__r$0 = $call + 2 | 0;
  } else $__r$0 = $inc;
 } else $__r$0 = $call;
 return $__r$0 | 0;
}

function _sg_make_pipeline($desc) {
 $desc = $desc | 0;
 var $4 = 0, $desc$addr = 0, $desc_def = 0, $pip_id = 0, $pip_id$byval_copy = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 $pip_id$byval_copy = sp + 568 | 0;
 $retval = sp + 564 | 0;
 $desc$addr = sp + 560 | 0;
 $desc_def = sp + 4 | 0;
 $pip_id = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14697, 22351);
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 14698, 22351);
 __sg_pipeline_desc_defaults($desc_def, HEAP32[$desc$addr >> 2] | 0);
 HEAP32[$pip_id >> 2] = __sg_alloc_pipeline() | 0;
 if (HEAP32[$pip_id >> 2] | 0) {
  HEAP32[$pip_id$byval_copy >> 2] = HEAP32[$pip_id >> 2];
  __sg_init_pipeline($pip_id$byval_copy, $desc_def);
  HEAP32[$retval >> 2] = HEAP32[$pip_id >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  _puts(22368) | 0;
  HEAP32[$retval >> 2] = HEAP32[$pip_id >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __sg_validate_update_buffer($buf, $data) {
 $buf = $buf | 0;
 $data = $data | 0;
 var $buf$addr = 0, $call = 0, $data$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf$addr = sp + 4 | 0;
 $data$addr = sp;
 HEAP32[$buf$addr >> 2] = $buf;
 HEAP32[$data$addr >> 2] = $data;
 if (!((HEAP32[$buf$addr >> 2] | 0) != 0 & (HEAP32[$data$addr >> 2] | 0) != 0)) ___assert_fail(41027, 21600, 13770, 41052);
 if (HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) {
  __sg_validate_begin();
  __sg_validate((HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 16 >> 2] | 0) != 1, 83);
  __sg_validate((HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 >> 2] | 0) >= (HEAP32[(HEAP32[$data$addr >> 2] | 0) + 4 >> 2] | 0), 84);
  __sg_validate((HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 20 >> 2] | 0) != (HEAP32[541057] | 0), 85);
  __sg_validate((HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 24 >> 2] | 0) != (HEAP32[541057] | 0), 86);
  $call = __sg_validate_end() | 0;
  STACKTOP = sp;
  return $call | 0;
 } else ___assert_fail(41027, 21600, 13770, 41052);
 return 0;
}

function __ZNK13TPPLPartition12ScanLineEdgeltERKS0_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $0 = 0.0, $2 = 0.0, $cmp7 = 0, $p1 = 0, $p13 = 0, $p2 = 0, $p25 = 0, $retval$0 = 0;
 $p1 = $other + 8 | 0;
 $0 = +HEAPF64[$other + 16 >> 3];
 $p2 = $other + 32 | 0;
 $p13 = $this + 8 | 0;
 $2 = +HEAPF64[$this + 16 >> 3];
 $p25 = $this + 32 | 0;
 $cmp7 = $2 == +HEAPF64[$this + 40 >> 3];
 do if ($0 == +HEAPF64[$other + 40 >> 3]) if ($cmp7) {
  $retval$0 = $2 < $0;
  break;
 } else {
  $retval$0 = __ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_(0, $p13, $p25, $p1) | 0;
  break;
 } else {
  if ($cmp7) {
   $retval$0 = (__ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_(0, $p1, $p2, $p13) | 0) ^ 1;
   break;
  }
  if ($2 < $0) {
   $retval$0 = (__ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_(0, $p1, $p2, $p13) | 0) ^ 1;
   break;
  } else {
   $retval$0 = __ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_(0, $p13, $p25, $p1) | 0;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function _stbi__tga_read_rgb16($s, $out) {
 $s = $s | 0;
 $out = $out | 0;
 var $b = 0, $fiveBitMask = 0, $g = 0, $out$addr = 0, $px = 0, $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $s$addr = sp + 16 | 0;
 $out$addr = sp + 12 | 0;
 $px = sp + 22 | 0;
 $fiveBitMask = sp + 20 | 0;
 $r = sp + 8 | 0;
 $g = sp + 4 | 0;
 $b = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$out$addr >> 2] = $out;
 HEAP16[$px >> 1] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP16[$fiveBitMask >> 1] = 31;
 HEAP32[$r >> 2] = (HEAPU16[$px >> 1] | 0) >> 10 & (HEAPU16[$fiveBitMask >> 1] | 0);
 HEAP32[$g >> 2] = (HEAPU16[$px >> 1] | 0) >> 5 & (HEAPU16[$fiveBitMask >> 1] | 0);
 HEAP32[$b >> 2] = (HEAPU16[$px >> 1] | 0) & (HEAPU16[$fiveBitMask >> 1] | 0);
 HEAP8[HEAP32[$out$addr >> 2] >> 0] = ((HEAP32[$r >> 2] | 0) * 255 | 0) / 31 | 0;
 HEAP8[(HEAP32[$out$addr >> 2] | 0) + 1 >> 0] = ((HEAP32[$g >> 2] | 0) * 255 | 0) / 31 | 0;
 HEAP8[(HEAP32[$out$addr >> 2] | 0) + 2 >> 0] = ((HEAP32[$b >> 2] | 0) * 255 | 0) / 31 | 0;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $2 = 0, $MemberType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $MemberType = $this + 12 | 0;
 if (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$MemberType >> 2] | 0, $s) | 0) label = 3; else if (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$MemberType >> 2] | 0, $s) | 0) label = 3;
 if ((label | 0) == 3) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52155);
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $agg$tmp$byval_copy);
 }
 $2 = HEAP32[$MemberType >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 127]($2, $s);
 STACKTOP = sp;
 return;
}

function _sg_make_shader($desc) {
 $desc = $desc | 0;
 var $4 = 0, $desc$addr = 0, $desc_def = 0, $retval = 0, $shd_id = 0, $shd_id$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2128 | 0;
 $shd_id$byval_copy = sp + 2112 | 0;
 $retval = sp + 2108 | 0;
 $desc$addr = sp + 2104 | 0;
 $desc_def = sp + 4 | 0;
 $shd_id = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14681, 22313);
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 14682, 22313);
 __sg_shader_desc_defaults($desc_def, HEAP32[$desc$addr >> 2] | 0);
 HEAP32[$shd_id >> 2] = __sg_alloc_shader() | 0;
 if (HEAP32[$shd_id >> 2] | 0) {
  HEAP32[$shd_id$byval_copy >> 2] = HEAP32[$shd_id >> 2];
  __sg_init_shader($shd_id$byval_copy, $desc_def);
  HEAP32[$retval >> 2] = HEAP32[$shd_id >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  _puts(22328) | 0;
  HEAP32[$retval >> 2] = HEAP32[$shd_id >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __sg_gl_destroy_pass($pass) {
 $pass = $pass | 0;
 var $gl8 = 0, $i = 0, $pass$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pass$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$pass$addr >> 2] = $pass;
 if (!(HEAP32[$pass$addr >> 2] | 0)) ___assert_fail(29964, 21600, 6338, 29969);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6339, 29969);
 if (HEAP32[(HEAP32[$pass$addr >> 2] | 0) + 76 >> 2] | 0) _glDeleteFramebuffers(1, (HEAP32[$pass$addr >> 2] | 0) + 76 | 0);
 HEAP32[$i >> 2] = 0;
 while (1) {
  $gl8 = (HEAP32[$pass$addr >> 2] | 0) + 76 | 0;
  if ((HEAP32[$i >> 2] | 0) >= 4) break;
  if (HEAP32[$gl8 + 4 + (HEAP32[$i >> 2] << 3) + 4 >> 2] | 0) _glDeleteFramebuffers(1, (HEAP32[$pass$addr >> 2] | 0) + 76 + 4 + (HEAP32[$i >> 2] << 3) + 4 | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (HEAP32[$gl8 + 36 + 4 >> 2] | 0) _glDeleteFramebuffers(1, (HEAP32[$pass$addr >> 2] | 0) + 76 + 36 + 4 | 0);
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(29811, 21600, 6351, 29969);
}

function _sg_make_image($desc) {
 $desc = $desc | 0;
 var $4 = 0, $desc$addr = 0, $desc_def = 0, $img_id = 0, $img_id$byval_copy = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 912 | 0;
 $img_id$byval_copy = sp + 896 | 0;
 $retval = sp + 892 | 0;
 $desc$addr = sp + 888 | 0;
 $desc_def = sp + 4 | 0;
 $img_id = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14665, 22277);
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 14666, 22277);
 __sg_image_desc_defaults($desc_def, HEAP32[$desc$addr >> 2] | 0);
 HEAP32[$img_id >> 2] = __sg_alloc_image() | 0;
 if (HEAP32[$img_id >> 2] | 0) {
  HEAP32[$img_id$byval_copy >> 2] = HEAP32[$img_id >> 2];
  __sg_init_image($img_id$byval_copy, $desc_def);
  HEAP32[$retval >> 2] = HEAP32[$img_id >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  _puts(22291) | 0;
  HEAP32[$retval >> 2] = HEAP32[$img_id >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function _sg_make_buffer($desc) {
 $desc = $desc | 0;
 var $4 = 0, $buf_id = 0, $buf_id$byval_copy = 0, $desc$addr = 0, $desc_def = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $buf_id$byval_copy = sp + 72 | 0;
 $retval = sp + 68 | 0;
 $desc$addr = sp + 64 | 0;
 $desc_def = sp + 8 | 0;
 $buf_id = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14649, 22239);
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 21600, 14650, 22239);
 __sg_buffer_desc_defaults($desc_def, HEAP32[$desc$addr >> 2] | 0);
 HEAP32[$buf_id >> 2] = __sg_alloc_buffer() | 0;
 if (HEAP32[$buf_id >> 2] | 0) {
  HEAP32[$buf_id$byval_copy >> 2] = HEAP32[$buf_id >> 2];
  __sg_init_buffer($buf_id$byval_copy, $desc_def);
  HEAP32[$retval >> 2] = HEAP32[$buf_id >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  _puts(22254) | 0;
  HEAP32[$retval >> 2] = HEAP32[$buf_id >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this, $Out) {
 $this = $this | 0;
 $Out = $Out | 0;
 var $$sink = 0, $Id$0 = 0, $call = 0, $call13 = 0, $retval$0 = 0;
 $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
 if ($call << 24 >> 24 > 47) if ($call << 24 >> 24 < 58 | ($call + -65 & 255) < 26) {
  $Id$0 = 0;
  while (1) {
   $call13 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0;
   if ($call13 << 24 >> 24 <= 47) break;
   if ($call13 << 24 >> 24 < 58) $$sink = -48; else if (($call13 + -65 & 255) < 26) $$sink = -55; else break;
   HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
   $Id$0 = ($Id$0 * 36 | 0) + $$sink + ($call13 << 24 >> 24) | 0;
  }
  HEAP32[$Out >> 2] = $Id$0;
  $retval$0 = 0;
 } else $retval$0 = 1; else $retval$0 = 1;
 return $retval$0 | 0;
}

function _stbi__malloc_mad3($a, $b, $c, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $add = $add | 0;
 var $8 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $c$addr = 0, $mul = 0, $mul1 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $b$addr = sp + 8 | 0;
 $c$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$add$addr >> 2] = $add;
 if (_stbi__mad3sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$c$addr >> 2] | 0, HEAP32[$add$addr >> 2] | 0) | 0) {
  $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
  $mul1 = Math_imul($mul, HEAP32[$c$addr >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = _stbi__malloc($mul1 + (HEAP32[$add$addr >> 2] | 0) | 0) | 0;
  $8 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $8 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0;
}

function __sg_gl_apply_scissor_rect($x, $y, $w, $h, $origin_top_left) {
 $x = $x | 0;
 $y = $y | 0;
 $w = $w | 0;
 $h = $h | 0;
 $origin_top_left = $origin_top_left | 0;
 var $cond = 0, $h$addr = 0, $origin_top_left$addr = 0, $w$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $w$addr = sp + 4 | 0;
 $h$addr = sp;
 $origin_top_left$addr = sp + 16 | 0;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP8[$origin_top_left$addr >> 0] = $origin_top_left & 1;
 if (!(HEAP8[2164786] & 1)) ___assert_fail(39890, 21600, 6558, 39927);
 if (HEAP8[$origin_top_left$addr >> 0] & 1) $cond = (HEAP32[541198] | 0) - ((HEAP32[$y$addr >> 2] | 0) + (HEAP32[$h$addr >> 2] | 0)) | 0; else $cond = HEAP32[$y$addr >> 2] | 0;
 HEAP32[$y$addr >> 2] = $cond;
 _glScissor(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_gl_apply_viewport($x, $y, $w, $h, $origin_top_left) {
 $x = $x | 0;
 $y = $y | 0;
 $w = $w | 0;
 $h = $h | 0;
 $origin_top_left = $origin_top_left | 0;
 var $cond = 0, $h$addr = 0, $origin_top_left$addr = 0, $w$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $w$addr = sp + 4 | 0;
 $h$addr = sp;
 $origin_top_left$addr = sp + 16 | 0;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP8[$origin_top_left$addr >> 0] = $origin_top_left & 1;
 if (!(HEAP8[2164786] & 1)) ___assert_fail(39890, 21600, 6552, 39905);
 if (HEAP8[$origin_top_left$addr >> 0] & 1) $cond = (HEAP32[541198] | 0) - ((HEAP32[$y$addr >> 2] | 0) + (HEAP32[$h$addr >> 2] | 0)) | 0; else $cond = HEAP32[$y$addr >> 2] | 0;
 HEAP32[$y$addr >> 2] = $cond;
 _glViewport(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbi_load_from_memory($buffer, $len, $x, $y, $comp, $req_comp) {
 $buffer = $buffer | 0;
 $len = $len | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 var $buffer$addr = 0, $call = 0, $comp$addr = 0, $len$addr = 0, $req_comp$addr = 0, $s = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $buffer$addr = sp + 204 | 0;
 $len$addr = sp + 200 | 0;
 $x$addr = sp + 196 | 0;
 $y$addr = sp + 192 | 0;
 $comp$addr = sp + 188 | 0;
 $req_comp$addr = sp + 184 | 0;
 $s = sp;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$len$addr >> 2] = $len;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 _stbi__start_mem($s, HEAP32[$buffer$addr >> 2] | 0, HEAP32[$len$addr >> 2] | 0);
 $call = _stbi__load_and_postprocess_8bit($s, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _stbi__resample_row_v_2($out, $in_near, $in_far, $w, $hs) {
 $out = $out | 0;
 $in_near = $in_near | 0;
 $in_far = $in_far | 0;
 $w = $w | 0;
 $hs = $hs | 0;
 var $i = 0, $in_far$addr = 0, $in_near$addr = 0, $out$addr = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $out$addr = sp + 20 | 0;
 $in_near$addr = sp + 16 | 0;
 $in_far$addr = sp + 12 | 0;
 $w$addr = sp + 8 | 0;
 $i = sp;
 HEAP32[$out$addr >> 2] = $out;
 HEAP32[$in_near$addr >> 2] = $in_near;
 HEAP32[$in_far$addr >> 2] = $in_far;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[sp + 4 >> 2] = $hs;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$w$addr >> 2] | 0)) break;
  HEAP8[(HEAP32[$out$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = ((HEAPU8[(HEAP32[$in_near$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) * 3 | 0) + (HEAPU8[(HEAP32[$in_far$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) + 2 >> 2;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$out$addr >> 2] | 0;
}

function __sfetch_pool_item_lookup($pool, $slot_id) {
 $pool = $pool | 0;
 $slot_id = $slot_id | 0;
 var $10 = 0, $item = 0, $pool$addr = 0, $retval = 0, $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $pool$addr = sp + 8 | 0;
 $slot_id$addr = sp + 4 | 0;
 $item = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(41933, 25510, 1448, 41953);
 if (!(HEAP8[(HEAP32[$pool$addr >> 2] | 0) + 20 >> 0] & 1)) ___assert_fail(41933, 25510, 1448, 41953);
 if (HEAP32[$slot_id$addr >> 2] | 0) {
  HEAP32[$item >> 2] = __sfetch_pool_item_at(HEAP32[$pool$addr >> 2] | 0, HEAP32[$slot_id$addr >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$item >> 2] >> 2] | 0) == (HEAP32[$slot_id$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$item >> 2];
   $10 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $10 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $10 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _stbtt__csctx_rmove_to($ctx, $dx, $dy) {
 $ctx = $ctx | 0;
 $dx = +$dx;
 $dy = +$dy;
 var $add = 0.0, $add2 = 0.0, $ctx$addr = 0, $dx$addr = 0, $dy$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp + 8 | 0;
 $dx$addr = sp + 4 | 0;
 $dy$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 HEAPF32[$dx$addr >> 2] = $dx;
 HEAPF32[$dy$addr >> 2] = $dy;
 _stbtt__csctx_close_shape(HEAP32[$ctx$addr >> 2] | 0);
 $add = +HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 16 >> 2] + +HEAPF32[$dx$addr >> 2];
 HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 16 >> 2] = $add;
 HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 8 >> 2] = $add;
 $add2 = +HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 20 >> 2] + +HEAPF32[$dy$addr >> 2];
 HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 20 >> 2] = $add2;
 HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 12 >> 2] = $add2;
 _stbtt__csctx_v(HEAP32[$ctx$addr >> 2] | 0, 1, ~~+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 16 >> 2], ~~+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 20 >> 2], 0, 0, 0, 0);
 STACKTOP = sp;
 return;
}

function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($this, $Comp) {
 $this = $this | 0;
 $Comp = $Comp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $7 = 0, $Comp$addr = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Comp$addr = sp;
 HEAP32[$Comp$addr >> 2] = $Comp;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$Comp) $retval$0 = 0; else {
  $1 = $this + 4 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  if (!(HEAP32[$2 >> 2] | 0)) HEAP32[$2 >> 2] = $Comp; else {
   $call = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($0, $2, $Comp$addr) | 0;
   HEAP32[HEAP32[$1 >> 2] >> 2] = $call;
  }
  $7 = HEAP32[HEAP32[$this + 8 >> 2] >> 2] | 0;
  if ($7 | 0) HEAP8[$7 + 1 >> 0] = 0;
  $retval$0 = (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) != 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _strncmp($_l, $_r, $n) {
 $_l = $_l | 0;
 $_r = $_r | 0;
 $n = $n | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $incdec$ptr9 = 0, $l$015 = 0, $n$addr$017$in = 0, $r$0$lcssa = 0, $r$016 = 0, $retval$0 = 0;
 if (!$n) $retval$0 = 0; else {
  $0 = HEAP8[$_l >> 0] | 0;
  L3 : do if (!($0 << 24 >> 24)) {
   $$lcssa = 0;
   $r$0$lcssa = $_r;
  } else {
   $2 = $0;
   $l$015 = $_l;
   $n$addr$017$in = $n;
   $r$016 = $_r;
   while (1) {
    $n$addr$017$in = $n$addr$017$in + -1 | 0;
    $1 = HEAP8[$r$016 >> 0] | 0;
    if (!($2 << 24 >> 24 == $1 << 24 >> 24 & (($n$addr$017$in | 0) != 0 & $1 << 24 >> 24 != 0))) {
     $$lcssa = $2;
     $r$0$lcssa = $r$016;
     break L3;
    }
    $l$015 = $l$015 + 1 | 0;
    $incdec$ptr9 = $r$016 + 1 | 0;
    $2 = HEAP8[$l$015 >> 0] | 0;
    if (!($2 << 24 >> 24)) {
     $$lcssa = 0;
     $r$0$lcssa = $incdec$ptr9;
     break;
    } else $r$016 = $incdec$ptr9;
   }
  } while (0);
  $retval$0 = ($$lcssa & 255) - (HEAPU8[$r$0$lcssa >> 0] | 0) | 0;
 }
 return $retval$0 | 0;
}

function __sg_gl_destroy_buffer($buf) {
 $buf = $buf | 0;
 var $buf$addr = 0, $slot = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf$addr = sp + 4 | 0;
 $slot = sp;
 HEAP32[$buf$addr >> 2] = $buf;
 if (!(HEAP32[$buf$addr >> 2] | 0)) ___assert_fail(29867, 21600, 5741, 29871);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5742, 29871);
 HEAP32[$slot >> 2] = 0;
 while (1) {
  if ((HEAP32[$slot >> 2] | 0) >= (HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 12 + 28 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 48 + (HEAP32[$slot >> 2] << 2) >> 2] | 0) {
   __sg_gl_cache_invalidate_buffer(HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 48 + (HEAP32[$slot >> 2] << 2) >> 2] | 0);
   if (!(HEAP8[(HEAP32[$buf$addr >> 2] | 0) + 48 + 8 >> 0] & 1)) _glDeleteBuffers(1, (HEAP32[$buf$addr >> 2] | 0) + 48 + (HEAP32[$slot >> 2] << 2) | 0);
  }
  HEAP32[$slot >> 2] = (HEAP32[$slot >> 2] | 0) + 1;
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(29811, 21600, 5751, 29871);
}

function __sg_gl_cache_bind_buffer($target, $buffer) {
 $target = $target | 0;
 $buffer = $buffer | 0;
 var $buffer$addr = 0, $target$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $target$addr = sp + 4 | 0;
 $buffer$addr = sp;
 HEAP32[$target$addr >> 2] = $target;
 HEAP32[$buffer$addr >> 2] = $buffer;
 if (!(34962 == (HEAP32[$target$addr >> 2] | 0) | 34963 == (HEAP32[$target$addr >> 2] | 0))) ___assert_fail(36528, 21600, 5399, 36569);
 if ((HEAP32[$target$addr >> 2] | 0) == 34962) {
  if ((HEAP32[541318] | 0) == (HEAP32[$buffer$addr >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[541318] = HEAP32[$buffer$addr >> 2];
  _glBindBuffer(HEAP32[$target$addr >> 2] | 0, HEAP32[$buffer$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  if ((HEAP32[541319] | 0) == (HEAP32[$buffer$addr >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[541319] = HEAP32[$buffer$addr >> 2];
  _glBindBuffer(HEAP32[$target$addr >> 2] | 0, HEAP32[$buffer$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function _stbtt_GetGlyphShape($info, $glyph_index, $pvertices) {
 $info = $info | 0;
 $glyph_index = $glyph_index | 0;
 $pvertices = $pvertices | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $glyph_index$addr = 0, $info$addr = 0, $pvertices$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $info$addr = sp + 8 | 0;
 $glyph_index$addr = sp + 4 | 0;
 $pvertices$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$glyph_index$addr >> 2] = $glyph_index;
 HEAP32[$pvertices$addr >> 2] = $pvertices;
 $2 = HEAP32[$info$addr >> 2] | 0;
 $3 = HEAP32[$glyph_index$addr >> 2] | 0;
 $4 = HEAP32[$pvertices$addr >> 2] | 0;
 if (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 48 + 8 >> 2] | 0) {
  HEAP32[$retval >> 2] = _stbtt__GetGlyphShapeT2($2, $3, $4) | 0;
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 } else {
  HEAP32[$retval >> 2] = _stbtt__GetGlyphShapeTT($2, $3, $4) | 0;
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 return 0;
}

function _stbi__jpeg_get_bits($j, $n) {
 $j = $j | 0;
 $n = $n | 0;
 var $code_bits5 = 0, $j$addr = 0, $k = 0, $n$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $j$addr = sp + 8 | 0;
 $n$addr = sp + 4 | 0;
 $k = sp;
 HEAP32[$j$addr >> 2] = $j;
 HEAP32[$n$addr >> 2] = $n;
 if ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0) < (HEAP32[$n$addr >> 2] | 0)) _stbi__grow_buffer_unsafe(HEAP32[$j$addr >> 2] | 0);
 HEAP32[$k >> 2] = HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] << HEAP32[$n$addr >> 2] | (HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] | 0) >>> (32 - (HEAP32[$n$addr >> 2] | 0) | 0);
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2] = HEAP32[$k >> 2] & ~HEAP32[9760 + (HEAP32[$n$addr >> 2] << 2) >> 2];
 HEAP32[$k >> 2] = HEAP32[$k >> 2] & HEAP32[9760 + (HEAP32[$n$addr >> 2] << 2) >> 2];
 $code_bits5 = (HEAP32[$j$addr >> 2] | 0) + 18368 | 0;
 HEAP32[$code_bits5 >> 2] = (HEAP32[$code_bits5 >> 2] | 0) - (HEAP32[$n$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this, $Out) {
 $this = $this | 0;
 $Out = $Out | 0;
 var $2 = 0, $add = 0, $retval$0 = 0, $sub = 0;
 HEAP32[$Out >> 2] = 0;
 L1 : do if (((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) + -48 & 255) > 9) $retval$0 = 1; else {
  $2 = 0;
  while (1) {
   if (((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, 0) | 0) + -48 & 255) >= 10) {
    $retval$0 = 0;
    break L1;
   }
   HEAP32[$Out >> 2] = $2 * 10;
   $sub = ((__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv($this) | 0) << 24 >> 24) + -48 | 0;
   $add = $sub + (HEAP32[$Out >> 2] | 0) | 0;
   HEAP32[$Out >> 2] = $add;
   $2 = $add;
  }
 } while (0);
 return $retval$0 | 0;
}

function __sfetch_channel_send($chn, $slot_id) {
 $chn = $chn | 0;
 $slot_id = $slot_id | 0;
 var $$pre_trunc = 0, $6 = 0, $chn$addr = 0, $retval = 0, $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $chn$addr = sp + 4 | 0;
 $slot_id$addr = sp;
 HEAP32[$chn$addr >> 2] = $chn;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 if (!(HEAP32[$chn$addr >> 2] | 0)) ___assert_fail(43078, 25510, 2146, 43096);
 if (!(HEAP8[(HEAP32[$chn$addr >> 2] | 0) + 72 >> 0] & 1)) ___assert_fail(43078, 25510, 2146, 43096);
 if (__sfetch_ring_full((HEAP32[$chn$addr >> 2] | 0) + 20 | 0) | 0) {
  _puts(43117) | 0;
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $6 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $6 | 0;
 } else {
  __sfetch_ring_enqueue((HEAP32[$chn$addr >> 2] | 0) + 20 | 0, HEAP32[$slot_id$addr >> 2] | 0);
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $6 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $6 | 0;
 }
 return 0;
}

function _stbi__get_marker($j) {
 $j = $j | 0;
 var $12 = 0, $2 = 0, $j$addr = 0, $retval = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 5 | 0;
 $j$addr = sp;
 $x = sp + 4 | 0;
 HEAP32[$j$addr >> 2] = $j;
 $2 = HEAP32[$j$addr >> 2] | 0;
 if ((HEAPU8[(HEAP32[$j$addr >> 2] | 0) + 18372 >> 0] | 0 | 0) != 255) {
  HEAP8[$x >> 0] = HEAP8[$2 + 18372 >> 0] | 0;
  HEAP8[(HEAP32[$j$addr >> 2] | 0) + 18372 >> 0] = -1;
  HEAP8[$retval >> 0] = HEAP8[$x >> 0] | 0;
  $12 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 HEAP8[$x >> 0] = _stbi__get8(HEAP32[$2 >> 2] | 0) | 0;
 if ((HEAPU8[$x >> 0] | 0 | 0) != 255) {
  HEAP8[$retval >> 0] = -1;
  $12 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 while (1) {
  if ((HEAPU8[$x >> 0] | 0 | 0) != 255) break;
  HEAP8[$x >> 0] = _stbi__get8(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) | 0;
 }
 HEAP8[$retval >> 0] = HEAP8[$x >> 0] | 0;
 $12 = HEAP8[$retval >> 0] | 0;
 STACKTOP = sp;
 return $12 | 0;
}

function __sfetch_pool_item_at($pool, $slot_id) {
 $pool = $pool | 0;
 $slot_id = $slot_id | 0;
 var $pool$addr = 0, $slot_id$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp + 8 | 0;
 $slot_id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(41933, 25510, 1440, 41978);
 if (!(HEAP8[(HEAP32[$pool$addr >> 2] | 0) + 20 >> 0] & 1)) ___assert_fail(41933, 25510, 1440, 41978);
 HEAP32[$slot_index >> 2] = __sfetch_slot_index(HEAP32[$slot_id$addr >> 2] | 0) | 0;
 if ((HEAP32[$slot_index >> 2] | 0) >>> 0 <= 0) ___assert_fail(30109, 25510, 1442, 41978);
 if ((HEAP32[$slot_index >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$pool$addr >> 2] >> 2] | 0) >>> 0) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 1232 | 0) | 0;
 } else ___assert_fail(30109, 25510, 1442, 41978);
 return 0;
}

function __ZNK12_GLOBAL__N_110StringView10startsWithES0_($this, $Str) {
 $this = $this | 0;
 $Str = $Str | 0;
 var $__first1$addr$0$i$i = 0, $__first2$addr$0$i$i = 0, $call = 0, $call3 = 0, $call4 = 0, $retval$0 = 0;
 $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($Str) | 0;
 L1 : do if ($call >>> 0 > (__ZNK12_GLOBAL__N_110StringView4sizeEv($this) | 0) >>> 0) $retval$0 = 0; else {
  $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Str) | 0;
  $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Str) | 0;
  $__first1$addr$0$i$i = $call3;
  $__first2$addr$0$i$i = __ZNK12_GLOBAL__N_110StringView5beginEv($this) | 0;
  while (1) {
   if (($__first1$addr$0$i$i | 0) == ($call4 | 0)) {
    $retval$0 = 1;
    break L1;
   }
   if ((HEAP8[$__first1$addr$0$i$i >> 0] | 0) != (HEAP8[$__first2$addr$0$i$i >> 0] | 0)) {
    $retval$0 = 0;
    break L1;
   }
   $__first1$addr$0$i$i = $__first1$addr$0$i$i + 1 | 0;
   $__first2$addr$0$i$i = $__first2$addr$0$i$i + 1 | 0;
  }
 } while (0);
 return $retval$0 | 0;
}

function __sfetch_emsc_failed_buffer_too_small($slot_id) {
 $slot_id = $slot_id | 0;
 var $ctx = 0, $item = 0, $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $slot_id$addr = sp + 8 | 0;
 $ctx = sp + 4 | 0;
 $item = sp;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 HEAP32[$ctx >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$ctx >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$ctx >> 2] | 0) + 1 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$item >> 2] = __sfetch_pool_item_lookup((HEAP32[$ctx >> 2] | 0) + 24 | 0, HEAP32[$slot_id$addr >> 2] | 0) | 0;
 if (!(HEAP32[$item >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$item >> 2] | 0) + 32 + 8 >> 2] = 3;
 HEAP8[(HEAP32[$item >> 2] | 0) + 32 + 12 >> 0] = 1;
 HEAP8[(HEAP32[$item >> 2] | 0) + 32 + 13 >> 0] = 1;
 __sfetch_ring_enqueue((HEAP32[$ctx >> 2] | 0) + 48 + ((HEAP32[(HEAP32[$item >> 2] | 0) + 8 >> 2] | 0) * 76 | 0) + 52 | 0, HEAP32[$slot_id$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $11 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $11 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_($call, $0, $tmpcast$byval_copy, $11);
 STACKTOP = sp;
 return $call | 0;
}

function _sg_apply_scissor_rect($x, $y, $width, $height, $origin_top_left) {
 $x = $x | 0;
 $y = $y | 0;
 $width = $width | 0;
 $height = $height | 0;
 $origin_top_left = $origin_top_left | 0;
 var $height$addr = 0, $origin_top_left$addr = 0, $width$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $width$addr = sp + 4 | 0;
 $height$addr = sp;
 $origin_top_left$addr = sp + 16 | 0;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP8[$origin_top_left$addr >> 0] = $origin_top_left & 1;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14823, 22591);
 if (!(HEAP8[2164244] & 1)) {
  STACKTOP = sp;
  return;
 }
 __sg_apply_scissor_rect(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0, HEAP8[$origin_top_left$addr >> 0] & 1);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 if (HEAP8[$this + 12 >> 0] | 0) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52892);
  HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 }
 $1 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] & 127]($agg$tmp2, $1);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbi__refill_buffer($s) {
 $s = $s | 0;
 var $8 = 0, $n = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $n = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$n >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 >> 2] & 15](HEAP32[(HEAP32[$s$addr >> 2] | 0) + 28 >> 2] | 0, (HEAP32[$s$addr >> 2] | 0) + 40 | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 36 >> 2] | 0) | 0;
 $8 = HEAP32[$s$addr >> 2] | 0;
 if (!(HEAP32[$n >> 2] | 0)) {
  HEAP32[$8 + 32 >> 2] = 0;
  HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] = (HEAP32[$s$addr >> 2] | 0) + 40;
  HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] = (HEAP32[$s$addr >> 2] | 0) + 40 + 1;
  HEAP8[HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] = $8 + 40;
  HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] = (HEAP32[$s$addr >> 2] | 0) + 40 + (HEAP32[$n >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $agg$tmp2$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56672);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 52155);
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$agg$tmp2$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp2$byval_copy);
 STACKTOP = sp;
 return;
}

function _sg_apply_viewport($x, $y, $width, $height, $origin_top_left) {
 $x = $x | 0;
 $y = $y | 0;
 $width = $width | 0;
 $height = $height | 0;
 $origin_top_left = $origin_top_left | 0;
 var $height$addr = 0, $origin_top_left$addr = 0, $width$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $width$addr = sp + 4 | 0;
 $height$addr = sp;
 $origin_top_left$addr = sp + 16 | 0;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP8[$origin_top_left$addr >> 0] = $origin_top_left & 1;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14809, 22573);
 if (!(HEAP8[2164244] & 1)) {
  STACKTOP = sp;
  return;
 }
 __sg_apply_viewport(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0, HEAP8[$origin_top_left$addr >> 0] & 1);
 STACKTOP = sp;
 return;
}

function __sg_pixelformat_bytesize($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 switch (HEAP32[$fmt$addr >> 2] | 0) {
 case 5:
 case 4:
 case 3:
 case 2:
  {
   HEAP32[$retval >> 2] = 1;
   break;
  }
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
 case 8:
 case 7:
 case 6:
  {
   HEAP32[$retval >> 2] = 2;
   break;
  }
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
  {
   HEAP32[$retval >> 2] = 8;
   break;
  }
 case 40:
 case 39:
 case 38:
  {
   HEAP32[$retval >> 2] = 16;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 3954, 41236);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $Ret = $this + 8 | 0;
 $0 = HEAP32[$Ret >> 2] | 0;
 if ($0 | 0) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 127]($0, $S);
  if (!(__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$Ret >> 2] | 0, $S) | 0)) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52157);
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
  }
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function _stbtt__cff_skip_operand($b) {
 $b = $b | 0;
 var $3 = 0, $b$addr = 0, $b0 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $b$addr = sp + 8 | 0;
 $v = sp + 4 | 0;
 $b0 = sp;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$b0 >> 2] = (_stbtt__buf_peek8(HEAP32[$b$addr >> 2] | 0) | 0) & 255;
 if ((HEAP32[$b0 >> 2] | 0) < 28) ___assert_fail(44375, 44131, 1147, 44384);
 $3 = HEAP32[$b$addr >> 2] | 0;
 if ((HEAP32[$b0 >> 2] | 0) != 30) {
  _stbtt__cff_int($3) | 0;
  STACKTOP = sp;
  return;
 }
 _stbtt__buf_skip($3, 1);
 while (1) {
  if ((HEAP32[(HEAP32[$b$addr >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] | 0)) {
   label = 10;
   break;
  }
  HEAP32[$v >> 2] = (_stbtt__buf_get8(HEAP32[$b$addr >> 2] | 0) | 0) & 255;
  if ((HEAP32[$v >> 2] & 15 | 0) == 15) {
   label = 10;
   break;
  }
  if ((HEAP32[$v >> 2] >> 4 | 0) == 15) {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) {
  STACKTOP = sp;
  return;
 }
}

function __ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tmpcast$byval_copy = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55118);
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp2;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp2 + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbtt_setvertex($v, $type, $x, $y, $cx, $cy) {
 $v = $v | 0;
 $type = $type | 0;
 $x = $x | 0;
 $y = $y | 0;
 $cx = $cx | 0;
 $cy = $cy | 0;
 var $cx$addr = 0, $cy$addr = 0, $type$addr = 0, $v$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $v$addr = sp + 16 | 0;
 $type$addr = sp + 20 | 0;
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $cx$addr = sp + 4 | 0;
 $cy$addr = sp;
 HEAP32[$v$addr >> 2] = $v;
 HEAP8[$type$addr >> 0] = $type;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$cx$addr >> 2] = $cx;
 HEAP32[$cy$addr >> 2] = $cy;
 HEAP8[(HEAP32[$v$addr >> 2] | 0) + 12 >> 0] = HEAP8[$type$addr >> 0] | 0;
 HEAP16[HEAP32[$v$addr >> 2] >> 1] = HEAP32[$x$addr >> 2];
 HEAP16[(HEAP32[$v$addr >> 2] | 0) + 2 >> 1] = HEAP32[$y$addr >> 2];
 HEAP16[(HEAP32[$v$addr >> 2] | 0) + 4 >> 1] = HEAP32[$cx$addr >> 2];
 HEAP16[(HEAP32[$v$addr >> 2] | 0) + 6 >> 1] = HEAP32[$cy$addr >> 2];
 STACKTOP = sp;
 return;
}

function __saudio_stream_callback($buffer, $num_frames, $num_channels) {
 $buffer = $buffer | 0;
 $num_frames = $num_frames | 0;
 $num_channels = $num_channels | 0;
 var $buffer$addr = 0, $num_channels$addr = 0, $num_frames$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buffer$addr = sp + 8 | 0;
 $num_frames$addr = sp + 4 | 0;
 $num_channels$addr = sp;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$num_frames$addr >> 2] = $num_frames;
 HEAP32[$num_channels$addr >> 2] = $num_channels;
 if (HEAP32[544581] | 0) {
  FUNCTION_TABLE_viii[HEAP32[2178324 >> 2] & 3](HEAP32[$buffer$addr >> 2] | 0, HEAP32[$num_frames$addr >> 2] | 0, HEAP32[$num_channels$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[544582] | 0)) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_viiii[HEAP32[2178328 >> 2] & 3](HEAP32[$buffer$addr >> 2] | 0, HEAP32[$num_frames$addr >> 2] | 0, HEAP32[$num_channels$addr >> 2] | 0, HEAP32[544583] | 0);
 STACKTOP = sp;
 return;
}

function __sg_buffer_common_init($cmn, $desc) {
 $cmn = $cmn | 0;
 $desc = $desc | 0;
 var $cmn$addr = 0, $desc$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cmn$addr = sp + 4 | 0;
 $desc$addr = sp;
 HEAP32[$cmn$addr >> 2] = $cmn;
 HEAP32[$desc$addr >> 2] = $desc;
 HEAP32[HEAP32[$cmn$addr >> 2] >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP8[(HEAP32[$cmn$addr >> 2] | 0) + 8 >> 0] = 0;
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 24 >> 2] = 0;
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 28 >> 2] = (HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 16 >> 2] | 0) == 1 ? 1 : 2;
 HEAP32[(HEAP32[$cmn$addr >> 2] | 0) + 32 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __sfetch_ring_count($rb) {
 $rb = $rb | 0;
 var $8 = 0, $9 = 0, $count = 0, $rb$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rb$addr = sp + 4 | 0;
 $count = sp;
 HEAP32[$rb$addr >> 2] = $rb;
 if (!(HEAP32[$rb$addr >> 2] | 0)) ___assert_fail(41999, 25510, 1288, 43633);
 if (!(HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(41999, 25510, 1288, 43633);
 $8 = HEAP32[HEAP32[$rb$addr >> 2] >> 2] | 0;
 $9 = HEAP32[$rb$addr >> 2] | 0;
 if ((HEAP32[HEAP32[$rb$addr >> 2] >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0) HEAP32[$count >> 2] = $8 - (HEAP32[$9 + 4 >> 2] | 0); else HEAP32[$count >> 2] = $8 + (HEAP32[$9 + 8 >> 2] | 0) - (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] | 0);
 if ((HEAP32[$count >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 8 >> 2] | 0) >>> 0) {
  STACKTOP = sp;
  return HEAP32[$count >> 2] | 0;
 } else ___assert_fail(43652, 25510, 1296, 43633);
 return 0;
}

function _fons__decutf8($state, $codep, $byte) {
 $state = $state | 0;
 $codep = $codep | 0;
 $byte = $byte | 0;
 var $byte$addr = 0, $codep$addr = 0, $cond = 0, $state$addr = 0, $type = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $state$addr = sp + 12 | 0;
 $codep$addr = sp + 8 | 0;
 $byte$addr = sp + 4 | 0;
 $type = sp;
 HEAP32[$state$addr >> 2] = $state;
 HEAP32[$codep$addr >> 2] = $codep;
 HEAP32[$byte$addr >> 2] = $byte;
 HEAP32[$type >> 2] = HEAPU8[624 + (HEAP32[$byte$addr >> 2] | 0) >> 0];
 if (HEAP32[HEAP32[$state$addr >> 2] >> 2] | 0) $cond = HEAP32[$byte$addr >> 2] & 63 | HEAP32[HEAP32[$codep$addr >> 2] >> 2] << 6; else $cond = 255 >> HEAP32[$type >> 2] & HEAP32[$byte$addr >> 2];
 HEAP32[HEAP32[$codep$addr >> 2] >> 2] = $cond;
 HEAP32[HEAP32[$state$addr >> 2] >> 2] = HEAPU8[624 + (256 + (HEAP32[HEAP32[$state$addr >> 2] >> 2] | 0) + (HEAP32[$type >> 2] | 0)) >> 0];
 STACKTOP = sp;
 return HEAP32[HEAP32[$state$addr >> 2] >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) {
 $this = $this | 0;
 var $CVR = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $CVR = sp;
 HEAP32[$CVR >> 2] = 0;
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 114) | 0) __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR, 4);
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 86) | 0) __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR, 2);
 if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 75) | 0) __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR, 1);
 STACKTOP = sp;
 return HEAP32[$CVR >> 2] | 0;
}

function _sg_update_image($img_id, $data) {
 $img_id = $img_id | 0;
 $data = $data | 0;
 var $data$addr = 0, $img = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $data$addr = sp + 4 | 0;
 $img = sp;
 HEAP32[$data$addr >> 2] = $data;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 15071, 23267);
 HEAP32[$img >> 2] = __sg_lookup_image(2164252, HEAP32[$img_id >> 2] | 0) | 0;
 if (!(HEAP32[$img >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$img >> 2] | 0) + 8 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 if (!(__sg_validate_update_image(HEAP32[$img >> 2] | 0, HEAP32[$data$addr >> 2] | 0) | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$img >> 2] | 0) + 12 + 64 >> 2] | 0) == (HEAP32[541057] | 0)) ___assert_fail(23283, 21600, 15075, 23267);
 __sg_update_image(HEAP32[$img >> 2] | 0, HEAP32[$data$addr >> 2] | 0);
 HEAP32[(HEAP32[$img >> 2] | 0) + 12 + 64 >> 2] = HEAP32[541057];
 STACKTOP = sp;
 return;
}

function __sg_uniform_size($type, $count) {
 $type = $type | 0;
 $count = $count | 0;
 var $count$addr = 0, $retval = 0, $type$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $type$addr = sp + 4 | 0;
 $count$addr = sp;
 HEAP32[$type$addr >> 2] = $type;
 HEAP32[$count$addr >> 2] = $count;
 switch (HEAP32[$type$addr >> 2] | 0) {
 case 0:
  {
   HEAP32[$retval >> 2] = 0;
   break;
  }
 case 1:
  {
   HEAP32[$retval >> 2] = HEAP32[$count$addr >> 2] << 2;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = HEAP32[$count$addr >> 2] << 3;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = (HEAP32[$count$addr >> 2] | 0) * 12;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = HEAP32[$count$addr >> 2] << 4;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = HEAP32[$count$addr >> 2] << 6;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 3849, 37695);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __Z21PerpendicularDistanceRK8DrPointFS1_S1_($pt, $line_start, $line_end) {
 $pt = $pt | 0;
 $line_start = $line_start | 0;
 $line_end = $line_end | 0;
 var $1 = 0.0, $3 = 0.0, $4 = 0.0, $add12 = 0.0, $dx$0 = 0.0, $dy$0 = 0.0, $sqrt = 0.0, $sub = 0.0, $sub10 = 0.0, $sub15 = 0.0, $sub16 = 0.0, $sub3 = 0.0, $sub7 = 0.0;
 $1 = +HEAPF64[$line_start >> 3];
 $sub = +HEAPF64[$line_end >> 3] - $1;
 $3 = +HEAPF64[$line_start + 8 >> 3];
 $sub3 = +HEAPF64[$line_end + 8 >> 3] - $3;
 $sqrt = +Math_sqrt(+($sub * $sub + $sub3 * $sub3));
 $4 = +Math_abs(+$sqrt);
 if ($sqrt != $sqrt | 0.0 != 0.0 | $sqrt == 0.0) {
  $dx$0 = $sub;
  $dy$0 = $sub3;
 } else {
  $dx$0 = $sub / $4;
  $dy$0 = $sub3 / $4;
 }
 $sub7 = +HEAPF64[$pt >> 3] - $1;
 $sub10 = +HEAPF64[$pt + 8 >> 3] - $3;
 $add12 = $dx$0 * $sub7 + $dy$0 * $sub10;
 $sub15 = $sub7 - $dx$0 * $add12;
 $sub16 = $sub10 - $dy$0 * $add12;
 return +(+Math_abs(+(+Math_sqrt(+($sub15 * $sub15 + $sub16 * $sub16)))));
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEEC2EmmS9_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 357913941) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap * 12 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 12 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 12 | 0);
 return;
}

function __ZN13TPPLPartition9NormalizeERK9TPPLPoint($agg$result, $this, $p) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $p = $p | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $ref$tmp = sp;
 $0 = +HEAPF64[$p >> 3];
 $1 = +HEAPF64[$p + 8 >> 3];
 $2 = +Math_sqrt(+($0 * $0 + $1 * $1));
 if ($2 != 0.0) {
  __ZNK9TPPLPointdvEd($ref$tmp, $p, $2);
  HEAP32[$agg$result >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$ref$tmp + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$ref$tmp + 16 >> 2];
  HEAP32[$agg$result + 20 >> 2] = HEAP32[$ref$tmp + 20 >> 2];
 } else {
  HEAP32[$agg$result >> 2] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
  HEAP32[$agg$result + 8 >> 2] = 0;
  HEAP32[$agg$result + 12 >> 2] = 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($LHS, $RHS) {
 $LHS = $LHS | 0;
 $RHS = $RHS | 0;
 var $2 = 0, $__first1$addr$0$i$i = 0, $__first2$addr$0$i$i = 0, $call = 0, $call2 = 0, $call3 = 0;
 $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($LHS) | 0;
 L1 : do if (($call | 0) == (__ZNK12_GLOBAL__N_110StringView4sizeEv($RHS) | 0)) {
  $call2 = __ZNK12_GLOBAL__N_110StringView5beginEv($LHS) | 0;
  $call3 = __ZNK12_GLOBAL__N_110StringView3endEv($LHS) | 0;
  $__first1$addr$0$i$i = $call2;
  $__first2$addr$0$i$i = __ZNK12_GLOBAL__N_110StringView5beginEv($RHS) | 0;
  while (1) {
   if (($__first1$addr$0$i$i | 0) == ($call3 | 0)) {
    $2 = 1;
    break L1;
   }
   if ((HEAP8[$__first1$addr$0$i$i >> 0] | 0) != (HEAP8[$__first2$addr$0$i$i >> 0] | 0)) {
    $2 = 0;
    break L1;
   }
   $__first1$addr$0$i$i = $__first1$addr$0$i$i + 1 | 0;
   $__first2$addr$0$i$i = $__first2$addr$0$i$i + 1 | 0;
  }
 } else $2 = 0; while (0);
 return $2 | 0;
}

function _stbi__fill_bits($z) {
 $z = $z | 0;
 var $code_buffer3 = 0, $conv = 0, $num_bits4 = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $z$addr = sp;
 HEAP32[$z$addr >> 2] = $z;
 while (1) {
  if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2] | 0) >>> 0 >= 1 << HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] >>> 0) {
   label = 3;
   break;
  }
  $conv = (_stbi__zget8(HEAP32[$z$addr >> 2] | 0) | 0) & 255;
  $code_buffer3 = (HEAP32[$z$addr >> 2] | 0) + 12 | 0;
  HEAP32[$code_buffer3 >> 2] = HEAP32[$code_buffer3 >> 2] | $conv << HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2];
  $num_bits4 = (HEAP32[$z$addr >> 2] | 0) + 8 | 0;
  HEAP32[$num_bits4 >> 2] = (HEAP32[$num_bits4 >> 2] | 0) + 8;
  if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0) > 24) {
   label = 5;
   break;
  }
 }
 if ((label | 0) == 3) ___assert_fail(48880, 47433, 3963, 48917); else if ((label | 0) == 5) {
  STACKTOP = sp;
  return;
 }
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $2 = 0, $3 = 0, $add14 = 0, $cmp1 = 0, $cmp11 = 0, $mul = 0.0, $mul10 = 0.0, $n$addr$0 = 0, $sub4 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $mul = $x * 8988465674311579538646525.0e283;
  $cmp1 = ($n | 0) > 2046;
  $sub4 = $n + -2046 | 0;
  $n$addr$0 = $cmp1 ? (($sub4 | 0) < 1023 ? $sub4 : 1023) : $n + -1023 | 0;
  $y$0 = $cmp1 ? $mul * 8988465674311579538646525.0e283 : $mul;
 } else if (($n | 0) < -1022) {
  $mul10 = $x * 2.2250738585072014e-308;
  $cmp11 = ($n | 0) < -2044;
  $add14 = $n + 2044 | 0;
  $n$addr$0 = $cmp11 ? (($add14 | 0) > -1022 ? $add14 : -1022) : $n + 1022 | 0;
  $y$0 = $cmp11 ? $mul10 * 2.2250738585072014e-308 : $mul10;
 } else {
  $n$addr$0 = $n;
  $y$0 = $x;
 }
 $2 = _bitshift64Shl($n$addr$0 + 1023 | 0, 0, 52) | 0;
 $3 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $3;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function _stbi__pic_is4($s, $str) {
 $s = $s | 0;
 $str = $str | 0;
 var $6 = 0, $conv = 0, $i = 0, $retval = 0, $s$addr = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $s$addr = sp + 8 | 0;
 $str$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$str$addr >> 2] = $str;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 4) {
   label = 6;
   break;
  }
  $conv = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  if (($conv | 0) != (HEAPU8[(HEAP32[$str$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0 | 0)) {
   label = 4;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) {
  HEAP32[$retval >> 2] = 0;
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 } else if ((label | 0) == 6) {
  HEAP32[$retval >> 2] = 1;
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 }
 return 0;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $conv = 0, $conv5 = 0, $retval$0 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 $conv = $_c & 255;
 HEAP8[$c >> 0] = $conv;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $2 = HEAP32[$wend >> 2] | 0;
  label = 4;
 } else $retval$0 = -1; else {
  $2 = $0;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $wpos = $f + 20 | 0;
  $1 = HEAP32[$wpos >> 2] | 0;
  if ($1 >>> 0 < $2 >>> 0) {
   $conv5 = $_c & 255;
   if (($conv5 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
    HEAP32[$wpos >> 2] = $1 + 1;
    HEAP8[$1 >> 0] = $conv;
    $retval$0 = $conv5;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($this, $Lit) {
 $this = $this | 0;
 $Lit = $Lit | 0;
 var $Tmp = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Tmp = sp;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Tmp, $this, 1);
 if (__ZNK12_GLOBAL__N_110StringView5emptyEv($Tmp) | 0) $retval$0 = 0; else if (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, 69) | 0) $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_($this, $Lit, $Tmp) | 0; else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $10 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE($call, $tmpcast$byval_copy, $10);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN8DrBitmapC2Eii13Bitmap_Format($this, $width_, $height_, $desired_format) {
 $this = $this | 0;
 $width_ = $width_ | 0;
 $height_ = $height_ | 0;
 $desired_format = $desired_format | 0;
 var $1 = 0, $3 = 0, $__n$addr$0$i$i$i$i = 0, $agg$tmp1$sroa$0$0$i$i$i = 0, $data = 0, $mul = 0;
 __ZN8DrBitmapC2E13Bitmap_Format($this, $desired_format);
 HEAP32[$this + 8 >> 2] = $width_;
 HEAP32[$this + 12 >> 2] = $height_;
 $data = $this + 16 | 0;
 $mul = Math_imul($height_, $width_) | 0;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($data, Math_imul($mul, HEAP32[$this + 4 >> 2] | 0) | 0);
 $1 = HEAP32[$data >> 2] | 0;
 $__n$addr$0$i$i$i$i = (HEAP32[$this + 20 >> 2] | 0) - $1 | 0;
 $agg$tmp1$sroa$0$0$i$i$i = $1;
 while (1) {
  if (($__n$addr$0$i$i$i$i | 0) <= 0) break;
  $3 = $agg$tmp1$sroa$0$0$i$i$i;
  HEAP8[$3 >> 0] = 0;
  $__n$addr$0$i$i$i$i = $__n$addr$0$i$i$i$i + -1 | 0;
  $agg$tmp1$sroa$0$0$i$i$i = $3 + 1 | 0;
 }
 return;
}

function _stbi__png_load($s, $x, $y, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $call = 0, $comp$addr = 0, $p = 0, $req_comp$addr = 0, $ri$addr = 0, $s$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $s$addr = sp + 40 | 0;
 $x$addr = sp + 36 | 0;
 $y$addr = sp + 32 | 0;
 $comp$addr = sp + 28 | 0;
 $req_comp$addr = sp + 24 | 0;
 $ri$addr = sp + 20 | 0;
 $p = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$ri$addr >> 2] = $ri;
 HEAP32[$p >> 2] = HEAP32[$s$addr >> 2];
 $call = _stbi__do_png($p, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorI8DrPointFNS_9allocatorIS2_EEEERNS3_IS5_EEEC2EmmS7_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 357913941) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap * 12 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 12 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 12 | 0);
 return;
}

function __sgl_alloc_pipeline() {
 var $4 = 0, $coerce = 0, $coerce4 = 0, $res = 0, $retval = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $retval = sp + 16 | 0;
 $res = sp + 12 | 0;
 $slot_index = sp + 8 | 0;
 $coerce = sp + 4 | 0;
 $coerce4 = sp;
 HEAP32[$slot_index >> 2] = __sgl_pool_alloc_index(2165732) | 0;
 if (HEAP32[$slot_index >> 2] | 0) {
  HEAP32[$coerce >> 2] = __sgl_make_pip_id(__sgl_slot_alloc(2165732, (HEAP32[541437] | 0) + (HEAP32[$slot_index >> 2] << 5) | 0, HEAP32[$slot_index >> 2] | 0) | 0) | 0;
  HEAP32[$res >> 2] = HEAP32[$coerce >> 2];
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[$coerce4 >> 2] = __sgl_make_pip_id(0) | 0;
  HEAP32[$res >> 2] = HEAP32[$coerce4 >> 2];
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _sfetch_shutdown() {
 var $7 = 0, $ctx = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx = sp + 4 | 0;
 $i = sp;
 HEAP32[$ctx >> 2] = __sfetch_ctx() | 0;
 if (!(HEAP32[$ctx >> 2] | 0)) ___assert_fail(25852, 25510, 2368, 25870);
 if (!(HEAP8[HEAP32[$ctx >> 2] >> 0] & 1)) ___assert_fail(25852, 25510, 2368, 25870);
 HEAP8[(HEAP32[$ctx >> 2] | 0) + 1 >> 0] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  $7 = HEAP32[$ctx >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$ctx >> 2] | 0) + 4 + 8 >> 2] | 0) >>> 0) break;
  if (HEAP8[$7 + 48 + ((HEAP32[$i >> 2] | 0) * 76 | 0) + 72 >> 0] & 1) __sfetch_channel_discard((HEAP32[$ctx >> 2] | 0) + 48 + ((HEAP32[$i >> 2] | 0) * 76 | 0) | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 __sfetch_pool_discard($7 + 24 | 0);
 HEAP8[HEAP32[$ctx >> 2] >> 0] = 0;
 _free(HEAP32[$ctx >> 2] | 0);
 HEAP32[544579] = 0;
 STACKTOP = sp;
 return;
}

function __sg_gl_cache_invalidate_buffer($buf) {
 $buf = $buf | 0;
 var $buf$addr = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$buf$addr >> 2] = $buf;
 if ((HEAP32[$buf$addr >> 2] | 0) == (HEAP32[541318] | 0)) {
  HEAP32[541318] = 0;
  _glBindBuffer(34962, 0);
 }
 if ((HEAP32[$buf$addr >> 2] | 0) == (HEAP32[541319] | 0)) {
  HEAP32[541319] = 0;
  _glBindBuffer(34963, 0);
 }
 if ((HEAP32[$buf$addr >> 2] | 0) == (HEAP32[541320] | 0)) HEAP32[541320] = 0;
 if ((HEAP32[$buf$addr >> 2] | 0) == (HEAP32[541321] | 0)) HEAP32[541321] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  if ((HEAP32[$buf$addr >> 2] | 0) == (HEAP32[2164952 + ((HEAP32[$i >> 2] | 0) * 20 | 0) + 16 >> 2] | 0)) HEAP32[2164952 + ((HEAP32[$i >> 2] | 0) * 20 | 0) + 16 >> 2] = 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0.0, $retval$0 = 0.0, $storemerge = 0, $x$addr$0 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 switch ($2 & 2047) {
 case 0:
  {
   if ($x != 0.0) {
    $call = +_frexp($x * 18446744073709551616.0, $e);
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
    $x$addr$0 = $call;
   } else {
    $storemerge = 0;
    $x$addr$0 = $x;
   }
   HEAP32[$e >> 2] = $storemerge;
   $retval$0 = $x$addr$0;
   break;
  }
 case 2047:
  {
   $retval$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = ($2 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$retval$0;
}

function __sg_context_at($p, $context_id) {
 $p = $p | 0;
 $context_id = $context_id | 0;
 var $context_id$addr = 0, $p$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp + 8 | 0;
 $context_id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$context_id$addr >> 2] = $context_id;
 if (!((HEAP32[$p$addr >> 2] | 0) != 0 & 0 != (HEAP32[$context_id$addr >> 2] | 0))) ___assert_fail(30314, 21600, 13002, 30349);
 HEAP32[$slot_index >> 2] = __sg_slot_index(HEAP32[$context_id$addr >> 2] | 0) | 0;
 if ((HEAP32[$slot_index >> 2] | 0) <= 0) ___assert_fail(30364, 21600, 13004, 30349);
 if ((HEAP32[$slot_index >> 2] | 0) < (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 80 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 116 >> 2] | 0) + (HEAP32[$slot_index >> 2] << 4) | 0;
 } else ___assert_fail(30364, 21600, 13004, 30349);
 return 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $10 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE($call, $tmpcast$byval_copy, $10);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __Z15getRoundedPixelRK8DrBitmapRK8DrPointF($agg$result, $bitmap, $at_point) {
 $agg$result = $agg$result | 0;
 $bitmap = $bitmap | 0;
 $at_point = $at_point | 0;
 var $call = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp + 8 | 0;
 $ref$tmp1 = sp + 4 | 0;
 $ref$tmp2 = sp;
 HEAP32[$ref$tmp >> 2] = ~~+_llvm_round_f64(+(+HEAPF64[$at_point >> 3]));
 HEAP32[$ref$tmp1 >> 2] = 0;
 HEAP32[$ref$tmp2 >> 2] = (HEAP32[$bitmap + 8 >> 2] | 0) + -1;
 $call = __ZN2Dr5ClampIiEET_RKS1_S3_S3_($ref$tmp, $ref$tmp1, $ref$tmp2) | 0;
 HEAP32[$ref$tmp >> 2] = ~~+_llvm_round_f64(+(+HEAPF64[$at_point + 8 >> 3]));
 HEAP32[$ref$tmp1 >> 2] = 0;
 HEAP32[$ref$tmp2 >> 2] = (HEAP32[$bitmap + 12 >> 2] | 0) + -1;
 __ZNK8DrBitmap8getPixelEii($agg$result, $bitmap, $call, __ZN2Dr5ClampIiEET_RKS1_S3_S3_($ref$tmp, $ref$tmp1, $ref$tmp2) | 0);
 STACKTOP = sp;
 return;
}

function __sgl_setup_pipeline_pool($desc) {
 $desc = $desc | 0;
 var $desc$addr = 0, $pool_byte_size = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp + 4 | 0;
 $pool_byte_size = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 23371, 2150, 41366);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 2] | 0) <= 0) ___assert_fail(41391, 23371, 2152, 41366);
 if ((HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 2] | 0) >= 65536) ___assert_fail(41391, 23371, 2152, 41366);
 __sgl_init_pool(2165732, HEAP32[(HEAP32[$desc$addr >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[$pool_byte_size >> 2] = HEAP32[541433] << 5;
 HEAP32[541437] = _malloc(HEAP32[$pool_byte_size >> 2] | 0) | 0;
 if (HEAP32[541437] | 0) {
  _memset(HEAP32[541437] | 0, 0, HEAP32[$pool_byte_size >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(41464, 23371, 2156, 41366);
}

function __ZNSt3__214__split_bufferI8DrBitmapRNS_9allocatorIS1_EEEC2EmmS4_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 153391689) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap * 28 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 28 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 28 | 0);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __sg_surface_pitch($fmt, $width, $height, $row_align) {
 $fmt = $fmt | 0;
 $width = $width | 0;
 $height = $height | 0;
 $row_align = $row_align | 0;
 var $2 = 0, $fmt$addr = 0, $height$addr = 0, $mul = 0, $num_rows = 0, $row_align$addr = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $fmt$addr = sp + 16 | 0;
 $width$addr = sp + 12 | 0;
 $height$addr = sp + 8 | 0;
 $row_align$addr = sp + 4 | 0;
 $num_rows = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$row_align$addr >> 2] = $row_align;
 HEAP32[$num_rows >> 2] = __sg_num_rows(HEAP32[$fmt$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 $2 = HEAP32[$num_rows >> 2] | 0;
 $mul = Math_imul($2, __sg_row_pitch(HEAP32[$fmt$addr >> 2] | 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$row_align$addr >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $mul | 0;
}

function __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEEC2EmmS4_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 97612893) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap * 44 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 44 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 44 | 0);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __sgl_make_pipeline($desc) {
 $desc = $desc | 0;
 var $2 = 0, $3 = 0, $desc$addr = 0, $pip_id = 0, $pip_id$byval_copy = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip_id$byval_copy = sp + 12 | 0;
 $retval = sp + 8 | 0;
 $desc$addr = sp + 4 | 0;
 $pip_id = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (!(HEAP32[$desc$addr >> 2] | 0)) ___assert_fail(21595, 23371, 2304, 41498);
 HEAP32[$pip_id >> 2] = __sgl_alloc_pipeline() | 0;
 if (HEAP32[$pip_id >> 2] | 0) {
  $2 = HEAP32[$desc$addr >> 2] | 0;
  HEAP32[$pip_id$byval_copy >> 2] = HEAP32[$pip_id >> 2];
  __sgl_init_pipeline($pip_id$byval_copy, $2);
  HEAP32[$retval >> 2] = HEAP32[$pip_id >> 2];
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else {
  _puts(41517) | 0;
  HEAP32[$retval >> 2] = HEAP32[$pip_id >> 2];
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0;
}

function _stbtt__buf_seek($b, $o) {
 $b = $b | 0;
 $o = $o | 0;
 var $11 = 0, $b$addr = 0, $cond = 0, $cursor = 0, $o$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $b$addr = sp + 4 | 0;
 $o$addr = sp;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$o$addr >> 2] = $o;
 if ((HEAP32[$o$addr >> 2] | 0) < 0 ? 1 : (HEAP32[$o$addr >> 2] | 0) > (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] | 0)) ___assert_fail(44212, 44131, 1078, 44236);
 if ((HEAP32[$o$addr >> 2] | 0) < 0 ? 1 : (HEAP32[$o$addr >> 2] | 0) > (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] | 0)) {
  $cond = HEAP32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] | 0;
  $11 = HEAP32[$b$addr >> 2] | 0;
  $cursor = $11 + 4 | 0;
  HEAP32[$cursor >> 2] = $cond;
  STACKTOP = sp;
  return;
 } else {
  $cond = HEAP32[$o$addr >> 2] | 0;
  $11 = HEAP32[$b$addr >> 2] | 0;
  $cursor = $11 + 4 | 0;
  HEAP32[$cursor >> 2] = $cond;
  STACKTOP = sp;
  return;
 }
}

function __sg_reset_image($img) {
 $img = $img | 0;
 var $1 = 0, $3 = 0, $img$addr = 0, $slot = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $img$addr = sp + 12 | 0;
 $slot = sp;
 HEAP32[$img$addr >> 2] = $img;
 if (HEAP32[$img$addr >> 2] | 0) {
  $1 = HEAP32[$img$addr >> 2] | 0;
  HEAP32[$slot >> 2] = HEAP32[$1 >> 2];
  HEAP32[$slot + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$slot + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  dest = HEAP32[$img$addr >> 2] | 0;
  stop = dest + 112 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $3 = HEAP32[$img$addr >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$slot >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$slot + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$slot + 8 >> 2];
  HEAP32[(HEAP32[$img$addr >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(22569, 21600, 12835, 38906);
}

function __sg_reset_buffer($buf) {
 $buf = $buf | 0;
 var $1 = 0, $3 = 0, $buf$addr = 0, $slot = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf$addr = sp + 12 | 0;
 $slot = sp;
 HEAP32[$buf$addr >> 2] = $buf;
 if (HEAP32[$buf$addr >> 2] | 0) {
  $1 = HEAP32[$buf$addr >> 2] | 0;
  HEAP32[$slot >> 2] = HEAP32[$1 >> 2];
  HEAP32[$slot + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$slot + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  dest = HEAP32[$buf$addr >> 2] | 0;
  stop = dest + 60 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $3 = HEAP32[$buf$addr >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$slot >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$slot + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$slot + 8 >> 2];
  HEAP32[(HEAP32[$buf$addr >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(29867, 21600, 12827, 38816);
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEES7_($this, $__f, $__l) {
 $this = $this | 0;
 $__f = $__f | 0;
 $__l = $__l | 0;
 var $0 = 0, $1 = 0, $4 = 0, $7 = 0, $8 = 0, $__next_$i = 0, $__value_$i$i$i = 0;
 $0 = HEAP32[$__f >> 2] | 0;
 $1 = HEAP32[$__l >> 2] | 0;
 L1 : do if (($0 | 0) != ($1 | 0)) {
  $__next_$i = (HEAP32[$1 >> 2] | 0) + 4 | 0;
  $4 = HEAP32[$0 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$__next_$i >> 2];
  HEAP32[HEAP32[$__next_$i >> 2] >> 2] = $4;
  $__value_$i$i$i = $this + 8 | 0;
  $7 = $0;
  while (1) {
   if (($7 | 0) == ($1 | 0)) break L1;
   $8 = HEAP32[$7 + 4 >> 2] | 0;
   HEAP32[$__f >> 2] = $8;
   HEAP32[$__value_$i$i$i >> 2] = (HEAP32[$__value_$i$i$i >> 2] | 0) + -1;
   __ZN8TPPLPolyD2Ev($7 + 8 | 0);
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($7, 20);
   $7 = $8;
  }
 } while (0);
 return $1 | 0;
}

function _sgl_ortho($l, $r, $b, $t, $n, $f) {
 $l = +$l;
 $r = +$r;
 $b = +$b;
 $t = +$t;
 $n = +$n;
 $f = +$f;
 var $b$addr = 0, $call = 0, $f$addr = 0, $l$addr = 0, $n$addr = 0, $r$addr = 0, $t$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $l$addr = sp + 20 | 0;
 $r$addr = sp + 16 | 0;
 $b$addr = sp + 12 | 0;
 $t$addr = sp + 8 | 0;
 $n$addr = sp + 4 | 0;
 $f$addr = sp;
 HEAPF32[$l$addr >> 2] = $l;
 HEAPF32[$r$addr >> 2] = $r;
 HEAPF32[$b$addr >> 2] = $b;
 HEAPF32[$t$addr >> 2] = $t;
 HEAPF32[$n$addr >> 2] = $n;
 HEAPF32[$f$addr >> 2] = $f;
 if (-1412584499 == (HEAP32[541358] | 0)) {
  HEAP8[2165537] = 1;
  $call = __sgl_matrix() | 0;
  __sgl_ortho($call, +HEAPF32[$l$addr >> 2], +HEAPF32[$r$addr >> 2], +HEAPF32[$b$addr >> 2], +HEAPF32[$t$addr >> 2], +HEAPF32[$n$addr >> 2], +HEAPF32[$f$addr >> 2]);
  STACKTOP = sp;
  return;
 } else ___assert_fail(23666, 23371, 3195, 24075);
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 $1 = $args1;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, $0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEEC2EmmS4_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 268435455) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap << 4) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 4) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 4);
 return;
}

function __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEEC2EmmS4_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 536870911) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap << 3) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 3) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 3);
 return;
}

function __sg_gl_cache_invalidate_texture($tex) {
 $tex = $tex | 0;
 var $i = 0, $slot = 0, $tex$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tex$addr = sp + 8 | 0;
 $i = sp + 4 | 0;
 $slot = sp;
 HEAP32[$tex$addr >> 2] = $tex;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 12) break;
  HEAP32[$slot >> 2] = 2165292 + (HEAP32[$i >> 2] << 3);
  if ((HEAP32[$tex$addr >> 2] | 0) == (HEAP32[(HEAP32[$slot >> 2] | 0) + 4 >> 2] | 0)) {
   __sg_gl_cache_active_texture(33984 + (HEAP32[$i >> 2] | 0) | 0);
   _glBindTexture(HEAP32[HEAP32[$slot >> 2] >> 2] | 0, 0);
   HEAP32[HEAP32[$slot >> 2] >> 2] = 0;
   HEAP32[(HEAP32[$slot >> 2] | 0) + 4 >> 2] = 0;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((HEAP32[$tex$addr >> 2] | 0) != (HEAP32[541348] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[541347] = 0;
 HEAP32[541348] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEEC2EmmS4_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 268435455) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap << 4) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 4) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 4);
 return;
}

function _strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $0 = 0, $call = 0, $retval$0 = 0;
 $0 = HEAP8[$n >> 0] | 0;
 do if (!($0 << 24 >> 24)) $retval$0 = $h; else {
  $call = _strchr($h, $0 << 24 >> 24) | 0;
  if (!$call) $retval$0 = 0; else if (!(HEAP8[$n + 1 >> 0] | 0)) $retval$0 = $call; else if (!(HEAP8[$call + 1 >> 0] | 0)) $retval$0 = 0; else {
   if (!(HEAP8[$n + 2 >> 0] | 0)) {
    $retval$0 = _twobyte_strstr($call, $n) | 0;
    break;
   }
   if (!(HEAP8[$call + 2 >> 0] | 0)) $retval$0 = 0; else {
    if (!(HEAP8[$n + 3 >> 0] | 0)) {
     $retval$0 = _threebyte_strstr($call, $n) | 0;
     break;
    }
    if (!(HEAP8[$call + 3 >> 0] | 0)) $retval$0 = 0; else if (!(HEAP8[$n + 4 >> 0] | 0)) {
     $retval$0 = _fourbyte_strstr($call, $n) | 0;
     break;
    } else {
     $retval$0 = _twoway_strstr($call, $n) | 0;
     break;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __sg_pass_at($p, $pass_id) {
 $p = $p | 0;
 $pass_id = $pass_id | 0;
 var $p$addr = 0, $pass_id$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp + 8 | 0;
 $pass_id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$pass_id$addr >> 2] = $pass_id;
 if (!((HEAP32[$p$addr >> 2] | 0) != 0 & 0 != (HEAP32[$pass_id$addr >> 2] | 0))) ___assert_fail(39572, 21600, 12995, 39604);
 HEAP32[$slot_index >> 2] = __sg_slot_index(HEAP32[$pass_id$addr >> 2] | 0) | 0;
 if ((HEAP32[$slot_index >> 2] | 0) <= 0) ___assert_fail(39616, 21600, 12997, 39604);
 if ((HEAP32[$slot_index >> 2] | 0) < (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 64 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 112 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 120 | 0) | 0;
 } else ___assert_fail(39616, 21600, 12997, 39604);
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($this, $Kind) {
 $this = $this | 0;
 $Kind = $Kind | 0;
 var $E = 0, $call2 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $E = sp;
 $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) | 0) | 0;
 HEAP32[$E >> 2] = $call2;
 if (!$call2) $retval$0 = 0; else $retval$0 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this, $Kind, $E) | 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $__sz;
  $__p$0 = $this;
 } else {
  $and$i$i = $__sz + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0, $__s, $__sz) | 0;
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $__sz | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __sg_pipeline_at($p, $pip_id) {
 $p = $p | 0;
 $pip_id = $pip_id | 0;
 var $p$addr = 0, $pip_id$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp + 8 | 0;
 $pip_id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$pip_id$addr >> 2] = $pip_id;
 if (!((HEAP32[$p$addr >> 2] | 0) != 0 & 0 != (HEAP32[$pip_id$addr >> 2] | 0))) ___assert_fail(39450, 21600, 12988, 39481);
 HEAP32[$slot_index >> 2] = __sg_slot_index(HEAP32[$pip_id$addr >> 2] | 0) | 0;
 if ((HEAP32[$slot_index >> 2] | 0) <= 0) ___assert_fail(39497, 21600, 12990, 39481);
 if ((HEAP32[$slot_index >> 2] | 0) < (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 48 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 108 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 472 | 0) | 0;
 } else ___assert_fail(39497, 21600, 12990, 39481);
 return 0;
}

function __sg_shader_at($p, $shd_id) {
 $p = $p | 0;
 $shd_id = $shd_id | 0;
 var $p$addr = 0, $shd_id$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp + 8 | 0;
 $shd_id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$shd_id$addr >> 2] = $shd_id;
 if (!((HEAP32[$p$addr >> 2] | 0) != 0 & 0 != (HEAP32[$shd_id$addr >> 2] | 0))) ___assert_fail(39328, 21600, 12981, 39359);
 HEAP32[$slot_index >> 2] = __sg_slot_index(HEAP32[$shd_id$addr >> 2] | 0) | 0;
 if ((HEAP32[$slot_index >> 2] | 0) <= 0) ___assert_fail(39373, 21600, 12983, 39359);
 if ((HEAP32[$slot_index >> 2] | 0) < (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 32 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 104 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 2176 | 0) | 0;
 } else ___assert_fail(39373, 21600, 12983, 39359);
 return 0;
}

function __ZNSt3__214__split_bufferImRNS_9allocatorImEEEC2EmmS3_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 1073741823) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap << 2) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 2);
 return;
}

function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EmmS3_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 1073741823) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap << 2) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 2);
 return;
}

function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 536870911) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $cond = __Znwm($__cap << 3) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 3) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 3);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($call, $0, $agg$tmp$byval_copy, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($call, $0, $agg$tmp$byval_copy, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __sg_image_at($p, $img_id) {
 $p = $p | 0;
 $img_id = $img_id | 0;
 var $img_id$addr = 0, $p$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp + 8 | 0;
 $img_id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$img_id$addr >> 2] = $img_id;
 if (!((HEAP32[$p$addr >> 2] | 0) != 0 & 0 != (HEAP32[$img_id$addr >> 2] | 0))) ___assert_fail(39210, 21600, 12974, 39241);
 HEAP32[$slot_index >> 2] = __sg_slot_index(HEAP32[$img_id$addr >> 2] | 0) | 0;
 if ((HEAP32[$slot_index >> 2] | 0) <= 0) ___assert_fail(39254, 21600, 12976, 39241);
 if ((HEAP32[$slot_index >> 2] | 0) < (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 16 >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 100 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 112 | 0) | 0;
 } else ___assert_fail(39254, 21600, 12976, 39241);
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($this, $ExprList_, $Type_, $InitList_, $IsGlobal_, $IsArray_) {
 $this = $this | 0;
 $ExprList_ = $ExprList_ | 0;
 $Type_ = $Type_ | 0;
 $InitList_ = $InitList_ | 0;
 $IsGlobal_ = $IsGlobal_ | 0;
 $IsArray_ = $IsArray_ | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 51, 1, 1, 1);
 HEAP32[$this >> 2] = 14344;
 $0 = $ExprList_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Type_;
 $10 = $InitList_;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $this + 20 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 HEAP8[$this + 28 >> 0] = $IsGlobal_ & 1;
 HEAP8[$this + 29 >> 0] = $IsArray_ & 1;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call, $agg$tmp$byval_copy, $0, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call, $agg$tmp$byval_copy, $0, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call, $agg$tmp$byval_copy, $0, $1);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 $1 = HEAP32[$args3 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call, $agg$tmp$byval_copy, $0, $1);
 STACKTOP = sp;
 return $call | 0;
}

function _stbi__at_eof($s) {
 $s = $s | 0;
 var $12 = 0, $retval = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $s$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 if (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 >> 2] | 0) {
  if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 + 8 >> 2] & 3](HEAP32[(HEAP32[$s$addr >> 2] | 0) + 28 >> 2] | 0) | 0)) {
   HEAP32[$retval >> 2] = 0;
   $12 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $12 | 0;
  }
  if (!(HEAP32[(HEAP32[$s$addr >> 2] | 0) + 32 >> 2] | 0)) {
   HEAP32[$retval >> 2] = 1;
   $12 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $12 | 0;
  }
 }
 HEAP32[$retval >> 2] = (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] | 0) >>> 0 & 1;
 $12 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $12 | 0;
}

function _stbi__copyval($channel, $dest, $src) {
 $channel = $channel | 0;
 $dest = $dest | 0;
 $src = $src | 0;
 var $channel$addr = 0, $dest$addr = 0, $i = 0, $mask = 0, $src$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $channel$addr = sp + 16 | 0;
 $dest$addr = sp + 12 | 0;
 $src$addr = sp + 8 | 0;
 $mask = sp + 4 | 0;
 $i = sp;
 HEAP32[$channel$addr >> 2] = $channel;
 HEAP32[$dest$addr >> 2] = $dest;
 HEAP32[$src$addr >> 2] = $src;
 HEAP32[$mask >> 2] = 128;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 4) break;
  if (HEAP32[$channel$addr >> 2] & HEAP32[$mask >> 2] | 0) HEAP8[(HEAP32[$dest$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = HEAP8[(HEAP32[$src$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  HEAP32[$mask >> 2] = HEAP32[$mask >> 2] >> 1;
 }
 STACKTOP = sp;
 return;
}

function __sapp_emsc_drop($i, $name) {
 $i = $i | 0;
 $name = $name | 0;
 var $7 = 0, $call = 0, $i$addr = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $i$addr = sp + 4 | 0;
 $name$addr = sp;
 HEAP32[$i$addr >> 2] = $i;
 HEAP32[$name$addr >> 2] = $name;
 if (HEAP8[58968] & 1 ^ 1 | 0 == (HEAP32[$name$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[14745] | 0) > (HEAP32[14743] | 0)) ___assert_fail(16432, 16477, 3806, 16546);
 if ((HEAP32[$i$addr >> 2] | 0) < 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$i$addr >> 2] | 0) >= (HEAP32[14745] | 0)) {
  STACKTOP = sp;
  return;
 }
 $7 = HEAP32[$name$addr >> 2] | 0;
 $call = __sapp_dropped_file_path_ptr(HEAP32[$i$addr >> 2] | 0) | 0;
 if (__sapp_strcpy($7, $call, HEAP32[14744] | 0) | 0) {
  STACKTOP = sp;
  return;
 }
 _puts(16562) | 0;
 HEAP32[14745] = 0;
 STACKTOP = sp;
 return;
}

function __sg_buffer_at($p, $buf_id) {
 $p = $p | 0;
 $buf_id = $buf_id | 0;
 var $buf_id$addr = 0, $p$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp + 8 | 0;
 $buf_id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$buf_id$addr >> 2] = $buf_id;
 if (!((HEAP32[$p$addr >> 2] | 0) != 0 & 0 != (HEAP32[$buf_id$addr >> 2] | 0))) ___assert_fail(39108, 21600, 12967, 39139);
 HEAP32[$slot_index >> 2] = __sg_slot_index(HEAP32[$buf_id$addr >> 2] | 0) | 0;
 if ((HEAP32[$slot_index >> 2] | 0) <= 0) ___assert_fail(39153, 21600, 12969, 39139);
 if ((HEAP32[$slot_index >> 2] | 0) < (HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return (HEAP32[(HEAP32[$p$addr >> 2] | 0) + 96 >> 2] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 60 | 0) | 0;
 } else ___assert_fail(39153, 21600, 12969, 39139);
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($agg$result, $this, $S) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $S = $S | 0;
 var $$in = 0, $0 = 0, $1 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $second$i$i = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 HEAP32[$agg$result >> 2] = $0;
 $second$i$i = $agg$result + 4 | 0;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 HEAP32[$second$i$i >> 2] = $1;
 $$in = $1;
 $7 = $0;
 while (1) {
  $call = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$in >> 2] | 0) + 12 >> 2] & 31]($$in, $S) | 0;
  if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call) | 0) << 24 >> 24 != 12) break;
  $5 = HEAP32[$call + 8 >> 2] | 0;
  HEAP32[$second$i$i >> 2] = $5;
  $6 = HEAP32[$call + 12 >> 2] | 0;
  $8 = ($6 | 0) < ($7 | 0) ? $6 : $7;
  HEAP32[$agg$result >> 2] = $8;
  $$in = $5;
  $7 = $8;
 }
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $6 = 0, $7 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 $1 = $this + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $agg$tmp;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 20 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __sg_lookup_pass($p, $pass_id) {
 $p = $p | 0;
 $pass_id = $pass_id | 0;
 var $8 = 0, $p$addr = 0, $pass = 0, $pass_id$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $p$addr = sp + 8 | 0;
 $pass_id$addr = sp + 4 | 0;
 $pass = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$pass_id$addr >> 2] = $pass_id;
 if (!(HEAP32[$p$addr >> 2] | 0)) ___assert_fail(28915, 21600, 13052, 39556);
 if (HEAP32[$pass_id$addr >> 2] | 0) {
  HEAP32[$pass >> 2] = __sg_pass_at(HEAP32[$p$addr >> 2] | 0, HEAP32[$pass_id$addr >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$pass >> 2] >> 2] | 0) == (HEAP32[$pass_id$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$pass >> 2];
   $8 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $8 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $8 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _stm_now() {
 var $10 = 0, $12 = 0, $5 = 0, $6 = 0, $call = 0.0, $js_now = 0, $mul = 0.0, $now = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $now = sp + 8 | 0;
 $js_now = sp;
 if ((HEAP32[15454] | 0) != -1412584499) ___assert_fail(26129, 26160, 234, 26230);
 $call = +_stm_js_perfnow();
 HEAPF64[$js_now >> 3] = $call - +HEAPF64[7728];
 if (+HEAPF64[$js_now >> 3] >= 0.0) {
  $mul = +HEAPF64[$js_now >> 3] * 1.0e6;
  $5 = +Math_abs($mul) >= 1.0 ? ($mul > 0.0 ? ~~+Math_min(+Math_floor($mul / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil(($mul - +(~~$mul >>> 0)) / 4294967296.0) >>> 0) : 0;
  $6 = $now;
  HEAP32[$6 >> 2] = ~~$mul >>> 0;
  HEAP32[$6 + 4 >> 2] = $5;
  $10 = $now;
  $12 = HEAP32[$10 >> 2] | 0;
  setTempRet0(HEAP32[$10 + 4 >> 2] | 0);
  STACKTOP = sp;
  return $12 | 0;
 } else ___assert_fail(26238, 26160, 245, 26230);
 return 0;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSC_SC_($this, $__parent, $__child, $__new_node) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__child = $__child | 0;
 $__new_node = $__new_node | 0;
 var $1 = 0, $4 = 0, $__value_$i$i$i = 0;
 HEAP32[$__new_node >> 2] = 0;
 HEAP32[$__new_node + 4 >> 2] = 0;
 HEAP32[$__new_node + 8 >> 2] = $__parent;
 HEAP32[$__child >> 2] = $__new_node;
 $1 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
 if (!$1) $4 = $__new_node; else {
  HEAP32[$this >> 2] = $1;
  $4 = HEAP32[$__child >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[$this + 4 >> 2] | 0, $4);
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = (HEAP32[$__value_$i$i$i >> 2] | 0) + 1;
 return;
}

function __sg_lookup_pipeline($p, $pip_id) {
 $p = $p | 0;
 $pip_id = $pip_id | 0;
 var $8 = 0, $p$addr = 0, $pip = 0, $pip_id$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $p$addr = sp + 8 | 0;
 $pip_id$addr = sp + 4 | 0;
 $pip = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$pip_id$addr >> 2] = $pip_id;
 if (!(HEAP32[$p$addr >> 2] | 0)) ___assert_fail(28915, 21600, 13041, 39430);
 if (HEAP32[$pip_id$addr >> 2] | 0) {
  HEAP32[$pip >> 2] = __sg_pipeline_at(HEAP32[$p$addr >> 2] | 0, HEAP32[$pip_id$addr >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$pip >> 2] >> 2] | 0) == (HEAP32[$pip_id$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$pip >> 2];
   $8 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $8 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $8 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = $args1;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($call, 0, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __sg_lookup_context($p, $ctx_id) {
 $p = $p | 0;
 $ctx_id = $ctx_id | 0;
 var $8 = 0, $ctx = 0, $ctx_id$addr = 0, $p$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $p$addr = sp + 8 | 0;
 $ctx_id$addr = sp + 4 | 0;
 $ctx = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$ctx_id$addr >> 2] = $ctx_id;
 if (!(HEAP32[$p$addr >> 2] | 0)) ___assert_fail(28915, 21600, 13063, 29848);
 if (HEAP32[$ctx_id$addr >> 2] | 0) {
  HEAP32[$ctx >> 2] = __sg_context_at(HEAP32[$p$addr >> 2] | 0, HEAP32[$ctx_id$addr >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$ctx >> 2] >> 2] | 0) == (HEAP32[$ctx_id$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$ctx >> 2];
   $8 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $8 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $8 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _stbi__start_mem($s, $buffer, $len) {
 $s = $s | 0;
 $buffer = $buffer | 0;
 $len = $len | 0;
 var $2 = 0, $add$ptr = 0, $buffer$addr = 0, $len$addr = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 8 | 0;
 $buffer$addr = sp + 4 | 0;
 $len$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$len$addr >> 2] = $len;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 32 >> 2] = 0;
 $2 = HEAP32[$buffer$addr >> 2] | 0;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 176 >> 2] = $2;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] = $2;
 $add$ptr = (HEAP32[$buffer$addr >> 2] | 0) + (HEAP32[$len$addr >> 2] | 0) | 0;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 180 >> 2] = $add$ptr;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] = $add$ptr;
 STACKTOP = sp;
 return;
}

function __sg_lookup_shader($p, $shd_id) {
 $p = $p | 0;
 $shd_id = $shd_id | 0;
 var $8 = 0, $p$addr = 0, $retval = 0, $shd = 0, $shd_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $p$addr = sp + 8 | 0;
 $shd_id$addr = sp + 4 | 0;
 $shd = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$shd_id$addr >> 2] = $shd_id;
 if (!(HEAP32[$p$addr >> 2] | 0)) ___assert_fail(28915, 21600, 13030, 39310);
 if (HEAP32[$shd_id$addr >> 2] | 0) {
  HEAP32[$shd >> 2] = __sg_shader_at(HEAP32[$p$addr >> 2] | 0, HEAP32[$shd_id$addr >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$shd >> 2] >> 2] | 0) == (HEAP32[$shd_id$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$shd >> 2];
   $8 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $8 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $8 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _stbi__zreceive($z, $n) {
 $z = $z | 0;
 $n = $n | 0;
 var $code_buffer1 = 0, $k = 0, $n$addr = 0, $num_bits2 = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $z$addr = sp + 8 | 0;
 $n$addr = sp + 4 | 0;
 $k = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$n$addr >> 2] = $n;
 if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0) < (HEAP32[$n$addr >> 2] | 0)) _stbi__fill_bits(HEAP32[$z$addr >> 2] | 0);
 HEAP32[$k >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2] & (1 << HEAP32[$n$addr >> 2]) - 1;
 $code_buffer1 = (HEAP32[$z$addr >> 2] | 0) + 12 | 0;
 HEAP32[$code_buffer1 >> 2] = (HEAP32[$code_buffer1 >> 2] | 0) >>> (HEAP32[$n$addr >> 2] | 0);
 $num_bits2 = (HEAP32[$z$addr >> 2] | 0) + 8 | 0;
 HEAP32[$num_bits2 >> 2] = (HEAP32[$num_bits2 >> 2] | 0) - (HEAP32[$n$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($agg$tmp, HEAP32[$args1 >> 2] | 0);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _stbi__malloc_mad2($a, $b, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $add = $add | 0;
 var $6 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $mul = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $a$addr = sp + 8 | 0;
 $b$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$add$addr >> 2] = $add;
 if (_stbi__mad2sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$add$addr >> 2] | 0) | 0) {
  $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = _stbi__malloc($mul + (HEAP32[$add$addr >> 2] | 0) | 0) | 0;
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 }
 return 0;
}

function _stbi__check_png_header($s) {
 $s = $s | 0;
 var $5 = 0, $conv = 0, $i = 0, $retval = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $s$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 8) {
   label = 6;
   break;
  }
  $conv = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  if (($conv | 0) != (HEAPU8[49104 + (HEAP32[$i >> 2] | 0) >> 0] | 0 | 0)) {
   label = 4;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) {
  HEAP32[$retval >> 2] = _stbi__err(49112) | 0;
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 } else if ((label | 0) == 6) {
  HEAP32[$retval >> 2] = 1;
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$result, $this, $FromPosition) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $FromPosition = $FromPosition | 0;
 var $Names = 0, $add$ptr = 0;
 $Names = $this + 8 | 0;
 $add$ptr = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($Names) | 0) + ($FromPosition << 2) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($agg$result, $this, $add$ptr, __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv($Names) | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm($Names, $FromPosition);
 return;
}

function __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_ = 0, $incdec$ptr$i = 0;
 $0 = HEAP32[$__last >> 2] | 0;
 $__end_ = $this + 8 | 0;
 $1 = HEAP32[$__first >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $2 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  $incdec$ptr$i = $1 + 16 | 0;
  HEAP32[$__first >> 2] = $incdec$ptr$i;
  $1 = $incdec$ptr$i;
 }
 return;
}

function __sgl_destroy_pipeline($pip_id) {
 $pip_id = $pip_id | 0;
 var $arrayidx$byval_copy = 0, $i = 0, $pip = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $arrayidx$byval_copy = sp + 8 | 0;
 $pip = sp + 4 | 0;
 $i = sp;
 HEAP32[$pip >> 2] = __sgl_lookup_pipeline(HEAP32[$pip_id >> 2] | 0) | 0;
 if (!(HEAP32[$pip >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 6) break;
  if ((HEAP32[$i >> 2] | 0) != 5) {
   HEAP32[$arrayidx$byval_copy >> 2] = HEAP32[(HEAP32[$pip >> 2] | 0) + 8 + (HEAP32[$i >> 2] << 2) >> 2];
   _sg_destroy_pipeline($arrayidx$byval_copy);
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 __sgl_reset_pipeline(HEAP32[$pip >> 2] | 0);
 __sgl_pool_free_index(2165732, __sgl_slot_index(HEAP32[$pip_id >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE($this, $Ret_, $Name_, $Params_, $Attrs_, $CVQuals_, $RefQual_) {
 $this = $this | 0;
 $Ret_ = $Ret_ | 0;
 $Name_ = $Name_ | 0;
 $Params_ = $Params_ | 0;
 $Attrs_ = $Attrs_ | 0;
 $CVQuals_ = $CVQuals_ | 0;
 $RefQual_ = $RefQual_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 18, 0, 1, 0);
 HEAP32[$this >> 2] = 16148;
 HEAP32[$this + 8 >> 2] = $Ret_;
 HEAP32[$this + 12 >> 2] = $Name_;
 $0 = $Params_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 16 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 24 >> 2] = $Attrs_;
 HEAP32[$this + 28 >> 2] = $CVQuals_;
 HEAP8[$this + 32 >> 0] = $RefQual_;
 return;
}

function __sapp_emsc_webgl_context_cb($emsc_type, $reserved, $user_data) {
 $emsc_type = $emsc_type | 0;
 $reserved = $reserved | 0;
 $user_data = $user_data | 0;
 var $call = 0, $emsc_type$addr = 0, $type = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $emsc_type$addr = sp + 12 | 0;
 $type = sp;
 HEAP32[$emsc_type$addr >> 2] = $emsc_type;
 HEAP32[sp + 8 >> 2] = $reserved;
 HEAP32[sp + 4 >> 2] = $user_data;
 switch (HEAP32[$emsc_type$addr >> 2] | 0) {
 case 31:
  {
   HEAP32[$type >> 2] = 17;
   break;
  }
 case 32:
  {
   HEAP32[$type >> 2] = 18;
   break;
  }
 default:
  HEAP32[$type >> 2] = 0;
 }
 $call = __sapp_events_enabled() | 0;
 if (!($call & 0 != (HEAP32[$type >> 2] | 0))) {
  STACKTOP = sp;
  return 1;
 }
 __sapp_init_event(HEAP32[$type >> 2] | 0);
 __sapp_call_event(58728) | 0;
 STACKTOP = sp;
 return 1;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_($this, $First_, $Last_) {
 $this = $this | 0;
 $First_ = $First_ | 0;
 $Last_ = $Last_ | 0;
 HEAP32[$this >> 2] = $First_;
 HEAP32[$this + 4 >> 2] = $Last_;
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($this + 8 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($this + 148 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this + 288 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev($this + 332 | 0);
 HEAP8[$this + 360 >> 0] = 1;
 HEAP8[$this + 361 >> 0] = 0;
 HEAP8[$this + 362 >> 0] = 0;
 __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($this + 368 | 0);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __sg_discard_pool($pool) {
 $pool = $pool | 0;
 var $pool$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(30066, 21600, 12781, 30071);
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(29510, 21600, 12782, 30071);
 _free(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] = 0;
 if (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0);
  HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[HEAP32[$pool$addr >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(29495, 21600, 12785, 30071);
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __sgl_discard_pool($pool) {
 $pool = $pool | 0;
 var $pool$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pool$addr = sp;
 HEAP32[$pool$addr >> 2] = $pool;
 if (!(HEAP32[$pool$addr >> 2] | 0)) ___assert_fail(30066, 23371, 2104, 41906);
 if (!(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0)) ___assert_fail(29510, 23371, 2105, 41906);
 _free(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 12 >> 2] = 0;
 if (HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] | 0);
  HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[HEAP32[$pool$addr >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$pool$addr >> 2] | 0) + 4 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(29495, 23371, 2108, 41906);
}

function __sg_gl_cache_restore_texture_binding($slot_index) {
 $slot_index = $slot_index | 0;
 var $slot = 0, $slot_index$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $slot_index$addr = sp + 4 | 0;
 $slot = sp;
 HEAP32[$slot_index$addr >> 2] = $slot_index;
 if ((HEAP32[$slot_index$addr >> 2] | 0) >= 12) ___assert_fail(37304, 21600, 5521, 37474);
 HEAP32[$slot >> 2] = 2165388;
 if (!(HEAP32[(HEAP32[$slot >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[HEAP32[$slot >> 2] >> 2] | 0)) ___assert_fail(37511, 21600, 5525, 37474);
 __sg_gl_cache_bind_texture(HEAP32[$slot_index$addr >> 2] | 0, HEAP32[HEAP32[$slot >> 2] >> 2] | 0, HEAP32[(HEAP32[$slot >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[HEAP32[$slot >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$slot >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __sg_gl_compare_func($cmp) {
 $cmp = $cmp | 0;
 var $cmp$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $cmp$addr = sp;
 HEAP32[$cmp$addr >> 2] = $cmp;
 switch (HEAP32[$cmp$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 512;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 513;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 514;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 515;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = 516;
   break;
  }
 case 6:
  {
   HEAP32[$retval >> 2] = 517;
   break;
  }
 case 7:
  {
   HEAP32[$retval >> 2] = 518;
   break;
  }
 case 8:
  {
   HEAP32[$retval >> 2] = 519;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4515, 40118);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZNSt3__213__vector_baseINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEENS3_IS7_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $__end_$i$i = 0, $__soon_to_be_end$0$i$i = 0, $incdec$ptr$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $__soon_to_be_end$0$i$i = HEAP32[$__end_$i$i >> 2] | 0;
  while (1) {
   if (($__soon_to_be_end$0$i$i | 0) == ($0 | 0)) break;
   $incdec$ptr$i$i = $__soon_to_be_end$0$i$i + -12 | 0;
   __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($incdec$ptr$i$i);
   $__soon_to_be_end$0$i$i = $incdec$ptr$i$i;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  $2 = HEAP32[$this >> 2] | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 8 >> 2] | 0) - $2 | 0);
 }
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __sg_gl_stencil_op($op) {
 $op = $op | 0;
 var $op$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $op$addr = sp;
 HEAP32[$op$addr >> 2] = $op;
 switch (HEAP32[$op$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 7680;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 0;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 7681;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 7682;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = 7683;
   break;
  }
 case 6:
  {
   HEAP32[$retval >> 2] = 5386;
   break;
  }
 case 7:
  {
   HEAP32[$retval >> 2] = 34055;
   break;
  }
 case 8:
  {
   HEAP32[$retval >> 2] = 34056;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4529, 40138);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function _HMM_Cross($agg$result, $VecOne, $VecTwo) {
 $agg$result = $agg$result | 0;
 $VecOne = $VecOne | 0;
 $VecTwo = $VecTwo | 0;
 var $Result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Result = sp;
 HEAPF32[$Result >> 2] = +HEAPF32[$VecOne + 4 >> 2] * +HEAPF32[$VecTwo + 8 >> 2] - +HEAPF32[$VecOne + 8 >> 2] * +HEAPF32[$VecTwo + 4 >> 2];
 HEAPF32[$Result + 4 >> 2] = +HEAPF32[$VecOne + 8 >> 2] * +HEAPF32[$VecTwo >> 2] - +HEAPF32[$VecOne >> 2] * +HEAPF32[$VecTwo + 8 >> 2];
 HEAPF32[$Result + 8 >> 2] = +HEAPF32[$VecOne >> 2] * +HEAPF32[$VecTwo + 4 >> 2] - +HEAPF32[$VecOne + 4 >> 2] * +HEAPF32[$VecTwo >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$Result >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$Result + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$Result + 8 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $call12 = 0, $call7 = 0, $mem$1 = 0, $sub = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $call7 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($call7 | 0) {
  $mem$1 = $call7 + 8 | 0;
  return $mem$1 | 0;
 }
 $call12 = _malloc($bytes) | 0;
 if (!$call12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $0 = HEAP32[$oldmem + -4 >> 2] | 0;
 $sub = ($0 & -8) - (($0 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($call12 | 0, $oldmem | 0, ($sub >>> 0 < $bytes >>> 0 ? $sub : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $call12;
 return $mem$1 | 0;
}

function __sapp_call_event($e) {
 $e = $e | 0;
 var $$pre_trunc = 0, $9 = 0, $e$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $e$addr = sp;
 HEAP32[$e$addr >> 2] = $e;
 do if (!(HEAP8[58681] & 1)) {
  if (HEAP32[14647] | 0) {
   FUNCTION_TABLE_vi[HEAP32[58588 >> 2] & 127](HEAP32[$e$addr >> 2] | 0);
   break;
  }
  if (HEAP32[14653] | 0) FUNCTION_TABLE_vii[HEAP32[58612 >> 2] & 127](HEAP32[$e$addr >> 2] | 0, HEAP32[14649] | 0);
 } while (0);
 if (HEAP8[58684] & 1) {
  HEAP8[58684] = 0;
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $9 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $9 | 0;
 } else {
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $9 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $9 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _meshopt_remapIndexBuffer($destination, $indices, $index_count, $remap) {
 $destination = $destination | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $remap = $remap | 0;
 var $1 = 0, $cond = 0, $i$0 = 0, $tobool = 0, label = 0;
 if (($index_count >>> 0) % 3 | 0 | 0) ___assert_fail(47099, 45771, 316, 46044);
 $tobool = ($indices | 0) == 0;
 $i$0 = 0;
 while (1) {
  if ($i$0 >>> 0 >= $index_count >>> 0) {
   label = 5;
   break;
  }
  if ($tobool) $cond = $i$0; else $cond = HEAP32[$indices + ($i$0 << 2) >> 2] | 0;
  $1 = HEAP32[$remap + ($cond << 2) >> 2] | 0;
  if (($1 | 0) == -1) {
   label = 9;
   break;
  }
  HEAP32[$destination + ($i$0 << 2) >> 2] = $1;
  $i$0 = $i$0 + 1 | 0;
 }
 if ((label | 0) == 5) return; else if ((label | 0) == 9) ___assert_fail(46069, 45771, 321, 46044);
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEC2ERKS6_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $__end_$i8 = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $__end_$i8 = $__x + 4 | 0;
 $sub$ptr$sub$i = (HEAP32[$__end_$i8 >> 2] | 0) - (HEAP32[$__x >> 2] | 0) | 0;
 $sub$ptr$div$i = ($sub$ptr$sub$i | 0) / 12 | 0;
 if ($sub$ptr$sub$i | 0) {
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE11__vallocateEm($this, $sub$ptr$div$i);
  __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($this, HEAP32[$__x >> 2] | 0, HEAP32[$__end_$i8 >> 2] | 0, $sub$ptr$div$i);
 }
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 $0 = HEAP32[$args1 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call, $agg$tmp$byval_copy, $0);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 $0 = HEAP32[$args >> 2] | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE($call, $0, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __sgl_get_pipeline($pip_id, $prim_type) {
 $pip_id = $pip_id | 0;
 $prim_type = $prim_type | 0;
 var $4 = 0, $dummy_id = 0, $pip = 0, $prim_type$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $prim_type$addr = sp + 8 | 0;
 $pip = sp + 4 | 0;
 $dummy_id = sp;
 HEAP32[$prim_type$addr >> 2] = $prim_type;
 HEAP32[$pip >> 2] = __sgl_lookup_pipeline(HEAP32[$pip_id >> 2] | 0) | 0;
 if (HEAP32[$pip >> 2] | 0) {
  HEAP32[$retval >> 2] = HEAP32[(HEAP32[$pip >> 2] | 0) + 8 + (HEAP32[$prim_type$addr >> 2] << 2) >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[$dummy_id >> 2] = 0;
  HEAP32[$retval >> 2] = HEAP32[$dummy_id >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 $0 = $args;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $tmpcast$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN2Dr14IdentityMatrixEv($agg$result) {
 $agg$result = $agg$result | 0;
 var $arrayidx19 = 0, $arrayidx34 = 0, $arrayidx4 = 0;
 HEAPF32[$agg$result >> 2] = 1.0;
 $arrayidx4 = $agg$result + 4 | 0;
 HEAP32[$arrayidx4 >> 2] = 0;
 HEAP32[$arrayidx4 + 4 >> 2] = 0;
 HEAP32[$arrayidx4 + 8 >> 2] = 0;
 HEAP32[$arrayidx4 + 12 >> 2] = 0;
 HEAPF32[$agg$result + 20 >> 2] = 1.0;
 $arrayidx19 = $agg$result + 24 | 0;
 HEAP32[$arrayidx19 >> 2] = 0;
 HEAP32[$arrayidx19 + 4 >> 2] = 0;
 HEAP32[$arrayidx19 + 8 >> 2] = 0;
 HEAP32[$arrayidx19 + 12 >> 2] = 0;
 HEAPF32[$agg$result + 40 >> 2] = 1.0;
 $arrayidx34 = $agg$result + 44 | 0;
 HEAP32[$arrayidx34 >> 2] = 0;
 HEAP32[$arrayidx34 + 4 >> 2] = 0;
 HEAP32[$arrayidx34 + 8 >> 2] = 0;
 HEAP32[$arrayidx34 + 12 >> 2] = 0;
 HEAPF32[$agg$result + 60 >> 2] = 1.0;
 return;
}

function _twobyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $2 = 0, $4 = 0, $5 = 0, $arrayidx7 = 0, $conv12 = 0, $h$addr$012 = 0, $hw$0$in13 = 0, $incdec$ptr17 = 0, $or = 0;
 $or = (HEAPU8[$n >> 0] | 0) << 8 | (HEAPU8[$n + 1 >> 0] | 0);
 $arrayidx7 = $h + 1 | 0;
 $2 = HEAP8[$arrayidx7 >> 0] | 0;
 L1 : do if (!($2 << 24 >> 24)) $5 = 0; else {
  $h$addr$012 = $arrayidx7;
  $hw$0$in13 = (HEAPU8[$h >> 0] | 0) << 8 | $2 & 255;
  while (1) {
   $conv12 = $hw$0$in13 & 65535;
   if (($conv12 | 0) == ($or | 0)) break;
   $incdec$ptr17 = $h$addr$012 + 1 | 0;
   $4 = HEAP8[$incdec$ptr17 >> 0] | 0;
   if (!($4 << 24 >> 24)) {
    $5 = 0;
    break L1;
   } else {
    $h$addr$012 = $incdec$ptr17;
    $hw$0$in13 = $conv12 << 8 | $4 & 255;
   }
  }
  $5 = $h$addr$012 + -1 | 0;
 } while (0);
 return $5 | 0;
}

function __sg_gl_vertexformat_type($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 switch (HEAP32[$fmt$addr >> 2] | 0) {
 case 4:
 case 3:
 case 2:
 case 1:
  {
   HEAP32[$retval >> 2] = 5126;
   break;
  }
 case 6:
 case 5:
  {
   HEAP32[$retval >> 2] = 5120;
   break;
  }
 case 8:
 case 7:
  {
   HEAP32[$retval >> 2] = 5121;
   break;
  }
 case 13:
 case 12:
 case 10:
 case 9:
  {
   HEAP32[$retval >> 2] = 5122;
   break;
  }
 case 14:
 case 11:
  {
   HEAP32[$retval >> 2] = 5123;
   break;
  }
 case 15:
  {
   HEAP32[$retval >> 2] = 33640;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4466, 38717);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function ___stdio_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $10 = 0, $14 = 0, $15 = 0, $4 = 0, $ret = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 8 | 0;
 $ret = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $1;
 HEAP32[$vararg_buffer + 8 >> 2] = $0;
 HEAP32[$vararg_buffer + 12 >> 2] = $ret;
 HEAP32[$vararg_buffer + 16 >> 2] = $whence;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  $10 = $ret;
  HEAP32[$10 >> 2] = -1;
  HEAP32[$10 + 4 >> 2] = -1;
  $14 = -1;
  $15 = -1;
 } else {
  $4 = $ret;
  $14 = HEAP32[$4 + 4 >> 2] | 0;
  $15 = HEAP32[$4 >> 2] | 0;
 }
 setTempRet0($14 | 0);
 STACKTOP = sp;
 return $15 | 0;
}

function _sapp_html5_get_dropped_file_size($index) {
 $index = $index | 0;
 var $6 = 0, $index$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $index$addr = sp;
 HEAP32[$index$addr >> 2] = $index;
 if (!(HEAP8[58968] & 1)) ___assert_fail(21055, 16477, 10387, 21139);
 if ((HEAP32[$index$addr >> 2] | 0) < 0) ___assert_fail(21074, 16477, 10388, 21139);
 if ((HEAP32[$index$addr >> 2] | 0) >= (HEAP32[14745] | 0)) ___assert_fail(21074, 16477, 10388, 21139);
 if (HEAP8[58968] & 1) {
  HEAP32[$retval >> 2] = _sapp_js_dropped_file_size(HEAP32[$index$addr >> 2] | 0) | 0;
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_($this, $Ret_, $Params_, $CVQuals_, $RefQual_, $ExceptionSpec_) {
 $this = $this | 0;
 $Ret_ = $Ret_ | 0;
 $Params_ = $Params_ | 0;
 $CVQuals_ = $CVQuals_ | 0;
 $RefQual_ = $RefQual_ | 0;
 $ExceptionSpec_ = $ExceptionSpec_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 15, 0, 1, 0);
 HEAP32[$this >> 2] = 15928;
 HEAP32[$this + 8 >> 2] = $Ret_;
 $0 = $Params_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 20 >> 2] = $CVQuals_;
 HEAP8[$this + 24 >> 0] = $RefQual_;
 HEAP32[$this + 28 >> 2] = $ExceptionSpec_;
 return;
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $call$i$i$i = 0, $exception$i$i$i = 0;
 if ((__ZNKSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE8max_sizeEv($this) | 0) >>> 0 < $__n >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 > 357913941) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $call$i$i$i = __Znwm($__n * 12 | 0) | 0;
  HEAP32[$this + 4 >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $call$i$i$i + ($__n * 12 | 0);
  return;
 }
}

function __ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $2 = 0, $7 = 0, $8 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 127]($0, $s);
 $2 = $this + 12 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $agg$tmp;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function _HMM_Mat4d($agg$result, $Diagonal) {
 $agg$result = $agg$result | 0;
 $Diagonal = +$Diagonal;
 var $Diagonal$addr = 0, $Result = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $Diagonal$addr = sp + 64 | 0;
 $Result = sp;
 HEAPF32[$Diagonal$addr >> 2] = $Diagonal;
 _HMM_Mat4($Result);
 HEAPF32[$Result >> 2] = +HEAPF32[$Diagonal$addr >> 2];
 HEAPF32[$Result + 16 + 4 >> 2] = +HEAPF32[$Diagonal$addr >> 2];
 HEAPF32[$Result + 32 + 8 >> 2] = +HEAPF32[$Diagonal$addr >> 2];
 HEAPF32[$Result + 48 + 12 >> 2] = +HEAPF32[$Diagonal$addr >> 2];
 dest = $agg$result;
 src = $Result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __sg_apply_scissor_rect($x, $y, $w, $h, $origin_top_left) {
 $x = $x | 0;
 $y = $y | 0;
 $w = $w | 0;
 $h = $h | 0;
 $origin_top_left = $origin_top_left | 0;
 var $h$addr = 0, $origin_top_left$addr = 0, $w$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $w$addr = sp + 4 | 0;
 $h$addr = sp;
 $origin_top_left$addr = sp + 16 | 0;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP8[$origin_top_left$addr >> 0] = $origin_top_left & 1;
 __sg_gl_apply_scissor_rect(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0, HEAP8[$origin_top_left$addr >> 0] & 1);
 STACKTOP = sp;
 return;
}

function __ZN10DrPolygonF22findWindingOrientationERKNSt3__26vectorI8DrPointFNS0_9allocatorIS2_EEEE($points) {
 $points = $points | 0;
 var $$cast = 0, $1 = 0, $add = 0, $area$0 = 0.0, $i1$0 = 0, $spec$select = 0, $sub$ptr$div$i = 0;
 $1 = HEAP32[$points >> 2] | 0;
 $sub$ptr$div$i = (HEAP32[$points + 4 >> 2] | 0) - $1 >> 4;
 $$cast = $1;
 $area$0 = 0.0;
 $i1$0 = 0;
 while (1) {
  if (($i1$0 | 0) == ($sub$ptr$div$i | 0)) break;
  $add = $i1$0 + 1 | 0;
  $spec$select = ($add | 0) == ($sub$ptr$div$i | 0) ? 0 : $add;
  $area$0 = $area$0 + (+HEAPF64[$$cast + ($i1$0 << 4) >> 3] * +HEAPF64[$$cast + ($spec$select << 4) + 8 >> 3] - +HEAPF64[$$cast + ($i1$0 << 4) + 8 >> 3] * +HEAPF64[$$cast + ($spec$select << 4) >> 3]);
  $i1$0 = $add;
 }
 return ($area$0 > 0.0 ? 1 : $area$0 < 0.0 ? 0 : 2) | 0;
}

function __sg_uninit_pipeline($pip_id) {
 $pip_id = $pip_id | 0;
 var $$pre_trunc = 0, $7 = 0, $pip = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $pip = sp;
 HEAP32[$pip >> 2] = __sg_lookup_pipeline(2164252, HEAP32[$pip_id >> 2] | 0) | 0;
 do if (HEAP32[$pip >> 2] | 0) {
  if ((HEAP32[(HEAP32[$pip >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[541058] | 0)) {
   _puts(39013) | 0;
   break;
  }
  __sg_destroy_pipeline(HEAP32[$pip >> 2] | 0);
  __sg_reset_pipeline(HEAP32[$pip >> 2] | 0);
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $7 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $7 | 0;
 } while (0);
 HEAP8[$retval >> 0] = 0;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $7 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $7 | 0;
}

function __saudio_ring_count($ring) {
 $ring = $ring | 0;
 var $5 = 0, $6 = 0, $count = 0, $ring$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ring$addr = sp + 4 | 0;
 $count = sp;
 HEAP32[$ring$addr >> 2] = $ring;
 $5 = HEAP32[HEAP32[$ring$addr >> 2] >> 2] | 0;
 $6 = HEAP32[$ring$addr >> 2] | 0;
 if ((HEAP32[HEAP32[$ring$addr >> 2] >> 2] | 0) >= (HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 4 >> 2] | 0)) HEAP32[$count >> 2] = $5 - (HEAP32[$6 + 4 >> 2] | 0); else HEAP32[$count >> 2] = $5 + (HEAP32[$6 + 8 >> 2] | 0) - (HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 4 >> 2] | 0);
 if ((HEAP32[$count >> 2] | 0) < (HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return HEAP32[$count >> 2] | 0;
 } else ___assert_fail(43938, 26275, 819, 43956);
 return 0;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEERKT_SD_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISB_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0 = 0, $__root$addr$0 = 0, $call$i = 0;
 $__result$addr$0 = $__result;
 $__root$addr$0 = $__root;
 while (1) {
  if (!$__root$addr$0) break;
  $call$i = __ZNK13TPPLPartition12ScanLineEdgeltERKS0_($__root$addr$0 + 16 | 0, $__v) | 0;
  $__result$addr$0 = $call$i ? $__result$addr$0 : $__root$addr$0;
  $__root$addr$0 = HEAP32[($call$i ? $__root$addr$0 + 4 | 0 : $__root$addr$0) >> 2] | 0;
 }
 return $__result$addr$0 | 0;
}

function __sg_apply_viewport($x, $y, $w, $h, $origin_top_left) {
 $x = $x | 0;
 $y = $y | 0;
 $w = $w | 0;
 $h = $h | 0;
 $origin_top_left = $origin_top_left | 0;
 var $h$addr = 0, $origin_top_left$addr = 0, $w$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $w$addr = sp + 4 | 0;
 $h$addr = sp;
 $origin_top_left$addr = sp + 16 | 0;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP8[$origin_top_left$addr >> 0] = $origin_top_left & 1;
 __sg_gl_apply_viewport(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0, HEAP8[$origin_top_left$addr >> 0] & 1);
 STACKTOP = sp;
 return;
}

function __sg_reset_pipeline($pip) {
 $pip = $pip | 0;
 var $1 = 0, $3 = 0, $pip$addr = 0, $slot = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip$addr = sp + 12 | 0;
 $slot = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 if (HEAP32[$pip$addr >> 2] | 0) {
  $1 = HEAP32[$pip$addr >> 2] | 0;
  HEAP32[$slot >> 2] = HEAP32[$1 >> 2];
  HEAP32[$slot + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$slot + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  _memset(HEAP32[$pip$addr >> 2] | 0, 0, 472) | 0;
  $3 = HEAP32[$pip$addr >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$slot >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$slot + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$slot + 8 >> 2];
  HEAP32[(HEAP32[$pip$addr >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(22631, 21600, 12851, 39089);
}

function __sg_reset_shader($shd) {
 $shd = $shd | 0;
 var $1 = 0, $3 = 0, $shd$addr = 0, $slot = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $shd$addr = sp + 12 | 0;
 $slot = sp;
 HEAP32[$shd$addr >> 2] = $shd;
 if (HEAP32[$shd$addr >> 2] | 0) {
  $1 = HEAP32[$shd$addr >> 2] | 0;
  HEAP32[$slot >> 2] = HEAP32[$1 >> 2];
  HEAP32[$slot + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$slot + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  _memset(HEAP32[$shd$addr >> 2] | 0, 0, 2176) | 0;
  $3 = HEAP32[$shd$addr >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$slot >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$slot + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$slot + 8 >> 2];
  HEAP32[(HEAP32[$shd$addr >> 2] | 0) + 8 >> 2] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(29914, 21600, 12843, 38996);
}

function __sg_lookup_buffer($p, $buf_id) {
 $p = $p | 0;
 $buf_id = $buf_id | 0;
 var $7 = 0, $buf = 0, $buf_id$addr = 0, $p$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $p$addr = sp + 8 | 0;
 $buf_id$addr = sp + 4 | 0;
 $buf = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$buf_id$addr >> 2] = $buf_id;
 if (HEAP32[$buf_id$addr >> 2] | 0) {
  HEAP32[$buf >> 2] = __sg_buffer_at(HEAP32[$p$addr >> 2] | 0, HEAP32[$buf_id$addr >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$buf >> 2] >> 2] | 0) == (HEAP32[$buf_id$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$buf >> 2];
   $7 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $7 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $7 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $__end_$i$i = 0, $__soon_to_be_end$0$i$i = 0, $incdec$ptr$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $__soon_to_be_end$0$i$i = HEAP32[$__end_$i$i >> 2] | 0;
  while (1) {
   if (($__soon_to_be_end$0$i$i | 0) == ($0 | 0)) break;
   $incdec$ptr$i$i = $__soon_to_be_end$0$i$i + -12 | 0;
   __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($incdec$ptr$i$i);
   $__soon_to_be_end$0$i$i = $incdec$ptr$i$i;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  $2 = HEAP32[$this >> 2] | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 8 >> 2] | 0) - $2 | 0);
 }
 return;
}

function __sg_uninit_shader($shd_id) {
 $shd_id = $shd_id | 0;
 var $$pre_trunc = 0, $7 = 0, $retval = 0, $shd = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $shd = sp;
 HEAP32[$shd >> 2] = __sg_lookup_shader(2164252, HEAP32[$shd_id >> 2] | 0) | 0;
 do if (HEAP32[$shd >> 2] | 0) {
  if ((HEAP32[(HEAP32[$shd >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[541058] | 0)) {
   _puts(38922) | 0;
   break;
  }
  __sg_destroy_shader(HEAP32[$shd >> 2] | 0);
  __sg_reset_shader(HEAP32[$shd >> 2] | 0);
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $7 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $7 | 0;
 } while (0);
 HEAP8[$retval >> 0] = 0;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $7 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $7 | 0;
}

function __sg_uninit_buffer($buf_id) {
 $buf_id = $buf_id | 0;
 var $$pre_trunc = 0, $7 = 0, $buf = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $buf = sp;
 HEAP32[$buf >> 2] = __sg_lookup_buffer(2164252, HEAP32[$buf_id >> 2] | 0) | 0;
 do if (HEAP32[$buf >> 2] | 0) {
  if ((HEAP32[(HEAP32[$buf >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[541058] | 0)) {
   _puts(38742) | 0;
   break;
  }
  __sg_destroy_buffer(HEAP32[$buf >> 2] | 0);
  __sg_reset_buffer(HEAP32[$buf >> 2] | 0);
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $7 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $7 | 0;
 } while (0);
 HEAP8[$retval >> 0] = 0;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $7 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $7 | 0;
}

function __sg_lookup_image($p, $img_id) {
 $p = $p | 0;
 $img_id = $img_id | 0;
 var $7 = 0, $img = 0, $img_id$addr = 0, $p$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 $p$addr = sp + 8 | 0;
 $img_id$addr = sp + 4 | 0;
 $img = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$img_id$addr >> 2] = $img_id;
 if (HEAP32[$img_id$addr >> 2] | 0) {
  HEAP32[$img >> 2] = __sg_image_at(HEAP32[$p$addr >> 2] | 0, HEAP32[$img_id$addr >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$img >> 2] >> 2] | 0) == (HEAP32[$img_id$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$img >> 2];
   $7 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $7 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $7 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _stbtt__csctx_rline_to($ctx, $dx, $dy) {
 $ctx = $ctx | 0;
 $dx = +$dx;
 $dy = +$dy;
 var $ctx$addr = 0, $dx$addr = 0, $dy$addr = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp + 8 | 0;
 $dx$addr = sp + 4 | 0;
 $dy$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 HEAPF32[$dx$addr >> 2] = $dx;
 HEAPF32[$dy$addr >> 2] = $dy;
 $x = (HEAP32[$ctx$addr >> 2] | 0) + 16 | 0;
 HEAPF32[$x >> 2] = +HEAPF32[$x >> 2] + +HEAPF32[$dx$addr >> 2];
 $y = (HEAP32[$ctx$addr >> 2] | 0) + 20 | 0;
 HEAPF32[$y >> 2] = +HEAPF32[$y >> 2] + +HEAPF32[$dy$addr >> 2];
 _stbtt__csctx_v(HEAP32[$ctx$addr >> 2] | 0, 2, ~~+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 16 >> 2], ~~+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 20 >> 2], 0, 0, 0, 0);
 STACKTOP = sp;
 return;
}

function __sg_gl_cubeface_target($face_index) {
 $face_index = $face_index | 0;
 var $face_index$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $face_index$addr = sp;
 HEAP32[$face_index$addr >> 2] = $face_index;
 switch (HEAP32[$face_index$addr >> 2] | 0) {
 case 0:
  {
   HEAP32[$retval >> 2] = 34069;
   break;
  }
 case 1:
  {
   HEAP32[$retval >> 2] = 34070;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 34071;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 34072;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 34073;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = 34074;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4846, 37430);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEE5clearEv($this) {
 $this = $this | 0;
 var $1 = 0, $4 = 0, $7 = 0, $__f$0 = 0, $__next_$i = 0, $__value_$i$i$i$i = 0;
 $__value_$i$i$i$i = $this + 8 | 0;
 L1 : do if (HEAP32[$__value_$i$i$i$i >> 2] | 0) {
  $1 = HEAP32[$this + 4 >> 2] | 0;
  $__next_$i = (HEAP32[$this >> 2] | 0) + 4 | 0;
  $4 = HEAP32[$1 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$__next_$i >> 2];
  HEAP32[HEAP32[$__next_$i >> 2] >> 2] = $4;
  HEAP32[$__value_$i$i$i$i >> 2] = 0;
  $__f$0 = $1;
  while (1) {
   if (($__f$0 | 0) == ($this | 0)) break L1;
   $7 = HEAP32[$__f$0 + 4 >> 2] | 0;
   __ZN8TPPLPolyD2Ev($__f$0 + 8 | 0);
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__f$0, 20);
   $__f$0 = $7;
  }
 } while (0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53905);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __sg_uninit_image($img_id) {
 $img_id = $img_id | 0;
 var $$pre_trunc = 0, $7 = 0, $img = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $img = sp;
 HEAP32[$img >> 2] = __sg_lookup_image(2164252, HEAP32[$img_id >> 2] | 0) | 0;
 do if (HEAP32[$img >> 2] | 0) {
  if ((HEAP32[(HEAP32[$img >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[541058] | 0)) {
   _puts(38833) | 0;
   break;
  }
  __sg_destroy_image(HEAP32[$img >> 2] | 0);
  __sg_reset_image(HEAP32[$img >> 2] | 0);
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $7 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $7 | 0;
 } while (0);
 HEAP8[$retval >> 0] = 0;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $7 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $7 | 0;
}

function __sapp_dropped_file_path_ptr($index) {
 $index = $index | 0;
 var $index$addr = 0, $offset = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $index$addr = sp + 4 | 0;
 $offset = sp;
 HEAP32[$index$addr >> 2] = $index;
 if (!(HEAP32[14747] | 0)) ___assert_fail(21121, 16477, 2504, 28624);
 if ((HEAP32[$index$addr >> 2] | 0) < 0) ___assert_fail(28652, 16477, 2505, 28624);
 if ((HEAP32[$index$addr >> 2] | 0) > (HEAP32[14743] | 0)) ___assert_fail(28652, 16477, 2505, 28624);
 HEAP32[$offset >> 2] = Math_imul(HEAP32[$index$addr >> 2] | 0, HEAP32[14744] | 0) | 0;
 if ((HEAP32[$offset >> 2] | 0) < (HEAP32[14746] | 0)) {
  STACKTOP = sp;
  return (HEAP32[14747] | 0) + (HEAP32[$offset >> 2] | 0) | 0;
 } else ___assert_fail(28700, 16477, 2507, 28624);
 return 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 7]($3, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function _stbtt_ScaleForPixelHeight($info, $height) {
 $info = $info | 0;
 $height = +$height;
 var $conv = 0, $fheight = 0, $height$addr = 0, $info$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $info$addr = sp + 8 | 0;
 $height$addr = sp + 4 | 0;
 $fheight = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAPF32[$height$addr >> 2] = $height;
 $conv = (_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] | 0) + 4 | 0) | 0) << 16 >> 16;
 HEAP32[$fheight >> 2] = $conv - ((_ttSHORT((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] | 0) + 6 | 0) | 0) << 16 >> 16);
 STACKTOP = sp;
 return +(+HEAPF32[$height$addr >> 2] / +(HEAP32[$fheight >> 2] | 0));
}

function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53905);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function ___toread($f) {
 $f = $f | 0;
 var $4 = 0, $add$ptr = 0, $conv = 0, $mode = 0, $retval$0 = 0, $wbase = 0, $wpos = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$wbase >> 2] = 0;
 HEAP32[$wpos >> 2] = 0;
 $4 = HEAP32[$f >> 2] | 0;
 if (!($4 & 4)) {
  $add$ptr = (HEAP32[$f + 44 >> 2] | 0) + (HEAP32[$f + 48 >> 2] | 0) | 0;
  HEAP32[$f + 8 >> 2] = $add$ptr;
  HEAP32[$f + 4 >> 2] = $add$ptr;
  $retval$0 = $4 << 27 >> 31;
 } else {
  HEAP32[$f >> 2] = $4 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53905);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $tmpcast$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 16 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPKS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m($this, $__first, $__last, $__n) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__n = $__n | 0;
 var $1 = 0, $2 = 0, $3 = 0, $__end_ = 0;
 $1 = HEAP32[$__last >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $2 = HEAP32[$__first >> 2] | 0;
 while (1) {
  if (($2 | 0) == ($1 | 0)) break;
  $3 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  $2 = $2 + 16 | 0;
 }
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_($agg$result, $this, $__args) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 var $$sroa_idx10 = 0, $call$i$i$i = 0, dest = 0, src = 0, stop = 0;
 $call$i$i$i = __Znwm(72) | 0;
 HEAP32[$agg$result >> 2] = $call$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 4;
 $$sroa_idx10 = $agg$result + 8 | 0;
 dest = $call$i$i$i + 16 | 0;
 src = $__args;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$$sroa_idx10 >> 0] = 1;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 7]($1, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($this, $__first, $__last, $__n) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__n = $__n | 0;
 var $1 = 0, $2 = 0, $3 = 0, $__end_ = 0;
 $1 = HEAP32[$__last >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $2 = HEAP32[$__first >> 2] | 0;
 while (1) {
  if (($2 | 0) == ($1 | 0)) break;
  $3 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  $2 = $2 + 16 | 0;
 }
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $call$i$i$i = 0, $exception$i$i$i = 0;
 if ((__ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($this) | 0) >>> 0 < $__n >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 > 268435455) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $call$i$i$i = __Znwm($__n << 4) | 0;
  HEAP32[$this + 4 >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $call$i$i$i + ($__n << 4);
  return;
 }
}

function __ZNSt3__210__list_impIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE5clearEv($this) {
 $this = $this | 0;
 var $1 = 0, $4 = 0, $7 = 0, $__f$0 = 0, $__next_$i = 0, $__value_$i$i$i$i = 0;
 $__value_$i$i$i$i = $this + 8 | 0;
 L1 : do if (HEAP32[$__value_$i$i$i$i >> 2] | 0) {
  $1 = HEAP32[$this + 4 >> 2] | 0;
  $__next_$i = (HEAP32[$this >> 2] | 0) + 4 | 0;
  $4 = HEAP32[$1 >> 2] | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$__next_$i >> 2];
  HEAP32[HEAP32[$__next_$i >> 2] >> 2] = $4;
  HEAP32[$__value_$i$i$i$i >> 2] = 0;
  $__f$0 = $1;
  while (1) {
   if (($__f$0 | 0) == ($this | 0)) break L1;
   $7 = HEAP32[$__f$0 + 4 >> 2] | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__f$0, 16);
   $__f$0 = $7;
  }
 } while (0);
 return;
}

function _stbi__pnm_getinteger($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $3 = 0, $8 = 0, $c$addr = 0, $call3 = 0, $s$addr = 0, $value = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 8 | 0;
 $c$addr = sp + 4 | 0;
 $value = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$value >> 2] = 0;
 while (1) {
  if (_stbi__at_eof(HEAP32[$s$addr >> 2] | 0) | 0) $8 = 0; else $8 = (_stbi__pnm_isdigit(HEAP8[HEAP32[$c$addr >> 2] >> 0] | 0) | 0) != 0;
  $3 = HEAP32[$value >> 2] | 0;
  if (!$8) break;
  HEAP32[$value >> 2] = ($3 * 10 | 0) + ((HEAP8[HEAP32[$c$addr >> 2] >> 0] | 0) - 48);
  $call3 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
  HEAP8[HEAP32[$c$addr >> 2] >> 0] = $call3;
 }
 STACKTOP = sp;
 return $3 | 0;
}

function __sfons_render_update($user_ptr, $rect, $data) {
 $user_ptr = $user_ptr | 0;
 $rect = $rect | 0;
 $data = $data | 0;
 var $data$addr = 0, $rect$addr = 0, $sfons = 0, $user_ptr$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $user_ptr$addr = sp + 12 | 0;
 $rect$addr = sp + 8 | 0;
 $data$addr = sp + 4 | 0;
 $sfons = sp;
 HEAP32[$user_ptr$addr >> 2] = $user_ptr;
 HEAP32[$rect$addr >> 2] = $rect;
 HEAP32[$data$addr >> 2] = $data;
 if ((HEAP32[$user_ptr$addr >> 2] | 0) != 0 & (HEAP32[$rect$addr >> 2] | 0) != 0 & (HEAP32[$data$addr >> 2] | 0) != 0) {
  HEAP32[$sfons >> 2] = HEAP32[$user_ptr$addr >> 2];
  HEAP8[(HEAP32[$sfons >> 2] | 0) + 20 >> 0] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(45128, 28414, 1692, 45153);
}

function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 switch (HEAP32[$this + 8 >> 2] | 0) {
 case 0:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 51882);
   break;
  }
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 51892);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 51892);
   break;
  }
 case 3:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 55696);
   break;
  }
 case 4:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 55710);
   break;
  }
 case 5:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 55724);
   break;
  }
 default:
  {}
 }
 return;
}

function __ZNSt3__210shared_ptrI6DrMeshE11make_sharedIJEEES2_DpOT_($agg$result) {
 $agg$result = $agg$result | 0;
 var $__value_$i$i$i9 = 0, $call$i$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $call$i$i = __Znwm(44) | 0;
 HEAP32[$call$i$i + 4 >> 2] = 0;
 HEAP32[$call$i$i + 8 >> 2] = 0;
 HEAP32[$call$i$i >> 2] = 12756;
 $__value_$i$i$i9 = $call$i$i + 12 | 0;
 __ZN6DrMeshC2Ev($__value_$i$i$i9);
 HEAP32[$agg$result >> 2] = $__value_$i$i$i9;
 HEAP32[$agg$result + 4 >> 2] = $call$i$i;
 HEAP32[$vararg_buffer >> 2] = $__value_$i$i$i9;
 HEAP32[$vararg_buffer + 4 >> 2] = $__value_$i$i$i9;
 __ZNSt3__210shared_ptrI6DrMeshE18__enable_weak_thisEz($agg$result, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $__end_$i8 = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $__end_$i8 = $__x + 4 | 0;
 $sub$ptr$sub$i = (HEAP32[$__end_$i8 >> 2] | 0) - (HEAP32[$__x >> 2] | 0) | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 4;
 if ($sub$ptr$sub$i | 0) {
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE11__vallocateEm($this, $sub$ptr$div$i);
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m($this, HEAP32[$__x >> 2] | 0, HEAP32[$__end_$i8 >> 2] | 0, $sub$ptr$div$i);
 }
 return;
}

function _fons__tt_loadFont($context, $font, $data, $dataSize) {
 $context = $context | 0;
 $font = $font | 0;
 $data = $data | 0;
 $dataSize = $dataSize | 0;
 var $context$addr = 0, $data$addr = 0, $font$addr = 0, $stbError = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $context$addr = sp + 16 | 0;
 $font$addr = sp + 12 | 0;
 $data$addr = sp + 8 | 0;
 $stbError = sp;
 HEAP32[$context$addr >> 2] = $context;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[sp + 4 >> 2] = $dataSize;
 HEAP32[HEAP32[$font$addr >> 2] >> 2] = HEAP32[$context$addr >> 2];
 HEAP32[$stbError >> 2] = _stbtt_InitFont(HEAP32[$font$addr >> 2] | 0, HEAP32[$data$addr >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return HEAP32[$stbError >> 2] | 0;
}

function _stbi__mad2sizes_valid($a, $b, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $add = $add | 0;
 var $5 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $land$ext = 0, $mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $a$addr = sp + 8 | 0;
 $b$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$add$addr >> 2] = $add;
 if (!(_stbi__mul2sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0)) {
  $5 = 0;
  $land$ext = $5 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 $5 = (_stbi__addsizes_valid($mul, HEAP32[$add$addr >> 2] | 0) | 0) != 0;
 $land$ext = $5 & 1;
 STACKTOP = sp;
 return $land$ext | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 switch (HEAP32[$this + 8 >> 2] | 0) {
 case 0:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 51882);
   break;
  }
 case 1:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 51892);
   break;
  }
 case 2:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 51905);
   break;
  }
 case 3:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 51912);
   break;
  }
 case 4:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 51920);
   break;
  }
 case 5:
  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 51928);
   break;
  }
 default:
  {}
 }
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $$pre = 0, $2 = 0, $offset_to_base$0 = 0, $shr = 0;
 $$pre = HEAP32[$this + 4 >> 2] | 0;
 if (!$adjustedPtr) $offset_to_base$0 = 0; else {
  $shr = $$pre >> 8;
  if (!($$pre & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $shr >> 2] | 0;
 }
 $2 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 3]($2, $info, $adjustedPtr + $offset_to_base$0 | 0, ($$pre & 2 | 0) == 0 ? 2 : $path_below);
 return;
}

function _stbtt__add_point($points, $n, $x, $y) {
 $points = $points | 0;
 $n = $n | 0;
 $x = +$x;
 $y = +$y;
 var $n$addr = 0, $points$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $points$addr = sp + 12 | 0;
 $n$addr = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 $y$addr = sp;
 HEAP32[$points$addr >> 2] = $points;
 HEAP32[$n$addr >> 2] = $n;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 if (!(HEAP32[$points$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[(HEAP32[$points$addr >> 2] | 0) + (HEAP32[$n$addr >> 2] << 3) >> 2] = +HEAPF32[$x$addr >> 2];
 HEAPF32[(HEAP32[$points$addr >> 2] | 0) + (HEAP32[$n$addr >> 2] << 3) + 4 >> 2] = +HEAPF32[$y$addr >> 2];
 STACKTOP = sp;
 return;
}

function __sg_strcpy($dst, $src) {
 $dst = $dst | 0;
 $src = $src | 0;
 var $2 = 0, $dst$addr = 0, $src$addr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dst$addr = sp + 4 | 0;
 $src$addr = sp;
 HEAP32[$dst$addr >> 2] = $dst;
 HEAP32[$src$addr >> 2] = $src;
 if (!(HEAP32[$dst$addr >> 2] | 0)) ___assert_fail(37974, 21600, 3800, 37978);
 $2 = HEAP32[$dst$addr >> 2] | 0;
 if (HEAP32[$src$addr >> 2] | 0) {
  _strncpy($2, HEAP32[$src$addr >> 2] | 0, 16) | 0;
  HEAP8[(HEAP32[$dst$addr >> 2] | 0) + 15 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  dest = $2;
  stop = dest + 16 | 0;
  do {
   HEAP8[dest >> 0] = 0;
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
}

function _stbtt__new_buf($agg$result, $p, $size) {
 $agg$result = $agg$result | 0;
 $p = $p | 0;
 $size = $size | 0;
 var $p$addr = 0, $r = 0, $size$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $p$addr = sp + 16 | 0;
 $size$addr = sp + 12 | 0;
 $r = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$size$addr >> 2] = $size;
 if ((HEAP32[$size$addr >> 2] | 0) >>> 0 < 1073741824) {
  HEAP32[$r >> 2] = HEAP32[$p$addr >> 2];
  HEAP32[$r + 8 >> 2] = HEAP32[$size$addr >> 2];
  HEAP32[$r + 4 >> 2] = 0;
  HEAP32[$agg$result >> 2] = HEAP32[$r >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$r + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$r + 8 >> 2];
  STACKTOP = sp;
  return;
 } else ___assert_fail(44113, 44131, 1100, 44197);
}

function _stbtt__buf_get8($b) {
 $b = $b | 0;
 var $5 = 0, $7 = 0, $9 = 0, $b$addr = 0, $cursor1 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$b$addr >> 2] = $b;
 if ((HEAP32[(HEAP32[$b$addr >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP8[$retval >> 0] = 0;
  $9 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $9 | 0;
 } else {
  $5 = HEAP32[HEAP32[$b$addr >> 2] >> 2] | 0;
  $cursor1 = (HEAP32[$b$addr >> 2] | 0) + 4 | 0;
  $7 = HEAP32[$cursor1 >> 2] | 0;
  HEAP32[$cursor1 >> 2] = $7 + 1;
  HEAP8[$retval >> 0] = HEAP8[$5 + $7 >> 0] | 0;
  $9 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $9 | 0;
 }
 return 0;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $call$i$i$i = 0, $exception$i$i$i = 0;
 if ((__ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($this) | 0) >>> 0 < $__n >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 > 1073741823) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 49671);
  HEAP32[$exception$i$i$i >> 2] = 16340;
  ___cxa_throw($exception$i$i$i | 0, 12528, 84);
 } else {
  $call$i$i$i = __Znwm($__n << 2) | 0;
  HEAP32[$this + 4 >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $call$i$i$i + ($__n << 2);
  return;
 }
}

function _stbtt__buf_get($b, $n) {
 $b = $b | 0;
 $n = $n | 0;
 var $4 = 0, $b$addr = 0, $i = 0, $n$addr = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $b$addr = sp + 12 | 0;
 $n$addr = sp + 8 | 0;
 $v = sp + 4 | 0;
 $i = sp;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$v >> 2] = 0;
 if (!((HEAP32[$n$addr >> 2] | 0) >= 1 & (HEAP32[$n$addr >> 2] | 0) <= 4)) ___assert_fail(44302, 44131, 1091, 44319);
 HEAP32[$i >> 2] = 0;
 while (1) {
  $4 = HEAP32[$v >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$n$addr >> 2] | 0)) break;
  HEAP32[$v >> 2] = $4 << 8 | (_stbtt__buf_get8(HEAP32[$b$addr >> 2] | 0) | 0) & 255;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return $4 | 0;
}

function __sapp_emsc_frame($time, $userData) {
 $time = +$time;
 $userData = $userData | 0;
 var $3 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 12 | 0;
 HEAPF64[sp >> 3] = $time;
 HEAP32[sp + 8 >> 2] = $userData;
 __sapp_frame();
 if (HEAP8[58682] & 1) {
  __sapp_init_event(20);
  __sapp_call_event(58728) | 0;
  if (HEAP8[58682] & 1) HEAP8[58683] = 1;
 }
 if (HEAP8[58683] & 1) {
  __sapp_emsc_unregister_eventhandlers();
  __sapp_call_cleanup();
  __sapp_discard_state();
  HEAP32[$retval >> 2] = 0;
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else {
  HEAP32[$retval >> 2] = 1;
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56608);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 41);
 STACKTOP = sp;
 return;
}

function _stbi__pnm_test($s) {
 $s = $s | 0;
 var $6 = 0, $p = 0, $retval = 0, $s$addr = 0, $t = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $s$addr = sp;
 $p = sp + 9 | 0;
 $t = sp + 8 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP8[$p >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP8[$t >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
 do if ((HEAP8[$p >> 0] | 0) == 80) {
  if ((HEAP8[$t >> 0] | 0) != 53) if ((HEAP8[$t >> 0] | 0) != 54) break;
  HEAP32[$retval >> 2] = 1;
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 } while (0);
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 HEAP32[$retval >> 2] = 0;
 $6 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _fons__tt_getFontVMetrics($font, $ascent, $descent, $lineGap) {
 $font = $font | 0;
 $ascent = $ascent | 0;
 $descent = $descent | 0;
 $lineGap = $lineGap | 0;
 var $ascent$addr = 0, $descent$addr = 0, $font$addr = 0, $lineGap$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $font$addr = sp + 12 | 0;
 $ascent$addr = sp + 8 | 0;
 $descent$addr = sp + 4 | 0;
 $lineGap$addr = sp;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$ascent$addr >> 2] = $ascent;
 HEAP32[$descent$addr >> 2] = $descent;
 HEAP32[$lineGap$addr >> 2] = $lineGap;
 _stbtt_GetFontVMetrics(HEAP32[$font$addr >> 2] | 0, HEAP32[$ascent$addr >> 2] | 0, HEAP32[$descent$addr >> 2] | 0, HEAP32[$lineGap$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbi__jpeg_dequantize($data, $dequant) {
 $data = $data | 0;
 $dequant = $dequant | 0;
 var $arrayidx1 = 0, $data$addr = 0, $dequant$addr = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $data$addr = sp + 8 | 0;
 $dequant$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$dequant$addr >> 2] = $dequant;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 64) break;
  $arrayidx1 = (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] << 1) | 0;
  HEAP16[$arrayidx1 >> 1] = Math_imul(HEAP16[$arrayidx1 >> 1] | 0, HEAPU16[(HEAP32[$dequant$addr >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __sg_num_rows($fmt, $height) {
 $fmt = $fmt | 0;
 $height = $height | 0;
 var $1 = 0, $3 = 0, $fmt$addr = 0, $height$addr = 0, $num_rows = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $fmt$addr = sp + 8 | 0;
 $height$addr = sp + 4 | 0;
 $num_rows = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 HEAP32[$height$addr >> 2] = $height;
 $1 = HEAP32[$height$addr >> 2] | 0;
 if (((HEAP32[$fmt$addr >> 2] | 0) + -43 | 0) >>> 0 < 19) HEAP32[$num_rows >> 2] = ($1 + 3 | 0) / 4 | 0; else HEAP32[$num_rows >> 2] = $1;
 if ((HEAP32[$num_rows >> 2] | 0) >= 1) {
  $3 = HEAP32[$num_rows >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 }
 HEAP32[$num_rows >> 2] = 1;
 $3 = HEAP32[$num_rows >> 2] | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 7]($3, $info, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function __sg_alloc_pipeline() {
 var $4 = 0, $res = 0, $retval = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $res = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$slot_index >> 2] = __sg_pool_alloc_index(2164300) | 0;
 if (HEAP32[$slot_index >> 2] | 0) {
  HEAP32[$res >> 2] = __sg_slot_alloc(2164300, (HEAP32[541090] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 472 | 0) | 0, HEAP32[$slot_index >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[$res >> 2] = 0;
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __Z12circumradiusdddddd($ax, $ay, $bx, $by, $cx, $cy) {
 $ax = +$ax;
 $ay = +$ay;
 $bx = +$bx;
 $by = +$by;
 $cx = +$cx;
 $cy = +$cy;
 var $add = 0.0, $add7 = 0.0, $div = 0.0, $div19 = 0.0, $sub = 0.0, $sub1 = 0.0, $sub10 = 0.0, $sub2 = 0.0, $sub3 = 0.0;
 $sub = $bx - $ax;
 $sub1 = $by - $ay;
 $sub2 = $cx - $ax;
 $sub3 = $cy - $ay;
 $add = $sub * $sub + $sub1 * $sub1;
 $add7 = $sub2 * $sub2 + $sub3 * $sub3;
 $sub10 = $sub * $sub3 - $sub1 * $sub2;
 $div = ($sub3 * $add - $sub1 * $add7) * .5 / $sub10;
 $div19 = ($sub * $add7 - $sub2 * $add) * .5 / $sub10;
 return +($sub10 != $sub10 | 0.0 != 0.0 | $sub10 == 0.0 | (!($add > 0.0) | !($add7 > 0.0)) ? 1797693134862315708145274.0e284 : $div * $div + $div19 * $div19);
}

function __sg_alloc_shader() {
 var $4 = 0, $res = 0, $retval = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $res = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$slot_index >> 2] = __sg_pool_alloc_index(2164284) | 0;
 if (HEAP32[$slot_index >> 2] | 0) {
  HEAP32[$res >> 2] = __sg_slot_alloc(2164284, (HEAP32[541089] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 2176 | 0) | 0, HEAP32[$slot_index >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[$res >> 2] = 0;
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($this, $Prefix_, $Infix_, $Postfix_) {
 $this = $this | 0;
 $Prefix_ = $Prefix_ | 0;
 $Infix_ = $Infix_ | 0;
 $Postfix_ = $Postfix_ | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 47, 1, 1, 1);
 HEAP32[$this >> 2] = 14124;
 $0 = $Prefix_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Infix_;
 $10 = $Postfix_;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $this + 20 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 56891);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
 STACKTOP = sp;
 return;
}

function __sg_alloc_image() {
 var $4 = 0, $res = 0, $retval = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $res = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$slot_index >> 2] = __sg_pool_alloc_index(2164268) | 0;
 if (HEAP32[$slot_index >> 2] | 0) {
  HEAP32[$res >> 2] = __sg_slot_alloc(2164268, (HEAP32[541088] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 112 | 0) | 0, HEAP32[$slot_index >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[$res >> 2] = 0;
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __sg_alloc_buffer() {
 var $4 = 0, $res = 0, $retval = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $res = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$slot_index >> 2] = __sg_pool_alloc_index(2164252) | 0;
 if (HEAP32[$slot_index >> 2] | 0) {
  HEAP32[$res >> 2] = __sg_slot_alloc(2164252, (HEAP32[541087] | 0) + ((HEAP32[$slot_index >> 2] | 0) * 60 | 0) | 0, HEAP32[$slot_index >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[$res >> 2] = 0;
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __ZN6DrRect6adjustEiiii($this, $adjust_left, $adjust_top, $adjust_right, $adjust_bottom) {
 $this = $this | 0;
 $adjust_left = $adjust_left | 0;
 $adjust_top = $adjust_top | 0;
 $adjust_right = $adjust_right | 0;
 $adjust_bottom = $adjust_bottom | 0;
 var $add2 = 0, $add5 = 0, $height = 0, $width = 0, $y = 0;
 HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + $adjust_left;
 $width = $this + 8 | 0;
 $add2 = (HEAP32[$width >> 2] | 0) - $adjust_left | 0;
 $y = $this + 4 | 0;
 HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + $adjust_top;
 $height = $this + 12 | 0;
 $add5 = (HEAP32[$height >> 2] | 0) - $adjust_top | 0;
 HEAP32[$width >> 2] = $add2 + $adjust_right;
 HEAP32[$height >> 2] = $add5 + $adjust_bottom;
 return;
}

function __ZNSt3__213__vector_baseI8DrBitmapNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $__end_$i$i = 0, $__soon_to_be_end$0$i$i = 0, $incdec$ptr$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $__soon_to_be_end$0$i$i = HEAP32[$__end_$i$i >> 2] | 0;
  while (1) {
   if (($__soon_to_be_end$0$i$i | 0) == ($0 | 0)) break;
   $incdec$ptr$i$i = $__soon_to_be_end$0$i$i + -28 | 0;
   __ZN8DrBitmapD2Ev($incdec$ptr$i$i);
   $__soon_to_be_end$0$i$i = $incdec$ptr$i$i;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  $2 = HEAP32[$this >> 2] | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 8 >> 2] | 0) - $2 | 0);
 }
 return;
}

function __sapp_emsc_end_drop($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $x$addr = sp + 4 | 0;
 $y$addr = sp;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 if (!(HEAP8[58968] & 1)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[14745] | 0)) {
  __sapp_clear_drop_buffer();
  STACKTOP = sp;
  return;
 }
 if (!(__sapp_events_enabled() | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[14734] = +(HEAP32[$x$addr >> 2] | 0) * +HEAPF32[14678];
 HEAPF32[14735] = +(HEAP32[$y$addr >> 2] | 0) * +HEAPF32[14678];
 HEAPF32[14736] = 0.0;
 HEAPF32[14737] = 0.0;
 __sapp_init_event(22);
 __sapp_call_event(58728) | 0;
 STACKTOP = sp;
 return;
}

function __saudio_ring_enqueue($ring, $val) {
 $ring = $ring | 0;
 $val = $val | 0;
 var $call2 = 0, $ring$addr = 0, $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ring$addr = sp + 4 | 0;
 $val$addr = sp;
 HEAP32[$ring$addr >> 2] = $ring;
 HEAP32[$val$addr >> 2] = $val;
 if (__saudio_ring_full(HEAP32[$ring$addr >> 2] | 0) | 0) ___assert_fail(44022, 26275, 824, 44047); else {
  HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 12 + (HEAP32[HEAP32[$ring$addr >> 2] >> 2] << 2) >> 2] = HEAP32[$val$addr >> 2];
  $call2 = __saudio_ring_idx(HEAP32[$ring$addr >> 2] | 0, (HEAP32[HEAP32[$ring$addr >> 2] >> 2] | 0) + 1 | 0) | 0;
  HEAP32[HEAP32[$ring$addr >> 2] >> 2] = $call2;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEERNS3_IS7_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 while (1) {
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -12 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($incdec$ptr$i$i$i);
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function _stbi__bitcount($a) {
 $a = $a | 0;
 var $a$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $a$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$a$addr >> 2] = (HEAP32[$a$addr >> 2] & 1431655765) + ((HEAP32[$a$addr >> 2] | 0) >>> 1 & 1431655765);
 HEAP32[$a$addr >> 2] = (HEAP32[$a$addr >> 2] & 858993459) + ((HEAP32[$a$addr >> 2] | 0) >>> 2 & 858993459);
 HEAP32[$a$addr >> 2] = (HEAP32[$a$addr >> 2] | 0) + ((HEAP32[$a$addr >> 2] | 0) >>> 4) & 252645135;
 HEAP32[$a$addr >> 2] = (HEAP32[$a$addr >> 2] | 0) + ((HEAP32[$a$addr >> 2] | 0) >>> 8);
 HEAP32[$a$addr >> 2] = (HEAP32[$a$addr >> 2] | 0) + ((HEAP32[$a$addr >> 2] | 0) >>> 16);
 STACKTOP = sp;
 return HEAP32[$a$addr >> 2] & 255 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $Printing = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $call = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 31]($1, $S) | 0;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else $retval$0 = $this;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbi__pic_test_core($s) {
 $s = $s | 0;
 var $2 = 0, $i = 0, $retval = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $s$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$s$addr >> 2] = $s;
 do if (_stbi__pic_is4(HEAP32[$s$addr >> 2] | 0, 47867) | 0) {
  HEAP32[$i >> 2] = 0;
  while (1) {
   $2 = HEAP32[$s$addr >> 2] | 0;
   if ((HEAP32[$i >> 2] | 0) >= 84) break;
   _stbi__get8($2) | 0;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  if (_stbi__pic_is4($2, 47872) | 0) {
   HEAP32[$retval >> 2] = 1;
   break;
  } else {
   HEAP32[$retval >> 2] = 0;
   break;
  }
 } else HEAP32[$retval >> 2] = 0; while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZNK8DrBitmap8getPixelEii($agg$result, $this, $x, $y) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $4 = 0, $add = 0, $arrayidx$i = 0, $data = 0, $mul = 0;
 $mul = Math_imul(HEAP32[$this + 8 >> 2] | 0, $y) | 0;
 $add = Math_imul($mul + $x | 0, HEAP32[$this + 4 >> 2] | 0) | 0;
 $data = $this + 16 | 0;
 if ((HEAP32[$this >> 2] | 0) == 1) {
  $arrayidx$i = (HEAP32[$data >> 2] | 0) + $add | 0;
  __ZN7DrColorC2ERKhS1_S1_S1_($agg$result, $arrayidx$i, $arrayidx$i, $arrayidx$i, $arrayidx$i);
 } else {
  $4 = HEAP32[$data >> 2] | 0;
  __ZN7DrColorC2ERKhS1_S1_S1_($agg$result, $4 + ($add + 2) | 0, $4 + ($add + 1) | 0, $4 + $add | 0, $4 + ($add + 3) | 0);
 }
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $Printing = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _pad_667($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $1 = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $pad = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $pad = sp;
 if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $sub = $w - $l | 0;
  _memset($pad | 0, $c << 24 >> 24 | 0, ($sub >>> 0 < 256 ? $sub : 256) | 0) | 0;
  if ($sub >>> 0 > 255) {
   $1 = $w - $l | 0;
   $l$addr$09 = $sub;
   do {
    _out($f, $pad, 256);
    $l$addr$09 = $l$addr$09 + -256 | 0;
   } while ($l$addr$09 >>> 0 > 255);
   $l$addr$0$lcssa = $1 & 255;
  } else $l$addr$0$lcssa = $sub;
  _out($f, $pad, $l$addr$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function __sapp_init_event($type) {
 $type = $type | 0;
 var $1 = 0, $6 = 0, $7 = 0, $type$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $type$addr = sp;
 HEAP32[$type$addr >> 2] = $type;
 _memset(58728, 0, 208) | 0;
 HEAP32[14684] = HEAP32[$type$addr >> 2];
 $1 = 58720;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = 58728;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[14689] = 256;
 HEAP32[14729] = HEAP32[14672];
 HEAP32[14730] = HEAP32[14673];
 HEAP32[14731] = HEAP32[14674];
 HEAP32[14732] = HEAP32[14675];
 HEAPF32[14690] = +HEAPF32[14734];
 HEAPF32[14691] = +HEAPF32[14735];
 HEAPF32[14692] = +HEAPF32[14736];
 HEAPF32[14693] = +HEAPF32[14737];
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __saudio_ring_dequeue($ring) {
 $ring = $ring | 0;
 var $call2 = 0, $ring$addr = 0, $val = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ring$addr = sp + 4 | 0;
 $val = sp;
 HEAP32[$ring$addr >> 2] = $ring;
 if (__saudio_ring_empty(HEAP32[$ring$addr >> 2] | 0) | 0) ___assert_fail(43975, 26275, 830, 44001); else {
  HEAP32[$val >> 2] = HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 12 + (HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 4 >> 2] << 2) >> 2];
  $call2 = __saudio_ring_idx(HEAP32[$ring$addr >> 2] | 0, (HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 4 >> 2] | 0) + 1 | 0) | 0;
  HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 4 >> 2] = $call2;
  STACKTOP = sp;
  return HEAP32[$val >> 2] | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $call | 0;
}

function _stbi__jpeg_get_bit($j) {
 $j = $j | 0;
 var $code_bits2 = 0, $code_buffer1 = 0, $j$addr = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $j$addr = sp + 4 | 0;
 $k = sp;
 HEAP32[$j$addr >> 2] = $j;
 if ((HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18368 >> 2] | 0) < 1) _stbi__grow_buffer_unsafe(HEAP32[$j$addr >> 2] | 0);
 HEAP32[$k >> 2] = HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18364 >> 2];
 $code_buffer1 = (HEAP32[$j$addr >> 2] | 0) + 18364 | 0;
 HEAP32[$code_buffer1 >> 2] = HEAP32[$code_buffer1 >> 2] << 1;
 $code_bits2 = (HEAP32[$j$addr >> 2] | 0) + 18368 | 0;
 HEAP32[$code_bits2 >> 2] = (HEAP32[$code_bits2 >> 2] | 0) + -1;
 STACKTOP = sp;
 return HEAP32[$k >> 2] & -2147483648 | 0;
}

function __sg_draw($base_element, $num_elements, $num_instances) {
 $base_element = $base_element | 0;
 $num_elements = $num_elements | 0;
 $num_instances = $num_instances | 0;
 var $base_element$addr = 0, $num_elements$addr = 0, $num_instances$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $base_element$addr = sp + 8 | 0;
 $num_elements$addr = sp + 4 | 0;
 $num_instances$addr = sp;
 HEAP32[$base_element$addr >> 2] = $base_element;
 HEAP32[$num_elements$addr >> 2] = $num_elements;
 HEAP32[$num_instances$addr >> 2] = $num_instances;
 __sg_gl_draw(HEAP32[$base_element$addr >> 2] | 0, HEAP32[$num_elements$addr >> 2] | 0, HEAP32[$num_instances$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($agg$result, $this, $begin, $end) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $begin = $begin | 0;
 $end = $end | 0;
 var $call = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0;
 $sub$ptr$sub = $end - $begin | 0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $call = __ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm($this + 368 | 0, $sub$ptr$div) | 0;
 if ($sub$ptr$sub | 0) _memmove($call | 0, $begin | 0, $sub$ptr$sub | 0) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm($agg$result, $call, $sub$ptr$div);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $Printing = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _fons__hashint($a) {
 $a = $a | 0;
 var $a$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $a$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$a$addr >> 2] = (HEAP32[$a$addr >> 2] | 0) + ~(HEAP32[$a$addr >> 2] << 15);
 HEAP32[$a$addr >> 2] = HEAP32[$a$addr >> 2] ^ (HEAP32[$a$addr >> 2] | 0) >>> 10;
 HEAP32[$a$addr >> 2] = (HEAP32[$a$addr >> 2] | 0) + (HEAP32[$a$addr >> 2] << 3);
 HEAP32[$a$addr >> 2] = HEAP32[$a$addr >> 2] ^ (HEAP32[$a$addr >> 2] | 0) >>> 6;
 HEAP32[$a$addr >> 2] = (HEAP32[$a$addr >> 2] | 0) + ~(HEAP32[$a$addr >> 2] << 11);
 HEAP32[$a$addr >> 2] = HEAP32[$a$addr >> 2] ^ (HEAP32[$a$addr >> 2] | 0) >>> 16;
 STACKTOP = sp;
 return HEAP32[$a$addr >> 2] | 0;
}

function _strtox_735($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $f = 0, $rpos = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $rpos = $f + 4 | 0;
 HEAP32[$rpos >> 2] = $s;
 HEAP32[$f + 44 >> 2] = $s;
 $2 = $f + 8 | 0;
 HEAP32[$2 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0, 0);
 $3 = ___intscan($f, $base, 1, $0, $1) | 0;
 $4 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = $s + ((HEAP32[$rpos >> 2] | 0) + (HEAP32[$f + 120 >> 2] | 0) - (HEAP32[$2 >> 2] | 0));
 setTempRet0($4 | 0);
 STACKTOP = sp;
 return $3 | 0;
}

function __sgl_pipeline_at($pip_id) {
 $pip_id = $pip_id | 0;
 var $pip_id$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip_id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$pip_id$addr >> 2] = $pip_id;
 if (!(HEAP32[$pip_id$addr >> 2] | 0)) ___assert_fail(41747, 23371, 2195, 41771);
 HEAP32[$slot_index >> 2] = __sgl_slot_index(HEAP32[$pip_id$addr >> 2] | 0) | 0;
 if ((HEAP32[$slot_index >> 2] | 0) <= 0) ___assert_fail(41788, 23371, 2197, 41771);
 if ((HEAP32[$slot_index >> 2] | 0) < (HEAP32[541433] | 0)) {
  STACKTOP = sp;
  return (HEAP32[541437] | 0) + (HEAP32[$slot_index >> 2] << 5) | 0;
 } else ___assert_fail(41788, 23371, 2197, 41771);
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $Printing = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEElLb0EEclEv($agg$result) {
 $agg$result = $agg$result | 0;
 var $__i$0$i$i = 0, $cond$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if ((HEAP8[$agg$result + 11 >> 0] | 0) < 0) $cond$i = (HEAP32[$agg$result + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($agg$result, $cond$i, 0);
 return;
}

function __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($agg$result) {
 $agg$result = $agg$result | 0;
 var $__i$0$i$i = 0, $cond$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if ((HEAP8[$agg$result + 11 >> 0] | 0) < 0) $cond$i = (HEAP32[$agg$result + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($agg$result, $cond$i, 0);
 return;
}

function __sg_gl_filter($f) {
 $f = $f | 0;
 var $f$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $f$addr = sp;
 HEAP32[$f$addr >> 2] = $f;
 switch (HEAP32[$f$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 9728;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 9729;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 9984;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 9986;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = 9985;
   break;
  }
 case 6:
  {
   HEAP32[$retval >> 2] = 9987;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4571, 37404);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9push_backERKS2_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $10 = 0, $5 = 0, $6 = 0, $__value_$i$i$i13 = 0, $call$i$i$i$i = 0;
 $call$i$i$i$i = __Znwm(16) | 0;
 $0 = $__x;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $call$i$i$i$i + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$call$i$i$i$i + 4 >> 2] = $this;
 $10 = HEAP32[$this >> 2] | 0;
 HEAP32[$call$i$i$i$i >> 2] = $10;
 HEAP32[$10 + 4 >> 2] = $call$i$i$i$i;
 HEAP32[$this >> 2] = $call$i$i$i$i;
 $__value_$i$i$i13 = $this + 8 | 0;
 HEAP32[$__value_$i$i$i13 >> 2] = (HEAP32[$__value_$i$i$i13 >> 2] | 0) + 1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_($this, $IsLeftFold_, $OperatorName_, $Pack_, $Init_) {
 $this = $this | 0;
 $IsLeftFold_ = $IsLeftFold_ | 0;
 $OperatorName_ = $OperatorName_ | 0;
 $Pack_ = $Pack_ | 0;
 $Init_ = $Init_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 57, 1, 1, 1);
 HEAP32[$this >> 2] = 15092;
 HEAP32[$this + 8 >> 2] = $Pack_;
 HEAP32[$this + 12 >> 2] = $Init_;
 $0 = $OperatorName_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 16 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP8[$this + 24 >> 0] = $IsLeftFold_ & 1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this, $args, $args1, $args3, $args5, $args7, $args9) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 $args9 = $args9 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5, $args7, $args9) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 127]($0, $S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52157);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return;
}

function __sfetch_path_copy($dst, $src) {
 $dst = $dst | 0;
 $src = $src | 0;
 var $dst$addr = 0, $src$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dst$addr = sp + 4 | 0;
 $src$addr = sp;
 HEAP32[$dst$addr >> 2] = $dst;
 HEAP32[$src$addr >> 2] = $src;
 if (!(HEAP32[$dst$addr >> 2] | 0)) ___assert_fail(37974, 25510, 1208, 43060);
 if (HEAP32[$src$addr >> 2] | 0) if ((_strlen(HEAP32[$src$addr >> 2] | 0) | 0) >>> 0 < 1024) {
  _strncpy(HEAP32[$dst$addr >> 2] | 0, HEAP32[$src$addr >> 2] | 0, 1024) | 0;
  HEAP8[(HEAP32[$dst$addr >> 2] | 0) + 1023 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 _memset(HEAP32[$dst$addr >> 2] | 0, 0, 1024) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE18__construct_at_endIPKS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m($this, $__first, $__last, $__n) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__n = $__n | 0;
 var $__begin1$addr$0$i = 0, $__end_ = 0;
 $__end_ = $this + 4 | 0;
 $__begin1$addr$0$i = $__first;
 while (1) {
  if (($__begin1$addr$0$i | 0) == ($__last | 0)) break;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_(HEAP32[$__end_ >> 2] | 0, $__begin1$addr$0$i);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 12;
  $__begin1$addr$0$i = $__begin1$addr$0$i + 12 | 0;
 }
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52892);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 127]($0, $S);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 54525);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m($this, $__first, $__last, $__n) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__n = $__n | 0;
 var $__begin1$addr$0$i = 0, $__end_ = 0;
 $__end_ = $this + 4 | 0;
 $__begin1$addr$0$i = $__first;
 while (1) {
  if (($__begin1$addr$0$i | 0) == ($__last | 0)) break;
  __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEC2ERKS4_(HEAP32[$__end_ >> 2] | 0, $__begin1$addr$0$i);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 12;
  $__begin1$addr$0$i = $__begin1$addr$0$i + 12 | 0;
 }
 return;
}

function __sgl_lookup_pipeline($pip_id) {
 $pip_id = $pip_id | 0;
 var $6 = 0, $pip = 0, $pip_id$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $pip_id$addr = sp + 4 | 0;
 $pip = sp;
 HEAP32[$pip_id$addr >> 2] = $pip_id;
 if (HEAP32[$pip_id$addr >> 2] | 0) {
  HEAP32[$pip >> 2] = __sgl_pipeline_at(HEAP32[$pip_id$addr >> 2] | 0) | 0;
  if ((HEAP32[HEAP32[$pip >> 2] >> 2] | 0) == (HEAP32[$pip_id$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = HEAP32[$pip >> 2];
   $6 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $6 | 0;
  }
 }
 HEAP32[$retval >> 2] = 0;
 $6 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 53905);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_($this, $Elem) {
 $this = $this | 0;
 $Elem = $Elem | 0;
 var $0 = 0, $2 = 0, $3 = 0, $Last = 0;
 $Last = $this + 4 | 0;
 $0 = HEAP32[$Last >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 8 >> 2] | 0)) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm($this, (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this) | 0) << 1);
  $3 = HEAP32[$Last >> 2] | 0;
 } else $3 = $0;
 $2 = HEAP32[$Elem >> 2] | 0;
 HEAP32[$Last >> 2] = $3 + 4;
 HEAP32[$3 >> 2] = $2;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 55328);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $call1 = 0, $call113 = 0, $cond9 = 0, $mul = 0, $phitmp = 0, $spec$select = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $spec$select = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fwritex($src, $mul, $f) | 0;
  if ($phitmp) $call113 = $call1; else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else $call113 = ___fwritex($src, $mul, $f) | 0;
 if (($call113 | 0) == ($mul | 0)) $cond9 = $spec$select; else $cond9 = ($call113 >>> 0) / ($size >>> 0) | 0;
 return $cond9 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 54445);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferINS_6vectorI8DrPointFNS_9allocatorIS2_EEEERNS3_IS5_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 while (1) {
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -12 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($incdec$ptr$i$i$i);
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function _HMM_LengthSquaredVec3($A) {
 $A = $A | 0;
 var $A$byval_copy = 0, $A$byval_copy1 = 0, $Result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $A$byval_copy1 = sp + 16 | 0;
 $A$byval_copy = sp + 4 | 0;
 $Result = sp;
 HEAP32[$A$byval_copy >> 2] = HEAP32[$A >> 2];
 HEAP32[$A$byval_copy + 4 >> 2] = HEAP32[$A + 4 >> 2];
 HEAP32[$A$byval_copy + 8 >> 2] = HEAP32[$A + 8 >> 2];
 HEAP32[$A$byval_copy1 >> 2] = HEAP32[$A >> 2];
 HEAP32[$A$byval_copy1 + 4 >> 2] = HEAP32[$A + 4 >> 2];
 HEAP32[$A$byval_copy1 + 8 >> 2] = HEAP32[$A + 8 >> 2];
 HEAPF32[$Result >> 2] = +_HMM_DotVec3($A$byval_copy, $A$byval_copy1);
 STACKTOP = sp;
 return +(+HEAPF32[$Result >> 2]);
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52996);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 STACKTOP = sp;
 return;
}

function _sgl_v2f_t2f_c1i($x, $y, $u, $v, $rgba) {
 $x = +$x;
 $y = +$y;
 $u = +$u;
 $v = +$v;
 $rgba = $rgba | 0;
 var $rgba$addr = 0, $u$addr = 0, $v$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $x$addr = sp + 16 | 0;
 $y$addr = sp + 12 | 0;
 $u$addr = sp + 8 | 0;
 $v$addr = sp + 4 | 0;
 $rgba$addr = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$u$addr >> 2] = $u;
 HEAPF32[$v$addr >> 2] = $v;
 HEAP32[$rgba$addr >> 2] = $rgba;
 __sgl_vtx(+HEAPF32[$x$addr >> 2], +HEAPF32[$y$addr >> 2], 0.0, +HEAPF32[$u$addr >> 2], +HEAPF32[$v$addr >> 2], HEAP32[$rgba$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $l$addr$010 = 0, $r$addr$011 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $1;
  $$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;
  $r$addr$011 = $r;
  do {
   $l$addr$010 = $l$addr$010 + 1 | 0;
   $r$addr$011 = $r$addr$011 + 1 | 0;
   $2 = HEAP8[$l$addr$010 >> 0] | 0;
   $3 = HEAP8[$r$addr$011 >> 0] | 0;
  } while (!($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24));
  $$lcssa = $3;
  $$lcssa6 = $2;
 }
 return ($$lcssa6 & 255) - ($$lcssa & 255) | 0;
}

function __sfetch_channel_discard($chn) {
 $chn = $chn | 0;
 var $chn$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $chn$addr = sp;
 HEAP32[$chn$addr >> 2] = $chn;
 if (HEAP32[$chn$addr >> 2] | 0) {
  __sfetch_ring_discard((HEAP32[$chn$addr >> 2] | 0) + 4 | 0);
  __sfetch_ring_discard((HEAP32[$chn$addr >> 2] | 0) + 20 | 0);
  __sfetch_ring_discard((HEAP32[$chn$addr >> 2] | 0) + 36 | 0);
  __sfetch_ring_discard((HEAP32[$chn$addr >> 2] | 0) + 52 | 0);
  __sfetch_ring_discard((HEAP32[$chn$addr >> 2] | 0) + 4 | 0);
  HEAP8[(HEAP32[$chn$addr >> 2] | 0) + 72 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(42331, 25510, 2096, 42335);
}

function __ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $5 = 0, $6 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$tmp;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Data = 0, $call3 = 0, $cond = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) {
  $call3 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
  $cond = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call3 >> 2] | 0) + 12 >> 2] & 31]($call3, $S) | 0;
 } else $cond = $this;
 return $cond | 0;
}

function __sg_gl_cache_restore_buffer_binding($target) {
 $target = $target | 0;
 var $target$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $target$addr = sp;
 HEAP32[$target$addr >> 2] = $target;
 if ((HEAP32[$target$addr >> 2] | 0) == 34962) {
  if (!(HEAP32[541320] | 0)) {
   STACKTOP = sp;
   return;
  }
  __sg_gl_cache_bind_buffer(HEAP32[$target$addr >> 2] | 0, HEAP32[541320] | 0);
  HEAP32[541320] = 0;
  STACKTOP = sp;
  return;
 } else {
  if (!(HEAP32[541321] | 0)) {
   STACKTOP = sp;
   return;
  }
  __sg_gl_cache_bind_buffer(HEAP32[$target$addr >> 2] | 0, HEAP32[541321] | 0);
  HEAP32[541321] = 0;
  STACKTOP = sp;
  return;
 }
}

function __ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp;
 if (!(HEAP8[$this + 8 >> 0] | 0)) __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52712); else __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 52707);
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0, totalMemory = 0;
 totalMemory = _emscripten_get_heap_size() | 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory(newDynamicTop | 0) | 0;
  ___setErrNo(12);
  return -1;
 }
 if ((newDynamicTop | 0) > (totalMemory | 0)) if (_emscripten_resize_heap(newDynamicTop | 0) | 0) {} else {
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 return oldDynamicTop | 0;
}

function __sg_is_valid_rendertarget_depth_format($fmt) {
 $fmt = $fmt | 0;
 var $7 = 0, $fmt$addr = 0, $fmt_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $fmt$addr = sp + 4 | 0;
 $fmt_index = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 HEAP32[$fmt_index >> 2] = HEAP32[$fmt$addr >> 2];
 if (!((HEAP32[$fmt_index >> 2] | 0) >= 0 & (HEAP32[$fmt_index >> 2] | 0) < 62)) ___assert_fail(36810, 21600, 3892, 36864);
 if (!(HEAP8[2164412 + ((HEAP32[$fmt_index >> 2] | 0) * 6 | 0) + 2 >> 0] & 1)) {
  $7 = 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 $7 = HEAP8[2164412 + ((HEAP32[$fmt_index >> 2] | 0) * 6 | 0) + 5 >> 0] & 1;
 STACKTOP = sp;
 return $7 | 0;
}

function __sg_gl_destroy_shader($shd) {
 $shd = $shd | 0;
 var $shd$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $shd$addr = sp;
 HEAP32[$shd$addr >> 2] = $shd;
 if (!(HEAP32[$shd$addr >> 2] | 0)) ___assert_fail(29914, 21600, 6097, 29918);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6098, 29918);
 if (HEAP32[(HEAP32[$shd$addr >> 2] | 0) + 252 >> 2] | 0) {
  __sg_gl_cache_invalidate_program(HEAP32[(HEAP32[$shd$addr >> 2] | 0) + 252 >> 2] | 0);
  _glDeleteProgram(HEAP32[(HEAP32[$shd$addr >> 2] | 0) + 252 >> 2] | 0);
 }
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(29811, 21600, 6103, 29918);
}

function __ZNSt3__211__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $__x$addr$0 = 0, $__x$addr$0$i = 0, $retval$0 = 0, $__x$addr$0$looptemp = 0;
 $0 = HEAP32[$__x + 4 >> 2] | 0;
 if (!$0) {
  $__x$addr$0 = $__x;
  do {
   $__x$addr$0$looptemp = $__x$addr$0;
   $__x$addr$0 = HEAP32[$__x$addr$0 + 8 >> 2] | 0;
  } while ((HEAP32[$__x$addr$0 >> 2] | 0) != ($__x$addr$0$looptemp | 0));
  $retval$0 = $__x$addr$0;
 } else {
  $__x$addr$0$i = $0;
  while (1) {
   $1 = HEAP32[$__x$addr$0$i >> 2] | 0;
   if (!$1) {
    $retval$0 = $__x$addr$0$i;
    break;
   } else $__x$addr$0$i = $1;
  }
 }
 return $retval$0 | 0;
}

function __Z9in_circledddddddd($ax, $ay, $bx, $by, $cx, $cy, $px, $py) {
 $ax = +$ax;
 $ay = +$ay;
 $bx = +$bx;
 $by = +$by;
 $cx = +$cx;
 $cy = +$cy;
 $px = +$px;
 $py = +$py;
 var $add12 = 0.0, $add9 = 0.0, $sub = 0.0, $sub1 = 0.0, $sub2 = 0.0, $sub3 = 0.0, $sub4 = 0.0, $sub5 = 0.0;
 $sub = $ax - $px;
 $sub1 = $ay - $py;
 $sub2 = $bx - $px;
 $sub3 = $by - $py;
 $sub4 = $cx - $px;
 $sub5 = $cy - $py;
 $add9 = $sub2 * $sub2 + $sub3 * $sub3;
 $add12 = $sub4 * $sub4 + $sub5 * $sub5;
 return ($sub * $sub + $sub1 * $sub1) * ($sub2 * $sub5 - $sub4 * $sub3) + ($sub * ($sub3 * $add12 - $sub5 * $add9) - $sub1 * ($sub2 * $add12 - $sub4 * $add9)) < 0.0 | 0;
}

function _stbi__mul2sizes_valid($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $a$addr = 0, $b$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $a$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 do if ((HEAP32[$a$addr >> 2] | 0) < 0 | (HEAP32[$b$addr >> 2] | 0) < 0) HEAP32[$retval >> 2] = 0; else if (!(HEAP32[$b$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = 1;
  break;
 } else {
  HEAP32[$retval >> 2] = (HEAP32[$a$addr >> 2] | 0) <= (2147483647 / (HEAP32[$b$addr >> 2] | 0) | 0 | 0) & 1;
  break;
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE($this, $Params_, $Count_) {
 $this = $this | 0;
 $Params_ = $Params_ | 0;
 $Count_ = $Count_ | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 40, 1, 1, 1);
 HEAP32[$this >> 2] = 15356;
 $0 = $Params_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $Count_;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $this + 16 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 return;
}

function __Z12circumcenterdddddd($agg$result, $ax, $ay, $bx, $by, $cx, $cy) {
 $agg$result = $agg$result | 0;
 $ax = +$ax;
 $ay = +$ay;
 $bx = +$bx;
 $by = +$by;
 $cx = +$cx;
 $cy = +$cy;
 var $add = 0.0, $add7 = 0.0, $sub = 0.0, $sub1 = 0.0, $sub10 = 0.0, $sub2 = 0.0, $sub3 = 0.0;
 $sub = $bx - $ax;
 $sub1 = $by - $ay;
 $sub2 = $cx - $ax;
 $sub3 = $cy - $ay;
 $add = $sub * $sub + $sub1 * $sub1;
 $add7 = $sub2 * $sub2 + $sub3 * $sub3;
 $sub10 = $sub * $sub3 - $sub1 * $sub2;
 HEAPF64[$agg$result >> 3] = ($sub3 * $add - $sub1 * $add7) * .5 / $sub10 + $ax;
 HEAPF64[$agg$result + 8 >> 3] = ($sub * $add7 - $sub2 * $add) * .5 / $sub10 + $ay;
 return;
}

function _stbtt__hheap_cleanup($hh, $userdata) {
 $hh = $hh | 0;
 $userdata = $userdata | 0;
 var $c = 0, $hh$addr = 0, $n = 0, $userdata$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $hh$addr = sp + 12 | 0;
 $userdata$addr = sp + 8 | 0;
 $c = sp + 4 | 0;
 $n = sp;
 HEAP32[$hh$addr >> 2] = $hh;
 HEAP32[$userdata$addr >> 2] = $userdata;
 HEAP32[$c >> 2] = HEAP32[HEAP32[$hh$addr >> 2] >> 2];
 while (1) {
  if (!(HEAP32[$c >> 2] | 0)) break;
  HEAP32[$n >> 2] = HEAP32[HEAP32[$c >> 2] >> 2];
  _fons__tmpfree(HEAP32[$c >> 2] | 0, HEAP32[$userdata$addr >> 2] | 0);
  HEAP32[$c >> 2] = HEAP32[$n >> 2];
 }
 STACKTOP = sp;
 return;
}

function __sgl_identity($m) {
 $m = $m | 0;
 var $c = 0, $m$addr = 0, $r = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $m$addr = sp + 8 | 0;
 $c = sp + 4 | 0;
 $r = sp;
 HEAP32[$m$addr >> 2] = $m;
 HEAP32[$c >> 2] = 0;
 while (1) {
  if ((HEAP32[$c >> 2] | 0) >= 4) break;
  HEAP32[$r >> 2] = 0;
  while (1) {
   if ((HEAP32[$r >> 2] | 0) >= 4) break;
   HEAPF32[(HEAP32[$m$addr >> 2] | 0) + (HEAP32[$c >> 2] << 4) + (HEAP32[$r >> 2] << 2) >> 2] = (HEAP32[$r >> 2] | 0) == (HEAP32[$c >> 2] | 0) ? 1.0 : 0.0;
   HEAP32[$r >> 2] = (HEAP32[$r >> 2] | 0) + 1;
  }
  HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbi__zget8($z) {
 $z = $z | 0;
 var $4 = 0, $5 = 0, $7 = 0, $retval = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $z$addr = sp;
 HEAP32[$z$addr >> 2] = $z;
 if ((HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  HEAP8[$retval >> 0] = 0;
  $7 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $7 | 0;
 } else {
  $4 = HEAP32[$z$addr >> 2] | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + 1;
  HEAP8[$retval >> 0] = HEAP8[$5 >> 0] | 0;
  $7 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 return 0;
}

function __ZN6DrVec314triangleNormalERKS_S1_S1_($agg$result, $point_1, $point_2, $point_3) {
 $agg$result = $agg$result | 0;
 $point_1 = $point_1 | 0;
 $point_2 = $point_2 | 0;
 $point_3 = $point_3 | 0;
 var $n = 0, $ref$tmp = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $n = sp + 24 | 0;
 $tmp = sp;
 $ref$tmp = sp + 12 | 0;
 __ZNK6DrVec3miERKS_($tmp, $point_1, $point_2);
 __ZNK6DrVec3miERKS_($ref$tmp, $point_2, $point_3);
 __ZNK6DrVec3rmERKS_($n, $tmp, $ref$tmp);
 +__ZN6DrVec39normalizeEv($n);
 __ZN6DrVec3C2Efff($agg$result, +HEAPF32[$n >> 2], +HEAPF32[$n + 4 >> 2], +HEAPF32[$n + 8 >> 2]);
 STACKTOP = sp;
 return;
}

function _HMM_SubtractVec3($agg$result, $Left, $Right) {
 $agg$result = $agg$result | 0;
 $Left = $Left | 0;
 $Right = $Right | 0;
 var $Result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Result = sp;
 HEAPF32[$Result >> 2] = +HEAPF32[$Left >> 2] - +HEAPF32[$Right >> 2];
 HEAPF32[$Result + 4 >> 2] = +HEAPF32[$Left + 4 >> 2] - +HEAPF32[$Right + 4 >> 2];
 HEAPF32[$Result + 8 >> 2] = +HEAPF32[$Left + 8 >> 2] - +HEAPF32[$Right + 8 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$Result >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$Result + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$Result + 8 >> 2];
 STACKTOP = sp;
 return;
}

function __sg_dealloc_pipeline($pip_id) {
 $pip_id = $pip_id | 0;
 var $pip = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip = sp;
 if (!(HEAP32[$pip_id >> 2] | 0)) ___assert_fail(22163, 21600, 14081, 30749);
 HEAP32[$pip >> 2] = __sg_lookup_pipeline(2164252, HEAP32[$pip_id >> 2] | 0) | 0;
 if (!(HEAP32[$pip >> 2] | 0)) ___assert_fail(22190, 21600, 14083, 30749);
 if ((HEAP32[(HEAP32[$pip >> 2] | 0) + 8 >> 2] | 0) == 1) {
  __sg_reset_slot(HEAP32[$pip >> 2] | 0);
  __sg_pool_free_index(2164300, __sg_slot_index(HEAP32[$pip_id >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(22190, 21600, 14083, 30749);
}

function __ZN8DrBitmapC2EPKhRKibii($this, $from_data, $number_of_bytes, $compressed, $width_, $height_) {
 $this = $this | 0;
 $from_data = $from_data | 0;
 $number_of_bytes = $number_of_bytes | 0;
 $compressed = $compressed | 0;
 $width_ = $width_ | 0;
 $height_ = $height_ | 0;
 var $width = 0;
 HEAP32[$this >> 2] = 4;
 HEAP32[$this + 4 >> 2] = 4;
 $width = $this + 8 | 0;
 HEAP32[$width >> 2] = 0;
 HEAP32[$width + 4 >> 2] = 0;
 HEAP32[$width + 8 >> 2] = 0;
 HEAP32[$width + 12 >> 2] = 0;
 HEAP32[$width + 16 >> 2] = 0;
 __ZN8DrBitmap14loadFromMemoryEPKhRKibii($this, $from_data, $number_of_bytes, $compressed, $width_, $height_);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5, $args7) | 0;
}

function _fmt_x($0, $1, $s, $lower) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 $lower = $lower | 0;
 var $5 = 0, $7 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $5 = $0;
  $7 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = HEAPU8[10640 + ($5 & 15) >> 0] | 0 | $lower;
   $5 = _bitshift64Lshr($5 | 0, $7 | 0, 4) | 0;
   $7 = getTempRet0() | 0;
   if (($5 | 0) == 0 & ($7 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 3]($1, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __sg_dealloc_shader($shd_id) {
 $shd_id = $shd_id | 0;
 var $shd = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $shd = sp;
 if (!(HEAP32[$shd_id >> 2] | 0)) ___assert_fail(22087, 21600, 14073, 30730);
 HEAP32[$shd >> 2] = __sg_lookup_shader(2164252, HEAP32[$shd_id >> 2] | 0) | 0;
 if (!(HEAP32[$shd >> 2] | 0)) ___assert_fail(22114, 21600, 14075, 30730);
 if ((HEAP32[(HEAP32[$shd >> 2] | 0) + 8 >> 2] | 0) == 1) {
  __sg_reset_slot(HEAP32[$shd >> 2] | 0);
  __sg_pool_free_index(2164284, __sg_slot_index(HEAP32[$shd_id >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(22114, 21600, 14075, 30730);
}

function __sg_dealloc_buffer($buf_id) {
 $buf_id = $buf_id | 0;
 var $buf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 if (!(HEAP32[$buf_id >> 2] | 0)) ___assert_fail(21935, 21600, 14057, 30693);
 HEAP32[$buf >> 2] = __sg_lookup_buffer(2164252, HEAP32[$buf_id >> 2] | 0) | 0;
 if (!(HEAP32[$buf >> 2] | 0)) ___assert_fail(21962, 21600, 14059, 30693);
 if ((HEAP32[(HEAP32[$buf >> 2] | 0) + 8 >> 2] | 0) == 1) {
  __sg_reset_slot(HEAP32[$buf >> 2] | 0);
  __sg_pool_free_index(2164252, __sg_slot_index(HEAP32[$buf_id >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(21962, 21600, 14059, 30693);
}

function __sg_dealloc_image($img_id) {
 $img_id = $img_id | 0;
 var $img = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $img = sp;
 if (!(HEAP32[$img_id >> 2] | 0)) ___assert_fail(22011, 21600, 14065, 30712);
 HEAP32[$img >> 2] = __sg_lookup_image(2164252, HEAP32[$img_id >> 2] | 0) | 0;
 if (!(HEAP32[$img >> 2] | 0)) ___assert_fail(22038, 21600, 14067, 30712);
 if ((HEAP32[(HEAP32[$img >> 2] | 0) + 8 >> 2] | 0) == 1) {
  __sg_reset_slot(HEAP32[$img >> 2] | 0);
  __sg_pool_free_index(2164268, __sg_slot_index(HEAP32[$img_id >> 2] | 0) | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(22038, 21600, 14067, 30712);
}

function __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($this) {
 $this = $this | 0;
 var $1 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 __ZN12_GLOBAL__N_112OutputStreampLEc(HEAP32[$this >> 2] | 0, 40);
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($ref$tmp, HEAP32[$1 + 8 >> 2] | 0);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($ref$tmp, HEAP32[$this >> 2] | 0);
 __ZN12_GLOBAL__N_112OutputStreampLEc(HEAP32[$this >> 2] | 0, 41);
 STACKTOP = sp;
 return;
}

function __ZN7compareclEmm($this, $i, $j) {
 $this = $this | 0;
 $i = $i | 0;
 $j = $j | 0;
 var $1 = 0, $5 = 0, $mul = 0, $mul6 = 0, $sub = 0.0, $sub8 = 0.0;
 $1 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
 $sub = +HEAPF64[$1 + ($i << 3) >> 3] - +HEAPF64[$1 + ($j << 3) >> 3];
 $mul = $i << 1;
 $5 = HEAP32[HEAP32[$this + 4 >> 2] >> 2] | 0;
 $mul6 = $j << 1;
 $sub8 = +HEAPF64[$5 + ($mul << 3) >> 3] - +HEAPF64[$5 + ($mul6 << 3) >> 3];
 return ($sub != $sub | 0.0 != 0.0 | $sub == 0.0 ? ($sub8 != $sub8 | 0.0 != 0.0 | $sub8 == 0.0 ? +HEAPF64[$5 + (($mul | 1) << 3) >> 3] - +HEAPF64[$5 + (($mul6 | 1) << 3) >> 3] : $sub8) : $sub) < 0.0 | 0;
}

function _stbtt__buf_peek8($b) {
 $b = $b | 0;
 var $9 = 0, $b$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$b$addr >> 2] = $b;
 if ((HEAP32[(HEAP32[$b$addr >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP8[$retval >> 0] = 0;
  $9 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $9 | 0;
 } else {
  HEAP8[$retval >> 0] = HEAP8[(HEAP32[HEAP32[$b$addr >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 4 >> 2] | 0) >> 0] | 0;
  $9 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $9 | 0;
 }
 return 0;
}

function __ZN13TPPLPartition6InConeER9TPPLPointS1_S1_S1_($this, $p1, $p2, $p3, $p) {
 $this = $this | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $p3 = $p3 | 0;
 $p = $p | 0;
 var $call = 0, $call2 = 0, $retval$0 = 0;
 $call = __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $p1, $p2, $p3) | 0;
 $call2 = __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $p1, $p2, $p) | 0;
 if ($call) if ($call2) $retval$0 = __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $p2, $p3, $p) | 0; else $retval$0 = 0; else if ($call2) $retval$0 = 1; else $retval$0 = __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $p2, $p3, $p) | 0;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_($this, $Type_, $Value_) {
 $this = $this | 0;
 $Type_ = $Type_ | 0;
 $Value_ = $Value_ | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 61, 1, 1, 1);
 HEAP32[$this >> 2] = 13904;
 $0 = $Type_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $Value_;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $this + 16 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $1 = 0, $Data = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) $1 = __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0, $S) | 0; else $1 = 0;
 return $1 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $ref$tmp = 0, $ref$tmp3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp + 8 | 0;
 $ref$tmp3 = sp;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ((__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0) << 24 >> 24 == 7) {
  __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv($ref$tmp, $0);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp3, 52216);
  $1 = __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($ref$tmp, $ref$tmp3) | 0;
 } else $1 = 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __sg_gl_primitive_type($t) {
 $t = $t | 0;
 var $retval = 0, $t$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $t$addr = sp;
 HEAP32[$t$addr >> 2] = $t;
 switch (HEAP32[$t$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 0;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 1;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 3;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 4;
   break;
  }
 case 5:
  {
   HEAP32[$retval >> 2] = 5;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4492, 40078);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __sapp_translate_key($scan_code) {
 $scan_code = $scan_code | 0;
 var $4 = 0, $retval = 0, $scan_code$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $scan_code$addr = sp;
 HEAP32[$scan_code$addr >> 2] = $scan_code;
 if ((HEAP32[$scan_code$addr >> 2] | 0) >= 0 & (HEAP32[$scan_code$addr >> 2] | 0) < 512) {
  HEAP32[$retval >> 2] = HEAP32[59764 + (HEAP32[$scan_code$addr >> 2] << 2) >> 2];
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function _stbtt__csctx_close_shape($ctx) {
 $ctx = $ctx | 0;
 var $ctx$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 if (!(+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 8 >> 2] != +HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 16 >> 2])) if (!(+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 12 >> 2] != +HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 20 >> 2])) {
  STACKTOP = sp;
  return;
 }
 _stbtt__csctx_v(HEAP32[$ctx$addr >> 2] | 0, 2, ~~+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 8 >> 2], ~~+HEAPF32[(HEAP32[$ctx$addr >> 2] | 0) + 12 >> 2], 0, 0, 0, 0);
 STACKTOP = sp;
 return;
}

function _stbi__addsizes_valid($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $3 = 0, $a$addr = 0, $b$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $a$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 if ((HEAP32[$b$addr >> 2] | 0) < 0) {
  HEAP32[$retval >> 2] = 0;
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else {
  HEAP32[$retval >> 2] = (HEAP32[$a$addr >> 2] | 0) <= (2147483647 - (HEAP32[$b$addr >> 2] | 0) | 0) & 1;
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this, $Elem) {
 $this = $this | 0;
 $Elem = $Elem | 0;
 var $0 = 0, $2 = 0, $3 = 0, $Last = 0;
 $Last = $this + 4 | 0;
 $0 = HEAP32[$Last >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 8 >> 2] | 0)) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm($this, (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this) | 0) << 1);
  $3 = HEAP32[$Last >> 2] | 0;
 } else $3 = $0;
 $2 = HEAP32[$Elem >> 2] | 0;
 HEAP32[$Last >> 2] = $3 + 4;
 HEAP32[$3 >> 2] = $2;
 return;
}

function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($this) {
 $this = $this | 0;
 var $0 = 0, $call2 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($0) | 0) {
  $call2 = __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($0, 0) | 0;
  if ($call2 << 24 >> 24 != 69) return $call2 << 24 >> 24 == 46 | $call2 << 24 >> 24 == 95 | 0;
 }
 return 1;
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE5eraseENS_21__list_const_iteratorIS1_PvEE($this, $__p) {
 $this = $this | 0;
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__next_ = 0, $__value_$i$i$i = 0;
 $0 = HEAP32[$__p >> 2] | 0;
 $__next_ = $0 + 4 | 0;
 $1 = HEAP32[$__next_ >> 2] | 0;
 $2 = HEAP32[$0 >> 2] | 0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[HEAP32[$__next_ >> 2] >> 2] = $2;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = (HEAP32[$__value_$i$i$i >> 2] | 0) + -1;
 __ZN8TPPLPolyD2Ev($0 + 8 | 0);
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, 20);
 return $1 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $1 = 0, $Data = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) $1 = __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0, $S) | 0; else $1 = 0;
 return $1 | 0;
}

function __sg_begin_pass($pass, $action, $w, $h) {
 $pass = $pass | 0;
 $action = $action | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $action$addr = 0, $h$addr = 0, $pass$addr = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pass$addr = sp + 12 | 0;
 $action$addr = sp + 8 | 0;
 $w$addr = sp + 4 | 0;
 $h$addr = sp;
 HEAP32[$pass$addr >> 2] = $pass;
 HEAP32[$action$addr >> 2] = $action;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 __sg_gl_begin_pass(HEAP32[$pass$addr >> 2] | 0, HEAP32[$action$addr >> 2] | 0, HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE7reserveEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $__v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $1 = HEAP32[$this >> 2] | 0;
 if ((HEAP32[$this + 8 >> 2] | 0) - $1 >> 2 >>> 0 < $__n >>> 0) {
  __ZNSt3__214__split_bufferImRNS_9allocatorImEEEC2EmmS3_($__v, $__n, (HEAP32[$this + 4 >> 2] | 0) - $1 >> 2, $this + 8 | 0);
  __ZNSt3__26vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE($this, $__v);
  __ZNSt3__214__split_bufferImRNS_9allocatorImEEED2Ev($__v);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $__v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $1 = HEAP32[$this >> 2] | 0;
 if ((HEAP32[$this + 8 >> 2] | 0) - $1 >> 3 >>> 0 < $__n >>> 0) {
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($__v, $__n, (HEAP32[$this + 4 >> 2] | 0) - $1 >> 3, $this + 8 | 0);
  __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this, $__v);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
 }
 STACKTOP = sp;
 return;
}

function _fonsClearState($stash) {
 $stash = $stash | 0;
 var $stash$addr = 0, $state = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp + 4 | 0;
 $state = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$state >> 2] = _fons__getState(HEAP32[$stash$addr >> 2] | 0) | 0;
 HEAPF32[(HEAP32[$state >> 2] | 0) + 8 >> 2] = 12.0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 12 >> 2] = -1;
 HEAP32[HEAP32[$state >> 2] >> 2] = 0;
 HEAPF32[(HEAP32[$state >> 2] | 0) + 16 >> 2] = 0.0;
 HEAPF32[(HEAP32[$state >> 2] | 0) + 20 >> 2] = 0.0;
 HEAP32[(HEAP32[$state >> 2] | 0) + 4 >> 2] = 65;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_($this, $Elem) {
 $this = $this | 0;
 $Elem = $Elem | 0;
 var $0 = 0, $2 = 0, $3 = 0, $Last = 0;
 $Last = $this + 4 | 0;
 $0 = HEAP32[$Last >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 8 >> 2] | 0)) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm($this, (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this) | 0) << 1);
  $3 = HEAP32[$Last >> 2] | 0;
 } else $3 = $0;
 $2 = HEAP32[$Elem >> 2] | 0;
 HEAP32[$Last >> 2] = $3 + 4;
 HEAP32[$3 >> 2] = $2;
 return;
}

function __sfons_render_resize($user_ptr, $width, $height) {
 $user_ptr = $user_ptr | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $call = 0, $height$addr = 0, $user_ptr$addr = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $user_ptr$addr = sp + 8 | 0;
 $width$addr = sp + 4 | 0;
 $height$addr = sp;
 HEAP32[$user_ptr$addr >> 2] = $user_ptr;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 $call = __sfons_render_create(HEAP32[$user_ptr$addr >> 2] | 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function ___shlim($f, $0, $1) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $sub$ptr$sub = 0;
 $2 = $f + 112 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $6 = HEAP32[$f + 8 >> 2] | 0;
 $7 = HEAP32[$f + 4 >> 2] | 0;
 $sub$ptr$sub = $6 - $7 | 0;
 $9 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
 $10 = $f + 120 | 0;
 HEAP32[$10 >> 2] = $sub$ptr$sub;
 HEAP32[$10 + 4 >> 2] = $9;
 if ((($0 | 0) != 0 | ($1 | 0) != 0) & (($9 | 0) > ($1 | 0) | ($9 | 0) == ($1 | 0) & $sub$ptr$sub >>> 0 > $0 >>> 0)) HEAP32[$f + 104 >> 2] = $7 + $0; else HEAP32[$f + 104 >> 2] = $6;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $Printing = 0, $SavePrinting = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $1 = HEAP32[$this + 12 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 127]($1, $S);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;
 return;
}

function __sg_apply_uniforms($stage_index, $ub_index, $data) {
 $stage_index = $stage_index | 0;
 $ub_index = $ub_index | 0;
 $data = $data | 0;
 var $data$addr = 0, $stage_index$addr = 0, $ub_index$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stage_index$addr = sp + 8 | 0;
 $ub_index$addr = sp + 4 | 0;
 $data$addr = sp;
 HEAP32[$stage_index$addr >> 2] = $stage_index;
 HEAP32[$ub_index$addr >> 2] = $ub_index;
 HEAP32[$data$addr >> 2] = $data;
 __sg_gl_apply_uniforms(HEAP32[$stage_index$addr >> 2] | 0, HEAP32[$ub_index$addr >> 2] | 0, HEAP32[$data$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $1 = 0, $Printing = 0, $SavePrinting = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $SavePrinting = sp;
 $Printing = $this + 16 | 0;
 if (!(HEAP8[$Printing >> 0] | 0)) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
  $1 = HEAP32[$this + 12 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 127]($1, $S);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $1 = 0, $Data = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) $1 = __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0, $S) | 0; else $1 = 0;
 return $1 | 0;
}

function _fons__freeFont($font) {
 $font = $font | 0;
 var $font$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $font$addr = sp;
 HEAP32[$font$addr >> 2] = $font;
 if (!(HEAP32[$font$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] | 0) _free(HEAP32[(HEAP32[$font$addr >> 2] | 0) + 208 >> 2] | 0);
 if (HEAPU8[(HEAP32[$font$addr >> 2] | 0) + 192 >> 0] | 0 | 0) if (HEAP32[(HEAP32[$font$addr >> 2] | 0) + 184 >> 2] | 0) _free(HEAP32[(HEAP32[$font$addr >> 2] | 0) + 184 >> 2] | 0);
 _free(HEAP32[$font$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev($this) {
 $this = $this | 0;
 __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($this + 368 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev($this + 332 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($this + 288 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($this + 148 | 0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($this + 8 | 0);
 return;
}

function __ZN12_GLOBAL__N_112OutputStream4growEm($this, $N) {
 $this = $this | 0;
 $N = $N | 0;
 var $1 = 0, $BufferCapacity = 0, $add = 0, $call = 0, $mul = 0, $spec$store$select = 0;
 $add = (HEAP32[$this + 4 >> 2] | 0) + $N | 0;
 $BufferCapacity = $this + 8 | 0;
 $1 = HEAP32[$BufferCapacity >> 2] | 0;
 if ($add >>> 0 >= $1 >>> 0) {
  $mul = $1 << 1;
  $spec$store$select = $mul >>> 0 < $add >>> 0 ? $add : $mul;
  HEAP32[$BufferCapacity >> 2] = $spec$store$select;
  $call = _realloc(HEAP32[$this >> 2] | 0, $spec$store$select) | 0;
  HEAP32[$this >> 2] = $call;
  if (!$call) __ZSt9terminatev();
 }
 return;
}

function __ZNSt3__214__split_bufferI8DrBitmapRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 while (1) {
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -28 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  __ZN8DrBitmapD2Ev($incdec$ptr$i$i$i);
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Data = 0, $call3 = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) {
  $call3 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call3 >> 2] | 0) + 20 >> 2] & 127]($call3, $S);
 }
 return;
}

function __sg_gl_create_context($ctx) {
 $ctx = $ctx | 0;
 var $ctx$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 if (!(HEAP32[$ctx$addr >> 2] | 0)) ___assert_fail(28502, 21600, 5680, 30422);
 if (HEAP32[(HEAP32[$ctx$addr >> 2] | 0) + 12 >> 2] | 0) ___assert_fail(30444, 21600, 5681, 30422);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 5682, 30422);
 _glGetIntegerv(36006, (HEAP32[$ctx$addr >> 2] | 0) + 12 | 0);
 if (!(_glGetError() | 0)) {
  STACKTOP = sp;
  return 2;
 } else ___assert_fail(29811, 21600, 5684, 30422);
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $Data = 0, $call3 = 0;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S);
 $0 = HEAP32[$S + 12 >> 2] | 0;
 $Data = $this + 8 | 0;
 if ($0 >>> 0 < (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0) >>> 0) {
  $call3 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call3 >> 2] | 0) + 16 >> 2] & 127]($call3, $S);
 }
 return;
}

function __ZN10DrPolygonF8addPointE8DrPointF($this, $point) {
 $this = $this | 0;
 $point = $point | 0;
 var $0 = 0, $__end_$i = 0;
 $__end_$i = $this + 4 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 8 >> 2] | 0)) __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $point); else {
  HEAP32[$0 >> 2] = HEAP32[$point >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$point + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$point + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$point + 12 >> 2];
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 16;
 }
 return;
}

function _stbi__bitreverse16($n) {
 $n = $n | 0;
 var $n$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $n$addr = sp;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] & 43690) >> 1 | (HEAP32[$n$addr >> 2] & 21845) << 1;
 HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] & 52428) >> 2 | (HEAP32[$n$addr >> 2] & 13107) << 2;
 HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] & 61680) >> 4 | (HEAP32[$n$addr >> 2] & 3855) << 4;
 HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] & 65280) >> 8 | (HEAP32[$n$addr >> 2] & 255) << 8;
 STACKTOP = sp;
 return HEAP32[$n$addr >> 2] | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $cond = 0, $l$012 = 0, $n$addr$011 = 0, $r$013 = 0;
 L1 : do if (!$n) $cond = 0; else {
  $l$012 = $vl;
  $n$addr$011 = $n;
  $r$013 = $vr;
  while (1) {
   $0 = HEAP8[$l$012 >> 0] | 0;
   $1 = HEAP8[$r$013 >> 0] | 0;
   if ($0 << 24 >> 24 != $1 << 24 >> 24) break;
   $n$addr$011 = $n$addr$011 + -1 | 0;
   if (!$n$addr$011) {
    $cond = 0;
    break L1;
   } else {
    $l$012 = $l$012 + 1 | 0;
    $r$013 = $r$013 + 1 | 0;
   }
  }
  $cond = ($0 & 255) - ($1 & 255) | 0;
 } while (0);
 return $cond | 0;
}

function _fons__tt_getGlyphKernAdvance($font, $glyph1, $glyph2) {
 $font = $font | 0;
 $glyph1 = $glyph1 | 0;
 $glyph2 = $glyph2 | 0;
 var $call = 0, $font$addr = 0, $glyph1$addr = 0, $glyph2$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $font$addr = sp + 8 | 0;
 $glyph1$addr = sp + 4 | 0;
 $glyph2$addr = sp;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$glyph1$addr >> 2] = $glyph1;
 HEAP32[$glyph2$addr >> 2] = $glyph2;
 $call = _stbtt_GetGlyphKernAdvance(HEAP32[$font$addr >> 2] | 0, HEAP32[$glyph1$addr >> 2] | 0, HEAP32[$glyph2$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _sg_init_image($img_id, $desc) {
 $img_id = $img_id | 0;
 $desc = $desc | 0;
 var $desc$addr = 0, $desc_def = 0, $img_id$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896 | 0;
 $img_id$byval_copy = sp + 888 | 0;
 $desc$addr = sp + 884 | 0;
 $desc_def = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (HEAP8[2164080] & 1) {
  __sg_image_desc_defaults($desc_def, HEAP32[$desc$addr >> 2] | 0);
  HEAP32[$img_id$byval_copy >> 2] = HEAP32[$img_id >> 2];
  __sg_init_image($img_id$byval_copy, $desc_def);
  STACKTOP = sp;
  return;
 } else ___assert_fail(21733, 21600, 14498, 21905);
}

function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_($this, $LHS_, $InfixOperator_, $RHS_) {
 $this = $this | 0;
 $LHS_ = $LHS_ | 0;
 $InfixOperator_ = $InfixOperator_ | 0;
 $RHS_ = $RHS_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 42, 1, 1, 1);
 HEAP32[$this >> 2] = 15048;
 HEAP32[$this + 8 >> 2] = $LHS_;
 $0 = $InfixOperator_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 20 >> 2] = $RHS_;
 return;
}

function __sg_gl_pass_color_image($pass, $index) {
 $pass = $pass | 0;
 $index = $index | 0;
 var $index$addr = 0, $pass$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pass$addr = sp + 4 | 0;
 $index$addr = sp;
 HEAP32[$pass$addr >> 2] = $pass;
 HEAP32[$index$addr >> 2] = $index;
 if ((HEAP32[$pass$addr >> 2] | 0) != 0 & (HEAP32[$index$addr >> 2] | 0) >= 0 & (HEAP32[$index$addr >> 2] | 0) < 4) {
  STACKTOP = sp;
  return HEAP32[(HEAP32[$pass$addr >> 2] | 0) + 76 + 4 + (HEAP32[$index$addr >> 2] << 3) >> 2] | 0;
 } else ___assert_fail(39807, 21600, 6355, 39866);
 return 0;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this, $__nd) {
 $this = $this | 0;
 $__nd = $__nd | 0;
 if ($__nd | 0) {
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this, HEAP32[$__nd >> 2] | 0);
  __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this, HEAP32[$__nd + 4 >> 2] | 0);
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__nd, 72);
 }
 return;
}

function __ZNSt3__24listI8TPPLPolyNS_9allocatorIS1_EEE9push_backERKS1_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $__value_$i$i$i13 = 0, $call$i$i$i$i = 0;
 $call$i$i$i$i = __Znwm(20) | 0;
 HEAP32[$call$i$i$i$i >> 2] = 0;
 __ZN8TPPLPolyC2ERKS_($call$i$i$i$i + 8 | 0, $__x);
 HEAP32[$call$i$i$i$i + 4 >> 2] = $this;
 $0 = HEAP32[$this >> 2] | 0;
 HEAP32[$call$i$i$i$i >> 2] = $0;
 HEAP32[$0 + 4 >> 2] = $call$i$i$i$i;
 HEAP32[$this >> 2] = $call$i$i$i$i;
 $__value_$i$i$i13 = $this + 8 | 0;
 HEAP32[$__value_$i$i$i13 >> 2] = (HEAP32[$__value_$i$i$i13 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__214__split_bufferI8DrPointFRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -16 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZNSt3__214__split_bufferI7DrPointRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -8 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -44 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZNSt3__214__split_bufferI6DrRectRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -16 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm($Buf, $N, $S) {
 $Buf = $Buf | 0;
 $N = $N | 0;
 $S = $S | 0;
 var $Buf$addr$0 = 0, $BufferSize$0 = 0, $call = 0, $retval$0 = 0, label = 0;
 if (!$Buf) {
  $call = _malloc(1024) | 0;
  if (!$call) $retval$0 = 0; else {
   $Buf$addr$0 = $call;
   $BufferSize$0 = 1024;
   label = 4;
  }
 } else {
  $Buf$addr$0 = $Buf;
  $BufferSize$0 = HEAP32[$N >> 2] | 0;
  label = 4;
 }
 if ((label | 0) == 4) {
  __ZN12_GLOBAL__N_112OutputStream5resetEPcm($S, $Buf$addr$0, $BufferSize$0);
  $retval$0 = 1;
 }
 return $retval$0 | 0;
}

function __sfetch_ring_discard($rb) {
 $rb = $rb | 0;
 var $rb$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rb$addr = sp;
 HEAP32[$rb$addr >> 2] = $rb;
 if (!(HEAP32[$rb$addr >> 2] | 0)) ___assert_fail(28383, 25510, 1248, 42310);
 if (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0) {
  _free(HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0);
  HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] = 0;
 }
 HEAP32[HEAP32[$rb$addr >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($this, $__c, $0) {
 $this = $this | 0;
 $__c = $__c | 0;
 $0 = $0 | 0;
 var $__end_ = 0, $__value_$i$i$i8 = 0;
 __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__vdeallocateEv($this);
 HEAP32[$this >> 2] = HEAP32[$__c >> 2];
 $__end_ = $__c + 4 | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$__end_ >> 2];
 $__value_$i$i$i8 = $__c + 8 | 0;
 HEAP32[$this + 8 >> 2] = HEAP32[$__value_$i$i$i8 >> 2];
 HEAP32[$__value_$i$i$i8 >> 2] = 0;
 HEAP32[$__end_ >> 2] = 0;
 HEAP32[$__c >> 2] = 0;
 return;
}

function __ZNSt3__29to_stringEl($agg$result, $val) {
 $agg$result = $agg$result | 0;
 $val = $val | 0;
 var $agg$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp = sp;
 __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEElLb0EEclEv($agg$tmp);
 __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczElEET_T0_SD_PKNSD_10value_typeET1_($agg$result, $agg$tmp, $val);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29to_stringEi($agg$result, $val) {
 $agg$result = $agg$result | 0;
 $val = $val | 0;
 var $agg$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $agg$tmp = sp;
 __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($agg$tmp);
 __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_($agg$result, $agg$tmp, $val);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($this, $R) {
 $this = $this | 0;
 $R = $R | 0;
 var $CurrentPosition = 0, $add$ptr = 0, $call = 0;
 $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($R) | 0;
 if ($call | 0) {
  __ZN12_GLOBAL__N_112OutputStream4growEm($this, $call);
  $CurrentPosition = $this + 4 | 0;
  $add$ptr = (HEAP32[$this >> 2] | 0) + (HEAP32[$CurrentPosition >> 2] | 0) | 0;
  _memmove($add$ptr | 0, __ZNK12_GLOBAL__N_110StringView5beginEv($R) | 0, $call | 0) | 0;
  HEAP32[$CurrentPosition >> 2] = (HEAP32[$CurrentPosition >> 2] | 0) + $call;
 }
 return;
}

function _puts($s) {
 $s = $s | 0;
 var $0 = 0, $3 = 0, $5 = 0, $cond = 0, $wpos = 0;
 $0 = HEAP32[3238] | 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $cond = ___lockfile($0) | 0; else $cond = 0;
 do if ((_fputs($s, $0) | 0) < 0) $5 = -1; else {
  if ((HEAP8[$0 + 75 >> 0] | 0) != 10) {
   $wpos = $0 + 20 | 0;
   $3 = HEAP32[$wpos >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$0 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos >> 2] = $3 + 1;
    HEAP8[$3 >> 0] = 10;
    $5 = 0;
    break;
   }
  }
  $5 = (___overflow($0, 10) | 0) >> 31;
 } while (0);
 if ($cond | 0) ___unlockfile($0);
 return $5 | 0;
}

function __sg_gl_shader_stage($stage) {
 $stage = $stage | 0;
 var $1 = 0, $retval = 0, $stage$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $stage$addr = sp;
 HEAP32[$stage$addr >> 2] = $stage;
 switch (HEAP32[$stage$addr >> 2] | 0) {
 case 0:
  {
   HEAP32[$retval >> 2] = 35633;
   $1 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $1 | 0;
  }
 case 1:
  {
   HEAP32[$retval >> 2] = 35632;
   $1 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $1 | 0;
  }
 default:
  ___assert_fail(47680, 21600, 4417, 38015);
 }
 return 0;
}

function __sfetch_ring_full($rb) {
 $rb = $rb | 0;
 var $call = 0, $rb$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rb$addr = sp;
 HEAP32[$rb$addr >> 2] = $rb;
 if (!(HEAP32[$rb$addr >> 2] | 0)) ___assert_fail(41999, 25510, 1278, 42076);
 if (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0) {
  $call = __sfetch_ring_wrap(HEAP32[$rb$addr >> 2] | 0, (HEAP32[HEAP32[$rb$addr >> 2] >> 2] | 0) + 1 | 0) | 0;
  STACKTOP = sp;
  return ($call | 0) == (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
 } else ___assert_fail(41999, 25510, 1278, 42076);
 return 0;
}

function _stbi__hdr_test($s) {
 $s = $s | 0;
 var $5 = 0, $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $r = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$r >> 2] = _stbi__hdr_test_core(HEAP32[$s$addr >> 2] | 0, 47822) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 if (HEAP32[$r >> 2] | 0) {
  $5 = HEAP32[$r >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 HEAP32[$r >> 2] = _stbi__hdr_test_core(HEAP32[$s$addr >> 2] | 0, 47834) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 $5 = HEAP32[$r >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__214__split_bufferImRNS_9allocatorImEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -4 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -4 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -1 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -8 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $cond = 0; else $cond = __Znwm($__cap) | 0;
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + $__start | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + $__cap;
 return;
}

function __sg_validate($cond, $err) {
 $cond = $cond | 0;
 $err = $err | 0;
 var $cond$addr = 0, $err$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cond$addr = sp + 4 | 0;
 $err$addr = sp;
 HEAP8[$cond$addr >> 0] = $cond & 1;
 HEAP32[$err$addr >> 2] = $err;
 if (HEAP8[$cond$addr >> 0] & 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[541062] = HEAP32[$err$addr >> 2];
 if (!(__sg_validate_string(HEAP32[$err$addr >> 2] | 0) | 0)) ___assert_fail(30936, 21600, 13260, 30961);
 _puts(__sg_validate_string(HEAP32[$err$addr >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m($this, $__first, $__last, $__n) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $sub$ptr$sub$i = 0;
 $__end_ = $this + 4 | 0;
 $sub$ptr$sub$i = $__last - $__first | 0;
 if (($sub$ptr$sub$i | 0) > 0) {
  _memcpy(HEAP32[$__end_ >> 2] | 0, $__first | 0, $sub$ptr$sub$i | 0) | 0;
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + ($sub$ptr$sub$i >>> 4 << 4);
 }
 return;
}

function _fmt_o($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $6 = 0, $8 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $6 = $0;
  $8 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $6 & 7 | 48;
   $6 = _bitshift64Lshr($6 | 0, $8 | 0, 3) | 0;
   $8 = getTempRet0() | 0;
   if (($6 | 0) == 0 & ($8 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __sg_gl_wrap($w) {
 $w = $w | 0;
 var $retval = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $w$addr = sp;
 HEAP32[$w$addr >> 2] = $w;
 switch (HEAP32[$w$addr >> 2] | 0) {
 case 2:
  {
   HEAP32[$retval >> 2] = 33071;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 33071;
   break;
  }
 case 1:
  {
   HEAP32[$retval >> 2] = 10497;
   break;
  }
 case 4:
  {
   HEAP32[$retval >> 2] = 33648;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4585, 37418);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function _stbtt_InitFont($info, $data, $offset) {
 $info = $info | 0;
 $data = $data | 0;
 $offset = $offset | 0;
 var $call = 0, $data$addr = 0, $info$addr = 0, $offset$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $info$addr = sp + 8 | 0;
 $data$addr = sp + 4 | 0;
 $offset$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$offset$addr >> 2] = $offset;
 $call = _stbtt_InitFont_internal(HEAP32[$info$addr >> 2] | 0, HEAP32[$data$addr >> 2] | 0, HEAP32[$offset$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($this, $CastKind_, $To_, $From_) {
 $this = $this | 0;
 $CastKind_ = $CastKind_ | 0;
 $To_ = $To_ | 0;
 $From_ = $From_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 48, 1, 1, 1);
 HEAP32[$this >> 2] = 14256;
 $0 = $CastKind_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $To_;
 HEAP32[$this + 20 >> 2] = $From_;
 return;
}

function __ZNSt3__214__split_bufferI6VertexRNS_9allocatorIS1_EEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $__end_ = 0, $__n$addr$0 = 0, dest = 0, stop = 0;
 $__end_ = $this + 8 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $__n$addr$0 = $__n;
 do {
  dest = $0;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $0 = (HEAP32[$__end_ >> 2] | 0) + 44 | 0;
  HEAP32[$__end_ >> 2] = $0;
  $__n$addr$0 = $__n$addr$0 + -1 | 0;
 } while (($__n$addr$0 | 0) != 0);
 return;
}

function __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__parent_ = 0, $__right_ = 0;
 $0 = HEAP32[$__x >> 2] | 0;
 $__right_ = $0 + 4 | 0;
 $1 = HEAP32[$__right_ >> 2] | 0;
 HEAP32[$__x >> 2] = $1;
 if ($1 | 0) HEAP32[$1 + 8 >> 2] = $__x;
 $__parent_ = $__x + 8 | 0;
 HEAP32[$0 + 8 >> 2] = HEAP32[$__parent_ >> 2];
 $3 = HEAP32[$__parent_ >> 2] | 0;
 HEAP32[((HEAP32[$3 >> 2] | 0) == ($__x | 0) ? $3 : $3 + 4 | 0) >> 2] = $0;
 HEAP32[$__right_ >> 2] = $__x;
 HEAP32[$__parent_ >> 2] = $0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE($this, $Base_, $Tag_) {
 $this = $this | 0;
 $Base_ = $Base_ | 0;
 $Tag_ = $Tag_ | 0;
 var $3 = 0, $8 = 0, $9 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 8, HEAP8[$Base_ + 5 >> 0] | 0, HEAP8[$Base_ + 6 >> 0] | 0, HEAP8[$Base_ + 7 >> 0] | 0);
 HEAP32[$this >> 2] = 13288;
 HEAP32[$this + 8 >> 2] = $Base_;
 $3 = $Tag_;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $this + 12 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 return;
}

function _sokol_main($agg$result, $argc, $argv) {
 $agg$result = $agg$result | 0;
 $argc = $argc | 0;
 $argv = $argv | 0;
 var dest = 0, src = 0, stop = 0;
 HEAP32[546676] = 45656;
 HEAP32[546660] = 2;
 HEAP32[546661] = 3;
 HEAP32[546663] = 95;
 HEAP32[546662] = 4;
 HEAP32[546671] = 800;
 HEAP32[546672] = 600;
 HEAP8[2186709] = 1;
 HEAP8[2186716] = 1;
 HEAP32[546680] = 1;
 dest = $agg$result;
 src = 2186640;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__parent_ = 0, $__right_ = 0;
 $__right_ = $__x + 4 | 0;
 $0 = HEAP32[$__right_ >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$__right_ >> 2] = $1;
 if ($1 | 0) HEAP32[$1 + 8 >> 2] = $__x;
 $__parent_ = $__x + 8 | 0;
 HEAP32[$0 + 8 >> 2] = HEAP32[$__parent_ >> 2];
 $3 = HEAP32[$__parent_ >> 2] | 0;
 HEAP32[((HEAP32[$3 >> 2] | 0) == ($__x | 0) ? $3 : $3 + 4 | 0) >> 2] = $0;
 HEAP32[$0 >> 2] = $__x;
 HEAP32[$__parent_ >> 2] = $0;
 return;
}

function __ZN8DrBitmapC2E13Bitmap_Format($this, $desired_format) {
 $this = $this | 0;
 $desired_format = $desired_format | 0;
 var $channels = 0, $width = 0;
 $channels = $this + 4 | 0;
 HEAP32[$channels >> 2] = 4;
 $width = $this + 8 | 0;
 HEAP32[$width >> 2] = 0;
 HEAP32[$width + 4 >> 2] = 0;
 HEAP32[$width + 8 >> 2] = 0;
 HEAP32[$width + 12 >> 2] = 0;
 HEAP32[$width + 16 >> 2] = 0;
 HEAP32[$this >> 2] = $desired_format;
 switch ($desired_format | 0) {
 case 4:
 case 1:
  {
   HEAP32[$channels >> 2] = $desired_format;
   break;
  }
 default:
  {}
 }
 return;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $call3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 HEAP32[$f + 36 >> 2] = 1;
 if (!(HEAP32[$f >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21523;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$f + 75 >> 0] = -1;
 }
 $call3 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $call3 | 0;
}

function _stbi__clamp($x) {
 $x = $x | 0;
 var $retval = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $x$addr = sp;
 HEAP32[$x$addr >> 2] = $x;
 do if ((HEAP32[$x$addr >> 2] | 0) >>> 0 > 255) {
  if ((HEAP32[$x$addr >> 2] | 0) < 0) {
   HEAP8[$retval >> 0] = 0;
   break;
  }
  if ((HEAP32[$x$addr >> 2] | 0) > 255) HEAP8[$retval >> 0] = -1; else label = 6;
 } else label = 6; while (0);
 if ((label | 0) == 6) HEAP8[$retval >> 0] = HEAP32[$x$addr >> 2];
 STACKTOP = sp;
 return HEAP8[$retval >> 0] | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $call = 0, $mul = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $mul = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($mul >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $mul : -1; else $req$0 = $mul;
 }
 $call = _malloc($req$0) | 0;
 if (!$call) return $call | 0;
 if (!(HEAP32[$call + -4 >> 2] & 3)) return $call | 0;
 _memset($call | 0, 0, $req$0 | 0) | 0;
 return $call | 0;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $__end_ = 0, $__n$addr$0 = 0, dest = 0, stop = 0;
 $__end_ = $this + 4 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $__n$addr$0 = $__n;
 do {
  dest = $0;
  stop = dest + 44 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $0 = (HEAP32[$__end_ >> 2] | 0) + 44 | 0;
  HEAP32[$__end_ >> 2] = $0;
  $__n$addr$0 = $__n$addr$0 + -1 | 0;
 } while (($__n$addr$0 | 0) != 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($this, $LHS_, $Kind_, $RHS_) {
 $this = $this | 0;
 $LHS_ = $LHS_ | 0;
 $Kind_ = $Kind_ | 0;
 $RHS_ = $RHS_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 46, 1, 1, 1);
 HEAP32[$this >> 2] = 14608;
 HEAP32[$this + 8 >> 2] = $LHS_;
 $0 = $Kind_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 20 >> 2] = $RHS_;
 return;
}

function __ZNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE13__vdeallocateEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__end_$i$i$i = 0, $__value_$i$i$i$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  $__end_$i$i$i = $this + 4 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $1;
  $__value_$i$i$i$i$i = $this + 8 | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - $1 | 0);
  HEAP32[$__value_$i$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i >> 2] = 0;
  HEAP32[$this >> 2] = 0;
 }
 return;
}

function __ZN8DrBitmapaSERKS_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$this + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 if (($this | 0) != ($0 | 0)) __ZNSt3__26vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($this + 16 | 0, HEAP32[$0 + 16 >> 2] | 0, HEAP32[$0 + 20 >> 2] | 0);
 return $this | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5, $args7) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_($this, $args, $args1, $args3, $args5, $args7) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 $args7 = $args7 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5, $args7) | 0;
}

function _sfons_rgba($r, $g, $b, $a) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 $a = $a | 0;
 var $a$addr = 0, $b$addr = 0, $g$addr = 0, $r$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $r$addr = sp + 3 | 0;
 $g$addr = sp + 2 | 0;
 $b$addr = sp + 1 | 0;
 $a$addr = sp;
 HEAP8[$r$addr >> 0] = $r;
 HEAP8[$g$addr >> 0] = $g;
 HEAP8[$b$addr >> 0] = $b;
 HEAP8[$a$addr >> 0] = $a;
 STACKTOP = sp;
 return HEAPU8[$r$addr >> 0] | 0 | (HEAPU8[$g$addr >> 0] | 0) << 8 | (HEAPU8[$b$addr >> 0] | 0) << 16 | (HEAPU8[$a$addr >> 0] | 0) << 24 | 0;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($this, $__first, $__last, $__n) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $sub$ptr$sub$i = 0;
 $__end_ = $this + 4 | 0;
 $sub$ptr$sub$i = $__last - $__first | 0;
 if (($sub$ptr$sub$i | 0) > 0) {
  _memcpy(HEAP32[$__end_ >> 2] | 0, $__first | 0, $sub$ptr$sub$i | 0) | 0;
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + $sub$ptr$sub$i;
 }
 return;
}

function __ZN2Dr26CalcRotationAngleInDegreesE8DrPointFS0_($center_point, $target_point) {
 $center_point = $center_point | 0;
 $target_point = $target_point | 0;
 var $add = 0.0, $angle = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $angle = sp;
 HEAPF64[$angle >> 3] = +Math_atan2(+(+HEAPF64[$target_point + 8 >> 3] - +HEAPF64[$center_point + 8 >> 3]), +(+HEAPF64[$target_point >> 3] - +HEAPF64[$center_point >> 3]));
 $add = +__ZN2Dr16RadiansToDegreesIdEET_RKS1_($angle) + 90.0;
 STACKTOP = sp;
 return +($add < 0.0 ? $add + 360.0 : $add);
}

function __ZN7meshoptL11hashUpdate4EjPKhm($h, $key, $len) {
 $h = $h | 0;
 $key = $key | 0;
 $len = $len | 0;
 var $h$addr$0 = 0, $key$addr$0 = 0, $len$addr$0 = 0, $mul = 0;
 $h$addr$0 = $h;
 $key$addr$0 = $key;
 $len$addr$0 = $len;
 while (1) {
  if ($len$addr$0 >>> 0 <= 3) break;
  $mul = Math_imul(HEAP32[$key$addr$0 >> 2] | 0, 1540483477) | 0;
  $h$addr$0 = (Math_imul($mul >>> 24 ^ $mul, 1540483477) | 0) ^ (Math_imul($h$addr$0, 1540483477) | 0);
  $key$addr$0 = $key$addr$0 + 4 | 0;
  $len$addr$0 = $len$addr$0 + -4 | 0;
 }
 return $h$addr$0 | 0;
}

function __sgl_reset_pipeline($pip) {
 $pip = $pip | 0;
 var $1 = 0, $pip$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip$addr = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 if (HEAP32[$pip$addr >> 2] | 0) {
  $1 = HEAP32[$pip$addr >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(22631, 23371, 2145, 41865);
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE13__vdeallocateEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__end_$i$i$i = 0, $__value_$i$i$i$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  $__end_$i$i$i = $this + 4 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $1;
  $__value_$i$i$i$i$i = $this + 8 | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - $1 | 0);
  HEAP32[$__value_$i$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i >> 2] = 0;
  HEAP32[$this >> 2] = 0;
 }
 return;
}

function __sg_create_pipeline($pip, $shd, $desc) {
 $pip = $pip | 0;
 $shd = $shd | 0;
 $desc = $desc | 0;
 var $call = 0, $desc$addr = 0, $pip$addr = 0, $shd$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip$addr = sp + 8 | 0;
 $shd$addr = sp + 4 | 0;
 $desc$addr = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 HEAP32[$shd$addr >> 2] = $shd;
 HEAP32[$desc$addr >> 2] = $desc;
 $call = __sg_gl_create_pipeline(HEAP32[$pip$addr >> 2] | 0, HEAP32[$shd$addr >> 2] | 0, HEAP32[$desc$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE6resizeEm($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $1 = 0, $2 = 0, $__end_$i = 0, $sub$ptr$div$i = 0;
 $__end_$i = $this + 4 | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$div$i = ((HEAP32[$__end_$i >> 2] | 0) - $1 | 0) / 44 | 0;
 $2 = $1;
 if ($sub$ptr$div$i >>> 0 < $__sz >>> 0) __ZNSt3__26vectorI6VertexNS_9allocatorIS1_EEE8__appendEm($this, $__sz - $sub$ptr$div$i | 0); else if ($sub$ptr$div$i >>> 0 > $__sz >>> 0) HEAP32[$__end_$i >> 2] = $2 + ($__sz * 44 | 0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $path_dynamic_ptr_to_static_ptr = 0;
 if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
  if ((HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) != 1) HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] = $path_below;
 }
 return;
}

function __ZN7meshoptL22getNextTriangleDeadEndERjPKhm($input_cursor, $emitted_flags, $face_count) {
 $input_cursor = $input_cursor | 0;
 $emitted_flags = $emitted_flags | 0;
 $face_count = $face_count | 0;
 var $0 = 0, $inc = 0, $retval$0 = 0;
 $0 = HEAP32[$input_cursor >> 2] | 0;
 while (1) {
  if ($0 >>> 0 >= $face_count >>> 0) {
   $retval$0 = -1;
   break;
  }
  if (!(HEAP8[$emitted_flags + $0 >> 0] | 0)) {
   $retval$0 = $0;
   break;
  }
  $inc = $0 + 1 | 0;
  HEAP32[$input_cursor >> 2] = $inc;
  $0 = $inc;
 }
 return $retval$0 | 0;
}

function _stbi__jpeg_test($s) {
 $s = $s | 0;
 var $j = 0, $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 8 | 0;
 $r = sp + 4 | 0;
 $j = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$j >> 2] = _stbi__malloc(18456) | 0;
 HEAP32[HEAP32[$j >> 2] >> 2] = HEAP32[$s$addr >> 2];
 _stbi__setup_jpeg(HEAP32[$j >> 2] | 0);
 HEAP32[$r >> 2] = _stbi__decode_jpeg_header(HEAP32[$j >> 2] | 0, 1) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 _free(HEAP32[$j >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$r >> 2] | 0;
}

function _sgl_defaults() {
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2844, 23870);
 if (HEAP8[2165512] & 1) ___assert_fail(23883, 23371, 2845, 23870); else {
  HEAPF32[541379] = 0.0;
  HEAPF32[541380] = 0.0;
  HEAP32[541381] = -1;
  HEAP8[2165536] = 0;
  HEAP32[541383] = HEAP32[541386];
  _sgl_default_pipeline();
  __sgl_identity(__sgl_matrix_texture() | 0);
  __sgl_identity(__sgl_matrix_modelview() | 0);
  __sgl_identity(__sgl_matrix_projection() | 0);
  HEAP32[541503] = 0;
  HEAP8[2165537] = 1;
  return;
 }
}

function __ZN10DelaunatorD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($this + 100 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($this + 68 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($this + 52 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($this + 40 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($this + 28 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($this + 16 | 0);
 __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($this + 4 | 0);
 return;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0 | 0), $1$0 | 0 | 0) | 0;
}

function __sg_gl_cache_store_texture_binding($slot_index) {
 $slot_index = $slot_index | 0;
 var $arrayidx = 0, $slot_index$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $slot_index$addr = sp;
 HEAP32[$slot_index$addr >> 2] = $slot_index;
 if ((HEAP32[$slot_index$addr >> 2] | 0) < 12) {
  $arrayidx = 2165292 + (HEAP32[$slot_index$addr >> 2] << 3) | 0;
  HEAP32[541347] = HEAP32[$arrayidx >> 2];
  HEAP32[541348] = HEAP32[$arrayidx + 4 >> 2];
  STACKTOP = sp;
  return;
 } else ___assert_fail(37304, 21600, 5516, 37343);
}

function ___towrite($f) {
 $f = $f | 0;
 var $1 = 0, $2 = 0, $conv = 0, $mode = 0, $retval$0 = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $1 = HEAP32[$f >> 2] | 0;
 if (!($1 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $2 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $2;
  HEAP32[$f + 20 >> 2] = $2;
  HEAP32[$f + 16 >> 2] = $2 + (HEAP32[$f + 48 >> 2] | 0);
  $retval$0 = 0;
 } else {
  HEAP32[$f >> 2] = $1 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($this, $BaseType_, $Dimension_) {
 $this = $this | 0;
 $BaseType_ = $BaseType_ | 0;
 $Dimension_ = $Dimension_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 25, 1, 1, 1);
 HEAP32[$this >> 2] = 15708;
 HEAP32[$this + 8 >> 2] = $BaseType_;
 $0 = $Dimension_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZNSt3__24listIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE9pop_frontEv($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $__next_$i = 0, $__value_$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__next_$i = $0 + 4 | 0;
 $2 = HEAP32[$0 >> 2] | 0;
 HEAP32[$2 + 4 >> 2] = HEAP32[$__next_$i >> 2];
 HEAP32[HEAP32[$__next_$i >> 2] >> 2] = $2;
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = (HEAP32[$__value_$i$i$i >> 2] | 0) + -1;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, 16);
 return;
}

function __ZN7meshoptL11vertexScoreEPKNS_16VertexScoreTableEij($table, $cache_position, $live_triangles) {
 $table = $table | 0;
 $cache_position = $cache_position | 0;
 $live_triangles = $live_triangles | 0;
 var $cache_position$off = 0;
 $cache_position$off = $cache_position + 1 | 0;
 if ($cache_position$off >>> 0 < 17) return +(+HEAPF32[$table + ($cache_position$off << 2) >> 2] + +HEAPF32[$table + 68 + (($live_triangles >>> 0 < 8 ? $live_triangles : 8) << 2) >> 2]); else ___assert_fail(46912, 46674, 146, 46972);
 return +(0.0);
}

function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($this, $Type_, $Expressions_) {
 $this = $this | 0;
 $Type_ = $Type_ | 0;
 $Expressions_ = $Expressions_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 55, 1, 1, 1);
 HEAP32[$this >> 2] = 14916;
 HEAP32[$this + 8 >> 2] = $Type_;
 $0 = $Expressions_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN13TPPLPartition12VertexSorterclEll($this, $index1, $index2) {
 $this = $this | 0;
 $index1 = $index1 | 0;
 $index2 = $index2 | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $retval$0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = +HEAPF64[$0 + ($index1 << 5) + 8 >> 3];
 $2 = +HEAPF64[$0 + ($index2 << 5) + 8 >> 3];
 do if ($1 > $2) $retval$0 = 1; else {
  if ($1 == $2) if (+HEAPF64[$0 + ($index1 << 5) >> 3] > +HEAPF64[$0 + ($index2 << 5) >> 3]) {
   $retval$0 = 1;
   break;
  }
  $retval$0 = 0;
 } while (0);
 return $retval$0 | 0;
}

function __sg_gl_blend_op($op) {
 $op = $op | 0;
 var $op$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $op$addr = sp;
 HEAP32[$op$addr >> 2] = $op;
 switch (HEAP32[$op$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 32774;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 32778;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 32779;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4559, 40176);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __sgl_next_command() {
 var $2 = 0, $3 = 0, $4 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp;
 if ((HEAP32[541371] | 0) < (HEAP32[541368] | 0)) {
  $2 = HEAP32[541374] | 0;
  $3 = HEAP32[541371] | 0;
  HEAP32[541371] = $3 + 1;
  HEAP32[$retval >> 2] = $2 + ($3 * 24 | 0);
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[541377] = 3;
  HEAP32[$retval >> 2] = 0;
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __sgl_next_vertex() {
 var $2 = 0, $3 = 0, $4 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp;
 if ((HEAP32[541369] | 0) < (HEAP32[541366] | 0)) {
  $2 = HEAP32[541372] | 0;
  $3 = HEAP32[541369] | 0;
  HEAP32[541369] = $3 + 1;
  HEAP32[$retval >> 2] = $2 + ($3 * 24 | 0);
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[541377] = 1;
  HEAP32[$retval >> 2] = 0;
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __sgl_next_uniform() {
 var $2 = 0, $3 = 0, $4 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp;
 if ((HEAP32[541370] | 0) < (HEAP32[541367] | 0)) {
  $2 = HEAP32[541373] | 0;
  $3 = HEAP32[541370] | 0;
  HEAP32[541370] = $3 + 1;
  HEAP32[$retval >> 2] = $2 + ($3 << 7);
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP32[541377] = 2;
  HEAP32[$retval >> 2] = 0;
  $4 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($this, $Base_, $Dimension_) {
 $this = $this | 0;
 $Base_ = $Base_ | 0;
 $Dimension_ = $Dimension_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 14, 0, 0, 1);
 HEAP32[$this >> 2] = 15664;
 HEAP32[$this + 8 >> 2] = $Base_;
 $0 = $Dimension_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE($this, $Child_, $Operator_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 $Operator_ = $Operator_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 44, 1, 1, 1);
 HEAP32[$this >> 2] = 14388;
 HEAP32[$this + 8 >> 2] = $Child_;
 $0 = $Operator_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _HMM_Mat4($agg$result) {
 $agg$result = $agg$result | 0;
 var $Result = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $Result = sp;
 dest = $Result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $agg$result;
 src = $Result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _sg_destroy_pipeline($pip_id) {
 $pip_id = $pip_id | 0;
 var $pip_id$byval_copy1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip_id$byval_copy1 = sp;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14754, 22446);
 HEAP32[$pip_id$byval_copy1 >> 2] = HEAP32[$pip_id >> 2];
 if (!(__sg_uninit_pipeline($pip_id$byval_copy1) | 0)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[$pip_id$byval_copy1 >> 2] = HEAP32[$pip_id >> 2];
 __sg_dealloc_pipeline($pip_id$byval_copy1);
 STACKTOP = sp;
 return;
}

function __sg_gl_supported_texture_format($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $fmt_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $fmt$addr = sp + 4 | 0;
 $fmt_index = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 HEAP32[$fmt_index >> 2] = HEAP32[$fmt$addr >> 2];
 if ((HEAP32[$fmt_index >> 2] | 0) > 1 & (HEAP32[$fmt_index >> 2] | 0) < 62) {
  STACKTOP = sp;
  return HEAP8[2164412 + ((HEAP32[$fmt_index >> 2] | 0) * 6 | 0) >> 0] & 1 | 0;
 } else ___assert_fail(21760, 21600, 5756, 37196);
 return 0;
}

function _stbi__bit_reverse($v, $bits) {
 $v = $v | 0;
 $bits = $bits | 0;
 var $bits$addr = 0, $call = 0, $v$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $v$addr = sp + 4 | 0;
 $bits$addr = sp;
 HEAP32[$v$addr >> 2] = $v;
 HEAP32[$bits$addr >> 2] = $bits;
 if ((HEAP32[$bits$addr >> 2] | 0) <= 16) {
  $call = _stbi__bitreverse16(HEAP32[$v$addr >> 2] | 0) | 0;
  STACKTOP = sp;
  return $call >> 16 - (HEAP32[$bits$addr >> 2] | 0) | 0;
 } else ___assert_fail(48851, 47433, 3881, 48862);
 return 0;
}

function __sg_gl_usage($u) {
 $u = $u | 0;
 var $retval = 0, $u$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $u$addr = sp;
 HEAP32[$u$addr >> 2] = $u;
 switch (HEAP32[$u$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 35044;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 35048;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 35040;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4409, 36515);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($this, $Special_, $Child_) {
 $this = $this | 0;
 $Special_ = $Special_ | 0;
 $Child_ = $Child_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 20, 1, 1, 1);
 HEAP32[$this >> 2] = 16060;
 $0 = $Special_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Child_;
 return;
}

function __sg_gl_index_type($t) {
 $t = $t | 0;
 var $retval = 0, $t$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $t$addr = sp;
 HEAP32[$t$addr >> 2] = $t;
 switch (HEAP32[$t$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 0;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 5123;
   break;
  }
 case 3:
  {
   HEAP32[$retval >> 2] = 5125;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4501, 40100);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_($this, $args, $args1, $args3, $args5) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 $args5 = $args5 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3, $args5) | 0;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE6resizeEm($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $1 = 0, $2 = 0, $__end_$i = 0, $sub$ptr$div$i = 0;
 $__end_$i = $this + 4 | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$div$i = (HEAP32[$__end_$i >> 2] | 0) - $1 >> 2;
 $2 = $1;
 if ($sub$ptr$div$i >>> 0 < $__sz >>> 0) __ZNSt3__26vectorImNS_9allocatorImEEE8__appendEm($this, $__sz - $sub$ptr$div$i | 0); else if ($sub$ptr$div$i >>> 0 > $__sz >>> 0) HEAP32[$__end_$i >> 2] = $2 + ($__sz << 2);
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEm($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $1 = 0, $2 = 0, $__end_$i = 0, $sub$ptr$div$i = 0;
 $__end_$i = $this + 4 | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$div$i = (HEAP32[$__end_$i >> 2] | 0) - $1 >> 2;
 $2 = $1;
 if ($sub$ptr$div$i >>> 0 < $__sz >>> 0) __ZNSt3__26vectorIjNS_9allocatorIjEEE8__appendEm($this, $__sz - $sub$ptr$div$i | 0); else if ($sub$ptr$div$i >>> 0 > $__sz >>> 0) HEAP32[$__end_$i >> 2] = $2 + ($__sz << 2);
 return;
}

function _sg_destroy_shader($shd_id) {
 $shd_id = $shd_id | 0;
 var $shd_id$byval_copy1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $shd_id$byval_copy1 = sp;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14746, 22428);
 HEAP32[$shd_id$byval_copy1 >> 2] = HEAP32[$shd_id >> 2];
 if (!(__sg_uninit_shader($shd_id$byval_copy1) | 0)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[$shd_id$byval_copy1 >> 2] = HEAP32[$shd_id >> 2];
 __sg_dealloc_shader($shd_id$byval_copy1);
 STACKTOP = sp;
 return;
}

function _sg_destroy_buffer($buf_id) {
 $buf_id = $buf_id | 0;
 var $buf_id$byval_copy1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf_id$byval_copy1 = sp;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14730, 22393);
 HEAP32[$buf_id$byval_copy1 >> 2] = HEAP32[$buf_id >> 2];
 if (!(__sg_uninit_buffer($buf_id$byval_copy1) | 0)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[$buf_id$byval_copy1 >> 2] = HEAP32[$buf_id >> 2];
 __sg_dealloc_buffer($buf_id$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE($this, $Kind_, $Child_) {
 $this = $this | 0;
 $Kind_ = $Kind_ | 0;
 $Child_ = $Child_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 6, 1, 1, 1);
 HEAP32[$this >> 2] = 15224;
 $0 = $Kind_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE($this, $Prefix_, $Suffix_) {
 $this = $this | 0;
 $Prefix_ = $Prefix_ | 0;
 $Suffix_ = $Suffix_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 1, 1, 1, 1);
 HEAP32[$this >> 2] = 16104;
 HEAP32[$this + 8 >> 2] = $Prefix_;
 $0 = $Suffix_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($this, $Ty_, $Postfix_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Postfix_ = $Postfix_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 5, 1, 1, 1);
 HEAP32[$this >> 2] = 13420;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Postfix_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _sg_destroy_image($img_id) {
 $img_id = $img_id | 0;
 var $img_id$byval_copy1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $img_id$byval_copy1 = sp;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14738, 22411);
 HEAP32[$img_id$byval_copy1 >> 2] = HEAP32[$img_id >> 2];
 if (!(__sg_uninit_image($img_id$byval_copy1) | 0)) {
  STACKTOP = sp;
  return;
 };
 HEAP32[$img_id$byval_copy1 >> 2] = HEAP32[$img_id >> 2];
 __sg_dealloc_image($img_id$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE($this, $Ty_, $Protocol_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Protocol_ = $Protocol_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 10, 1, 1, 1);
 HEAP32[$this >> 2] = 15884;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Protocol_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE($this, $Prefix_, $Child_) {
 $this = $this | 0;
 $Prefix_ = $Prefix_ | 0;
 $Child_ = $Child_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 53, 1, 1, 1);
 HEAP32[$this >> 2] = 15004;
 $0 = $Prefix_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 16 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE($this, $Ty_, $Integer_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Integer_ = $Integer_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 60, 1, 1, 1);
 HEAP32[$this >> 2] = 13684;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Integer_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0, HEAP32[$args3 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0, HEAP32[$args3 >> 2] | 0);
 return $call | 0;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEm($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $1 = 0, $2 = 0, $__end_$i = 0, $sub$ptr$sub$i = 0;
 $__end_$i = $this + 4 | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$sub$i = (HEAP32[$__end_$i >> 2] | 0) - $1 | 0;
 $2 = $1;
 if ($sub$ptr$sub$i >>> 0 < $__sz >>> 0) __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEm($this, $__sz - $sub$ptr$sub$i | 0); else if ($sub$ptr$sub$i >>> 0 > $__sz >>> 0) HEAP32[$__end_$i >> 2] = $2 + $__sz;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEvE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE($this, $Callee_, $Args_) {
 $this = $this | 0;
 $Callee_ = $Callee_ | 0;
 $Args_ = $Args_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 50, 1, 1, 1);
 HEAP32[$this >> 2] = 14960;
 HEAP32[$this + 8 >> 2] = $Callee_;
 $0 = $Args_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _getint($s) {
 $s = $s | 0;
 var $2 = 0, $add = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0;
 if (!(_isdigit(HEAP8[HEAP32[$s >> 2] >> 0] | 0) | 0)) $i$0$lcssa = 0; else {
  $i$07 = 0;
  while (1) {
   $2 = HEAP32[$s >> 2] | 0;
   $add = ($i$07 * 10 | 0) + -48 + (HEAP8[$2 >> 0] | 0) | 0;
   $incdec$ptr = $2 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr;
   if (!(_isdigit(HEAP8[$incdec$ptr >> 0] | 0) | 0)) {
    $i$0$lcssa = $add;
    break;
   } else $i$07 = $add;
  }
 }
 return $i$0$lcssa | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb($call, HEAP32[$args >> 2] | 0, (HEAP8[$args1 >> 0] | 0) != 0, (HEAP8[$args3 >> 0] | 0) != 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi($call, HEAP32[$args >> 2] | 0, (HEAP8[$args1 >> 0] | 0) != 0, HEAP32[$args3 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0, (HEAP8[$args3 >> 0] | 0) != 0);
 return $call | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $tobool$i$i$i = 0;
 if (($this | 0) != ($__str | 0)) {
  $0 = HEAP8[$__str + 11 >> 0] | 0;
  $tobool$i$i$i = $0 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $tobool$i$i$i ? HEAP32[$__str >> 2] | 0 : $__str, $tobool$i$i$i ? HEAP32[$__str + 4 >> 2] | 0 : $0 & 255) | 0;
 }
 return $this | 0;
}

function __sapp_emsc_pointerlockchange_cb($emsc_type, $emsc_event, $user_data) {
 $emsc_type = $emsc_type | 0;
 $emsc_event = $emsc_event | 0;
 $user_data = $user_data | 0;
 var $emsc_event$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $emsc_event$addr = sp + 4 | 0;
 HEAP32[sp + 8 >> 2] = $emsc_type;
 HEAP32[$emsc_event$addr >> 2] = $emsc_event;
 HEAP32[sp >> 2] = $user_data;
 HEAP8[58953] = (HEAP32[HEAP32[$emsc_event$addr >> 2] >> 2] | 0) != 0 & 1;
 STACKTOP = sp;
 return 1;
}

function __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, $K_, $RHSComponentCache_, $ArrayCache_, $FunctionCache_) {
 $this = $this | 0;
 $K_ = $K_ | 0;
 $RHSComponentCache_ = $RHSComponentCache_ | 0;
 $ArrayCache_ = $ArrayCache_ | 0;
 $FunctionCache_ = $FunctionCache_ | 0;
 HEAP32[$this >> 2] = 13332;
 HEAP8[$this + 4 >> 0] = $K_;
 HEAP8[$this + 5 >> 0] = $RHSComponentCache_;
 HEAP8[$this + 6 >> 0] = $ArrayCache_;
 HEAP8[$this + 7 >> 0] = $FunctionCache_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($this, $Ty_, $Inits_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Inits_ = $Inits_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 56, 1, 1, 1);
 HEAP32[$this >> 2] = 14036;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Inits_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __sg_gl_end_pass() {
 if (!(HEAP8[2164786] & 1)) ___assert_fail(39890, 21600, 6508, 40997);
 if (_glGetError() | 0) ___assert_fail(29811, 21600, 6509, 40997);
 HEAP32[541200] = 0;
 HEAP32[541201] = 0;
 HEAP32[541197] = 0;
 HEAP32[541198] = 0;
 if (!(HEAP32[541199] | 0)) ___assert_fail(39767, 21600, 6545, 40997);
 _glBindFramebuffer(36160, HEAP32[(HEAP32[541199] | 0) + 12 >> 2] | 0);
 HEAP8[2164786] = 0;
 if (!(_glGetError() | 0)) return; else ___assert_fail(29811, 21600, 6548, 40997);
}

function __sapp_emsc_begin_drop($num) {
 $num = $num | 0;
 var $num$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $num$addr = sp;
 HEAP32[$num$addr >> 2] = $num;
 if (!(HEAP8[58968] & 1)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$num$addr >> 2] | 0) < 0) HEAP32[$num$addr >> 2] = 0;
 if ((HEAP32[$num$addr >> 2] | 0) > (HEAP32[14743] | 0)) HEAP32[$num$addr >> 2] = HEAP32[14743];
 HEAP32[14745] = HEAP32[$num$addr >> 2];
 __sapp_clear_drop_buffer();
 STACKTOP = sp;
 return;
}

function __ZNSt3__219__shared_weak_count14__release_weakEv($this) {
 $this = $this | 0;
 var $2 = 0, $__shared_weak_owners_ = 0;
 $__shared_weak_owners_ = $this + 8 | 0;
 if (!(HEAP32[$__shared_weak_owners_ >> 2] | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] & 127]($this); else {
  $2 = HEAP32[$__shared_weak_owners_ >> 2] | 0;
  HEAP32[$__shared_weak_owners_ >> 2] = $2 + -1;
  if (!$2) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] & 127]($this);
 }
 return;
}

function _stbi__get_chunk_header($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var $c = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 8 | 0;
 $c = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$c >> 2] = _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$c + 4 >> 2] = _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$c >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$c + 4 >> 2];
 STACKTOP = sp;
 return;
}

function __sg_gl_cache_clear_buffer_bindings($force) {
 $force = $force | 0;
 var $force$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $force$addr = sp;
 HEAP8[$force$addr >> 0] = $force & 1;
 if (HEAP8[$force$addr >> 0] & 1 | (HEAP32[541318] | 0) != 0) {
  _glBindBuffer(34962, 0);
  HEAP32[541318] = 0;
 }
 if (!(HEAP8[$force$addr >> 0] & 1 | (HEAP32[541319] | 0) != 0)) {
  STACKTOP = sp;
  return;
 }
 _glBindBuffer(34963, 0);
 HEAP32[541319] = 0;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE($this, $Ty_, $Ext_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 $Ext_ = $Ext_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 2, 1, 1, 1);
 HEAP32[$this >> 2] = 15840;
 HEAP32[$this + 8 >> 2] = $Ty_;
 $0 = $Ext_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _stm_since($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $start_ticks$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $start_ticks$addr = sp;
 $2 = $start_ticks$addr;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $6 = _stm_now() | 0;
 $7 = getTempRet0() | 0;
 $8 = $start_ticks$addr;
 $14 = _stm_diff($6, $7, HEAP32[$8 >> 2] | 0, HEAP32[$8 + 4 >> 2] | 0) | 0;
 setTempRet0(getTempRet0() | 0);
 STACKTOP = sp;
 return $14 | 0;
}

function __sg_gl_depth_attachment_format($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 switch (HEAP32[$fmt$addr >> 2] | 0) {
 case 41:
  {
   HEAP32[$retval >> 2] = 33189;
   break;
  }
 case 42:
  {
   HEAP32[$retval >> 2] = 35056;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4854, 37228);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __sfetch_ring_empty($rb) {
 $rb = $rb | 0;
 var $rb$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rb$addr = sp;
 HEAP32[$rb$addr >> 2] = $rb;
 if (!(HEAP32[$rb$addr >> 2] | 0)) ___assert_fail(41999, 25510, 1283, 43781);
 if (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 12 >> 2] | 0) {
  STACKTOP = sp;
  return (HEAP32[HEAP32[$rb$addr >> 2] >> 2] | 0) == (HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
 } else ___assert_fail(41999, 25510, 1283, 43781);
 return 0;
}

function _stbi__pnm_isspace($c) {
 $c = $c | 0;
 var $6 = 0, $c$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c$addr = sp;
 HEAP8[$c$addr >> 0] = $c;
 if ((HEAP8[$c$addr >> 0] | 0) == 32) $6 = 1; else if ((HEAP8[$c$addr >> 0] | 0) == 9) $6 = 1; else if ((HEAP8[$c$addr >> 0] | 0) == 10) $6 = 1; else if ((HEAP8[$c$addr >> 0] | 0) == 11) $6 = 1; else if ((HEAP8[$c$addr >> 0] | 0) == 12) $6 = 1; else $6 = (HEAP8[$c$addr >> 0] | 0) == 13;
 STACKTOP = sp;
 return $6 & 1 | 0;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $call = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 15]($catchType, $excpType, $temp) | 0;
 if ($call) HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $call & 1 | 0;
}

function __Z7pointAtRKNSt3__26vectorI8DrPointFNS_9allocatorIS1_EEEEi($point_list, $index) {
 $point_list = $point_list | 0;
 $index = $index | 0;
 var $1 = 0, $index$sink = 0, $sub$ptr$div$i = 0;
 $1 = HEAP32[$point_list >> 2] | 0;
 $sub$ptr$div$i = (HEAP32[$point_list + 4 >> 2] | 0) - $1 >> 4;
 if (($index | 0) < 0) $index$sink = $sub$ptr$div$i + $index | 0; else $index$sink = $index - (($sub$ptr$div$i | 0) > ($index | 0) ? 0 : $sub$ptr$div$i) | 0;
 return $1 + ($index$sink << 4) | 0;
}

function _stbi__compute_y_16($r, $g, $b) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 var $b$addr = 0, $g$addr = 0, $r$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $r$addr = sp + 8 | 0;
 $g$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$r$addr >> 2] = $r;
 HEAP32[$g$addr >> 2] = $g;
 HEAP32[$b$addr >> 2] = $b;
 STACKTOP = sp;
 return ((HEAP32[$r$addr >> 2] | 0) * 77 | 0) + ((HEAP32[$g$addr >> 2] | 0) * 150 | 0) + ((HEAP32[$b$addr >> 2] | 0) * 29 | 0) >> 8 & 65535 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ($0 | 0) __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 123);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 12 | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 125);
 return;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $call = 0, $call3 = 0, $call5 = 0;
 $call = _strlen($msg) | 0;
 $call3 = __Znwm($call + 13 | 0) | 0;
 HEAP32[$call3 >> 2] = $call;
 HEAP32[$call3 + 4 >> 2] = $call;
 HEAP32[$call3 + 8 >> 2] = 0;
 $call5 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($call3) | 0;
 _memcpy($call5 | 0, $msg | 0, $call + 1 | 0) | 0;
 HEAP32[$this >> 2] = $call5;
 return;
}

function __ZN13TPPLPartition8IsInsideER9TPPLPointS1_S1_S1_($this, $p1, $p2, $p3, $p) {
 $this = $this | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $p3 = $p3 | 0;
 $p = $p | 0;
 var $retval$0 = 0;
 if (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $p1, $p, $p2) | 0) $retval$0 = 0; else if (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $p2, $p, $p3) | 0) $retval$0 = 0; else $retval$0 = (__ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_(0, $p3, $p, $p1) | 0) ^ 1;
 return $retval$0 | 0;
}

function _stbi__compute_y($r, $g, $b) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 var $b$addr = 0, $g$addr = 0, $r$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $r$addr = sp + 8 | 0;
 $g$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$r$addr >> 2] = $r;
 HEAP32[$g$addr >> 2] = $g;
 HEAP32[$b$addr >> 2] = $b;
 STACKTOP = sp;
 return ((HEAP32[$r$addr >> 2] | 0) * 77 | 0) + ((HEAP32[$g$addr >> 2] | 0) * 150 | 0) + ((HEAP32[$b$addr >> 2] | 0) * 29 | 0) >> 8 & 255 | 0;
}

function __ZN8TPPLPolyaSERKS_($this, $src) {
 $this = $this | 0;
 $src = $src | 0;
 var $$arith = 0, $1 = 0, $call = 0;
 __ZN8TPPLPoly5ClearEv($this);
 HEAP8[$this + 8 >> 0] = HEAP8[$src + 8 >> 0] | 0;
 $1 = HEAP32[$src + 4 >> 2] | 0;
 HEAP32[$this + 4 >> 2] = $1;
 if (($1 | 0) > 0) {
  $$arith = $1 * 24 | 0;
  $call = __Znam($1 >>> 0 > 178956970 ? -1 : $$arith) | 0;
  HEAP32[$this >> 2] = $call;
  _memcpy($call | 0, HEAP32[$src >> 2] | 0, $$arith | 0) | 0;
 }
 return $this | 0;
}

function __ZN7DrImageD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 68 | 0);
 __ZNSt3__213__vector_baseINS_6vectorINS1_I8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEEENS3_IS7_EEED2Ev($this + 52 | 0);
 __ZNSt3__213__vector_baseINS_6vectorI8DrPointFNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($this + 40 | 0);
 __ZN8DrBitmapD2Ev($this + 12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_($this, $Enclosing) {
 $this = $this | 0;
 $Enclosing = $Enclosing | 0;
 HEAP8[$this >> 0] = 0;
 HEAP8[$this + 1 >> 0] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP8[$this + 8 >> 0] = 0;
 HEAP32[$this + 12 >> 2] = __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($Enclosing + 332 | 0) | 0;
 return;
}

function _resample_row_1($out, $in_near, $in_far, $w, $hs) {
 $out = $out | 0;
 $in_near = $in_near | 0;
 $in_far = $in_far | 0;
 $w = $w | 0;
 $hs = $hs | 0;
 var $in_near$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $in_near$addr = sp + 12 | 0;
 HEAP32[sp + 16 >> 2] = $out;
 HEAP32[$in_near$addr >> 2] = $in_near;
 HEAP32[sp + 8 >> 2] = $in_far;
 HEAP32[sp + 4 >> 2] = $w;
 HEAP32[sp >> 2] = $hs;
 STACKTOP = sp;
 return HEAP32[$in_near$addr >> 2] | 0;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $call$i$i$i = 0;
 if ((__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($this) | 0) >>> 0 < $__n >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $call$i$i$i = __Znwm($__n) | 0;
  HEAP32[$this + 4 >> 2] = $call$i$i$i;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $call$i$i$i + $__n;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function _fons__tt_getGlyphIndex($font, $codepoint) {
 $font = $font | 0;
 $codepoint = $codepoint | 0;
 var $call = 0, $codepoint$addr = 0, $font$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $font$addr = sp + 4 | 0;
 $codepoint$addr = sp;
 HEAP32[$font$addr >> 2] = $font;
 HEAP32[$codepoint$addr >> 2] = $codepoint;
 $call = _stbtt_FindGlyphIndex(HEAP32[$font$addr >> 2] | 0, HEAP32[$codepoint$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _HMM_LengthVec3($A) {
 $A = $A | 0;
 var $A$byval_copy = 0, $Result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $A$byval_copy = sp + 4 | 0;
 $Result = sp;
 HEAP32[$A$byval_copy >> 2] = HEAP32[$A >> 2];
 HEAP32[$A$byval_copy + 4 >> 2] = HEAP32[$A + 4 >> 2];
 HEAP32[$A$byval_copy + 8 >> 2] = HEAP32[$A + 8 >> 2];
 HEAPF32[$Result >> 2] = +_HMM_SquareRootF(+_HMM_LengthSquaredVec3($A$byval_copy));
 STACKTOP = sp;
 return +(+HEAPF32[$Result >> 2]);
}

function __sapp_emsc_onpaste($str) {
 $str = $str | 0;
 var $str$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $str$addr = sp;
 HEAP32[$str$addr >> 2] = $str;
 if (!(HEAP8[58956] & 1)) {
  STACKTOP = sp;
  return;
 }
 __sapp_strcpy(HEAP32[$str$addr >> 2] | 0, HEAP32[14741] | 0, HEAP32[14740] | 0) | 0;
 if (!(__sapp_events_enabled() | 0)) {
  STACKTOP = sp;
  return;
 }
 __sapp_init_event(21);
 __sapp_call_event(58728) | 0;
 STACKTOP = sp;
 return;
}

function __ZNK6DrVec3rmERKS_($agg$result, $this, $rhs) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $rhs = $rhs | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
 $0 = +HEAPF32[$this + 4 >> 2];
 $1 = +HEAPF32[$rhs + 8 >> 2];
 $2 = +HEAPF32[$this + 8 >> 2];
 $3 = +HEAPF32[$rhs + 4 >> 2];
 $4 = +HEAPF32[$rhs >> 2];
 $5 = +HEAPF32[$this >> 2];
 __ZN6DrVec3C2Efff($agg$result, $0 * $1 - $2 * $3, $2 * $4 - $1 * $5, $3 * $5 - $0 * $4);
 return;
}

function _sg_uninit_image($img_id) {
 $img_id = $img_id | 0;
 var $img_id$byval_copy = 0, $res = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $img_id$byval_copy = sp;
 $res = sp + 4 | 0;
 if (HEAP8[2164080] & 1) {
  HEAP32[$img_id$byval_copy >> 2] = HEAP32[$img_id >> 2];
  HEAP8[$res >> 0] = (__sg_uninit_image($img_id$byval_copy) | 0) & 1;
  STACKTOP = sp;
  return HEAP8[$res >> 0] & 1 | 0;
 } else ___assert_fail(21733, 21600, 14533, 21919);
 return 0;
}

function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $argc$addr = 0, $argv$addr = 0, $desc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $argc$addr = sp + 104 | 0;
 $argv$addr = sp + 100 | 0;
 $desc = sp;
 HEAP32[sp + 108 >> 2] = 0;
 HEAP32[$argc$addr >> 2] = $argc;
 HEAP32[$argv$addr >> 2] = $argv;
 _sokol_main($desc, HEAP32[$argc$addr >> 2] | 0, HEAP32[$argv$addr >> 2] | 0);
 __sapp_emsc_run($desc);
 STACKTOP = sp;
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi($this, $Basename_, $IsDtor_, $Variant_) {
 $this = $this | 0;
 $Basename_ = $Basename_ | 0;
 $IsDtor_ = $IsDtor_ | 0;
 $Variant_ = $Variant_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 37, 1, 1, 1);
 HEAP32[$this >> 2] = 15488;
 HEAP32[$this + 8 >> 2] = $Basename_;
 HEAP8[$this + 12 >> 0] = $IsDtor_ & 1;
 HEAP32[$this + 16 >> 2] = $Variant_;
 return;
}

function __ZL15HMM_Perspectiveffff($agg$result, $AspectRatio) {
 $agg$result = $agg$result | 0;
 $AspectRatio = +$AspectRatio;
 __ZL8HMM_Mat4v($agg$result);
 HEAPF32[$agg$result >> 2] = 2.027799367904663 / $AspectRatio;
 HEAPF32[$agg$result + 20 >> 2] = 2.027799367904663;
 HEAPF32[$agg$result + 44 >> 2] = -1.0;
 HEAPF32[$agg$result + 40 >> 2] = -1.0005000829696655;
 HEAPF32[$agg$result + 56 >> 2] = -10.002500534057617;
 HEAPF32[$agg$result + 60 >> 2] = 0.0;
 return;
}

function __ZN8TPPLPolyC2ERKS_($this, $src) {
 $this = $this | 0;
 $src = $src | 0;
 var $$arith = 0, $1 = 0, $call = 0;
 __ZN8TPPLPolyC2Ev($this);
 HEAP8[$this + 8 >> 0] = HEAP8[$src + 8 >> 0] | 0;
 $1 = HEAP32[$src + 4 >> 2] | 0;
 HEAP32[$this + 4 >> 2] = $1;
 if (($1 | 0) > 0) {
  $$arith = $1 * 24 | 0;
  $call = __Znam($1 >>> 0 > 178956970 ? -1 : $$arith) | 0;
  HEAP32[$this >> 2] = $call;
  _memcpy($call | 0, HEAP32[$src >> 2] | 0, $$arith | 0) | 0;
 }
 return;
}

function __sg_gl_vertexformat_normalized($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 switch (HEAP32[$fmt$addr >> 2] | 0) {
 case 15:
 case 14:
 case 13:
 case 11:
 case 10:
 case 8:
 case 6:
  {
   HEAP8[$retval >> 0] = 1;
   break;
  }
 default:
  HEAP8[$retval >> 0] = 0;
 }
 STACKTOP = sp;
 return HEAP8[$retval >> 0] | 0;
}

function __sg_gl_texture_target($t) {
 $t = $t | 0;
 var $retval = 0, $t$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $t$addr = sp;
 HEAP32[$t$addr >> 2] = $t;
 switch (HEAP32[$t$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 3553;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 34067;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4400, 37259);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __sg_gl_buffer_target($t) {
 $t = $t | 0;
 var $retval = 0, $t$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $t$addr = sp;
 HEAP32[$t$addr >> 2] = $t;
 switch (HEAP32[$t$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$retval >> 2] = 34962;
   break;
  }
 case 2:
  {
   HEAP32[$retval >> 2] = 34963;
   break;
  }
 default:
  ___assert_fail(47680, 21600, 4388, 36494);
 }
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZN17meshopt_Allocator8allocateIjEEPT_m($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $1 = 0, $call = 0, $count = 0;
 $count = $this + 96 | 0;
 if ((HEAP32[$count >> 2] | 0) >>> 0 < 24) {
  $call = __Znwm($size >>> 0 > 1073741823 ? -1 : $size << 2) | 0;
  $1 = HEAP32[$count >> 2] | 0;
  HEAP32[$count >> 2] = $1 + 1;
  HEAP32[$this + ($1 << 2) >> 2] = $call;
  return $call | 0;
 } else ___assert_fail(46415, 46458, 698, 46539);
 return 0;
}

function __ZN17meshopt_Allocator8allocateIfEEPT_m($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $1 = 0, $call = 0, $count = 0;
 $count = $this + 96 | 0;
 if ((HEAP32[$count >> 2] | 0) >>> 0 < 24) {
  $call = __Znwm($size >>> 0 > 1073741823 ? -1 : $size << 2) | 0;
  $1 = HEAP32[$count >> 2] | 0;
  HEAP32[$count >> 2] = $1 + 1;
  HEAP32[$this + ($1 << 2) >> 2] = $call;
  return $call | 0;
 } else ___assert_fail(46415, 46458, 698, 46539);
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZNSt3__210shared_ptrI7DrImageED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__shared_owners_$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if ($0 | 0) {
  $__shared_owners_$i$i = $0 + 4 | 0;
  $1 = HEAP32[$__shared_owners_$i$i >> 2] | 0;
  HEAP32[$__shared_owners_$i$i >> 2] = $1 + -1;
  if (!$1) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 127]($0);
   __ZNSt3__219__shared_weak_count14__release_weakEv($0);
  }
 }
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function _stbi__blinn_8x8($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $t = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $x$addr = sp + 5 | 0;
 $y$addr = sp + 4 | 0;
 $t = sp;
 HEAP8[$x$addr >> 0] = $x;
 HEAP8[$y$addr >> 0] = $y;
 HEAP32[$t >> 2] = (Math_imul(HEAPU8[$x$addr >> 0] | 0, HEAPU8[$y$addr >> 0] | 0) | 0) + 128;
 STACKTOP = sp;
 return ((HEAP32[$t >> 2] | 0) + ((HEAP32[$t >> 2] | 0) >>> 8) | 0) >>> 8 & 255 | 0;
}

function __ZNSt3__210shared_ptrI6DrMeshED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__shared_owners_$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if ($0 | 0) {
  $__shared_owners_$i$i = $0 + 4 | 0;
  $1 = HEAP32[$__shared_owners_$i$i >> 2] | 0;
  HEAP32[$__shared_owners_$i$i >> 2] = $1 + -1;
  if (!$1) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 127]($0);
   __ZNSt3__219__shared_weak_count14__release_weakEv($0);
  }
 }
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE($this, $Child_, $Quals_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 $Quals_ = $Quals_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 3, HEAP8[$Child_ + 5 >> 0] | 0, HEAP8[$Child_ + 6 >> 0] | 0, HEAP8[$Child_ + 7 >> 0] | 0);
 HEAP32[$this >> 2] = 15796;
 HEAP32[$this + 8 >> 2] = $Quals_;
 HEAP32[$this + 12 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function _fonsSetSpacing($stash, $spacing) {
 $stash = $stash | 0;
 $spacing = +$spacing;
 var $0 = 0.0, $spacing$addr = 0, $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp + 4 | 0;
 $spacing$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAPF32[$spacing$addr >> 2] = $spacing;
 $0 = +HEAPF32[$spacing$addr >> 2];
 HEAPF32[(_fons__getState(HEAP32[$stash$addr >> 2] | 0) | 0) + 20 >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function _sgl_make_pipeline($desc) {
 $desc = $desc | 0;
 var $desc$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $desc$addr = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 if (-1412584499 == (HEAP32[541358] | 0)) {
  HEAP32[$retval >> 2] = __sgl_make_pipeline(HEAP32[$desc$addr >> 2] | 0) | 0;
  STACKTOP = sp;
  return HEAP32[$retval >> 2] | 0;
 } else ___assert_fail(23666, 23371, 2801, 23712);
 return 0;
}

function _sg_shutdown() {
 var $ctx = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx = sp;
 if (HEAP32[541058] | 0) {
  HEAP32[$ctx >> 2] = __sg_lookup_context(2164252, HEAP32[541058] | 0) | 0;
  if (HEAP32[$ctx >> 2] | 0) {
   __sg_destroy_all_resources(2164252, HEAP32[541058] | 0);
   __sg_destroy_context(HEAP32[$ctx >> 2] | 0);
  }
 }
 __sg_discard_backend();
 __sg_discard_pools(2164252);
 HEAP8[2164080] = 0;
 STACKTOP = sp;
 return;
}

function __ZN2Dr4SwapI7DrColorEEvRT_S3_($number1, $number2) {
 $number1 = $number1 | 0;
 $number2 = $number2 | 0;
 var $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 HEAP32[$temp >> 2] = HEAPU8[$number1 >> 0] | HEAPU8[$number1 + 1 >> 0] << 8 | HEAPU8[$number1 + 2 >> 0] << 16 | HEAPU8[$number1 + 3 >> 0] << 24;
 __ZN7DrColoraSERKS_($number1, $number2) | 0;
 __ZN7DrColoraSERKS_($number2, $temp) | 0;
 STACKTOP = sp;
 return;
}

function __ZN17meshopt_Allocator8allocateItEEPT_m($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $1 = 0, $call = 0, $count = 0;
 $count = $this + 96 | 0;
 if ((HEAP32[$count >> 2] | 0) >>> 0 < 24) {
  $call = __Znwm(($size | 0) < 0 ? -1 : $size << 1) | 0;
  $1 = HEAP32[$count >> 2] | 0;
  HEAP32[$count >> 2] = $1 + 1;
  HEAP32[$this + ($1 << 2) >> 2] = $call;
  return $call | 0;
 } else ___assert_fail(46415, 46458, 698, 46539);
 return 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb($this, $Op_, $IsGlobal_, $IsArray_) {
 $this = $this | 0;
 $Op_ = $Op_ | 0;
 $IsGlobal_ = $IsGlobal_ | 0;
 $IsArray_ = $IsArray_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 52, 1, 1, 1);
 HEAP32[$this >> 2] = 14872;
 HEAP32[$this + 8 >> 2] = $Op_;
 HEAP8[$this + 12 >> 0] = $IsGlobal_ & 1;
 HEAP8[$this + 13 >> 0] = $IsArray_ & 1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE($this, $Dimension_) {
 $this = $this | 0;
 $Dimension_ = $Dimension_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 26, 1, 1, 1);
 HEAP32[$this >> 2] = 15752;
 $0 = $Dimension_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE($this, $Bindings_) {
 $this = $this | 0;
 $Bindings_ = $Bindings_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 41, 1, 1, 1);
 HEAP32[$this >> 2] = 15312;
 $0 = $Bindings_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE($this, $Elements_) {
 $this = $this | 0;
 $Elements_ = $Elements_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 28, 1, 1, 1);
 HEAP32[$this >> 2] = 13948;
 $0 = $Elements_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE($this, $Contents_) {
 $this = $this | 0;
 $Contents_ = $Contents_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 62, 1, 1, 1);
 HEAP32[$this >> 2] = 13816;
 $0 = $Contents_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE($this, $Contents_) {
 $this = $this | 0;
 $Contents_ = $Contents_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 64, 1, 1, 1);
 HEAP32[$this >> 2] = 13728;
 $0 = $Contents_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE($this, $Contents_) {
 $this = $this | 0;
 $Contents_ = $Contents_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 63, 1, 1, 1);
 HEAP32[$this >> 2] = 13772;
 $0 = $Contents_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __sg_pixelformat_all($pfi) {
 $pfi = $pfi | 0;
 var $pfi$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pfi$addr = sp;
 HEAP32[$pfi$addr >> 2] = $pfi;
 HEAP8[HEAP32[$pfi$addr >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 1 >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 3 >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 2 >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 4 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_($this, $ClassType_, $MemberType_) {
 $this = $this | 0;
 $ClassType_ = $ClassType_ | 0;
 $MemberType_ = $MemberType_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 13, HEAP8[$MemberType_ + 5 >> 0] | 0, 1, 1);
 HEAP32[$this >> 2] = 15620;
 HEAP32[$this + 8 >> 2] = $ClassType_;
 HEAP32[$this + 12 >> 2] = $MemberType_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE($this, $Conditions_) {
 $this = $this | 0;
 $Conditions_ = $Conditions_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 9, 1, 1, 1);
 HEAP32[$this >> 2] = 16192;
 $0 = $Conditions_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this, $args, $args1, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_($this + 368 | 0, $args, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE($this, $Pointee_, $RK_) {
 $this = $this | 0;
 $Pointee_ = $Pointee_ | 0;
 $RK_ = $RK_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 12, HEAP8[$Pointee_ + 5 >> 0] | 0, 1, 1);
 HEAP32[$this >> 2] = 13464;
 HEAP32[$this + 8 >> 2] = $Pointee_;
 HEAP32[$this + 12 >> 2] = $RK_;
 HEAP8[$this + 16 >> 0] = 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b($this, $Elem_, $Init_, $IsArray_) {
 $this = $this | 0;
 $Elem_ = $Elem_ | 0;
 $Init_ = $Init_ | 0;
 $IsArray_ = $IsArray_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 65, 1, 1, 1);
 HEAP32[$this >> 2] = 14476;
 HEAP32[$this + 8 >> 2] = $Elem_;
 HEAP32[$this + 12 >> 2] = $Init_;
 HEAP8[$this + 16 >> 0] = $IsArray_ & 1;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __sg_roundup($val, $round_to) {
 $val = $val | 0;
 $round_to = $round_to | 0;
 var $round_to$addr = 0, $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $val$addr = sp + 4 | 0;
 $round_to$addr = sp;
 HEAP32[$val$addr >> 2] = $val;
 HEAP32[$round_to$addr >> 2] = $round_to;
 STACKTOP = sp;
 return (HEAP32[$val$addr >> 2] | 0) + ((HEAP32[$round_to$addr >> 2] | 0) - 1) & ~((HEAP32[$round_to$addr >> 2] | 0) - 1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, 52155) | 0;
}

function __sg_gl_init_pixelformats($has_bgra) {
 $has_bgra = $has_bgra | 0;
 var $has_bgra$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $has_bgra$addr = sp;
 HEAP8[$has_bgra$addr >> 0] = $has_bgra & 1;
 __sg_pixelformat_sf(2164424);
 __sg_pixelformat_all(2164550);
 if (HEAP8[$has_bgra$addr >> 0] & 1) __sg_pixelformat_all(2164574);
 __sg_pixelformat_srmd(2164658);
 __sg_pixelformat_srmd(2164664);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this, $C) {
 $this = $this | 0;
 $C = $C | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 4 >> 2] | 0)) $retval$0 = 0; else if ((HEAP8[$0 >> 0] | 0) == $C << 24 >> 24) {
  HEAP32[$this >> 2] = $0 + 1;
  $retval$0 = 1;
 } else $retval$0 = 0;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this + 368 | 0, $args, $args1, 52155) | 0;
}

function _fons__deleteAtlas($atlas) {
 $atlas = $atlas | 0;
 var $atlas$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $atlas$addr = sp;
 HEAP32[$atlas$addr >> 2] = $atlas;
 if (!(HEAP32[$atlas$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0) _free(HEAP32[(HEAP32[$atlas$addr >> 2] | 0) + 8 >> 2] | 0);
 _free(HEAP32[$atlas$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _fonsSetColor($stash, $color) {
 $stash = $stash | 0;
 $color = $color | 0;
 var $0 = 0, $color$addr = 0, $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp + 4 | 0;
 $color$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$color$addr >> 2] = $color;
 $0 = HEAP32[$color$addr >> 2] | 0;
 HEAP32[(_fons__getState(HEAP32[$stash$addr >> 2] | 0) | 0) + 12 >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_($this, $First_, $Last_, $Init_) {
 $this = $this | 0;
 $First_ = $First_ | 0;
 $Last_ = $Last_ | 0;
 $Init_ = $Init_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 66, 1, 1, 1);
 HEAP32[$this >> 2] = 14432;
 HEAP32[$this + 8 >> 2] = $First_;
 HEAP32[$this + 12 >> 2] = $Last_;
 HEAP32[$this + 16 >> 2] = $Init_;
 return;
}

function _fonsSetAlign($stash, $align) {
 $stash = $stash | 0;
 $align = $align | 0;
 var $0 = 0, $align$addr = 0, $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp + 4 | 0;
 $align$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$align$addr >> 2] = $align;
 $0 = HEAP32[$align$addr >> 2] | 0;
 HEAP32[(_fons__getState(HEAP32[$stash$addr >> 2] | 0) | 0) + 4 >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __sg_pass_color_image($pass, $index) {
 $pass = $pass | 0;
 $index = $index | 0;
 var $call = 0, $index$addr = 0, $pass$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pass$addr = sp + 4 | 0;
 $index$addr = sp;
 HEAP32[$pass$addr >> 2] = $pass;
 HEAP32[$index$addr >> 2] = $index;
 $call = __sg_gl_pass_color_image(HEAP32[$pass$addr >> 2] | 0, HEAP32[$index$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0(($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0), $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE($this, $Types_) {
 $this = $this | 0;
 $Types_ = $Types_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 17, 1, 1, 1);
 HEAP32[$this >> 2] = 15972;
 $0 = $Types_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_($this, $Cond_, $Then_, $Else_) {
 $this = $this | 0;
 $Cond_ = $Cond_ | 0;
 $Then_ = $Then_ | 0;
 $Else_ = $Else_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 45, 1, 1, 1);
 HEAP32[$this >> 2] = 14300;
 HEAP32[$this + 8 >> 2] = $Cond_;
 HEAP32[$this + 12 >> 2] = $Then_;
 HEAP32[$this + 16 >> 2] = $Else_;
 return;
}

function __sgl_prev_command() {
 var $3 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp;
 if ((HEAP32[541371] | 0) > 0) {
  HEAP32[$retval >> 2] = (HEAP32[541374] | 0) + (((HEAP32[541371] | 0) - 1 | 0) * 24 | 0);
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE($this, $Number_) {
 $this = $this | 0;
 $Number_ = $Number_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 54, 1, 1, 1);
 HEAP32[$this >> 2] = 15136;
 $0 = $Number_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function _stbtt__sort_edges($p, $n) {
 $p = $p | 0;
 $n = $n | 0;
 var $n$addr = 0, $p$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp + 4 | 0;
 $n$addr = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$n$addr >> 2] = $n;
 _stbtt__sort_edges_quicksort(HEAP32[$p$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0);
 _stbtt__sort_edges_ins_sort(HEAP32[$p$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _fons__tt_getPixelHeightScale($font, $size) {
 $font = $font | 0;
 $size = +$size;
 var $call = 0.0, $font$addr = 0, $size$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $font$addr = sp + 4 | 0;
 $size$addr = sp;
 HEAP32[$font$addr >> 2] = $font;
 HEAPF32[$size$addr >> 2] = $size;
 $call = +_stbtt_ScaleForPixelHeight(HEAP32[$font$addr >> 2] | 0, +HEAPF32[$size$addr >> 2]);
 STACKTOP = sp;
 return +$call;
}

function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $__end_ = 0, $__n$addr$0 = 0;
 $__end_ = $this + 8 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $__n$addr$0 = $__n;
 do {
  HEAP8[$0 >> 0] = 0;
  $0 = (HEAP32[$__end_ >> 2] | 0) + 1 | 0;
  HEAP32[$__end_ >> 2] = $0;
  $__n$addr$0 = $__n$addr$0 + -1 | 0;
 } while (($__n$addr$0 | 0) != 0);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_($call, HEAP32[$args >> 2] | 0, HEAP32[$args1 >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE($this, $Count_) {
 $this = $this | 0;
 $Count_ = $Count_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 39, 1, 1, 1);
 HEAP32[$this >> 2] = 15400;
 $0 = $Count_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE($this, $Params_) {
 $this = $this | 0;
 $Params_ = $Params_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 30, 1, 1, 1);
 HEAP32[$this >> 2] = 13596;
 $0 = $Params_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($this, $Str) {
 $this = $this | 0;
 $Str = $Str | 0;
 var $call = 0, $call2 = 0, $cmp = 0;
 $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Str) | 0;
 $call2 = __ZNK12_GLOBAL__N_110StringView3endEv($Str) | 0;
 $cmp = ($call2 | 0) == 0;
 HEAP32[$this >> 2] = $cmp ? $call + 1 | 0 : $call;
 HEAP32[$this + 4 >> 2] = $cmp ? $call2 + 1 | 0 : $call2;
 return;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $1 = 0, $spec$select = 0, $sub$ptr$sub = 0, $wpos = 0;
 $wpos = $f + 20 | 0;
 $1 = HEAP32[$wpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 16 >> 2] | 0) - $1 | 0;
 $spec$select = $sub$ptr$sub >>> 0 > $l >>> 0 ? $l : $sub$ptr$sub;
 _memcpy($1 | 0, $s | 0, $spec$select | 0) | 0;
 HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $spec$select;
 return $l | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __Znwm($size) {
 $size = $size | 0;
 var $call = 0, $call$lcssa = 0, $call2 = 0, $spec$store$select = 0;
 $spec$store$select = ($size | 0) == 0 ? 1 : $size;
 while (1) {
  $call = _malloc($spec$store$select) | 0;
  if ($call | 0) {
   $call$lcssa = $call;
   break;
  }
  $call2 = __ZSt15get_new_handlerv() | 0;
  if (!$call2) {
   $call$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 7]();
 }
 return $call$lcssa | 0;
}

function _fonsSetBlur($stash, $blur) {
 $stash = $stash | 0;
 $blur = +$blur;
 var $0 = 0.0, $blur$addr = 0, $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp + 4 | 0;
 $blur$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAPF32[$blur$addr >> 2] = $blur;
 $0 = +HEAPF32[$blur$addr >> 2];
 HEAPF32[(_fons__getState(HEAP32[$stash$addr >> 2] | 0) | 0) + 16 >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __sg_gl_cache_active_texture($texture) {
 $texture = $texture | 0;
 var $texture$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $texture$addr = sp;
 HEAP32[$texture$addr >> 2] = $texture;
 if ((HEAP32[541352] | 0) == (HEAP32[$texture$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[541352] = HEAP32[$texture$addr >> 2];
 _glActiveTexture(HEAP32[$texture$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function _fonsSetSize($stash, $size) {
 $stash = $stash | 0;
 $size = +$size;
 var $0 = 0.0, $size$addr = 0, $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp + 4 | 0;
 $size$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAPF32[$size$addr >> 2] = $size;
 $0 = +HEAPF32[$size$addr >> 2];
 HEAPF32[(_fons__getState(HEAP32[$stash$addr >> 2] | 0) | 0) + 8 >> 2] = $0;
 STACKTOP = sp;
 return;
}

function _stbtt__hheap_free($hh, $p) {
 $hh = $hh | 0;
 $p = $p | 0;
 var $hh$addr = 0, $p$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $hh$addr = sp + 4 | 0;
 $p$addr = sp;
 HEAP32[$hh$addr >> 2] = $hh;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[HEAP32[$p$addr >> 2] >> 2] = HEAP32[(HEAP32[$hh$addr >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$hh$addr >> 2] | 0) + 4 >> 2] = HEAP32[$p$addr >> 2];
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE($this, $Array_) {
 $this = $this | 0;
 $Array_ = $Array_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 0, 1, 1, 1);
 HEAP32[$this >> 2] = 14080;
 $0 = $Array_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $args1, $args3) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, 53394, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $args1, $args3) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, 54688, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $args1, $args3) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, 53335, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_($this, $args1, $args3) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this + 368 | 0, 54860, $args1, $args3) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_($this, $args, $args3) {
 $this = $this | 0;
 $args = $args | 0;
 $args3 = $args3 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_($this + 368 | 0, $args, 53849, $args3) | 0;
}

function _fonsSetFont($stash, $font) {
 $stash = $stash | 0;
 $font = $font | 0;
 var $0 = 0, $font$addr = 0, $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp + 4 | 0;
 $font$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 HEAP32[$font$addr >> 2] = $font;
 $0 = HEAP32[$font$addr >> 2] | 0;
 HEAP32[(_fons__getState(HEAP32[$stash$addr >> 2] | 0) | 0) >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __ZN17meshopt_Allocator8allocateIhEEPT_m($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $1 = 0, $call = 0, $count = 0;
 $count = $this + 96 | 0;
 if ((HEAP32[$count >> 2] | 0) >>> 0 < 24) {
  $call = __Znwm($size) | 0;
  $1 = HEAP32[$count >> 2] | 0;
  HEAP32[$count >> 2] = $1 + 1;
  HEAP32[$this + ($1 << 2) >> 2] = $call;
  return $call | 0;
 } else ___assert_fail(46415, 46458, 698, 46539);
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __sgl_slot_index($id) {
 $id = $id | 0;
 var $id$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$id$addr >> 2] = $id;
 HEAP32[$slot_index >> 2] = HEAP32[$id$addr >> 2] & 65535;
 if (HEAP32[$slot_index >> 2] | 0) {
  STACKTOP = sp;
  return HEAP32[$slot_index >> 2] | 0;
 } else ___assert_fail(30660, 23371, 2189, 41849);
 return 0;
}

function __sg_slot_index($id) {
 $id = $id | 0;
 var $id$addr = 0, $slot_index = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $id$addr = sp + 4 | 0;
 $slot_index = sp;
 HEAP32[$id$addr >> 2] = $id;
 HEAP32[$slot_index >> 2] = HEAP32[$id$addr >> 2] & 65535;
 if (HEAP32[$slot_index >> 2] | 0) {
  STACKTOP = sp;
  return HEAP32[$slot_index >> 2] | 0;
 } else ___assert_fail(30660, 21600, 12961, 30678);
 return 0;
}

function __ZNSt3__218__libcpp_refstringD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $call2 = 0, $count = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) | 0) {
  $call2 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_2089(HEAP32[$this >> 2] | 0) | 0;
  $count = $call2 + 8 | 0;
  $1 = HEAP32[$count >> 2] | 0;
  HEAP32[$count >> 2] = $1 + -1;
  if (($1 | 0) < 1) __ZdlPv($call2);
 }
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $__end_ = 0, $__n$addr$0 = 0;
 $__end_ = $this + 4 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $__n$addr$0 = $__n;
 do {
  HEAP8[$0 >> 0] = 0;
  $0 = (HEAP32[$__end_ >> 2] | 0) + 1 | 0;
  HEAP32[$__end_ >> 2] = $0;
  $__n$addr$0 = $__n$addr$0 + -1 | 0;
 } while (($__n$addr$0 | 0) != 0);
 return;
}

function __ZN12_GLOBAL__N_116register_integerIsEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIsvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 2, -32768 << 16 >> 16 | 0, 32767 << 16 >> 16 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($this, $Name_) {
 $this = $this | 0;
 $Name_ = $Name_ | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 7, 1, 1, 1);
 HEAP32[$this >> 2] = 14520;
 $0 = $Name_;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_($this, $FirstType_, $SecondType_) {
 $this = $this | 0;
 $FirstType_ = $FirstType_ | 0;
 $SecondType_ = $SecondType_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 21, 1, 1, 1);
 HEAP32[$this >> 2] = 16236;
 HEAP32[$this + 8 >> 2] = $FirstType_;
 HEAP32[$this + 12 >> 2] = $SecondType_;
 return;
}

function __sg_create_shader($shd, $desc) {
 $shd = $shd | 0;
 $desc = $desc | 0;
 var $call = 0, $desc$addr = 0, $shd$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $shd$addr = sp + 4 | 0;
 $desc$addr = sp;
 HEAP32[$shd$addr >> 2] = $shd;
 HEAP32[$desc$addr >> 2] = $desc;
 $call = __sg_gl_create_shader(HEAP32[$shd$addr >> 2] | 0, HEAP32[$desc$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __sg_create_buffer($buf, $desc) {
 $buf = $buf | 0;
 $desc = $desc | 0;
 var $buf$addr = 0, $call = 0, $desc$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf$addr = sp + 4 | 0;
 $desc$addr = sp;
 HEAP32[$buf$addr >> 2] = $buf;
 HEAP32[$desc$addr >> 2] = $desc;
 $call = __sg_gl_create_buffer(HEAP32[$buf$addr >> 2] | 0, HEAP32[$desc$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116register_integerIcEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIcvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 1, -128 << 24 >> 24 | 0, 127 << 24 >> 24 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIaEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIavE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 1, -128 << 24 >> 24 | 0, 127 << 24 >> 24 | 0);
 STACKTOP = sp;
 return;
}

function __ZN2Dr5ClampIhEET_RKS1_S3_S3_($number_to_check, $min, $max) {
 $number_to_check = $number_to_check | 0;
 $min = $min | 0;
 $max = $max | 0;
 var $0 = 0, $1 = 0, $2 = 0, $retval$0 = 0;
 $0 = HEAP8[$number_to_check >> 0] | 0;
 $1 = HEAP8[$min >> 0] | 0;
 if (($0 & 255) < ($1 & 255)) $retval$0 = $1; else {
  $2 = HEAP8[$max >> 0] | 0;
  $retval$0 = ($0 & 255) > ($2 & 255) ? $2 : $0;
 }
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this + 368 | 0, 53147, $args1, 52155) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this + 368 | 0, 53475, $args1, 52155) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function _HMM_DotVec3($VecOne, $VecTwo) {
 $VecOne = $VecOne | 0;
 $VecTwo = $VecTwo | 0;
 var $Result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Result = sp;
 HEAPF32[$Result >> 2] = +HEAPF32[$VecOne >> 2] * +HEAPF32[$VecTwo >> 2] + +HEAPF32[$VecOne + 4 >> 2] * +HEAPF32[$VecTwo + 4 >> 2] + +HEAPF32[$VecOne + 8 >> 2] * +HEAPF32[$VecTwo + 8 >> 2];
 STACKTOP = sp;
 return +(+HEAPF32[$Result >> 2]);
}

function __sg_reset_slot($slot) {
 $slot = $slot | 0;
 var $1 = 0, $slot$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $slot$addr = sp;
 HEAP32[$slot$addr >> 2] = $slot;
 if (HEAP32[$slot$addr >> 2] | 0) {
  $1 = HEAP32[$slot$addr >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(30523, 21600, 12822, 30528);
}

function __sg_create_image($img, $desc) {
 $img = $img | 0;
 $desc = $desc | 0;
 var $call = 0, $desc$addr = 0, $img$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $img$addr = sp + 4 | 0;
 $desc$addr = sp;
 HEAP32[$img$addr >> 2] = $img;
 HEAP32[$desc$addr >> 2] = $desc;
 $call = __sg_gl_create_image(HEAP32[$img$addr >> 2] | 0, HEAP32[$desc$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZNK7meshopt12VertexHasher5equalEjj($this, $lhs, $rhs) {
 $this = $this | 0;
 $lhs = $lhs | 0;
 $rhs = $rhs | 0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr5 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 $add$ptr = $0 + (Math_imul($1, $lhs) | 0) | 0;
 $add$ptr5 = $0 + (Math_imul($1, $rhs) | 0) | 0;
 return (_memcmp($add$ptr, $add$ptr5, HEAP32[$this + 4 >> 2] | 0) | 0) == 0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this, $Lookahead) {
 $this = $this | 0;
 $Lookahead = $Lookahead | 0;
 var $1 = 0, $retval$0 = 0;
 $1 = HEAP32[$this >> 2] | 0;
 if (((HEAP32[$this + 4 >> 2] | 0) - $1 | 0) >>> 0 > $Lookahead >>> 0) $retval$0 = HEAP8[$1 + $Lookahead >> 0] | 0; else $retval$0 = 0;
 return $retval$0 | 0;
}

function __ZN2Dr5ClampIiEET_RKS1_S3_S3_($number_to_check, $min, $max) {
 $number_to_check = $number_to_check | 0;
 $min = $min | 0;
 $max = $max | 0;
 var $0 = 0, $1 = 0, $2 = 0, $retval$0 = 0;
 $0 = HEAP32[$number_to_check >> 2] | 0;
 $1 = HEAP32[$min >> 2] | 0;
 if (($0 | 0) < ($1 | 0)) $retval$0 = $1; else {
  $2 = HEAP32[$max >> 2] | 0;
  $retval$0 = ($0 | 0) > ($2 | 0) ? $2 : $0;
 }
 return $retval$0 | 0;
}

function _stbi__get16le($s) {
 $s = $s | 0;
 var $1 = 0, $add = 0, $s$addr = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $z = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$z >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 $1 = HEAP32[$z >> 2] | 0;
 $add = $1 + (((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255) << 8) | 0;
 STACKTOP = sp;
 return $add | 0;
}

function _stbi__get16be($s) {
 $s = $s | 0;
 var $add = 0, $s$addr = 0, $shl = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $z = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$z >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 $shl = HEAP32[$z >> 2] << 8;
 $add = $shl + ((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255) | 0;
 STACKTOP = sp;
 return $add | 0;
}

function __sfetch_make_id($index, $gen_ctr) {
 $index = $index | 0;
 $gen_ctr = $gen_ctr | 0;
 var $gen_ctr$addr = 0, $index$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $index$addr = sp + 4 | 0;
 $gen_ctr$addr = sp;
 HEAP32[$index$addr >> 2] = $index;
 HEAP32[$gen_ctr$addr >> 2] = $gen_ctr;
 STACKTOP = sp;
 return HEAP32[$gen_ctr$addr >> 2] << 16 | HEAP32[$index$addr >> 2] & 65535 | 0;
}

function __ZNK7DrColorneERKS_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $8 = 0;
 if ((HEAP8[$this >> 0] | 0) == (HEAP8[$other >> 0] | 0)) if ((HEAP8[$this + 1 >> 0] | 0) == (HEAP8[$other + 1 >> 0] | 0)) if ((HEAP8[$this + 2 >> 0] | 0) == (HEAP8[$other + 2 >> 0] | 0)) $8 = (HEAP8[$this + 3 >> 0] | 0) != (HEAP8[$other + 3 >> 0] | 0); else $8 = 1; else $8 = 1; else $8 = 1;
 return $8 | 0;
}

function __ZNK7DrColoreqERKS_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $8 = 0;
 if ((HEAP8[$this >> 0] | 0) == (HEAP8[$other >> 0] | 0)) if ((HEAP8[$this + 1 >> 0] | 0) == (HEAP8[$other + 1 >> 0] | 0)) if ((HEAP8[$this + 2 >> 0] | 0) == (HEAP8[$other + 2 >> 0] | 0)) $8 = (HEAP8[$this + 3 >> 0] | 0) == (HEAP8[$other + 3 >> 0] | 0); else $8 = 0; else $8 = 0; else $8 = 0;
 return $8 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $CurrentPackMax = 0;
 $CurrentPackMax = $S + 16 | 0;
 if ((HEAP32[$CurrentPackMax >> 2] | 0) == -1) {
  HEAP32[$CurrentPackMax >> 2] = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($this + 8 | 0) | 0;
  HEAP32[$S + 12 >> 2] = 0;
 }
 return;
}

function __ZN13TPPLPartition5BelowER9TPPLPointS1_($this, $p1, $p2) {
 $this = $this | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 var $0 = 0.0, $1 = 0.0, $retval$0 = 0;
 $0 = +HEAPF64[$p1 + 8 >> 3];
 $1 = +HEAPF64[$p2 + 8 >> 3];
 do if ($0 < $1) $retval$0 = 1; else {
  if ($0 == $1) if (+HEAPF64[$p1 >> 3] < +HEAPF64[$p2 >> 3]) {
   $retval$0 = 1;
   break;
  }
  $retval$0 = 0;
 } while (0);
 return $retval$0 | 0;
}

function __sfetch_make_handle($slot_id) {
 $slot_id = $slot_id | 0;
 var $h = 0, $retval = 0, $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $slot_id$addr = sp + 4 | 0;
 $h = sp;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 HEAP32[$h >> 2] = HEAP32[$slot_id$addr >> 2];
 HEAP32[$retval >> 2] = HEAP32[$h >> 2];
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_($this + 368 | 0, $args, 52078) | 0;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm($this, $NBytes) {
 $this = $this | 0;
 $NBytes = $NBytes | 0;
 var $0 = 0, $call = 0;
 $call = _malloc($NBytes + 8 | 0) | 0;
 if (!$call) __ZSt9terminatev(); else {
  $0 = HEAP32[$this + 4096 >> 2] | 0;
  HEAP32[$call >> 2] = HEAP32[$0 >> 2];
  HEAP32[$call + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = $call;
  return $call + 8 | 0;
 }
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this, $args, $args1) {
 $this = $this | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this + 368 | 0, $args, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_($this, $Name_, $TemplateArgs_) {
 $this = $this | 0;
 $Name_ = $Name_ | 0;
 $TemplateArgs_ = $TemplateArgs_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 32, 1, 1, 1);
 HEAP32[$this >> 2] = 13552;
 HEAP32[$this + 8 >> 2] = $Name_;
 HEAP32[$this + 12 >> 2] = $TemplateArgs_;
 return;
}

function __saudio_ring_full($ring) {
 $ring = $ring | 0;
 var $call = 0, $ring$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ring$addr = sp;
 HEAP32[$ring$addr >> 2] = $ring;
 $call = __saudio_ring_idx(HEAP32[$ring$addr >> 2] | 0, (HEAP32[HEAP32[$ring$addr >> 2] >> 2] | 0) + 1 | 0) | 0;
 STACKTOP = sp;
 return ($call | 0) == (HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_($this + 368 | 0, $args, 52146) | 0;
}

function __sgl_make_pip_id($pip_id) {
 $pip_id = $pip_id | 0;
 var $pip = 0, $pip_id$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 8 | 0;
 $pip_id$addr = sp + 4 | 0;
 $pip = sp;
 HEAP32[$pip_id$addr >> 2] = $pip_id;
 HEAP32[$pip >> 2] = HEAP32[$pip_id$addr >> 2];
 HEAP32[$retval >> 2] = HEAP32[$pip >> 2];
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function _stbi__get32le($s) {
 $s = $s | 0;
 var $1 = 0, $add = 0, $s$addr = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $z = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$z >> 2] = _stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0;
 $1 = HEAP32[$z >> 2] | 0;
 $add = $1 + ((_stbi__get16le(HEAP32[$s$addr >> 2] | 0) | 0) << 16) | 0;
 STACKTOP = sp;
 return $add | 0;
}

function _stbi__get32be($s) {
 $s = $s | 0;
 var $add = 0, $s$addr = 0, $shl = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $z = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$z >> 2] = _stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0;
 $shl = HEAP32[$z >> 2] << 16;
 $add = $shl + (_stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $add | 0;
}

function __ZN2Dr19EqualizeAngle0to360IfEET_RKS1_($angle) {
 $angle = $angle | 0;
 var $equalized$0 = 0.0, $equalized$1 = 0.0;
 $equalized$0 = +HEAPF32[$angle >> 2];
 while (1) {
  if (!($equalized$0 < 0.0)) break;
  $equalized$0 = $equalized$0 + 360.0;
 }
 $equalized$1 = $equalized$0;
 while (1) {
  if (!($equalized$1 > 360.0)) break;
  $equalized$1 = $equalized$1 + -360.0;
 }
 return +$equalized$1;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZL18emsc_load_callbackPK25sapp_html5_fetch_response($response) {
 $response = $response | 0;
 do if (!(HEAP8[$response >> 0] | 0)) if ((HEAP32[$response + 4 >> 2] | 0) == 1) {
  HEAP32[277675] = 3;
  break;
 } else {
  HEAP32[277675] = 2;
  break;
 } else {
  HEAP32[277675] = 1;
  __ZL10load_imagePhi(HEAP32[$response + 16 >> 2] | 0, HEAP32[$response + 12 >> 2] | 0);
 } while (0);
 return;
}

function _ttULONG($p) {
 $p = $p | 0;
 var $p$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp;
 HEAP32[$p$addr >> 2] = $p;
 STACKTOP = sp;
 return ((HEAPU8[HEAP32[$p$addr >> 2] >> 0] | 0) << 24) + ((HEAPU8[(HEAP32[$p$addr >> 2] | 0) + 1 >> 0] | 0) << 16) + ((HEAPU8[(HEAP32[$p$addr >> 2] | 0) + 2 >> 0] | 0) << 8) + (HEAPU8[(HEAP32[$p$addr >> 2] | 0) + 3 >> 0] | 0) | 0;
}

function _sgl_destroy_pipeline($pip_id) {
 $pip_id = $pip_id | 0;
 var $pip_id$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip_id$byval_copy = sp;
 if (-1412584499 == (HEAP32[541358] | 0)) {
  HEAP32[$pip_id$byval_copy >> 2] = HEAP32[$pip_id >> 2];
  __sgl_destroy_pipeline($pip_id$byval_copy);
  STACKTOP = sp;
  return;
 } else ___assert_fail(23666, 23371, 2806, 23730);
}

function __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this) {
 $this = $this | 0;
 var $0 = 0, $BlockList = 0;
 $BlockList = $this + 4096 | 0;
 while (1) {
  $0 = HEAP32[$BlockList >> 2] | 0;
  if (!$0) break;
  HEAP32[$BlockList >> 2] = HEAP32[$0 >> 2];
  if (($this | 0) != ($0 | 0)) _free($0);
 }
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$BlockList >> 2] = $this;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIlEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIlvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, -2147483648, 2147483647);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIiEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, -2147483648, 2147483647);
 STACKTOP = sp;
 return;
}

function __sg_gl_cache_store_buffer_binding($target) {
 $target = $target | 0;
 var $target$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $target$addr = sp;
 HEAP32[$target$addr >> 2] = $target;
 if ((HEAP32[$target$addr >> 2] | 0) == 34962) {
  HEAP32[541320] = HEAP32[541318];
  STACKTOP = sp;
  return;
 } else {
  HEAP32[541321] = HEAP32[541319];
  STACKTOP = sp;
  return;
 }
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __sg_pixelformat_srmd($pfi) {
 $pfi = $pfi | 0;
 var $pfi$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pfi$addr = sp;
 HEAP32[$pfi$addr >> 2] = $pfi;
 HEAP8[HEAP32[$pfi$addr >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 2 >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 4 >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 5 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __sg_pixelformat_sfrm($pfi) {
 $pfi = $pfi | 0;
 var $pfi$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pfi$addr = sp;
 HEAP32[$pfi$addr >> 2] = $pfi;
 HEAP8[HEAP32[$pfi$addr >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 1 >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 2 >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 4 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __sg_pixelformat_sbrm($pfi) {
 $pfi = $pfi | 0;
 var $pfi$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pfi$addr = sp;
 HEAP32[$pfi$addr >> 2] = $pfi;
 HEAP8[HEAP32[$pfi$addr >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 3 >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 2 >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 4 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function _stbtt__buf_skip($b, $o) {
 $b = $b | 0;
 $o = $o | 0;
 var $b$addr = 0, $o$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $b$addr = sp + 4 | 0;
 $o$addr = sp;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$o$addr >> 2] = $o;
 _stbtt__buf_seek(HEAP32[$b$addr >> 2] | 0, (HEAP32[(HEAP32[$b$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$o$addr >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __sfetch_item_discard($item) {
 $item = $item | 0;
 var $item$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $item$addr = sp;
 HEAP32[$item$addr >> 2] = $item;
 if (HEAP32[$item$addr >> 2] | 0) if (HEAP32[HEAP32[$item$addr >> 2] >> 2] | 0) {
  _memset(HEAP32[$item$addr >> 2] | 0, 0, 1232) | 0;
  STACKTOP = sp;
  return;
 }
 ___assert_fail(43292, 25510, 1352, 43323);
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 57072, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 57201, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 56987, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 57032, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 57012, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 57228, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 57054, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 57247, $args1) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 57270, $args1) | 0;
}

function __sg_is_compressed_pixel_format($fmt) {
 $fmt = $fmt | 0;
 var $fmt$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 if (((HEAP32[$fmt$addr >> 2] | 0) + -43 | 0) >>> 0 < 19) HEAP8[$retval >> 0] = 1; else HEAP8[$retval >> 0] = 0;
 STACKTOP = sp;
 return HEAP8[$retval >> 0] & 1 | 0;
}

function __sapp_discard_state() {
 do if (HEAP8[58956] & 1) if (HEAP32[14741] | 0) {
  _free(HEAP32[14741] | 0);
  break;
 } else ___assert_fail(28872, 16477, 2590, 28895); while (0);
 if (!(HEAP8[58968] & 1)) {
  _memset(58576, 0, 3240) | 0;
  return;
 }
 if (!(HEAP32[14747] | 0)) ___assert_fail(21121, 16477, 2594, 28895);
 _free(HEAP32[14747] | 0);
 _memset(58576, 0, 3240) | 0;
 return;
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 var $call1 = 0, $this$addr$i = 0, $ti$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $this$addr$i = sp + 4 | 0;
 $ti$addr = sp;
 HEAP32[$ti$addr >> 2] = $ti;
 HEAP32[$this$addr$i >> 2] = HEAP32[$ti$addr >> 2];
 $call1 = ___strdup(HEAP32[(HEAP32[$this$addr$i >> 2] | 0) + 4 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call1 | 0;
}

function __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$result, $this, $N) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $N = $N | 0;
 var $call = 0;
 $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($this) | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result, (HEAP32[$this >> 2] | 0) + ($call >>> 0 > $N >>> 0 ? $N : $call + -1 | 0) | 0, HEAP32[$this + 4 >> 2] | 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_($this, $args1) {
 $this = $this | 0;
 $args1 = $args1 | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, 57261, $args1) | 0;
}

function __sapp_emsc_pointerlockerror_cb($emsc_type, $reserved, $user_data) {
 $emsc_type = $emsc_type | 0;
 $reserved = $reserved | 0;
 $user_data = $user_data | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp + 8 >> 2] = $emsc_type;
 HEAP32[sp + 4 >> 2] = $reserved;
 HEAP32[sp >> 2] = $user_data;
 HEAP8[58953] = 0;
 HEAP8[58995] = 0;
 STACKTOP = sp;
 return 1;
}

function __ZN2Dr9IsCloseToIdEEbRKT_S3_S3_($number_desired, $number_to_check, $tolerance) {
 $number_desired = $number_desired | 0;
 $number_to_check = $number_to_check | 0;
 $tolerance = $tolerance | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0;
 $0 = +HEAPF64[$number_to_check >> 3];
 $1 = +HEAPF64[$number_desired >> 3];
 $2 = +HEAPF64[$tolerance >> 3];
 return $0 >= $1 - $2 & $0 <= $1 + $2 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN2Dr5ClampIfEET_RKS1_S3_S3_($number_to_check, $min, $max) {
 $number_to_check = $number_to_check | 0;
 $min = $min | 0;
 $max = $max | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $retval$0 = 0.0;
 $0 = +HEAPF32[$number_to_check >> 2];
 $1 = +HEAPF32[$min >> 2];
 if ($0 < $1) $retval$0 = $1; else {
  $2 = +HEAPF32[$max >> 2];
  $retval$0 = $0 > $2 ? $2 : $0;
 }
 return +$retval$0;
}

function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_($this, $Qualifier_, $Name_) {
 $this = $this | 0;
 $Qualifier_ = $Qualifier_ | 0;
 $Name_ = $Name_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 22, 1, 1, 1);
 HEAP32[$this >> 2] = 14828;
 HEAP32[$this + 8 >> 2] = $Qualifier_;
 HEAP32[$this + 12 >> 2] = $Name_;
 return;
}

function __sg_update_buffer($buf, $data) {
 $buf = $buf | 0;
 $data = $data | 0;
 var $buf$addr = 0, $data$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf$addr = sp + 4 | 0;
 $data$addr = sp;
 HEAP32[$buf$addr >> 2] = $buf;
 HEAP32[$data$addr >> 2] = $data;
 __sg_gl_update_buffer(HEAP32[$buf$addr >> 2] | 0, HEAP32[$data$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerItEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 2, 0, 65535);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_($this, $Encoding_, $Entity_) {
 $this = $this | 0;
 $Encoding_ = $Encoding_ | 0;
 $Entity_ = $Entity_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 24, 1, 1, 1);
 HEAP32[$this >> 2] = 15444;
 HEAP32[$this + 8 >> 2] = $Encoding_;
 HEAP32[$this + 12 >> 2] = $Entity_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __sg_update_image($img, $data) {
 $img = $img | 0;
 $data = $data | 0;
 var $data$addr = 0, $img$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $img$addr = sp + 4 | 0;
 $data$addr = sp;
 HEAP32[$img$addr >> 2] = $img;
 HEAP32[$data$addr >> 2] = $data;
 __sg_gl_update_image(HEAP32[$img$addr >> 2] | 0, HEAP32[$data$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIhEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 1, 0, 255);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116register_integerImEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDImvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, 0, -1);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIjEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIjvE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, 0, -1);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __sfetch_ring_wrap($rb, $i) {
 $rb = $rb | 0;
 $i = $i | 0;
 var $i$addr = 0, $rb$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rb$addr = sp + 4 | 0;
 $i$addr = sp;
 HEAP32[$rb$addr >> 2] = $rb;
 HEAP32[$i$addr >> 2] = $i;
 STACKTOP = sp;
 return ((HEAP32[$i$addr >> 2] | 0) >>> 0) % ((HEAP32[(HEAP32[$rb$addr >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0 | 0;
}

function __sfetch_path_make($agg$result, $str) {
 $agg$result = $agg$result | 0;
 $str = $str | 0;
 var $res = 0, $str$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $str$addr = sp;
 $res = sp + 8 | 0;
 HEAP32[$str$addr >> 2] = $str;
 __sfetch_path_copy($res, HEAP32[$str$addr >> 2] | 0);
 _memcpy($agg$result | 0, $res | 0, 1024) | 0;
 STACKTOP = sp;
 return;
}

function __ZNK13TPPLPartition12ScanLineEdge8IsConvexERK9TPPLPointS3_S3_($this, $p1, $p2, $p3) {
 $this = $this | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $p3 = $p3 | 0;
 var $1 = 0.0, $3 = 0.0;
 $1 = +HEAPF64[$p1 + 8 >> 3];
 $3 = +HEAPF64[$p1 >> 3];
 return (+HEAPF64[$p3 + 8 >> 3] - $1) * (+HEAPF64[$p2 >> 3] - $3) - (+HEAPF64[$p3 >> 3] - $3) * (+HEAPF64[$p2 + 8 >> 3] - $1) > 0.0 | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function _stbi_image_free($retval_from_stbi_load) {
 $retval_from_stbi_load = $retval_from_stbi_load | 0;
 var $retval_from_stbi_load$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval_from_stbi_load$addr = sp;
 HEAP32[$retval_from_stbi_load$addr >> 2] = $retval_from_stbi_load;
 _free(HEAP32[$retval_from_stbi_load$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __saudio_ring_idx($ring, $i) {
 $ring = $ring | 0;
 $i = $i | 0;
 var $i$addr = 0, $ring$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ring$addr = sp + 4 | 0;
 $i$addr = sp;
 HEAP32[$ring$addr >> 2] = $ring;
 HEAP32[$i$addr >> 2] = $i;
 STACKTOP = sp;
 return (HEAP32[$i$addr >> 2] | 0) % (HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 8 >> 2] | 0) | 0 | 0;
}

function _fons__mini($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $a$addr = 0, $b$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $a$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 STACKTOP = sp;
 return ((HEAP32[$a$addr >> 2] | 0) < (HEAP32[$b$addr >> 2] | 0) ? HEAP32[$a$addr >> 2] | 0 : HEAP32[$b$addr >> 2] | 0) | 0;
}

function _fons__maxi($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $a$addr = 0, $b$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $a$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 STACKTOP = sp;
 return ((HEAP32[$a$addr >> 2] | 0) > (HEAP32[$b$addr >> 2] | 0) ? HEAP32[$a$addr >> 2] | 0 : HEAP32[$b$addr >> 2] | 0) | 0;
}

function __ZN6DrVec39normalizeEv($this) {
 $this = $this | 0;
 var $0 = 0.0, $div = 0.0, $y = 0, $z = 0;
 $0 = +Math_sqrt(+(+__ZNK6DrVec311normSquaredEv($this)));
 $div = 1.0 / $0;
 HEAPF32[$this >> 2] = +HEAPF32[$this >> 2] * $div;
 $y = $this + 4 | 0;
 HEAPF32[$y >> 2] = $div * +HEAPF32[$y >> 2];
 $z = $this + 8 | 0;
 HEAPF32[$z >> 2] = $div * +HEAPF32[$z >> 2];
 return +$0;
}

function _sg_alloc_image() {
 var $res = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $retval = sp + 4 | 0;
 $res = sp;
 if (HEAP8[2164080] & 1) {
  HEAP32[$res >> 2] = __sg_alloc_image() | 0;
  HEAP32[$retval >> 2] = HEAP32[$res >> 2];
  STACKTOP = sp;
  return HEAP32[$retval >> 2] | 0;
 } else ___assert_fail(21733, 21600, 14433, 21890);
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __sg_gl_setup_backend($desc) {
 $desc = $desc | 0;
 var $desc$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 HEAP8[2164784] = 1;
 HEAP8[2164785] = HEAP8[(HEAP32[$desc$addr >> 2] | 0) + 40 + 12 >> 0] & 1;
 do {} while ((_glGetError() | 0) != 0);
 __sg_gl_init_caps_gles2();
 STACKTOP = sp;
 return;
}

function _stm_sec($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $ticks$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ticks$addr = sp;
 $2 = $ticks$addr;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $6 = $ticks$addr;
 STACKTOP = sp;
 return +((+((HEAP32[$6 >> 2] | 0) >>> 0) + 4294967296.0 * +((HEAP32[$6 + 4 >> 2] | 0) >>> 0)) / 1.0e9);
}

function __sapp_emsc_update_keyboard_state() {
 if (HEAP8[58993] & 1) {
  if (!(HEAP8[58992] & 1)) {
   HEAP8[58992] = 1;
   _sapp_js_create_textfield();
  }
  HEAP8[58686] = 1;
  HEAP8[58993] = 0;
  _sapp_js_focus_textfield();
 }
 if (!(HEAP8[58994] & 1)) return;
 if (!(HEAP8[58992] & 1)) return;
 HEAP8[58686] = 0;
 HEAP8[58994] = 0;
 _sapp_js_unfocus_textfield();
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function _stbi__rewind($s) {
 $s = $s | 0;
 var $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] = HEAP32[(HEAP32[$s$addr >> 2] | 0) + 176 >> 2];
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] = HEAP32[(HEAP32[$s$addr >> 2] | 0) + 180 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP8[$this + 7 >> 0] | 0;
 if ($0 << 24 >> 24 == 2) $retval$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 31]($this, $S) | 0; else $retval$0 = $0 << 24 >> 24 == 0;
 return $retval$0 | 0;
}

function __ZNK10Delaunator8hash_keyEdd($this, $x, $y) {
 $this = $this | 0;
 $x = +$x;
 $y = +$y;
 var $2 = 0, $4 = 0, $call = 0.0;
 $call = +__Z12pseudo_angledd($x - +HEAPF64[$this + 80 >> 3], $y - +HEAPF64[$this + 88 >> 3]);
 $2 = HEAP32[$this + 96 >> 2] | 0;
 $4 = _llround(+Math_floor(+($call * +($2 >>> 0)))) | 0;
 getTempRet0() | 0;
 return __Z8fast_modmm($4, $2) | 0;
}

function _sg_push_debug_group($name) {
 $name = $name | 0;
 var $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 15084, 23327);
 if (HEAP32[$name$addr >> 2] | 0) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(23347, 21600, 15085, 23327);
}

function __sgl_mul($dst, $m) {
 $dst = $dst | 0;
 $m = $m | 0;
 var $dst$addr = 0, $m$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dst$addr = sp + 4 | 0;
 $m$addr = sp;
 HEAP32[$dst$addr >> 2] = $dst;
 HEAP32[$m$addr >> 2] = $m;
 __sgl_matmul4(HEAP32[$dst$addr >> 2] | 0, HEAP32[$dst$addr >> 2] | 0, HEAP32[$m$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE($call, HEAP32[$args >> 2] | 0);
 return $call | 0;
}

function __ZN12_GLOBAL__N_114register_floatIfEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIfvE3getEv() | 0;
 __embind_register_float($call | 0, HEAP32[$name$addr >> 2] | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_114register_floatIdEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIdvE3getEv() | 0;
 __embind_register_float($call | 0, HEAP32[$name$addr >> 2] | 0, 8);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP8[$this + 6 >> 0] | 0;
 if ($0 << 24 >> 24 == 2) $retval$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 31]($this, $S) | 0; else $retval$0 = $0 << 24 >> 24 == 0;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_112OutputStreampLEc($this, $C) {
 $this = $this | 0;
 $C = $C | 0;
 var $0 = 0, $1 = 0, $CurrentPosition = 0;
 __ZN12_GLOBAL__N_112OutputStream4growEm($this, 1);
 $0 = HEAP32[$this >> 2] | 0;
 $CurrentPosition = $this + 4 | 0;
 $1 = HEAP32[$CurrentPosition >> 2] | 0;
 HEAP32[$CurrentPosition >> 2] = $1 + 1;
 HEAP8[$0 + $1 >> 0] = $C;
 return;
}

function __sg_gl_pass_ds_image($pass) {
 $pass = $pass | 0;
 var $pass$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pass$addr = sp;
 HEAP32[$pass$addr >> 2] = $pass;
 if (HEAP32[$pass$addr >> 2] | 0) {
  STACKTOP = sp;
  return HEAP32[(HEAP32[$pass$addr >> 2] | 0) + 76 + 36 >> 2] | 0;
 } else ___assert_fail(29964, 21600, 6362, 39786);
 return 0;
}

function _meshopt_optimizeVertexCache($destination, $indices, $index_count, $vertex_count) {
 $destination = $destination | 0;
 $indices = $indices | 0;
 $index_count = $index_count | 0;
 $vertex_count = $vertex_count | 0;
 __Z32meshopt_optimizeVertexCacheTablePjPKjmmPKN7meshopt16VertexScoreTableE($destination, $indices, $index_count, $vertex_count, 12844);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP8[$this + 5 >> 0] | 0;
 if ($0 << 24 >> 24 == 2) $retval$0 = FUNCTION_TABLE_iii[HEAP32[HEAP32[$this >> 2] >> 2] & 31]($this, $S) | 0; else $retval$0 = $0 << 24 >> 24 == 0;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN13TPPLPartition8IsConvexER9TPPLPointS1_S1_($this, $p1, $p2, $p3) {
 $this = $this | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $p3 = $p3 | 0;
 var $1 = 0.0, $3 = 0.0;
 $1 = +HEAPF64[$p1 + 8 >> 3];
 $3 = +HEAPF64[$p1 >> 3];
 return (+HEAPF64[$p3 + 8 >> 3] - $1) * (+HEAPF64[$p2 >> 3] - $3) - (+HEAPF64[$p3 >> 3] - $3) * (+HEAPF64[$p2 + 8 >> 3] - $1) > 0.0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_($this, $Op1_, $Op2_) {
 $this = $this | 0;
 $Op1_ = $Op1_ | 0;
 $Op2_ = $Op2_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 43, 1, 1, 1);
 HEAP32[$this >> 2] = 14564;
 HEAP32[$this + 8 >> 2] = $Op1_;
 HEAP32[$this + 12 >> 2] = $Op2_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_($this, $Qual_, $Name_) {
 $this = $this | 0;
 $Qual_ = $Qual_ | 0;
 $Name_ = $Name_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 23, 1, 1, 1);
 HEAP32[$this >> 2] = 15576;
 HEAP32[$this + 8 >> 2] = $Qual_;
 HEAP32[$this + 12 >> 2] = $Name_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em($this, $Index_) {
 $this = $this | 0;
 $Index_ = $Index_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 31, 2, 2, 2);
 HEAP32[$this >> 2] = 15180;
 HEAP32[$this + 8 >> 2] = $Index_;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP8[$this + 16 >> 0] = 0;
 return;
}

function __sg_gl_activate_context($ctx) {
 $ctx = $ctx | 0;
 var $ctx$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 if (HEAP8[2164784] & 1) {
  HEAP32[541199] = HEAP32[$ctx$addr >> 2];
  __sg_gl_reset_state_cache();
  STACKTOP = sp;
  return;
 } else ___assert_fail(30012, 21600, 5672, 30474);
}

function __ZNSt3__214__split_bufferImRNS_9allocatorImEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__end_$promoted = 0;
 $__end_ = $this + 8 | 0;
 $__end_$promoted = HEAP32[$__end_ >> 2] | 0;
 _memset($__end_$promoted | 0, 0, $__n << 2 | 0) | 0;
 HEAP32[$__end_ >> 2] = $__end_$promoted + ($__n << 2);
 return;
}

function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__end_$promoted = 0;
 $__end_ = $this + 8 | 0;
 $__end_$promoted = HEAP32[$__end_ >> 2] | 0;
 _memset($__end_$promoted | 0, 0, $__n << 2 | 0) | 0;
 HEAP32[$__end_ >> 2] = $__end_$promoted + ($__n << 2);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function _HMM_ToRadians($Degrees) {
 $Degrees = +$Degrees;
 var $Degrees$addr = 0, $Result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Degrees$addr = sp + 4 | 0;
 $Result = sp;
 HEAPF32[$Degrees$addr >> 2] = $Degrees;
 HEAPF32[$Result >> 2] = +HEAPF32[$Degrees$addr >> 2] * .01745329238474369;
 STACKTOP = sp;
 return +(+HEAPF32[$Result >> 2]);
}

function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S);
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S);
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEEC2Em($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 if ($__n | 0) {
  __ZNSt3__26vectorIjNS_9allocatorIjEEE11__vallocateEm($this, $__n);
  __ZNSt3__26vectorIjNS_9allocatorIjEEE18__construct_at_endEm($this, $__n);
 }
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv($this) {
 $this = $this | 0;
 var $0 = 0, $cond = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) == (HEAP32[$this + 4 >> 2] | 0)) $cond = 0; else {
  HEAP32[$this >> 2] = $0 + 1;
  $cond = HEAP8[$0 >> 0] | 0;
 }
 return $cond | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
 __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($call, (HEAP32[$args >> 2] | 0) != 0);
 return $call | 0;
}

function _stbi__psd_test($s) {
 $s = $s | 0;
 var $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $r = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$r >> 2] = (_stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0) == 943870035 & 1;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$r >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 127]($0, $S);
 __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE($this, $S);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function _sgl_push_pipeline() {
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2823, 23835);
 if ((HEAP32[541438] | 0) < 63) {
  HEAP32[541438] = (HEAP32[541438] | 0) + 1;
  HEAP32[2165756 + (HEAP32[541438] << 2) >> 2] = HEAP32[2165756 + ((HEAP32[541438] | 0) - 1 << 2) >> 2];
  return;
 } else {
  HEAP32[541377] = 4;
  return;
 }
}

function __sg_gl_cache_invalidate_program($prog) {
 $prog = $prog | 0;
 var $prog$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $prog$addr = sp;
 HEAP32[$prog$addr >> 2] = $prog;
 if ((HEAP32[$prog$addr >> 2] | 0) != (HEAP32[541322] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[541322] = 0;
 _glUseProgram(0);
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 91);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
 return;
}

function __ZNSt3__26vectorImNS_9allocatorImEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__end_$promoted = 0;
 $__end_ = $this + 4 | 0;
 $__end_$promoted = HEAP32[$__end_ >> 2] | 0;
 _memset($__end_$promoted | 0, 0, $__n << 2 | 0) | 0;
 HEAP32[$__end_ >> 2] = $__end_$promoted + ($__n << 2);
 return;
}

function __ZNSt3__26vectorIjNS_9allocatorIjEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $__end_ = 0, $__end_$promoted = 0;
 $__end_ = $this + 4 | 0;
 $__end_$promoted = HEAP32[$__end_ >> 2] | 0;
 _memset($__end_$promoted | 0, 0, $__n << 2 | 0) | 0;
 HEAP32[$__end_ >> 2] = $__end_$promoted + ($__n << 2);
 return;
}

function _HMM_SinF($Radians) {
 $Radians = +$Radians;
 var $Radians$addr = 0, $Result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Radians$addr = sp + 4 | 0;
 $Result = sp;
 HEAPF32[$Radians$addr >> 2] = $Radians;
 HEAPF32[$Result >> 2] = +Math_sin(+(+HEAPF32[$Radians$addr >> 2]));
 STACKTOP = sp;
 return +(+HEAPF32[$Result >> 2]);
}

function _HMM_CosF($Radians) {
 $Radians = +$Radians;
 var $Radians$addr = 0, $Result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Radians$addr = sp + 4 | 0;
 $Result = sp;
 HEAPF32[$Radians$addr >> 2] = $Radians;
 HEAPF32[$Result >> 2] = +Math_cos(+(+HEAPF32[$Radians$addr >> 2]));
 STACKTOP = sp;
 return +(+HEAPF32[$Result >> 2]);
}

function _stbi__setup_jpeg($j) {
 $j = $j | 0;
 var $j$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $j$addr = sp;
 HEAP32[$j$addr >> 2] = $j;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18444 >> 2] = 2;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18448 >> 2] = 4;
 HEAP32[(HEAP32[$j$addr >> 2] | 0) + 18452 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function __ZSt9terminatev() {
 var $0 = 0, $call = 0;
 $call = ___cxa_get_globals_fast() | 0;
 if ($call | 0) {
  $0 = HEAP32[$call >> 2] | 0;
  if ($0 | 0) if (__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($0 + 48 | 0) | 0) __ZSt11__terminatePFvvE(HEAP32[$0 + 12 >> 2] | 0);
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function _stbi__png_test($s) {
 $s = $s | 0;
 var $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $r = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$r >> 2] = _stbi__check_png_header(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$r >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this, $args) {
 $this = $this | 0;
 $args = $args | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_($this + 368 | 0, $args) | 0;
}

function ___uflow($f) {
 $f = $f | 0;
 var $c = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!(___toread($f) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 15]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1; else $retval$0 = -1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbi__pic_test($s) {
 $s = $s | 0;
 var $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $r = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$r >> 2] = _stbi__pic_test_core(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$r >> 2] | 0;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this) {
 $this = $this | 0;
 var $BlockList = 0, $call = 0;
 $call = _malloc(4096) | 0;
 if (!$call) __ZSt9terminatev(); else {
  $BlockList = $this + 4096 | 0;
  HEAP32[$call >> 2] = HEAP32[$BlockList >> 2];
  HEAP32[$call + 4 >> 2] = 0;
  HEAP32[$BlockList >> 2] = $call;
  return;
 }
}

function _stbi__gif_test($s) {
 $s = $s | 0;
 var $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $r = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$r >> 2] = _stbi__gif_test_raw(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$r >> 2] | 0;
}

function _stbi__bmp_test($s) {
 $s = $s | 0;
 var $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $s$addr = sp + 4 | 0;
 $r = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$r >> 2] = _stbi__bmp_test_raw(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$r >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_($this, $0, $1);
 return;
}

function _HMM_SquareRootF($Float) {
 $Float = +$Float;
 var $Float$addr = 0, $Result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $Float$addr = sp + 4 | 0;
 $Result = sp;
 HEAPF32[$Float$addr >> 2] = $Float;
 HEAPF32[$Result >> 2] = +Math_sqrt(+(+HEAPF32[$Float$addr >> 2]));
 STACKTOP = sp;
 return +(+HEAPF32[$Result >> 2]);
}

function _sgl_load_pipeline($pip_id) {
 $pip_id = $pip_id | 0;
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2811, 23751);
 if ((HEAP32[541438] | 0) >= 0 & (HEAP32[541438] | 0) < 64) {
  HEAP32[2165756 + (HEAP32[541438] << 2) >> 2] = HEAP32[$pip_id >> 2];
  return;
 } else ___assert_fail(23769, 23371, 2812, 23751);
}

function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE($this, $Pointee_) {
 $this = $this | 0;
 $Pointee_ = $Pointee_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 11, HEAP8[$Pointee_ + 5 >> 0] | 0, 1, 1);
 HEAP32[$this >> 2] = 13508;
 HEAP32[$this + 8 >> 2] = $Pointee_;
 return;
}

function _sfons_destroy($ctx) {
 $ctx = $ctx | 0;
 var $ctx$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 if (HEAP32[$ctx$addr >> 2] | 0) {
  _fonsDeleteInternal(HEAP32[$ctx$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 } else ___assert_fail(28502, 28414, 1764, 28506);
}

function _fons__getState($stash) {
 $stash = $stash | 0;
 var $stash$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $stash$addr = sp;
 HEAP32[$stash$addr >> 2] = $stash;
 STACKTOP = sp;
 return (HEAP32[$stash$addr >> 2] | 0) + 20572 + (((HEAP32[(HEAP32[$stash$addr >> 2] | 0) + 21052 >> 2] | 0) - 1 | 0) * 24 | 0) | 0;
}

function _sgl_texture($img) {
 $img = $img | 0;
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2907, 23937);
 if (HEAP8[2165512] & 1) ___assert_fail(23883, 23371, 2908, 23937);
 if (HEAP32[$img >> 2] | 0) {
  HEAP32[541383] = HEAP32[$img >> 2];
  return;
 } else {
  HEAP32[541383] = HEAP32[541386];
  return;
 }
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $call2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _dummy_560(HEAP32[$f + 60 >> 2] | 0) | 0;
 $call2 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $call2 | 0;
}

function __sapp_frame() {
 var $1 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (HEAP8[58679] & 1) {
  HEAP8[58679] = 0;
  __sapp_call_init();
 }
 __sapp_call_frame();
 $1 = 58720;
 $7 = _i64Add(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, 1, 0) | 0;
 $8 = getTempRet0() | 0;
 $9 = 58720;
 HEAP32[$9 >> 2] = $7;
 HEAP32[$9 + 4 >> 2] = $8;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] & 127]($this, $S);
 if ((HEAP8[$this + 5 >> 0] | 0) != 1) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] & 127]($this, $S);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_($this + 368 | 0, 53725) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_($this + 368 | 0, 56321) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_($this + 368 | 0, 54509) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($this, $__pos, $__s) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm($this, $__pos, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$result;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN7state_tC2Ev($this) {
 $this = $this | 0;
 var $arrayctor$cur = 0, $arrayctor$end = 0;
 $arrayctor$end = $this + 1053648 | 0;
 $arrayctor$cur = $this + 1048864 | 0;
 do {
  __ZN6item_tC2Ev($arrayctor$cur);
  $arrayctor$cur = $arrayctor$cur + 208 | 0;
 } while (($arrayctor$cur | 0) != ($arrayctor$end | 0));
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_($this + 368 | 0, 52445) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this | 0;
 return __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_($this + 368 | 0, 56314) | 0;
}

function __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseI7DrPointNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseI6VertexNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseI6DrRectNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function _stbtt__cff_index_count($b) {
 $b = $b | 0;
 var $b$addr = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $b$addr = sp;
 HEAP32[$b$addr >> 2] = $b;
 _stbtt__buf_seek(HEAP32[$b$addr >> 2] | 0, 0);
 $call = _stbtt__buf_get(HEAP32[$b$addr >> 2] | 0, 2) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __sgl_begin($mode) {
 $mode = $mode | 0;
 var $mode$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $mode$addr = sp;
 HEAP32[$mode$addr >> 2] = $mode;
 HEAP8[2165512] = 1;
 HEAP32[541375] = HEAP32[541369];
 HEAP32[541376] = 0;
 HEAP32[541382] = HEAP32[$mode$addr >> 2];
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE($this, $SSK_) {
 $this = $this | 0;
 $SSK_ = $SSK_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 35, 1, 1, 1);
 HEAP32[$this >> 2] = 15532;
 HEAP32[$this + 8 >> 2] = $SSK_;
 return;
}

function _glDrawElementsInstancedANGLE($mode, $count, $type, $indices, $instancecount) {
 $mode = $mode | 0;
 $count = $count | 0;
 $type = $type | 0;
 $indices = $indices | 0;
 $instancecount = $instancecount | 0;
 _glDrawElementsInstanced($mode | 0, $count | 0, $type | 0, $indices | 0, $instancecount | 0);
 return;
}

function __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($unwind_exception) {
 $unwind_exception = $unwind_exception | 0;
 var $0 = 0;
 $0 = __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($unwind_exception) | 0;
 return ($0 & -256 | 0) == 1126902528 & (getTempRet0() | 0) == 1129074247 | 0;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$result;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN13TPPLPartition8DistanceERK9TPPLPointS2_($this, $p1, $p2) {
 $this = $this | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 var $sub = 0.0, $sub4 = 0.0;
 $sub = +HEAPF64[$p2 >> 3] - +HEAPF64[$p1 >> 3];
 $sub4 = +HEAPF64[$p2 + 8 >> 3] - +HEAPF64[$p1 + 8 >> 3];
 return +(+Math_sqrt(+($sub * $sub + $sub4 * $sub4)));
}

function __ZNSt3__213__vector_baseImNS_9allocatorImEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function _stbi__cleanup_jpeg($j) {
 $j = $j | 0;
 var $j$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $j$addr = sp;
 HEAP32[$j$addr >> 2] = $j;
 _stbi__free_jpeg_components(HEAP32[$j$addr >> 2] | 0, HEAP32[(HEAP32[HEAP32[$j$addr >> 2] >> 2] | 0) + 8 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($this, $Restore_, $NewVal) {
 $this = $this | 0;
 $Restore_ = $Restore_ | 0;
 $NewVal = $NewVal | 0;
 HEAP32[$this >> 2] = $Restore_;
 HEAP32[$this + 4 >> 2] = HEAP32[$Restore_ >> 2];
 HEAP8[$this + 8 >> 0] = 1;
 HEAP32[$Restore_ >> 2] = $NewVal;
 return;
}

function __saudio_ring_empty($ring) {
 $ring = $ring | 0;
 var $ring$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ring$addr = sp;
 HEAP32[$ring$addr >> 2] = $ring;
 STACKTOP = sp;
 return (HEAP32[HEAP32[$ring$addr >> 2] >> 2] | 0) == (HEAP32[(HEAP32[$ring$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($this, $Child_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 29, 1, 1, 1);
 HEAP32[$this >> 2] = 14212;
 HEAP32[$this + 8 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($this, $Restore_, $NewVal) {
 $this = $this | 0;
 $Restore_ = $Restore_ | 0;
 $NewVal = $NewVal | 0;
 HEAP32[$this >> 2] = $Restore_;
 HEAP8[$this + 4 >> 0] = HEAP8[$Restore_ >> 0] | 0;
 HEAP8[$this + 5 >> 0] = 1;
 HEAP8[$Restore_ >> 0] = $NewVal & 1;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $this + 8 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$result;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE($this, $SSK_) {
 $this = $this | 0;
 $SSK_ = $SSK_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 36, 1, 1, 1);
 HEAP32[$this >> 2] = 13376;
 HEAP32[$this + 8 >> 2] = $SSK_;
 return;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[3237] | 0;
 _vfprintf($0, $format, $list) | 0;
 _fputc(10, $0) | 0;
 _abort();
}

function __ZNK6DrVec3miERKS_($agg$result, $this, $v_) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $v_ = $v_ | 0;
 __ZN6DrVec3C2Efff($agg$result, +HEAPF32[$this >> 2] - +HEAPF32[$v_ >> 2], +HEAPF32[$this + 4 >> 2] - +HEAPF32[$v_ + 4 >> 2], +HEAPF32[$this + 8 >> 2] - +HEAPF32[$v_ + 8 >> 2]);
 return;
}

function __ZN7DrColoraSERKS_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 HEAP8[$this >> 0] = HEAP8[$other >> 0] | 0;
 HEAP8[$this + 1 >> 0] = HEAP8[$other + 1 >> 0] | 0;
 HEAP8[$this + 2 >> 0] = HEAP8[$other + 2 >> 0] | 0;
 HEAP8[$this + 3 >> 0] = HEAP8[$other + 3 >> 0] | 0;
 return $this | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE($this, $OpName_) {
 $this = $this | 0;
 $OpName_ = $OpName_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 19, 1, 1, 1);
 HEAP32[$this >> 2] = 14696;
 HEAP32[$this + 8 >> 2] = $OpName_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE($this, $Child_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 33, 1, 1, 1);
 HEAP32[$this >> 2] = 14652;
 HEAP32[$this + 8 >> 2] = $Child_;
 return;
}

function _sgl_default_pipeline() {
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2817, 23814);
 if ((HEAP32[541438] | 0) >= 0 & (HEAP32[541438] | 0) < 64) {
  HEAP32[2165756 + (HEAP32[541438] << 2) >> 2] = HEAP32[541432];
  return;
 } else ___assert_fail(23769, 23371, 2818, 23814);
}

function __ZN6DrRectC2Eiiii($this, $x_, $y_, $width_, $height_) {
 $this = $this | 0;
 $x_ = $x_ | 0;
 $y_ = $y_ | 0;
 $width_ = $width_ | 0;
 $height_ = $height_ | 0;
 HEAP32[$this >> 2] = $x_;
 HEAP32[$this + 4 >> 2] = $y_;
 HEAP32[$this + 8 >> 2] = $width_;
 HEAP32[$this + 12 >> 2] = $height_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE($this, $Pack_) {
 $this = $this | 0;
 $Pack_ = $Pack_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 49, 1, 1, 1);
 HEAP32[$this >> 2] = 14168;
 HEAP32[$this + 8 >> 2] = $Pack_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE($this, $Child_) {
 $this = $this | 0;
 $Child_ = $Child_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 34, 1, 1, 1);
 HEAP32[$this >> 2] = 15268;
 HEAP32[$this + 8 >> 2] = $Child_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev($this) {
 $this = $this | 0;
 var $arraydecay = 0;
 $arraydecay = $this + 12 | 0;
 HEAP32[$this >> 2] = $arraydecay;
 HEAP32[$this + 4 >> 2] = $arraydecay;
 HEAP32[$this + 8 >> 2] = $this + 28;
 return;
}

function __ZL8is_equalPKSt9type_infoS1_b($x, $y, $use_strcmp) {
 $x = $x | 0;
 $y = $y | 0;
 $use_strcmp = $use_strcmp | 0;
 var $retval$0 = 0;
 if ($use_strcmp) $retval$0 = (_strcmp(HEAP32[$x + 4 >> 2] | 0, HEAP32[$y + 4 >> 2] | 0) | 0) == 0; else $retval$0 = ($x | 0) == ($y | 0);
 return $retval$0 | 0;
}

function __ZNK7meshopt12VertexHasher4hashEj($this, $index) {
 $this = $this | 0;
 $index = $index | 0;
 var $add$ptr = 0;
 $add$ptr = (HEAP32[$this >> 2] | 0) + (Math_imul(HEAP32[$this + 8 >> 2] | 0, $index) | 0) | 0;
 return __ZN7meshoptL11hashUpdate4EjPKhm(0, $add$ptr, HEAP32[$this + 4 >> 2] | 0) | 0;
}

function __sg_gl_teximage_internal_format($fmt) {
 $fmt = $fmt | 0;
 var $call = 0, $fmt$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $fmt$addr = sp;
 HEAP32[$fmt$addr >> 2] = $fmt;
 $call = __sg_gl_teximage_format(HEAP32[$fmt$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 return (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv($this) | 0) + ($Index << 2) | 0;
}

function _llround($x) {
 $x = +$x;
 var $call = 0.0;
 $call = +_round(+$x);
 setTempRet0((+Math_abs($call) >= 1.0 ? ($call > 0.0 ? ~~+Math_min(+Math_floor($call / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil(($call - +(~~$call >>> 0)) / 4294967296.0) >>> 0) : 0) | 0);
 return ~~$call >>> 0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE($this, $Ty_) {
 $this = $this | 0;
 $Ty_ = $Ty_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 4, 1, 1, 1);
 HEAP32[$this >> 2] = 14740;
 HEAP32[$this + 8 >> 2] = $Ty_;
 return;
}

function __ZN2Dr13RoundPowerOf2IfEEiT_($number) {
 $number = +$number;
 var $i$0 = 0, $or = 0, $vi$0 = 0;
 $i$0 = 0;
 $vi$0 = (~~$number >>> 0) + -1 | 0;
 while (1) {
  if (($i$0 | 0) == 5) break;
  $or = $vi$0 >>> (1 << $i$0) | $vi$0;
  $i$0 = $i$0 + 1 | 0;
  $vi$0 = $or;
 }
 return $vi$0 + 1 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($agg$result, $0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($agg$result, $0);
 return;
}

function __ZN6DrMeshC2Ev($this) {
 $this = $this | 0;
 HEAPF32[$this + 28 >> 2] = 0.0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 0;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP8[$this + 24 >> 0] = 0;
 return;
}

function __sg_gl_destroy_pipeline($pip) {
 $pip = $pip | 0;
 var $pip$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip$addr = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 if (HEAP32[$pip$addr >> 2] | 0) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(22631, 21600, 6171, 29940);
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($this) {
 $this = $this | 0;
 var $arraydecay = 0;
 $arraydecay = $this + 12 | 0;
 HEAP32[$this >> 2] = $arraydecay;
 HEAP32[$this + 4 >> 2] = $arraydecay;
 HEAP32[$this + 8 >> 2] = $this + 44;
 return;
}

function _stbi__pnm_isdigit($c) {
 $c = $c | 0;
 var $2 = 0, $c$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c$addr = sp;
 HEAP8[$c$addr >> 0] = $c;
 if ((HEAP8[$c$addr >> 0] | 0) >= 48) $2 = (HEAP8[$c$addr >> 0] | 0) <= 57; else $2 = 0;
 STACKTOP = sp;
 return $2 & 1 | 0;
}

function __sg_pixelformat_sf($pfi) {
 $pfi = $pfi | 0;
 var $pfi$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pfi$addr = sp;
 HEAP32[$pfi$addr >> 2] = $pfi;
 HEAP8[HEAP32[$pfi$addr >> 2] >> 0] = 1;
 HEAP8[(HEAP32[$pfi$addr >> 2] | 0) + 1 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __sg_pass_ds_image($pass) {
 $pass = $pass | 0;
 var $call = 0, $pass$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pass$addr = sp;
 HEAP32[$pass$addr >> 2] = $pass;
 $call = __sg_gl_pass_ds_image(HEAP32[$pass$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __sg_gl_destroy_context($ctx) {
 $ctx = $ctx | 0;
 var $ctx$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 if (HEAP32[$ctx$addr >> 2] | 0) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(28502, 21600, 5697, 29989);
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev($this) {
 $this = $this | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this) | 0)) _free(HEAP32[$this >> 2] | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($agg$result, $0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE($this, $Base_) {
 $this = $this | 0;
 $Base_ = $Base_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 38, 1, 1, 1);
 HEAP32[$this >> 2] = 14784;
 HEAP32[$this + 8 >> 2] = $Base_;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($agg$result, $0);
 return;
}

function _ttUSHORT($p) {
 $p = $p | 0;
 var $p$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp;
 HEAP32[$p$addr >> 2] = $p;
 STACKTOP = sp;
 return ((HEAPU8[HEAP32[$p$addr >> 2] >> 0] | 0) << 8) + (HEAPU8[(HEAP32[$p$addr >> 2] | 0) + 1 >> 0] | 0) & 65535 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($this, $Value_) {
 $this = $this | 0;
 $Value_ = $Value_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 59, 1, 1, 1);
 HEAP32[$this >> 2] = 13860;
 HEAP8[$this + 8 >> 0] = $Value_ & 1;
 return;
}

function __ZN12_GLOBAL__N_112OutputStream5resetEPcm($this, $Buffer_, $BufferCapacity_) {
 $this = $this | 0;
 $Buffer_ = $Buffer_ | 0;
 $BufferCapacity_ = $BufferCapacity_ | 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this >> 2] = $Buffer_;
 HEAP32[$this + 8 >> 2] = $BufferCapacity_;
 return;
}

function _ttSHORT($p) {
 $p = $p | 0;
 var $p$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $p$addr = sp;
 HEAP32[$p$addr >> 2] = $p;
 STACKTOP = sp;
 return ((HEAPU8[HEAP32[$p$addr >> 2] >> 0] | 0) << 8) + (HEAPU8[(HEAP32[$p$addr >> 2] | 0) + 1 >> 0] | 0) & 65535 | 0;
}

function __sg_create_context($ctx) {
 $ctx = $ctx | 0;
 var $call = 0, $ctx$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 $call = __sg_gl_create_context(HEAP32[$ctx$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __sapp_call_frame() {
 if (!(HEAP8[58680] & 1)) return;
 if (HEAP8[58681] & 1) return;
 if (HEAP32[14645] | 0) {
  FUNCTION_TABLE_v[HEAP32[58580 >> 2] & 7]();
  return;
 }
 if (!(HEAP32[14651] | 0)) return;
 FUNCTION_TABLE_vi[HEAP32[58604 >> 2] & 127](HEAP32[14649] | 0);
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this, HEAP32[$this + 4 >> 2] | 0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($agg$result, $0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE($this, $Op_) {
 $this = $this | 0;
 $Op_ = $Op_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 58, 1, 1, 1);
 HEAP32[$this >> 2] = 13992;
 HEAP32[$this + 8 >> 2] = $Op_;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($this) {
 $this = $this | 0;
 var $arraydecay = 0;
 $arraydecay = $this + 12 | 0;
 HEAP32[$this >> 2] = $arraydecay;
 HEAP32[$this + 4 >> 2] = $arraydecay;
 HEAP32[$this + 8 >> 2] = $this + 140;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE($this, $E_) {
 $this = $this | 0;
 $E_ = $E_ | 0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this, 16, 1, 1, 1);
 HEAP32[$this >> 2] = 16016;
 HEAP32[$this + 8 >> 2] = $E_;
 return;
}

function __ZNK9TPPLPointmiERKS_($agg$result, $this, $p) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $p = $p | 0;
 HEAPF64[$agg$result >> 3] = +HEAPF64[$this >> 3] - +HEAPF64[$p >> 3];
 HEAPF64[$agg$result + 8 >> 3] = +HEAPF64[$this + 8 >> 3] - +HEAPF64[$p + 8 >> 3];
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this) {
 $this = $this | 0;
 var $arraydecay = 0;
 $arraydecay = $this + 12 | 0;
 HEAP32[$this >> 2] = $arraydecay;
 HEAP32[$this + 4 >> 2] = $arraydecay;
 HEAP32[$this + 8 >> 2] = $this + 44;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$this + 8 >> 2] & 2147483647);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm($this, $Elements_, $NumElements_) {
 $this = $this | 0;
 $Elements_ = $Elements_ | 0;
 $NumElements_ = $NumElements_ | 0;
 HEAP32[$this >> 2] = $Elements_;
 HEAP32[$this + 4 >> 2] = $NumElements_;
 return;
}

function _stbi__malloc($size) {
 $size = $size | 0;
 var $call = 0, $size$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $size$addr = sp;
 HEAP32[$size$addr >> 2] = $size;
 $call = _malloc(HEAP32[$size$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function __ZNK8DrPointF15distanceSquaredERKS_($this, $to) {
 $this = $this | 0;
 $to = $to | 0;
 var $sub = 0.0, $sub7 = 0.0;
 $sub = +HEAPF64[$to >> 3] - +HEAPF64[$this >> 3];
 $sub7 = +HEAPF64[$to + 8 >> 3] - +HEAPF64[$this + 8 >> 3];
 return +($sub * $sub + $sub7 * $sub7);
}

function __GLOBAL__sub_I_main_cpp() {
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_2();
 ___cxx_global_var_init_3();
 ___cxx_global_var_init_4();
 ___cxx_global_var_init_5();
 ___cxx_global_var_init_6();
 ___cxx_global_var_init_7();
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S) | 0;
}

function __ZL18font_normal_loadedPK17sfetch_response_t($response) {
 $response = $response | 0;
 if (HEAP8[$response + 5 >> 0] | 0) HEAP32[278874] = _fonsAddFontMem(HEAP32[278872] | 0, 45490, HEAP32[$response + 40 >> 2] | 0, HEAP32[$response + 36 >> 2] | 0, 0) | 0;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 8 >> 2] | 0, $S) | 0;
}

function __ZN6item_tC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 0;
 HEAP8[$this + 20 >> 0] = 0;
 _memset($this + 24 | 0, 0, 180) | 0;
 return;
}

function __sfetch_slot_index($slot_id) {
 $slot_id = $slot_id | 0;
 var $slot_id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $slot_id$addr = sp;
 HEAP32[$slot_id$addr >> 2] = $slot_id;
 STACKTOP = sp;
 return HEAP32[$slot_id$addr >> 2] & 65535 | 0;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($this, $Restore_) {
 $this = $this | 0;
 $Restore_ = $Restore_ | 0;
 HEAP32[$this >> 2] = $Restore_;
 HEAP32[$this + 4 >> 2] = HEAP32[$Restore_ >> 2];
 HEAP8[$this + 8 >> 0] = 1;
 HEAP32[$Restore_ >> 2] = -1;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
}

function __ZN8TPPLPoly4InitEl($this, $numpoints) {
 $this = $this | 0;
 $numpoints = $numpoints | 0;
 __ZN8TPPLPoly5ClearEv($this);
 HEAP32[$this + 4 >> 2] = $numpoints;
 HEAP32[$this >> 2] = __Znam($numpoints >>> 0 > 178956970 ? -1 : $numpoints * 24 | 0) | 0;
 return;
}

function _glDrawArraysInstancedANGLE($mode, $first, $count, $instancecount) {
 $mode = $mode | 0;
 $first = $first | 0;
 $count = $count | 0;
 $instancecount = $instancecount | 0;
 _glDrawArraysInstanced($mode | 0, $first | 0, $count | 0, $instancecount | 0);
 return;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(0);
 return high >>> bits - 32 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 127]($0, $S);
 return;
}

function __ZN7meshoptL11hashBucketsEm($count) {
 $count = $count | 0;
 var $add = 0, $buckets$0 = 0;
 $add = ($count >>> 2) + $count | 0;
 $buckets$0 = 1;
 while (1) if ($buckets$0 >>> 0 < $add >>> 0) $buckets$0 = $buckets$0 << 1; else break;
 return $buckets$0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 127]($0, $S);
 return;
}

function __ZN6DrRectC2ERKS_($this, $r) {
 $this = $this | 0;
 $r = $r | 0;
 HEAP32[$this >> 2] = HEAP32[$r >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$r + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$r + 8 >> 2];
 HEAP32[$this + 12 >> 2] = HEAP32[$r + 12 >> 2];
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 return (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($this) | 0) + ($Index << 2) | 0;
}

function __sg_setup_backend($desc) {
 $desc = $desc | 0;
 var $desc$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $desc$addr = sp;
 HEAP32[$desc$addr >> 2] = $desc;
 __sg_gl_setup_backend(HEAP32[$desc$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($this, $__comp) {
 $this = $this | 0;
 $__comp = $__comp | 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this >> 2] = $this + 4;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result, HEAP32[$this >> 2] | 0, HEAP32[$this + 4 >> 2] | 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 return (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($this) | 0) + ($Index << 2) | 0;
}

function __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($unwind_exception) {
 $unwind_exception = $unwind_exception | 0;
 var $0 = 0, $2 = 0;
 $0 = $unwind_exception;
 $2 = HEAP32[$0 >> 2] | 0;
 setTempRet0(HEAP32[$0 + 4 >> 2] | 0);
 return $2 | 0;
}

function __sg_destroy_pipeline($pip) {
 $pip = $pip | 0;
 var $pip$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip$addr = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 __sg_gl_destroy_pipeline(HEAP32[$pip$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_destroy_pass($pass) {
 $pass = $pass | 0;
 var $pass$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pass$addr = sp;
 HEAP32[$pass$addr >> 2] = $pass;
 __sg_gl_destroy_pass(HEAP32[$pass$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_activate_context($ctx) {
 $ctx = $ctx | 0;
 var $ctx$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 __sg_gl_activate_context(HEAP32[$ctx$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $this;
 ___embind_register_native_and_builtin_types();
 STACKTOP = sp;
 return;
}

function __ZN17meshopt_AllocatorD2Ev($this) {
 $this = $this | 0;
 var $i$0 = 0, $sub = 0;
 $i$0 = HEAP32[$this + 96 >> 2] | 0;
 while (1) {
  if (!$i$0) break;
  $sub = $i$0 + -1 | 0;
  __ZdlPv(HEAP32[$this + ($sub << 2) >> 2] | 0);
  $i$0 = $sub;
 }
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 return;
}

function __sg_destroy_context($ctx) {
 $ctx = $ctx | 0;
 var $ctx$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ctx$addr = sp;
 HEAP32[$ctx$addr >> 2] = $ctx;
 __sg_gl_destroy_context(HEAP32[$ctx$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_destroy_shader($shd) {
 $shd = $shd | 0;
 var $shd$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $shd$addr = sp;
 HEAP32[$shd$addr >> 2] = $shd;
 __sg_gl_destroy_shader(HEAP32[$shd$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_destroy_buffer($buf) {
 $buf = $buf | 0;
 var $buf$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf$addr = sp;
 HEAP32[$buf$addr >> 2] = $buf;
 __sg_gl_destroy_buffer(HEAP32[$buf$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __sg_apply_pipeline($pip) {
 $pip = $pip | 0;
 var $pip$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pip$addr = sp;
 HEAP32[$pip$addr >> 2] = $pip;
 __sg_gl_apply_pipeline(HEAP32[$pip$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function ___strdup($s) {
 $s = $s | 0;
 var $add = 0, $call1 = 0, $retval$0 = 0;
 $add = (_strlen($s) | 0) + 1 | 0;
 $call1 = _malloc($add) | 0;
 if (!$call1) $retval$0 = 0; else $retval$0 = _memcpy($call1 | 0, $s | 0, $add | 0) | 0;
 return $retval$0 | 0;
}

function __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 12804;
 __ZNSt3__222__compressed_pair_elemI7DrImageLi1ELb0EED2Ev($this + 12 | 0);
 __ZNSt3__214__shared_countD2Ev($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($this) {
 $this = $this | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this) | 0)) _free(HEAP32[$this >> 2] | 0);
 return;
}

function __sg_destroy_image($img) {
 $img = $img | 0;
 var $img$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $img$addr = sp;
 HEAP32[$img$addr >> 2] = $img;
 __sg_gl_destroy_image(HEAP32[$img$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 12756;
 __ZNSt3__222__compressed_pair_elemI6DrMeshLi1ELb0EED2Ev($this + 12 | 0);
 __ZNSt3__214__shared_countD2Ev($this);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 return __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(HEAP32[$this + 12 >> 2] | 0, $S) | 0;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 return __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($this) {
 $this = $this | 0;
 if (!(__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) | 0)) _free(HEAP32[$this >> 2] | 0);
 return;
}

function __ZNSt3__211char_traitsIcE6assignEPcmc($__s, $__n, $__a) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__a = $__a | 0;
 if ($__n | 0) _memset($__s | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc($__a) | 0) & 255 | 0, $__n | 0) | 0;
 return $__s | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE($this, $S) {
 $this = $this | 0;
 $S = $S | 0;
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this + 8 | 0, $S);
 return;
}

function __sapp_call_cleanup() {
 if (HEAP8[58681] & 1) return;
 if (HEAP32[14646] | 0) FUNCTION_TABLE_v[HEAP32[58584 >> 2] & 7](); else if (HEAP32[14652] | 0) FUNCTION_TABLE_vi[HEAP32[58608 >> 2] & 127](HEAP32[14649] | 0);
 HEAP8[58681] = 1;
 return;
}

function dynCall_iidiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iidiiii[index & 1](a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function _sgl_pop_pipeline() {
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2834, 23853);
 if ((HEAP32[541438] | 0) > 0) {
  HEAP32[541438] = (HEAP32[541438] | 0) + -1;
  return;
 } else {
  HEAP32[541377] = 5;
  return;
 }
}

function __ZN6DrRect11bottomRightEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $call = 0;
 $call = __ZN6DrRect5rightEv($this) | 0;
 __ZN7DrPointC2Eii($agg$result, $call, __ZN6DrRect6bottomEv($this) | 0);
 return;
}

function __sg_strempty($str) {
 $str = $str | 0;
 var $str$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $str$addr = sp;
 HEAP32[$str$addr >> 2] = $str;
 STACKTOP = sp;
 return 0 == (HEAP8[HEAP32[$str$addr >> 2] >> 0] | 0) | 0;
}

function __ZNK9TPPLPointdvEd($agg$result, $this, $f) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $f = +$f;
 HEAPF64[$agg$result >> 3] = +HEAPF64[$this >> 3] / $f;
 HEAPF64[$agg$result + 8 >> 3] = +HEAPF64[$this + 8 >> 3] / $f;
 return;
}

function __ZN6DrRect10bottomLeftEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $call = 0;
 $call = __ZN6DrRect4leftEv($this) | 0;
 __ZN7DrPointC2Eii($agg$result, $call, __ZN6DrRect6bottomEv($this) | 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 HEAP32[$this + 4 >> 2] = (HEAP32[$this >> 2] | 0) + ($Index << 2);
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0;
}

function __sg_pixelformat_s($pfi) {
 $pfi = $pfi | 0;
 var $pfi$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $pfi$addr = sp;
 HEAP32[$pfi$addr >> 2] = $pfi;
 HEAP8[HEAP32[$pfi$addr >> 2] >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZNK12_GLOBAL__N_112OutputStream4backEv($this) {
 $this = $this | 0;
 var $0 = 0, $cond = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if (!$0) $cond = 0; else $cond = HEAP8[(HEAP32[$this >> 2] | 0) + ($0 + -1) >> 0] | 0;
 return $cond | 0;
}

function __ZN6DrRect8topRightEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $call = 0;
 $call = __ZN6DrRect5rightEv($this) | 0;
 __ZN7DrPointC2Eii($agg$result, $call, __ZN6DrRect3topEv($this) | 0);
 return;
}

function __ZN6DrRect7topLeftEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $call = 0;
 $call = __ZN6DrRect4leftEv($this) | 0;
 __ZN7DrPointC2Eii($agg$result, $call, __ZN6DrRect3topEv($this) | 0);
 return;
}

function _stbi__err($str) {
 $str = $str | 0;
 var $str$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $str$addr = sp;
 HEAP32[$str$addr >> 2] = $str;
 HEAP32[548289] = HEAP32[$str$addr >> 2];
 STACKTOP = sp;
 return 0;
}

function _pop_arg_long_double($arg, $ap) {
 $arg = $arg | 0;
 $ap = $ap | 0;
 var $5 = 0, $6 = 0.0;
 $5 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
 $6 = +HEAPF64[$5 >> 3];
 HEAP32[$ap >> 2] = $5 + 8;
 HEAPF64[$arg >> 3] = $6;
 return;
}

function __ZNK6DrVec33dotERKS_($this, $v_) {
 $this = $this | 0;
 $v_ = $v_ | 0;
 return +(+HEAPF32[$this >> 2] * +HEAPF32[$v_ >> 2] + +HEAPF32[$this + 4 >> 2] * +HEAPF32[$v_ + 4 >> 2] + +HEAPF32[$this + 8 >> 2] * +HEAPF32[$v_ + 8 >> 2]);
}

function __ZL8HMM_Mat4v($agg$result) {
 $agg$result = $agg$result | 0;
 var dest = 0, stop = 0;
 dest = $agg$result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZL8HMM_Vec3fff($agg$result, $X, $Y, $Z) {
 $agg$result = $agg$result | 0;
 $X = +$X;
 $Y = +$Y;
 $Z = +$Z;
 HEAPF32[$agg$result >> 2] = $X;
 HEAPF32[$agg$result + 4 >> 2] = $Y;
 HEAPF32[$agg$result + 8 >> 2] = $Z;
 return;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function _sgl_disable_texture() {
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2901, 23917);
 if (HEAP8[2165512] & 1) ___assert_fail(23883, 23371, 2902, 23917); else {
  HEAP8[2165536] = 0;
  return;
 }
}

function __ZNSt3__23setIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0;
}

function __ZN17meshopt_AllocatorC2Ev($this) {
 $this = $this | 0;
 var dest = 0, stop = 0;
 dest = $this;
 stop = dest + 100 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function _sgl_enable_texture() {
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2895, 23898);
 if (HEAP8[2165512] & 1) ___assert_fail(23883, 23371, 2896, 23898); else {
  HEAP8[2165536] = 1;
  return;
 }
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm($this, $Index) {
 $this = $this | 0;
 $Index = $Index | 0;
 HEAP32[$this + 4 >> 2] = (HEAP32[$this >> 2] | 0) + ($Index << 2);
 return;
}

function _sgl_begin_triangles() {
 if (-1412584499 != (HEAP32[541358] | 0)) ___assert_fail(23666, 23371, 2936, 23949);
 if (HEAP8[2165512] & 1) ___assert_fail(23883, 23371, 2937, 23949); else {
  __sgl_begin(3);
  return;
 }
}

function _sg_end_pass() {
 if (!(HEAP8[2164080] & 1)) ___assert_fail(21733, 21600, 14984, 23098);
 if (!(HEAP8[2164244] & 1)) return;
 __sg_end_pass();
 HEAP32[541059] = 0;
 HEAP32[541060] = 0;
 HEAP8[2164244] = 0;
 return;
}

function __sg_strptr($str) {
 $str = $str | 0;
 var $str$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $str$addr = sp;
 HEAP32[$str$addr >> 2] = $str;
 STACKTOP = sp;
 return HEAP32[$str$addr >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv($this) {
 $this = $this | 0;
 var $Last = 0;
 $Last = $this + 4 | 0;
 HEAP32[$Last >> 2] = (HEAP32[$Last >> 2] | 0) + -4;
 return;
}

function __ZN7DrColorC2Ej($this, $ui) {
 $this = $this | 0;
 $ui = $ui | 0;
 HEAP8[$this + 3 >> 0] = $ui >>> 24;
 HEAP8[$this >> 0] = $ui >>> 16;
 HEAP8[$this + 1 >> 0] = $ui >>> 8;
 HEAP8[$this + 2 >> 0] = $ui;
 return;
}

function __Z15check_pts_equaldddd($x1, $y1, $x2, $y2) {
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 return +Math_abs(+($x1 - $x2)) <= 2.220446049250313e-16 & +Math_abs(+($y1 - $y2)) <= 2.220446049250313e-16 | 0;
}

function __ZN8TPPLPoly5ClearEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) __ZdaPv($0);
 HEAP8[$this + 8 >> 0] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this >> 2] = 0;
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($this) {
 $this = $this | 0;
 var $2 = 0;
 if (!(HEAP32[$this + 4 >> 2] | 0)) $2 = 0; else $2 = (HEAP32[$this >> 2] | 0) != 0;
 return $2 | 0;
}

function __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($this, $First_, $Last_) {
 $this = $this | 0;
 $First_ = $First_ | 0;
 $Last_ = $Last_ | 0;
 HEAP32[$this >> 2] = $First_;
 HEAP32[$this + 4 >> 2] = $Last_;
 return;
}

function __Z17sg_apply_uniforms15sg_shader_stageiRK8sg_range($stage, $ub_index, $data) {
 $stage = $stage | 0;
 $ub_index = $ub_index | 0;
 $data = $data | 0;
 _sg_apply_uniforms($stage, $ub_index, $data);
 return;
}

function __sapp_call_init() {
 if (HEAP32[14644] | 0) FUNCTION_TABLE_v[HEAP32[14644] & 7](); else if (HEAP32[14650] | 0) FUNCTION_TABLE_vi[HEAP32[58600 >> 2] & 127](HEAP32[14649] | 0);
 HEAP8[58680] = 1;
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($this) {
 $this = $this | 0;
 var $2 = 0;
 if (!(HEAP32[$this >> 2] | 0)) $2 = 0; else $2 = (HEAP32[$this + 4 >> 2] | 0) == 0;
 return $2 | 0;
}

function __ZNK8DrBitmap4sizeEv($this) {
 $this = $this | 0;
 var $mul = 0;
 $mul = Math_imul(HEAP32[$this + 12 >> 2] | 0, HEAP32[$this + 8 >> 2] | 0) | 0;
 return Math_imul($mul, HEAP32[$this + 4 >> 2] | 0) | 0;
}

function __ZN8DrPointFC2E7DrPoint($this, $point) {
 $this = $this | 0;
 $point = $point | 0;
 HEAPF64[$this >> 3] = +(HEAP32[$point >> 2] | 0);
 HEAPF64[$this + 8 >> 3] = +(HEAP32[$point + 4 >> 2] | 0);
 return;
}

function __ZN8DrBitmapD2Ev($this) {
 $this = $this | 0;
 var $data = 0;
 $data = $this + 16 | 0;
 HEAP32[$this + 20 >> 2] = HEAP32[$data >> 2];
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($data);
 return;
}

function __ZNK8DrBitmap4rectEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN6DrRectC2Eiiii($agg$result, 0, 0, HEAP32[$this + 8 >> 2] | 0, HEAP32[$this + 12 >> 2] | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2 | 0;
}

function __ZN6DrVec3C2Efff($this, $x_, $y_, $z_) {
 $this = $this | 0;
 $x_ = +$x_;
 $y_ = +$y_;
 $z_ = +$z_;
 HEAPF32[$this >> 2] = $x_;
 HEAPF32[$this + 4 >> 2] = $y_;
 HEAPF32[$this + 8 >> 2] = $z_;
 return;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $retval$0 = 0;
 if ($r >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $r;
  $retval$0 = -1;
 } else $retval$0 = $r;
 return $retval$0 | 0;
}

function __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($this) {
 $this = $this | 0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($this, 92);
 return;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), a - c >>> 0 | 0) | 0;
}

function _fons__tmpfree($ptr, $up) {
 $ptr = $ptr | 0;
 $up = $up | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp + 4 >> 2] = $ptr;
 HEAP32[sp >> 2] = $up;
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($this) {
 $this = $this | 0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($this, 44);
 return;
}

function __Z6orientdddddd($px, $py, $qx, $qy, $rx, $ry) {
 $px = +$px;
 $py = +$py;
 $qx = +$qx;
 $qy = +$qy;
 $rx = +$rx;
 $ry = +$ry;
 return ($qy - $py) * ($rx - $qx) - ($qx - $px) * ($ry - $qy) < 0.0 | 0;
}

function __sg_gl_init_pixelformats_etc2() {
 __sg_pixelformat_sf(2164754);
 __sg_pixelformat_sf(2164760);
 __sg_pixelformat_sf(2164766);
 __sg_pixelformat_sf(2164772);
 __sg_pixelformat_sf(2164778);
 return;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memmove($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function __ZNSt3__210__list_impIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__list_impIN13TPPLPartition8DiagonalENS_9allocatorIS2_EEE5clearEv($this);
 return;
}

function __ZN8DrPointFaSERKS_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 HEAPF64[$this >> 3] = +HEAPF64[$other >> 3];
 HEAPF64[$this + 8 >> 3] = +HEAPF64[$other + 8 >> 3];
 return $this | 0;
}

function __ZN7DrPoint8toPointFEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN8DrPointFC2Edd($agg$result, +(HEAP32[$this >> 2] | 0), +(HEAP32[$this + 4 >> 2] | 0));
 return;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memcpy($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function __sapp_clear_drop_buffer() {
 if (!(HEAP8[58968] & 1)) return;
 if (!(HEAP32[14747] | 0)) ___assert_fail(21121, 16477, 2631, 28600);
 _memset(HEAP32[14747] | 0, 0, HEAP32[14746] | 0) | 0;
 return;
}

function ___DOUBLE_BITS_670($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __Z4distdddd($ax, $ay, $bx, $by) {
 $ax = +$ax;
 $ay = +$ay;
 $bx = +$bx;
 $by = +$by;
 var $sub = 0.0, $sub1 = 0.0;
 $sub = $ax - $bx;
 $sub1 = $ay - $by;
 return +($sub * $sub + $sub1 * $sub1);
}

function __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED2Ev($this);
 __ZdlPv($this);
 return;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __sg_gl_commit() {
 if (HEAP8[2164786] & 1) ___assert_fail(39739, 21600, 6938, 41013); else {
  __sg_gl_cache_clear_buffer_bindings(0);
  __sg_gl_cache_clear_texture_bindings(0);
  return;
 }
}

function __ZN7DrPointaSERKS_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 HEAP32[$this >> 2] = HEAP32[$other >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$other + 4 >> 2];
 return $this | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 return;
}

function __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__ptr, $__size) {
 $__ptr = $__ptr | 0;
 $__size = $__size | 0;
 __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == ($this + 12 | 0) | 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm($this, $sz) {
 $this = $this | 0;
 $sz = $sz | 0;
 return __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, $sz << 2) | 0;
}

function __ZN6DrMeshD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__213__vector_baseI6VertexNS_9allocatorIS1_EEED2Ev($this + 12 | 0);
 __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($this);
 return;
}

function __Z21meshopt_quantizeUnormfi($v, $N) {
 $v = +$v;
 $N = $N | 0;
 var $cond = 0.0;
 $cond = $v >= 0.0 ? $v : 0.0;
 return ~~(($cond <= 1.0 ? $cond : 1.0) * +((1 << $N) + -1 | 0) + .5) | 0;
}

function __ZN2Dr3MaxIiEET_RKS1_S3_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$a >> 2] | 0;
 $1 = HEAP32[$b >> 2] | 0;
 return (($0 | 0) > ($1 | 0) ? $0 : $1) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2 | 0;
}

function __Z12pseudo_angledd($dx, $dy) {
 $dx = +$dx;
 $dy = +$dy;
 var $div = 0.0;
 $div = $dx / (+Math_abs(+$dx) + +Math_abs(+$dy));
 return +(($dy > 0.0 ? 3.0 - $div : $div + 1.0) * .25);
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2 | 0;
}

function __ZN12_GLOBAL__N_110StringViewC2EPKc($this, $Str) {
 $this = $this | 0;
 $Str = $Str | 0;
 HEAP32[$this >> 2] = $Str;
 HEAP32[$this + 4 >> 2] = $Str + (_strlen($Str) | 0);
 return;
}

function __ZNSt13runtime_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 HEAP32[$this >> 2] = 16300;
 __ZNSt3__218__libcpp_refstringC2EPKc($this + 4 | 0, $msg);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == (HEAP32[$this + 4 >> 2] | 0) | 0;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (setTempRet0(b + d + (l >>> 0 < a >>> 0 | 0) >>> 0 | 0), l | 0) | 0;
}

function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 HEAP32[$this >> 2] = 16280;
 __ZNSt3__218__libcpp_refstringC2EPKc($this + 4 | 0, $msg);
 return;
}

function _strtol($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_735($s, $p, $base, -2147483648, 0) | 0;
 getTempRet0() | 0;
 return $0 | 0;
}

function __ZN6DrRect6bottomEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 return (HEAP32[$this + 4 >> 2] | 0) + (($0 | 0) > 0 ? $0 + -1 | 0 : 0) | 0;
}
function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($this, $N) {
 $this = $this | 0;
 $N = $N | 0;
 HEAP32[$this >> 2] = $N;
 HEAP32[$this + 4 >> 2] = 0;
 return;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $call = 0;
 $call = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$call >> 0] | 0) == ($c & 255) << 24 >> 24 ? $call : 0) | 0;
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[$func & 7]();
 _abort_message(51429, sp);
}

function __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 4096 >> 2] = $this;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) {
 $this = $this | 0;
 return $this | 0;
}

function __sapp_events_enabled() {
 var $3 = 0;
 if (!((HEAP32[14647] | 0) != 0 | (HEAP32[14653] | 0) != 0)) {
  $3 = 0;
  return $3 | 0;
 }
 $3 = HEAP8[58680] & 1;
 return $3 | 0;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this + 5 >> 0] | 0) HEAP8[HEAP32[$this >> 2] >> 0] = HEAP8[$this + 4 >> 0] | 0;
 return;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this + 8 >> 0] | 0) HEAP32[HEAP32[$this >> 2] >> 2] = HEAP32[$this + 4 >> 2];
 return;
}

function _stm_setup() {
 HEAP32[15454] = 0;
 HEAP32[15455] = 0;
 HEAP32[15456] = 0;
 HEAP32[15457] = 0;
 HEAP32[15454] = -1412584499;
 HEAPF64[7728] = +_stm_js_perfnow();
 return;
}

function __ZN6DrRect3topEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 12 >> 2] | 0;
 return (HEAP32[$this + 4 >> 2] | 0) + (($0 | 0) > 0 ? 0 : $0 + 1 | 0) | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($this, $Idx) {
 $this = $this | 0;
 $Idx = $Idx | 0;
 return HEAP32[(HEAP32[$this >> 2] | 0) + ($Idx << 2) >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == ($this + 12 | 0) | 0;
}

function __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this + 8 >> 0] | 0) HEAP32[HEAP32[$this >> 2] >> 2] = HEAP32[$this + 4 >> 2];
 return;
}

function _fons__tt_init($context) {
 $context = $context | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $context;
 STACKTOP = sp;
 return 1;
}

function __sg_gl_init_pixelformats_pvrtc() {
 __sg_pixelformat_sf(2164730);
 __sg_pixelformat_sf(2164736);
 __sg_pixelformat_sf(2164742);
 __sg_pixelformat_sf(2164748);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == ($this + 12 | 0) | 0;
}

function __ZN6DrRect5rightEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 return (HEAP32[$this >> 2] | 0) + (($0 | 0) > 0 ? $0 + -1 | 0 : 0) | 0;
}

function __sg_gl_init_pixelformats_rgtc() {
 __sg_pixelformat_sf(2164688);
 __sg_pixelformat_sf(2164694);
 __sg_pixelformat_sf(2164700);
 __sg_pixelformat_sf(2164706);
 return;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $2 = 0;
 if (!$type) $2 = 0; else $2 = (___dynamic_cast($type, 11360, 12560, 0) | 0) != 0 & 1;
 return $2 | 0;
}

function __Z8fast_modmm($i, $c) {
 $i = $i | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($i >>> 0 < $c >>> 0) $cond = $i; else $cond = ($i >>> 0) % ($c >>> 0) | 0;
 return $cond | 0;
}

function __ZN6DrRectC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 return;
}

function __ZN6DrRect4leftEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 return (HEAP32[$this >> 2] | 0) + (($0 | 0) > 0 ? 0 : $0 + 1 | 0) | 0;
}

function _sg_commit() {
 if (HEAP8[2164080] & 1) {
  __sg_commit();
  HEAP32[541057] = (HEAP32[541057] | 0) + 1;
  return;
 } else ___assert_fail(21733, 21600, 14997, 23110);
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__list_impI8TPPLPolyNS_9allocatorIS1_EEE5clearEv($this);
 return;
}

function __ZN8DrBitmap4copyEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN8DrBitmapC2ERKS_13Bitmap_Format($agg$result, $this, 4);
 return;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($this) {
 $this = $this | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$this >> 2];
 return;
}

function _fputs($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 var $call = 0;
 $call = _strlen($s) | 0;
 return ((_fwrite($s, 1, $call, $f) | 0) != ($call | 0)) << 31 >> 31 | 0;
}

function __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($this, $NewPos) {
 $this = $this | 0;
 $NewPos = $NewPos | 0;
 HEAP32[$this + 4 >> 2] = $NewPos;
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $retval$0 = 0;
 if (!$s) $retval$0 = 0; else $retval$0 = _wcrtomb($s, $wc, 0) | 0;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function _sgl_matrix_mode_projection() {
 if (-1412584499 == (HEAP32[541358] | 0)) {
  HEAP32[541503] = 1;
  return;
 } else ___assert_fail(23666, 23371, 3128, 24048);
}

function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_($P) {
 $P = $P | 0;
 return (HEAP8[$P + 5 >> 0] | 0) == 1 | 0;
}

function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_($P) {
 $P = $P | 0;
 return (HEAP8[$P + 7 >> 0] | 0) == 1 | 0;
}

function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_($P) {
 $P = $P | 0;
 return (HEAP8[$P + 6 >> 0] | 0) == 1 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($Q1, $Q2) {
 $Q1 = $Q1 | 0;
 $Q2 = $Q2 | 0;
 HEAP32[$Q1 >> 2] = HEAP32[$Q1 >> 2] | $Q2;
 return;
}

function _glVertexAttribDivisorANGLE($index, $divisor) {
 $index = $index | 0;
 $divisor = $divisor | 0;
 _glVertexAttribDivisor($index | 0, $divisor | 0);
 return;
}

function __ZNK8DrPointF8distanceERKS_($this, $to) {
 $this = $this | 0;
 $to = $to | 0;
 return +(+Math_sqrt(+(+__ZNK8DrPointF15distanceSquaredERKS_($this, $to))));
}

function __ZN7DrPointC2Eii($this, $x_, $y_) {
 $this = $this | 0;
 $x_ = $x_ | 0;
 $y_ = $y_ | 0;
 HEAP32[$this >> 2] = $x_;
 HEAP32[$this + 4 >> 2] = $y_;
 return;
}

function __ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEE16__on_zero_sharedEv($this) {
 $this = $this | 0;
 __ZN7DrImageD2Ev($this + 12 | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZN7DrPointC2Edd($this, $x_, $y_) {
 $this = $this | 0;
 $x_ = +$x_;
 $y_ = +$y_;
 HEAP32[$this >> 2] = ~~$x_;
 HEAP32[$this + 4 >> 2] = ~~$y_;
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 3](a1 | 0, a2 | 0, a3 | 0);
}

function __ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEE16__on_zero_sharedEv($this) {
 $this = $this | 0;
 __ZN6DrMeshD2Ev($this + 12 | 0);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) + (HEAP32[$this + 4 >> 2] << 2) | 0;
}

function __ZN8DrPointFC2Edd($this, $x_, $y_) {
 $this = $this | 0;
 $x_ = +$x_;
 $y_ = +$y_;
 HEAPF64[$this >> 3] = $x_;
 HEAPF64[$this + 8 >> 3] = $y_;
 return;
}

function __ZN6DrVec23setEff($this, $x_, $y_) {
 $this = $this | 0;
 $x_ = +$x_;
 $y_ = +$y_;
 HEAPF32[$this >> 2] = $x_;
 HEAPF32[$this + 4 >> 2] = $y_;
 return;
}

function __sgl_rewind() {
 HEAP32[541375] = 0;
 HEAP32[541369] = 0;
 HEAP32[541370] = 0;
 HEAP32[541371] = 0;
 HEAP32[541377] = 0;
 HEAP8[2165537] = 1;
 return;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function __ZNKSt3__26__treeIN13TPPLPartition12ScanLineEdgeENS_4lessIS2_EENS_9allocatorIS2_EEE10__root_ptrEv($this) {
 $this = $this | 0;
 return $this + 4 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZN6DrVec2C2Eff($this, $x_, $y_) {
 $this = $this | 0;
 $x_ = +$x_;
 $y_ = +$y_;
 HEAPF32[$this >> 2] = $x_;
 HEAPF32[$this + 4 >> 2] = $y_;
 return;
}

function __saudio_mutex_unlock($m) {
 $m = $m | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $m;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 HEAP8[$__c1 >> 0] = HEAP8[$__c2 >> 0] | 0;
 return;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __saudio_mutex_lock($m) {
 $m = $m | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $m;
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() | 0;
}

function __ZNK6DrMesh11vertexCountEv($this) {
 $this = $this | 0;
 return ((HEAP32[$this + 16 >> 2] | 0) - (HEAP32[$this + 12 >> 2] | 0) | 0) / 44 | 0 | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 return;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN6DrVec3C2Ev($this) {
 $this = $this | 0;
 HEAPF32[$this >> 2] = 0.0;
 HEAPF32[$this + 4 >> 2] = 0.0;
 HEAPF32[$this + 8 >> 2] = 0.0;
 return;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 16300;
 __ZNSt3__218__libcpp_refstringD2Ev($this + 4 | 0);
 return;
}

function __sg_validate_end() {
 if (HEAP32[541062] | 0) {
  _puts(36364) | 0;
  ___assert_fail(47680, 21600, 13268, 36406);
 } else return 1;
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return $this | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 16280;
 __ZNSt3__218__libcpp_refstringD2Ev($this + 4 | 0);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__26vectorINS0_INS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEEENS2_IS6_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 357913941;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZN10DrPolygonFC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 return;
}

function __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this) {
 $this = $this | 0;
 __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 1;
}

function __ZN13TPPLPartition12VertexSorterC2EPNS_14MonotoneVertexE($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 HEAP32[$this >> 2] = $v;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZNK12_GLOBAL__N_110StringView5emptyEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == (HEAP32[$this + 4 >> 2] | 0) | 0;
}

function __ZN13TPPLPartition15PartitionVertexC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this + 40 >> 2] = 0;
 HEAP32[$this + 44 >> 2] = 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __sg_gl_discard_backend() {
 if (HEAP8[2164784] & 1) {
  HEAP8[2164784] = 0;
  return;
 } else ___assert_fail(30012, 21600, 5667, 30025);
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 0;
}

function __ZN8TPPLPolyC2Ev($this) {
 $this = $this | 0;
 HEAP8[$this + 8 >> 0] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this >> 2] = 0;
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0;
}

function __sg_gl_init_pixelformats_s3tc() {
 __sg_pixelformat_sf(2164670);
 __sg_pixelformat_sf(2164676);
 __sg_pixelformat_sf(2164682);
 return;
}

function __sg_gl_init_pixelformats_bptc() {
 __sg_pixelformat_sf(2164712);
 __sg_pixelformat_sf(2164718);
 __sg_pixelformat_sf(2164724);
 return;
}

function __ZNK12_GLOBAL__N_110StringView4sizeEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0;
}

function __ZN12_GLOBAL__N_112OutputStreamC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this + 12 >> 2] = -1;
 HEAP32[$this + 16 >> 2] = -1;
 return;
}

function _sapp_metal_get_renderpass_descriptor() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10453, 21307);
 return 0;
}

function __sapp_emsc_update_mouse_lock_state() {
 if (!(HEAP8[58995] & 1)) return;
 HEAP8[58995] = 0;
 _sapp_js_request_pointerlock();
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 0;
}

function _sg_query_backend() {
 if (HEAP8[2164080] & 1) return HEAP32[541093] | 0; else ___assert_fail(21733, 21600, 14349, 21743);
 return 0;
}

function __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($this) {
 $this = $this | 0;
 __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this);
 return;
}

function __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($this) {
 $this = $this | 0;
 __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this);
 return;
}

function b3(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(3);
 return 0;
}

function _sapp_d3d11_get_render_target_view() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10521, 21420);
 return 0;
}

function _sapp_d3d11_get_depth_stencil_view() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10535, 21454);
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) == 0 | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return ___vfprintf_internal($f, $fmt, $ap, 1, 88) | 0;
}

function _sapp_wgpu_get_depth_stencil_view() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10590, 21562);
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function dynCall_idi(index, a1, a2) {
 index = index | 0;
 a1 = +a1;
 a2 = a2 | 0;
 return FUNCTION_TABLE_idi[index & 1](+a1, a2 | 0) | 0;
}

function __ZNK6DrMesh10indexCountEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return 11224;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return 11256;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return 11280;
}

function __ZNSt3__210shared_ptrI7DrImageE18__enable_weak_thisEz($this, $varargs) {
 $this = $this | 0;
 $varargs = $varargs | 0;
 return;
}

function _sapp_d3d11_get_device_context() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10512, 21390);
 return 0;
}

function _out($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s, $l, $f) | 0;
 return;
}

function __ZNSt3__210shared_ptrI6DrMeshE18__enable_weak_thisEz($this, $varargs) {
 $this = $this | 0;
 $varargs = $varargs | 0;
 return;
}

function __ZN10DrPolygonFD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__213__vector_baseI8DrPointFNS_9allocatorIS1_EEED2Ev($this);
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 127](a1 | 0, a2 | 0);
}

function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($this + 4 | 0) | 0;
}

function __ZN12_GLOBAL__N_110StringViewC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 return;
}

function b14(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(14);
}

function __ZN8TPPLPoly8GetPointEl($this, $i) {
 $this = $this | 0;
 $i = $i | 0;
 return (HEAP32[$this >> 2] | 0) + ($i * 24 | 0) | 0;
}

function _sapp_wgpu_get_resolve_view() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10576, 21535);
 return 0;
}

function __ZNKSt3__26vectorINS0_I8DrPointFNS_9allocatorIS1_EEEENS2_IS4_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 357913941;
}

function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($this + 4 | 0) | 0;
}

function __ZNK12_GLOBAL__N_110StringViewixEm($this) {
 $this = $this | 0;
 return __ZNK12_GLOBAL__N_110StringView5beginEv($this) | 0;
}

function __ZN8TPPLPolyD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) __ZdaPv($0);
 return;
}

function __ZN8TPPLPoly7SetHoleEb($this, $hole) {
 $this = $this | 0;
 $hole = $hole | 0;
 HEAP8[$this + 8 >> 0] = $hole & 1;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _sapp_wgpu_get_render_view() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10562, 21509);
 return 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_2089($data_) {
 $data_ = $data_ | 0;
 return $data_ + -12 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_3valEvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($rep) {
 $rep = $rep | 0;
 return $rep + 12 | 0;
}

function _sapp_metal_get_drawable() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10468, 21344);
 return 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__222__compressed_pair_elemI7DrImageLi1ELb0EED2Ev($this) {
 $this = $this | 0;
 __ZN7DrImageD2Ev($this);
 return;
}

function __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 0;
}

function __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function _sapp_metal_get_device() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10438, 21285);
 return 0;
}

function _sapp_d3d11_get_device() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10503, 21368);
 return 0;
}

function __sgl_discard_pipeline_pool() {
 _free(HEAP32[541437] | 0);
 HEAP32[541437] = 0;
 __sgl_discard_pool(2165732);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _sapp_wgpu_get_device() {
 if (HEAP8[58676] & 1) return 0; else ___assert_fail(21273, 16477, 10553, 21488);
 return 0;
}

function __ZNSt3__222__compressed_pair_elemI6DrMeshLi1ELb0EED2Ev($this) {
 $this = $this | 0;
 __ZN6DrMeshD2Ev($this);
 return;
}

function __ZN8TPPLPolyixEi($this, $i) {
 $this = $this | 0;
 $i = $i | 0;
 return (HEAP32[$this >> 2] | 0) + ($i * 24 | 0) | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __Z7cleanupv() {
 _sfetch_shutdown();
 _sfons_destroy(HEAP32[278872] | 0);
 _sgl_shutdown();
 _sg_shutdown();
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b7(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(7);
 return 0;
}

function __sgl_matrix() {
 return 2166028 + (HEAP32[541503] << 12) + (HEAP32[2166016 + (HEAP32[541503] << 2) >> 2] << 6) | 0;
}

function __ZNSt16invalid_argumentD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 4 >> 0] | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function ___cxx_global_var_init_1159() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(2193745);
 return;
}

function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN2Dr16RadiansToDegreesIdEET_RKS1_($rad) {
 $rad = $rad | 0;
 return +(+HEAPF64[$rad >> 3] * 57.29577951308232);
}

function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _strncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 ___stpncpy($d, $s, $n) | 0;
 return $d | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN10emscripten8internal6TypeIDIvvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIvE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDItvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDItE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIsvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIsE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDImvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDImE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIlvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIlE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIjvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIjE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIivE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIhvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIhE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIfvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIfE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIdvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIdE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIcvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIcE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIbvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIbE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIavE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIaE3getEv() | 0;
}

function __ZN7DrPointC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 3](a1 | 0) | 0;
}

function b13(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(13);
}

function __ZNKSt3__26vectorI8DrPointFNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 268435455;
}

function __ZNKSt3__26vectorI8DrBitmapNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 153391689;
}

function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _isxdigit($c) {
 $c = $c | 0;
 return ((($c | 32) + -97 | 0) >>> 0 < 6 | (_isdigit($c) | 0) != 0) & 1 | 0;
}

function ___cxx_global_var_init_1() {
 __ZNSt3__210shared_ptrI6DrMeshE11make_sharedIJEEES2_DpOT_(2186740);
 return;
}

function __ZNKSt3__26vectorI7DrPointNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 536870911;
}

function _sg_pop_debug_group() {
 if (HEAP8[2164080] & 1) return; else ___assert_fail(21733, 21600, 15091, 23352);
}

function __ZNKSt3__26vectorI6DrRectNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 268435455;
}

function __ZNK6DrVec311normSquaredEv($this) {
 $this = $this | 0;
 return +(+__ZNK6DrVec33dotERKS_($this, $this));
}

function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_112OutputStream9getBufferEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZNKSt3__26vectorI6VertexNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 97612893;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNK12_GLOBAL__N_110StringView3endEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr) {
 $__ptr = $__ptr | 0;
 __ZdlPv($__ptr);
 return;
}

function __ZNK7DrColor6greenFEv($this) {
 $this = $this | 0;
 return +(+(HEAPU8[$this + 1 >> 0] | 0) / 255.0);
}

function __ZNK7DrColor6alphaFEv($this) {
 $this = $this | 0;
 return +(+(HEAPU8[$this + 3 >> 0] | 0) / 255.0);
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZNK7DrColor5blueFEv($this) {
 $this = $this | 0;
 return +(+(HEAPU8[$this + 2 >> 0] | 0) / 255.0);
}

function __ZNK12_GLOBAL__N_110StringView5beginEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 127](a1 | 0);
}

function b6(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(6);
 return 0;
}

function __ZNKSt3__26vectorImNS_9allocatorImEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 1073741823;
}

function __ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 1073741823;
}

function __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNK8TPPLPoly6IsHoleEv($this) {
 $this = $this | 0;
 return (HEAP8[$this + 8 >> 0] | 0) != 0 | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 536870911;
}

function __ZNK8TPPLPoly5ValidEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 4 >> 2] | 0) > 2 | 0;
}

function __ZNK8TPPLPoly12GetNumPointsEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZNK7DrColor4redFEv($this) {
 $this = $this | 0;
 return +(+(HEAPU8[$this >> 0] | 0) / 255.0);
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function __saudio_has_callback() {
 return (HEAP32[544581] | 0 ? 1 : (HEAP32[544582] | 0) != 0) | 0;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c | 0;
 return $__c & 255 | 0;
}

function _llvm_round_f64(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s | 0;
 return _strlen($__s) | 0;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) {
 $this = $this | 0;
 return 1;
}

function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(12);
}

function __ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev($this) {
 $this = $this | 0;
 _llvm_trap();
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZN8TPPLPoly9GetPointsEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 return 11176;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 return 11184;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 return 11144;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 return 11152;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 return 11160;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 return 11168;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 return 11192;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 return 11136;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 return 11120;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 return 11128;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 return 11208;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 return 11200;
}

function __ZSt18uncaught_exceptionv() {
 return (__ZSt19uncaught_exceptionsv() | 0) > 0 | 0;
}

function __ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev($this) {
 $this = $this | 0;
 return;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0;
}

function _round(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function b5(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(5);
 return 0;
}

function _sapp_height() {
 return ((HEAP32[14675] | 0) > 0 ? HEAP32[14675] | 0 : 1) | 0;
}

function ___cxx_global_var_init_2() {
 HEAP32[546687] = 0;
 HEAP32[546688] = 0;
 return;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 return 3;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 return 2;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 return 5;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 return 4;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 return 5;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 return 4;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 return 1;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 return 6;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 return 7;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 return 7;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 return 0;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 return 0;
}

function _sapp_width() {
 return ((HEAP32[14674] | 0) > 0 ? HEAP32[14674] | 0 : 1) | 0;
}

function __ZNK7DrImage9getBitmapEv($this) {
 $this = $this | 0;
 return $this + 12 | 0;
}

function ___cxx_global_var_init_5() {
 __ZN6DrVec2C2Eff(2186776, 25.0, 25.0);
 return;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __sapp_html5_get_ask_leave_site() {
 return (HEAP8[58685] & 1 ? 1 : 0) | 0;
}

function ___cxx_global_var_init_7() {
 __ZN6DrVec2C2Eff(2186848, 0.0, 0.0);
 return;
}

function ___cxx_global_var_init_4() {
 __ZN6DrVec2C2Eff(2186768, 0.0, 0.0);
 return;
}

function ___cxx_global_var_init_6() {
 __ZN2Dr14IdentityMatrixEv(2186784);
 return;
}

function __ZSt19uncaught_exceptionsv() {
 return ___cxa_uncaught_exceptions() | 0;
}

function __ZNK7DrColor5greenEv($this) {
 $this = $this | 0;
 return $this + 1 | 0;
}

function __ZNK7DrColor5alphaEv($this) {
 $this = $this | 0;
 return $this + 3 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 return 11216;
}

function __ZN10DrPolygonF6pointsEv($this) {
 $this = $this | 0;
 return $this | 0;
}

function __sgl_matrix_projection() {
 return 2170124 + (HEAP32[541505] << 6) | 0;
}

function __ZNK7DrColor4blueEv($this) {
 $this = $this | 0;
 return $this + 2 | 0;
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(11);
}

function __sgl_matrix_modelview() {
 return 2166028 + (HEAP32[541504] << 6) | 0;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7]();
}

function _ldexp($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function __Zli3_ucy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $0 & 255 | 0;
}

function __sgl_matrix_texture() {
 return 2174220 + (HEAP32[541506] << 6) | 0;
}

function ___cxx_global_var_init_3() {
 HEAP32[546689] = HEAP32[3178];
 return;
}

function __GLOBAL__sub_I_bind_cpp() {
 ___cxx_global_var_init_1159();
 return;
}

function __ZNSt3__214__shared_countD2Ev($this) {
 $this = $this | 0;
 return;
}

function _islower($c) {
 $c = $c | 0;
 return ($c + -97 | 0) >>> 0 < 26 | 0;
}

function _isdigit($c) {
 $c = $c | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}

function __ZNK7DrColor3redEv($this) {
 $this = $this | 0;
 return $this | 0;
}

function __sapp_emsc_notify_keyboard_hidden() {
 HEAP8[58686] = 0;
 return;
}

function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 return 12592;
}

function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 return 12640;
}

function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 return 12632;
}

function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 return 12672;
}

function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 return 12664;
}

function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 return 12656;
}

function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 return 12648;
}

function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 return 12616;
}

function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 return 12680;
}

function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 return 12688;
}

function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 return 12608;
}

function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 return 12600;
}

function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 return 12624;
}

function ___em_js__sapp_js_remove_beforeunload_listener() {
 return 17284;
}

function ___em_js__sapp_js_remove_dragndrop_listeners() {
 return 20075;
}

function b4(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(4);
 return 0;
}

function ___em_js__sapp_js_remove_clipboard_listener() {
 return 17596;
}

function ___em_js__sapp_js_add_beforeunload_listener() {
 return 17056;
}

function __Znam($size) {
 $size = $size | 0;
 return __Znwm($size) | 0;
}

function __sg_discard_backend() {
 __sg_gl_discard_backend();
 return;
}

function ___cxx_global_var_init() {
 __ZN7state_tC2Ev(61840);
 return;
}

function ___em_js__sapp_js_add_dragndrop_listeners() {
 return 18150;
}

function b1(p0, p1) {
 p0 = +p0;
 p1 = p1 | 0;
 abort(1);
 return 0;
}

function ___em_js__sapp_js_add_clipboard_listener() {
 return 17369;
}

function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 __ZdlPv($ptr);
 return;
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}

function ___em_js__sfetch_js_send_head_request() {
 return 24094;
}

function ___em_js__sapp_js_request_pointerlock() {
 return 20834;
}

function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function ___em_js__sfetch_js_send_get_request() {
 return 24544;
}

function ___em_js__sapp_js_fetch_dropped_file() {
 return 19397;
}

function ___em_js__sapp_js_unfocus_textfield() {
 return 16982;
}

function ___em_js__sapp_js_dropped_file_size() {
 return 19243;
}

function b10(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(10);
}

function __sg_validate_begin() {
 HEAP32[541062] = 0;
 return;
}

function ___em_js__sapp_js_exit_pointerlock() {
 return 20979;
}

function ___em_js__sapp_js_create_textfield() {
 return 16604;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function ___pthread_self_423() {
 return _pthread_self() | 0;
}

function ___em_js__saudio_js_buffer_frames() {
 return 28282;
}

function ___em_js__sapp_js_write_clipboard() {
 return 17667;
}

function ___em_js__sapp_js_focus_textfield() {
 return 16907;
}

function _sapp_heightf() {
 return +(+(_sapp_height() | 0));
}

function _dummy_560($fd) {
 $fd = $fd | 0;
 return $fd | 0;
}

function ___em_js__saudio_js_sample_rate() {
 return 28175;
}

function _sapp_widthf() {
 return +(+(_sapp_width() | 0));
}

function _sapp_sample_count() {
 return HEAP32[14676] | 0;
}

function ___em_js__sapp_js_pointer_init() {
 return 20462;
}

function _sapp_dpi_scale() {
 return +(+HEAPF32[14678]);
}

function __sg_end_pass() {
 __sg_gl_end_pass();
 return;
}

function ___em_js__saudio_js_shutdown() {
 return 27966;
}

function ___em_js__get_canvas_height() {
 return 45369;
}

function _sapp_gles2() {
 return HEAP8[58678] & 1 | 0;
}

function ___em_js__get_canvas_width() {
 return 45338;
}

function b2(p0) {
 p0 = p0 | 0;
 abort(2);
 return 0;
}

function __sfetch_ctx() {
 return HEAP32[544579] | 0;
}

function ___cxa_get_globals_fast() {
 return 2193724;
}

function __sg_commit() {
 __sg_gl_commit();
 return;
}

function ___em_js__stm_js_perfnow() {
 return 26089;
}

function ___em_js__saudio_js_init() {
 return 26364;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 1;
}

function ___errno_location() {
 return 2193224;
}

function __ZSt15get_new_handlerv() {
 return 0;
}

function __ZSt13get_terminatev() {
 return 5;
}

function stackSave() {
 return STACKTOP | 0;
}

function _sapp_depth_format() {
 return 42;
}

function _sapp_color_format() {
 return 23;
}

function b9(p0) {
 p0 = p0 | 0;
 abort(9);
}

function _pthread_self() {
 return 12956;
}

function b0() {
 abort(0);
 return 0;
}

function b8() {
 abort(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,_sapp_metal_get_renderpass_descriptor,_sapp_metal_get_drawable,_sapp_d3d11_get_render_target_view,_sapp_d3d11_get_depth_stencil_view,_sapp_wgpu_get_render_view,_sapp_wgpu_get_resolve_view,_sapp_wgpu_get_depth_stencil_view];
var FUNCTION_TABLE_idi = [b1,__sapp_emsc_frame];
var FUNCTION_TABLE_ii = [b2,___stdio_close,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv];
var FUNCTION_TABLE_iidiiii = [b3,_fmt_fp];
var FUNCTION_TABLE_iii = [b4,__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info,__ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iiii = [b5,___stdio_write,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__sapp_emsc_size_changed,__sfons_render_create,__sfons_render_resize,__sapp_emsc_mouse_cb,__sapp_emsc_wheel_cb,__sapp_emsc_key_cb,__sapp_emsc_touch_cb,__sapp_emsc_pointerlockchange_cb,__sapp_emsc_pointerlockerror_cb,__sapp_emsc_webgl_context_cb];
var FUNCTION_TABLE_iiiii = [b6,___stdio_seek];
var FUNCTION_TABLE_iiiiii = [b7,_stbi__resample_row_hv_2,_resample_row_1,_stbi__resample_row_v_2,_stbi__resample_row_h_2,_stbi__resample_row_generic,b7,b7];
var FUNCTION_TABLE_v = [b8,___cxa_pure_virtual__wrapper,__Z4initv,__ZL5framev,__Z7cleanupv,__ZL28demangling_terminate_handlerv,b8,b8];
var FUNCTION_TABLE_vi = [b9,__ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI6DrMeshNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7DrImageNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZL18emsc_load_callbackPK25sapp_html5_fetch_response,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev,__ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev,__ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev,__ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev
,__ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev,__ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev,__ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev,__ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev
,__ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev,__ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev,__ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev,__ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev,__ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev,__ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev,__ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev,__ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt16invalid_argumentD0Ev
,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__sfons_render_delete,__ZL12image_loadedPK17sfetch_response_t,__ZL18font_normal_loadedPK17sfetch_response_t,__ZL5inputPK10sapp_event,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_vii = [b10,__ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE
,__ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE
,__ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE,__sfetch_request_handler,_pop_arg_long_double
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viii = [b11,__sfons_render_update,_stbi__idct_block,b11];
var FUNCTION_TABLE_viiii = [b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi];
var FUNCTION_TABLE_viiiii = [b13,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__sfons_render_draw,b13,b13,b13];
var FUNCTION_TABLE_viiiiii = [b14,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,_stbi__YCbCr_to_RGB_row,b14,b14,b14];

  return { __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_demangle: ___cxa_demangle, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___em_js__get_canvas_height: ___em_js__get_canvas_height, ___em_js__get_canvas_width: ___em_js__get_canvas_width, ___em_js__sapp_js_add_beforeunload_listener: ___em_js__sapp_js_add_beforeunload_listener, ___em_js__sapp_js_add_clipboard_listener: ___em_js__sapp_js_add_clipboard_listener, ___em_js__sapp_js_add_dragndrop_listeners: ___em_js__sapp_js_add_dragndrop_listeners, ___em_js__sapp_js_create_textfield: ___em_js__sapp_js_create_textfield, ___em_js__sapp_js_dropped_file_size: ___em_js__sapp_js_dropped_file_size, ___em_js__sapp_js_exit_pointerlock: ___em_js__sapp_js_exit_pointerlock, ___em_js__sapp_js_fetch_dropped_file: ___em_js__sapp_js_fetch_dropped_file, ___em_js__sapp_js_focus_textfield: ___em_js__sapp_js_focus_textfield, ___em_js__sapp_js_pointer_init: ___em_js__sapp_js_pointer_init, ___em_js__sapp_js_remove_beforeunload_listener: ___em_js__sapp_js_remove_beforeunload_listener, ___em_js__sapp_js_remove_clipboard_listener: ___em_js__sapp_js_remove_clipboard_listener, ___em_js__sapp_js_remove_dragndrop_listeners: ___em_js__sapp_js_remove_dragndrop_listeners, ___em_js__sapp_js_request_pointerlock: ___em_js__sapp_js_request_pointerlock, ___em_js__sapp_js_unfocus_textfield: ___em_js__sapp_js_unfocus_textfield, ___em_js__sapp_js_write_clipboard: ___em_js__sapp_js_write_clipboard, ___em_js__saudio_js_buffer_frames: ___em_js__saudio_js_buffer_frames, ___em_js__saudio_js_init: ___em_js__saudio_js_init, ___em_js__saudio_js_sample_rate: ___em_js__saudio_js_sample_rate, ___em_js__saudio_js_shutdown: ___em_js__saudio_js_shutdown, ___em_js__sfetch_js_send_get_request: ___em_js__sfetch_js_send_get_request, ___em_js__sfetch_js_send_head_request: ___em_js__sfetch_js_send_head_request, ___em_js__stm_js_perfnow: ___em_js__stm_js_perfnow, ___embind_register_native_and_builtin_types: ___embind_register_native_and_builtin_types, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __sapp_emsc_begin_drop: __sapp_emsc_begin_drop, __sapp_emsc_drop: __sapp_emsc_drop, __sapp_emsc_end_drop: __sapp_emsc_end_drop, __sapp_emsc_invoke_fetch_cb: __sapp_emsc_invoke_fetch_cb, __sapp_emsc_notify_keyboard_hidden: __sapp_emsc_notify_keyboard_hidden, __sapp_emsc_onpaste: __sapp_emsc_onpaste, __sapp_html5_get_ask_leave_site: __sapp_html5_get_ask_leave_site, __saudio_emsc_pull: __saudio_emsc_pull, __sfetch_emsc_failed_buffer_too_small: __sfetch_emsc_failed_buffer_too_small, __sfetch_emsc_failed_http_status: __sfetch_emsc_failed_http_status, __sfetch_emsc_get_response: __sfetch_emsc_get_response, __sfetch_emsc_head_response: __sfetch_emsc_head_response, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_round_f64: _llvm_round_f64, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _round: _round, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_idi: dynCall_idi, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___em_js__get_canvas_height = Module["___em_js__get_canvas_height"] = asm["___em_js__get_canvas_height"];
var ___em_js__get_canvas_width = Module["___em_js__get_canvas_width"] = asm["___em_js__get_canvas_width"];
var ___em_js__sapp_js_add_beforeunload_listener = Module["___em_js__sapp_js_add_beforeunload_listener"] = asm["___em_js__sapp_js_add_beforeunload_listener"];
var ___em_js__sapp_js_add_clipboard_listener = Module["___em_js__sapp_js_add_clipboard_listener"] = asm["___em_js__sapp_js_add_clipboard_listener"];
var ___em_js__sapp_js_add_dragndrop_listeners = Module["___em_js__sapp_js_add_dragndrop_listeners"] = asm["___em_js__sapp_js_add_dragndrop_listeners"];
var ___em_js__sapp_js_create_textfield = Module["___em_js__sapp_js_create_textfield"] = asm["___em_js__sapp_js_create_textfield"];
var ___em_js__sapp_js_dropped_file_size = Module["___em_js__sapp_js_dropped_file_size"] = asm["___em_js__sapp_js_dropped_file_size"];
var ___em_js__sapp_js_exit_pointerlock = Module["___em_js__sapp_js_exit_pointerlock"] = asm["___em_js__sapp_js_exit_pointerlock"];
var ___em_js__sapp_js_fetch_dropped_file = Module["___em_js__sapp_js_fetch_dropped_file"] = asm["___em_js__sapp_js_fetch_dropped_file"];
var ___em_js__sapp_js_focus_textfield = Module["___em_js__sapp_js_focus_textfield"] = asm["___em_js__sapp_js_focus_textfield"];
var ___em_js__sapp_js_pointer_init = Module["___em_js__sapp_js_pointer_init"] = asm["___em_js__sapp_js_pointer_init"];
var ___em_js__sapp_js_remove_beforeunload_listener = Module["___em_js__sapp_js_remove_beforeunload_listener"] = asm["___em_js__sapp_js_remove_beforeunload_listener"];
var ___em_js__sapp_js_remove_clipboard_listener = Module["___em_js__sapp_js_remove_clipboard_listener"] = asm["___em_js__sapp_js_remove_clipboard_listener"];
var ___em_js__sapp_js_remove_dragndrop_listeners = Module["___em_js__sapp_js_remove_dragndrop_listeners"] = asm["___em_js__sapp_js_remove_dragndrop_listeners"];
var ___em_js__sapp_js_request_pointerlock = Module["___em_js__sapp_js_request_pointerlock"] = asm["___em_js__sapp_js_request_pointerlock"];
var ___em_js__sapp_js_unfocus_textfield = Module["___em_js__sapp_js_unfocus_textfield"] = asm["___em_js__sapp_js_unfocus_textfield"];
var ___em_js__sapp_js_write_clipboard = Module["___em_js__sapp_js_write_clipboard"] = asm["___em_js__sapp_js_write_clipboard"];
var ___em_js__saudio_js_buffer_frames = Module["___em_js__saudio_js_buffer_frames"] = asm["___em_js__saudio_js_buffer_frames"];
var ___em_js__saudio_js_init = Module["___em_js__saudio_js_init"] = asm["___em_js__saudio_js_init"];
var ___em_js__saudio_js_sample_rate = Module["___em_js__saudio_js_sample_rate"] = asm["___em_js__saudio_js_sample_rate"];
var ___em_js__saudio_js_shutdown = Module["___em_js__saudio_js_shutdown"] = asm["___em_js__saudio_js_shutdown"];
var ___em_js__sfetch_js_send_get_request = Module["___em_js__sfetch_js_send_get_request"] = asm["___em_js__sfetch_js_send_get_request"];
var ___em_js__sfetch_js_send_head_request = Module["___em_js__sfetch_js_send_head_request"] = asm["___em_js__sfetch_js_send_head_request"];
var ___em_js__stm_js_perfnow = Module["___em_js__stm_js_perfnow"] = asm["___em_js__stm_js_perfnow"];
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = asm["___embind_register_native_and_builtin_types"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __sapp_emsc_begin_drop = Module["__sapp_emsc_begin_drop"] = asm["__sapp_emsc_begin_drop"];
var __sapp_emsc_drop = Module["__sapp_emsc_drop"] = asm["__sapp_emsc_drop"];
var __sapp_emsc_end_drop = Module["__sapp_emsc_end_drop"] = asm["__sapp_emsc_end_drop"];
var __sapp_emsc_invoke_fetch_cb = Module["__sapp_emsc_invoke_fetch_cb"] = asm["__sapp_emsc_invoke_fetch_cb"];
var __sapp_emsc_notify_keyboard_hidden = Module["__sapp_emsc_notify_keyboard_hidden"] = asm["__sapp_emsc_notify_keyboard_hidden"];
var __sapp_emsc_onpaste = Module["__sapp_emsc_onpaste"] = asm["__sapp_emsc_onpaste"];
var __sapp_html5_get_ask_leave_site = Module["__sapp_html5_get_ask_leave_site"] = asm["__sapp_html5_get_ask_leave_site"];
var __saudio_emsc_pull = Module["__saudio_emsc_pull"] = asm["__saudio_emsc_pull"];
var __sfetch_emsc_failed_buffer_too_small = Module["__sfetch_emsc_failed_buffer_too_small"] = asm["__sfetch_emsc_failed_buffer_too_small"];
var __sfetch_emsc_failed_http_status = Module["__sfetch_emsc_failed_http_status"] = asm["__sfetch_emsc_failed_http_status"];
var __sfetch_emsc_get_response = Module["__sfetch_emsc_get_response"] = asm["__sfetch_emsc_get_response"];
var __sfetch_emsc_head_response = Module["__sfetch_emsc_head_response"] = asm["__sfetch_emsc_head_response"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _round = Module["_round"] = asm["_round"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_idi = Module["dynCall_idi"] = asm["dynCall_idi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;











































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {


    var ret = Module['_main'](argc, argv);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}







